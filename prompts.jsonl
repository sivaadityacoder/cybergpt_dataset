{"report_id": "861940", "title": "OAuth `redirect_uri` bypass using IDN homograph attack resulting in user's access token leakage", "reporter": "yassineaboukir", "company": "Semrush", "status": "Resolved", "vulnerability": {"weakness": "Information Disclosure", "technique": "IDN Homograph Attack", "vector": "OAuth redirect_uri parameter validation bypass"}, "severity": {"initial": "High", "final": "Medium", "cvss_score": 6.4}, "bounty": {"awarded": true, "amount": "Hidden"}, "timeline": [{"date_utc": "2020-04-29T03:28:00Z", "event": "Report submitted by yassineaboukir."}, {"date_utc": "2020-04-30T11:56:00Z", "event": "Report status changed to Triaged."}, {"date_utc": "2020-05-08T09:14:00Z", "event": "Severity updated from High to Medium (6.4)."}, {"date_utc": "2020-05-08T09:16:00Z", "event": "Bounty awarded to the reporter."}, {"date_utc": "2020-05-08T09:23:00Z", "event": "Reporter confirmed the fix is working."}, {"date_utc": "2020-05-12T10:51:00Z", "event": "Report status changed to Resolved."}, {"date_utc": "2020-06-18T14:33:00Z", "event": "Report disclosed to the public."}], "summary": "The SEMrush OAuth implementation failed to properly validate the `redirect_uri` parameter. This was bypassed using an IDN (Internationalized Domain Name) homograph attack, where characters from different alphabets look identical (e.g., Latin 'e' vs. Cyrillic 'е'). This flaw allowed an attacker to leak a user's access token to a malicious domain.", "proof_of_concept": "The attacker crafts a malicious authorization URL where the `redirect_uri` points to a domain they control, but which looks identical to a legitimate Semrush domain. For example: `redirect_uri=https://oauth.sеmrush.com` (using a Cyrillic 'е'). When a user authorizes the application, their OAuth access code is sent to this malicious, look-alike domain.", "impact_assessment": {"attacker_capabilities": ["Get user ID, email, and list of projects.", "View results of the user's site audit feature.", "Increase web limit counters temporarily."], "limitations": ["The leaked token expires in 7 days.", "Web limit counters reset every 24 hours.", "The token does not allow the attacker to change, create, or delete any data or objects."]}, "resolution": "The issue was fixed by Semrush, and the fix was confirmed by the reporter. The likely fix involves normalizing Unicode characters in the `redirect_uri` to a standard form (like Punycode) before validation, preventing the system from being tricked by visually similar characters."}
{"report_id": "835437", "title": "Access Token Smuggling from my.playstation.com via Referer Header", "reporter": "nnez", "company": "PlayStation", "status": "Resolved", "vulnerability": {"weakness": "Violation of Secure Design Principles", "technique": "Chained Open Redirect", "vector": "Referer Header Leak"}, "severity": {"value": "High", "range": "7-8.9"}, "bounty": {"awarded": true, "amount_usd": 1000}, "timeline": [{"date_utc": "2020-03-31T16:45:00Z", "event": "Report submitted by nnez."}, {"date_utc": "2020-04-01T09:53:00Z", "event": "Report status changed to Triaged."}, {"date_utc": "2020-04-07T16:02:00Z", "event": "Bounty of $1,000 awarded to the reporter."}, {"date_utc": "2020-04-15T20:28:00Z", "event": "Report status initially changed to Resolved."}, {"date_utc": "2020-05-05T17:26:00Z", "event": "Report status changed to Reopened after further discussion."}, {"date_utc": "2020-05-11T17:06:00Z", "event": "Report status changed back to Resolved."}, {"date_utc": "2021-01-12T01:40:00Z", "event": "Report disclosed to the public."}], "summary": "The researcher discovered a method to steal a user's access token by chaining together two separate open redirect vulnerabilities and exploiting a URL parsing flaw. A primary redirector on my.playstation.com was tricked into redirecting to a secondary vulnerable redirector on docs.playstation.com, which would then redirect to an attacker-controlled site.", "proof_of_concept": "The core of the exploit involved manipulating URL parameters and fragments. By adding a '?' to the end of a `returnRoute` parameter inside the URL's hash fragment, the researcher tricked the JavaScript on the page into encoding the access_token (which is normally in the hash) into the query parameters of the next redirection URL. This made the token visible in the Referer header, allowing it to be stolen by the attacker's server.", "impact_assessment": {"attacker_capabilities": ["An attacker could steal a victim's access token for my.playstation.com.", "The token grants access to resources and data associated with the victim's PlayStation account, as defined by the token's scope."], "limitations": []}, "resolution": "The issue was resolved by PlayStation. The fix likely involved correcting the URL parsing logic to prevent parameters in the hash fragment from being improperly encoded and moved into the query string, and potentially adding stricter validation on the redirect endpoints."}
{"id": 265943, "title": "Stealing SSO Login Tokens from snappublisher.snapchat.com", "target": "Snapchat", "reporter": "coolboss", "severity": "High", "weakness": "Authentication Bypass", "bounty": 7500, "description": "Attacker chained multiple flaws in Snapchat's SSO and SnapPublisher to steal SSO login tokens, enabling full account takeover.", "attack_flow": ["User is logged into accounts.snapchat.com.", "Attacker forces victim via CSRF to log into attacker's SnapPublisher account.", "Victim's browser visits crafted SSO URL with referrer parameter pointing to malicious SVG hosted on snappublisher.snapchat.com Google Cloud Storage bucket.", "Snapchat SSO flow redirects with token in #hashfragment.", "Hash fragment is preserved during 302/307 redirects to attacker's controlled file.", "Malicious SVG runs JavaScript and logs the SSO token.", "Attacker uses stolen token to log into victim's SnapPublisher account."], "vulnerabilities": ["Unrestricted referrer parameter accepts any SnapPublisher URL and hash fragments.", "SSO flow allows hash fragment forwarding.", "CSRF login flaw due to missing state parameter.", "Persistent SSO tokens that do not expire after use.", "SVG upload allows XSS execution."], "impact": ["Full SnapPublisher account takeover.", "Ability to make API requests as victim."], "recommendations": ["Add state parameter to SSO login flow.", "Block hash fragments in referrer parameter.", "Restrict referrer parameter to exact safe URLs.", "Make SSO login tokens one-time use.", "Block or sanitize SVG uploads."], "timeline": {"reported": "2017-09-05T07:03:00Z", "disclosed": "2021-07-29T22:37:00Z"}, "poc": "Visit crafted URL while logged into Snapchat to leak SSO token via malicious SVG.", "references": ["https://accounts.snapchat.com/accounts/sso", "https://snappublisher.snapchat.com/sso_continue"]}
{"id": 921780, "title": "OTP Login Bypass via user_id Manipulation", "target": "Snapchat", "reporter": "korniltsev", "severity": "Critical", "weakness": "Improper Authentication", "description": "The Snapchat OTP login/logout flow trusted the user_id parameter from the client. An attacker could replace their own user_id with the victim's user_id in the logout request, receive an OTP token for the victim, and then log in as the victim.", "attack_flow": ["Attacker logs into their own Snapchat account.", "Attacker sends /scauth/otp/droid/logout request but replaces their user_id with victim's user_id.", "Server returns SUCCESS and includes an OTP token for the victim.", "Attacker sends /scauth/otp/login request with victim's username and stolen OTP token.", "Server logs attacker in as victim."], "vulnerabilities": ["No verification that user_id in logout request matches the authenticated user.", "OTP token issued without proper authorization check.", "Victim's user_id easily obtainable from friend requests."], "impact": ["Full account takeover of any Snapchat user if their user_id is known."], "recommendations": ["Verify that user_id in sensitive requests matches the authenticated session.", "Do not issue OTP tokens based solely on user_id without authentication.", "Avoid exposing user_id in publicly accessible contexts."], "timeline": {"reported": "2020-07-13T02:18:00Z", "disclosed": "2021-09-03T09:12:00Z"}, "poc": "Send /scauth/otp/droid/logout with victim's user_id to get OTP token, then /scauth/otp/login with that token to log in as victim."}
